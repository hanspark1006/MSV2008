
Backend.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e400  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001574  0800e590  0800e590  0000f590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb04  0800fb04  00013588  2**0
                  CONTENTS
  4 .ARM          00000008  0800fb04  0800fb04  00010b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fb0c  0800fb0c  00013588  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fb0c  0800fb0c  00010b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fb10  0800fb10  00010b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000100  20000000  0800fb14  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00001588  10000000  0800fc14  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00013464  20000100  20000100  00014100  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20013564  20013564  00014100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00013588  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029a8d  00000000  00000000  000135b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006a6b  00000000  00000000  0003d045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002298  00000000  00000000  00043ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001abf  00000000  00000000  00045d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028bdd  00000000  00000000  00047807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002db04  00000000  00000000  000703e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d619a  00000000  00000000  0009dee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00174082  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000093b4  00000000  00000000  001740c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  0017d47c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000100 	.word	0x20000100
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e578 	.word	0x0800e578

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000104 	.word	0x20000104
 80001cc:	0800e578 	.word	0x0800e578

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <push_event0>:
int m_event_register(event_queue_observer_t *pEvent);
void m_event_queue_clear(void);
int m_event_push(uint32_t evt, uint32_t param1, uint32_t param2, uint32_t param3, void* p_event_data, uint32_t event_data_size);
void m_event_dispatch(void);

inline static uint32_t push_event0(event_type_t event)                                      { return m_event_push(event, 0, 0, 0, NULL, 0); }
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af02      	add	r7, sp, #8
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
 800057a:	79f8      	ldrb	r0, [r7, #7]
 800057c:	2300      	movs	r3, #0
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	2300      	movs	r3, #0
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	2300      	movs	r3, #0
 8000586:	2200      	movs	r2, #0
 8000588:	2100      	movs	r1, #0
 800058a:	f002 fff3 	bl	8003574 <m_event_push>
 800058e:	4603      	mov	r3, r0
 8000590:	4618      	mov	r0, r3
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}

08000598 <app_config_init>:
};

app_config_t *m_app_cfg = &def_config;
/* Private function prototypes -----------------------------------------------*/
int app_config_init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0

		LOG_DBG("Load configuration OK!!");
		return 0;
	}while(0);
#endif
	err_code = app_config_reset();
 800059e:	f000 f825 	bl	80005ec <app_config_reset>
 80005a2:	6078      	str	r0, [r7, #4]
	RETURN_IF_ERROR(err_code);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d013      	beq.n	80005d2 <app_config_init+0x3a>
 80005aa:	4b0c      	ldr	r3, [pc, #48]	@ (80005dc <app_config_init+0x44>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d003      	beq.n	80005ba <app_config_init+0x22>
 80005b2:	490b      	ldr	r1, [pc, #44]	@ (80005e0 <app_config_init+0x48>)
 80005b4:	480b      	ldr	r0, [pc, #44]	@ (80005e4 <app_config_init+0x4c>)
 80005b6:	f000 fa0f 	bl	80009d8 <Printf>
 80005ba:	4b08      	ldr	r3, [pc, #32]	@ (80005dc <app_config_init+0x44>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d005      	beq.n	80005ce <app_config_init+0x36>
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	222c      	movs	r2, #44	@ 0x2c
 80005c6:	4906      	ldr	r1, [pc, #24]	@ (80005e0 <app_config_init+0x48>)
 80005c8:	4807      	ldr	r0, [pc, #28]	@ (80005e8 <app_config_init+0x50>)
 80005ca:	f000 fa05 	bl	80009d8 <Printf>
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	e000      	b.n	80005d4 <app_config_init+0x3c>

	return err_code;
 80005d2:	687b      	ldr	r3, [r7, #4]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20002adc 	.word	0x20002adc
 80005e0:	0800f770 	.word	0x0800f770
 80005e4:	0800e590 	.word	0x0800e590
 80005e8:	0800e5bc 	.word	0x0800e5bc

080005ec <app_config_reset>:

int app_config_reset(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
	int err_code;

	LOG_INF("Reset Configuration");
 80005f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000668 <app_config_reset+0x7c>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b03      	cmp	r3, #3
 80005f8:	d903      	bls.n	8000602 <app_config_reset+0x16>
 80005fa:	491c      	ldr	r1, [pc, #112]	@ (800066c <app_config_reset+0x80>)
 80005fc:	481c      	ldr	r0, [pc, #112]	@ (8000670 <app_config_reset+0x84>)
 80005fe:	f000 f9eb 	bl	80009d8 <Printf>

	memcpy(m_app_cfg, &def_config, sizeof(app_config_t));
 8000602:	4b1c      	ldr	r3, [pc, #112]	@ (8000674 <app_config_reset+0x88>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a1c      	ldr	r2, [pc, #112]	@ (8000678 <app_config_reset+0x8c>)
 8000608:	4618      	mov	r0, r3
 800060a:	4611      	mov	r1, r2
 800060c:	237a      	movs	r3, #122	@ 0x7a
 800060e:	461a      	mov	r2, r3
 8000610:	f00d fb66 	bl	800dce0 <memcpy>

	LOG_DBG("Set Default configuration");
 8000614:	4b14      	ldr	r3, [pc, #80]	@ (8000668 <app_config_reset+0x7c>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2b02      	cmp	r3, #2
 800061a:	d903      	bls.n	8000624 <app_config_reset+0x38>
 800061c:	4913      	ldr	r1, [pc, #76]	@ (800066c <app_config_reset+0x80>)
 800061e:	4817      	ldr	r0, [pc, #92]	@ (800067c <app_config_reset+0x90>)
 8000620:	f000 f9da 	bl	80009d8 <Printf>
	err_code = app_config_flash_renew(m_app_cfg);
 8000624:	4b13      	ldr	r3, [pc, #76]	@ (8000674 <app_config_reset+0x88>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4618      	mov	r0, r3
 800062a:	f000 f915 	bl	8000858 <app_config_flash_renew>
 800062e:	6078      	str	r0, [r7, #4]
	RETURN_IF_ERROR(err_code);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d013      	beq.n	800065e <app_config_reset+0x72>
 8000636:	4b0c      	ldr	r3, [pc, #48]	@ (8000668 <app_config_reset+0x7c>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d003      	beq.n	8000646 <app_config_reset+0x5a>
 800063e:	490b      	ldr	r1, [pc, #44]	@ (800066c <app_config_reset+0x80>)
 8000640:	480f      	ldr	r0, [pc, #60]	@ (8000680 <app_config_reset+0x94>)
 8000642:	f000 f9c9 	bl	80009d8 <Printf>
 8000646:	4b08      	ldr	r3, [pc, #32]	@ (8000668 <app_config_reset+0x7c>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d005      	beq.n	800065a <app_config_reset+0x6e>
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	223b      	movs	r2, #59	@ 0x3b
 8000652:	4906      	ldr	r1, [pc, #24]	@ (800066c <app_config_reset+0x80>)
 8000654:	480b      	ldr	r0, [pc, #44]	@ (8000684 <app_config_reset+0x98>)
 8000656:	f000 f9bf 	bl	80009d8 <Printf>
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	e000      	b.n	8000660 <app_config_reset+0x74>

	return 0;
 800065e:	2300      	movs	r3, #0
}
 8000660:	4618      	mov	r0, r3
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20002adc 	.word	0x20002adc
 800066c:	0800f780 	.word	0x0800f780
 8000670:	0800e5f4 	.word	0x0800e5f4
 8000674:	2000007c 	.word	0x2000007c
 8000678:	20000000 	.word	0x20000000
 800067c:	0800e614 	.word	0x0800e614
 8000680:	0800e590 	.word	0x0800e590
 8000684:	0800e5bc 	.word	0x0800e5bc

08000688 <app_config_save>:

int app_config_save(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
	int err_code;

	LOG_INF("Save configuration");
 800068e:	4b19      	ldr	r3, [pc, #100]	@ (80006f4 <app_config_save+0x6c>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b03      	cmp	r3, #3
 8000694:	d903      	bls.n	800069e <app_config_save+0x16>
 8000696:	4918      	ldr	r1, [pc, #96]	@ (80006f8 <app_config_save+0x70>)
 8000698:	4818      	ldr	r0, [pc, #96]	@ (80006fc <app_config_save+0x74>)
 800069a:	f000 f99d 	bl	80009d8 <Printf>

	err_code = app_config_flash_config_store(m_app_cfg);
 800069e:	4b18      	ldr	r3, [pc, #96]	@ (8000700 <app_config_save+0x78>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 f832 	bl	800070c <app_config_flash_config_store>
 80006a8:	6078      	str	r0, [r7, #4]
	if(err_code){
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d019      	beq.n	80006e4 <app_config_save+0x5c>
		push_event0(EVT_error_screen);
 80006b0:	200c      	movs	r0, #12
 80006b2:	f7ff ff5d 	bl	8000570 <push_event0>
		RETURN_IF_ERROR(err_code);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d013      	beq.n	80006e4 <app_config_save+0x5c>
 80006bc:	4b0d      	ldr	r3, [pc, #52]	@ (80006f4 <app_config_save+0x6c>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d003      	beq.n	80006cc <app_config_save+0x44>
 80006c4:	490c      	ldr	r1, [pc, #48]	@ (80006f8 <app_config_save+0x70>)
 80006c6:	480f      	ldr	r0, [pc, #60]	@ (8000704 <app_config_save+0x7c>)
 80006c8:	f000 f986 	bl	80009d8 <Printf>
 80006cc:	4b09      	ldr	r3, [pc, #36]	@ (80006f4 <app_config_save+0x6c>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d005      	beq.n	80006e0 <app_config_save+0x58>
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2249      	movs	r2, #73	@ 0x49
 80006d8:	4907      	ldr	r1, [pc, #28]	@ (80006f8 <app_config_save+0x70>)
 80006da:	480b      	ldr	r0, [pc, #44]	@ (8000708 <app_config_save+0x80>)
 80006dc:	f000 f97c 	bl	80009d8 <Printf>
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	e003      	b.n	80006ec <app_config_save+0x64>
	}

	push_event0(EVT_save_ok);
 80006e4:	200d      	movs	r0, #13
 80006e6:	f7ff ff43 	bl	8000570 <push_event0>
	return err_code;
 80006ea:	687b      	ldr	r3, [r7, #4]
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20002adc 	.word	0x20002adc
 80006f8:	0800f794 	.word	0x0800f794
 80006fc:	0800e63c 	.word	0x0800e63c
 8000700:	2000007c 	.word	0x2000007c
 8000704:	0800e590 	.word	0x0800e590
 8000708:	0800e5bc 	.word	0x0800e5bc

0800070c <app_config_flash_config_store>:
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
CCMRAM static app_cfg_flash_config_t	m_config;
/* Private function prototypes -----------------------------------------------*/
int app_config_flash_config_store(app_config_t *p_config)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
    int            err_code;

    NULL_PARAM_CHECK(p_config);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d113      	bne.n	8000742 <app_config_flash_config_store+0x36>
 800071a:	4b28      	ldr	r3, [pc, #160]	@ (80007bc <app_config_flash_config_store+0xb0>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d003      	beq.n	800072a <app_config_flash_config_store+0x1e>
 8000722:	4927      	ldr	r1, [pc, #156]	@ (80007c0 <app_config_flash_config_store+0xb4>)
 8000724:	4827      	ldr	r0, [pc, #156]	@ (80007c4 <app_config_flash_config_store+0xb8>)
 8000726:	f000 f957 	bl	80009d8 <Printf>
 800072a:	4b24      	ldr	r3, [pc, #144]	@ (80007bc <app_config_flash_config_store+0xb0>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d004      	beq.n	800073c <app_config_flash_config_store+0x30>
 8000732:	222d      	movs	r2, #45	@ 0x2d
 8000734:	4922      	ldr	r1, [pc, #136]	@ (80007c0 <app_config_flash_config_store+0xb4>)
 8000736:	4824      	ldr	r0, [pc, #144]	@ (80007c8 <app_config_flash_config_store+0xbc>)
 8000738:	f000 f94e 	bl	80009d8 <Printf>
 800073c:	f06f 0315 	mvn.w	r3, #21
 8000740:	e038      	b.n	80007b4 <app_config_flash_config_store+0xa8>

	if (p_config != &m_config.dev_db.data.dev_cfg)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4a21      	ldr	r2, [pc, #132]	@ (80007cc <app_config_flash_config_store+0xc0>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d007      	beq.n	800075a <app_config_flash_config_store+0x4e>
		memcpy(&m_config.dev_db.data.dev_cfg, p_config, sizeof(app_config_t));
 800074a:	4b21      	ldr	r3, [pc, #132]	@ (80007d0 <app_config_flash_config_store+0xc4>)
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	3308      	adds	r3, #8
 8000750:	4611      	mov	r1, r2
 8000752:	227a      	movs	r2, #122	@ 0x7a
 8000754:	4618      	mov	r0, r3
 8000756:	f00d fac3 	bl	800dce0 <memcpy>

    m_config.dev_db.data.valid = FLASH_CONFIG_VALID;
 800075a:	4b1d      	ldr	r3, [pc, #116]	@ (80007d0 <app_config_flash_config_store+0xc4>)
 800075c:	2218      	movs	r2, #24
 800075e:	601a      	str	r2, [r3, #0]
	m_config.dev_db.data.crc   = crc32_ieee((uint8_t*)&m_config.dev_db.data.dev_cfg, sizeof(app_config_t));
 8000760:	217a      	movs	r1, #122	@ 0x7a
 8000762:	481a      	ldr	r0, [pc, #104]	@ (80007cc <app_config_flash_config_store+0xc0>)
 8000764:	f004 fecc 	bl	8005500 <crc32_ieee>
 8000768:	4603      	mov	r3, r0
 800076a:	4a19      	ldr	r2, [pc, #100]	@ (80007d0 <app_config_flash_config_store+0xc4>)
 800076c:	6053      	str	r3, [r2, #4]

	err_code = m_flash_config_erase();
 800076e:	f001 f9eb 	bl	8001b48 <m_flash_config_erase>
 8000772:	60f8      	str	r0, [r7, #12]
	err_code |= m_flash_config_write(&m_config, sizeof(app_cfg_flash_config_t));
 8000774:	2184      	movs	r1, #132	@ 0x84
 8000776:	4816      	ldr	r0, [pc, #88]	@ (80007d0 <app_config_flash_config_store+0xc4>)
 8000778:	f001 fa4a 	bl	8001c10 <m_flash_config_write>
 800077c:	4602      	mov	r2, r0
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	4313      	orrs	r3, r2
 8000782:	60fb      	str	r3, [r7, #12]
    RETURN_IF_ERROR(err_code);
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d013      	beq.n	80007b2 <app_config_flash_config_store+0xa6>
 800078a:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <app_config_flash_config_store+0xb0>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d003      	beq.n	800079a <app_config_flash_config_store+0x8e>
 8000792:	490b      	ldr	r1, [pc, #44]	@ (80007c0 <app_config_flash_config_store+0xb4>)
 8000794:	480b      	ldr	r0, [pc, #44]	@ (80007c4 <app_config_flash_config_store+0xb8>)
 8000796:	f000 f91f 	bl	80009d8 <Printf>
 800079a:	4b08      	ldr	r3, [pc, #32]	@ (80007bc <app_config_flash_config_store+0xb0>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d005      	beq.n	80007ae <app_config_flash_config_store+0xa2>
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	2237      	movs	r2, #55	@ 0x37
 80007a6:	4906      	ldr	r1, [pc, #24]	@ (80007c0 <app_config_flash_config_store+0xb4>)
 80007a8:	480a      	ldr	r0, [pc, #40]	@ (80007d4 <app_config_flash_config_store+0xc8>)
 80007aa:	f000 f915 	bl	80009d8 <Printf>
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	e000      	b.n	80007b4 <app_config_flash_config_store+0xa8>

    return 0;
 80007b2:	2300      	movs	r3, #0
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20002adc 	.word	0x20002adc
 80007c0:	0800f7a4 	.word	0x0800f7a4
 80007c4:	0800e6d4 	.word	0x0800e6d4
 80007c8:	0800e708 	.word	0x0800e708
 80007cc:	10000008 	.word	0x10000008
 80007d0:	10000000 	.word	0x10000000
 80007d4:	0800e728 	.word	0x0800e728

080007d8 <set_default_fgpa_value>:

	return 0;
}

static void set_default_fgpa_value(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
	int i;

	memset(m_config.dev_db.data.dev_cfg.cfg.delay_time, 0, sizeof(uint16_t) * MAX_CHANNEL);
 80007de:	2210      	movs	r2, #16
 80007e0:	2100      	movs	r1, #0
 80007e2:	481a      	ldr	r0, [pc, #104]	@ (800084c <set_default_fgpa_value+0x74>)
 80007e4:	f00d f9f2 	bl	800dbcc <memset>
	for(i = 0; i < MAX_CHANNEL;i++){
 80007e8:	2300      	movs	r3, #0
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	e00a      	b.n	8000804 <set_default_fgpa_value+0x2c>
		m_config.dev_db.data.dev_cfg.cfg.on_time[i] = 1000;
 80007ee:	4a18      	ldr	r2, [pc, #96]	@ (8000850 <set_default_fgpa_value+0x78>)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	3324      	adds	r3, #36	@ 0x24
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	4413      	add	r3, r2
 80007f8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007fc:	815a      	strh	r2, [r3, #10]
	for(i = 0; i < MAX_CHANNEL;i++){
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	3301      	adds	r3, #1
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2b07      	cmp	r3, #7
 8000808:	ddf1      	ble.n	80007ee <set_default_fgpa_value+0x16>
	}
	m_config.dev_db.data.dev_cfg.cfg.out_mode = eMODE_OUN_ONE_N;
 800080a:	4b11      	ldr	r3, [pc, #68]	@ (8000850 <set_default_fgpa_value+0x78>)
 800080c:	2201      	movs	r2, #1
 800080e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	m_config.dev_db.data.dev_cfg.cfg.out_cfg.one_n.input = 1;
 8000812:	4b0f      	ldr	r3, [pc, #60]	@ (8000850 <set_default_fgpa_value+0x78>)
 8000814:	2200      	movs	r2, #0
 8000816:	f042 0201 	orr.w	r2, r2, #1
 800081a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800081e:	2200      	movs	r2, #0
 8000820:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8000824:	2200      	movs	r2, #0
 8000826:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 800082a:	2200      	movs	r2, #0
 800082c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

	m_config.dev_db.data.valid = FLASH_CONFIG_VALID;
 8000830:	4b07      	ldr	r3, [pc, #28]	@ (8000850 <set_default_fgpa_value+0x78>)
 8000832:	2218      	movs	r2, #24
 8000834:	601a      	str	r2, [r3, #0]
	m_config.dev_db.data.crc = crc32_ieee((uint8_t *)&m_config.dev_db.data.dev_cfg, sizeof(app_config_t));
 8000836:	217a      	movs	r1, #122	@ 0x7a
 8000838:	4806      	ldr	r0, [pc, #24]	@ (8000854 <set_default_fgpa_value+0x7c>)
 800083a:	f004 fe61 	bl	8005500 <crc32_ieee>
 800083e:	4603      	mov	r3, r0
 8000840:	4a03      	ldr	r2, [pc, #12]	@ (8000850 <set_default_fgpa_value+0x78>)
 8000842:	6053      	str	r3, [r2, #4]
}
 8000844:	bf00      	nop
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	10000042 	.word	0x10000042
 8000850:	10000000 	.word	0x10000000
 8000854:	10000008 	.word	0x10000008

08000858 <app_config_flash_renew>:

int app_config_flash_renew(app_config_t* p_config)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	uint32_t err_code;

	LOG_INF("Write default config\n");
 8000860:	4b24      	ldr	r3, [pc, #144]	@ (80008f4 <app_config_flash_renew+0x9c>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b03      	cmp	r3, #3
 8000866:	d903      	bls.n	8000870 <app_config_flash_renew+0x18>
 8000868:	4923      	ldr	r1, [pc, #140]	@ (80008f8 <app_config_flash_renew+0xa0>)
 800086a:	4824      	ldr	r0, [pc, #144]	@ (80008fc <app_config_flash_renew+0xa4>)
 800086c:	f000 f8b4 	bl	80009d8 <Printf>

	if (p_config != &m_config.dev_db.data.dev_cfg)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4a23      	ldr	r2, [pc, #140]	@ (8000900 <app_config_flash_renew+0xa8>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d007      	beq.n	8000888 <app_config_flash_renew+0x30>
		memcpy(&m_config.dev_db.data.dev_cfg, p_config, sizeof(app_config_t));
 8000878:	4b22      	ldr	r3, [pc, #136]	@ (8000904 <app_config_flash_renew+0xac>)
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	3308      	adds	r3, #8
 800087e:	4611      	mov	r1, r2
 8000880:	227a      	movs	r2, #122	@ 0x7a
 8000882:	4618      	mov	r0, r3
 8000884:	f00d fa2c 	bl	800dce0 <memcpy>

	set_default_fgpa_value();
 8000888:	f7ff ffa6 	bl	80007d8 <set_default_fgpa_value>

	m_config.dev_db.data.valid = FLASH_CONFIG_VALID;
 800088c:	4b1d      	ldr	r3, [pc, #116]	@ (8000904 <app_config_flash_renew+0xac>)
 800088e:	2218      	movs	r2, #24
 8000890:	601a      	str	r2, [r3, #0]
	m_config.dev_db.data.crc   = crc32_ieee((uint8_t*)&m_config.dev_db.data.dev_cfg, sizeof(app_config_t));
 8000892:	217a      	movs	r1, #122	@ 0x7a
 8000894:	481a      	ldr	r0, [pc, #104]	@ (8000900 <app_config_flash_renew+0xa8>)
 8000896:	f004 fe33 	bl	8005500 <crc32_ieee>
 800089a:	4603      	mov	r3, r0
 800089c:	4a19      	ldr	r2, [pc, #100]	@ (8000904 <app_config_flash_renew+0xac>)
 800089e:	6053      	str	r3, [r2, #4]

	err_code = m_flash_config_erase();
 80008a0:	f001 f952 	bl	8001b48 <m_flash_config_erase>
 80008a4:	4603      	mov	r3, r0
 80008a6:	60fb      	str	r3, [r7, #12]
	err_code |= m_flash_config_write(&m_config, sizeof(app_cfg_flash_config_t));
 80008a8:	2184      	movs	r1, #132	@ 0x84
 80008aa:	4816      	ldr	r0, [pc, #88]	@ (8000904 <app_config_flash_renew+0xac>)
 80008ac:	f001 f9b0 	bl	8001c10 <m_flash_config_write>
 80008b0:	4603      	mov	r3, r0
 80008b2:	461a      	mov	r2, r3
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	4313      	orrs	r3, r2
 80008b8:	60fb      	str	r3, [r7, #12]
    RETURN_IF_ERROR(err_code);
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d013      	beq.n	80008e8 <app_config_flash_renew+0x90>
 80008c0:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <app_config_flash_renew+0x9c>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d003      	beq.n	80008d0 <app_config_flash_renew+0x78>
 80008c8:	490b      	ldr	r1, [pc, #44]	@ (80008f8 <app_config_flash_renew+0xa0>)
 80008ca:	480f      	ldr	r0, [pc, #60]	@ (8000908 <app_config_flash_renew+0xb0>)
 80008cc:	f000 f884 	bl	80009d8 <Printf>
 80008d0:	4b08      	ldr	r3, [pc, #32]	@ (80008f4 <app_config_flash_renew+0x9c>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d005      	beq.n	80008e4 <app_config_flash_renew+0x8c>
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	2270      	movs	r2, #112	@ 0x70
 80008dc:	4906      	ldr	r1, [pc, #24]	@ (80008f8 <app_config_flash_renew+0xa0>)
 80008de:	480b      	ldr	r0, [pc, #44]	@ (800090c <app_config_flash_renew+0xb4>)
 80008e0:	f000 f87a 	bl	80009d8 <Printf>
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	e000      	b.n	80008ea <app_config_flash_renew+0x92>

	return err_code;
 80008e8:	68fb      	ldr	r3, [r7, #12]
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3710      	adds	r7, #16
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20002adc 	.word	0x20002adc
 80008f8:	0800f7c4 	.word	0x0800f7c4
 80008fc:	0800e7a4 	.word	0x0800e7a4
 8000900:	10000008 	.word	0x10000008
 8000904:	10000000 	.word	0x10000000
 8000908:	0800e6d4 	.word	0x0800e6d4
 800090c:	0800e728 	.word	0x0800e728

08000910 <app_state_init>:
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
app_state_t m_app_state;
/* Private function prototypes -----------------------------------------------*/
void app_state_init(void)
{
 8000910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000912:	af00      	add	r7, sp, #0
	memcpy(&m_app_state.config, &m_app_cfg->cfg, sizeof(fpga_config_t));
 8000914:	4b14      	ldr	r3, [pc, #80]	@ (8000968 <app_state_init+0x58>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f103 022f 	add.w	r2, r3, #47	@ 0x2f
 800091c:	4b13      	ldr	r3, [pc, #76]	@ (800096c <app_state_init+0x5c>)
 800091e:	332f      	adds	r3, #47	@ 0x2f
 8000920:	4611      	mov	r1, r2
 8000922:	224b      	movs	r2, #75	@ 0x4b
 8000924:	4618      	mov	r0, r3
 8000926:	f00d f9db 	bl	800dce0 <memcpy>
	memcpy(&m_app_state.model,  &m_app_cfg->model, sizeof(app_config_model_t));
 800092a:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <app_state_init+0x58>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	461a      	mov	r2, r3
 8000930:	4b0e      	ldr	r3, [pc, #56]	@ (800096c <app_state_init+0x5c>)
 8000932:	4614      	mov	r4, r2
 8000934:	461e      	mov	r6, r3
 8000936:	f104 0c20 	add.w	ip, r4, #32
 800093a:	4635      	mov	r5, r6
 800093c:	4623      	mov	r3, r4
 800093e:	6818      	ldr	r0, [r3, #0]
 8000940:	6859      	ldr	r1, [r3, #4]
 8000942:	689a      	ldr	r2, [r3, #8]
 8000944:	68db      	ldr	r3, [r3, #12]
 8000946:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000948:	3410      	adds	r4, #16
 800094a:	3610      	adds	r6, #16
 800094c:	4564      	cmp	r4, ip
 800094e:	d1f4      	bne.n	800093a <app_state_init+0x2a>
 8000950:	4633      	mov	r3, r6
 8000952:	6820      	ldr	r0, [r4, #0]
 8000954:	6861      	ldr	r1, [r4, #4]
 8000956:	68a2      	ldr	r2, [r4, #8]
 8000958:	c307      	stmia	r3!, {r0, r1, r2}
 800095a:	89a2      	ldrh	r2, [r4, #12]
 800095c:	7ba1      	ldrb	r1, [r4, #14]
 800095e:	801a      	strh	r2, [r3, #0]
 8000960:	460a      	mov	r2, r1
 8000962:	709a      	strb	r2, [r3, #2]
}
 8000964:	bf00      	nop
 8000966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000968:	2000007c 	.word	0x2000007c
 800096c:	2000011c 	.word	0x2000011c

08000970 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	4a07      	ldr	r2, [pc, #28]	@ (800099c <vApplicationGetIdleTaskMemory+0x2c>)
 8000980:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	4a06      	ldr	r2, [pc, #24]	@ (80009a0 <vApplicationGetIdleTaskMemory+0x30>)
 8000986:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800098e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000990:	bf00      	nop
 8000992:	3714      	adds	r7, #20
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	20000198 	.word	0x20000198
 80009a0:	20000238 	.word	0x20000238

080009a4 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	4a07      	ldr	r2, [pc, #28]	@ (80009d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80009b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	4a06      	ldr	r2, [pc, #24]	@ (80009d4 <vApplicationGetTimerTaskMemory+0x30>)
 80009ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009c2:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80009c4:	bf00      	nop
 80009c6:	3714      	adds	r7, #20
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	20000a38 	.word	0x20000a38
 80009d4:	20000ad8 	.word	0x20000ad8

080009d8 <Printf>:
static osMutexId hPrintMutexHandle;
uint8_t log_level = LOG_NON_LEVEL;
/* Private function prototypes -----------------------------------------------*/

void Printf(const char *fmt, ...)
{
 80009d8:	b40f      	push	{r0, r1, r2, r3}
 80009da:	b580      	push	{r7, lr}
 80009dc:	b082      	sub	sp, #8
 80009de:	af00      	add	r7, sp, #0
	va_list args = {0};
 80009e0:	2300      	movs	r3, #0
 80009e2:	607b      	str	r3, [r7, #4]

	osMutexWait(hPrintMutexHandle, osWaitForever);
 80009e4:	4b13      	ldr	r3, [pc, #76]	@ (8000a34 <Printf+0x5c>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f04f 31ff 	mov.w	r1, #4294967295
 80009ec:	4618      	mov	r0, r3
 80009ee:	f009 fc3d 	bl	800a26c <osMutexWait>
	va_start(args, fmt);
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	607b      	str	r3, [r7, #4]
	vsnprintf(debug_buf, MAX_PRINT_BUF, fmt, args);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	21ff      	movs	r1, #255	@ 0xff
 80009fe:	480e      	ldr	r0, [pc, #56]	@ (8000a38 <Printf+0x60>)
 8000a00:	f00d f8c6 	bl	800db90 <vsniprintf>
	va_end(args);

	HAL_UART_Transmit(DBG_UART, (uint8_t *)debug_buf, strlen(debug_buf), 0xFFFFFF);
 8000a04:	480c      	ldr	r0, [pc, #48]	@ (8000a38 <Printf+0x60>)
 8000a06:	f7ff fbe3 	bl	80001d0 <strlen>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	b29a      	uxth	r2, r3
 8000a0e:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8000a12:	4909      	ldr	r1, [pc, #36]	@ (8000a38 <Printf+0x60>)
 8000a14:	4809      	ldr	r0, [pc, #36]	@ (8000a3c <Printf+0x64>)
 8000a16:	f008 fab7 	bl	8008f88 <HAL_UART_Transmit>
	osMutexRelease(hPrintMutexHandle);
 8000a1a:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <Printf+0x5c>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f009 fc72 	bl	800a308 <osMutexRelease>

}
 8000a24:	bf00      	nop
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a2e:	b004      	add	sp, #16
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	20002ad8 	.word	0x20002ad8
 8000a38:	10000084 	.word	0x10000084
 8000a3c:	20002c28 	.word	0x20002c28

08000a40 <hex_dump_line_print>:

static void hex_dump_line_print(const char *data, int length)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	6039      	str	r1, [r7, #0]
	for (int i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	e012      	b.n	8000a76 <hex_dump_line_print+0x36>
		if (i < length) {
 8000a50:	68fa      	ldr	r2, [r7, #12]
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	da08      	bge.n	8000a6a <hex_dump_line_print+0x2a>
			Printf("%02x ", (unsigned char)data[i] & 0xFFu);
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	4619      	mov	r1, r3
 8000a62:	480a      	ldr	r0, [pc, #40]	@ (8000a8c <hex_dump_line_print+0x4c>)
 8000a64:	f7ff ffb8 	bl	80009d8 <Printf>
 8000a68:	e002      	b.n	8000a70 <hex_dump_line_print+0x30>
		} else {
			Printf("   ");
 8000a6a:	4809      	ldr	r0, [pc, #36]	@ (8000a90 <hex_dump_line_print+0x50>)
 8000a6c:	f7ff ffb4 	bl	80009d8 <Printf>
	for (int i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	3301      	adds	r3, #1
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	2b07      	cmp	r3, #7
 8000a7a:	d9e9      	bls.n	8000a50 <hex_dump_line_print+0x10>
		}
	}
	Printf("\r\n");
 8000a7c:	4805      	ldr	r0, [pc, #20]	@ (8000a94 <hex_dump_line_print+0x54>)
 8000a7e:	f7ff ffab 	bl	80009d8 <Printf>
}
 8000a82:	bf00      	nop
 8000a84:	3710      	adds	r7, #16
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	0800e80c 	.word	0x0800e80c
 8000a90:	0800e814 	.word	0x0800e814
 8000a94:	0800e818 	.word	0x0800e818

08000a98 <dump_printf>:

void dump_printf(const void *data, int size, const char* str)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
	const char *data_buf = (const char *)data;
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	617b      	str	r3, [r7, #20]

	Printf(str);
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff ff95 	bl	80009d8 <Printf>
	Printf("\r\n");
 8000aae:	480d      	ldr	r0, [pc, #52]	@ (8000ae4 <dump_printf+0x4c>)
 8000ab0:	f7ff ff92 	bl	80009d8 <Printf>

	while(size > 0){
 8000ab4:	e00c      	b.n	8000ad0 <dump_printf+0x38>
		hex_dump_line_print(data_buf, size);
 8000ab6:	68b9      	ldr	r1, [r7, #8]
 8000ab8:	6978      	ldr	r0, [r7, #20]
 8000aba:	f7ff ffc1 	bl	8000a40 <hex_dump_line_print>
		if(size < HEXDUMP_BYTES_IN_LINE){
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	2b07      	cmp	r3, #7
 8000ac2:	d909      	bls.n	8000ad8 <dump_printf+0x40>
			break;
		}
		size -= HEXDUMP_BYTES_IN_LINE;
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	3b08      	subs	r3, #8
 8000ac8:	60bb      	str	r3, [r7, #8]
		data_buf += HEXDUMP_BYTES_IN_LINE;
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	3308      	adds	r3, #8
 8000ace:	617b      	str	r3, [r7, #20]
	while(size > 0){
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	dcef      	bgt.n	8000ab6 <dump_printf+0x1e>
	}
}
 8000ad6:	e000      	b.n	8000ada <dump_printf+0x42>
			break;
 8000ad8:	bf00      	nop
}
 8000ada:	bf00      	nop
 8000adc:	3718      	adds	r7, #24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	0800e818 	.word	0x0800e818

08000ae8 <Debug_Init>:

void Debug_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
	log_level = LOG_INF_LEVEL;
 8000aee:	4b09      	ldr	r3, [pc, #36]	@ (8000b14 <Debug_Init+0x2c>)
 8000af0:	2204      	movs	r2, #4
 8000af2:	701a      	strb	r2, [r3, #0]

	osMutexDef(hPrintMutex);
 8000af4:	2300      	movs	r3, #0
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	2300      	movs	r3, #0
 8000afa:	607b      	str	r3, [r7, #4]
	hPrintMutexHandle = osMutexCreate(osMutex(hPrintMutex));
 8000afc:	463b      	mov	r3, r7
 8000afe:	4618      	mov	r0, r3
 8000b00:	f009 fb9c 	bl	800a23c <osMutexCreate>
 8000b04:	4603      	mov	r3, r0
 8000b06:	4a04      	ldr	r2, [pc, #16]	@ (8000b18 <Debug_Init+0x30>)
 8000b08:	6013      	str	r3, [r2, #0]
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20002adc 	.word	0x20002adc
 8000b18:	20002ad8 	.word	0x20002ad8

08000b1c <push_event0>:
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af02      	add	r7, sp, #8
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
 8000b26:	79f8      	ldrb	r0, [r7, #7]
 8000b28:	2300      	movs	r3, #0
 8000b2a:	9301      	str	r3, [sp, #4]
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	9300      	str	r3, [sp, #0]
 8000b30:	2300      	movs	r3, #0
 8000b32:	2200      	movs	r2, #0
 8000b34:	2100      	movs	r1, #0
 8000b36:	f002 fd1d 	bl	8003574 <m_event_push>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <get_model>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
const char* get_model(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
	return "MSV2008";
 8000b48:	4b02      	ldr	r3, [pc, #8]	@ (8000b54 <get_model+0x10>)
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	0800e81c 	.word	0x0800e81c

08000b58 <banner>:

static void banner(void)
{
 8000b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af04      	add	r7, sp, #16
	LOG_INF("======================================================");
 8000b5e:	4b8b      	ldr	r3, [pc, #556]	@ (8000d8c <banner+0x234>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	2b03      	cmp	r3, #3
 8000b64:	d903      	bls.n	8000b6e <banner+0x16>
 8000b66:	498a      	ldr	r1, [pc, #552]	@ (8000d90 <banner+0x238>)
 8000b68:	488a      	ldr	r0, [pc, #552]	@ (8000d94 <banner+0x23c>)
 8000b6a:	f7ff ff35 	bl	80009d8 <Printf>
	LOG_INF("\t YNS Vision LED Controller");
 8000b6e:	4b87      	ldr	r3, [pc, #540]	@ (8000d8c <banner+0x234>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b03      	cmp	r3, #3
 8000b74:	d903      	bls.n	8000b7e <banner+0x26>
 8000b76:	4986      	ldr	r1, [pc, #536]	@ (8000d90 <banner+0x238>)
 8000b78:	4887      	ldr	r0, [pc, #540]	@ (8000d98 <banner+0x240>)
 8000b7a:	f7ff ff2d 	bl	80009d8 <Printf>
	LOG_INF("\t Build Data	: %04d-%02d-%02d %02d:%02d:%02d", BUILD_YEAR, BUILD_MONTH, BUILD_DAY,
 8000b7e:	4b83      	ldr	r3, [pc, #524]	@ (8000d8c <banner+0x234>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	2b03      	cmp	r3, #3
 8000b84:	f240 80d8 	bls.w	8000d38 <banner+0x1e0>
 8000b88:	2346      	movs	r3, #70	@ 0x46
 8000b8a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b8c:	d017      	beq.n	8000bbe <banner+0x66>
 8000b8e:	2332      	movs	r3, #50	@ 0x32
 8000b90:	3b30      	subs	r3, #48	@ 0x30
 8000b92:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b96:	fb03 f202 	mul.w	r2, r3, r2
 8000b9a:	2330      	movs	r3, #48	@ 0x30
 8000b9c:	3b30      	subs	r3, #48	@ 0x30
 8000b9e:	2164      	movs	r1, #100	@ 0x64
 8000ba0:	fb01 f303 	mul.w	r3, r1, r3
 8000ba4:	18d1      	adds	r1, r2, r3
 8000ba6:	2332      	movs	r3, #50	@ 0x32
 8000ba8:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8000bac:	4613      	mov	r3, r2
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	4413      	add	r3, r2
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	18ca      	adds	r2, r1, r3
 8000bb6:	2335      	movs	r3, #53	@ 0x35
 8000bb8:	3b30      	subs	r3, #48	@ 0x30
 8000bba:	18d5      	adds	r5, r2, r3
 8000bbc:	e000      	b.n	8000bc0 <banner+0x68>
 8000bbe:	2563      	movs	r5, #99	@ 0x63
 8000bc0:	2346      	movs	r3, #70	@ 0x46
 8000bc2:	2b3f      	cmp	r3, #63	@ 0x3f
 8000bc4:	d067      	beq.n	8000c96 <banner+0x13e>
 8000bc6:	2346      	movs	r3, #70	@ 0x46
 8000bc8:	2b4a      	cmp	r3, #74	@ 0x4a
 8000bca:	d105      	bne.n	8000bd8 <banner+0x80>
 8000bcc:	2365      	movs	r3, #101	@ 0x65
 8000bce:	2b61      	cmp	r3, #97	@ 0x61
 8000bd0:	d102      	bne.n	8000bd8 <banner+0x80>
 8000bd2:	2362      	movs	r3, #98	@ 0x62
 8000bd4:	2b6e      	cmp	r3, #110	@ 0x6e
 8000bd6:	d05c      	beq.n	8000c92 <banner+0x13a>
 8000bd8:	2346      	movs	r3, #70	@ 0x46
 8000bda:	2b46      	cmp	r3, #70	@ 0x46
 8000bdc:	d056      	beq.n	8000c8c <banner+0x134>
 8000bde:	2346      	movs	r3, #70	@ 0x46
 8000be0:	2b4d      	cmp	r3, #77	@ 0x4d
 8000be2:	d105      	bne.n	8000bf0 <banner+0x98>
 8000be4:	2365      	movs	r3, #101	@ 0x65
 8000be6:	2b61      	cmp	r3, #97	@ 0x61
 8000be8:	d102      	bne.n	8000bf0 <banner+0x98>
 8000bea:	2362      	movs	r3, #98	@ 0x62
 8000bec:	2b72      	cmp	r3, #114	@ 0x72
 8000bee:	d04b      	beq.n	8000c88 <banner+0x130>
 8000bf0:	2346      	movs	r3, #70	@ 0x46
 8000bf2:	2b41      	cmp	r3, #65	@ 0x41
 8000bf4:	d102      	bne.n	8000bfc <banner+0xa4>
 8000bf6:	2365      	movs	r3, #101	@ 0x65
 8000bf8:	2b70      	cmp	r3, #112	@ 0x70
 8000bfa:	d042      	beq.n	8000c82 <banner+0x12a>
 8000bfc:	2346      	movs	r3, #70	@ 0x46
 8000bfe:	2b4d      	cmp	r3, #77	@ 0x4d
 8000c00:	d105      	bne.n	8000c0e <banner+0xb6>
 8000c02:	2365      	movs	r3, #101	@ 0x65
 8000c04:	2b61      	cmp	r3, #97	@ 0x61
 8000c06:	d102      	bne.n	8000c0e <banner+0xb6>
 8000c08:	2362      	movs	r3, #98	@ 0x62
 8000c0a:	2b79      	cmp	r3, #121	@ 0x79
 8000c0c:	d036      	beq.n	8000c7c <banner+0x124>
 8000c0e:	2346      	movs	r3, #70	@ 0x46
 8000c10:	2b4a      	cmp	r3, #74	@ 0x4a
 8000c12:	d105      	bne.n	8000c20 <banner+0xc8>
 8000c14:	2365      	movs	r3, #101	@ 0x65
 8000c16:	2b75      	cmp	r3, #117	@ 0x75
 8000c18:	d102      	bne.n	8000c20 <banner+0xc8>
 8000c1a:	2362      	movs	r3, #98	@ 0x62
 8000c1c:	2b6e      	cmp	r3, #110	@ 0x6e
 8000c1e:	d02a      	beq.n	8000c76 <banner+0x11e>
 8000c20:	2346      	movs	r3, #70	@ 0x46
 8000c22:	2b4a      	cmp	r3, #74	@ 0x4a
 8000c24:	d105      	bne.n	8000c32 <banner+0xda>
 8000c26:	2365      	movs	r3, #101	@ 0x65
 8000c28:	2b75      	cmp	r3, #117	@ 0x75
 8000c2a:	d102      	bne.n	8000c32 <banner+0xda>
 8000c2c:	2362      	movs	r3, #98	@ 0x62
 8000c2e:	2b6c      	cmp	r3, #108	@ 0x6c
 8000c30:	d01e      	beq.n	8000c70 <banner+0x118>
 8000c32:	2346      	movs	r3, #70	@ 0x46
 8000c34:	2b41      	cmp	r3, #65	@ 0x41
 8000c36:	d102      	bne.n	8000c3e <banner+0xe6>
 8000c38:	2365      	movs	r3, #101	@ 0x65
 8000c3a:	2b75      	cmp	r3, #117	@ 0x75
 8000c3c:	d015      	beq.n	8000c6a <banner+0x112>
 8000c3e:	2346      	movs	r3, #70	@ 0x46
 8000c40:	2b53      	cmp	r3, #83	@ 0x53
 8000c42:	d010      	beq.n	8000c66 <banner+0x10e>
 8000c44:	2346      	movs	r3, #70	@ 0x46
 8000c46:	2b4f      	cmp	r3, #79	@ 0x4f
 8000c48:	d00b      	beq.n	8000c62 <banner+0x10a>
 8000c4a:	2346      	movs	r3, #70	@ 0x46
 8000c4c:	2b4e      	cmp	r3, #78	@ 0x4e
 8000c4e:	d006      	beq.n	8000c5e <banner+0x106>
 8000c50:	2346      	movs	r3, #70	@ 0x46
 8000c52:	2b44      	cmp	r3, #68	@ 0x44
 8000c54:	d101      	bne.n	8000c5a <banner+0x102>
 8000c56:	230c      	movs	r3, #12
 8000c58:	e009      	b.n	8000c6e <banner+0x116>
 8000c5a:	2363      	movs	r3, #99	@ 0x63
 8000c5c:	e007      	b.n	8000c6e <banner+0x116>
 8000c5e:	230b      	movs	r3, #11
 8000c60:	e005      	b.n	8000c6e <banner+0x116>
 8000c62:	230a      	movs	r3, #10
 8000c64:	e003      	b.n	8000c6e <banner+0x116>
 8000c66:	2309      	movs	r3, #9
 8000c68:	e001      	b.n	8000c6e <banner+0x116>
 8000c6a:	2308      	movs	r3, #8
 8000c6c:	e002      	b.n	8000c74 <banner+0x11c>
 8000c6e:	e001      	b.n	8000c74 <banner+0x11c>
 8000c70:	2307      	movs	r3, #7
 8000c72:	e002      	b.n	8000c7a <banner+0x122>
 8000c74:	e001      	b.n	8000c7a <banner+0x122>
 8000c76:	2306      	movs	r3, #6
 8000c78:	e002      	b.n	8000c80 <banner+0x128>
 8000c7a:	e001      	b.n	8000c80 <banner+0x128>
 8000c7c:	2305      	movs	r3, #5
 8000c7e:	e002      	b.n	8000c86 <banner+0x12e>
 8000c80:	e001      	b.n	8000c86 <banner+0x12e>
 8000c82:	2304      	movs	r3, #4
 8000c84:	e004      	b.n	8000c90 <banner+0x138>
 8000c86:	e003      	b.n	8000c90 <banner+0x138>
 8000c88:	2303      	movs	r3, #3
 8000c8a:	e005      	b.n	8000c98 <banner+0x140>
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	e003      	b.n	8000c98 <banner+0x140>
 8000c90:	e002      	b.n	8000c98 <banner+0x140>
 8000c92:	2301      	movs	r3, #1
 8000c94:	e000      	b.n	8000c98 <banner+0x140>
 8000c96:	2363      	movs	r3, #99	@ 0x63
 8000c98:	2246      	movs	r2, #70	@ 0x46
 8000c9a:	2a3f      	cmp	r2, #63	@ 0x3f
 8000c9c:	d010      	beq.n	8000cc0 <banner+0x168>
 8000c9e:	2232      	movs	r2, #50	@ 0x32
 8000ca0:	2a2f      	cmp	r2, #47	@ 0x2f
 8000ca2:	d908      	bls.n	8000cb6 <banner+0x15e>
 8000ca4:	2232      	movs	r2, #50	@ 0x32
 8000ca6:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8000caa:	460a      	mov	r2, r1
 8000cac:	0092      	lsls	r2, r2, #2
 8000cae:	440a      	add	r2, r1
 8000cb0:	0052      	lsls	r2, r2, #1
 8000cb2:	4611      	mov	r1, r2
 8000cb4:	e000      	b.n	8000cb8 <banner+0x160>
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	2231      	movs	r2, #49	@ 0x31
 8000cba:	3a30      	subs	r2, #48	@ 0x30
 8000cbc:	4411      	add	r1, r2
 8000cbe:	e000      	b.n	8000cc2 <banner+0x16a>
 8000cc0:	2163      	movs	r1, #99	@ 0x63
 8000cc2:	2231      	movs	r2, #49	@ 0x31
 8000cc4:	2a3f      	cmp	r2, #63	@ 0x3f
 8000cc6:	d00c      	beq.n	8000ce2 <banner+0x18a>
 8000cc8:	2231      	movs	r2, #49	@ 0x31
 8000cca:	f1a2 0030 	sub.w	r0, r2, #48	@ 0x30
 8000cce:	4602      	mov	r2, r0
 8000cd0:	0092      	lsls	r2, r2, #2
 8000cd2:	4402      	add	r2, r0
 8000cd4:	0052      	lsls	r2, r2, #1
 8000cd6:	4610      	mov	r0, r2
 8000cd8:	2236      	movs	r2, #54	@ 0x36
 8000cda:	4402      	add	r2, r0
 8000cdc:	f1a2 0030 	sub.w	r0, r2, #48	@ 0x30
 8000ce0:	e000      	b.n	8000ce4 <banner+0x18c>
 8000ce2:	2063      	movs	r0, #99	@ 0x63
 8000ce4:	2231      	movs	r2, #49	@ 0x31
 8000ce6:	2a3f      	cmp	r2, #63	@ 0x3f
 8000ce8:	d00c      	beq.n	8000d04 <banner+0x1ac>
 8000cea:	2231      	movs	r2, #49	@ 0x31
 8000cec:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8000cf0:	4622      	mov	r2, r4
 8000cf2:	0092      	lsls	r2, r2, #2
 8000cf4:	4422      	add	r2, r4
 8000cf6:	0052      	lsls	r2, r2, #1
 8000cf8:	4614      	mov	r4, r2
 8000cfa:	2238      	movs	r2, #56	@ 0x38
 8000cfc:	4422      	add	r2, r4
 8000cfe:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8000d02:	e000      	b.n	8000d06 <banner+0x1ae>
 8000d04:	2463      	movs	r4, #99	@ 0x63
 8000d06:	2231      	movs	r2, #49	@ 0x31
 8000d08:	2a3f      	cmp	r2, #63	@ 0x3f
 8000d0a:	d00b      	beq.n	8000d24 <banner+0x1cc>
 8000d0c:	2233      	movs	r2, #51	@ 0x33
 8000d0e:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 8000d12:	4632      	mov	r2, r6
 8000d14:	0092      	lsls	r2, r2, #2
 8000d16:	4432      	add	r2, r6
 8000d18:	0052      	lsls	r2, r2, #1
 8000d1a:	4616      	mov	r6, r2
 8000d1c:	2234      	movs	r2, #52	@ 0x34
 8000d1e:	4432      	add	r2, r6
 8000d20:	3a30      	subs	r2, #48	@ 0x30
 8000d22:	e000      	b.n	8000d26 <banner+0x1ce>
 8000d24:	2263      	movs	r2, #99	@ 0x63
 8000d26:	9203      	str	r2, [sp, #12]
 8000d28:	9402      	str	r4, [sp, #8]
 8000d2a:	9001      	str	r0, [sp, #4]
 8000d2c:	9100      	str	r1, [sp, #0]
 8000d2e:	462a      	mov	r2, r5
 8000d30:	4917      	ldr	r1, [pc, #92]	@ (8000d90 <banner+0x238>)
 8000d32:	481a      	ldr	r0, [pc, #104]	@ (8000d9c <banner+0x244>)
 8000d34:	f7ff fe50 	bl	80009d8 <Printf>
			BUILD_HOUR, BUILD_MIN, BUILD_SEC);
	LOG_INF("\tModel		: %s", get_model());
 8000d38:	4b14      	ldr	r3, [pc, #80]	@ (8000d8c <banner+0x234>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b03      	cmp	r3, #3
 8000d3e:	d907      	bls.n	8000d50 <banner+0x1f8>
 8000d40:	f7ff ff00 	bl	8000b44 <get_model>
 8000d44:	4603      	mov	r3, r0
 8000d46:	461a      	mov	r2, r3
 8000d48:	4911      	ldr	r1, [pc, #68]	@ (8000d90 <banner+0x238>)
 8000d4a:	4815      	ldr	r0, [pc, #84]	@ (8000da0 <banner+0x248>)
 8000d4c:	f7ff fe44 	bl	80009d8 <Printf>
	LOG_INF("\tVersion		: %s", MCU_VERSION);
 8000d50:	4b0e      	ldr	r3, [pc, #56]	@ (8000d8c <banner+0x234>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b03      	cmp	r3, #3
 8000d56:	d904      	bls.n	8000d62 <banner+0x20a>
 8000d58:	4a12      	ldr	r2, [pc, #72]	@ (8000da4 <banner+0x24c>)
 8000d5a:	490d      	ldr	r1, [pc, #52]	@ (8000d90 <banner+0x238>)
 8000d5c:	4812      	ldr	r0, [pc, #72]	@ (8000da8 <banner+0x250>)
 8000d5e:	f7ff fe3b 	bl	80009d8 <Printf>
	LOG_INF("\tFPGA 		: %s", FPGA_VERSION);
 8000d62:	4b0a      	ldr	r3, [pc, #40]	@ (8000d8c <banner+0x234>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b03      	cmp	r3, #3
 8000d68:	d904      	bls.n	8000d74 <banner+0x21c>
 8000d6a:	4a10      	ldr	r2, [pc, #64]	@ (8000dac <banner+0x254>)
 8000d6c:	4908      	ldr	r1, [pc, #32]	@ (8000d90 <banner+0x238>)
 8000d6e:	4810      	ldr	r0, [pc, #64]	@ (8000db0 <banner+0x258>)
 8000d70:	f7ff fe32 	bl	80009d8 <Printf>
	LOG_INF("======================================================");
 8000d74:	4b05      	ldr	r3, [pc, #20]	@ (8000d8c <banner+0x234>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b03      	cmp	r3, #3
 8000d7a:	d903      	bls.n	8000d84 <banner+0x22c>
 8000d7c:	4904      	ldr	r1, [pc, #16]	@ (8000d90 <banner+0x238>)
 8000d7e:	4805      	ldr	r0, [pc, #20]	@ (8000d94 <banner+0x23c>)
 8000d80:	f7ff fe2a 	bl	80009d8 <Printf>
}
 8000d84:	bf00      	nop
 8000d86:	3704      	adds	r7, #4
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d8c:	20002adc 	.word	0x20002adc
 8000d90:	0800f7dc 	.word	0x0800f7dc
 8000d94:	0800e824 	.word	0x0800e824
 8000d98:	0800e868 	.word	0x0800e868
 8000d9c:	0800e890 	.word	0x0800e890
 8000da0:	0800e8c8 	.word	0x0800e8c8
 8000da4:	0800e8e0 	.word	0x0800e8e0
 8000da8:	0800e8e8 	.word	0x0800e8e8
 8000dac:	0800e904 	.word	0x0800e904
 8000db0:	0800e90c 	.word	0x0800e90c

08000db4 <Initialize>:

    Jump_To_Application();
}

int Initialize(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
	int err_no = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	607b      	str	r3, [r7, #4]

	do{
		err_no = m_event_init();
 8000dbe:	f002 fce3 	bl	8003788 <m_event_init>
 8000dc2:	6078      	str	r0, [r7, #4]
		BREAK_IF_ERROR(err_no);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d012      	beq.n	8000df0 <Initialize+0x3c>
 8000dca:	4b40      	ldr	r3, [pc, #256]	@ (8000ecc <Initialize+0x118>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d003      	beq.n	8000dda <Initialize+0x26>
 8000dd2:	493f      	ldr	r1, [pc, #252]	@ (8000ed0 <Initialize+0x11c>)
 8000dd4:	483f      	ldr	r0, [pc, #252]	@ (8000ed4 <Initialize+0x120>)
 8000dd6:	f7ff fdff 	bl	80009d8 <Printf>
 8000dda:	4b3c      	ldr	r3, [pc, #240]	@ (8000ecc <Initialize+0x118>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d06b      	beq.n	8000eba <Initialize+0x106>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	22c3      	movs	r2, #195	@ 0xc3
 8000de6:	493a      	ldr	r1, [pc, #232]	@ (8000ed0 <Initialize+0x11c>)
 8000de8:	483b      	ldr	r0, [pc, #236]	@ (8000ed8 <Initialize+0x124>)
 8000dea:	f7ff fdf5 	bl	80009d8 <Printf>
 8000dee:	e064      	b.n	8000eba <Initialize+0x106>

		err_no = app_config_init();
 8000df0:	f7ff fbd2 	bl	8000598 <app_config_init>
 8000df4:	6078      	str	r0, [r7, #4]
		BREAK_IF_ERROR(err_no);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d012      	beq.n	8000e22 <Initialize+0x6e>
 8000dfc:	4b33      	ldr	r3, [pc, #204]	@ (8000ecc <Initialize+0x118>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d003      	beq.n	8000e0c <Initialize+0x58>
 8000e04:	4932      	ldr	r1, [pc, #200]	@ (8000ed0 <Initialize+0x11c>)
 8000e06:	4833      	ldr	r0, [pc, #204]	@ (8000ed4 <Initialize+0x120>)
 8000e08:	f7ff fde6 	bl	80009d8 <Printf>
 8000e0c:	4b2f      	ldr	r3, [pc, #188]	@ (8000ecc <Initialize+0x118>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d052      	beq.n	8000eba <Initialize+0x106>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	22c6      	movs	r2, #198	@ 0xc6
 8000e18:	492d      	ldr	r1, [pc, #180]	@ (8000ed0 <Initialize+0x11c>)
 8000e1a:	482f      	ldr	r0, [pc, #188]	@ (8000ed8 <Initialize+0x124>)
 8000e1c:	f7ff fddc 	bl	80009d8 <Printf>
 8000e20:	e04b      	b.n	8000eba <Initialize+0x106>

		app_state_init();
 8000e22:	f7ff fd75 	bl	8000910 <app_state_init>

		err_no = m_menu_normal_init();
 8000e26:	f003 f861 	bl	8003eec <m_menu_normal_init>
 8000e2a:	6078      	str	r0, [r7, #4]
		BREAK_IF_ERROR(err_no);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d012      	beq.n	8000e58 <Initialize+0xa4>
 8000e32:	4b26      	ldr	r3, [pc, #152]	@ (8000ecc <Initialize+0x118>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d003      	beq.n	8000e42 <Initialize+0x8e>
 8000e3a:	4925      	ldr	r1, [pc, #148]	@ (8000ed0 <Initialize+0x11c>)
 8000e3c:	4825      	ldr	r0, [pc, #148]	@ (8000ed4 <Initialize+0x120>)
 8000e3e:	f7ff fdcb 	bl	80009d8 <Printf>
 8000e42:	4b22      	ldr	r3, [pc, #136]	@ (8000ecc <Initialize+0x118>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d037      	beq.n	8000eba <Initialize+0x106>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	22cb      	movs	r2, #203	@ 0xcb
 8000e4e:	4920      	ldr	r1, [pc, #128]	@ (8000ed0 <Initialize+0x11c>)
 8000e50:	4821      	ldr	r0, [pc, #132]	@ (8000ed8 <Initialize+0x124>)
 8000e52:	f7ff fdc1 	bl	80009d8 <Printf>
 8000e56:	e030      	b.n	8000eba <Initialize+0x106>

		err_no = m_serial_init();
 8000e58:	f004 fae6 	bl	8005428 <m_serial_init>
 8000e5c:	6078      	str	r0, [r7, #4]
		BREAK_IF_ERROR(err_no);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d012      	beq.n	8000e8a <Initialize+0xd6>
 8000e64:	4b19      	ldr	r3, [pc, #100]	@ (8000ecc <Initialize+0x118>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d003      	beq.n	8000e74 <Initialize+0xc0>
 8000e6c:	4918      	ldr	r1, [pc, #96]	@ (8000ed0 <Initialize+0x11c>)
 8000e6e:	4819      	ldr	r0, [pc, #100]	@ (8000ed4 <Initialize+0x120>)
 8000e70:	f7ff fdb2 	bl	80009d8 <Printf>
 8000e74:	4b15      	ldr	r3, [pc, #84]	@ (8000ecc <Initialize+0x118>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d01e      	beq.n	8000eba <Initialize+0x106>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	22ce      	movs	r2, #206	@ 0xce
 8000e80:	4913      	ldr	r1, [pc, #76]	@ (8000ed0 <Initialize+0x11c>)
 8000e82:	4815      	ldr	r0, [pc, #84]	@ (8000ed8 <Initialize+0x124>)
 8000e84:	f7ff fda8 	bl	80009d8 <Printf>
 8000e88:	e017      	b.n	8000eba <Initialize+0x106>

		err_no = EthernetInit();
 8000e8a:	f002 fa73 	bl	8003374 <EthernetInit>
 8000e8e:	6078      	str	r0, [r7, #4]
		BREAK_IF_ERROR(err_no);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d011      	beq.n	8000eba <Initialize+0x106>
 8000e96:	4b0d      	ldr	r3, [pc, #52]	@ (8000ecc <Initialize+0x118>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <Initialize+0xf2>
 8000e9e:	490c      	ldr	r1, [pc, #48]	@ (8000ed0 <Initialize+0x11c>)
 8000ea0:	480c      	ldr	r0, [pc, #48]	@ (8000ed4 <Initialize+0x120>)
 8000ea2:	f7ff fd99 	bl	80009d8 <Printf>
 8000ea6:	4b09      	ldr	r3, [pc, #36]	@ (8000ecc <Initialize+0x118>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d005      	beq.n	8000eba <Initialize+0x106>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	22d1      	movs	r2, #209	@ 0xd1
 8000eb2:	4907      	ldr	r1, [pc, #28]	@ (8000ed0 <Initialize+0x11c>)
 8000eb4:	4808      	ldr	r0, [pc, #32]	@ (8000ed8 <Initialize+0x124>)
 8000eb6:	f7ff fd8f 	bl	80009d8 <Printf>
	}while(0);

	return errno;
 8000eba:	f00c fee5 	bl	800dc88 <__errno>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	681b      	ldr	r3, [r3, #0]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20002adc 	.word	0x20002adc
 8000ed0:	0800f7e4 	.word	0x0800f7e4
 8000ed4:	0800e924 	.word	0x0800e924
 8000ed8:	0800e944 	.word	0x0800e944

08000edc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000edc:	b5b0      	push	{r4, r5, r7, lr}
 8000ede:	b08a      	sub	sp, #40	@ 0x28
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee2:	f004 fed1 	bl	8005c88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee6:	f000 f863 	bl	8000fb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eea:	f000 f9f3 	bl	80012d4 <MX_GPIO_Init>
  MX_IWDG_Init();
 8000eee:	f000 f8f9 	bl	80010e4 <MX_IWDG_Init>
  MX_I2C1_Init();
 8000ef2:	f000 f8c9 	bl	8001088 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000ef6:	f000 f90f 	bl	8001118 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000efa:	f000 f943 	bl	8001184 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000efe:	f000 f96b 	bl	80011d8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000f02:	f000 f993 	bl	800122c <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000f06:	f000 f9bb 	bl	8001280 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  Debug_Init();
 8000f0a:	f7ff fded 	bl	8000ae8 <Debug_Init>
  banner();
 8000f0e:	f7ff fe23 	bl	8000b58 <banner>

  if(Initialize()){
 8000f12:	f7ff ff4f 	bl	8000db4 <Initialize>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d00d      	beq.n	8000f38 <main+0x5c>
	  LOG_ERR("Event queue Initialize Error!!");
 8000f1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000f90 <main+0xb4>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d003      	beq.n	8000f2c <main+0x50>
 8000f24:	491b      	ldr	r1, [pc, #108]	@ (8000f94 <main+0xb8>)
 8000f26:	481c      	ldr	r0, [pc, #112]	@ (8000f98 <main+0xbc>)
 8000f28:	f7ff fd56 	bl	80009d8 <Printf>
	  HAL_Delay(1000);
 8000f2c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f30:	f004 feec 	bl	8005d0c <HAL_Delay>
	  HAL_NVIC_SystemReset();
 8000f34:	f005 f807 	bl	8005f46 <HAL_NVIC_SystemReset>
  }
  LOG_DBG("Complete Initialize!!");
 8000f38:	4b15      	ldr	r3, [pc, #84]	@ (8000f90 <main+0xb4>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d903      	bls.n	8000f48 <main+0x6c>
 8000f40:	4914      	ldr	r1, [pc, #80]	@ (8000f94 <main+0xb8>)
 8000f42:	4816      	ldr	r0, [pc, #88]	@ (8000f9c <main+0xc0>)
 8000f44:	f7ff fd48 	bl	80009d8 <Printf>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of opLedTimer */
  osTimerDef(opLedTimer, optimerCb);
 8000f48:	4b15      	ldr	r3, [pc, #84]	@ (8000fa0 <main+0xc4>)
 8000f4a:	623b      	str	r3, [r7, #32]
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	627b      	str	r3, [r7, #36]	@ 0x24
  opLedTimerHandle = osTimerCreate(osTimer(opLedTimer), osTimerPeriodic, NULL);
 8000f50:	f107 0320 	add.w	r3, r7, #32
 8000f54:	2200      	movs	r2, #0
 8000f56:	2101      	movs	r1, #1
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f009 f8f7 	bl	800a14c <osTimerCreate>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	4a10      	ldr	r2, [pc, #64]	@ (8000fa4 <main+0xc8>)
 8000f62:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of EventTask */
  osThreadDef(EventTask, eventTask, osPriorityNormal, 0, 1024);
 8000f64:	4b10      	ldr	r3, [pc, #64]	@ (8000fa8 <main+0xcc>)
 8000f66:	1d3c      	adds	r4, r7, #4
 8000f68:	461d      	mov	r5, r3
 8000f6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f6e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EventTaskHandle = osThreadCreate(osThread(EventTask), NULL);
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f009 f885 	bl	800a08a <osThreadCreate>
 8000f80:	4603      	mov	r3, r0
 8000f82:	4a0a      	ldr	r2, [pc, #40]	@ (8000fac <main+0xd0>)
 8000f84:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f86:	f009 f879 	bl	800a07c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f8a:	bf00      	nop
 8000f8c:	e7fd      	b.n	8000f8a <main+0xae>
 8000f8e:	bf00      	nop
 8000f90:	20002adc 	.word	0x20002adc
 8000f94:	0800f7f0 	.word	0x0800f7f0
 8000f98:	0800e97c 	.word	0x0800e97c
 8000f9c:	0800e9a8 	.word	0x0800e9a8
 8000fa0:	0800148d 	.word	0x0800148d
 8000fa4:	20002cbc 	.word	0x20002cbc
 8000fa8:	0800e9d8 	.word	0x0800e9d8
 8000fac:	20002cb8 	.word	0x20002cb8

08000fb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b094      	sub	sp, #80	@ 0x50
 8000fb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb6:	f107 0320 	add.w	r3, r7, #32
 8000fba:	2230      	movs	r2, #48	@ 0x30
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f00c fe04 	bl	800dbcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	4b29      	ldr	r3, [pc, #164]	@ (8001080 <SystemClock_Config+0xd0>)
 8000fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fdc:	4a28      	ldr	r2, [pc, #160]	@ (8001080 <SystemClock_Config+0xd0>)
 8000fde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fe2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fe4:	4b26      	ldr	r3, [pc, #152]	@ (8001080 <SystemClock_Config+0xd0>)
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	4b23      	ldr	r3, [pc, #140]	@ (8001084 <SystemClock_Config+0xd4>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a22      	ldr	r2, [pc, #136]	@ (8001084 <SystemClock_Config+0xd4>)
 8000ffa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ffe:	6013      	str	r3, [r2, #0]
 8001000:	4b20      	ldr	r3, [pc, #128]	@ (8001084 <SystemClock_Config+0xd4>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800100c:	2309      	movs	r3, #9
 800100e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001010:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001014:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001016:	2301      	movs	r3, #1
 8001018:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800101a:	2302      	movs	r3, #2
 800101c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800101e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001022:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001024:	2319      	movs	r3, #25
 8001026:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001028:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800102c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800102e:	2302      	movs	r3, #2
 8001030:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001032:	2304      	movs	r3, #4
 8001034:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001036:	f107 0320 	add.w	r3, r7, #32
 800103a:	4618      	mov	r0, r3
 800103c:	f006 fd1a 	bl	8007a74 <HAL_RCC_OscConfig>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001046:	f000 fa3d 	bl	80014c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800104a:	230f      	movs	r3, #15
 800104c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800104e:	2302      	movs	r3, #2
 8001050:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001056:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800105a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800105c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001060:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001062:	f107 030c 	add.w	r3, r7, #12
 8001066:	2105      	movs	r1, #5
 8001068:	4618      	mov	r0, r3
 800106a:	f006 ff7b 	bl	8007f64 <HAL_RCC_ClockConfig>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001074:	f000 fa26 	bl	80014c4 <Error_Handler>
  }
}
 8001078:	bf00      	nop
 800107a:	3750      	adds	r7, #80	@ 0x50
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40023800 	.word	0x40023800
 8001084:	40007000 	.word	0x40007000

08001088 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800108c:	4b12      	ldr	r3, [pc, #72]	@ (80010d8 <MX_I2C1_Init+0x50>)
 800108e:	4a13      	ldr	r2, [pc, #76]	@ (80010dc <MX_I2C1_Init+0x54>)
 8001090:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001092:	4b11      	ldr	r3, [pc, #68]	@ (80010d8 <MX_I2C1_Init+0x50>)
 8001094:	4a12      	ldr	r2, [pc, #72]	@ (80010e0 <MX_I2C1_Init+0x58>)
 8001096:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001098:	4b0f      	ldr	r3, [pc, #60]	@ (80010d8 <MX_I2C1_Init+0x50>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800109e:	4b0e      	ldr	r3, [pc, #56]	@ (80010d8 <MX_I2C1_Init+0x50>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010a4:	4b0c      	ldr	r3, [pc, #48]	@ (80010d8 <MX_I2C1_Init+0x50>)
 80010a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010ac:	4b0a      	ldr	r3, [pc, #40]	@ (80010d8 <MX_I2C1_Init+0x50>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010b2:	4b09      	ldr	r3, [pc, #36]	@ (80010d8 <MX_I2C1_Init+0x50>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010b8:	4b07      	ldr	r3, [pc, #28]	@ (80010d8 <MX_I2C1_Init+0x50>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010be:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <MX_I2C1_Init+0x50>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010c4:	4804      	ldr	r0, [pc, #16]	@ (80010d8 <MX_I2C1_Init+0x50>)
 80010c6:	f005 fc6f 	bl	80069a8 <HAL_I2C_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010d0:	f000 f9f8 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20002ae0 	.word	0x20002ae0
 80010dc:	40005400 	.word	0x40005400
 80010e0:	000186a0 	.word	0x000186a0

080010e4 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80010e8:	4b09      	ldr	r3, [pc, #36]	@ (8001110 <MX_IWDG_Init+0x2c>)
 80010ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001114 <MX_IWDG_Init+0x30>)
 80010ec:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 80010ee:	4b08      	ldr	r3, [pc, #32]	@ (8001110 <MX_IWDG_Init+0x2c>)
 80010f0:	2202      	movs	r2, #2
 80010f2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 80010f4:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <MX_IWDG_Init+0x2c>)
 80010f6:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80010fa:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80010fc:	4804      	ldr	r0, [pc, #16]	@ (8001110 <MX_IWDG_Init+0x2c>)
 80010fe:	f006 fc77 	bl	80079f0 <HAL_IWDG_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8001108:	f000 f9dc 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20002b34 	.word	0x20002b34
 8001114:	40003000 	.word	0x40003000

08001118 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800111c:	4b17      	ldr	r3, [pc, #92]	@ (800117c <MX_SPI1_Init+0x64>)
 800111e:	4a18      	ldr	r2, [pc, #96]	@ (8001180 <MX_SPI1_Init+0x68>)
 8001120:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001122:	4b16      	ldr	r3, [pc, #88]	@ (800117c <MX_SPI1_Init+0x64>)
 8001124:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001128:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800112a:	4b14      	ldr	r3, [pc, #80]	@ (800117c <MX_SPI1_Init+0x64>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001130:	4b12      	ldr	r3, [pc, #72]	@ (800117c <MX_SPI1_Init+0x64>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001136:	4b11      	ldr	r3, [pc, #68]	@ (800117c <MX_SPI1_Init+0x64>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800113c:	4b0f      	ldr	r3, [pc, #60]	@ (800117c <MX_SPI1_Init+0x64>)
 800113e:	2200      	movs	r2, #0
 8001140:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001142:	4b0e      	ldr	r3, [pc, #56]	@ (800117c <MX_SPI1_Init+0x64>)
 8001144:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001148:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800114a:	4b0c      	ldr	r3, [pc, #48]	@ (800117c <MX_SPI1_Init+0x64>)
 800114c:	2210      	movs	r2, #16
 800114e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001150:	4b0a      	ldr	r3, [pc, #40]	@ (800117c <MX_SPI1_Init+0x64>)
 8001152:	2200      	movs	r2, #0
 8001154:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001156:	4b09      	ldr	r3, [pc, #36]	@ (800117c <MX_SPI1_Init+0x64>)
 8001158:	2200      	movs	r2, #0
 800115a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800115c:	4b07      	ldr	r3, [pc, #28]	@ (800117c <MX_SPI1_Init+0x64>)
 800115e:	2200      	movs	r2, #0
 8001160:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001162:	4b06      	ldr	r3, [pc, #24]	@ (800117c <MX_SPI1_Init+0x64>)
 8001164:	220a      	movs	r2, #10
 8001166:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001168:	4804      	ldr	r0, [pc, #16]	@ (800117c <MX_SPI1_Init+0x64>)
 800116a:	f007 f90d 	bl	8008388 <HAL_SPI_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001174:	f000 f9a6 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20002b40 	.word	0x20002b40
 8001180:	40013000 	.word	0x40013000

08001184 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001188:	4b11      	ldr	r3, [pc, #68]	@ (80011d0 <MX_USART1_UART_Init+0x4c>)
 800118a:	4a12      	ldr	r2, [pc, #72]	@ (80011d4 <MX_USART1_UART_Init+0x50>)
 800118c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800118e:	4b10      	ldr	r3, [pc, #64]	@ (80011d0 <MX_USART1_UART_Init+0x4c>)
 8001190:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001194:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001196:	4b0e      	ldr	r3, [pc, #56]	@ (80011d0 <MX_USART1_UART_Init+0x4c>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800119c:	4b0c      	ldr	r3, [pc, #48]	@ (80011d0 <MX_USART1_UART_Init+0x4c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011a2:	4b0b      	ldr	r3, [pc, #44]	@ (80011d0 <MX_USART1_UART_Init+0x4c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011a8:	4b09      	ldr	r3, [pc, #36]	@ (80011d0 <MX_USART1_UART_Init+0x4c>)
 80011aa:	220c      	movs	r2, #12
 80011ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ae:	4b08      	ldr	r3, [pc, #32]	@ (80011d0 <MX_USART1_UART_Init+0x4c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b4:	4b06      	ldr	r3, [pc, #24]	@ (80011d0 <MX_USART1_UART_Init+0x4c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011ba:	4805      	ldr	r0, [pc, #20]	@ (80011d0 <MX_USART1_UART_Init+0x4c>)
 80011bc:	f007 fe94 	bl	8008ee8 <HAL_UART_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011c6:	f000 f97d 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20002b98 	.word	0x20002b98
 80011d4:	40011000 	.word	0x40011000

080011d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011dc:	4b11      	ldr	r3, [pc, #68]	@ (8001224 <MX_USART2_UART_Init+0x4c>)
 80011de:	4a12      	ldr	r2, [pc, #72]	@ (8001228 <MX_USART2_UART_Init+0x50>)
 80011e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011e2:	4b10      	ldr	r3, [pc, #64]	@ (8001224 <MX_USART2_UART_Init+0x4c>)
 80011e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001224 <MX_USART2_UART_Init+0x4c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001224 <MX_USART2_UART_Init+0x4c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001224 <MX_USART2_UART_Init+0x4c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011fc:	4b09      	ldr	r3, [pc, #36]	@ (8001224 <MX_USART2_UART_Init+0x4c>)
 80011fe:	220c      	movs	r2, #12
 8001200:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001202:	4b08      	ldr	r3, [pc, #32]	@ (8001224 <MX_USART2_UART_Init+0x4c>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001208:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <MX_USART2_UART_Init+0x4c>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800120e:	4805      	ldr	r0, [pc, #20]	@ (8001224 <MX_USART2_UART_Init+0x4c>)
 8001210:	f007 fe6a 	bl	8008ee8 <HAL_UART_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800121a:	f000 f953 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20002be0 	.word	0x20002be0
 8001228:	40004400 	.word	0x40004400

0800122c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001230:	4b11      	ldr	r3, [pc, #68]	@ (8001278 <MX_USART3_UART_Init+0x4c>)
 8001232:	4a12      	ldr	r2, [pc, #72]	@ (800127c <MX_USART3_UART_Init+0x50>)
 8001234:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001236:	4b10      	ldr	r3, [pc, #64]	@ (8001278 <MX_USART3_UART_Init+0x4c>)
 8001238:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800123c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800123e:	4b0e      	ldr	r3, [pc, #56]	@ (8001278 <MX_USART3_UART_Init+0x4c>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001244:	4b0c      	ldr	r3, [pc, #48]	@ (8001278 <MX_USART3_UART_Init+0x4c>)
 8001246:	2200      	movs	r2, #0
 8001248:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800124a:	4b0b      	ldr	r3, [pc, #44]	@ (8001278 <MX_USART3_UART_Init+0x4c>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001250:	4b09      	ldr	r3, [pc, #36]	@ (8001278 <MX_USART3_UART_Init+0x4c>)
 8001252:	220c      	movs	r2, #12
 8001254:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001256:	4b08      	ldr	r3, [pc, #32]	@ (8001278 <MX_USART3_UART_Init+0x4c>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800125c:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <MX_USART3_UART_Init+0x4c>)
 800125e:	2200      	movs	r2, #0
 8001260:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001262:	4805      	ldr	r0, [pc, #20]	@ (8001278 <MX_USART3_UART_Init+0x4c>)
 8001264:	f007 fe40 	bl	8008ee8 <HAL_UART_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800126e:	f000 f929 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20002c28 	.word	0x20002c28
 800127c:	40004800 	.word	0x40004800

08001280 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001284:	4b11      	ldr	r3, [pc, #68]	@ (80012cc <MX_USART6_UART_Init+0x4c>)
 8001286:	4a12      	ldr	r2, [pc, #72]	@ (80012d0 <MX_USART6_UART_Init+0x50>)
 8001288:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800128a:	4b10      	ldr	r3, [pc, #64]	@ (80012cc <MX_USART6_UART_Init+0x4c>)
 800128c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001290:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001292:	4b0e      	ldr	r3, [pc, #56]	@ (80012cc <MX_USART6_UART_Init+0x4c>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001298:	4b0c      	ldr	r3, [pc, #48]	@ (80012cc <MX_USART6_UART_Init+0x4c>)
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800129e:	4b0b      	ldr	r3, [pc, #44]	@ (80012cc <MX_USART6_UART_Init+0x4c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80012a4:	4b09      	ldr	r3, [pc, #36]	@ (80012cc <MX_USART6_UART_Init+0x4c>)
 80012a6:	220c      	movs	r2, #12
 80012a8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012aa:	4b08      	ldr	r3, [pc, #32]	@ (80012cc <MX_USART6_UART_Init+0x4c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b0:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <MX_USART6_UART_Init+0x4c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80012b6:	4805      	ldr	r0, [pc, #20]	@ (80012cc <MX_USART6_UART_Init+0x4c>)
 80012b8:	f007 fe16 	bl	8008ee8 <HAL_UART_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80012c2:	f000 f8ff 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20002c70 	.word	0x20002c70
 80012d0:	40011400 	.word	0x40011400

080012d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08a      	sub	sp, #40	@ 0x28
 80012d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
 80012e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	4b47      	ldr	r3, [pc, #284]	@ (800140c <MX_GPIO_Init+0x138>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	4a46      	ldr	r2, [pc, #280]	@ (800140c <MX_GPIO_Init+0x138>)
 80012f4:	f043 0304 	orr.w	r3, r3, #4
 80012f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012fa:	4b44      	ldr	r3, [pc, #272]	@ (800140c <MX_GPIO_Init+0x138>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fe:	f003 0304 	and.w	r3, r3, #4
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	4b40      	ldr	r3, [pc, #256]	@ (800140c <MX_GPIO_Init+0x138>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	4a3f      	ldr	r2, [pc, #252]	@ (800140c <MX_GPIO_Init+0x138>)
 8001310:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001314:	6313      	str	r3, [r2, #48]	@ 0x30
 8001316:	4b3d      	ldr	r3, [pc, #244]	@ (800140c <MX_GPIO_Init+0x138>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	4b39      	ldr	r3, [pc, #228]	@ (800140c <MX_GPIO_Init+0x138>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	4a38      	ldr	r2, [pc, #224]	@ (800140c <MX_GPIO_Init+0x138>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	6313      	str	r3, [r2, #48]	@ 0x30
 8001332:	4b36      	ldr	r3, [pc, #216]	@ (800140c <MX_GPIO_Init+0x138>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	4b32      	ldr	r3, [pc, #200]	@ (800140c <MX_GPIO_Init+0x138>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	4a31      	ldr	r2, [pc, #196]	@ (800140c <MX_GPIO_Init+0x138>)
 8001348:	f043 0302 	orr.w	r3, r3, #2
 800134c:	6313      	str	r3, [r2, #48]	@ 0x30
 800134e:	4b2f      	ldr	r3, [pc, #188]	@ (800140c <MX_GPIO_Init+0x138>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OPLED_Pin|STATUS_LED_Pin, GPIO_PIN_RESET);
 800135a:	2200      	movs	r2, #0
 800135c:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001360:	482b      	ldr	r0, [pc, #172]	@ (8001410 <MX_GPIO_Init+0x13c>)
 8001362:	f005 fb07 	bl	8006974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ETH_NSS_GPIO_Port, ETH_NSS_Pin, GPIO_PIN_RESET);
 8001366:	2200      	movs	r2, #0
 8001368:	2110      	movs	r1, #16
 800136a:	482a      	ldr	r0, [pc, #168]	@ (8001414 <MX_GPIO_Init+0x140>)
 800136c:	f005 fb02 	bl	8006974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FPGA_RST_GPIO_Port, FPGA_RST_Pin, GPIO_PIN_RESET);
 8001370:	2200      	movs	r2, #0
 8001372:	2120      	movs	r1, #32
 8001374:	4828      	ldr	r0, [pc, #160]	@ (8001418 <MX_GPIO_Init+0x144>)
 8001376:	f005 fafd 	bl	8006974 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OPLED_Pin STATUS_LED_Pin */
  GPIO_InitStruct.Pin = OPLED_Pin|STATUS_LED_Pin;
 800137a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800137e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001380:	2301      	movs	r3, #1
 8001382:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	2300      	movs	r3, #0
 800138a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	4619      	mov	r1, r3
 8001392:	481f      	ldr	r0, [pc, #124]	@ (8001410 <MX_GPIO_Init+0x13c>)
 8001394:	f005 f952 	bl	800663c <HAL_GPIO_Init>

  /*Configure GPIO pin : ETH_NSS_Pin */
  GPIO_InitStruct.Pin = ETH_NSS_Pin;
 8001398:	2310      	movs	r3, #16
 800139a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139c:	2301      	movs	r3, #1
 800139e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a4:	2300      	movs	r3, #0
 80013a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ETH_NSS_GPIO_Port, &GPIO_InitStruct);
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	4619      	mov	r1, r3
 80013ae:	4819      	ldr	r0, [pc, #100]	@ (8001414 <MX_GPIO_Init+0x140>)
 80013b0:	f005 f944 	bl	800663c <HAL_GPIO_Init>

  /*Configure GPIO pins : OP2_Pin OP1_Pin */
  GPIO_InitStruct.Pin = OP2_Pin|OP1_Pin;
 80013b4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80013b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013be:	2301      	movs	r3, #1
 80013c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	4619      	mov	r1, r3
 80013c8:	4813      	ldr	r0, [pc, #76]	@ (8001418 <MX_GPIO_Init+0x144>)
 80013ca:	f005 f937 	bl	800663c <HAL_GPIO_Init>

  /*Configure GPIO pins : FPGA_INIT_Pin FPGA_DONE_Pin */
  GPIO_InitStruct.Pin = FPGA_INIT_Pin|FPGA_DONE_Pin;
 80013ce:	2318      	movs	r3, #24
 80013d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013da:	f107 0314 	add.w	r3, r7, #20
 80013de:	4619      	mov	r1, r3
 80013e0:	480d      	ldr	r0, [pc, #52]	@ (8001418 <MX_GPIO_Init+0x144>)
 80013e2:	f005 f92b 	bl	800663c <HAL_GPIO_Init>

  /*Configure GPIO pin : FPGA_RST_Pin */
  GPIO_InitStruct.Pin = FPGA_RST_Pin;
 80013e6:	2320      	movs	r3, #32
 80013e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ea:	2301      	movs	r3, #1
 80013ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2300      	movs	r3, #0
 80013f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FPGA_RST_GPIO_Port, &GPIO_InitStruct);
 80013f6:	f107 0314 	add.w	r3, r7, #20
 80013fa:	4619      	mov	r1, r3
 80013fc:	4806      	ldr	r0, [pc, #24]	@ (8001418 <MX_GPIO_Init+0x144>)
 80013fe:	f005 f91d 	bl	800663c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001402:	bf00      	nop
 8001404:	3728      	adds	r7, #40	@ 0x28
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40023800 	.word	0x40023800
 8001410:	40020800 	.word	0x40020800
 8001414:	40020000 	.word	0x40020000
 8001418:	40020400 	.word	0x40020400

0800141c <evt_handler>:

/* USER CODE BEGIN 4 */
static void evt_handler(event_t const* evt, void* p_context)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
	switch (evt->event)
	{
		default:
			break;
 8001426:	bf00      	nop
	}
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <eventTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_eventTask */
void eventTask(void const * argument)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	event_queue_observer_t main_evt;

	LOG_INF("Run Event Task");
 800143c:	4b0e      	ldr	r3, [pc, #56]	@ (8001478 <eventTask+0x44>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b03      	cmp	r3, #3
 8001442:	d903      	bls.n	800144c <eventTask+0x18>
 8001444:	490d      	ldr	r1, [pc, #52]	@ (800147c <eventTask+0x48>)
 8001446:	480e      	ldr	r0, [pc, #56]	@ (8001480 <eventTask+0x4c>)
 8001448:	f7ff fac6 	bl	80009d8 <Printf>
	main_evt.handler = evt_handler;
 800144c:	4b0d      	ldr	r3, [pc, #52]	@ (8001484 <eventTask+0x50>)
 800144e:	60bb      	str	r3, [r7, #8]
	main_evt.p_context = NULL;
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]

	m_event_register(&main_evt);
 8001454:	f107 0308 	add.w	r3, r7, #8
 8001458:	4618      	mov	r0, r3
 800145a:	f002 f861 	bl	8003520 <m_event_register>

	osTimerStart(opLedTimerHandle, OP_LED_TIMER_TICK);
 800145e:	4b0a      	ldr	r3, [pc, #40]	@ (8001488 <eventTask+0x54>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001466:	4618      	mov	r0, r3
 8001468:	f008 fea4 	bl	800a1b4 <osTimerStart>
	push_event0(EVT_menu_start);
 800146c:	2001      	movs	r0, #1
 800146e:	f7ff fb55 	bl	8000b1c <push_event0>
  /* Infinite loop */
  for(;;)
  {
	  m_event_dispatch();
 8001472:	f002 f92b 	bl	80036cc <m_event_dispatch>
 8001476:	e7fc      	b.n	8001472 <eventTask+0x3e>
 8001478:	20002adc 	.word	0x20002adc
 800147c:	0800f7f8 	.word	0x0800f7f8
 8001480:	0800e9f4 	.word	0x0800e9f4
 8001484:	0800141d 	.word	0x0800141d
 8001488:	20002cbc 	.word	0x20002cbc

0800148c <optimerCb>:
  /* USER CODE END 5 */
}

/* optimerCb function */
void optimerCb(void const * argument)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN optimerCb */

  /* USER CODE END optimerCb */
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a04      	ldr	r2, [pc, #16]	@ (80014c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d101      	bne.n	80014b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014b2:	f004 fc0b 	bl	8005ccc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40001000 	.word	0x40001000

080014c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c8:	b672      	cpsid	i
}
 80014ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <Error_Handler+0x8>

080014d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	607b      	str	r3, [r7, #4]
 80014da:	4b12      	ldr	r3, [pc, #72]	@ (8001524 <HAL_MspInit+0x54>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014de:	4a11      	ldr	r2, [pc, #68]	@ (8001524 <HAL_MspInit+0x54>)
 80014e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80014e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001524 <HAL_MspInit+0x54>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	603b      	str	r3, [r7, #0]
 80014f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001524 <HAL_MspInit+0x54>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001524 <HAL_MspInit+0x54>)
 80014fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001500:	6413      	str	r3, [r2, #64]	@ 0x40
 8001502:	4b08      	ldr	r3, [pc, #32]	@ (8001524 <HAL_MspInit+0x54>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001506:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800150a:	603b      	str	r3, [r7, #0]
 800150c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800150e:	2200      	movs	r2, #0
 8001510:	210f      	movs	r1, #15
 8001512:	f06f 0001 	mvn.w	r0, #1
 8001516:	f004 fcec 	bl	8005ef2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800

08001528 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	@ 0x28
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a19      	ldr	r2, [pc, #100]	@ (80015ac <HAL_I2C_MspInit+0x84>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d12b      	bne.n	80015a2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	613b      	str	r3, [r7, #16]
 800154e:	4b18      	ldr	r3, [pc, #96]	@ (80015b0 <HAL_I2C_MspInit+0x88>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001552:	4a17      	ldr	r2, [pc, #92]	@ (80015b0 <HAL_I2C_MspInit+0x88>)
 8001554:	f043 0302 	orr.w	r3, r3, #2
 8001558:	6313      	str	r3, [r2, #48]	@ 0x30
 800155a:	4b15      	ldr	r3, [pc, #84]	@ (80015b0 <HAL_I2C_MspInit+0x88>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	613b      	str	r3, [r7, #16]
 8001564:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001566:	23c0      	movs	r3, #192	@ 0xc0
 8001568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800156a:	2312      	movs	r3, #18
 800156c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001572:	2303      	movs	r3, #3
 8001574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001576:	2304      	movs	r3, #4
 8001578:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157a:	f107 0314 	add.w	r3, r7, #20
 800157e:	4619      	mov	r1, r3
 8001580:	480c      	ldr	r0, [pc, #48]	@ (80015b4 <HAL_I2C_MspInit+0x8c>)
 8001582:	f005 f85b 	bl	800663c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	4b09      	ldr	r3, [pc, #36]	@ (80015b0 <HAL_I2C_MspInit+0x88>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158e:	4a08      	ldr	r2, [pc, #32]	@ (80015b0 <HAL_I2C_MspInit+0x88>)
 8001590:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001594:	6413      	str	r3, [r2, #64]	@ 0x40
 8001596:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <HAL_I2C_MspInit+0x88>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80015a2:	bf00      	nop
 80015a4:	3728      	adds	r7, #40	@ 0x28
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40005400 	.word	0x40005400
 80015b0:	40023800 	.word	0x40023800
 80015b4:	40020400 	.word	0x40020400

080015b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08a      	sub	sp, #40	@ 0x28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a19      	ldr	r2, [pc, #100]	@ (800163c <HAL_SPI_MspInit+0x84>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d12b      	bne.n	8001632 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]
 80015de:	4b18      	ldr	r3, [pc, #96]	@ (8001640 <HAL_SPI_MspInit+0x88>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e2:	4a17      	ldr	r2, [pc, #92]	@ (8001640 <HAL_SPI_MspInit+0x88>)
 80015e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ea:	4b15      	ldr	r3, [pc, #84]	@ (8001640 <HAL_SPI_MspInit+0x88>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015f2:	613b      	str	r3, [r7, #16]
 80015f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	4b11      	ldr	r3, [pc, #68]	@ (8001640 <HAL_SPI_MspInit+0x88>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	4a10      	ldr	r2, [pc, #64]	@ (8001640 <HAL_SPI_MspInit+0x88>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	6313      	str	r3, [r2, #48]	@ 0x30
 8001606:	4b0e      	ldr	r3, [pc, #56]	@ (8001640 <HAL_SPI_MspInit+0x88>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001612:	23e0      	movs	r3, #224	@ 0xe0
 8001614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001616:	2302      	movs	r3, #2
 8001618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161e:	2303      	movs	r3, #3
 8001620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001622:	2305      	movs	r3, #5
 8001624:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	4619      	mov	r1, r3
 800162c:	4805      	ldr	r0, [pc, #20]	@ (8001644 <HAL_SPI_MspInit+0x8c>)
 800162e:	f005 f805 	bl	800663c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001632:	bf00      	nop
 8001634:	3728      	adds	r7, #40	@ 0x28
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40013000 	.word	0x40013000
 8001640:	40023800 	.word	0x40023800
 8001644:	40020000 	.word	0x40020000

08001648 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b090      	sub	sp, #64	@ 0x40
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a71      	ldr	r2, [pc, #452]	@ (800182c <HAL_UART_MspInit+0x1e4>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d135      	bne.n	80016d6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800166e:	4b70      	ldr	r3, [pc, #448]	@ (8001830 <HAL_UART_MspInit+0x1e8>)
 8001670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001672:	4a6f      	ldr	r2, [pc, #444]	@ (8001830 <HAL_UART_MspInit+0x1e8>)
 8001674:	f043 0310 	orr.w	r3, r3, #16
 8001678:	6453      	str	r3, [r2, #68]	@ 0x44
 800167a:	4b6d      	ldr	r3, [pc, #436]	@ (8001830 <HAL_UART_MspInit+0x1e8>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800167e:	f003 0310 	and.w	r3, r3, #16
 8001682:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001684:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	627b      	str	r3, [r7, #36]	@ 0x24
 800168a:	4b69      	ldr	r3, [pc, #420]	@ (8001830 <HAL_UART_MspInit+0x1e8>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	4a68      	ldr	r2, [pc, #416]	@ (8001830 <HAL_UART_MspInit+0x1e8>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6313      	str	r3, [r2, #48]	@ 0x30
 8001696:	4b66      	ldr	r3, [pc, #408]	@ (8001830 <HAL_UART_MspInit+0x1e8>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	627b      	str	r3, [r7, #36]	@ 0x24
 80016a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016a2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80016a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a8:	2302      	movs	r3, #2
 80016aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b0:	2303      	movs	r3, #3
 80016b2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016b4:	2307      	movs	r3, #7
 80016b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016bc:	4619      	mov	r1, r3
 80016be:	485d      	ldr	r0, [pc, #372]	@ (8001834 <HAL_UART_MspInit+0x1ec>)
 80016c0:	f004 ffbc 	bl	800663c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80016c4:	2200      	movs	r2, #0
 80016c6:	2105      	movs	r1, #5
 80016c8:	2025      	movs	r0, #37	@ 0x25
 80016ca:	f004 fc12 	bl	8005ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016ce:	2025      	movs	r0, #37	@ 0x25
 80016d0:	f004 fc2b 	bl	8005f2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80016d4:	e0a5      	b.n	8001822 <HAL_UART_MspInit+0x1da>
  else if(huart->Instance==USART2)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a57      	ldr	r2, [pc, #348]	@ (8001838 <HAL_UART_MspInit+0x1f0>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d134      	bne.n	800174a <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016e0:	2300      	movs	r3, #0
 80016e2:	623b      	str	r3, [r7, #32]
 80016e4:	4b52      	ldr	r3, [pc, #328]	@ (8001830 <HAL_UART_MspInit+0x1e8>)
 80016e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e8:	4a51      	ldr	r2, [pc, #324]	@ (8001830 <HAL_UART_MspInit+0x1e8>)
 80016ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80016f0:	4b4f      	ldr	r3, [pc, #316]	@ (8001830 <HAL_UART_MspInit+0x1e8>)
 80016f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016f8:	623b      	str	r3, [r7, #32]
 80016fa:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fc:	2300      	movs	r3, #0
 80016fe:	61fb      	str	r3, [r7, #28]
 8001700:	4b4b      	ldr	r3, [pc, #300]	@ (8001830 <HAL_UART_MspInit+0x1e8>)
 8001702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001704:	4a4a      	ldr	r2, [pc, #296]	@ (8001830 <HAL_UART_MspInit+0x1e8>)
 8001706:	f043 0301 	orr.w	r3, r3, #1
 800170a:	6313      	str	r3, [r2, #48]	@ 0x30
 800170c:	4b48      	ldr	r3, [pc, #288]	@ (8001830 <HAL_UART_MspInit+0x1e8>)
 800170e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	61fb      	str	r3, [r7, #28]
 8001716:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001718:	230c      	movs	r3, #12
 800171a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171c:	2302      	movs	r3, #2
 800171e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001724:	2303      	movs	r3, #3
 8001726:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001728:	2307      	movs	r3, #7
 800172a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001730:	4619      	mov	r1, r3
 8001732:	4840      	ldr	r0, [pc, #256]	@ (8001834 <HAL_UART_MspInit+0x1ec>)
 8001734:	f004 ff82 	bl	800663c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001738:	2200      	movs	r2, #0
 800173a:	2105      	movs	r1, #5
 800173c:	2026      	movs	r0, #38	@ 0x26
 800173e:	f004 fbd8 	bl	8005ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001742:	2026      	movs	r0, #38	@ 0x26
 8001744:	f004 fbf1 	bl	8005f2a <HAL_NVIC_EnableIRQ>
}
 8001748:	e06b      	b.n	8001822 <HAL_UART_MspInit+0x1da>
  else if(huart->Instance==USART3)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a3b      	ldr	r2, [pc, #236]	@ (800183c <HAL_UART_MspInit+0x1f4>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d12d      	bne.n	80017b0 <HAL_UART_MspInit+0x168>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001754:	2300      	movs	r3, #0
 8001756:	61bb      	str	r3, [r7, #24]
 8001758:	4b35      	ldr	r3, [pc, #212]	@ (8001830 <HAL_UART_MspInit+0x1e8>)
 800175a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175c:	4a34      	ldr	r2, [pc, #208]	@ (8001830 <HAL_UART_MspInit+0x1e8>)
 800175e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001762:	6413      	str	r3, [r2, #64]	@ 0x40
 8001764:	4b32      	ldr	r3, [pc, #200]	@ (8001830 <HAL_UART_MspInit+0x1e8>)
 8001766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001768:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800176c:	61bb      	str	r3, [r7, #24]
 800176e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
 8001774:	4b2e      	ldr	r3, [pc, #184]	@ (8001830 <HAL_UART_MspInit+0x1e8>)
 8001776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001778:	4a2d      	ldr	r2, [pc, #180]	@ (8001830 <HAL_UART_MspInit+0x1e8>)
 800177a:	f043 0304 	orr.w	r3, r3, #4
 800177e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001780:	4b2b      	ldr	r3, [pc, #172]	@ (8001830 <HAL_UART_MspInit+0x1e8>)
 8001782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800178c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001790:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	2302      	movs	r3, #2
 8001794:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179a:	2303      	movs	r3, #3
 800179c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800179e:	2307      	movs	r3, #7
 80017a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017a6:	4619      	mov	r1, r3
 80017a8:	4825      	ldr	r0, [pc, #148]	@ (8001840 <HAL_UART_MspInit+0x1f8>)
 80017aa:	f004 ff47 	bl	800663c <HAL_GPIO_Init>
}
 80017ae:	e038      	b.n	8001822 <HAL_UART_MspInit+0x1da>
  else if(huart->Instance==USART6)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a23      	ldr	r2, [pc, #140]	@ (8001844 <HAL_UART_MspInit+0x1fc>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d133      	bne.n	8001822 <HAL_UART_MspInit+0x1da>
    __HAL_RCC_USART6_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	4b1c      	ldr	r3, [pc, #112]	@ (8001830 <HAL_UART_MspInit+0x1e8>)
 80017c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c2:	4a1b      	ldr	r2, [pc, #108]	@ (8001830 <HAL_UART_MspInit+0x1e8>)
 80017c4:	f043 0320 	orr.w	r3, r3, #32
 80017c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80017ca:	4b19      	ldr	r3, [pc, #100]	@ (8001830 <HAL_UART_MspInit+0x1e8>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ce:	f003 0320 	and.w	r3, r3, #32
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	4b15      	ldr	r3, [pc, #84]	@ (8001830 <HAL_UART_MspInit+0x1e8>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	4a14      	ldr	r2, [pc, #80]	@ (8001830 <HAL_UART_MspInit+0x1e8>)
 80017e0:	f043 0304 	orr.w	r3, r3, #4
 80017e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e6:	4b12      	ldr	r3, [pc, #72]	@ (8001830 <HAL_UART_MspInit+0x1e8>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	f003 0304 	and.w	r3, r3, #4
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017f2:	23c0      	movs	r3, #192	@ 0xc0
 80017f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f6:	2302      	movs	r3, #2
 80017f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fe:	2303      	movs	r3, #3
 8001800:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001802:	2308      	movs	r3, #8
 8001804:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001806:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800180a:	4619      	mov	r1, r3
 800180c:	480c      	ldr	r0, [pc, #48]	@ (8001840 <HAL_UART_MspInit+0x1f8>)
 800180e:	f004 ff15 	bl	800663c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	2105      	movs	r1, #5
 8001816:	2047      	movs	r0, #71	@ 0x47
 8001818:	f004 fb6b 	bl	8005ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800181c:	2047      	movs	r0, #71	@ 0x47
 800181e:	f004 fb84 	bl	8005f2a <HAL_NVIC_EnableIRQ>
}
 8001822:	bf00      	nop
 8001824:	3740      	adds	r7, #64	@ 0x40
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40011000 	.word	0x40011000
 8001830:	40023800 	.word	0x40023800
 8001834:	40020000 	.word	0x40020000
 8001838:	40004400 	.word	0x40004400
 800183c:	40004800 	.word	0x40004800
 8001840:	40020800 	.word	0x40020800
 8001844:	40011400 	.word	0x40011400

08001848 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08e      	sub	sp, #56	@ 0x38
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001850:	2300      	movs	r3, #0
 8001852:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001854:	2300      	movs	r3, #0
 8001856:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001858:	2300      	movs	r3, #0
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	4b33      	ldr	r3, [pc, #204]	@ (800192c <HAL_InitTick+0xe4>)
 800185e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001860:	4a32      	ldr	r2, [pc, #200]	@ (800192c <HAL_InitTick+0xe4>)
 8001862:	f043 0310 	orr.w	r3, r3, #16
 8001866:	6413      	str	r3, [r2, #64]	@ 0x40
 8001868:	4b30      	ldr	r3, [pc, #192]	@ (800192c <HAL_InitTick+0xe4>)
 800186a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186c:	f003 0310 	and.w	r3, r3, #16
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001874:	f107 0210 	add.w	r2, r7, #16
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	4611      	mov	r1, r2
 800187e:	4618      	mov	r0, r3
 8001880:	f006 fd50 	bl	8008324 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001884:	6a3b      	ldr	r3, [r7, #32]
 8001886:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800188a:	2b00      	cmp	r3, #0
 800188c:	d103      	bne.n	8001896 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800188e:	f006 fd21 	bl	80082d4 <HAL_RCC_GetPCLK1Freq>
 8001892:	6378      	str	r0, [r7, #52]	@ 0x34
 8001894:	e004      	b.n	80018a0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001896:	f006 fd1d 	bl	80082d4 <HAL_RCC_GetPCLK1Freq>
 800189a:	4603      	mov	r3, r0
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018a2:	4a23      	ldr	r2, [pc, #140]	@ (8001930 <HAL_InitTick+0xe8>)
 80018a4:	fba2 2303 	umull	r2, r3, r2, r3
 80018a8:	0c9b      	lsrs	r3, r3, #18
 80018aa:	3b01      	subs	r3, #1
 80018ac:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80018ae:	4b21      	ldr	r3, [pc, #132]	@ (8001934 <HAL_InitTick+0xec>)
 80018b0:	4a21      	ldr	r2, [pc, #132]	@ (8001938 <HAL_InitTick+0xf0>)
 80018b2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80018b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001934 <HAL_InitTick+0xec>)
 80018b6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80018ba:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80018bc:	4a1d      	ldr	r2, [pc, #116]	@ (8001934 <HAL_InitTick+0xec>)
 80018be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018c0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80018c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001934 <HAL_InitTick+0xec>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001934 <HAL_InitTick+0xec>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ce:	4b19      	ldr	r3, [pc, #100]	@ (8001934 <HAL_InitTick+0xec>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80018d4:	4817      	ldr	r0, [pc, #92]	@ (8001934 <HAL_InitTick+0xec>)
 80018d6:	f007 f865 	bl	80089a4 <HAL_TIM_Base_Init>
 80018da:	4603      	mov	r3, r0
 80018dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80018e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d11b      	bne.n	8001920 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80018e8:	4812      	ldr	r0, [pc, #72]	@ (8001934 <HAL_InitTick+0xec>)
 80018ea:	f007 f8b5 	bl	8008a58 <HAL_TIM_Base_Start_IT>
 80018ee:	4603      	mov	r3, r0
 80018f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80018f4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d111      	bne.n	8001920 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80018fc:	2036      	movs	r0, #54	@ 0x36
 80018fe:	f004 fb14 	bl	8005f2a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b0f      	cmp	r3, #15
 8001906:	d808      	bhi.n	800191a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001908:	2200      	movs	r2, #0
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	2036      	movs	r0, #54	@ 0x36
 800190e:	f004 faf0 	bl	8005ef2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001912:	4a0a      	ldr	r2, [pc, #40]	@ (800193c <HAL_InitTick+0xf4>)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6013      	str	r3, [r2, #0]
 8001918:	e002      	b.n	8001920 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001920:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001924:	4618      	mov	r0, r3
 8001926:	3738      	adds	r7, #56	@ 0x38
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40023800 	.word	0x40023800
 8001930:	431bde83 	.word	0x431bde83
 8001934:	20002cc0 	.word	0x20002cc0
 8001938:	40001000 	.word	0x40001000
 800193c:	200000a4 	.word	0x200000a4

08001940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001944:	bf00      	nop
 8001946:	e7fd      	b.n	8001944 <NMI_Handler+0x4>

08001948 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800194c:	bf00      	nop
 800194e:	e7fd      	b.n	800194c <HardFault_Handler+0x4>

08001950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001954:	bf00      	nop
 8001956:	e7fd      	b.n	8001954 <MemManage_Handler+0x4>

08001958 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800195c:	bf00      	nop
 800195e:	e7fd      	b.n	800195c <BusFault_Handler+0x4>

08001960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001964:	bf00      	nop
 8001966:	e7fd      	b.n	8001964 <UsageFault_Handler+0x4>

08001968 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
	...

08001978 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800197c:	4802      	ldr	r0, [pc, #8]	@ (8001988 <USART1_IRQHandler+0x10>)
 800197e:	f007 fbe9 	bl	8009154 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20002b98 	.word	0x20002b98

0800198c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001990:	4802      	ldr	r0, [pc, #8]	@ (800199c <USART2_IRQHandler+0x10>)
 8001992:	f007 fbdf 	bl	8009154 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20002be0 	.word	0x20002be0

080019a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80019a4:	4802      	ldr	r0, [pc, #8]	@ (80019b0 <TIM6_DAC_IRQHandler+0x10>)
 80019a6:	f007 f8c7 	bl	8008b38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20002cc0 	.word	0x20002cc0

080019b4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80019b8:	4802      	ldr	r0, [pc, #8]	@ (80019c4 <USART6_IRQHandler+0x10>)
 80019ba:	f007 fbcb 	bl	8009154 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20002c70 	.word	0x20002c70

080019c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019d0:	4a14      	ldr	r2, [pc, #80]	@ (8001a24 <_sbrk+0x5c>)
 80019d2:	4b15      	ldr	r3, [pc, #84]	@ (8001a28 <_sbrk+0x60>)
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019dc:	4b13      	ldr	r3, [pc, #76]	@ (8001a2c <_sbrk+0x64>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d102      	bne.n	80019ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019e4:	4b11      	ldr	r3, [pc, #68]	@ (8001a2c <_sbrk+0x64>)
 80019e6:	4a12      	ldr	r2, [pc, #72]	@ (8001a30 <_sbrk+0x68>)
 80019e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ea:	4b10      	ldr	r3, [pc, #64]	@ (8001a2c <_sbrk+0x64>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4413      	add	r3, r2
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d207      	bcs.n	8001a08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019f8:	f00c f946 	bl	800dc88 <__errno>
 80019fc:	4603      	mov	r3, r0
 80019fe:	220c      	movs	r2, #12
 8001a00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a02:	f04f 33ff 	mov.w	r3, #4294967295
 8001a06:	e009      	b.n	8001a1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a08:	4b08      	ldr	r3, [pc, #32]	@ (8001a2c <_sbrk+0x64>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a0e:	4b07      	ldr	r3, [pc, #28]	@ (8001a2c <_sbrk+0x64>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	4a05      	ldr	r2, [pc, #20]	@ (8001a2c <_sbrk+0x64>)
 8001a18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20020000 	.word	0x20020000
 8001a28:	00000400 	.word	0x00000400
 8001a2c:	20002d08 	.word	0x20002d08
 8001a30:	20013568 	.word	0x20013568

08001a34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a38:	4b06      	ldr	r3, [pc, #24]	@ (8001a54 <SystemInit+0x20>)
 8001a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a3e:	4a05      	ldr	r2, [pc, #20]	@ (8001a54 <SystemInit+0x20>)
 8001a40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <m_dipsw_read_Channel>:
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/

/* Private function prototypes -----------------------------------------------*/
int m_dipsw_read_Channel(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
	}

	//LOG_INF("device No : %d", devNo);
	return devNo;
#endif
	return 0;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <m_env_e2p_write>:
	}
#endif
}

int m_env_e2p_write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08a      	sub	sp, #40	@ 0x28
 8001a6c:	af04      	add	r7, sp, #16
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	4608      	mov	r0, r1
 8001a72:	4611      	mov	r1, r2
 8001a74:	461a      	mov	r2, r3
 8001a76:	4603      	mov	r3, r0
 8001a78:	817b      	strh	r3, [r7, #10]
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	813b      	strh	r3, [r7, #8]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Write(hi2c, DevAddress,  MemAddress,  MemAddSize, pData, Size, I2C_TIMEOUT);
 8001a82:	88f8      	ldrh	r0, [r7, #6]
 8001a84:	893a      	ldrh	r2, [r7, #8]
 8001a86:	8979      	ldrh	r1, [r7, #10]
 8001a88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a8c:	9302      	str	r3, [sp, #8]
 8001a8e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001a90:	9301      	str	r3, [sp, #4]
 8001a92:	6a3b      	ldr	r3, [r7, #32]
 8001a94:	9300      	str	r3, [sp, #0]
 8001a96:	4603      	mov	r3, r0
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	f005 f8c9 	bl	8006c30 <HAL_I2C_Mem_Write>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK)
 8001aa2:	7dfb      	ldrb	r3, [r7, #23]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d00c      	beq.n	8001ac2 <m_env_e2p_write+0x5a>
	{
		LOG_ERR("[%02x]I2c_Write_E2p Error_no [%d]", DevAddress, ret);
 8001aa8:	4b08      	ldr	r3, [pc, #32]	@ (8001acc <m_env_e2p_write+0x64>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d005      	beq.n	8001abc <m_env_e2p_write+0x54>
 8001ab0:	897a      	ldrh	r2, [r7, #10]
 8001ab2:	7dfb      	ldrb	r3, [r7, #23]
 8001ab4:	4906      	ldr	r1, [pc, #24]	@ (8001ad0 <m_env_e2p_write+0x68>)
 8001ab6:	4807      	ldr	r0, [pc, #28]	@ (8001ad4 <m_env_e2p_write+0x6c>)
 8001ab8:	f7fe ff8e 	bl	80009d8 <Printf>
		return -1;
 8001abc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac0:	e000      	b.n	8001ac4 <m_env_e2p_write+0x5c>
	}
	return 0;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20002adc 	.word	0x20002adc
 8001ad0:	0800f81c 	.word	0x0800f81c
 8001ad4:	0800ea10 	.word	0x0800ea10

08001ad8 <m_env_e2p_read>:

int m_env_e2p_read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08a      	sub	sp, #40	@ 0x28
 8001adc:	af04      	add	r7, sp, #16
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	4608      	mov	r0, r1
 8001ae2:	4611      	mov	r1, r2
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	817b      	strh	r3, [r7, #10]
 8001aea:	460b      	mov	r3, r1
 8001aec:	813b      	strh	r3, [r7, #8]
 8001aee:	4613      	mov	r3, r2
 8001af0:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Read(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, I2C_TIMEOUT);
 8001af2:	88f8      	ldrh	r0, [r7, #6]
 8001af4:	893a      	ldrh	r2, [r7, #8]
 8001af6:	8979      	ldrh	r1, [r7, #10]
 8001af8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001afc:	9302      	str	r3, [sp, #8]
 8001afe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001b00:	9301      	str	r3, [sp, #4]
 8001b02:	6a3b      	ldr	r3, [r7, #32]
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	4603      	mov	r3, r0
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	f005 f98b 	bl	8006e24 <HAL_I2C_Mem_Read>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK)
 8001b12:	7dfb      	ldrb	r3, [r7, #23]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d00c      	beq.n	8001b32 <m_env_e2p_read+0x5a>
	{
		LOG_ERR("[%02x]I2c_Read_E2p Error_no [%d]", DevAddress, ret);
 8001b18:	4b08      	ldr	r3, [pc, #32]	@ (8001b3c <m_env_e2p_read+0x64>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d005      	beq.n	8001b2c <m_env_e2p_read+0x54>
 8001b20:	897a      	ldrh	r2, [r7, #10]
 8001b22:	7dfb      	ldrb	r3, [r7, #23]
 8001b24:	4906      	ldr	r1, [pc, #24]	@ (8001b40 <m_env_e2p_read+0x68>)
 8001b26:	4807      	ldr	r0, [pc, #28]	@ (8001b44 <m_env_e2p_read+0x6c>)
 8001b28:	f7fe ff56 	bl	80009d8 <Printf>
		return -1;
 8001b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b30:	e000      	b.n	8001b34 <m_env_e2p_read+0x5c>
	}
	return 0;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3718      	adds	r7, #24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20002adc 	.word	0x20002adc
 8001b40:	0800f82c 	.word	0x0800f82c
 8001b44:	0800ea40 	.word	0x0800ea40

08001b48 <m_flash_config_erase>:
  return SectorsWRPStatus;
}
#endif

int m_flash_config_erase(void)
{
 8001b48:	b590      	push	{r4, r7, lr}
 8001b4a:	b089      	sub	sp, #36	@ 0x24
 8001b4c:	af00      	add	r7, sp, #0
	int err_code;
	uint32_t PageError;
	FLASH_EraseInitTypeDef EraseInitStruct;

	HAL_FLASH_Unlock();
 8001b4e:	f004 fae5 	bl	800611c <HAL_FLASH_Unlock>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001b52:	4b29      	ldr	r3, [pc, #164]	@ (8001bf8 <m_flash_config_erase+0xb0>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	60da      	str	r2, [r3, #12]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001b58:	4b27      	ldr	r3, [pc, #156]	@ (8001bf8 <m_flash_config_erase+0xb0>)
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	60da      	str	r2, [r3, #12]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001b5e:	4b26      	ldr	r3, [pc, #152]	@ (8001bf8 <m_flash_config_erase+0xb0>)
 8001b60:	2210      	movs	r2, #16
 8001b62:	60da      	str	r2, [r3, #12]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001b64:	4b24      	ldr	r3, [pc, #144]	@ (8001bf8 <m_flash_config_erase+0xb0>)
 8001b66:	2220      	movs	r2, #32
 8001b68:	60da      	str	r2, [r3, #12]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001b6a:	4b23      	ldr	r3, [pc, #140]	@ (8001bf8 <m_flash_config_erase+0xb0>)
 8001b6c:	2240      	movs	r2, #64	@ 0x40
 8001b6e:	60da      	str	r2, [r3, #12]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001b70:	4b21      	ldr	r3, [pc, #132]	@ (8001bf8 <m_flash_config_erase+0xb0>)
 8001b72:	2280      	movs	r2, #128	@ 0x80
 8001b74:	60da      	str	r2, [r3, #12]

	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_SECTORS;
 8001b76:	2300      	movs	r3, #0
 8001b78:	607b      	str	r3, [r7, #4]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	617b      	str	r3, [r7, #20]
	EraseInitStruct.Sector = YNS_CONFIG_SECTOR;
 8001b7e:	230b      	movs	r3, #11
 8001b80:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.NbSectors     = 1;
 8001b82:	2301      	movs	r3, #1
 8001b84:	613b      	str	r3, [r7, #16]

	err_code = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8001b86:	f107 0218 	add.w	r2, r7, #24
 8001b8a:	1d3b      	adds	r3, r7, #4
 8001b8c:	4611      	mov	r1, r2
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f004 fc32 	bl	80063f8 <HAL_FLASHEx_Erase>
 8001b94:	4603      	mov	r3, r0
 8001b96:	61fb      	str	r3, [r7, #28]
	if (err_code != HAL_OK)
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d025      	beq.n	8001bea <m_flash_config_erase+0xa2>
	{
		LOG_ERR("Page Error[%x] Flash Error[%x]", PageError, HAL_FLASH_GetError());
 8001b9e:	4b17      	ldr	r3, [pc, #92]	@ (8001bfc <m_flash_config_erase+0xb4>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d008      	beq.n	8001bb8 <m_flash_config_erase+0x70>
 8001ba6:	69bc      	ldr	r4, [r7, #24]
 8001ba8:	f004 faea 	bl	8006180 <HAL_FLASH_GetError>
 8001bac:	4603      	mov	r3, r0
 8001bae:	4622      	mov	r2, r4
 8001bb0:	4913      	ldr	r1, [pc, #76]	@ (8001c00 <m_flash_config_erase+0xb8>)
 8001bb2:	4814      	ldr	r0, [pc, #80]	@ (8001c04 <m_flash_config_erase+0xbc>)
 8001bb4:	f7fe ff10 	bl	80009d8 <Printf>
		HAL_FLASH_Lock();
 8001bb8:	f004 fad2 	bl	8006160 <HAL_FLASH_Lock>
		RETURN_IF_ERROR(err_code);
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d013      	beq.n	8001bea <m_flash_config_erase+0xa2>
 8001bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8001bfc <m_flash_config_erase+0xb4>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <m_flash_config_erase+0x8a>
 8001bca:	490d      	ldr	r1, [pc, #52]	@ (8001c00 <m_flash_config_erase+0xb8>)
 8001bcc:	480e      	ldr	r0, [pc, #56]	@ (8001c08 <m_flash_config_erase+0xc0>)
 8001bce:	f7fe ff03 	bl	80009d8 <Printf>
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bfc <m_flash_config_erase+0xb4>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d005      	beq.n	8001be6 <m_flash_config_erase+0x9e>
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	2235      	movs	r2, #53	@ 0x35
 8001bde:	4908      	ldr	r1, [pc, #32]	@ (8001c00 <m_flash_config_erase+0xb8>)
 8001be0:	480a      	ldr	r0, [pc, #40]	@ (8001c0c <m_flash_config_erase+0xc4>)
 8001be2:	f7fe fef9 	bl	80009d8 <Printf>
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	e002      	b.n	8001bf0 <m_flash_config_erase+0xa8>
	}

	HAL_FLASH_Lock();
 8001bea:	f004 fab9 	bl	8006160 <HAL_FLASH_Lock>
	return 0;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3724      	adds	r7, #36	@ 0x24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd90      	pop	{r4, r7, pc}
 8001bf8:	40023c00 	.word	0x40023c00
 8001bfc:	20002adc 	.word	0x20002adc
 8001c00:	0800f83c 	.word	0x0800f83c
 8001c04:	0800ea6c 	.word	0x0800ea6c
 8001c08:	0800ea98 	.word	0x0800ea98
 8001c0c:	0800eac0 	.word	0x0800eac0

08001c10 <m_flash_config_write>:
	memcpy(pBuffer, (uint32_t *)address, size);
	//LOG_HEX_DUMP(pBuffer, size, "Dump DB");
}

int m_flash_config_write(void *Data_p, int size)
{
 8001c10:	b5b0      	push	{r4, r5, r7, lr}
 8001c12:	b088      	sub	sp, #32
 8001c14:	af02      	add	r7, sp, #8
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
	unsigned int write_size =0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
	uint32_t Address, write_data, *pData;

	Address = YNS_CONFIG_ADDRESS;
 8001c1e:	4b1f      	ldr	r3, [pc, #124]	@ (8001c9c <m_flash_config_write+0x8c>)
 8001c20:	613b      	str	r3, [r7, #16]

	pData = (uint32_t *)Data_p;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	60fb      	str	r3, [r7, #12]

	HAL_FLASH_Unlock();
 8001c26:	f004 fa79 	bl	800611c <HAL_FLASH_Unlock>

	while(write_size < size)
 8001c2a:	e02b      	b.n	8001c84 <m_flash_config_write+0x74>
	{
		write_data = (uint32_t)*pData;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	60bb      	str	r3, [r7, #8]
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, write_data) != HAL_OK)
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	2200      	movs	r2, #0
 8001c36:	461c      	mov	r4, r3
 8001c38:	4615      	mov	r5, r2
 8001c3a:	4622      	mov	r2, r4
 8001c3c:	462b      	mov	r3, r5
 8001c3e:	6939      	ldr	r1, [r7, #16]
 8001c40:	2002      	movs	r0, #2
 8001c42:	f004 fa17 	bl	8006074 <HAL_FLASH_Program>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d012      	beq.n	8001c72 <m_flash_config_write+0x62>
		{

			LOG_ERR("Flash Write Error [%lx] TotSize[%d] WriteSize[%d]", HAL_FLASH_GetError(), size, write_size);
 8001c4c:	4b14      	ldr	r3, [pc, #80]	@ (8001ca0 <m_flash_config_write+0x90>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d009      	beq.n	8001c68 <m_flash_config_write+0x58>
 8001c54:	f004 fa94 	bl	8006180 <HAL_FLASH_GetError>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	4910      	ldr	r1, [pc, #64]	@ (8001ca4 <m_flash_config_write+0x94>)
 8001c62:	4811      	ldr	r0, [pc, #68]	@ (8001ca8 <m_flash_config_write+0x98>)
 8001c64:	f7fe feb8 	bl	80009d8 <Printf>

			HAL_FLASH_Lock();
 8001c68:	f004 fa7a 	bl	8006160 <HAL_FLASH_Lock>
			return -1;
 8001c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c70:	e00f      	b.n	8001c92 <m_flash_config_write+0x82>
		}
		pData++;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	3304      	adds	r3, #4
 8001c76:	60fb      	str	r3, [r7, #12]
		write_size+=4;
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	3304      	adds	r3, #4
 8001c7c:	617b      	str	r3, [r7, #20]
		Address +=4;
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	3304      	adds	r3, #4
 8001c82:	613b      	str	r3, [r7, #16]
	while(write_size < size)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d3cf      	bcc.n	8001c2c <m_flash_config_write+0x1c>
	}

	HAL_FLASH_Lock();
 8001c8c:	f004 fa68 	bl	8006160 <HAL_FLASH_Lock>
	return 0;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3718      	adds	r7, #24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bdb0      	pop	{r4, r5, r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	080e0000 	.word	0x080e0000
 8001ca0:	20002adc 	.word	0x20002adc
 8001ca4:	0800f854 	.word	0x0800f854
 8001ca8:	0800eaf8 	.word	0x0800eaf8

08001cac <checksum>:
//
// For more information on how this algorithm works see:
// http://www.netfor2.com/checksum.html
// http://www.msc.uky.edu/ken/cs471/notes/chap3.htm
// The RFC has also a C code example: http://www.faqs.org/rfcs/rfc1071.html
uint16_t checksum(uint8_t *buf, uint16_t len, uint8_t type) {
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	807b      	strh	r3, [r7, #2]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	707b      	strb	r3, [r7, #1]
	// type 0=ip , icmp
	//      1=udp
	//      2=tcp
	uint32_t sum = 0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60fb      	str	r3, [r7, #12]

	//if(type==0){
	//        // do not add anything, standard IP checksum as described above
	//        // Usable for ICMP and IP header
	//}
	if (type == 1) {
 8001cc0:	787b      	ldrb	r3, [r7, #1]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d107      	bne.n	8001cd6 <checksum+0x2a>
		sum += IP_PROTO_UDP_V; // protocol udp
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	3311      	adds	r3, #17
 8001cca:	60fb      	str	r3, [r7, #12]
		// the length here is the length of udp (data+header len)
		// =length given to this function - (IP.scr+IP.dst length)
		sum += len - 8; // = real udp len
 8001ccc:	887a      	ldrh	r2, [r7, #2]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	3b08      	subs	r3, #8
 8001cd4:	60fb      	str	r3, [r7, #12]
	}
	if (type == 2) {
 8001cd6:	787b      	ldrb	r3, [r7, #1]
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d119      	bne.n	8001d10 <checksum+0x64>
		sum += IP_PROTO_TCP_V;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	3306      	adds	r3, #6
 8001ce0:	60fb      	str	r3, [r7, #12]
		// the length here is the length of tcp (data+header len)
		// =length given to this function - (IP.scr+IP.dst length)
		sum += len - 8; // = real tcp len
 8001ce2:	887a      	ldrh	r2, [r7, #2]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	3b08      	subs	r3, #8
 8001cea:	60fb      	str	r3, [r7, #12]
	}
	// build the sum of 16bit words
	while (len > 1) {
 8001cec:	e010      	b.n	8001d10 <checksum+0x64>
		sum += 0xFFFF & (((uint32_t) *buf << 8) | *(buf + 1));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	021b      	lsls	r3, r3, #8
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	3201      	adds	r2, #1
 8001cf8:	7812      	ldrb	r2, [r2, #0]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	4413      	add	r3, r2
 8001d02:	60fb      	str	r3, [r7, #12]
		buf += 2;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3302      	adds	r3, #2
 8001d08:	607b      	str	r3, [r7, #4]
		len -= 2;
 8001d0a:	887b      	ldrh	r3, [r7, #2]
 8001d0c:	3b02      	subs	r3, #2
 8001d0e:	807b      	strh	r3, [r7, #2]
	while (len > 1) {
 8001d10:	887b      	ldrh	r3, [r7, #2]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d8eb      	bhi.n	8001cee <checksum+0x42>
	}
	// if there is a byte left then add it (padded with zero)
	if (len) {
 8001d16:	887b      	ldrh	r3, [r7, #2]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d00c      	beq.n	8001d36 <checksum+0x8a>
		sum += ((uint32_t) (0xFF & *buf)) << 8;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	021b      	lsls	r3, r3, #8
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	4413      	add	r3, r2
 8001d26:	60fb      	str	r3, [r7, #12]
	}
	// now calculate the sum over the bytes in the sum
	// until the result is only 16bit long
	while (sum >> 16) {
 8001d28:	e005      	b.n	8001d36 <checksum+0x8a>
		sum = (sum & 0xFFFF) + (sum >> 16);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	0c1b      	lsrs	r3, r3, #16
 8001d32:	4413      	add	r3, r2
 8001d34:	60fb      	str	r3, [r7, #12]
	while (sum >> 16) {
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	0c1b      	lsrs	r3, r3, #16
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f5      	bne.n	8001d2a <checksum+0x7e>
	}
	// build 1's complement:
	return ((uint16_t) sum ^ 0xFFFF);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	43db      	mvns	r3, r3
 8001d44:	b29b      	uxth	r3, r3
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
	...

08001d54 <init_ip_arp_udp_tcp>:
//#define _DEBUG_

// This initializes the web server
// you must call this function once before you use any of the other functions:
void init_ip_arp_udp_tcp(uint8_t *mymac, uint8_t *myip, uint16_t port) {
 8001d54:	b480      	push	{r7}
 8001d56:	b087      	sub	sp, #28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	80fb      	strh	r3, [r7, #6]
	uint8_t i = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	75fb      	strb	r3, [r7, #23]
	wwwport_h = (port >> 8) & 0xff;
 8001d66:	88fb      	ldrh	r3, [r7, #6]
 8001d68:	0a1b      	lsrs	r3, r3, #8
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	4b15      	ldr	r3, [pc, #84]	@ (8001dc4 <init_ip_arp_udp_tcp+0x70>)
 8001d70:	701a      	strb	r2, [r3, #0]
	wwwport_l = (port & 0xff);
 8001d72:	88fb      	ldrh	r3, [r7, #6]
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	4b14      	ldr	r3, [pc, #80]	@ (8001dc8 <init_ip_arp_udp_tcp+0x74>)
 8001d78:	701a      	strb	r2, [r3, #0]
#ifdef _DEBUG_
	LOG_DBG("Port [%d %d]\r\n IP ", wwwport_h, wwwport_l);
#endif
	while (i < 4) {
 8001d7a:	e009      	b.n	8001d90 <init_ip_arp_udp_tcp+0x3c>
		ipaddr[i] = myip[i];
 8001d7c:	7dfb      	ldrb	r3, [r7, #23]
 8001d7e:	68ba      	ldr	r2, [r7, #8]
 8001d80:	441a      	add	r2, r3
 8001d82:	7dfb      	ldrb	r3, [r7, #23]
 8001d84:	7811      	ldrb	r1, [r2, #0]
 8001d86:	4a11      	ldr	r2, [pc, #68]	@ (8001dcc <init_ip_arp_udp_tcp+0x78>)
 8001d88:	54d1      	strb	r1, [r2, r3]
#ifdef _DEBUG_
		LOG_DBG("[%d]", ipaddr[i]);
#endif
		i++;
 8001d8a:	7dfb      	ldrb	r3, [r7, #23]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	75fb      	strb	r3, [r7, #23]
	while (i < 4) {
 8001d90:	7dfb      	ldrb	r3, [r7, #23]
 8001d92:	2b03      	cmp	r3, #3
 8001d94:	d9f2      	bls.n	8001d7c <init_ip_arp_udp_tcp+0x28>
	}
	i = 0;
 8001d96:	2300      	movs	r3, #0
 8001d98:	75fb      	strb	r3, [r7, #23]
#ifdef _DEBUG_
	LOG_DBG("\r\n MAC ");
#endif
	while (i < 6) {
 8001d9a:	e009      	b.n	8001db0 <init_ip_arp_udp_tcp+0x5c>
		macaddr[i] = mymac[i];
 8001d9c:	7dfb      	ldrb	r3, [r7, #23]
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	441a      	add	r2, r3
 8001da2:	7dfb      	ldrb	r3, [r7, #23]
 8001da4:	7811      	ldrb	r1, [r2, #0]
 8001da6:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd0 <init_ip_arp_udp_tcp+0x7c>)
 8001da8:	54d1      	strb	r1, [r2, r3]
#ifdef _DEBUG_
		LOG_DBG("[%d]", macaddr[i]);
#endif
		i++;
 8001daa:	7dfb      	ldrb	r3, [r7, #23]
 8001dac:	3301      	adds	r3, #1
 8001dae:	75fb      	strb	r3, [r7, #23]
	while (i < 6) {
 8001db0:	7dfb      	ldrb	r3, [r7, #23]
 8001db2:	2b05      	cmp	r3, #5
 8001db4:	d9f2      	bls.n	8001d9c <init_ip_arp_udp_tcp+0x48>
	}

}
 8001db6:	bf00      	nop
 8001db8:	bf00      	nop
 8001dba:	371c      	adds	r7, #28
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	20002d0c 	.word	0x20002d0c
 8001dc8:	20000084 	.word	0x20000084
 8001dcc:	20002d3c 	.word	0x20002d3c
 8001dd0:	20002d34 	.word	0x20002d34

08001dd4 <check_ip_message_is_from>:

uint8_t check_ip_message_is_from(uint8_t *buf, uint8_t *ip) {
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 8001dde:	2300      	movs	r3, #0
 8001de0:	73fb      	strb	r3, [r7, #15]
	while (i < 4) {
 8001de2:	e010      	b.n	8001e06 <check_ip_message_is_from+0x32>
		if (buf[IP_SRC_P + i] != ip[i]) {
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
 8001de6:	331a      	adds	r3, #26
 8001de8:	461a      	mov	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	781a      	ldrb	r2, [r3, #0]
 8001df0:	7bfb      	ldrb	r3, [r7, #15]
 8001df2:	6839      	ldr	r1, [r7, #0]
 8001df4:	440b      	add	r3, r1
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d001      	beq.n	8001e00 <check_ip_message_is_from+0x2c>
			return (0);
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	e006      	b.n	8001e0e <check_ip_message_is_from+0x3a>
		}
		i++;
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
 8001e02:	3301      	adds	r3, #1
 8001e04:	73fb      	strb	r3, [r7, #15]
	while (i < 4) {
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
 8001e08:	2b03      	cmp	r3, #3
 8001e0a:	d9eb      	bls.n	8001de4 <check_ip_message_is_from+0x10>
	}
	return (1);
 8001e0c:	2301      	movs	r3, #1
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
	...

08001e1c <eth_type_is_arp_and_my_ip>:

uint8_t eth_type_is_arp_and_my_ip(uint8_t *buf, uint16_t len) {
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	460b      	mov	r3, r1
 8001e26:	807b      	strh	r3, [r7, #2]
	uint8_t i = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	73fb      	strb	r3, [r7, #15]
	//
//	if(len > 0)
//		LOG_DBG("len;[%d] Type h:%x l:%x", len, buf[ETH_TYPE_H_P], buf[ETH_TYPE_L_P])
	if (len < 41) {
 8001e2c:	887b      	ldrh	r3, [r7, #2]
 8001e2e:	2b28      	cmp	r3, #40	@ 0x28
 8001e30:	d801      	bhi.n	8001e36 <eth_type_is_arp_and_my_ip+0x1a>
		return (0);
 8001e32:	2300      	movs	r3, #0
 8001e34:	e01f      	b.n	8001e76 <eth_type_is_arp_and_my_ip+0x5a>
	}

	if (buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	330c      	adds	r3, #12
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	d104      	bne.n	8001e4a <eth_type_is_arp_and_my_ip+0x2e>
			|| buf[ETH_TYPE_L_P] != ETHTYPE_ARP_L_V) {
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	330d      	adds	r3, #13
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b06      	cmp	r3, #6
 8001e48:	d011      	beq.n	8001e6e <eth_type_is_arp_and_my_ip+0x52>
		return (0);
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	e013      	b.n	8001e76 <eth_type_is_arp_and_my_ip+0x5a>
	}
//	LOG_HEX_DUMP(ipaddr, 4, "arp my ip");
//	LOG_HEX_DUMP(&buf[ETH_ARP_DST_IP_P], 4, "arp dst ip");
	while (i < 4) {
		if (buf[ETH_ARP_DST_IP_P + i] != ipaddr[i]) {
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
 8001e50:	3326      	adds	r3, #38	@ 0x26
 8001e52:	461a      	mov	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4413      	add	r3, r2
 8001e58:	781a      	ldrb	r2, [r3, #0]
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
 8001e5c:	4909      	ldr	r1, [pc, #36]	@ (8001e84 <eth_type_is_arp_and_my_ip+0x68>)
 8001e5e:	5ccb      	ldrb	r3, [r1, r3]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d001      	beq.n	8001e68 <eth_type_is_arp_and_my_ip+0x4c>
			return (0);
 8001e64:	2300      	movs	r3, #0
 8001e66:	e006      	b.n	8001e76 <eth_type_is_arp_and_my_ip+0x5a>
		}
		i++;
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	73fb      	strb	r3, [r7, #15]
	while (i < 4) {
 8001e6e:	7bfb      	ldrb	r3, [r7, #15]
 8001e70:	2b03      	cmp	r3, #3
 8001e72:	d9ec      	bls.n	8001e4e <eth_type_is_arp_and_my_ip+0x32>
	}
	return (1);
 8001e74:	2301      	movs	r3, #1
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	20002d3c 	.word	0x20002d3c

08001e88 <eth_type_is_ip_and_my_ip>:

uint8_t eth_type_is_ip_and_my_ip(uint8_t *buf, uint16_t len) {
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	460b      	mov	r3, r1
 8001e92:	807b      	strh	r3, [r7, #2]
	uint8_t i = 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	73fb      	strb	r3, [r7, #15]
	//eth+ip+udp header is 42
	if (len < 42) {
 8001e98:	887b      	ldrh	r3, [r7, #2]
 8001e9a:	2b29      	cmp	r3, #41	@ 0x29
 8001e9c:	d801      	bhi.n	8001ea2 <eth_type_is_ip_and_my_ip+0x1a>
		return (0);
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	e026      	b.n	8001ef0 <eth_type_is_ip_and_my_ip+0x68>
	}
	if (buf[ETH_TYPE_H_P] != ETHTYPE_IP_H_V
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	330c      	adds	r3, #12
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b08      	cmp	r3, #8
 8001eaa:	d104      	bne.n	8001eb6 <eth_type_is_ip_and_my_ip+0x2e>
			|| buf[ETH_TYPE_L_P] != ETHTYPE_IP_L_V) {
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	330d      	adds	r3, #13
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <eth_type_is_ip_and_my_ip+0x32>
		return (0);
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	e01a      	b.n	8001ef0 <eth_type_is_ip_and_my_ip+0x68>
	}
	if (buf[IP_HEADER_LEN_VER_P] != 0x45) {
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	330e      	adds	r3, #14
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b45      	cmp	r3, #69	@ 0x45
 8001ec2:	d011      	beq.n	8001ee8 <eth_type_is_ip_and_my_ip+0x60>
		// must be IP V4 and 20 byte header
		return (0);
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	e013      	b.n	8001ef0 <eth_type_is_ip_and_my_ip+0x68>
	}
//	LOG_HEX_DUMP(&buf[IP_DST_P], 4, "ip dest");
//	LOG_HEX_DUMP(ipaddr, 4, "ip myip");
	while (i < 4) {
		if (buf[IP_DST_P + i] != ipaddr[i]) {
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	331e      	adds	r3, #30
 8001ecc:	461a      	mov	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	781a      	ldrb	r2, [r3, #0]
 8001ed4:	7bfb      	ldrb	r3, [r7, #15]
 8001ed6:	4909      	ldr	r1, [pc, #36]	@ (8001efc <eth_type_is_ip_and_my_ip+0x74>)
 8001ed8:	5ccb      	ldrb	r3, [r1, r3]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d001      	beq.n	8001ee2 <eth_type_is_ip_and_my_ip+0x5a>
			return (0);
 8001ede:	2300      	movs	r3, #0
 8001ee0:	e006      	b.n	8001ef0 <eth_type_is_ip_and_my_ip+0x68>
		}
		i++;
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	73fb      	strb	r3, [r7, #15]
	while (i < 4) {
 8001ee8:	7bfb      	ldrb	r3, [r7, #15]
 8001eea:	2b03      	cmp	r3, #3
 8001eec:	d9ec      	bls.n	8001ec8 <eth_type_is_ip_and_my_ip+0x40>
	}
	return (1);
 8001eee:	2301      	movs	r3, #1
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	20002d3c 	.word	0x20002d3c

08001f00 <make_eth>:

// make a return eth header from a received eth packet
void make_eth(uint8_t *buf) {
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	73fb      	strb	r3, [r7, #15]
	//
	//copy the destination mac from the source and fill my mac into src
	while (i < 6) {
 8001f0c:	e015      	b.n	8001f3a <make_eth+0x3a>
		buf[ETH_DST_MAC + i] = buf[ETH_SRC_MAC + i];
 8001f0e:	7bfb      	ldrb	r3, [r7, #15]
 8001f10:	3306      	adds	r3, #6
 8001f12:	461a      	mov	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	441a      	add	r2, r3
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	440b      	add	r3, r1
 8001f1e:	7812      	ldrb	r2, [r2, #0]
 8001f20:	701a      	strb	r2, [r3, #0]
		buf[ETH_SRC_MAC + i] = macaddr[i];
 8001f22:	7bfa      	ldrb	r2, [r7, #15]
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	3306      	adds	r3, #6
 8001f28:	4619      	mov	r1, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	440b      	add	r3, r1
 8001f2e:	4908      	ldr	r1, [pc, #32]	@ (8001f50 <make_eth+0x50>)
 8001f30:	5c8a      	ldrb	r2, [r1, r2]
 8001f32:	701a      	strb	r2, [r3, #0]
		i++;
 8001f34:	7bfb      	ldrb	r3, [r7, #15]
 8001f36:	3301      	adds	r3, #1
 8001f38:	73fb      	strb	r3, [r7, #15]
	while (i < 6) {
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
 8001f3c:	2b05      	cmp	r3, #5
 8001f3e:	d9e6      	bls.n	8001f0e <make_eth+0xe>
	}
}
 8001f40:	bf00      	nop
 8001f42:	bf00      	nop
 8001f44:	3714      	adds	r7, #20
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	20002d34 	.word	0x20002d34

08001f54 <fill_ip_hdr_checksum>:

	buf[ ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
	buf[ ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
}

void fill_ip_hdr_checksum(uint8_t *buf) {
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
	uint16_t ck;
	// clear the 2 byte checksum
	buf[IP_CHECKSUM_P] = 0;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3318      	adds	r3, #24
 8001f60:	2200      	movs	r2, #0
 8001f62:	701a      	strb	r2, [r3, #0]
	buf[IP_CHECKSUM_P + 1] = 0;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3319      	adds	r3, #25
 8001f68:	2200      	movs	r2, #0
 8001f6a:	701a      	strb	r2, [r3, #0]
	buf[IP_FLAGS_P] = 0x40; // don't fragment
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3314      	adds	r3, #20
 8001f70:	2240      	movs	r2, #64	@ 0x40
 8001f72:	701a      	strb	r2, [r3, #0]
	buf[IP_FLAGS_P + 1] = 0;  // fragement offset
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3315      	adds	r3, #21
 8001f78:	2200      	movs	r2, #0
 8001f7a:	701a      	strb	r2, [r3, #0]
	buf[IP_TTL_P] = 64; // ttl
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3316      	adds	r3, #22
 8001f80:	2240      	movs	r2, #64	@ 0x40
 8001f82:	701a      	strb	r2, [r3, #0]
	// calculate the checksum:
	ck = checksum(&buf[IP_P], IP_HEADER_LEN, 0);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	330e      	adds	r3, #14
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2114      	movs	r1, #20
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff fe8d 	bl	8001cac <checksum>
 8001f92:	4603      	mov	r3, r0
 8001f94:	81fb      	strh	r3, [r7, #14]
	buf[IP_CHECKSUM_P] = ck >> 8;
 8001f96:	89fb      	ldrh	r3, [r7, #14]
 8001f98:	0a1b      	lsrs	r3, r3, #8
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3318      	adds	r3, #24
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	701a      	strb	r2, [r3, #0]
	buf[IP_CHECKSUM_P + 1] = ck & 0xff;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3319      	adds	r3, #25
 8001fa8:	89fa      	ldrh	r2, [r7, #14]
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	701a      	strb	r2, [r3, #0]
}
 8001fae:	bf00      	nop
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
	...

08001fb8 <make_ip>:
		i++;
	}
	fill_ip_hdr_checksum(buf);
}

void make_ip(uint8_t *buf) {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	73fb      	strb	r3, [r7, #15]
	while (i < 4) {
 8001fc4:	e017      	b.n	8001ff6 <make_ip+0x3e>
		buf[IP_DST_P + i] = buf[IP_SRC_P + i];
 8001fc6:	7bfb      	ldrb	r3, [r7, #15]
 8001fc8:	331a      	adds	r3, #26
 8001fca:	461a      	mov	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	441a      	add	r2, r3
 8001fd0:	7bfb      	ldrb	r3, [r7, #15]
 8001fd2:	331e      	adds	r3, #30
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	440b      	add	r3, r1
 8001fda:	7812      	ldrb	r2, [r2, #0]
 8001fdc:	701a      	strb	r2, [r3, #0]
		buf[IP_SRC_P + i] = ipaddr[i];
 8001fde:	7bfa      	ldrb	r2, [r7, #15]
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
 8001fe2:	331a      	adds	r3, #26
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	440b      	add	r3, r1
 8001fea:	4908      	ldr	r1, [pc, #32]	@ (800200c <make_ip+0x54>)
 8001fec:	5c8a      	ldrb	r2, [r1, r2]
 8001fee:	701a      	strb	r2, [r3, #0]
		i++;
 8001ff0:	7bfb      	ldrb	r3, [r7, #15]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	73fb      	strb	r3, [r7, #15]
	while (i < 4) {
 8001ff6:	7bfb      	ldrb	r3, [r7, #15]
 8001ff8:	2b03      	cmp	r3, #3
 8001ffa:	d9e4      	bls.n	8001fc6 <make_ip+0xe>
	}
	fill_ip_hdr_checksum(buf);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff ffa9 	bl	8001f54 <fill_ip_hdr_checksum>
}
 8002002:	bf00      	nop
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20002d3c 	.word	0x20002d3c

08002010 <step_seq>:

// swap seq and ack number and count ack number up
void step_seq(uint8_t *buf, uint16_t rel_ack_num, uint8_t cp_seq) {
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	460b      	mov	r3, r1
 800201a:	807b      	strh	r3, [r7, #2]
 800201c:	4613      	mov	r3, r2
 800201e:	707b      	strb	r3, [r7, #1]
	uint8_t i;
	uint8_t tseq;
	i = 4;
 8002020:	2304      	movs	r3, #4
 8002022:	73fb      	strb	r3, [r7, #15]
	// sequence numbers:
	// add the rel ack num to SEQACK
	while (i > 0) {
 8002024:	e02b      	b.n	800207e <step_seq+0x6e>
		rel_ack_num = buf[TCP_SEQ_H_P + i - 1] + rel_ack_num;
 8002026:	7bfb      	ldrb	r3, [r7, #15]
 8002028:	3325      	adds	r3, #37	@ 0x25
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	4413      	add	r3, r2
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	461a      	mov	r2, r3
 8002032:	887b      	ldrh	r3, [r7, #2]
 8002034:	4413      	add	r3, r2
 8002036:	807b      	strh	r3, [r7, #2]
		tseq = buf[TCP_SEQACK_H_P + i - 1];
 8002038:	7bfb      	ldrb	r3, [r7, #15]
 800203a:	3329      	adds	r3, #41	@ 0x29
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	4413      	add	r3, r2
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	73bb      	strb	r3, [r7, #14]
		buf[TCP_SEQACK_H_P + i - 1] = 0xff & rel_ack_num;
 8002044:	7bfb      	ldrb	r3, [r7, #15]
 8002046:	3329      	adds	r3, #41	@ 0x29
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	4413      	add	r3, r2
 800204c:	887a      	ldrh	r2, [r7, #2]
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	701a      	strb	r2, [r3, #0]
		if (cp_seq) {
 8002052:	787b      	ldrb	r3, [r7, #1]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d006      	beq.n	8002066 <step_seq+0x56>
			// copy the acknum sent to us into the sequence number
			buf[TCP_SEQ_H_P + i - 1] = tseq;
 8002058:	7bfb      	ldrb	r3, [r7, #15]
 800205a:	3325      	adds	r3, #37	@ 0x25
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	4413      	add	r3, r2
 8002060:	7bba      	ldrb	r2, [r7, #14]
 8002062:	701a      	strb	r2, [r3, #0]
 8002064:	e005      	b.n	8002072 <step_seq+0x62>
		} else {
			buf[TCP_SEQ_H_P + i - 1] = 0; // some preset vallue
 8002066:	7bfb      	ldrb	r3, [r7, #15]
 8002068:	3325      	adds	r3, #37	@ 0x25
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	4413      	add	r3, r2
 800206e:	2200      	movs	r2, #0
 8002070:	701a      	strb	r2, [r3, #0]
		}
		rel_ack_num = rel_ack_num >> 8;
 8002072:	887b      	ldrh	r3, [r7, #2]
 8002074:	0a1b      	lsrs	r3, r3, #8
 8002076:	807b      	strh	r3, [r7, #2]
		i--;
 8002078:	7bfb      	ldrb	r3, [r7, #15]
 800207a:	3b01      	subs	r3, #1
 800207c:	73fb      	strb	r3, [r7, #15]
	while (i > 0) {
 800207e:	7bfb      	ldrb	r3, [r7, #15]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1d0      	bne.n	8002026 <step_seq+0x16>
	}
}
 8002084:	bf00      	nop
 8002086:	bf00      	nop
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <make_tcphead>:
// No mss is included here.
//
// After calling this function you can fill in the first data byte at TCP_OPTIONS_P+4
// If cp_seq=0 then an initial sequence number is used (should be use in synack)
// otherwise it is copied from the packet we received
void make_tcphead(uint8_t *buf, uint16_t rel_ack_num, uint8_t cp_seq) {
 8002092:	b580      	push	{r7, lr}
 8002094:	b084      	sub	sp, #16
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
 800209a:	460b      	mov	r3, r1
 800209c:	807b      	strh	r3, [r7, #2]
 800209e:	4613      	mov	r3, r2
 80020a0:	707b      	strb	r3, [r7, #1]
	uint8_t i;
	// copy ports:
	i = buf[TCP_DST_PORT_H_P];
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020a8:	73fb      	strb	r3, [r7, #15]
	buf[TCP_DST_PORT_H_P] = buf[TCP_SRC_PORT_H_P];
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3324      	adds	r3, #36	@ 0x24
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
 80020b4:	701a      	strb	r2, [r3, #0]
	buf[TCP_SRC_PORT_H_P] = i;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3322      	adds	r3, #34	@ 0x22
 80020ba:	7bfa      	ldrb	r2, [r7, #15]
 80020bc:	701a      	strb	r2, [r3, #0]
	//
	i = buf[TCP_DST_PORT_L_P];
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80020c4:	73fb      	strb	r3, [r7, #15]
	buf[TCP_DST_PORT_L_P] = buf[TCP_SRC_PORT_L_P];
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	3325      	adds	r3, #37	@ 0x25
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 80020d0:	701a      	strb	r2, [r3, #0]
	buf[TCP_SRC_PORT_L_P] = i;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	3323      	adds	r3, #35	@ 0x23
 80020d6:	7bfa      	ldrb	r2, [r7, #15]
 80020d8:	701a      	strb	r2, [r3, #0]
	step_seq(buf, rel_ack_num, cp_seq);
 80020da:	787a      	ldrb	r2, [r7, #1]
 80020dc:	887b      	ldrh	r3, [r7, #2]
 80020de:	4619      	mov	r1, r3
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f7ff ff95 	bl	8002010 <step_seq>
	// zero the checksum
	buf[TCP_CHECKSUM_H_P] = 0;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3332      	adds	r3, #50	@ 0x32
 80020ea:	2200      	movs	r2, #0
 80020ec:	701a      	strb	r2, [r3, #0]
	buf[TCP_CHECKSUM_L_P] = 0;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	3333      	adds	r3, #51	@ 0x33
 80020f2:	2200      	movs	r2, #0
 80020f4:	701a      	strb	r2, [r3, #0]
	// no options:
	// 20 bytes:
	// The tcp header length is only a 4 bit field (the upper 4 bits).
	// It is calculated in units of 4 bytes.
	// E.g 20 bytes: 20/4=6 => 0x50=header len field
	buf[TCP_HEADER_LEN_P] = 0x50;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	332e      	adds	r3, #46	@ 0x2e
 80020fa:	2250      	movs	r2, #80	@ 0x50
 80020fc:	701a      	strb	r2, [r3, #0]
}
 80020fe:	bf00      	nop
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
	...

08002108 <make_arp_answer_from_request>:

void make_arp_answer_from_request(uint8_t *buf) {
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8002110:	2300      	movs	r3, #0
 8002112:	73fb      	strb	r3, [r7, #15]
	//
	make_eth(buf);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f7ff fef3 	bl	8001f00 <make_eth>
	buf[ETH_ARP_OPCODE_H_P] = ETH_ARP_OPCODE_REPLY_H_V;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	3314      	adds	r3, #20
 800211e:	2200      	movs	r2, #0
 8002120:	701a      	strb	r2, [r3, #0]
	buf[ETH_ARP_OPCODE_L_P] = ETH_ARP_OPCODE_REPLY_L_V;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	3315      	adds	r3, #21
 8002126:	2202      	movs	r2, #2
 8002128:	701a      	strb	r2, [r3, #0]
	// fill the mac addresses:
	while (i < 6) {
 800212a:	e017      	b.n	800215c <make_arp_answer_from_request+0x54>
		buf[ETH_ARP_DST_MAC_P + i] = buf[ETH_ARP_SRC_MAC_P + i];
 800212c:	7bfb      	ldrb	r3, [r7, #15]
 800212e:	3316      	adds	r3, #22
 8002130:	461a      	mov	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	441a      	add	r2, r3
 8002136:	7bfb      	ldrb	r3, [r7, #15]
 8002138:	3320      	adds	r3, #32
 800213a:	4619      	mov	r1, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	440b      	add	r3, r1
 8002140:	7812      	ldrb	r2, [r2, #0]
 8002142:	701a      	strb	r2, [r3, #0]
		buf[ETH_ARP_SRC_MAC_P + i] = macaddr[i];
 8002144:	7bfa      	ldrb	r2, [r7, #15]
 8002146:	7bfb      	ldrb	r3, [r7, #15]
 8002148:	3316      	adds	r3, #22
 800214a:	4619      	mov	r1, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	440b      	add	r3, r1
 8002150:	4917      	ldr	r1, [pc, #92]	@ (80021b0 <make_arp_answer_from_request+0xa8>)
 8002152:	5c8a      	ldrb	r2, [r1, r2]
 8002154:	701a      	strb	r2, [r3, #0]
		i++;
 8002156:	7bfb      	ldrb	r3, [r7, #15]
 8002158:	3301      	adds	r3, #1
 800215a:	73fb      	strb	r3, [r7, #15]
	while (i < 6) {
 800215c:	7bfb      	ldrb	r3, [r7, #15]
 800215e:	2b05      	cmp	r3, #5
 8002160:	d9e4      	bls.n	800212c <make_arp_answer_from_request+0x24>
	}
	i = 0;
 8002162:	2300      	movs	r3, #0
 8002164:	73fb      	strb	r3, [r7, #15]
	while (i < 4) {
 8002166:	e017      	b.n	8002198 <make_arp_answer_from_request+0x90>
		buf[ETH_ARP_DST_IP_P + i] = buf[ETH_ARP_SRC_IP_P + i];
 8002168:	7bfb      	ldrb	r3, [r7, #15]
 800216a:	331c      	adds	r3, #28
 800216c:	461a      	mov	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	441a      	add	r2, r3
 8002172:	7bfb      	ldrb	r3, [r7, #15]
 8002174:	3326      	adds	r3, #38	@ 0x26
 8002176:	4619      	mov	r1, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	440b      	add	r3, r1
 800217c:	7812      	ldrb	r2, [r2, #0]
 800217e:	701a      	strb	r2, [r3, #0]
		buf[ETH_ARP_SRC_IP_P + i] = ipaddr[i];
 8002180:	7bfa      	ldrb	r2, [r7, #15]
 8002182:	7bfb      	ldrb	r3, [r7, #15]
 8002184:	331c      	adds	r3, #28
 8002186:	4619      	mov	r1, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	440b      	add	r3, r1
 800218c:	4909      	ldr	r1, [pc, #36]	@ (80021b4 <make_arp_answer_from_request+0xac>)
 800218e:	5c8a      	ldrb	r2, [r1, r2]
 8002190:	701a      	strb	r2, [r3, #0]
		i++;
 8002192:	7bfb      	ldrb	r3, [r7, #15]
 8002194:	3301      	adds	r3, #1
 8002196:	73fb      	strb	r3, [r7, #15]
	while (i < 4) {
 8002198:	7bfb      	ldrb	r3, [r7, #15]
 800219a:	2b03      	cmp	r3, #3
 800219c:	d9e4      	bls.n	8002168 <make_arp_answer_from_request+0x60>
	}
	// eth+arp is 42 bytes:
	ENC28J60_PacketSend(42, buf);
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	202a      	movs	r0, #42	@ 0x2a
 80021a2:	f003 fcce 	bl	8005b42 <ENC28J60_PacketSend>
}
 80021a6:	bf00      	nop
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20002d34 	.word	0x20002d34
 80021b4:	20002d3c 	.word	0x20002d3c

080021b8 <make_echo_reply_from_request>:

void make_echo_reply_from_request(uint8_t *buf, uint16_t len) {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	807b      	strh	r3, [r7, #2]
	make_eth(buf);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f7ff fe9b 	bl	8001f00 <make_eth>
	make_ip(buf);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff fef4 	bl	8001fb8 <make_ip>
	buf[ICMP_TYPE_P] = ICMP_TYPE_ECHOREPLY_V;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3322      	adds	r3, #34	@ 0x22
 80021d4:	2200      	movs	r2, #0
 80021d6:	701a      	strb	r2, [r3, #0]
	// we changed only the icmp.type field from request(=8) to reply(=0).
	// we can therefore easily correct the checksum:
	if (buf[ICMP_CHECKSUM_P] > (0xff - 0x08)) {
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3324      	adds	r3, #36	@ 0x24
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2bf7      	cmp	r3, #247	@ 0xf7
 80021e0:	d905      	bls.n	80021ee <make_echo_reply_from_request+0x36>
		buf[ICMP_CHECKSUM_P + 1]++;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	3325      	adds	r3, #37	@ 0x25
 80021e6:	781a      	ldrb	r2, [r3, #0]
 80021e8:	3201      	adds	r2, #1
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	701a      	strb	r2, [r3, #0]
	}
	buf[ICMP_CHECKSUM_P] += 0x08;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3324      	adds	r3, #36	@ 0x24
 80021f2:	781a      	ldrb	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3324      	adds	r3, #36	@ 0x24
 80021f8:	3208      	adds	r2, #8
 80021fa:	b2d2      	uxtb	r2, r2
 80021fc:	701a      	strb	r2, [r3, #0]
	//
	ENC28J60_PacketSend(len, buf);
 80021fe:	887b      	ldrh	r3, [r7, #2]
 8002200:	6879      	ldr	r1, [r7, #4]
 8002202:	4618      	mov	r0, r3
 8002204:	f003 fc9d 	bl	8005b42 <ENC28J60_PacketSend>
}
 8002208:	bf00      	nop
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <make_tcp_synack_from_syn>:
	ENC28J60_PacketSend(
			UDP_HEADER_LEN + IP_HEADER_LEN + ETH_HEADER_LEN + datalen, buf);
}

// this is for the server not the client:
void make_tcp_synack_from_syn(uint8_t *buf) {
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
	uint16_t ck;
	make_eth(buf);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f7ff fe71 	bl	8001f00 <make_eth>
	// total length field in the IP header must be set:
	// 20 bytes IP + 24 bytes (20tcp+4tcp options)
	buf[IP_TOTLEN_H_P] = 0;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	3310      	adds	r3, #16
 8002222:	2200      	movs	r2, #0
 8002224:	701a      	strb	r2, [r3, #0]
	buf[IP_TOTLEN_L_P] = IP_HEADER_LEN + TCP_HEADER_LEN_PLAIN + 4;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3311      	adds	r3, #17
 800222a:	222c      	movs	r2, #44	@ 0x2c
 800222c:	701a      	strb	r2, [r3, #0]
	make_ip(buf);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7ff fec2 	bl	8001fb8 <make_ip>
	buf[TCP_FLAGS_P] = TCP_FLAGS_SYNACK_V;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	332f      	adds	r3, #47	@ 0x2f
 8002238:	2212      	movs	r2, #18
 800223a:	701a      	strb	r2, [r3, #0]
	make_tcphead(buf, 1, 0);
 800223c:	2200      	movs	r2, #0
 800223e:	2101      	movs	r1, #1
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7ff ff26 	bl	8002092 <make_tcphead>
	// put an inital seq number
	buf[TCP_SEQ_H_P + 0] = 0;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	3326      	adds	r3, #38	@ 0x26
 800224a:	2200      	movs	r2, #0
 800224c:	701a      	strb	r2, [r3, #0]
	buf[TCP_SEQ_H_P + 1] = 0;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	3327      	adds	r3, #39	@ 0x27
 8002252:	2200      	movs	r2, #0
 8002254:	701a      	strb	r2, [r3, #0]
	// we step only the second byte, this allows us to send packts
	// with 255 bytes, 512  or 765 (step by 3) without generating
	// overlapping numbers.
	buf[TCP_SEQ_H_P + 2] = seqnum;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	3328      	adds	r3, #40	@ 0x28
 800225a:	4a23      	ldr	r2, [pc, #140]	@ (80022e8 <make_tcp_synack_from_syn+0xd8>)
 800225c:	7812      	ldrb	r2, [r2, #0]
 800225e:	701a      	strb	r2, [r3, #0]
	buf[TCP_SEQ_H_P + 3] = 0;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3329      	adds	r3, #41	@ 0x29
 8002264:	2200      	movs	r2, #0
 8002266:	701a      	strb	r2, [r3, #0]
	// step the inititial seq num by something we will not use
	// during this tcp session:
	seqnum += 3;
 8002268:	4b1f      	ldr	r3, [pc, #124]	@ (80022e8 <make_tcp_synack_from_syn+0xd8>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	3303      	adds	r3, #3
 800226e:	b2da      	uxtb	r2, r3
 8002270:	4b1d      	ldr	r3, [pc, #116]	@ (80022e8 <make_tcp_synack_from_syn+0xd8>)
 8002272:	701a      	strb	r2, [r3, #0]
	// add an mss options field with MSS to 1280:
	// 1280 in hex is 0x500
	buf[TCP_OPTIONS_P] = 2;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3336      	adds	r3, #54	@ 0x36
 8002278:	2202      	movs	r2, #2
 800227a:	701a      	strb	r2, [r3, #0]
	buf[TCP_OPTIONS_P + 1] = 4;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3337      	adds	r3, #55	@ 0x37
 8002280:	2204      	movs	r2, #4
 8002282:	701a      	strb	r2, [r3, #0]
	buf[TCP_OPTIONS_P + 2] = 0x05;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3338      	adds	r3, #56	@ 0x38
 8002288:	2205      	movs	r2, #5
 800228a:	701a      	strb	r2, [r3, #0]
	buf[TCP_OPTIONS_P + 3] = 0x0;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3339      	adds	r3, #57	@ 0x39
 8002290:	2200      	movs	r2, #0
 8002292:	701a      	strb	r2, [r3, #0]
	// The tcp header length is only a 4 bit field (the upper 4 bits).
	// It is calculated in units of 4 bytes.
	// E.g 24 bytes: 24/4=6 => 0x60=header len field
	buf[TCP_HEADER_LEN_P] = 0x60;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	332e      	adds	r3, #46	@ 0x2e
 8002298:	2260      	movs	r2, #96	@ 0x60
 800229a:	701a      	strb	r2, [r3, #0]
	// here we must just be sure that the web browser contacting us
	// will send only one get packet
	buf[TCP_WIN_SIZE] = 0x5; // 1400=0x578
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3330      	adds	r3, #48	@ 0x30
 80022a0:	2205      	movs	r2, #5
 80022a2:	701a      	strb	r2, [r3, #0]
	buf[TCP_WIN_SIZE + 1] = 0x78;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3331      	adds	r3, #49	@ 0x31
 80022a8:	2278      	movs	r2, #120	@ 0x78
 80022aa:	701a      	strb	r2, [r3, #0]
	// calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + 4 (one option: mss)
	ck = checksum(&buf[IP_SRC_P], 8 + TCP_HEADER_LEN_PLAIN + 4, 2);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	331a      	adds	r3, #26
 80022b0:	2202      	movs	r2, #2
 80022b2:	2120      	movs	r1, #32
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff fcf9 	bl	8001cac <checksum>
 80022ba:	4603      	mov	r3, r0
 80022bc:	81fb      	strh	r3, [r7, #14]
	buf[TCP_CHECKSUM_H_P] = ck >> 8;
 80022be:	89fb      	ldrh	r3, [r7, #14]
 80022c0:	0a1b      	lsrs	r3, r3, #8
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3332      	adds	r3, #50	@ 0x32
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	701a      	strb	r2, [r3, #0]
	buf[TCP_CHECKSUM_L_P] = ck & 0xff;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3333      	adds	r3, #51	@ 0x33
 80022d0:	89fa      	ldrh	r2, [r7, #14]
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	701a      	strb	r2, [r3, #0]
	// add 4 for option mss:
	ENC28J60_PacketSend(
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	203a      	movs	r0, #58	@ 0x3a
 80022da:	f003 fc32 	bl	8005b42 <ENC28J60_PacketSend>
			IP_HEADER_LEN + TCP_HEADER_LEN_PLAIN + 4 + ETH_HEADER_LEN, buf);
}
 80022de:	bf00      	nop
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20000089 	.word	0x20000089

080022ec <get_tcp_data_len>:

// do some basic length calculations and store the result in static variables
uint16_t get_tcp_data_len(uint8_t *buf) {
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
	int16_t i;
	i = (((int16_t) buf[IP_TOTLEN_H_P]) << 8) | (buf[IP_TOTLEN_L_P] & 0xff);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3310      	adds	r3, #16
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	021b      	lsls	r3, r3, #8
 80022fc:	b21a      	sxth	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3311      	adds	r3, #17
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	b21b      	sxth	r3, r3
 8002306:	4313      	orrs	r3, r2
 8002308:	81fb      	strh	r3, [r7, #14]
	i -= IP_HEADER_LEN;
 800230a:	89fb      	ldrh	r3, [r7, #14]
 800230c:	3b14      	subs	r3, #20
 800230e:	b29b      	uxth	r3, r3
 8002310:	81fb      	strh	r3, [r7, #14]
	i -= (buf[TCP_HEADER_LEN_P] >> 4) * 4; // generate len in bytes;
 8002312:	89fa      	ldrh	r2, [r7, #14]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	332e      	adds	r3, #46	@ 0x2e
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	091b      	lsrs	r3, r3, #4
 800231c:	b2db      	uxtb	r3, r3
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	b29b      	uxth	r3, r3
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	b29b      	uxth	r3, r3
 8002326:	81fb      	strh	r3, [r7, #14]
	if (i <= 0) {
 8002328:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800232c:	2b00      	cmp	r3, #0
 800232e:	dc01      	bgt.n	8002334 <get_tcp_data_len+0x48>
		i = 0;
 8002330:	2300      	movs	r3, #0
 8002332:	81fb      	strh	r3, [r7, #14]
	}
	return ((uint16_t) i);
 8002334:	89fb      	ldrh	r3, [r7, #14]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <make_tcp_ack_from_any>:
	return (fill_tcp_data_len(buf, pos, (char*) s, strlen(s)));
}

// Make just an ack packet with no tcp data inside
// This will modify the eth/ip/tcp header 
void make_tcp_ack_from_any(uint8_t *buf, int16_t datlentoack, uint8_t addflags) {
 8002342:	b580      	push	{r7, lr}
 8002344:	b084      	sub	sp, #16
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	460b      	mov	r3, r1
 800234c:	807b      	strh	r3, [r7, #2]
 800234e:	4613      	mov	r3, r2
 8002350:	707b      	strb	r3, [r7, #1]
	uint16_t j;
	make_eth(buf);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7ff fdd4 	bl	8001f00 <make_eth>
	// fill the header:
	buf[TCP_FLAGS_P] = TCP_FLAGS_ACK_V | addflags;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	332f      	adds	r3, #47	@ 0x2f
 800235c:	787a      	ldrb	r2, [r7, #1]
 800235e:	f042 0210 	orr.w	r2, r2, #16
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	701a      	strb	r2, [r3, #0]
	if (addflags == TCP_FLAGS_RST_V) {
 8002366:	787b      	ldrb	r3, [r7, #1]
 8002368:	2b04      	cmp	r3, #4
 800236a:	d106      	bne.n	800237a <make_tcp_ack_from_any+0x38>
		make_tcphead(buf, datlentoack, 1);
 800236c:	887b      	ldrh	r3, [r7, #2]
 800236e:	2201      	movs	r2, #1
 8002370:	4619      	mov	r1, r3
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7ff fe8d 	bl	8002092 <make_tcphead>
 8002378:	e00b      	b.n	8002392 <make_tcp_ack_from_any+0x50>
	} else {
		if (datlentoack == 0) {
 800237a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <make_tcp_ack_from_any+0x44>
			// if there is no data then we must still acknoledge one packet
			datlentoack = 1;
 8002382:	2301      	movs	r3, #1
 8002384:	807b      	strh	r3, [r7, #2]
		}
		make_tcphead(buf, datlentoack, 1); // no options
 8002386:	887b      	ldrh	r3, [r7, #2]
 8002388:	2201      	movs	r2, #1
 800238a:	4619      	mov	r1, r3
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7ff fe80 	bl	8002092 <make_tcphead>
	}
	// total length field in the IP header must be set:
	// 20 bytes IP + 20 bytes tcp (when no options)
	j = IP_HEADER_LEN + TCP_HEADER_LEN_PLAIN;
 8002392:	2328      	movs	r3, #40	@ 0x28
 8002394:	81fb      	strh	r3, [r7, #14]
	buf[IP_TOTLEN_H_P] = j >> 8;
 8002396:	89fb      	ldrh	r3, [r7, #14]
 8002398:	0a1b      	lsrs	r3, r3, #8
 800239a:	b29a      	uxth	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3310      	adds	r3, #16
 80023a0:	b2d2      	uxtb	r2, r2
 80023a2:	701a      	strb	r2, [r3, #0]
	buf[IP_TOTLEN_L_P] = j & 0xff;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3311      	adds	r3, #17
 80023a8:	89fa      	ldrh	r2, [r7, #14]
 80023aa:	b2d2      	uxtb	r2, r2
 80023ac:	701a      	strb	r2, [r3, #0]
	make_ip(buf);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7ff fe02 	bl	8001fb8 <make_ip>
	// use a low window size otherwise we have to have
	// timers and can not just react on every packet.
	buf[TCP_WIN_SIZE] = 0x4; // 1024=0x400
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3330      	adds	r3, #48	@ 0x30
 80023b8:	2204      	movs	r2, #4
 80023ba:	701a      	strb	r2, [r3, #0]
	buf[TCP_WIN_SIZE + 1] = 0x0;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3331      	adds	r3, #49	@ 0x31
 80023c0:	2200      	movs	r2, #0
 80023c2:	701a      	strb	r2, [r3, #0]
	// calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + data len
	j = checksum(&buf[IP_SRC_P], 8 + TCP_HEADER_LEN_PLAIN, 2);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	331a      	adds	r3, #26
 80023c8:	2202      	movs	r2, #2
 80023ca:	211c      	movs	r1, #28
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff fc6d 	bl	8001cac <checksum>
 80023d2:	4603      	mov	r3, r0
 80023d4:	81fb      	strh	r3, [r7, #14]
	buf[TCP_CHECKSUM_H_P] = j >> 8;
 80023d6:	89fb      	ldrh	r3, [r7, #14]
 80023d8:	0a1b      	lsrs	r3, r3, #8
 80023da:	b29a      	uxth	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3332      	adds	r3, #50	@ 0x32
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	701a      	strb	r2, [r3, #0]
	buf[TCP_CHECKSUM_L_P] = j & 0xff;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3333      	adds	r3, #51	@ 0x33
 80023e8:	89fa      	ldrh	r2, [r7, #14]
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	701a      	strb	r2, [r3, #0]
	ENC28J60_PacketSend(IP_HEADER_LEN + TCP_HEADER_LEN_PLAIN + ETH_HEADER_LEN,
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	2036      	movs	r0, #54	@ 0x36
 80023f2:	f003 fba6 	bl	8005b42 <ENC28J60_PacketSend>
			buf);
}
 80023f6:	bf00      	nop
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <make_tcp_ack_with_data_noflags>:
// dlen is the amount of tcp data (http data) we send in this packet
// You can use this function only immediately after make_tcp_ack_from_any
// This is because this function will NOT modify the eth/ip/tcp header except for
// length and checksum
// You must set TCP_FLAGS before calling this
void make_tcp_ack_with_data_noflags(uint8_t *buf, uint16_t dlen) {
 80023fe:	b580      	push	{r7, lr}
 8002400:	b084      	sub	sp, #16
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
 8002406:	460b      	mov	r3, r1
 8002408:	807b      	strh	r3, [r7, #2]
	uint16_t j;
	// total length field in the IP header must be set:
	// 20 bytes IP + 20 bytes tcp (when no options) + len of data
	j = IP_HEADER_LEN + TCP_HEADER_LEN_PLAIN + dlen;
 800240a:	887b      	ldrh	r3, [r7, #2]
 800240c:	3328      	adds	r3, #40	@ 0x28
 800240e:	81fb      	strh	r3, [r7, #14]
	buf[IP_TOTLEN_H_P] = j >> 8;
 8002410:	89fb      	ldrh	r3, [r7, #14]
 8002412:	0a1b      	lsrs	r3, r3, #8
 8002414:	b29a      	uxth	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3310      	adds	r3, #16
 800241a:	b2d2      	uxtb	r2, r2
 800241c:	701a      	strb	r2, [r3, #0]
	buf[IP_TOTLEN_L_P] = j & 0xff;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3311      	adds	r3, #17
 8002422:	89fa      	ldrh	r2, [r7, #14]
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	701a      	strb	r2, [r3, #0]
	fill_ip_hdr_checksum(buf);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f7ff fd93 	bl	8001f54 <fill_ip_hdr_checksum>
	// zero the checksum
	buf[TCP_CHECKSUM_H_P] = 0;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	3332      	adds	r3, #50	@ 0x32
 8002432:	2200      	movs	r2, #0
 8002434:	701a      	strb	r2, [r3, #0]
	buf[TCP_CHECKSUM_L_P] = 0;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3333      	adds	r3, #51	@ 0x33
 800243a:	2200      	movs	r2, #0
 800243c:	701a      	strb	r2, [r3, #0]
	// calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + data len
	j = checksum(&buf[IP_SRC_P], 8 + TCP_HEADER_LEN_PLAIN + dlen, 2);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f103 001a 	add.w	r0, r3, #26
 8002444:	887b      	ldrh	r3, [r7, #2]
 8002446:	331c      	adds	r3, #28
 8002448:	b29b      	uxth	r3, r3
 800244a:	2202      	movs	r2, #2
 800244c:	4619      	mov	r1, r3
 800244e:	f7ff fc2d 	bl	8001cac <checksum>
 8002452:	4603      	mov	r3, r0
 8002454:	81fb      	strh	r3, [r7, #14]
	buf[TCP_CHECKSUM_H_P] = j >> 8;
 8002456:	89fb      	ldrh	r3, [r7, #14]
 8002458:	0a1b      	lsrs	r3, r3, #8
 800245a:	b29a      	uxth	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3332      	adds	r3, #50	@ 0x32
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	701a      	strb	r2, [r3, #0]
	buf[TCP_CHECKSUM_L_P] = j & 0xff;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3333      	adds	r3, #51	@ 0x33
 8002468:	89fa      	ldrh	r2, [r7, #14]
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	701a      	strb	r2, [r3, #0]
	ENC28J60_PacketSend(
 800246e:	887b      	ldrh	r3, [r7, #2]
 8002470:	3336      	adds	r3, #54	@ 0x36
 8002472:	b29b      	uxth	r3, r3
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	4618      	mov	r0, r3
 8002478:	f003 fb63 	bl	8005b42 <ENC28J60_PacketSend>
			IP_HEADER_LEN + TCP_HEADER_LEN_PLAIN + dlen + ETH_HEADER_LEN, buf);
}
 800247c:	bf00      	nop
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <wb_server_reply>:
	buf[TCP_FLAGS_P] = TCP_FLAGS_ACK_V | TCP_FLAGS_PUSH_V | TCP_FLAGS_FIN_V;
	make_tcp_ack_with_data_noflags(buf, dlen); // send data
}

void wb_server_reply(uint8_t *buf, uint16_t dlen)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	460b      	mov	r3, r1
 800248e:	807b      	strh	r3, [r7, #2]
	make_tcp_ack_from_any(buf, info_data_len, 0); // send ack for http get
 8002490:	4b0a      	ldr	r3, [pc, #40]	@ (80024bc <wb_server_reply+0x38>)
 8002492:	881b      	ldrh	r3, [r3, #0]
 8002494:	b21b      	sxth	r3, r3
 8002496:	2200      	movs	r2, #0
 8002498:	4619      	mov	r1, r3
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7ff ff51 	bl	8002342 <make_tcp_ack_from_any>
	// fill the header:
	// This code requires that we send only one data packet
	// because we keep no state information. We must therefore set
	// the fin here:
	buf[TCP_FLAGS_P] = TCP_FLAGS_ACK_V | TCP_FLAGS_PUSH_V;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	332f      	adds	r3, #47	@ 0x2f
 80024a4:	2218      	movs	r2, #24
 80024a6:	701a      	strb	r2, [r3, #0]
	make_tcp_ack_with_data_noflags(buf, dlen); // send data
 80024a8:	887b      	ldrh	r3, [r7, #2]
 80024aa:	4619      	mov	r1, r3
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f7ff ffa6 	bl	80023fe <make_tcp_ack_with_data_noflags>
}
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20002d40 	.word	0x20002d40

080024c0 <fill_buf_p>:

#if defined (NTP_CLIENT) ||  defined (WOL_CLIENT) || defined (UDP_CLIENT) || defined (TCP_CLIENT) || defined (PING_CLIENT)
// fill buffer with a prog-mem string - CHANGED TO NON PROGMEM!
void fill_buf_p(uint8_t *buf, uint16_t len, const char *s) {
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	460b      	mov	r3, r1
 80024ca:	607a      	str	r2, [r7, #4]
 80024cc:	817b      	strh	r3, [r7, #10]
	// fill in tcp data at position pos
	//
	// with no options the data starts after the checksum + 2 more bytes (urgent ptr)
	while (len) {
 80024ce:	e00c      	b.n	80024ea <fill_buf_p+0x2a>
		*buf = *s;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	781a      	ldrb	r2, [r3, #0]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	701a      	strb	r2, [r3, #0]
		buf++;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	3301      	adds	r3, #1
 80024dc:	60fb      	str	r3, [r7, #12]
		s++;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	3301      	adds	r3, #1
 80024e2:	607b      	str	r3, [r7, #4]
		len--;
 80024e4:	897b      	ldrh	r3, [r7, #10]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	817b      	strh	r3, [r7, #10]
	while (len) {
 80024ea:	897b      	ldrh	r3, [r7, #10]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1ef      	bne.n	80024d0 <fill_buf_p+0x10>
	}

}
 80024f0:	bf00      	nop
 80024f2:	bf00      	nop
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
	...

08002500 <client_arp_whohas>:
}
#endif // WOL_CLIENT

#if defined (NTP_CLIENT) || defined (UDP_CLIENT) || defined (TCP_CLIENT) || defined (PING_CLIENT)
// make a arp request
void client_arp_whohas(uint8_t *buf, uint8_t *ip_we_search) {
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 800250a:	2300      	movs	r3, #0
 800250c:	73fb      	strb	r3, [r7, #15]
	//
	while (i < 6) {
 800250e:	e010      	b.n	8002532 <client_arp_whohas+0x32>
		buf[ETH_DST_MAC + i] = 0xff;
 8002510:	7bfb      	ldrb	r3, [r7, #15]
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	4413      	add	r3, r2
 8002516:	22ff      	movs	r2, #255	@ 0xff
 8002518:	701a      	strb	r2, [r3, #0]
		buf[ETH_SRC_MAC + i] = macaddr[i];
 800251a:	7bfa      	ldrb	r2, [r7, #15]
 800251c:	7bfb      	ldrb	r3, [r7, #15]
 800251e:	3306      	adds	r3, #6
 8002520:	4619      	mov	r1, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	440b      	add	r3, r1
 8002526:	492e      	ldr	r1, [pc, #184]	@ (80025e0 <client_arp_whohas+0xe0>)
 8002528:	5c8a      	ldrb	r2, [r1, r2]
 800252a:	701a      	strb	r2, [r3, #0]
		i++;
 800252c:	7bfb      	ldrb	r3, [r7, #15]
 800252e:	3301      	adds	r3, #1
 8002530:	73fb      	strb	r3, [r7, #15]
	while (i < 6) {
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	2b05      	cmp	r3, #5
 8002536:	d9eb      	bls.n	8002510 <client_arp_whohas+0x10>
	}
	buf[ETH_TYPE_H_P] = ETHTYPE_ARP_H_V;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	330c      	adds	r3, #12
 800253c:	2208      	movs	r2, #8
 800253e:	701a      	strb	r2, [r3, #0]
	buf[ETH_TYPE_L_P] = ETHTYPE_ARP_L_V;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	330d      	adds	r3, #13
 8002544:	2206      	movs	r2, #6
 8002546:	701a      	strb	r2, [r3, #0]
	fill_buf_p(&buf[ETH_ARP_P], 8, arpreqhdr);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	330e      	adds	r3, #14
 800254c:	4a25      	ldr	r2, [pc, #148]	@ (80025e4 <client_arp_whohas+0xe4>)
 800254e:	2108      	movs	r1, #8
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff ffb5 	bl	80024c0 <fill_buf_p>
	i = 0;
 8002556:	2300      	movs	r3, #0
 8002558:	73fb      	strb	r3, [r7, #15]
	while (i < 6) {
 800255a:	e012      	b.n	8002582 <client_arp_whohas+0x82>
		buf[ETH_ARP_SRC_MAC_P + i] = macaddr[i];
 800255c:	7bfa      	ldrb	r2, [r7, #15]
 800255e:	7bfb      	ldrb	r3, [r7, #15]
 8002560:	3316      	adds	r3, #22
 8002562:	4619      	mov	r1, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	440b      	add	r3, r1
 8002568:	491d      	ldr	r1, [pc, #116]	@ (80025e0 <client_arp_whohas+0xe0>)
 800256a:	5c8a      	ldrb	r2, [r1, r2]
 800256c:	701a      	strb	r2, [r3, #0]
		buf[ETH_ARP_DST_MAC_P + i] = 0;
 800256e:	7bfb      	ldrb	r3, [r7, #15]
 8002570:	3320      	adds	r3, #32
 8002572:	461a      	mov	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4413      	add	r3, r2
 8002578:	2200      	movs	r2, #0
 800257a:	701a      	strb	r2, [r3, #0]
		i++;
 800257c:	7bfb      	ldrb	r3, [r7, #15]
 800257e:	3301      	adds	r3, #1
 8002580:	73fb      	strb	r3, [r7, #15]
	while (i < 6) {
 8002582:	7bfb      	ldrb	r3, [r7, #15]
 8002584:	2b05      	cmp	r3, #5
 8002586:	d9e9      	bls.n	800255c <client_arp_whohas+0x5c>
	}
	i = 0;
 8002588:	2300      	movs	r3, #0
 800258a:	73fb      	strb	r3, [r7, #15]
	while (i < 4) {
 800258c:	e015      	b.n	80025ba <client_arp_whohas+0xba>
		buf[ETH_ARP_DST_IP_P + i] = *(ip_we_search + i);
 800258e:	7bfb      	ldrb	r3, [r7, #15]
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	441a      	add	r2, r3
 8002594:	7bfb      	ldrb	r3, [r7, #15]
 8002596:	3326      	adds	r3, #38	@ 0x26
 8002598:	4619      	mov	r1, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	440b      	add	r3, r1
 800259e:	7812      	ldrb	r2, [r2, #0]
 80025a0:	701a      	strb	r2, [r3, #0]
		buf[ETH_ARP_SRC_IP_P + i] = ipaddr[i];
 80025a2:	7bfa      	ldrb	r2, [r7, #15]
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
 80025a6:	331c      	adds	r3, #28
 80025a8:	4619      	mov	r1, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	440b      	add	r3, r1
 80025ae:	490e      	ldr	r1, [pc, #56]	@ (80025e8 <client_arp_whohas+0xe8>)
 80025b0:	5c8a      	ldrb	r2, [r1, r2]
 80025b2:	701a      	strb	r2, [r3, #0]
		i++;
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
 80025b6:	3301      	adds	r3, #1
 80025b8:	73fb      	strb	r3, [r7, #15]
	while (i < 4) {
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
 80025bc:	2b03      	cmp	r3, #3
 80025be:	d9e6      	bls.n	800258e <client_arp_whohas+0x8e>
	}
	waitgwmac |= WGW_ACCEPT_ARP_REPLY;
 80025c0:	4b0a      	ldr	r3, [pc, #40]	@ (80025ec <client_arp_whohas+0xec>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	f043 0308 	orr.w	r3, r3, #8
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	4b07      	ldr	r3, [pc, #28]	@ (80025ec <client_arp_whohas+0xec>)
 80025ce:	701a      	strb	r2, [r3, #0]

	// 0x2a=42=len of packet
	ENC28J60_PacketSend(0x2a, buf);
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	202a      	movs	r0, #42	@ 0x2a
 80025d4:	f003 fab5 	bl	8005b42 <ENC28J60_PacketSend>
}
 80025d8:	bf00      	nop
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20002d34 	.word	0x20002d34
 80025e4:	0800f86c 	.word	0x0800f86c
 80025e8:	20002d3c 	.word	0x20002d3c
 80025ec:	20000088 	.word	0x20000088

080025f0 <client_store_gw_mac>:
	return (1);
}

// store the mac addr from an arp reply
// no len check here, you must first call eth_type_is_arp_and_my_ip
uint8_t client_store_gw_mac(uint8_t *buf) {
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80025f8:	2300      	movs	r3, #0
 80025fa:	73fb      	strb	r3, [r7, #15]
	while (i < 4) {
 80025fc:	e00f      	b.n	800261e <client_store_gw_mac+0x2e>
		if (buf[ETH_ARP_SRC_IP_P + i] != gwip[i]) {
 80025fe:	7bfb      	ldrb	r3, [r7, #15]
 8002600:	331c      	adds	r3, #28
 8002602:	461a      	mov	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4413      	add	r3, r2
 8002608:	781a      	ldrb	r2, [r3, #0]
 800260a:	7bfb      	ldrb	r3, [r7, #15]
 800260c:	4912      	ldr	r1, [pc, #72]	@ (8002658 <client_store_gw_mac+0x68>)
 800260e:	5ccb      	ldrb	r3, [r1, r3]
 8002610:	429a      	cmp	r2, r3
 8002612:	d001      	beq.n	8002618 <client_store_gw_mac+0x28>
			return (0);
 8002614:	2300      	movs	r3, #0
 8002616:	e018      	b.n	800264a <client_store_gw_mac+0x5a>
		}
		i++;
 8002618:	7bfb      	ldrb	r3, [r7, #15]
 800261a:	3301      	adds	r3, #1
 800261c:	73fb      	strb	r3, [r7, #15]
	while (i < 4) {
 800261e:	7bfb      	ldrb	r3, [r7, #15]
 8002620:	2b03      	cmp	r3, #3
 8002622:	d9ec      	bls.n	80025fe <client_store_gw_mac+0xe>
	}
	i = 0;
 8002624:	2300      	movs	r3, #0
 8002626:	73fb      	strb	r3, [r7, #15]
	while (i < 6) {
 8002628:	e00b      	b.n	8002642 <client_store_gw_mac+0x52>
		gwmacaddr[i] = buf[ETH_ARP_SRC_MAC_P + i];
 800262a:	7bfb      	ldrb	r3, [r7, #15]
 800262c:	3316      	adds	r3, #22
 800262e:	461a      	mov	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	441a      	add	r2, r3
 8002634:	7bfb      	ldrb	r3, [r7, #15]
 8002636:	7811      	ldrb	r1, [r2, #0]
 8002638:	4a08      	ldr	r2, [pc, #32]	@ (800265c <client_store_gw_mac+0x6c>)
 800263a:	54d1      	strb	r1, [r2, r3]
		i++;
 800263c:	7bfb      	ldrb	r3, [r7, #15]
 800263e:	3301      	adds	r3, #1
 8002640:	73fb      	strb	r3, [r7, #15]
	while (i < 6) {
 8002642:	7bfb      	ldrb	r3, [r7, #15]
 8002644:	2b05      	cmp	r3, #5
 8002646:	d9f0      	bls.n	800262a <client_store_gw_mac+0x3a>
	}
	return (1);
 8002648:	2301      	movs	r3, #1
}
 800264a:	4618      	mov	r0, r3
 800264c:	3714      	adds	r7, #20
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	20002d24 	.word	0x20002d24
 800265c:	20002d28 	.word	0x20002d28

08002660 <client_set_gwip>:
 i++;
 }
 }
 */

void client_set_gwip(uint8_t *gwipaddr) {
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8002668:	2300      	movs	r3, #0
 800266a:	73fb      	strb	r3, [r7, #15]

	waitgwmac = WGW_INITIAL_ARP; // causes an arp request in the packet loop
 800266c:	4b0b      	ldr	r3, [pc, #44]	@ (800269c <client_set_gwip+0x3c>)
 800266e:	2201      	movs	r2, #1
 8002670:	701a      	strb	r2, [r3, #0]
#ifdef _DEBUG_
	LOG_DBG("GateWay ");
#endif
	while (i < 4) {
 8002672:	e009      	b.n	8002688 <client_set_gwip+0x28>
		gwip[i] = gwipaddr[i];
 8002674:	7bfb      	ldrb	r3, [r7, #15]
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	441a      	add	r2, r3
 800267a:	7bfb      	ldrb	r3, [r7, #15]
 800267c:	7811      	ldrb	r1, [r2, #0]
 800267e:	4a08      	ldr	r2, [pc, #32]	@ (80026a0 <client_set_gwip+0x40>)
 8002680:	54d1      	strb	r1, [r2, r3]
#ifdef _DEBUG_
		LOG_DBG("[%d]", gwip[i]);
#endif
		i++;
 8002682:	7bfb      	ldrb	r3, [r7, #15]
 8002684:	3301      	adds	r3, #1
 8002686:	73fb      	strb	r3, [r7, #15]
	while (i < 4) {
 8002688:	7bfb      	ldrb	r3, [r7, #15]
 800268a:	2b03      	cmp	r3, #3
 800268c:	d9f2      	bls.n	8002674 <client_set_gwip+0x14>
	}
}
 800268e:	bf00      	nop
 8002690:	bf00      	nop
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	20000088 	.word	0x20000088
 80026a0:	20002d24 	.word	0x20002d24

080026a4 <client_syn>:
}

#if defined (TCP_CLIENT)
// Make a tcp syn packet
void client_syn(uint8_t *buf, uint8_t srcport, uint8_t dstport_h,
		uint8_t dstport_l) {
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	4608      	mov	r0, r1
 80026ae:	4611      	mov	r1, r2
 80026b0:	461a      	mov	r2, r3
 80026b2:	4603      	mov	r3, r0
 80026b4:	70fb      	strb	r3, [r7, #3]
 80026b6:	460b      	mov	r3, r1
 80026b8:	70bb      	strb	r3, [r7, #2]
 80026ba:	4613      	mov	r3, r2
 80026bc:	707b      	strb	r3, [r7, #1]
	uint16_t ck;
	uint8_t i = 0;
 80026be:	2300      	movs	r3, #0
 80026c0:	73fb      	strb	r3, [r7, #15]
	// -- make the main part of the eth/IP/tcp header:
	while (i < 6) {
 80026c2:	e012      	b.n	80026ea <client_syn+0x46>
		buf[ETH_DST_MAC + i] = gwmacaddr[i]; // gw mac in local lan or host mac
 80026c4:	7bfa      	ldrb	r2, [r7, #15]
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
 80026c8:	6879      	ldr	r1, [r7, #4]
 80026ca:	440b      	add	r3, r1
 80026cc:	495f      	ldr	r1, [pc, #380]	@ (800284c <client_syn+0x1a8>)
 80026ce:	5c8a      	ldrb	r2, [r1, r2]
 80026d0:	701a      	strb	r2, [r3, #0]
		buf[ETH_SRC_MAC + i] = macaddr[i];
 80026d2:	7bfa      	ldrb	r2, [r7, #15]
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
 80026d6:	3306      	adds	r3, #6
 80026d8:	4619      	mov	r1, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	440b      	add	r3, r1
 80026de:	495c      	ldr	r1, [pc, #368]	@ (8002850 <client_syn+0x1ac>)
 80026e0:	5c8a      	ldrb	r2, [r1, r2]
 80026e2:	701a      	strb	r2, [r3, #0]
		i++;
 80026e4:	7bfb      	ldrb	r3, [r7, #15]
 80026e6:	3301      	adds	r3, #1
 80026e8:	73fb      	strb	r3, [r7, #15]
	while (i < 6) {
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
 80026ec:	2b05      	cmp	r3, #5
 80026ee:	d9e9      	bls.n	80026c4 <client_syn+0x20>
	}
	buf[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	330c      	adds	r3, #12
 80026f4:	2208      	movs	r2, #8
 80026f6:	701a      	strb	r2, [r3, #0]
	buf[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	330d      	adds	r3, #13
 80026fc:	2200      	movs	r2, #0
 80026fe:	701a      	strb	r2, [r3, #0]
	fill_buf_p(&buf[IP_P], 9, iphdr);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	330e      	adds	r3, #14
 8002704:	4a53      	ldr	r2, [pc, #332]	@ (8002854 <client_syn+0x1b0>)
 8002706:	2109      	movs	r1, #9
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff fed9 	bl	80024c0 <fill_buf_p>
	buf[IP_TOTLEN_L_P] = 44; // good for syn
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	3311      	adds	r3, #17
 8002712:	222c      	movs	r2, #44	@ 0x2c
 8002714:	701a      	strb	r2, [r3, #0]
	buf[IP_PROTO_P] = IP_PROTO_TCP_V;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	3317      	adds	r3, #23
 800271a:	2206      	movs	r2, #6
 800271c:	701a      	strb	r2, [r3, #0]
	i = 0;
 800271e:	2300      	movs	r3, #0
 8002720:	73fb      	strb	r3, [r7, #15]
	while (i < 4) {
 8002722:	e014      	b.n	800274e <client_syn+0xaa>
		buf[IP_DST_P + i] = tcpsrvip[i];
 8002724:	7bfa      	ldrb	r2, [r7, #15]
 8002726:	7bfb      	ldrb	r3, [r7, #15]
 8002728:	331e      	adds	r3, #30
 800272a:	4619      	mov	r1, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	440b      	add	r3, r1
 8002730:	4949      	ldr	r1, [pc, #292]	@ (8002858 <client_syn+0x1b4>)
 8002732:	5c8a      	ldrb	r2, [r1, r2]
 8002734:	701a      	strb	r2, [r3, #0]
		buf[IP_SRC_P + i] = ipaddr[i];
 8002736:	7bfa      	ldrb	r2, [r7, #15]
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	331a      	adds	r3, #26
 800273c:	4619      	mov	r1, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	440b      	add	r3, r1
 8002742:	4946      	ldr	r1, [pc, #280]	@ (800285c <client_syn+0x1b8>)
 8002744:	5c8a      	ldrb	r2, [r1, r2]
 8002746:	701a      	strb	r2, [r3, #0]
		i++;
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	3301      	adds	r3, #1
 800274c:	73fb      	strb	r3, [r7, #15]
	while (i < 4) {
 800274e:	7bfb      	ldrb	r3, [r7, #15]
 8002750:	2b03      	cmp	r3, #3
 8002752:	d9e7      	bls.n	8002724 <client_syn+0x80>
	}
	fill_ip_hdr_checksum(buf);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7ff fbfd 	bl	8001f54 <fill_ip_hdr_checksum>
	buf[TCP_DST_PORT_H_P] = dstport_h;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3324      	adds	r3, #36	@ 0x24
 800275e:	78ba      	ldrb	r2, [r7, #2]
 8002760:	701a      	strb	r2, [r3, #0]
	buf[TCP_DST_PORT_L_P] = dstport_l;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	3325      	adds	r3, #37	@ 0x25
 8002766:	787a      	ldrb	r2, [r7, #1]
 8002768:	701a      	strb	r2, [r3, #0]
	buf[TCP_SRC_PORT_H_P] = TCPCLIENT_SRC_PORT_H;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	3322      	adds	r3, #34	@ 0x22
 800276e:	220b      	movs	r2, #11
 8002770:	701a      	strb	r2, [r3, #0]
	buf[TCP_SRC_PORT_L_P] = srcport; // lower 8 bit of src port
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	3323      	adds	r3, #35	@ 0x23
 8002776:	78fa      	ldrb	r2, [r7, #3]
 8002778:	701a      	strb	r2, [r3, #0]
	i = 0;
 800277a:	2300      	movs	r3, #0
 800277c:	73fb      	strb	r3, [r7, #15]
	// zero out sequence number and acknowledgement number
	while (i < 8) {
 800277e:	e009      	b.n	8002794 <client_syn+0xf0>
		buf[TCP_SEQ_H_P + i] = 0;
 8002780:	7bfb      	ldrb	r3, [r7, #15]
 8002782:	3326      	adds	r3, #38	@ 0x26
 8002784:	461a      	mov	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4413      	add	r3, r2
 800278a:	2200      	movs	r2, #0
 800278c:	701a      	strb	r2, [r3, #0]
		i++;
 800278e:	7bfb      	ldrb	r3, [r7, #15]
 8002790:	3301      	adds	r3, #1
 8002792:	73fb      	strb	r3, [r7, #15]
	while (i < 8) {
 8002794:	7bfb      	ldrb	r3, [r7, #15]
 8002796:	2b07      	cmp	r3, #7
 8002798:	d9f2      	bls.n	8002780 <client_syn+0xdc>
	// -- header ready
	// put inital seq number
	// we step only the second byte, this allows us to send packts
	// with 255 bytes 512 (if we step the initial seqnum by 2)
	// or 765 (step by 3)
	buf[TCP_SEQ_H_P + 2] = seqnum;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	3328      	adds	r3, #40	@ 0x28
 800279e:	4a30      	ldr	r2, [pc, #192]	@ (8002860 <client_syn+0x1bc>)
 80027a0:	7812      	ldrb	r2, [r2, #0]
 80027a2:	701a      	strb	r2, [r3, #0]
	// step the inititial seq num by something we will not use
	// during this tcp session:
	seqnum += 3;
 80027a4:	4b2e      	ldr	r3, [pc, #184]	@ (8002860 <client_syn+0x1bc>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	3303      	adds	r3, #3
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	4b2c      	ldr	r3, [pc, #176]	@ (8002860 <client_syn+0x1bc>)
 80027ae:	701a      	strb	r2, [r3, #0]
	buf[TCP_HEADER_LEN_P] = 0x60; // 0x60=24 len: (0x60>>4) * 4
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	332e      	adds	r3, #46	@ 0x2e
 80027b4:	2260      	movs	r2, #96	@ 0x60
 80027b6:	701a      	strb	r2, [r3, #0]
	buf[TCP_FLAGS_P] = TCP_FLAGS_SYN_V;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	332f      	adds	r3, #47	@ 0x2f
 80027bc:	2202      	movs	r2, #2
 80027be:	701a      	strb	r2, [r3, #0]
	// use a low window size otherwise we have to have
	// timers and can not just react on every packet.
	buf[TCP_WIN_SIZE] = 0x4; // 1024=0x400, 768 = 0x300, initial window
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3330      	adds	r3, #48	@ 0x30
 80027c4:	2204      	movs	r2, #4
 80027c6:	701a      	strb	r2, [r3, #0]
	buf[TCP_WIN_SIZE + 1] = 0x0;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3331      	adds	r3, #49	@ 0x31
 80027cc:	2200      	movs	r2, #0
 80027ce:	701a      	strb	r2, [r3, #0]
	// zero the checksum
	buf[TCP_CHECKSUM_H_P] = 0;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3332      	adds	r3, #50	@ 0x32
 80027d4:	2200      	movs	r2, #0
 80027d6:	701a      	strb	r2, [r3, #0]
	buf[TCP_CHECKSUM_L_P] = 0;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3333      	adds	r3, #51	@ 0x33
 80027dc:	2200      	movs	r2, #0
 80027de:	701a      	strb	r2, [r3, #0]
	// urgent pointer
	buf[TCP_CHECKSUM_L_P + 1] = 0;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3334      	adds	r3, #52	@ 0x34
 80027e4:	2200      	movs	r2, #0
 80027e6:	701a      	strb	r2, [r3, #0]
	buf[TCP_CHECKSUM_L_P + 2] = 0;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3335      	adds	r3, #53	@ 0x35
 80027ec:	2200      	movs	r2, #0
 80027ee:	701a      	strb	r2, [r3, #0]
	// MSS=768, must be more than 50% of the window size we use
	// 768 in hex is 0x300
	buf[TCP_OPTIONS_P] = 2;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3336      	adds	r3, #54	@ 0x36
 80027f4:	2202      	movs	r2, #2
 80027f6:	701a      	strb	r2, [r3, #0]
	buf[TCP_OPTIONS_P + 1] = 4;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3337      	adds	r3, #55	@ 0x37
 80027fc:	2204      	movs	r2, #4
 80027fe:	701a      	strb	r2, [r3, #0]
	buf[TCP_OPTIONS_P + 2] = (CLIENTMSS >> 8);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3338      	adds	r3, #56	@ 0x38
 8002804:	2202      	movs	r2, #2
 8002806:	701a      	strb	r2, [r3, #0]
	buf[TCP_OPTIONS_P + 3] = CLIENTMSS & 0xff;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3339      	adds	r3, #57	@ 0x39
 800280c:	2226      	movs	r2, #38	@ 0x26
 800280e:	701a      	strb	r2, [r3, #0]
	ck = checksum(&buf[IP_SRC_P], 8 + TCP_HEADER_LEN_PLAIN + 4, 2);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	331a      	adds	r3, #26
 8002814:	2202      	movs	r2, #2
 8002816:	2120      	movs	r1, #32
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff fa47 	bl	8001cac <checksum>
 800281e:	4603      	mov	r3, r0
 8002820:	81bb      	strh	r3, [r7, #12]
	buf[TCP_CHECKSUM_H_P] = ck >> 8;
 8002822:	89bb      	ldrh	r3, [r7, #12]
 8002824:	0a1b      	lsrs	r3, r3, #8
 8002826:	b29a      	uxth	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3332      	adds	r3, #50	@ 0x32
 800282c:	b2d2      	uxtb	r2, r2
 800282e:	701a      	strb	r2, [r3, #0]
	buf[TCP_CHECKSUM_L_P] = ck & 0xff;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3333      	adds	r3, #51	@ 0x33
 8002834:	89ba      	ldrh	r2, [r7, #12]
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	701a      	strb	r2, [r3, #0]
	// 4 is the tcp mss option:
	ENC28J60_PacketSend(
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	203a      	movs	r0, #58	@ 0x3a
 800283e:	f003 f980 	bl	8005b42 <ENC28J60_PacketSend>
			IP_HEADER_LEN + TCP_HEADER_LEN_PLAIN + ETH_HEADER_LEN + 4, buf);
}
 8002842:	bf00      	nop
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	20002d28 	.word	0x20002d28
 8002850:	20002d34 	.word	0x20002d34
 8002854:	0800f874 	.word	0x0800f874
 8002858:	20002d30 	.word	0x20002d30
 800285c:	20002d3c 	.word	0x20002d3c
 8002860:	20000089 	.word	0x20000089

08002864 <packetloop_icmp_tcp>:
}
#endif // PING_CLIENT

// return 0 to just continue in the packet loop and return the position 
// of the tcp/udp data if there is tcp/udp data part
uint16_t packetloop_icmp_tcp(uint8_t *buf, uint16_t plen) {
 8002864:	b590      	push	{r4, r7, lr}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	460b      	mov	r3, r1
 800286e:	807b      	strh	r3, [r7, #2]
	uint16_t len;
#if defined (TCP_CLIENT)
	uint8_t send_fin = 0;
 8002870:	2300      	movs	r3, #0
 8002872:	737b      	strb	r3, [r7, #13]
#endif

	//plen will be unequal to zero if there is a valid
	// packet (without crc error):
#if defined (NTP_CLIENT) ||  defined (UDP_CLIENT) || defined (TCP_CLIENT) || defined (PING_CLIENT)
	if (plen == 0)
 8002874:	887b      	ldrh	r3, [r7, #2]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d14e      	bne.n	8002918 <packetloop_icmp_tcp+0xb4>
	{
		if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) && delaycnt == 0 && ENC28J60_Linkup())
 800287a:	4b97      	ldr	r3, [pc, #604]	@ (8002ad8 <packetloop_icmp_tcp+0x274>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	b2db      	uxtb	r3, r3
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b00      	cmp	r3, #0
 8002886:	d106      	bne.n	8002896 <packetloop_icmp_tcp+0x32>
 8002888:	4b93      	ldr	r3, [pc, #588]	@ (8002ad8 <packetloop_icmp_tcp+0x274>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	b2db      	uxtb	r3, r3
 800288e:	f003 0304 	and.w	r3, r3, #4
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00d      	beq.n	80028b2 <packetloop_icmp_tcp+0x4e>
 8002896:	4b91      	ldr	r3, [pc, #580]	@ (8002adc <packetloop_icmp_tcp+0x278>)
 8002898:	f9b3 3000 	ldrsh.w	r3, [r3]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d108      	bne.n	80028b2 <packetloop_icmp_tcp+0x4e>
 80028a0:	f003 f941 	bl	8005b26 <ENC28J60_Linkup>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <packetloop_icmp_tcp+0x4e>
		{
			client_arp_whohas(buf, gwip);
 80028aa:	498d      	ldr	r1, [pc, #564]	@ (8002ae0 <packetloop_icmp_tcp+0x27c>)
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f7ff fe27 	bl	8002500 <client_arp_whohas>
		}
		delaycnt++;
 80028b2:	4b8a      	ldr	r3, [pc, #552]	@ (8002adc <packetloop_icmp_tcp+0x278>)
 80028b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	3301      	adds	r3, #1
 80028bc:	b29b      	uxth	r3, r3
 80028be:	b21a      	sxth	r2, r3
 80028c0:	4b86      	ldr	r3, [pc, #536]	@ (8002adc <packetloop_icmp_tcp+0x278>)
 80028c2:	801a      	strh	r2, [r3, #0]
#if defined (TCP_CLIENT)
		if (tcp_client_state == 1 && (waitgwmac & WGW_HAVE_GW_MAC))
 80028c4:	4b87      	ldr	r3, [pc, #540]	@ (8002ae4 <packetloop_icmp_tcp+0x280>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d123      	bne.n	8002914 <packetloop_icmp_tcp+0xb0>
 80028cc:	4b82      	ldr	r3, [pc, #520]	@ (8002ad8 <packetloop_icmp_tcp+0x274>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d01c      	beq.n	8002914 <packetloop_icmp_tcp+0xb0>
		{ // send a syn
			tcp_client_state = 2;
 80028da:	4b82      	ldr	r3, [pc, #520]	@ (8002ae4 <packetloop_icmp_tcp+0x280>)
 80028dc:	2202      	movs	r2, #2
 80028de:	701a      	strb	r2, [r3, #0]
			tcpclient_src_port_l++; 	// allocate a new port
 80028e0:	4b81      	ldr	r3, [pc, #516]	@ (8002ae8 <packetloop_icmp_tcp+0x284>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	3301      	adds	r3, #1
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	4b7f      	ldr	r3, [pc, #508]	@ (8002ae8 <packetloop_icmp_tcp+0x284>)
 80028ea:	701a      	strb	r2, [r3, #0]
			// we encode our 3 bit fd into the src port
			// this way we get it back in every message that comes from the server:
			client_syn(buf, ((tcp_fd << 5) | (0x1f & tcpclient_src_port_l)), tcp_client_port_h, tcp_client_port_l);
 80028ec:	4b7f      	ldr	r3, [pc, #508]	@ (8002aec <packetloop_icmp_tcp+0x288>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	015b      	lsls	r3, r3, #5
 80028f2:	b25a      	sxtb	r2, r3
 80028f4:	4b7c      	ldr	r3, [pc, #496]	@ (8002ae8 <packetloop_icmp_tcp+0x284>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	b25b      	sxtb	r3, r3
 80028fa:	f003 031f 	and.w	r3, r3, #31
 80028fe:	b25b      	sxtb	r3, r3
 8002900:	4313      	orrs	r3, r2
 8002902:	b25b      	sxtb	r3, r3
 8002904:	b2d9      	uxtb	r1, r3
 8002906:	4b7a      	ldr	r3, [pc, #488]	@ (8002af0 <packetloop_icmp_tcp+0x28c>)
 8002908:	781a      	ldrb	r2, [r3, #0]
 800290a:	4b7a      	ldr	r3, [pc, #488]	@ (8002af4 <packetloop_icmp_tcp+0x290>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7ff fec8 	bl	80026a4 <client_syn>
		}
#endif
		return (0);
 8002914:	2300      	movs	r3, #0
 8002916:	e20a      	b.n	8002d2e <packetloop_icmp_tcp+0x4ca>
	}
#endif

	// NTP_CLIENT||UDP_CLIENT||TCP_CLIENT||PING_CLIENT
	// arp is broadcast if unknown but a host may also verify the mac address by sending it to a unicast address.
	if (eth_type_is_arp_and_my_ip(buf, plen))
 8002918:	887b      	ldrh	r3, [r7, #2]
 800291a:	4619      	mov	r1, r3
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7ff fa7d 	bl	8001e1c <eth_type_is_arp_and_my_ip>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d01e      	beq.n	8002966 <packetloop_icmp_tcp+0x102>
	{
		if (buf[ETH_ARP_OPCODE_L_P] == ETH_ARP_OPCODE_REQ_L_V)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3315      	adds	r3, #21
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d102      	bne.n	8002938 <packetloop_icmp_tcp+0xd4>
		{
			// is it an arp request
			make_arp_answer_from_request(buf);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7ff fbe8 	bl	8002108 <make_arp_answer_from_request>
		}
#if defined (NTP_CLIENT) || defined (UDP_CLIENT) || defined (TCP_CLIENT) || defined (PING_CLIENT)
		if (waitgwmac & WGW_ACCEPT_ARP_REPLY && (buf[ETH_ARP_OPCODE_L_P] == ETH_ARP_OPCODE_REPLY_L_V))
 8002938:	4b67      	ldr	r3, [pc, #412]	@ (8002ad8 <packetloop_icmp_tcp+0x274>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	b2db      	uxtb	r3, r3
 800293e:	f003 0308 	and.w	r3, r3, #8
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00d      	beq.n	8002962 <packetloop_icmp_tcp+0xfe>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	3315      	adds	r3, #21
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b02      	cmp	r3, #2
 800294e:	d108      	bne.n	8002962 <packetloop_icmp_tcp+0xfe>
		{
			// is it an arp reply
			if (client_store_gw_mac(buf))
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f7ff fe4d 	bl	80025f0 <client_store_gw_mac>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d002      	beq.n	8002962 <packetloop_icmp_tcp+0xfe>
			{
				waitgwmac = WGW_HAVE_GW_MAC;
 800295c:	4b5e      	ldr	r3, [pc, #376]	@ (8002ad8 <packetloop_icmp_tcp+0x274>)
 800295e:	2202      	movs	r2, #2
 8002960:	701a      	strb	r2, [r3, #0]
			}
		}
#endif // NTP_CLIENT||UDP_CLIENT||TCP_CLIENT||PING_CLIENT
		return (0);
 8002962:	2300      	movs	r3, #0
 8002964:	e1e3      	b.n	8002d2e <packetloop_icmp_tcp+0x4ca>

	}

	// check if ip packets are for us:
	if (eth_type_is_ip_and_my_ip(buf, plen) == 0)
 8002966:	887b      	ldrh	r3, [r7, #2]
 8002968:	4619      	mov	r1, r3
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7ff fa8c 	bl	8001e88 <eth_type_is_ip_and_my_ip>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <packetloop_icmp_tcp+0x116>
	{
		return (0);
 8002976:	2300      	movs	r3, #0
 8002978:	e1d9      	b.n	8002d2e <packetloop_icmp_tcp+0x4ca>
			&& buf[UDP_SRC_PORT_L_P] == 53) {
		return ( UDP_DATA_P);
	}
#endif

	if (buf[IP_PROTO_P] == IP_PROTO_ICMP_V  &&  buf[ICMP_TYPE_P] == ICMP_TYPE_ECHOREQUEST_V)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	3317      	adds	r3, #23
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d115      	bne.n	80029b0 <packetloop_icmp_tcp+0x14c>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3322      	adds	r3, #34	@ 0x22
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	2b08      	cmp	r3, #8
 800298c:	d110      	bne.n	80029b0 <packetloop_icmp_tcp+0x14c>
	{
		if (icmp_callback)
 800298e:	4b5a      	ldr	r3, [pc, #360]	@ (8002af8 <packetloop_icmp_tcp+0x294>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d005      	beq.n	80029a2 <packetloop_icmp_tcp+0x13e>
		{
			(*icmp_callback)(&(buf[IP_SRC_P]));
 8002996:	4b58      	ldr	r3, [pc, #352]	@ (8002af8 <packetloop_icmp_tcp+0x294>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	321a      	adds	r2, #26
 800299e:	4610      	mov	r0, r2
 80029a0:	4798      	blx	r3
		}
		// a ping packet, let's send pong
		make_echo_reply_from_request(buf, plen);
 80029a2:	887b      	ldrh	r3, [r7, #2]
 80029a4:	4619      	mov	r1, r3
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7ff fc06 	bl	80021b8 <make_echo_reply_from_request>
//		Ethernet_PingCallback();
		return (0);
 80029ac:	2300      	movs	r3, #0
 80029ae:	e1be      	b.n	8002d2e <packetloop_icmp_tcp+0x4ca>
	}
	if (plen < 54 && buf[IP_PROTO_P] != IP_PROTO_TCP_V)
 80029b0:	887b      	ldrh	r3, [r7, #2]
 80029b2:	2b35      	cmp	r3, #53	@ 0x35
 80029b4:	d806      	bhi.n	80029c4 <packetloop_icmp_tcp+0x160>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	3317      	adds	r3, #23
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b06      	cmp	r3, #6
 80029be:	d001      	beq.n	80029c4 <packetloop_icmp_tcp+0x160>
	{
		// smaller than the smallest TCP packet and not tcp port
		return (0);
 80029c0:	2300      	movs	r3, #0
 80029c2:	e1b4      	b.n	8002d2e <packetloop_icmp_tcp+0x4ca>


#if  defined (TCP_CLIENT)
	//@@@@@@ TCP_Client
	// a message for the tcp client, client_state is zero if client was never used
	if (buf[TCP_DST_PORT_H_P] == TCPCLIENT_SRC_PORT_H)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3324      	adds	r3, #36	@ 0x24
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	2b0b      	cmp	r3, #11
 80029cc:	f040 8162 	bne.w	8002c94 <packetloop_icmp_tcp+0x430>
	{
#if defined (WWW_CLIENT)
		// workaround to pass pointer to www_client_internal..
		bufptr = buf;
 80029d0:	4a4a      	ldr	r2, [pc, #296]	@ (8002afc <packetloop_icmp_tcp+0x298>)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6013      	str	r3, [r2, #0]
#endif // WWW_CLIENT
		LOG_DBG("Get Data");
 80029d6:	4b4a      	ldr	r3, [pc, #296]	@ (8002b00 <packetloop_icmp_tcp+0x29c>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d903      	bls.n	80029e6 <packetloop_icmp_tcp+0x182>
 80029de:	4949      	ldr	r1, [pc, #292]	@ (8002b04 <packetloop_icmp_tcp+0x2a0>)
 80029e0:	4849      	ldr	r0, [pc, #292]	@ (8002b08 <packetloop_icmp_tcp+0x2a4>)
 80029e2:	f7fd fff9 	bl	80009d8 <Printf>
		if (check_ip_message_is_from(buf, tcpsrvip) == 0)
 80029e6:	4949      	ldr	r1, [pc, #292]	@ (8002b0c <packetloop_icmp_tcp+0x2a8>)
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f7ff f9f3 	bl	8001dd4 <check_ip_message_is_from>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <packetloop_icmp_tcp+0x194>
		{
			return (0);
 80029f4:	2300      	movs	r3, #0
 80029f6:	e19a      	b.n	8002d2e <packetloop_icmp_tcp+0x4ca>
		}
		// if we get a reset:
		if (buf[TCP_FLAGS_P] & TCP_FLAGS_RST_V)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	332f      	adds	r3, #47	@ 0x2f
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	f003 0304 	and.w	r3, r3, #4
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d013      	beq.n	8002a2e <packetloop_icmp_tcp+0x1ca>
		{
			if (client_tcp_result_callback)
 8002a06:	4b42      	ldr	r3, [pc, #264]	@ (8002b10 <packetloop_icmp_tcp+0x2ac>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00a      	beq.n	8002a24 <packetloop_icmp_tcp+0x1c0>
			{
				// parameters in client_tcp_result_callback: fd, status, buf_start, len
				(*client_tcp_result_callback)((buf[TCP_DST_PORT_L_P] >> 5) & 0x7, 3, 0, 0);
 8002a0e:	4b40      	ldr	r3, [pc, #256]	@ (8002b10 <packetloop_icmp_tcp+0x2ac>)
 8002a10:	681c      	ldr	r4, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	3325      	adds	r3, #37	@ 0x25
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	095b      	lsrs	r3, r3, #5
 8002a1a:	b2d8      	uxtb	r0, r3
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	2200      	movs	r2, #0
 8002a20:	2103      	movs	r1, #3
 8002a22:	47a0      	blx	r4
			}
			tcp_client_state = 5;
 8002a24:	4b2f      	ldr	r3, [pc, #188]	@ (8002ae4 <packetloop_icmp_tcp+0x280>)
 8002a26:	2205      	movs	r2, #5
 8002a28:	701a      	strb	r2, [r3, #0]
			return (0);
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	e17f      	b.n	8002d2e <packetloop_icmp_tcp+0x4ca>
		}

		// Determine what to do with packed depending on state

		len = get_tcp_data_len(buf);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7ff fc5c 	bl	80022ec <get_tcp_data_len>
 8002a34:	4603      	mov	r3, r0
 8002a36:	81fb      	strh	r3, [r7, #14]
		// @@@

		if (tcp_client_state == 2)
 8002a38:	4b2a      	ldr	r3, [pc, #168]	@ (8002ae4 <packetloop_icmp_tcp+0x280>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d16b      	bne.n	8002b18 <packetloop_icmp_tcp+0x2b4>
		{
			if ((buf[TCP_FLAGS_P] & TCP_FLAGS_SYN_V) && (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	332f      	adds	r3, #47	@ 0x2f
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d02b      	beq.n	8002aa6 <packetloop_icmp_tcp+0x242>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	332f      	adds	r3, #47	@ 0x2f
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	f003 0310 	and.w	r3, r3, #16
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d024      	beq.n	8002aa6 <packetloop_icmp_tcp+0x242>
			{
				// synack, answer with ack
				make_tcp_ack_from_any(buf, 0, 0);
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	2100      	movs	r1, #0
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7ff fc6e 	bl	8002342 <make_tcp_ack_from_any>
				buf[TCP_FLAGS_P] = TCP_FLAGS_ACK_V | TCP_FLAGS_PUSH_V;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	332f      	adds	r3, #47	@ 0x2f
 8002a6a:	2218      	movs	r2, #24
 8002a6c:	701a      	strb	r2, [r3, #0]

				// Make a tcp message with data. When calling this function we must
				// still have a valid tcp-ack in the buffer. In other words
				// you have just called make_tcp_ack_from_any(buf,0).
				if (client_tcp_datafill_callback)
 8002a6e:	4b29      	ldr	r3, [pc, #164]	@ (8002b14 <packetloop_icmp_tcp+0x2b0>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00b      	beq.n	8002a8e <packetloop_icmp_tcp+0x22a>
				{
					// in this case it is src port because the above
					// make_tcp_ack_from_any swaps the dst and src port:
					len = (*client_tcp_datafill_callback)(
 8002a76:	4b27      	ldr	r3, [pc, #156]	@ (8002b14 <packetloop_icmp_tcp+0x2b0>)
 8002a78:	681b      	ldr	r3, [r3, #0]
							(buf[TCP_SRC_PORT_L_P] >> 5) & 0x7);
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	3223      	adds	r2, #35	@ 0x23
 8002a7e:	7812      	ldrb	r2, [r2, #0]
					len = (*client_tcp_datafill_callback)(
 8002a80:	0952      	lsrs	r2, r2, #5
 8002a82:	b2d2      	uxtb	r2, r2
 8002a84:	4610      	mov	r0, r2
 8002a86:	4798      	blx	r3
 8002a88:	4603      	mov	r3, r0
 8002a8a:	81fb      	strh	r3, [r7, #14]
 8002a8c:	e001      	b.n	8002a92 <packetloop_icmp_tcp+0x22e>
				}
				else
				{
					// this is just to prevent a crash
					len = 0;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	81fb      	strh	r3, [r7, #14]
				}
				tcp_client_state = 3;
 8002a92:	4b14      	ldr	r3, [pc, #80]	@ (8002ae4 <packetloop_icmp_tcp+0x280>)
 8002a94:	2203      	movs	r2, #3
 8002a96:	701a      	strb	r2, [r3, #0]
				make_tcp_ack_with_data_noflags(buf, len);
 8002a98:	89fb      	ldrh	r3, [r7, #14]
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f7ff fcae 	bl	80023fe <make_tcp_ack_with_data_noflags>
				return (0);
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	e143      	b.n	8002d2e <packetloop_icmp_tcp+0x4ca>
			{
				// reset only if we have sent a syn and don't get syn-ack back.
				// If we connect to a non listen port then we get a RST
				// which will be handeled above. In other words there is
				// normally no danger for an endless loop.
				tcp_client_state = 1; // retry
 8002aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8002ae4 <packetloop_icmp_tcp+0x280>)
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	701a      	strb	r2, [r3, #0]
				// do not inform application layer as we retry.
				len++;
 8002aac:	89fb      	ldrh	r3, [r7, #14]
 8002aae:	3301      	adds	r3, #1
 8002ab0:	81fb      	strh	r3, [r7, #14]
				if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	332f      	adds	r3, #47	@ 0x2f
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	f003 0310 	and.w	r3, r3, #16
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <packetloop_icmp_tcp+0x260>
				{
					// if packet was an ack then do not step the ack number
					len = 0;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	81fb      	strh	r3, [r7, #14]
				}
				// refuse and reset the connection
				make_tcp_ack_from_any(buf, len, TCP_FLAGS_RST_V);
 8002ac4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ac8:	2204      	movs	r2, #4
 8002aca:	4619      	mov	r1, r3
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f7ff fc38 	bl	8002342 <make_tcp_ack_from_any>
				return (0);
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	e12b      	b.n	8002d2e <packetloop_icmp_tcp+0x4ca>
 8002ad6:	bf00      	nop
 8002ad8:	20000088 	.word	0x20000088
 8002adc:	20000086 	.word	0x20000086
 8002ae0:	20002d24 	.word	0x20002d24
 8002ae4:	20002d0e 	.word	0x20002d0e
 8002ae8:	20000085 	.word	0x20000085
 8002aec:	20002d0d 	.word	0x20002d0d
 8002af0:	20002d0f 	.word	0x20002d0f
 8002af4:	20002d10 	.word	0x20002d10
 8002af8:	20002d20 	.word	0x20002d20
 8002afc:	20002d1c 	.word	0x20002d1c
 8002b00:	20002adc 	.word	0x20002adc
 8002b04:	0800f880 	.word	0x0800f880
 8002b08:	0800ec40 	.word	0x0800ec40
 8002b0c:	20002d30 	.word	0x20002d30
 8002b10:	20002d14 	.word	0x20002d14
 8002b14:	20002d18 	.word	0x20002d18
			}
		}
		// in tcp_client_state==3 we will normally first get an empty
		// ack-packet and then a ack-packet with data.
		if (tcp_client_state == 4)
 8002b18:	4b87      	ldr	r3, [pc, #540]	@ (8002d38 <packetloop_icmp_tcp+0x4d4>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d145      	bne.n	8002bac <packetloop_icmp_tcp+0x348>
			//&& len>0){
			// our first real data packet
			// Removed this as there is no code to handle state 4. Only 1st packet will be available.
			//tcp_client_state=4;
			// return the data we received
			if (client_tcp_result_callback)
 8002b20:	4b86      	ldr	r3, [pc, #536]	@ (8002d3c <packetloop_icmp_tcp+0x4d8>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d029      	beq.n	8002b7c <packetloop_icmp_tcp+0x318>
			{
				tcpstart = TCP_DATA_START; // TCP_DATA_START is a formula
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	332e      	adds	r3, #46	@ 0x2e
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	091b      	lsrs	r3, r3, #4
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	3322      	adds	r3, #34	@ 0x22
 8002b38:	817b      	strh	r3, [r7, #10]
				// out of buffer bounds check, needed in case of fragmented IP packets
				if (tcpstart > plen - 8) {
 8002b3a:	887b      	ldrh	r3, [r7, #2]
 8002b3c:	1fda      	subs	r2, r3, #7
 8002b3e:	897b      	ldrh	r3, [r7, #10]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	dc02      	bgt.n	8002b4a <packetloop_icmp_tcp+0x2e6>
					tcpstart = plen - 8; // dummy but save
 8002b44:	887b      	ldrh	r3, [r7, #2]
 8002b46:	3b08      	subs	r3, #8
 8002b48:	817b      	strh	r3, [r7, #10]
				}
				save_len = len;
 8002b4a:	89fb      	ldrh	r3, [r7, #14]
 8002b4c:	813b      	strh	r3, [r7, #8]
				if (tcpstart + len > plen) {
 8002b4e:	897a      	ldrh	r2, [r7, #10]
 8002b50:	89fb      	ldrh	r3, [r7, #14]
 8002b52:	441a      	add	r2, r3
 8002b54:	887b      	ldrh	r3, [r7, #2]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	dd03      	ble.n	8002b62 <packetloop_icmp_tcp+0x2fe>
					save_len = plen - tcpstart;
 8002b5a:	887a      	ldrh	r2, [r7, #2]
 8002b5c:	897b      	ldrh	r3, [r7, #10]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	813b      	strh	r3, [r7, #8]
				}
				send_fin = (*client_tcp_result_callback)(
 8002b62:	4b76      	ldr	r3, [pc, #472]	@ (8002d3c <packetloop_icmp_tcp+0x4d8>)
 8002b64:	681c      	ldr	r4, [r3, #0]
						(buf[TCP_DST_PORT_L_P] >> 5) & 0x7, 0, tcpstart,
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3325      	adds	r3, #37	@ 0x25
 8002b6a:	781b      	ldrb	r3, [r3, #0]
				send_fin = (*client_tcp_result_callback)(
 8002b6c:	095b      	lsrs	r3, r3, #5
 8002b6e:	b2d8      	uxtb	r0, r3
 8002b70:	893b      	ldrh	r3, [r7, #8]
 8002b72:	897a      	ldrh	r2, [r7, #10]
 8002b74:	2100      	movs	r1, #0
 8002b76:	47a0      	blx	r4
 8002b78:	4603      	mov	r3, r0
 8002b7a:	737b      	strb	r3, [r7, #13]
						save_len);

			}

			if (send_fin)
 8002b7c:	7b7b      	ldrb	r3, [r7, #13]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00b      	beq.n	8002b9a <packetloop_icmp_tcp+0x336>
			{
				make_tcp_ack_from_any(buf, len,
 8002b82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b86:	2209      	movs	r2, #9
 8002b88:	4619      	mov	r1, r3
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7ff fbd9 	bl	8002342 <make_tcp_ack_from_any>
						TCP_FLAGS_PUSH_V | TCP_FLAGS_FIN_V);
				tcp_client_state = 5;
 8002b90:	4b69      	ldr	r3, [pc, #420]	@ (8002d38 <packetloop_icmp_tcp+0x4d4>)
 8002b92:	2205      	movs	r2, #5
 8002b94:	701a      	strb	r2, [r3, #0]
				return (0);
 8002b96:	2300      	movs	r3, #0
 8002b98:	e0c9      	b.n	8002d2e <packetloop_icmp_tcp+0x4ca>
			}
			make_tcp_ack_from_any(buf, len, 0);
 8002b9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7ff fbcd 	bl	8002342 <make_tcp_ack_from_any>
			return (0);
 8002ba8:	2300      	movs	r3, #0
 8002baa:	e0c0      	b.n	8002d2e <packetloop_icmp_tcp+0x4ca>
		}

		if (tcp_client_state == 3)
 8002bac:	4b62      	ldr	r3, [pc, #392]	@ (8002d38 <packetloop_icmp_tcp+0x4d4>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2b03      	cmp	r3, #3
 8002bb2:	d148      	bne.n	8002c46 <packetloop_icmp_tcp+0x3e2>
		{
			// && len>0){
			// our first real data packet
			// Removed this as there is no code to handle state 4. Only 1st packet will be available.
			tcp_client_state = 4;
 8002bb4:	4b60      	ldr	r3, [pc, #384]	@ (8002d38 <packetloop_icmp_tcp+0x4d4>)
 8002bb6:	2204      	movs	r2, #4
 8002bb8:	701a      	strb	r2, [r3, #0]
			// return the data we received
			if (client_tcp_result_callback)
 8002bba:	4b60      	ldr	r3, [pc, #384]	@ (8002d3c <packetloop_icmp_tcp+0x4d8>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d029      	beq.n	8002c16 <packetloop_icmp_tcp+0x3b2>
			{
				tcpstart = TCP_DATA_START; // TCP_DATA_START is a formula
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	332e      	adds	r3, #46	@ 0x2e
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	091b      	lsrs	r3, r3, #4
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	3322      	adds	r3, #34	@ 0x22
 8002bd2:	817b      	strh	r3, [r7, #10]
				// out of buffer bounds check, needed in case of fragmented IP packets
				if (tcpstart > plen - 8) {
 8002bd4:	887b      	ldrh	r3, [r7, #2]
 8002bd6:	1fda      	subs	r2, r3, #7
 8002bd8:	897b      	ldrh	r3, [r7, #10]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	dc02      	bgt.n	8002be4 <packetloop_icmp_tcp+0x380>
					tcpstart = plen - 8; // dummy but save
 8002bde:	887b      	ldrh	r3, [r7, #2]
 8002be0:	3b08      	subs	r3, #8
 8002be2:	817b      	strh	r3, [r7, #10]
				}
				save_len = len;
 8002be4:	89fb      	ldrh	r3, [r7, #14]
 8002be6:	813b      	strh	r3, [r7, #8]
				if (tcpstart + len > plen) {
 8002be8:	897a      	ldrh	r2, [r7, #10]
 8002bea:	89fb      	ldrh	r3, [r7, #14]
 8002bec:	441a      	add	r2, r3
 8002bee:	887b      	ldrh	r3, [r7, #2]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	dd03      	ble.n	8002bfc <packetloop_icmp_tcp+0x398>
					save_len = plen - tcpstart;
 8002bf4:	887a      	ldrh	r2, [r7, #2]
 8002bf6:	897b      	ldrh	r3, [r7, #10]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	813b      	strh	r3, [r7, #8]
				}
				send_fin = (*client_tcp_result_callback)(
 8002bfc:	4b4f      	ldr	r3, [pc, #316]	@ (8002d3c <packetloop_icmp_tcp+0x4d8>)
 8002bfe:	681c      	ldr	r4, [r3, #0]
						(buf[TCP_DST_PORT_L_P] >> 5) & 0x7, 0, tcpstart,
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3325      	adds	r3, #37	@ 0x25
 8002c04:	781b      	ldrb	r3, [r3, #0]
				send_fin = (*client_tcp_result_callback)(
 8002c06:	095b      	lsrs	r3, r3, #5
 8002c08:	b2d8      	uxtb	r0, r3
 8002c0a:	893b      	ldrh	r3, [r7, #8]
 8002c0c:	897a      	ldrh	r2, [r7, #10]
 8002c0e:	2100      	movs	r1, #0
 8002c10:	47a0      	blx	r4
 8002c12:	4603      	mov	r3, r0
 8002c14:	737b      	strb	r3, [r7, #13]
						save_len);

			}
			if (send_fin)
 8002c16:	7b7b      	ldrb	r3, [r7, #13]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00b      	beq.n	8002c34 <packetloop_icmp_tcp+0x3d0>
			{
				make_tcp_ack_from_any(buf, len,
 8002c1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c20:	2209      	movs	r2, #9
 8002c22:	4619      	mov	r1, r3
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7ff fb8c 	bl	8002342 <make_tcp_ack_from_any>
						TCP_FLAGS_PUSH_V | TCP_FLAGS_FIN_V);
				tcp_client_state = 5;
 8002c2a:	4b43      	ldr	r3, [pc, #268]	@ (8002d38 <packetloop_icmp_tcp+0x4d4>)
 8002c2c:	2205      	movs	r2, #5
 8002c2e:	701a      	strb	r2, [r3, #0]
				return (0);
 8002c30:	2300      	movs	r3, #0
 8002c32:	e07c      	b.n	8002d2e <packetloop_icmp_tcp+0x4ca>
			}
			make_tcp_ack_from_any(buf, len, 0);
 8002c34:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7ff fb80 	bl	8002342 <make_tcp_ack_from_any>
			return (0);
 8002c42:	2300      	movs	r3, #0
 8002c44:	e073      	b.n	8002d2e <packetloop_icmp_tcp+0x4ca>
		}
		if (tcp_client_state == 5)
 8002c46:	4b3c      	ldr	r3, [pc, #240]	@ (8002d38 <packetloop_icmp_tcp+0x4d4>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	2b05      	cmp	r3, #5
 8002c4c:	d101      	bne.n	8002c52 <packetloop_icmp_tcp+0x3ee>
		{
			// no more ack
			return (0);
 8002c4e:	2300      	movs	r3, #0
 8002c50:	e06d      	b.n	8002d2e <packetloop_icmp_tcp+0x4ca>
		}
		if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	332f      	adds	r3, #47	@ 0x2f
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00d      	beq.n	8002c7c <packetloop_icmp_tcp+0x418>
		{
			make_tcp_ack_from_any(buf, len + 1,
 8002c60:	89fb      	ldrh	r3, [r7, #14]
 8002c62:	3301      	adds	r3, #1
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	b21b      	sxth	r3, r3
 8002c68:	2209      	movs	r2, #9
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f7ff fb68 	bl	8002342 <make_tcp_ack_from_any>
					TCP_FLAGS_PUSH_V | TCP_FLAGS_FIN_V);
			tcp_client_state = 5; // connection terminated
 8002c72:	4b31      	ldr	r3, [pc, #196]	@ (8002d38 <packetloop_icmp_tcp+0x4d4>)
 8002c74:	2205      	movs	r2, #5
 8002c76:	701a      	strb	r2, [r3, #0]
			return (0);
 8002c78:	2300      	movs	r3, #0
 8002c7a:	e058      	b.n	8002d2e <packetloop_icmp_tcp+0x4ca>
		}
		// ack all data (the web page may be long):
		// if we just get a fragment then len will be zero
		// and we ack only once we have the full packet
		if (len > 0)
 8002c7c:	89fb      	ldrh	r3, [r7, #14]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d006      	beq.n	8002c90 <packetloop_icmp_tcp+0x42c>
		{
			make_tcp_ack_from_any(buf, len, 0);
 8002c82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c86:	2200      	movs	r2, #0
 8002c88:	4619      	mov	r1, r3
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7ff fb59 	bl	8002342 <make_tcp_ack_from_any>
		}
		return (0);
 8002c90:	2300      	movs	r3, #0
 8002c92:	e04c      	b.n	8002d2e <packetloop_icmp_tcp+0x4ca>
	}
#endif // WWW_CLIENT||TCP_CLIENT
	//
	// tcp port web server start
	if (buf[TCP_DST_PORT_H_P] == wwwport_h 	&&  buf[TCP_DST_PORT_L_P] == wwwport_l)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3324      	adds	r3, #36	@ 0x24
 8002c98:	781a      	ldrb	r2, [r3, #0]
 8002c9a:	4b29      	ldr	r3, [pc, #164]	@ (8002d40 <packetloop_icmp_tcp+0x4dc>)
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d144      	bne.n	8002d2c <packetloop_icmp_tcp+0x4c8>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	3325      	adds	r3, #37	@ 0x25
 8002ca6:	781a      	ldrb	r2, [r3, #0]
 8002ca8:	4b26      	ldr	r3, [pc, #152]	@ (8002d44 <packetloop_icmp_tcp+0x4e0>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d13d      	bne.n	8002d2c <packetloop_icmp_tcp+0x4c8>
	{
		if (buf[TCP_FLAGS_P] & TCP_FLAGS_SYN_V) {
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	332f      	adds	r3, #47	@ 0x2f
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d004      	beq.n	8002cc8 <packetloop_icmp_tcp+0x464>
			make_tcp_synack_from_syn(buf);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7ff faa6 	bl	8002210 <make_tcp_synack_from_syn>
			// make_tcp_synack_from_syn does already send the syn,ack
			return (0);
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	e032      	b.n	8002d2e <packetloop_icmp_tcp+0x4ca>
		}
		if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	332f      	adds	r3, #47	@ 0x2f
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	f003 0310 	and.w	r3, r3, #16
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d02a      	beq.n	8002d2c <packetloop_icmp_tcp+0x4c8>
		{
			info_data_len = get_tcp_data_len(buf);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7ff fb08 	bl	80022ec <get_tcp_data_len>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	461a      	mov	r2, r3
 8002ce0:	4b19      	ldr	r3, [pc, #100]	@ (8002d48 <packetloop_icmp_tcp+0x4e4>)
 8002ce2:	801a      	strh	r2, [r3, #0]
			// we can possibly have no data, just ack:
			// Here we misuse plen for something else to save a variable.
			// plen is now the position of start of the tcp user data.
			if (info_data_len == 0) {
 8002ce4:	4b18      	ldr	r3, [pc, #96]	@ (8002d48 <packetloop_icmp_tcp+0x4e4>)
 8002ce6:	881b      	ldrh	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10d      	bne.n	8002d08 <packetloop_icmp_tcp+0x4a4>
				if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V) {
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	332f      	adds	r3, #47	@ 0x2f
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d004      	beq.n	8002d04 <packetloop_icmp_tcp+0x4a0>
					// finack, answer with ack
					make_tcp_ack_from_any(buf, 0, 0);
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7ff fb1f 	bl	8002342 <make_tcp_ack_from_any>
				}
				// just an ack with no data, wait for next packet
				return (0);
 8002d04:	2300      	movs	r3, #0
 8002d06:	e012      	b.n	8002d2e <packetloop_icmp_tcp+0x4ca>
			}
			// Here we misuse len for something else to save a variable
			len = TCP_DATA_START; // TCP_DATA_START is a formula
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	332e      	adds	r3, #46	@ 0x2e
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	091b      	lsrs	r3, r3, #4
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	3322      	adds	r3, #34	@ 0x22
 8002d18:	81fb      	strh	r3, [r7, #14]
			// check for data corruption
			if (len > plen - 8) {
 8002d1a:	887b      	ldrh	r3, [r7, #2]
 8002d1c:	1fda      	subs	r2, r3, #7
 8002d1e:	89fb      	ldrh	r3, [r7, #14]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	dc01      	bgt.n	8002d28 <packetloop_icmp_tcp+0x4c4>
				return (0);
 8002d24:	2300      	movs	r3, #0
 8002d26:	e002      	b.n	8002d2e <packetloop_icmp_tcp+0x4ca>
			}
			return (len);
 8002d28:	89fb      	ldrh	r3, [r7, #14]
 8002d2a:	e000      	b.n	8002d2e <packetloop_icmp_tcp+0x4ca>
		}
	}
	return (0);
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3714      	adds	r7, #20
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd90      	pop	{r4, r7, pc}
 8002d36:	bf00      	nop
 8002d38:	20002d0e 	.word	0x20002d0e
 8002d3c:	20002d14 	.word	0x20002d14
 8002d40:	20002d0c 	.word	0x20002d0c
 8002d44:	20000084 	.word	0x20000084
 8002d48:	20002d40 	.word	0x20002d40

08002d4c <read_mac_addr>:

/* Private function prototypes -----------------------------------------------*/
void EthernetTask(void const * argument);

static int read_mac_addr(void)
{
 8002d4c:	b5b0      	push	{r4, r5, r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af04      	add	r7, sp, #16
	uint8_t mac_addr[7];

	if(m_env_e2p_read(&MAC_I2C_HANDLE, AT24MAC_ADDR, EUI48_ADDR, 1, mac_addr, 6))
 8002d52:	2306      	movs	r3, #6
 8002d54:	9301      	str	r3, [sp, #4]
 8002d56:	463b      	mov	r3, r7
 8002d58:	9300      	str	r3, [sp, #0]
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	229a      	movs	r2, #154	@ 0x9a
 8002d5e:	21b0      	movs	r1, #176	@ 0xb0
 8002d60:	4818      	ldr	r0, [pc, #96]	@ (8002dc4 <read_mac_addr+0x78>)
 8002d62:	f7fe feb9 	bl	8001ad8 <m_env_e2p_read>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d009      	beq.n	8002d80 <read_mac_addr+0x34>
	{
		LOG_ERR("Get MAC Error");
 8002d6c:	4b16      	ldr	r3, [pc, #88]	@ (8002dc8 <read_mac_addr+0x7c>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d003      	beq.n	8002d7c <read_mac_addr+0x30>
 8002d74:	4915      	ldr	r1, [pc, #84]	@ (8002dcc <read_mac_addr+0x80>)
 8002d76:	4816      	ldr	r0, [pc, #88]	@ (8002dd0 <read_mac_addr+0x84>)
 8002d78:	f7fd fe2e 	bl	80009d8 <Printf>
		return 1;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e01d      	b.n	8002dbc <read_mac_addr+0x70>
	}

	memcpy(mymac, &mac_addr[1],6);
 8002d80:	4b14      	ldr	r3, [pc, #80]	@ (8002dd4 <read_mac_addr+0x88>)
 8002d82:	461a      	mov	r2, r3
 8002d84:	1c7b      	adds	r3, r7, #1
 8002d86:	6818      	ldr	r0, [r3, #0]
 8002d88:	6010      	str	r0, [r2, #0]
 8002d8a:	889b      	ldrh	r3, [r3, #4]
 8002d8c:	8093      	strh	r3, [r2, #4]

	LOG_DBG("mac = %x:%x:%x:%x:%x:%x", mac_addr[1], mac_addr[2], mac_addr[3], mac_addr[4], mac_addr[5], mac_addr[6]);
 8002d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8002dc8 <read_mac_addr+0x7c>)
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d911      	bls.n	8002dba <read_mac_addr+0x6e>
 8002d96:	787b      	ldrb	r3, [r7, #1]
 8002d98:	461c      	mov	r4, r3
 8002d9a:	78bb      	ldrb	r3, [r7, #2]
 8002d9c:	461d      	mov	r5, r3
 8002d9e:	78fb      	ldrb	r3, [r7, #3]
 8002da0:	793a      	ldrb	r2, [r7, #4]
 8002da2:	7979      	ldrb	r1, [r7, #5]
 8002da4:	79b8      	ldrb	r0, [r7, #6]
 8002da6:	9003      	str	r0, [sp, #12]
 8002da8:	9102      	str	r1, [sp, #8]
 8002daa:	9201      	str	r2, [sp, #4]
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	462b      	mov	r3, r5
 8002db0:	4622      	mov	r2, r4
 8002db2:	4906      	ldr	r1, [pc, #24]	@ (8002dcc <read_mac_addr+0x80>)
 8002db4:	4808      	ldr	r0, [pc, #32]	@ (8002dd8 <read_mac_addr+0x8c>)
 8002db6:	f7fd fe0f 	bl	80009d8 <Printf>

	return 0;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bdb0      	pop	{r4, r5, r7, pc}
 8002dc4:	20002ae0 	.word	0x20002ae0
 8002dc8:	20002adc 	.word	0x20002adc
 8002dcc:	0800f894 	.word	0x0800f894
 8002dd0:	0800ec54 	.word	0x0800ec54
 8002dd4:	2000008c 	.word	0x2000008c
 8002dd8:	0800ec70 	.word	0x0800ec70

08002ddc <read_packet>:
	return offset;
}
#endif

static int read_packet(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
	int tmp_cnt;
	uint16_t dat_p;
	uint16_t offset;

	tmp_cnt = Ethernet_PacketReceive(ETH_BUFFER_SIZE, eth_buf);
 8002de2:	4917      	ldr	r1, [pc, #92]	@ (8002e40 <read_packet+0x64>)
 8002de4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002de8:	f002 fc3c 	bl	8005664 <Ethernet_PacketReceive>
 8002dec:	4603      	mov	r3, r0
 8002dee:	60bb      	str	r3, [r7, #8]
	dat_p = Ethernet_packetloop_icmp_tcp(eth_buf, tmp_cnt);
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	4619      	mov	r1, r3
 8002df6:	4812      	ldr	r0, [pc, #72]	@ (8002e40 <read_packet+0x64>)
 8002df8:	f002 fc55 	bl	80056a6 <Ethernet_packetloop_icmp_tcp>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	80fb      	strh	r3, [r7, #6]
	if (dat_p > 0){
 8002e00:	88fb      	ldrh	r3, [r7, #6]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d017      	beq.n	8002e36 <read_packet+0x5a>
		memcpy(recv_buf, &eth_buf[TCP_DATA_PAYLOAD],tmp_cnt - dat_p);
		push_event0_param(EVT_received_tcp, recv_buf, tmp_cnt - dat_p);
		offset = make_reply_data(&eth_buf[TCP_DATA_PAYLOAD]);
#else
		//LOG_HEX_DUMP(&eth_buf[TCP_DATA_PAYLOAD], tmp_cnt - dat_p, "Received Data >>");
		offset = m_remote_eth_parser(&eth_buf[TCP_DATA_PAYLOAD], tmp_cnt - dat_p);
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	88fb      	ldrh	r3, [r7, #6]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	4619      	mov	r1, r3
 8002e12:	480c      	ldr	r0, [pc, #48]	@ (8002e44 <read_packet+0x68>)
 8002e14:	f002 f876 	bl	8004f04 <m_remote_eth_parser>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	81fb      	strh	r3, [r7, #14]
#endif
		if(offset <= 0){
 8002e1c:	89fb      	ldrh	r3, [r7, #14]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d104      	bne.n	8002e2c <read_packet+0x50>
			offset = tmp_cnt - dat_p;
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	88fb      	ldrh	r3, [r7, #6]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	81fb      	strh	r3, [r7, #14]
		}

		Ethernet_wb_server_reply(eth_buf, offset);
 8002e2c:	89fb      	ldrh	r3, [r7, #14]
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4803      	ldr	r0, [pc, #12]	@ (8002e40 <read_packet+0x64>)
 8002e32:	f002 fc48 	bl	80056c6 <Ethernet_wb_server_reply>
	}

	return 0;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	10000184 	.word	0x10000184
 8002e44:	100001ba 	.word	0x100001ba

08002e48 <ethernet_init>:

static int ethernet_init(void)
{
 8002e48:	b5b0      	push	{r4, r5, r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af04      	add	r7, sp, #16
	uint8_t rev;

	Ethernet_Init(mymac);
 8002e4e:	4833      	ldr	r0, [pc, #204]	@ (8002f1c <ethernet_init+0xd4>)
 8002e50:	f002 fbcd 	bl	80055ee <Ethernet_Init>

	rev = Ethernet_Revision();
 8002e54:	f002 fbff 	bl	8005656 <Ethernet_Revision>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	71fb      	strb	r3, [r7, #7]
	if (rev == 0){
 8002e5c:	79fb      	ldrb	r3, [r7, #7]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10b      	bne.n	8002e7a <ethernet_init+0x32>
		// Failed to access ENC28J60
		//while (1);    // Just loop here
		LOG_ERR("Ethernet_Revision Error!!Rev[%d]", rev);
 8002e62:	4b2f      	ldr	r3, [pc, #188]	@ (8002f20 <ethernet_init+0xd8>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d005      	beq.n	8002e76 <ethernet_init+0x2e>
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	492d      	ldr	r1, [pc, #180]	@ (8002f24 <ethernet_init+0xdc>)
 8002e70:	482d      	ldr	r0, [pc, #180]	@ (8002f28 <ethernet_init+0xe0>)
 8002e72:	f7fd fdb1 	bl	80009d8 <Printf>
		return 1;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e04c      	b.n	8002f14 <ethernet_init+0xcc>
	}

	LOG_INF("Ethernet_Revision : %d", Ethernet_Revision());
 8002e7a:	4b29      	ldr	r3, [pc, #164]	@ (8002f20 <ethernet_init+0xd8>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	2b03      	cmp	r3, #3
 8002e80:	d907      	bls.n	8002e92 <ethernet_init+0x4a>
 8002e82:	f002 fbe8 	bl	8005656 <Ethernet_Revision>
 8002e86:	4603      	mov	r3, r0
 8002e88:	461a      	mov	r2, r3
 8002e8a:	4926      	ldr	r1, [pc, #152]	@ (8002f24 <ethernet_init+0xdc>)
 8002e8c:	4827      	ldr	r0, [pc, #156]	@ (8002f2c <ethernet_init+0xe4>)
 8002e8e:	f7fd fda3 	bl	80009d8 <Printf>
	LOG_INF("mymac : %d:%d:%d:%d:%d:%d", mymac[0], mymac[1], mymac[2], mymac[3], mymac[4], mymac[5] );
 8002e92:	4b23      	ldr	r3, [pc, #140]	@ (8002f20 <ethernet_init+0xd8>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	2b03      	cmp	r3, #3
 8002e98:	d91a      	bls.n	8002ed0 <ethernet_init+0x88>
 8002e9a:	4b20      	ldr	r3, [pc, #128]	@ (8002f1c <ethernet_init+0xd4>)
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	461c      	mov	r4, r3
 8002ea0:	4b1e      	ldr	r3, [pc, #120]	@ (8002f1c <ethernet_init+0xd4>)
 8002ea2:	785b      	ldrb	r3, [r3, #1]
 8002ea4:	461d      	mov	r5, r3
 8002ea6:	4b1d      	ldr	r3, [pc, #116]	@ (8002f1c <ethernet_init+0xd4>)
 8002ea8:	789b      	ldrb	r3, [r3, #2]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	4b1b      	ldr	r3, [pc, #108]	@ (8002f1c <ethernet_init+0xd4>)
 8002eae:	78db      	ldrb	r3, [r3, #3]
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4b1a      	ldr	r3, [pc, #104]	@ (8002f1c <ethernet_init+0xd4>)
 8002eb4:	791b      	ldrb	r3, [r3, #4]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	4b18      	ldr	r3, [pc, #96]	@ (8002f1c <ethernet_init+0xd4>)
 8002eba:	795b      	ldrb	r3, [r3, #5]
 8002ebc:	9303      	str	r3, [sp, #12]
 8002ebe:	9002      	str	r0, [sp, #8]
 8002ec0:	9101      	str	r1, [sp, #4]
 8002ec2:	9200      	str	r2, [sp, #0]
 8002ec4:	462b      	mov	r3, r5
 8002ec6:	4622      	mov	r2, r4
 8002ec8:	4916      	ldr	r1, [pc, #88]	@ (8002f24 <ethernet_init+0xdc>)
 8002eca:	4819      	ldr	r0, [pc, #100]	@ (8002f30 <ethernet_init+0xe8>)
 8002ecc:	f7fd fd84 	bl	80009d8 <Printf>
		// Failed to get IP address"
		LOG_ERR("Failed to get IP address");
		return 1;
	}
#else
	Ethernet_init_ip_arp_udp_tcp(mymac, g_ip_net.ip_net.ipaddr, g_ip_net.ip_net.port);
 8002ed0:	4b18      	ldr	r3, [pc, #96]	@ (8002f34 <ethernet_init+0xec>)
 8002ed2:	89db      	ldrh	r3, [r3, #14]
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	4918      	ldr	r1, [pc, #96]	@ (8002f38 <ethernet_init+0xf0>)
 8002ed8:	4810      	ldr	r0, [pc, #64]	@ (8002f1c <ethernet_init+0xd4>)
 8002eda:	f002 fbd3 	bl	8005684 <Ethernet_init_ip_arp_udp_tcp>
	Ethernet_client_set_gwip(g_ip_net.ip_net.gateway);
 8002ede:	4817      	ldr	r0, [pc, #92]	@ (8002f3c <ethernet_init+0xf4>)
 8002ee0:	f002 fc00 	bl	80056e4 <Ethernet_client_set_gwip>
#endif

	LOG_DBG("myip = %d.%d.%d.%d \r\n", g_ip_net.ip_net.ipaddr[0],g_ip_net.ip_net.ipaddr[1],
 8002ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8002f20 <ethernet_init+0xd8>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d912      	bls.n	8002f12 <ethernet_init+0xca>
 8002eec:	4b11      	ldr	r3, [pc, #68]	@ (8002f34 <ethernet_init+0xec>)
 8002eee:	789b      	ldrb	r3, [r3, #2]
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4b10      	ldr	r3, [pc, #64]	@ (8002f34 <ethernet_init+0xec>)
 8002ef4:	78db      	ldrb	r3, [r3, #3]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8002f34 <ethernet_init+0xec>)
 8002efa:	791b      	ldrb	r3, [r3, #4]
 8002efc:	461a      	mov	r2, r3
 8002efe:	4b0d      	ldr	r3, [pc, #52]	@ (8002f34 <ethernet_init+0xec>)
 8002f00:	795b      	ldrb	r3, [r3, #5]
 8002f02:	9301      	str	r3, [sp, #4]
 8002f04:	9200      	str	r2, [sp, #0]
 8002f06:	4603      	mov	r3, r0
 8002f08:	460a      	mov	r2, r1
 8002f0a:	4906      	ldr	r1, [pc, #24]	@ (8002f24 <ethernet_init+0xdc>)
 8002f0c:	480c      	ldr	r0, [pc, #48]	@ (8002f40 <ethernet_init+0xf8>)
 8002f0e:	f7fd fd63 	bl	80009d8 <Printf>
									g_ip_net.ip_net.ipaddr[2],g_ip_net.ip_net.ipaddr[3]);

	return 0;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bdb0      	pop	{r4, r5, r7, pc}
 8002f1c:	2000008c 	.word	0x2000008c
 8002f20:	20002adc 	.word	0x20002adc
 8002f24:	0800f8a4 	.word	0x0800f8a4
 8002f28:	0800ec94 	.word	0x0800ec94
 8002f2c:	0800ecc0 	.word	0x0800ecc0
 8002f30:	0800ece4 	.word	0x0800ece4
 8002f34:	20002d4c 	.word	0x20002d4c
 8002f38:	20002d4e 	.word	0x20002d4e
 8002f3c:	20002d56 	.word	0x20002d56
 8002f40:	0800ed0c 	.word	0x0800ed0c

08002f44 <ENC28J60_DelayUs>:

void ENC28J60_DelayUs(uint32_t delay) {
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
	do {
		asm volatile (	"MOV R0,%[loops]\n\t"\
				"1: \n\t"\
				"SUB R0, #1\n\t"\
				"CMP R0, #0\n\t"\
				"BNE 1b \n\t" : : [loops] "r" (20*delay) : "memory"\
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4413      	add	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
		asm volatile (	"MOV R0,%[loops]\n\t"\
 8002f56:	4618      	mov	r0, r3
 8002f58:	f1a0 0001 	sub.w	r0, r0, #1
 8002f5c:	2800      	cmp	r0, #0
 8002f5e:	d1fb      	bne.n	8002f58 <ENC28J60_DelayUs+0x14>
			      ); // test logic analyzer, target 100us : 20->97us 21->127us
	} while(0);
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <ENC28J60_DelayMs>:

void ENC28J60_DelayMs(uint32_t delay) {
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
	osDelay(delay);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f007 f8d4 	bl	800a122 <osDelay>
}
 8002f7a:	bf00      	nop
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
	...

08002f84 <ENC28J60_EnableChip>:

uint32_t ENC28J60_GetMs(void) {
	return HAL_GetTick();
}

void ENC28J60_EnableChip(void) {
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ETH_NSS_GPIO_Port, ETH_NSS_Pin, GPIO_PIN_RESET);
 8002f88:	2200      	movs	r2, #0
 8002f8a:	2110      	movs	r1, #16
 8002f8c:	4802      	ldr	r0, [pc, #8]	@ (8002f98 <ENC28J60_EnableChip+0x14>)
 8002f8e:	f003 fcf1 	bl	8006974 <HAL_GPIO_WritePin>
}
 8002f92:	bf00      	nop
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	40020000 	.word	0x40020000

08002f9c <ENC28J60_DisableChip>:

void ENC28J60_DisableChip(void) {
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ETH_NSS_GPIO_Port, ETH_NSS_Pin, GPIO_PIN_SET);
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	2110      	movs	r1, #16
 8002fa4:	4802      	ldr	r0, [pc, #8]	@ (8002fb0 <ENC28J60_DisableChip+0x14>)
 8002fa6:	f003 fce5 	bl	8006974 <HAL_GPIO_WritePin>
}
 8002faa:	bf00      	nop
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40020000 	.word	0x40020000

08002fb4 <ENC28J60_TransceiveByte>:

uint8_t ENC28J60_TransceiveByte(uint8_t data) {
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af02      	add	r7, sp, #8
 8002fba:	4603      	mov	r3, r0
 8002fbc:	71fb      	strb	r3, [r7, #7]
	uint8_t received;
	HAL_StatusTypeDef error;

	error = HAL_SPI_TransmitReceive(&hspi1, &data, &received, 1, 1000);
 8002fbe:	f107 020e 	add.w	r2, r7, #14
 8002fc2:	1df9      	adds	r1, r7, #7
 8002fc4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	2301      	movs	r3, #1
 8002fcc:	480c      	ldr	r0, [pc, #48]	@ (8003000 <ENC28J60_TransceiveByte+0x4c>)
 8002fce:	f005 fa64 	bl	800849a <HAL_SPI_TransmitReceive>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	73fb      	strb	r3, [r7, #15]
	if (error == HAL_OK) {
 8002fd6:	7bfb      	ldrb	r3, [r7, #15]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <ENC28J60_TransceiveByte+0x2c>
		return received;
 8002fdc:	7bbb      	ldrb	r3, [r7, #14]
 8002fde:	e00a      	b.n	8002ff6 <ENC28J60_TransceiveByte+0x42>
	}

	LOG_ERR("Error[%x]", error);
 8002fe0:	4b08      	ldr	r3, [pc, #32]	@ (8003004 <ENC28J60_TransceiveByte+0x50>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d005      	beq.n	8002ff4 <ENC28J60_TransceiveByte+0x40>
 8002fe8:	7bfb      	ldrb	r3, [r7, #15]
 8002fea:	461a      	mov	r2, r3
 8002fec:	4906      	ldr	r1, [pc, #24]	@ (8003008 <ENC28J60_TransceiveByte+0x54>)
 8002fee:	4807      	ldr	r0, [pc, #28]	@ (800300c <ENC28J60_TransceiveByte+0x58>)
 8002ff0:	f7fd fcf2 	bl	80009d8 <Printf>
	return 0;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	20002b40 	.word	0x20002b40
 8003004:	20002adc 	.word	0x20002adc
 8003008:	0800f8b4 	.word	0x0800f8b4
 800300c:	0800ed30 	.word	0x0800ed30

08003010 <m_eth_write_mac_ipaddr>:

int m_eth_write_mac_ipaddr(ip_net_t *ip_addr)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b08e      	sub	sp, #56	@ 0x38
 8003014:	af02      	add	r7, sp, #8
 8003016:	6078      	str	r0, [r7, #4]
	uint8_t buffer[32]={0,}, size;
 8003018:	2300      	movs	r3, #0
 800301a:	60fb      	str	r3, [r7, #12]
 800301c:	f107 0310 	add.w	r3, r7, #16
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	605a      	str	r2, [r3, #4]
 8003026:	609a      	str	r2, [r3, #8]
 8003028:	60da      	str	r2, [r3, #12]
 800302a:	611a      	str	r2, [r3, #16]
 800302c:	615a      	str	r2, [r3, #20]
 800302e:	619a      	str	r2, [r3, #24]
	uint16_t mem_address;

	mem_address = 0;
 8003030:	2300      	movs	r3, #0
 8003032:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	size = sizeof(g_ip_net);
 8003034:	2310      	movs	r3, #16
 8003036:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	g_ip_net.id[0] = 'Y';
 800303a:	4b21      	ldr	r3, [pc, #132]	@ (80030c0 <m_eth_write_mac_ipaddr+0xb0>)
 800303c:	2259      	movs	r2, #89	@ 0x59
 800303e:	701a      	strb	r2, [r3, #0]
	g_ip_net.id[1] = 'S';
 8003040:	4b1f      	ldr	r3, [pc, #124]	@ (80030c0 <m_eth_write_mac_ipaddr+0xb0>)
 8003042:	2253      	movs	r2, #83	@ 0x53
 8003044:	705a      	strb	r2, [r3, #1]
	memcpy(&g_ip_net.ip_net, ip_addr, sizeof(ip_net_t));
 8003046:	220e      	movs	r2, #14
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	481e      	ldr	r0, [pc, #120]	@ (80030c4 <m_eth_write_mac_ipaddr+0xb4>)
 800304c:	f00a fe48 	bl	800dce0 <memcpy>
	memcpy(buffer, &g_ip_net, sizeof(mac_ip_addr));
 8003050:	f107 030c 	add.w	r3, r7, #12
 8003054:	2210      	movs	r2, #16
 8003056:	491a      	ldr	r1, [pc, #104]	@ (80030c0 <m_eth_write_mac_ipaddr+0xb0>)
 8003058:	4618      	mov	r0, r3
 800305a:	f00a fe41 	bl	800dce0 <memcpy>
	LOG_HEX_DUMP(buffer, size, "Write E2p");
 800305e:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8003062:	f107 030c 	add.w	r3, r7, #12
 8003066:	4a18      	ldr	r2, [pc, #96]	@ (80030c8 <m_eth_write_mac_ipaddr+0xb8>)
 8003068:	4618      	mov	r0, r3
 800306a:	f7fd fd15 	bl	8000a98 <dump_printf>
	if(m_env_e2p_write(&MAC_I2C_HANDLE, AT24EEP_ADDR, mem_address, 1, buffer, size)){
 800306e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003072:	b29b      	uxth	r3, r3
 8003074:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8003076:	9301      	str	r3, [sp, #4]
 8003078:	f107 030c 	add.w	r3, r7, #12
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	2301      	movs	r3, #1
 8003080:	21a0      	movs	r1, #160	@ 0xa0
 8003082:	4812      	ldr	r0, [pc, #72]	@ (80030cc <m_eth_write_mac_ipaddr+0xbc>)
 8003084:	f7fe fcf0 	bl	8001a68 <m_env_e2p_write>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d009      	beq.n	80030a2 <m_eth_write_mac_ipaddr+0x92>
		LOG_ERR("Set IP Address from MacIC Error");
 800308e:	4b10      	ldr	r3, [pc, #64]	@ (80030d0 <m_eth_write_mac_ipaddr+0xc0>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d003      	beq.n	800309e <m_eth_write_mac_ipaddr+0x8e>
 8003096:	490f      	ldr	r1, [pc, #60]	@ (80030d4 <m_eth_write_mac_ipaddr+0xc4>)
 8003098:	480f      	ldr	r0, [pc, #60]	@ (80030d8 <m_eth_write_mac_ipaddr+0xc8>)
 800309a:	f7fd fc9d 	bl	80009d8 <Printf>
		return 1;
 800309e:	2301      	movs	r3, #1
 80030a0:	e00a      	b.n	80030b8 <m_eth_write_mac_ipaddr+0xa8>
	}

	Ethernet_init_ip_arp_udp_tcp(mymac, g_ip_net.ip_net.ipaddr, g_ip_net.ip_net.port);
 80030a2:	4b07      	ldr	r3, [pc, #28]	@ (80030c0 <m_eth_write_mac_ipaddr+0xb0>)
 80030a4:	89db      	ldrh	r3, [r3, #14]
 80030a6:	461a      	mov	r2, r3
 80030a8:	4906      	ldr	r1, [pc, #24]	@ (80030c4 <m_eth_write_mac_ipaddr+0xb4>)
 80030aa:	480c      	ldr	r0, [pc, #48]	@ (80030dc <m_eth_write_mac_ipaddr+0xcc>)
 80030ac:	f002 faea 	bl	8005684 <Ethernet_init_ip_arp_udp_tcp>
	Ethernet_client_set_gwip(g_ip_net.ip_net.gateway);
 80030b0:	480b      	ldr	r0, [pc, #44]	@ (80030e0 <m_eth_write_mac_ipaddr+0xd0>)
 80030b2:	f002 fb17 	bl	80056e4 <Ethernet_client_set_gwip>
	return 0;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3730      	adds	r7, #48	@ 0x30
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	20002d4c 	.word	0x20002d4c
 80030c4:	20002d4e 	.word	0x20002d4e
 80030c8:	0800ed48 	.word	0x0800ed48
 80030cc:	20002ae0 	.word	0x20002ae0
 80030d0:	20002adc 	.word	0x20002adc
 80030d4:	0800f8cc 	.word	0x0800f8cc
 80030d8:	0800ed54 	.word	0x0800ed54
 80030dc:	2000008c 	.word	0x2000008c
 80030e0:	20002d56 	.word	0x20002d56

080030e4 <read_ipnet>:

static int read_ipnet(void)
{
 80030e4:	b5b0      	push	{r4, r5, r7, lr}
 80030e6:	b08e      	sub	sp, #56	@ 0x38
 80030e8:	af04      	add	r7, sp, #16
	uint8_t buffer[32]={0,}, size;
 80030ea:	2300      	movs	r3, #0
 80030ec:	607b      	str	r3, [r7, #4]
 80030ee:	f107 0308 	add.w	r3, r7, #8
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	605a      	str	r2, [r3, #4]
 80030f8:	609a      	str	r2, [r3, #8]
 80030fa:	60da      	str	r2, [r3, #12]
 80030fc:	611a      	str	r2, [r3, #16]
 80030fe:	615a      	str	r2, [r3, #20]
 8003100:	619a      	str	r2, [r3, #24]
	uint16_t mem_address;

	mem_address = 0;
 8003102:	2300      	movs	r3, #0
 8003104:	84fb      	strh	r3, [r7, #38]	@ 0x26
	size = sizeof(mac_ip_addr);
 8003106:	2310      	movs	r3, #16
 8003108:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	if(m_env_e2p_read(&MAC_I2C_HANDLE, AT24EEP_ADDR, mem_address, 1, buffer, size)){
 800310c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003110:	b29b      	uxth	r3, r3
 8003112:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8003114:	9301      	str	r3, [sp, #4]
 8003116:	1d3b      	adds	r3, r7, #4
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	2301      	movs	r3, #1
 800311c:	21a0      	movs	r1, #160	@ 0xa0
 800311e:	4828      	ldr	r0, [pc, #160]	@ (80031c0 <read_ipnet+0xdc>)
 8003120:	f7fe fcda 	bl	8001ad8 <m_env_e2p_read>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d009      	beq.n	800313e <read_ipnet+0x5a>
		LOG_ERR("Get IP Address from MacIC Error\r\n");
 800312a:	4b26      	ldr	r3, [pc, #152]	@ (80031c4 <read_ipnet+0xe0>)
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <read_ipnet+0x56>
 8003132:	4925      	ldr	r1, [pc, #148]	@ (80031c8 <read_ipnet+0xe4>)
 8003134:	4825      	ldr	r0, [pc, #148]	@ (80031cc <read_ipnet+0xe8>)
 8003136:	f7fd fc4f 	bl	80009d8 <Printf>
		return 1;
 800313a:	2301      	movs	r3, #1
 800313c:	e03c      	b.n	80031b8 <read_ipnet+0xd4>
	}
	LOG_HEX_DUMP(buffer, size, "Read E2p");
 800313e:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8003142:	1d3b      	adds	r3, r7, #4
 8003144:	4a22      	ldr	r2, [pc, #136]	@ (80031d0 <read_ipnet+0xec>)
 8003146:	4618      	mov	r0, r3
 8003148:	f7fd fca6 	bl	8000a98 <dump_printf>
	memcpy(&g_ip_net, buffer, sizeof(mac_ip_addr));
 800314c:	1d3b      	adds	r3, r7, #4
 800314e:	2210      	movs	r2, #16
 8003150:	4619      	mov	r1, r3
 8003152:	4820      	ldr	r0, [pc, #128]	@ (80031d4 <read_ipnet+0xf0>)
 8003154:	f00a fdc4 	bl	800dce0 <memcpy>
	if(memcmp(g_ip_net.id, "YS", 2)==0){
 8003158:	2202      	movs	r2, #2
 800315a:	491f      	ldr	r1, [pc, #124]	@ (80031d8 <read_ipnet+0xf4>)
 800315c:	481d      	ldr	r0, [pc, #116]	@ (80031d4 <read_ipnet+0xf0>)
 800315e:	f00a fd25 	bl	800dbac <memcmp>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d11e      	bne.n	80031a6 <read_ipnet+0xc2>
		LOG_INF("Read Size [%d] IP Addr [%03d.%03d.%03d.%03d] Port[%d]\r\n", size, g_ip_net.ip_net.ipaddr[0], g_ip_net.ip_net.ipaddr[1],
 8003168:	4b16      	ldr	r3, [pc, #88]	@ (80031c4 <read_ipnet+0xe0>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b03      	cmp	r3, #3
 800316e:	d918      	bls.n	80031a2 <read_ipnet+0xbe>
 8003170:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8003174:	4b17      	ldr	r3, [pc, #92]	@ (80031d4 <read_ipnet+0xf0>)
 8003176:	789b      	ldrb	r3, [r3, #2]
 8003178:	461d      	mov	r5, r3
 800317a:	4b16      	ldr	r3, [pc, #88]	@ (80031d4 <read_ipnet+0xf0>)
 800317c:	78db      	ldrb	r3, [r3, #3]
 800317e:	4619      	mov	r1, r3
 8003180:	4b14      	ldr	r3, [pc, #80]	@ (80031d4 <read_ipnet+0xf0>)
 8003182:	791b      	ldrb	r3, [r3, #4]
 8003184:	4618      	mov	r0, r3
 8003186:	4b13      	ldr	r3, [pc, #76]	@ (80031d4 <read_ipnet+0xf0>)
 8003188:	795b      	ldrb	r3, [r3, #5]
 800318a:	461c      	mov	r4, r3
 800318c:	4b11      	ldr	r3, [pc, #68]	@ (80031d4 <read_ipnet+0xf0>)
 800318e:	89db      	ldrh	r3, [r3, #14]
 8003190:	9303      	str	r3, [sp, #12]
 8003192:	9402      	str	r4, [sp, #8]
 8003194:	9001      	str	r0, [sp, #4]
 8003196:	9100      	str	r1, [sp, #0]
 8003198:	462b      	mov	r3, r5
 800319a:	490b      	ldr	r1, [pc, #44]	@ (80031c8 <read_ipnet+0xe4>)
 800319c:	480f      	ldr	r0, [pc, #60]	@ (80031dc <read_ipnet+0xf8>)
 800319e:	f7fd fc1b 	bl	80009d8 <Printf>
							g_ip_net.ip_net.ipaddr[2], g_ip_net.ip_net.ipaddr[3], g_ip_net.ip_net.port);
#if _SET_DEFAULT_IP_TEST
		return 1;
#endif
		return 0;
 80031a2:	2300      	movs	r3, #0
 80031a4:	e008      	b.n	80031b8 <read_ipnet+0xd4>
	}else{
		LOG_ERR("Not found IP Address from MacIC!!\r\n");
 80031a6:	4b07      	ldr	r3, [pc, #28]	@ (80031c4 <read_ipnet+0xe0>)
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <read_ipnet+0xd2>
 80031ae:	4906      	ldr	r1, [pc, #24]	@ (80031c8 <read_ipnet+0xe4>)
 80031b0:	480b      	ldr	r0, [pc, #44]	@ (80031e0 <read_ipnet+0xfc>)
 80031b2:	f7fd fc11 	bl	80009d8 <Printf>
		return 1;
 80031b6:	2301      	movs	r3, #1
	}

	return 0;
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3728      	adds	r7, #40	@ 0x28
 80031bc:	46bd      	mov	sp, r7
 80031be:	bdb0      	pop	{r4, r5, r7, pc}
 80031c0:	20002ae0 	.word	0x20002ae0
 80031c4:	20002adc 	.word	0x20002adc
 80031c8:	0800f8e4 	.word	0x0800f8e4
 80031cc:	0800ed80 	.word	0x0800ed80
 80031d0:	0800edb0 	.word	0x0800edb0
 80031d4:	20002d4c 	.word	0x20002d4c
 80031d8:	0800edbc 	.word	0x0800edbc
 80031dc:	0800edc0 	.word	0x0800edc0
 80031e0:	0800ee04 	.word	0x0800ee04

080031e4 <onWriteIPAddress>:

static void onWriteIPAddress(void *pData, uint32_t size)
{
 80031e4:	b590      	push	{r4, r7, lr}
 80031e6:	b08d      	sub	sp, #52	@ 0x34
 80031e8:	af04      	add	r7, sp, #16
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
	ip_net_t ipnet;
	int error;
	model_ip_net_t *Data = pData;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	61fb      	str	r3, [r7, #28]

	memcpy(ipnet.submask, Data->submask, sizeof(ipnet.submask));
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	3304      	adds	r3, #4
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	60fb      	str	r3, [r7, #12]
	memcpy(ipnet.ipaddr, Data->ipaddr, sizeof(ipnet.ipaddr));
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	60bb      	str	r3, [r7, #8]

	ipnet.gateway[0] = Data->ipaddr[0];
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	743b      	strb	r3, [r7, #16]
	ipnet.gateway[1] = Data->ipaddr[1];
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	785b      	ldrb	r3, [r3, #1]
 800320a:	747b      	strb	r3, [r7, #17]
	ipnet.gateway[2] = 0;
 800320c:	2300      	movs	r3, #0
 800320e:	74bb      	strb	r3, [r7, #18]
	ipnet.gateway[3] = 1;
 8003210:	2301      	movs	r3, #1
 8003212:	74fb      	strb	r3, [r7, #19]

	ipnet.port = Data->port;
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	891b      	ldrh	r3, [r3, #8]
 8003218:	b29b      	uxth	r3, r3
 800321a:	82bb      	strh	r3, [r7, #20]


	LOG_DBG("IP Addr[%03d.%03d.%03d.%03d : %d]", ipnet.ipaddr[0], ipnet.ipaddr[1], ipnet.ipaddr[2], ipnet.ipaddr[3], ipnet.port)
 800321c:	4b1a      	ldr	r3, [pc, #104]	@ (8003288 <onWriteIPAddress+0xa4>)
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2b02      	cmp	r3, #2
 8003222:	d90f      	bls.n	8003244 <onWriteIPAddress+0x60>
 8003224:	7a3b      	ldrb	r3, [r7, #8]
 8003226:	4618      	mov	r0, r3
 8003228:	7a7b      	ldrb	r3, [r7, #9]
 800322a:	461c      	mov	r4, r3
 800322c:	7abb      	ldrb	r3, [r7, #10]
 800322e:	7afa      	ldrb	r2, [r7, #11]
 8003230:	8ab9      	ldrh	r1, [r7, #20]
 8003232:	9102      	str	r1, [sp, #8]
 8003234:	9201      	str	r2, [sp, #4]
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	4623      	mov	r3, r4
 800323a:	4602      	mov	r2, r0
 800323c:	4913      	ldr	r1, [pc, #76]	@ (800328c <onWriteIPAddress+0xa8>)
 800323e:	4814      	ldr	r0, [pc, #80]	@ (8003290 <onWriteIPAddress+0xac>)
 8003240:	f7fd fbca 	bl	80009d8 <Printf>
	error = m_eth_write_mac_ipaddr(&ipnet);
 8003244:	f107 0308 	add.w	r3, r7, #8
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff fee1 	bl	8003010 <m_eth_write_mac_ipaddr>
 800324e:	61b8      	str	r0, [r7, #24]
	REPORT_IF_ERROR(error);
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d012      	beq.n	800327c <onWriteIPAddress+0x98>
 8003256:	4b0c      	ldr	r3, [pc, #48]	@ (8003288 <onWriteIPAddress+0xa4>)
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <onWriteIPAddress+0x82>
 800325e:	490b      	ldr	r1, [pc, #44]	@ (800328c <onWriteIPAddress+0xa8>)
 8003260:	480c      	ldr	r0, [pc, #48]	@ (8003294 <onWriteIPAddress+0xb0>)
 8003262:	f7fd fbb9 	bl	80009d8 <Printf>
 8003266:	4b08      	ldr	r3, [pc, #32]	@ (8003288 <onWriteIPAddress+0xa4>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d006      	beq.n	800327c <onWriteIPAddress+0x98>
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	f240 1235 	movw	r2, #309	@ 0x135
 8003274:	4905      	ldr	r1, [pc, #20]	@ (800328c <onWriteIPAddress+0xa8>)
 8003276:	4808      	ldr	r0, [pc, #32]	@ (8003298 <onWriteIPAddress+0xb4>)
 8003278:	f7fd fbae 	bl	80009d8 <Printf>
	ethernet_init();
 800327c:	f7ff fde4 	bl	8002e48 <ethernet_init>
}
 8003280:	bf00      	nop
 8003282:	3724      	adds	r7, #36	@ 0x24
 8003284:	46bd      	mov	sp, r7
 8003286:	bd90      	pop	{r4, r7, pc}
 8003288:	20002adc 	.word	0x20002adc
 800328c:	0800f8f0 	.word	0x0800f8f0
 8003290:	0800ee34 	.word	0x0800ee34
 8003294:	0800ee64 	.word	0x0800ee64
 8003298:	0800ee90 	.word	0x0800ee90

0800329c <On_set_mode>:

static void On_set_mode(remote_mode_t mode)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	4603      	mov	r3, r0
 80032a4:	71fb      	strb	r3, [r7, #7]
	if(mode == eREMOTE_ETHER){
 80032a6:	79fb      	ldrb	r3, [r7, #7]
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d107      	bne.n	80032bc <On_set_mode+0x20>
		LOG_DBG("Start Ether Control");
 80032ac:	4b07      	ldr	r3, [pc, #28]	@ (80032cc <On_set_mode+0x30>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d903      	bls.n	80032bc <On_set_mode+0x20>
 80032b4:	4906      	ldr	r1, [pc, #24]	@ (80032d0 <On_set_mode+0x34>)
 80032b6:	4807      	ldr	r0, [pc, #28]	@ (80032d4 <On_set_mode+0x38>)
 80032b8:	f7fd fb8e 	bl	80009d8 <Printf>
	}
	m_cfg.run_mode = mode;
 80032bc:	4a06      	ldr	r2, [pc, #24]	@ (80032d8 <On_set_mode+0x3c>)
 80032be:	79fb      	ldrb	r3, [r7, #7]
 80032c0:	7013      	strb	r3, [r2, #0]
}
 80032c2:	bf00      	nop
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	20002adc 	.word	0x20002adc
 80032d0:	0800f904 	.word	0x0800f904
 80032d4:	0800eec8 	.word	0x0800eec8
 80032d8:	20002d44 	.word	0x20002d44

080032dc <EthernetTask>:

	return 0;
}

void EthernetTask(void const * argument)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
	LOG_DBG("Start Ethernet task");
 80032e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003314 <EthernetTask+0x38>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d903      	bls.n	80032f4 <EthernetTask+0x18>
 80032ec:	490a      	ldr	r1, [pc, #40]	@ (8003318 <EthernetTask+0x3c>)
 80032ee:	480b      	ldr	r0, [pc, #44]	@ (800331c <EthernetTask+0x40>)
 80032f0:	f7fd fb72 	bl	80009d8 <Printf>

	while(1){
		if(m_cfg.run_mode == eREMOTE_ETHER){
 80032f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003320 <EthernetTask+0x44>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d105      	bne.n	8003308 <EthernetTask+0x2c>
			read_packet();
 80032fc:	f7ff fd6e 	bl	8002ddc <read_packet>
			osDelay(10);
 8003300:	200a      	movs	r0, #10
 8003302:	f006 ff0e 	bl	800a122 <osDelay>
 8003306:	e7f5      	b.n	80032f4 <EthernetTask+0x18>
		}else{
			osDelay(1000);
 8003308:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800330c:	f006 ff09 	bl	800a122 <osDelay>
		if(m_cfg.run_mode == eREMOTE_ETHER){
 8003310:	e7f0      	b.n	80032f4 <EthernetTask+0x18>
 8003312:	bf00      	nop
 8003314:	20002adc 	.word	0x20002adc
 8003318:	0800f910 	.word	0x0800f910
 800331c:	0800eee8 	.word	0x0800eee8
 8003320:	20002d44 	.word	0x20002d44

08003324 <evt_handler>:
		}
	}
}

static void evt_handler(event_t const* evt, void* p_context)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
	switch (evt->event)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b18      	cmp	r3, #24
 8003334:	d00f      	beq.n	8003356 <evt_handler+0x32>
 8003336:	2b18      	cmp	r3, #24
 8003338:	dc14      	bgt.n	8003364 <evt_handler+0x40>
 800333a:	2b08      	cmp	r3, #8
 800333c:	d002      	beq.n	8003344 <evt_handler+0x20>
 800333e:	2b09      	cmp	r3, #9
 8003340:	d012      	beq.n	8003368 <evt_handler+0x44>
			break;
		case EVT_remote_mode:
			On_set_mode(evt->param1);
			break;
		default:
			break;
 8003342:	e00f      	b.n	8003364 <evt_handler+0x40>
			onWriteIPAddress(evt->p_event_data, evt->event_data_size);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	691a      	ldr	r2, [r3, #16]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	4619      	mov	r1, r3
 800334e:	4610      	mov	r0, r2
 8003350:	f7ff ff48 	bl	80031e4 <onWriteIPAddress>
			break;
 8003354:	e009      	b.n	800336a <evt_handler+0x46>
			On_set_mode(evt->param1);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	b2db      	uxtb	r3, r3
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff ff9d 	bl	800329c <On_set_mode>
			break;
 8003362:	e002      	b.n	800336a <evt_handler+0x46>
			break;
 8003364:	bf00      	nop
 8003366:	e000      	b.n	800336a <evt_handler+0x46>
			break;
 8003368:	bf00      	nop
	}
}
 800336a:	bf00      	nop
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
	...

08003374 <EthernetInit>:

int EthernetInit(void)
{
 8003374:	b5b0      	push	{r4, r5, r7, lr}
 8003376:	b092      	sub	sp, #72	@ 0x48
 8003378:	af04      	add	r7, sp, #16
	int time_out = 0, error;
 800337a:	2300      	movs	r3, #0
 800337c:	637b      	str	r3, [r7, #52]	@ 0x34
	ip_net_t default_ip;

	LOG_DBG("%s Init", __func__);
 800337e:	4b5c      	ldr	r3, [pc, #368]	@ (80034f0 <EthernetInit+0x17c>)
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	2b02      	cmp	r3, #2
 8003384:	d904      	bls.n	8003390 <EthernetInit+0x1c>
 8003386:	4a5b      	ldr	r2, [pc, #364]	@ (80034f4 <EthernetInit+0x180>)
 8003388:	495a      	ldr	r1, [pc, #360]	@ (80034f4 <EthernetInit+0x180>)
 800338a:	485b      	ldr	r0, [pc, #364]	@ (80034f8 <EthernetInit+0x184>)
 800338c:	f7fd fb24 	bl	80009d8 <Printf>

	osThreadDef(ethernetTask, EthernetTask, osPriorityNormal, 0, 2048);
 8003390:	4b5a      	ldr	r3, [pc, #360]	@ (80034fc <EthernetInit+0x188>)
 8003392:	1d3c      	adds	r4, r7, #4
 8003394:	461d      	mov	r5, r3
 8003396:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003398:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800339a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800339e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	ethernetTaskHandle = osThreadCreate(osThread(ethernetTask), NULL);
 80033a2:	1d3b      	adds	r3, r7, #4
 80033a4:	2100      	movs	r1, #0
 80033a6:	4618      	mov	r0, r3
 80033a8:	f006 fe6f 	bl	800a08a <osThreadCreate>
 80033ac:	4603      	mov	r3, r0
 80033ae:	4a54      	ldr	r2, [pc, #336]	@ (8003500 <EthernetInit+0x18c>)
 80033b0:	6013      	str	r3, [r2, #0]
	if(ethernetTaskHandle == NULL){
 80033b2:	4b53      	ldr	r3, [pc, #332]	@ (8003500 <EthernetInit+0x18c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d112      	bne.n	80033e0 <EthernetInit+0x6c>
		LOG_ERR("Ethernet task Create Error");
 80033ba:	4b4d      	ldr	r3, [pc, #308]	@ (80034f0 <EthernetInit+0x17c>)
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <EthernetInit+0x56>
 80033c2:	494c      	ldr	r1, [pc, #304]	@ (80034f4 <EthernetInit+0x180>)
 80033c4:	484f      	ldr	r0, [pc, #316]	@ (8003504 <EthernetInit+0x190>)
 80033c6:	f7fd fb07 	bl	80009d8 <Printf>
		return -1;
 80033ca:	f04f 33ff 	mov.w	r3, #4294967295
 80033ce:	e08a      	b.n	80034e6 <EthernetInit+0x172>
	}
	while(time_out++ < 10){
		if(read_mac_addr() == 0)
 80033d0:	f7ff fcbc 	bl	8002d4c <read_mac_addr>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d008      	beq.n	80033ec <EthernetInit+0x78>
			break;
		//HAL_Delay(10);
		osDelay(10); // ??
 80033da:	200a      	movs	r0, #10
 80033dc:	f006 fea1 	bl	800a122 <osDelay>
	while(time_out++ < 10){
 80033e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033e2:	1c5a      	adds	r2, r3, #1
 80033e4:	637a      	str	r2, [r7, #52]	@ 0x34
 80033e6:	2b09      	cmp	r3, #9
 80033e8:	ddf2      	ble.n	80033d0 <EthernetInit+0x5c>
 80033ea:	e000      	b.n	80033ee <EthernetInit+0x7a>
			break;
 80033ec:	bf00      	nop
	}

	if(read_ipnet()){
 80033ee:	f7ff fe79 	bl	80030e4 <read_ipnet>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d038      	beq.n	800346a <EthernetInit+0xf6>
		// default ip address
		default_ip.ipaddr[0] = 192;
 80033f8:	23c0      	movs	r3, #192	@ 0xc0
 80033fa:	f887 3020 	strb.w	r3, [r7, #32]
		default_ip.ipaddr[1] = 168;
 80033fe:	23a8      	movs	r3, #168	@ 0xa8
 8003400:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
		default_ip.ipaddr[2] = 0;
 8003404:	2300      	movs	r3, #0
 8003406:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		default_ip.ipaddr[3] = 5;
 800340a:	2305      	movs	r3, #5
 800340c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		default_ip.port = 5050;
 8003410:	f241 33ba 	movw	r3, #5050	@ 0x13ba
 8003414:	85bb      	strh	r3, [r7, #44]	@ 0x2c

		default_ip.gateway[0] = 192;
 8003416:	23c0      	movs	r3, #192	@ 0xc0
 8003418:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
		default_ip.gateway[1] = 168;
 800341c:	23a8      	movs	r3, #168	@ 0xa8
 800341e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
		default_ip.gateway[2] = 0;
 8003422:	2300      	movs	r3, #0
 8003424:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
		default_ip.gateway[3] = 1;
 8003428:	2301      	movs	r3, #1
 800342a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

		LOG_INF("Set Default IP Addr [%03d.%03d.%03d.%03d] Port[%d]\r\n", default_ip.ipaddr[0], default_ip.ipaddr[1],
 800342e:	4b30      	ldr	r3, [pc, #192]	@ (80034f0 <EthernetInit+0x17c>)
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	2b03      	cmp	r3, #3
 8003434:	d914      	bls.n	8003460 <EthernetInit+0xec>
 8003436:	f897 3020 	ldrb.w	r3, [r7, #32]
 800343a:	4618      	mov	r0, r3
 800343c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003440:	461c      	mov	r4, r3
 8003442:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8003446:	461a      	mov	r2, r3
 8003448:	4b2f      	ldr	r3, [pc, #188]	@ (8003508 <EthernetInit+0x194>)
 800344a:	795b      	ldrb	r3, [r3, #5]
 800344c:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 800344e:	9102      	str	r1, [sp, #8]
 8003450:	9301      	str	r3, [sp, #4]
 8003452:	9200      	str	r2, [sp, #0]
 8003454:	4623      	mov	r3, r4
 8003456:	4602      	mov	r2, r0
 8003458:	4926      	ldr	r1, [pc, #152]	@ (80034f4 <EthernetInit+0x180>)
 800345a:	482c      	ldr	r0, [pc, #176]	@ (800350c <EthernetInit+0x198>)
 800345c:	f7fd fabc 	bl	80009d8 <Printf>
										default_ip.ipaddr[2], g_ip_net.ip_net.ipaddr[3], default_ip.port);
		m_eth_write_mac_ipaddr(&default_ip);
 8003460:	f107 0320 	add.w	r3, r7, #32
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff fdd3 	bl	8003010 <m_eth_write_mac_ipaddr>
	}

	error = ethernet_init();
 800346a:	f7ff fced 	bl	8002e48 <ethernet_init>
 800346e:	6338      	str	r0, [r7, #48]	@ 0x30
	RETURN_IF_ERROR(error);
 8003470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003472:	2b00      	cmp	r3, #0
 8003474:	d014      	beq.n	80034a0 <EthernetInit+0x12c>
 8003476:	4b1e      	ldr	r3, [pc, #120]	@ (80034f0 <EthernetInit+0x17c>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <EthernetInit+0x112>
 800347e:	491d      	ldr	r1, [pc, #116]	@ (80034f4 <EthernetInit+0x180>)
 8003480:	4823      	ldr	r0, [pc, #140]	@ (8003510 <EthernetInit+0x19c>)
 8003482:	f7fd faa9 	bl	80009d8 <Printf>
 8003486:	4b1a      	ldr	r3, [pc, #104]	@ (80034f0 <EthernetInit+0x17c>)
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d006      	beq.n	800349c <EthernetInit+0x128>
 800348e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003490:	f240 1293 	movw	r2, #403	@ 0x193
 8003494:	4917      	ldr	r1, [pc, #92]	@ (80034f4 <EthernetInit+0x180>)
 8003496:	481f      	ldr	r0, [pc, #124]	@ (8003514 <EthernetInit+0x1a0>)
 8003498:	f7fd fa9e 	bl	80009d8 <Printf>
 800349c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800349e:	e022      	b.n	80034e6 <EthernetInit+0x172>

	ether_event.handler = evt_handler;
 80034a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003518 <EthernetInit+0x1a4>)
 80034a2:	4a1e      	ldr	r2, [pc, #120]	@ (800351c <EthernetInit+0x1a8>)
 80034a4:	601a      	str	r2, [r3, #0]
	ether_event.p_context = NULL;
 80034a6:	4b1c      	ldr	r3, [pc, #112]	@ (8003518 <EthernetInit+0x1a4>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	605a      	str	r2, [r3, #4]
	error = m_event_register(&ether_event);
 80034ac:	481a      	ldr	r0, [pc, #104]	@ (8003518 <EthernetInit+0x1a4>)
 80034ae:	f000 f837 	bl	8003520 <m_event_register>
 80034b2:	6338      	str	r0, [r7, #48]	@ 0x30
	RETURN_IF_ERROR(error);
 80034b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d014      	beq.n	80034e4 <EthernetInit+0x170>
 80034ba:	4b0d      	ldr	r3, [pc, #52]	@ (80034f0 <EthernetInit+0x17c>)
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <EthernetInit+0x156>
 80034c2:	490c      	ldr	r1, [pc, #48]	@ (80034f4 <EthernetInit+0x180>)
 80034c4:	4812      	ldr	r0, [pc, #72]	@ (8003510 <EthernetInit+0x19c>)
 80034c6:	f7fd fa87 	bl	80009d8 <Printf>
 80034ca:	4b09      	ldr	r3, [pc, #36]	@ (80034f0 <EthernetInit+0x17c>)
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d006      	beq.n	80034e0 <EthernetInit+0x16c>
 80034d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d4:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 80034d8:	4906      	ldr	r1, [pc, #24]	@ (80034f4 <EthernetInit+0x180>)
 80034da:	480e      	ldr	r0, [pc, #56]	@ (8003514 <EthernetInit+0x1a0>)
 80034dc:	f7fd fa7c 	bl	80009d8 <Printf>
 80034e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034e2:	e000      	b.n	80034e6 <EthernetInit+0x172>

	return 0;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3738      	adds	r7, #56	@ 0x38
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bdb0      	pop	{r4, r5, r7, pc}
 80034ee:	bf00      	nop
 80034f0:	20002adc 	.word	0x20002adc
 80034f4:	0800f920 	.word	0x0800f920
 80034f8:	0800ef08 	.word	0x0800ef08
 80034fc:	0800ef94 	.word	0x0800ef94
 8003500:	20002d48 	.word	0x20002d48
 8003504:	0800ef1c 	.word	0x0800ef1c
 8003508:	20002d4c 	.word	0x20002d4c
 800350c:	0800ef44 	.word	0x0800ef44
 8003510:	0800ee64 	.word	0x0800ee64
 8003514:	0800ee90 	.word	0x0800ee90
 8003518:	20002d5c 	.word	0x20002d5c
 800351c:	08003325 	.word	0x08003325

08003520 <m_event_register>:

event_queue_observer_t g_Event_Handle[MAX_EVT];
int evt_handle_cnt = 0;
uint8_t evt_cnt = 0;
int m_event_register(event_queue_observer_t *pEvent)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
	if(evt_handle_cnt < MAX_EVT){
 8003528:	4b10      	ldr	r3, [pc, #64]	@ (800356c <m_event_register+0x4c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b09      	cmp	r3, #9
 800352e:	dc15      	bgt.n	800355c <m_event_register+0x3c>
		g_Event_Handle[evt_handle_cnt].handler = pEvent->handler;
 8003530:	4b0e      	ldr	r3, [pc, #56]	@ (800356c <m_event_register+0x4c>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	6812      	ldr	r2, [r2, #0]
 8003538:	490d      	ldr	r1, [pc, #52]	@ (8003570 <m_event_register+0x50>)
 800353a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		g_Event_Handle[evt_handle_cnt].p_context = pEvent->p_context;
 800353e:	4b0b      	ldr	r3, [pc, #44]	@ (800356c <m_event_register+0x4c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6852      	ldr	r2, [r2, #4]
 8003546:	490a      	ldr	r1, [pc, #40]	@ (8003570 <m_event_register+0x50>)
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	440b      	add	r3, r1
 800354c:	605a      	str	r2, [r3, #4]

		evt_handle_cnt++;
 800354e:	4b07      	ldr	r3, [pc, #28]	@ (800356c <m_event_register+0x4c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	3301      	adds	r3, #1
 8003554:	4a05      	ldr	r2, [pc, #20]	@ (800356c <m_event_register+0x4c>)
 8003556:	6013      	str	r3, [r2, #0]
		return 0;
 8003558:	2300      	movs	r3, #0
 800355a:	e000      	b.n	800355e <m_event_register+0x3e>
	}

	return 1;
 800355c:	2301      	movs	r3, #1
}
 800355e:	4618      	mov	r0, r3
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	20002db8 	.word	0x20002db8
 8003570:	20002d68 	.word	0x20002d68

08003574 <m_event_push>:

int m_event_push(uint32_t evt, uint32_t param1, uint32_t param2, uint32_t param3, void* p_event_data, uint32_t event_data_size)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
 8003580:	603b      	str	r3, [r7, #0]
	int err;

    event_t *e;

    e = osMailAlloc(EventQ, osWaitForever);
 8003582:	4b3d      	ldr	r3, [pc, #244]	@ (8003678 <m_event_push+0x104>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f04f 31ff 	mov.w	r1, #4294967295
 800358a:	4618      	mov	r0, r3
 800358c:	f007 f900 	bl	800a790 <osMailAlloc>
 8003590:	6178      	str	r0, [r7, #20]
    if(e == NULL){
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d109      	bne.n	80035ac <m_event_push+0x38>
    	LOG_ERR("Message Queue allocate Error!!\r\n");
 8003598:	4b38      	ldr	r3, [pc, #224]	@ (800367c <m_event_push+0x108>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <m_event_push+0x34>
 80035a0:	4937      	ldr	r1, [pc, #220]	@ (8003680 <m_event_push+0x10c>)
 80035a2:	4838      	ldr	r0, [pc, #224]	@ (8003684 <m_event_push+0x110>)
 80035a4:	f7fd fa18 	bl	80009d8 <Printf>
    	return 0;
 80035a8:	2300      	movs	r3, #0
 80035aa:	e061      	b.n	8003670 <m_event_push+0xfc>
    }

    memset(e, 0, sizeof(event_t));
 80035ac:	2218      	movs	r2, #24
 80035ae:	2100      	movs	r1, #0
 80035b0:	6978      	ldr	r0, [r7, #20]
 80035b2:	f00a fb0b 	bl	800dbcc <memset>
    e->event = evt;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	701a      	strb	r2, [r3, #0]
    e->param1 = param1;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	605a      	str	r2, [r3, #4]
    e->param2 = param2;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	609a      	str	r2, [r3, #8]
    e->param3 = param3;
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	60da      	str	r2, [r3, #12]

    if (event_data_size != 0 && p_event_data != NULL)
 80035d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d021      	beq.n	800361a <m_event_push+0xa6>
 80035d6:	6a3b      	ldr	r3, [r7, #32]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d01e      	beq.n	800361a <m_event_push+0xa6>
    {
        e->p_event_data = pvPortMalloc(event_data_size);
 80035dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80035de:	f00a f8bd 	bl	800d75c <pvPortMalloc>
 80035e2:	4602      	mov	r2, r0
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	611a      	str	r2, [r3, #16]
        e->event_data_size = event_data_size;
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ec:	615a      	str	r2, [r3, #20]

        if (e->p_event_data == NULL)
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10a      	bne.n	800360c <m_event_push+0x98>
        {
            LOG_ERR("Event data allocate error");
 80035f6:	4b21      	ldr	r3, [pc, #132]	@ (800367c <m_event_push+0x108>)
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <m_event_push+0x92>
 80035fe:	4920      	ldr	r1, [pc, #128]	@ (8003680 <m_event_push+0x10c>)
 8003600:	4821      	ldr	r0, [pc, #132]	@ (8003688 <m_event_push+0x114>)
 8003602:	f7fd f9e9 	bl	80009d8 <Printf>
            return -ENOMEM;
 8003606:	f06f 030b 	mvn.w	r3, #11
 800360a:	e031      	b.n	8003670 <m_event_push+0xfc>
        }
        memcpy(e->p_event_data, p_event_data, event_data_size);
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003612:	6a39      	ldr	r1, [r7, #32]
 8003614:	4618      	mov	r0, r3
 8003616:	f00a fb63 	bl	800dce0 <memcpy>
    }

    //LOG_DBG("Push evt[%d] [%s] e->p_event_data[%p] size[%d]", evt_cnt, event_type_2_str(e->event), e->p_event_data, e->event_data_size);
    do
    {
        err = osMailPut(EventQ, e);
 800361a:	4b17      	ldr	r3, [pc, #92]	@ (8003678 <m_event_push+0x104>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6979      	ldr	r1, [r7, #20]
 8003620:	4618      	mov	r0, r3
 8003622:	f007 f8cb 	bl	800a7bc <osMailPut>
 8003626:	4603      	mov	r3, r0
 8003628:	613b      	str	r3, [r7, #16]
        if (err != osOK)
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d018      	beq.n	8003662 <m_event_push+0xee>
        {
        	if(e->p_event_data){
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d004      	beq.n	8003642 <m_event_push+0xce>
        		vPortFree(e->p_event_data);
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	4618      	mov	r0, r3
 800363e:	f00a f95b 	bl	800d8f8 <vPortFree>
        	}
            LOG_WRN("event_queue could not be enqueued, error code: %d\r\n", err);
 8003642:	4b0e      	ldr	r3, [pc, #56]	@ (800367c <m_event_push+0x108>)
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d904      	bls.n	8003654 <m_event_push+0xe0>
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	490c      	ldr	r1, [pc, #48]	@ (8003680 <m_event_push+0x10c>)
 800364e:	480f      	ldr	r0, [pc, #60]	@ (800368c <m_event_push+0x118>)
 8003650:	f7fd f9c2 	bl	80009d8 <Printf>

            osMailFree(EventQ, e);
 8003654:	4b08      	ldr	r3, [pc, #32]	@ (8003678 <m_event_push+0x104>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6979      	ldr	r1, [r7, #20]
 800365a:	4618      	mov	r0, r3
 800365c:	f007 f960 	bl	800a920 <osMailFree>
            break;
 8003660:	bf00      	nop
        }
    } while (0);

    evt_cnt++;
 8003662:	4b0b      	ldr	r3, [pc, #44]	@ (8003690 <m_event_push+0x11c>)
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	3301      	adds	r3, #1
 8003668:	b2da      	uxtb	r2, r3
 800366a:	4b09      	ldr	r3, [pc, #36]	@ (8003690 <m_event_push+0x11c>)
 800366c:	701a      	strb	r2, [r3, #0]
    return err;
 800366e:	693b      	ldr	r3, [r7, #16]
}
 8003670:	4618      	mov	r0, r3
 8003672:	3718      	adds	r7, #24
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	20002d64 	.word	0x20002d64
 800367c:	20002adc 	.word	0x20002adc
 8003680:	0800f930 	.word	0x0800f930
 8003684:	0800efb0 	.word	0x0800efb0
 8003688:	0800efdc 	.word	0x0800efdc
 800368c:	0800f004 	.word	0x0800f004
 8003690:	20002dbc 	.word	0x20002dbc

08003694 <__free_event>:

static void __free_event(event_t* e)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
    if (e==NULL || e->p_event_data == NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00f      	beq.n	80036c2 <__free_event+0x2e>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00b      	beq.n	80036c2 <__free_event+0x2e>
        return;
    vPortFree(e->p_event_data);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f00a f922 	bl	800d8f8 <vPortFree>
    e->p_event_data = NULL;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	611a      	str	r2, [r3, #16]
    e->event_data_size = 0;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	615a      	str	r2, [r3, #20]
 80036c0:	e000      	b.n	80036c4 <__free_event+0x30>
        return;
 80036c2:	bf00      	nop
}
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <m_event_dispatch>:

void m_event_dispatch(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
    static event_t *e;
	event_queue_observer_t *p_config;

    do
    {
        event = osMailGet(EventQ, osWaitForever);
 80036d2:	4b25      	ldr	r3, [pc, #148]	@ (8003768 <m_event_dispatch+0x9c>)
 80036d4:	6819      	ldr	r1, [r3, #0]
 80036d6:	1d3b      	adds	r3, r7, #4
 80036d8:	f04f 32ff 	mov.w	r2, #4294967295
 80036dc:	4618      	mov	r0, r3
 80036de:	f007 f8ab 	bl	800a838 <osMailGet>
        if (event.status == osEventMail){
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b20      	cmp	r3, #32
 80036e6:	d127      	bne.n	8003738 <m_event_dispatch+0x6c>
        	e = event.value.p;
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	4a20      	ldr	r2, [pc, #128]	@ (800376c <m_event_dispatch+0xa0>)
 80036ec:	6013      	str	r3, [r2, #0]

		//LOG_INF("EVT : %s(%d) (%d,%d,%d)\r\n", event_type_2_str(e->event), e->event, e->param1, e->param2, e->param3);
        for(int i = 0; i < evt_handle_cnt; i++){
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
 80036f2:	e01c      	b.n	800372e <m_event_dispatch+0x62>
			//LOG_INF("Call Evt[%d]", i)
        	p_config = &g_Event_Handle[i];
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	4a1d      	ldr	r2, [pc, #116]	@ (8003770 <m_event_dispatch+0xa4>)
 80036fa:	4413      	add	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]
				if(p_config->handler)
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d008      	beq.n	8003718 <m_event_dispatch+0x4c>
					p_config->handler(e, p_config->p_context);
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a18      	ldr	r2, [pc, #96]	@ (800376c <m_event_dispatch+0xa0>)
 800370c:	6810      	ldr	r0, [r2, #0]
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	6852      	ldr	r2, [r2, #4]
 8003712:	4611      	mov	r1, r2
 8003714:	4798      	blx	r3
 8003716:	e007      	b.n	8003728 <m_event_dispatch+0x5c>
				else
					LOG_ERR("Check Handler!!!");
 8003718:	4b16      	ldr	r3, [pc, #88]	@ (8003774 <m_event_dispatch+0xa8>)
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d003      	beq.n	8003728 <m_event_dispatch+0x5c>
 8003720:	4915      	ldr	r1, [pc, #84]	@ (8003778 <m_event_dispatch+0xac>)
 8003722:	4816      	ldr	r0, [pc, #88]	@ (800377c <m_event_dispatch+0xb0>)
 8003724:	f7fd f958 	bl	80009d8 <Printf>
        for(int i = 0; i < evt_handle_cnt; i++){
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	3301      	adds	r3, #1
 800372c:	617b      	str	r3, [r7, #20]
 800372e:	4b14      	ldr	r3, [pc, #80]	@ (8003780 <m_event_dispatch+0xb4>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	429a      	cmp	r2, r3
 8003736:	dbdd      	blt.n	80036f4 <m_event_dispatch+0x28>
			}
        }
        // free memory allocated by event data
        __free_event(e);
 8003738:	4b0c      	ldr	r3, [pc, #48]	@ (800376c <m_event_dispatch+0xa0>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4618      	mov	r0, r3
 800373e:	f7ff ffa9 	bl	8003694 <__free_event>
        osMailFree(EventQ, e);
 8003742:	4b09      	ldr	r3, [pc, #36]	@ (8003768 <m_event_dispatch+0x9c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a09      	ldr	r2, [pc, #36]	@ (800376c <m_event_dispatch+0xa0>)
 8003748:	6812      	ldr	r2, [r2, #0]
 800374a:	4611      	mov	r1, r2
 800374c:	4618      	mov	r0, r3
 800374e:	f007 f8e7 	bl	800a920 <osMailFree>
        evt_cnt--;
 8003752:	4b0c      	ldr	r3, [pc, #48]	@ (8003784 <m_event_dispatch+0xb8>)
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	3b01      	subs	r3, #1
 8003758:	b2da      	uxtb	r2, r3
 800375a:	4b0a      	ldr	r3, [pc, #40]	@ (8003784 <m_event_dispatch+0xb8>)
 800375c:	701a      	strb	r2, [r3, #0]
    } while (0);
}
 800375e:	bf00      	nop
 8003760:	3718      	adds	r7, #24
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	20002d64 	.word	0x20002d64
 800376c:	20002dc0 	.word	0x20002dc0
 8003770:	20002d68 	.word	0x20002d68
 8003774:	20002adc 	.word	0x20002adc
 8003778:	0800f940 	.word	0x0800f940
 800377c:	0800f044 	.word	0x0800f044
 8003780:	20002db8 	.word	0x20002db8
 8003784:	20002dbc 	.word	0x20002dbc

08003788 <m_event_init>:

int m_event_init(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
	osMailQDef(EVENTQ, 20, event_t);
 800378e:	2314      	movs	r3, #20
 8003790:	603b      	str	r3, [r7, #0]
 8003792:	2318      	movs	r3, #24
 8003794:	607b      	str	r3, [r7, #4]
 8003796:	f107 030c 	add.w	r3, r7, #12
 800379a:	60bb      	str	r3, [r7, #8]
	EventQ = osMailCreate(osMailQ(EVENTQ), NULL);
 800379c:	463b      	mov	r3, r7
 800379e:	2100      	movs	r1, #0
 80037a0:	4618      	mov	r0, r3
 80037a2:	f006 ff9d 	bl	800a6e0 <osMailCreate>
 80037a6:	4603      	mov	r3, r0
 80037a8:	4a0a      	ldr	r2, [pc, #40]	@ (80037d4 <m_event_init+0x4c>)
 80037aa:	6013      	str	r3, [r2, #0]
	if(EventQ == NULL){
 80037ac:	4b09      	ldr	r3, [pc, #36]	@ (80037d4 <m_event_init+0x4c>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d109      	bne.n	80037c8 <m_event_init+0x40>
		LOG_ERR("Event Queue Create Error");
 80037b4:	4b08      	ldr	r3, [pc, #32]	@ (80037d8 <m_event_init+0x50>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <m_event_init+0x3c>
 80037bc:	4907      	ldr	r1, [pc, #28]	@ (80037dc <m_event_init+0x54>)
 80037be:	4808      	ldr	r0, [pc, #32]	@ (80037e0 <m_event_init+0x58>)
 80037c0:	f7fd f90a 	bl	80009d8 <Printf>
		return 1;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e000      	b.n	80037ca <m_event_init+0x42>
	}

	return 0;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	20002d64 	.word	0x20002d64
 80037d8:	20002adc 	.word	0x20002adc
 80037dc:	0800f954 	.word	0x0800f954
 80037e0:	0800f060 	.word	0x0800f060

080037e4 <push_event0>:
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af02      	add	r7, sp, #8
 80037ea:	4603      	mov	r3, r0
 80037ec:	71fb      	strb	r3, [r7, #7]
 80037ee:	79f8      	ldrb	r0, [r7, #7]
 80037f0:	2300      	movs	r3, #0
 80037f2:	9301      	str	r3, [sp, #4]
 80037f4:	2300      	movs	r3, #0
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	2300      	movs	r3, #0
 80037fa:	2200      	movs	r2, #0
 80037fc:	2100      	movs	r1, #0
 80037fe:	f7ff feb9 	bl	8003574 <m_event_push>
 8003802:	4603      	mov	r3, r0
 8003804:	4618      	mov	r0, r3
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <push_event1>:
inline static uint32_t push_event1(event_type_t event, uint32_t param1)                     { return m_event_push(event, param1, 0, 0, NULL, 0); }
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af02      	add	r7, sp, #8
 8003812:	4603      	mov	r3, r0
 8003814:	6039      	str	r1, [r7, #0]
 8003816:	71fb      	strb	r3, [r7, #7]
 8003818:	79f8      	ldrb	r0, [r7, #7]
 800381a:	2300      	movs	r3, #0
 800381c:	9301      	str	r3, [sp, #4]
 800381e:	2300      	movs	r3, #0
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	2300      	movs	r3, #0
 8003824:	2200      	movs	r2, #0
 8003826:	6839      	ldr	r1, [r7, #0]
 8003828:	f7ff fea4 	bl	8003574 <m_event_push>
 800382c:	4603      	mov	r3, r0
 800382e:	4618      	mov	r0, r3
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
	...

08003838 <on_measure>:

osSemaphoreId demoSemaHandle;
/* Private function prototypes -----------------------------------------------*/

void on_measure(void const * argument)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
	static int old_status = -1;

	g_Channels = m_dipsw_read_Channel();
 8003840:	f7fe f90a 	bl	8001a58 <m_dipsw_read_Channel>
 8003844:	4603      	mov	r3, r0
 8003846:	4a0e      	ldr	r2, [pc, #56]	@ (8003880 <on_measure+0x48>)
 8003848:	6013      	str	r3, [r2, #0]
	if(old_status != Device.nDeviceCurrentStatus){
 800384a:	4b0e      	ldr	r3, [pc, #56]	@ (8003884 <on_measure+0x4c>)
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	4b0e      	ldr	r3, [pc, #56]	@ (8003888 <on_measure+0x50>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d00f      	beq.n	8003876 <on_measure+0x3e>
		LOG_DBG("Status[%d] Channel[%d]", Device.nDeviceCurrentStatus, g_Channels);
 8003856:	4b0d      	ldr	r3, [pc, #52]	@ (800388c <on_measure+0x54>)
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	2b02      	cmp	r3, #2
 800385c:	d907      	bls.n	800386e <on_measure+0x36>
 800385e:	4b09      	ldr	r3, [pc, #36]	@ (8003884 <on_measure+0x4c>)
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	4b07      	ldr	r3, [pc, #28]	@ (8003880 <on_measure+0x48>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	490a      	ldr	r1, [pc, #40]	@ (8003890 <on_measure+0x58>)
 8003868:	480a      	ldr	r0, [pc, #40]	@ (8003894 <on_measure+0x5c>)
 800386a:	f7fd f8b5 	bl	80009d8 <Printf>
		old_status = Device.nDeviceCurrentStatus;
 800386e:	4b05      	ldr	r3, [pc, #20]	@ (8003884 <on_measure+0x4c>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	4a05      	ldr	r2, [pc, #20]	@ (8003888 <on_measure+0x50>)
 8003874:	6013      	str	r3, [r2, #0]
	}
}
 8003876:	bf00      	nop
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	20002dd8 	.word	0x20002dd8
 8003884:	20002ddc 	.word	0x20002ddc
 8003888:	20000094 	.word	0x20000094
 800388c:	20002adc 	.word	0x20002adc
 8003890:	0800f964 	.word	0x0800f964
 8003894:	0800f084 	.word	0x0800f084

08003898 <onPushTcpData>:

static void onPushTcpData(uint8_t *pData, int size)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
	int i;

	for(i = 0; i < size; i++){
 80038a2:	2300      	movs	r3, #0
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	e00a      	b.n	80038be <onPushTcpData+0x26>
		remote_push_buf(eREMOTE_ETHER, pData[i]);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	4413      	add	r3, r2
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	4619      	mov	r1, r3
 80038b2:	2002      	movs	r0, #2
 80038b4:	f001 f95c 	bl	8004b70 <remote_push_buf>
	for(i = 0; i < size; i++){
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	3301      	adds	r3, #1
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	dbf0      	blt.n	80038a8 <onPushTcpData+0x10>
	}
}
 80038c6:	bf00      	nop
 80038c8:	bf00      	nop
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <onSaveConfg>:

static void onSaveConfg(void)
{
 80038d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
	int err_code;

	//LOG_DBG("Call Save Config");
	err_code = app_config_save();
 80038d6:	f7fc fed7 	bl	8000688 <app_config_save>
 80038da:	6078      	str	r0, [r7, #4]
	if(err_code == 0){
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d12c      	bne.n	800393c <onSaveConfg+0x6c>
		memcpy(&m_app_state.config, &m_app_cfg->cfg, sizeof(fpga_config_t));
 80038e2:	4b23      	ldr	r3, [pc, #140]	@ (8003970 <onSaveConfg+0xa0>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f103 022f 	add.w	r2, r3, #47	@ 0x2f
 80038ea:	4b22      	ldr	r3, [pc, #136]	@ (8003974 <onSaveConfg+0xa4>)
 80038ec:	332f      	adds	r3, #47	@ 0x2f
 80038ee:	4611      	mov	r1, r2
 80038f0:	224b      	movs	r2, #75	@ 0x4b
 80038f2:	4618      	mov	r0, r3
 80038f4:	f00a f9f4 	bl	800dce0 <memcpy>
		memcpy(&m_app_state.model,  &m_app_cfg->model, sizeof(app_config_model_t));
 80038f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003970 <onSaveConfg+0xa0>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	461a      	mov	r2, r3
 80038fe:	4b1d      	ldr	r3, [pc, #116]	@ (8003974 <onSaveConfg+0xa4>)
 8003900:	4618      	mov	r0, r3
 8003902:	f102 0420 	add.w	r4, r2, #32
 8003906:	4603      	mov	r3, r0
 8003908:	4611      	mov	r1, r2
 800390a:	f8d1 c000 	ldr.w	ip, [r1]
 800390e:	684e      	ldr	r6, [r1, #4]
 8003910:	688d      	ldr	r5, [r1, #8]
 8003912:	68c9      	ldr	r1, [r1, #12]
 8003914:	f8c3 c000 	str.w	ip, [r3]
 8003918:	605e      	str	r6, [r3, #4]
 800391a:	609d      	str	r5, [r3, #8]
 800391c:	60d9      	str	r1, [r3, #12]
 800391e:	3210      	adds	r2, #16
 8003920:	3010      	adds	r0, #16
 8003922:	42a2      	cmp	r2, r4
 8003924:	d1ef      	bne.n	8003906 <onSaveConfg+0x36>
 8003926:	4603      	mov	r3, r0
 8003928:	6814      	ldr	r4, [r2, #0]
 800392a:	6850      	ldr	r0, [r2, #4]
 800392c:	6891      	ldr	r1, [r2, #8]
 800392e:	601c      	str	r4, [r3, #0]
 8003930:	6058      	str	r0, [r3, #4]
 8003932:	6099      	str	r1, [r3, #8]
 8003934:	8991      	ldrh	r1, [r2, #12]
 8003936:	7b92      	ldrb	r2, [r2, #14]
 8003938:	8199      	strh	r1, [r3, #12]
 800393a:	739a      	strb	r2, [r3, #14]
	}
	REPORT_IF_ERROR(err_code);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d011      	beq.n	8003966 <onSaveConfg+0x96>
 8003942:	4b0d      	ldr	r3, [pc, #52]	@ (8003978 <onSaveConfg+0xa8>)
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <onSaveConfg+0x82>
 800394a:	490c      	ldr	r1, [pc, #48]	@ (800397c <onSaveConfg+0xac>)
 800394c:	480c      	ldr	r0, [pc, #48]	@ (8003980 <onSaveConfg+0xb0>)
 800394e:	f7fd f843 	bl	80009d8 <Printf>
 8003952:	4b09      	ldr	r3, [pc, #36]	@ (8003978 <onSaveConfg+0xa8>)
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d005      	beq.n	8003966 <onSaveConfg+0x96>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2259      	movs	r2, #89	@ 0x59
 800395e:	4907      	ldr	r1, [pc, #28]	@ (800397c <onSaveConfg+0xac>)
 8003960:	4808      	ldr	r0, [pc, #32]	@ (8003984 <onSaveConfg+0xb4>)
 8003962:	f7fd f839 	bl	80009d8 <Printf>
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800396e:	bf00      	nop
 8003970:	2000007c 	.word	0x2000007c
 8003974:	2000011c 	.word	0x2000011c
 8003978:	20002adc 	.word	0x20002adc
 800397c:	0800f970 	.word	0x0800f970
 8003980:	0800f0a8 	.word	0x0800f0a8
 8003984:	0800f0d4 	.word	0x0800f0d4

08003988 <onStartStrobe>:

static void onStartStrobe(uint8_t Mode)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b088      	sub	sp, #32
 800398c:	af00      	add	r7, sp, #0
 800398e:	4603      	mov	r3, r0
 8003990:	71fb      	strb	r3, [r7, #7]
	uint8_t out_mode = eSTROBE_MODE, option = 0;
 8003992:	2300      	movs	r3, #0
 8003994:	76fb      	strb	r3, [r7, #27]
 8003996:	2300      	movs	r3, #0
 8003998:	76bb      	strb	r3, [r7, #26]
	uint32_t input = 0, output = 0;
 800399a:	2300      	movs	r3, #0
 800399c:	617b      	str	r3, [r7, #20]
 800399e:	2300      	movs	r3, #0
 80039a0:	613b      	str	r3, [r7, #16]
	uint16_t *pDelay, *pOn;
	int i;

	fpga_set_mode(out_mode);
 80039a2:	7efb      	ldrb	r3, [r7, #27]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 fc7f 	bl	80042a8 <fpga_set_mode>
	fpga_select_edge(m_app_state.config.trigger_edge);
 80039aa:	4b25      	ldr	r3, [pc, #148]	@ (8003a40 <onStartStrobe+0xb8>)
 80039ac:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80039b0:	4618      	mov	r0, r3
 80039b2:	f000 fcd7 	bl	8004364 <fpga_select_edge>

	pDelay = m_app_state.config.delay_time;
 80039b6:	4b23      	ldr	r3, [pc, #140]	@ (8003a44 <onStartStrobe+0xbc>)
 80039b8:	60fb      	str	r3, [r7, #12]
	pOn = m_app_state.config.on_time;
 80039ba:	4b23      	ldr	r3, [pc, #140]	@ (8003a48 <onStartStrobe+0xc0>)
 80039bc:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < MAX_CHANNEL; i++){
 80039be:	2300      	movs	r3, #0
 80039c0:	61fb      	str	r3, [r7, #28]
 80039c2:	e016      	b.n	80039f2 <onStartStrobe+0x6a>
		fpga_set_delay_time(i, pDelay[i]);
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	b2d8      	uxtb	r0, r3
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	4413      	add	r3, r2
 80039d0:	881b      	ldrh	r3, [r3, #0]
 80039d2:	4619      	mov	r1, r3
 80039d4:	f000 fce4 	bl	80043a0 <fpga_set_delay_time>
		fpga_set_on_time(i, pOn[i]);
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	b2d8      	uxtb	r0, r3
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	4413      	add	r3, r2
 80039e4:	881b      	ldrh	r3, [r3, #0]
 80039e6:	4619      	mov	r1, r3
 80039e8:	f000 fd1e 	bl	8004428 <fpga_set_on_time>
	for(i = 0; i < MAX_CHANNEL; i++){
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	3301      	adds	r3, #1
 80039f0:	61fb      	str	r3, [r7, #28]
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	2b07      	cmp	r3, #7
 80039f6:	dde5      	ble.n	80039c4 <onStartStrobe+0x3c>
	}
	//LOG_DBG("input[%x] output[%x] mode[%x]", input, output, out_mode);

	fpga_set_input_channel(out_mode, input);
 80039f8:	7efb      	ldrb	r3, [r7, #27]
 80039fa:	6979      	ldr	r1, [r7, #20]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 fbf3 	bl	80041e8 <fpga_set_input_channel>
#if 1	// Mode 진입시 동작 안하게 하는 루틴 Enter mode screen stop  - > run 20241029
	if(Mode != eStrobe_Set){
 8003a02:	79fb      	ldrb	r3, [r7, #7]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d005      	beq.n	8003a14 <onStartStrobe+0x8c>
		fpga_set_output_channel(out_mode, output);
 8003a08:	7efb      	ldrb	r3, [r7, #27]
 8003a0a:	6939      	ldr	r1, [r7, #16]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 fb83 	bl	8004118 <fpga_set_output_channel>
 8003a12:	e004      	b.n	8003a1e <onStartStrobe+0x96>
	}else{
		fpga_set_output_channel(out_mode, 0x00000000);
 8003a14:	7efb      	ldrb	r3, [r7, #27]
 8003a16:	2100      	movs	r1, #0
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f000 fb7d 	bl	8004118 <fpga_set_output_channel>
	}
#else
	fpga_set_output_channel(out_mode, output);
#endif

	fpga_select_output(out_mode, option);
 8003a1e:	7eba      	ldrb	r2, [r7, #26]
 8003a20:	7efb      	ldrb	r3, [r7, #27]
 8003a22:	4611      	mov	r1, r2
 8003a24:	4618      	mov	r0, r3
 8003a26:	f000 fc6d 	bl	8004304 <fpga_select_output>

	if(Mode == eStrobe_Set)
 8003a2a:	79fb      	ldrb	r3, [r7, #7]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d103      	bne.n	8003a38 <onStartStrobe+0xb0>
		push_event1(EVT_fpga_load_done, eREMOTE_NONE);
 8003a30:	2100      	movs	r1, #0
 8003a32:	2019      	movs	r0, #25
 8003a34:	f7ff feea 	bl	800380c <push_event1>
}
 8003a38:	bf00      	nop
 8003a3a:	3720      	adds	r7, #32
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	2000011c 	.word	0x2000011c
 8003a44:	20000156 	.word	0x20000156
 8003a48:	20000166 	.word	0x20000166

08003a4c <onStartSelfTest>:

static void onStartSelfTest(uint8_t isStart)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	4603      	mov	r3, r0
 8003a54:	71fb      	strb	r3, [r7, #7]
	LOG_DBG("%s Self Test", isStart?"Start":"Stop");
 8003a56:	4b27      	ldr	r3, [pc, #156]	@ (8003af4 <onStartSelfTest+0xa8>)
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d90a      	bls.n	8003a74 <onStartSelfTest+0x28>
 8003a5e:	79fb      	ldrb	r3, [r7, #7]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <onStartSelfTest+0x1c>
 8003a64:	4b24      	ldr	r3, [pc, #144]	@ (8003af8 <onStartSelfTest+0xac>)
 8003a66:	e000      	b.n	8003a6a <onStartSelfTest+0x1e>
 8003a68:	4b24      	ldr	r3, [pc, #144]	@ (8003afc <onStartSelfTest+0xb0>)
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	4924      	ldr	r1, [pc, #144]	@ (8003b00 <onStartSelfTest+0xb4>)
 8003a6e:	4825      	ldr	r0, [pc, #148]	@ (8003b04 <onStartSelfTest+0xb8>)
 8003a70:	f7fc ffb2 	bl	80009d8 <Printf>

	m_cfg.demo_status = isStart;
 8003a74:	4a24      	ldr	r2, [pc, #144]	@ (8003b08 <onStartSelfTest+0xbc>)
 8003a76:	79fb      	ldrb	r3, [r7, #7]
 8003a78:	7013      	strb	r3, [r2, #0]
	if(isStart == eDEMOSTART){
 8003a7a:	79fb      	ldrb	r3, [r7, #7]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d12b      	bne.n	8003ad8 <onStartSelfTest+0x8c>
		fpga_select_output(eONE_N, 0x01);
 8003a80:	2101      	movs	r1, #1
 8003a82:	2001      	movs	r0, #1
 8003a84:	f000 fc3e 	bl	8004304 <fpga_select_output>
		fpga_set_output_channel(0, 0x0);
 8003a88:	2100      	movs	r1, #0
 8003a8a:	2000      	movs	r0, #0
 8003a8c:	f000 fb44 	bl	8004118 <fpga_set_output_channel>
		fpga_set_input_channel(0, 0xFFFFFFFF);
 8003a90:	f04f 31ff 	mov.w	r1, #4294967295
 8003a94:	2000      	movs	r0, #0
 8003a96:	f000 fba7 	bl	80041e8 <fpga_set_input_channel>
		for(int i = 0; i < MAX_CHANNEL; i++){
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60fb      	str	r3, [r7, #12]
 8003a9e:	e00f      	b.n	8003ac0 <onStartSelfTest+0x74>
			fpga_set_delay_time(i, 0);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f000 fc7a 	bl	80043a0 <fpga_set_delay_time>
			fpga_set_on_time(i, 2000);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f000 fcb7 	bl	8004428 <fpga_set_on_time>
		for(int i = 0; i < MAX_CHANNEL; i++){
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	3301      	adds	r3, #1
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2b07      	cmp	r3, #7
 8003ac4:	ddec      	ble.n	8003aa0 <onStartSelfTest+0x54>
		}
		osSemaphoreRelease(demoSemaHandle);
 8003ac6:	4b11      	ldr	r3, [pc, #68]	@ (8003b0c <onStartSelfTest+0xc0>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f006 fcd2 	bl	800a474 <osSemaphoreRelease>
			osDelay(100);
		}
		onStartStrobe(1);
		push_event0(Evt_stop_demotest);
	}
}
 8003ad0:	e00c      	b.n	8003aec <onStartSelfTest+0xa0>
			osDelay(100);
 8003ad2:	2064      	movs	r0, #100	@ 0x64
 8003ad4:	f006 fb25 	bl	800a122 <osDelay>
		while(m_cfg.demo_testdone == 0){
 8003ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8003b08 <onStartSelfTest+0xbc>)
 8003ada:	785b      	ldrb	r3, [r3, #1]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d0f8      	beq.n	8003ad2 <onStartSelfTest+0x86>
		onStartStrobe(1);
 8003ae0:	2001      	movs	r0, #1
 8003ae2:	f7ff ff51 	bl	8003988 <onStartStrobe>
		push_event0(Evt_stop_demotest);
 8003ae6:	2017      	movs	r0, #23
 8003ae8:	f7ff fe7c 	bl	80037e4 <push_event0>
}
 8003aec:	bf00      	nop
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	20002adc 	.word	0x20002adc
 8003af8:	0800f10c 	.word	0x0800f10c
 8003afc:	0800f114 	.word	0x0800f114
 8003b00:	0800f97c 	.word	0x0800f97c
 8003b04:	0800f11c 	.word	0x0800f11c
 8003b08:	20002dc4 	.word	0x20002dc4
 8003b0c:	20003068 	.word	0x20003068

08003b10 <onSetDeviceID>:

static void onSetDeviceID(uint8_t devID)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	4603      	mov	r3, r0
 8003b18:	71fb      	strb	r3, [r7, #7]
	Device.nDeviceNo = devID;
 8003b1a:	79fb      	ldrb	r3, [r7, #7]
 8003b1c:	4a03      	ldr	r2, [pc, #12]	@ (8003b2c <onSetDeviceID+0x1c>)
 8003b1e:	6013      	str	r3, [r2, #0]
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr
 8003b2c:	20002ddc 	.word	0x20002ddc

08003b30 <check_test_done>:

static uint8_t check_test_done(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
	int k;

	for(k = 0; k < 100; k++){
 8003b36:	2300      	movs	r3, #0
 8003b38:	607b      	str	r3, [r7, #4]
 8003b3a:	e009      	b.n	8003b50 <check_test_done+0x20>
		if(m_cfg.demo_status == eDEMOSTART){
 8003b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b70 <check_test_done+0x40>)
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d109      	bne.n	8003b58 <check_test_done+0x28>
			osDelay(10);
 8003b44:	200a      	movs	r0, #10
 8003b46:	f006 faec 	bl	800a122 <osDelay>
	for(k = 0; k < 100; k++){
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	607b      	str	r3, [r7, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b63      	cmp	r3, #99	@ 0x63
 8003b54:	ddf2      	ble.n	8003b3c <check_test_done+0xc>
 8003b56:	e000      	b.n	8003b5a <check_test_done+0x2a>
		}else{
			break;
 8003b58:	bf00      	nop
		}
	}
	return k >= 100 ? 0:1;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b63      	cmp	r3, #99	@ 0x63
 8003b5e:	bfd4      	ite	le
 8003b60:	2301      	movle	r3, #1
 8003b62:	2300      	movgt	r3, #0
 8003b64:	b2db      	uxtb	r3, r3
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	20002dc4 	.word	0x20002dc4

08003b74 <demo1st>:

static void demo1st(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
	LOG_DBG("Demo 1ST Start");
 8003b7a:	4b16      	ldr	r3, [pc, #88]	@ (8003bd4 <demo1st+0x60>)
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d903      	bls.n	8003b8a <demo1st+0x16>
 8003b82:	4915      	ldr	r1, [pc, #84]	@ (8003bd8 <demo1st+0x64>)
 8003b84:	4815      	ldr	r0, [pc, #84]	@ (8003bdc <demo1st+0x68>)
 8003b86:	f7fc ff27 	bl	80009d8 <Printf>
	do{
		for(int j = 0; j < MAX_CHANNEL; j++){
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	607b      	str	r3, [r7, #4]
 8003b8e:	e00f      	b.n	8003bb0 <demo1st+0x3c>
			fpga_set_output_channel(0, 1<<j);  // on
 8003b90:	2201      	movs	r2, #1
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	4619      	mov	r1, r3
 8003b9a:	2000      	movs	r0, #0
 8003b9c:	f000 fabc 	bl	8004118 <fpga_set_output_channel>
			if(check_test_done()){
 8003ba0:	f7ff ffc6 	bl	8003b30 <check_test_done>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d106      	bne.n	8003bb8 <demo1st+0x44>
		for(int j = 0; j < MAX_CHANNEL; j++){
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	3301      	adds	r3, #1
 8003bae:	607b      	str	r3, [r7, #4]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b07      	cmp	r3, #7
 8003bb4:	ddec      	ble.n	8003b90 <demo1st+0x1c>
 8003bb6:	e000      	b.n	8003bba <demo1st+0x46>
				break;
 8003bb8:	bf00      	nop
			}
		}
	}while(0);
	LOG_DBG("Demo 1ST End");
 8003bba:	4b06      	ldr	r3, [pc, #24]	@ (8003bd4 <demo1st+0x60>)
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d903      	bls.n	8003bca <demo1st+0x56>
 8003bc2:	4905      	ldr	r1, [pc, #20]	@ (8003bd8 <demo1st+0x64>)
 8003bc4:	4806      	ldr	r0, [pc, #24]	@ (8003be0 <demo1st+0x6c>)
 8003bc6:	f7fc ff07 	bl	80009d8 <Printf>
}
 8003bca:	bf00      	nop
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	20002adc 	.word	0x20002adc
 8003bd8:	0800f98c 	.word	0x0800f98c
 8003bdc:	0800f134 	.word	0x0800f134
 8003be0:	0800f150 	.word	0x0800f150

08003be4 <demo2nd>:

static void demo2nd(uint8_t step, uint32_t out_channel)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	4603      	mov	r3, r0
 8003bec:	6039      	str	r1, [r7, #0]
 8003bee:	71fb      	strb	r3, [r7, #7]
	uint8_t shift_val;

	LOG_DBG("Demo 2nd Step [%d] Start", step);
 8003bf0:	4b27      	ldr	r3, [pc, #156]	@ (8003c90 <demo2nd+0xac>)
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d905      	bls.n	8003c04 <demo2nd+0x20>
 8003bf8:	79fb      	ldrb	r3, [r7, #7]
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	4925      	ldr	r1, [pc, #148]	@ (8003c94 <demo2nd+0xb0>)
 8003bfe:	4826      	ldr	r0, [pc, #152]	@ (8003c98 <demo2nd+0xb4>)
 8003c00:	f7fc feea 	bl	80009d8 <Printf>
	if((step>=1) && (step<=4)){
 8003c04:	79fb      	ldrb	r3, [r7, #7]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d008      	beq.n	8003c1c <demo2nd+0x38>
 8003c0a:	79fb      	ldrb	r3, [r7, #7]
 8003c0c:	2b04      	cmp	r3, #4
 8003c0e:	d805      	bhi.n	8003c1c <demo2nd+0x38>
		shift_val = (step-1) * 8;
 8003c10:	79fb      	ldrb	r3, [r7, #7]
 8003c12:	3b01      	subs	r3, #1
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	73fb      	strb	r3, [r7, #15]
 8003c1a:	e00a      	b.n	8003c32 <demo2nd+0x4e>
	}else if(step == 5 || step == 6){
 8003c1c:	79fb      	ldrb	r3, [r7, #7]
 8003c1e:	2b05      	cmp	r3, #5
 8003c20:	d002      	beq.n	8003c28 <demo2nd+0x44>
 8003c22:	79fb      	ldrb	r3, [r7, #7]
 8003c24:	2b06      	cmp	r3, #6
 8003c26:	d104      	bne.n	8003c32 <demo2nd+0x4e>
		shift_val = (step-5) * 16;
 8003c28:	79fb      	ldrb	r3, [r7, #7]
 8003c2a:	3b05      	subs	r3, #5
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	011b      	lsls	r3, r3, #4
 8003c30:	73fb      	strb	r3, [r7, #15]
	}
	LOG_DBG("Set 8 Channel [%x]", out_channel);
 8003c32:	4b17      	ldr	r3, [pc, #92]	@ (8003c90 <demo2nd+0xac>)
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d904      	bls.n	8003c44 <demo2nd+0x60>
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	4915      	ldr	r1, [pc, #84]	@ (8003c94 <demo2nd+0xb0>)
 8003c3e:	4817      	ldr	r0, [pc, #92]	@ (8003c9c <demo2nd+0xb8>)
 8003c40:	f7fc feca 	bl	80009d8 <Printf>
	out_channel <<= shift_val;
 8003c44:	7bfb      	ldrb	r3, [r7, #15]
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	603b      	str	r3, [r7, #0]
	fpga_set_output_channel(0, out_channel);  // on
 8003c4e:	6839      	ldr	r1, [r7, #0]
 8003c50:	2000      	movs	r0, #0
 8003c52:	f000 fa61 	bl	8004118 <fpga_set_output_channel>
	for(int i = 0; i< 3; i++){
 8003c56:	2300      	movs	r3, #0
 8003c58:	60bb      	str	r3, [r7, #8]
 8003c5a:	e007      	b.n	8003c6c <demo2nd+0x88>
		if(check_test_done()){
 8003c5c:	f7ff ff68 	bl	8003b30 <check_test_done>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d106      	bne.n	8003c74 <demo2nd+0x90>
	for(int i = 0; i< 3; i++){
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	60bb      	str	r3, [r7, #8]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	ddf4      	ble.n	8003c5c <demo2nd+0x78>
 8003c72:	e000      	b.n	8003c76 <demo2nd+0x92>
			break;
 8003c74:	bf00      	nop
		}
	}
	LOG_DBG("Demo 2nd End");
 8003c76:	4b06      	ldr	r3, [pc, #24]	@ (8003c90 <demo2nd+0xac>)
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d903      	bls.n	8003c86 <demo2nd+0xa2>
 8003c7e:	4905      	ldr	r1, [pc, #20]	@ (8003c94 <demo2nd+0xb0>)
 8003c80:	4807      	ldr	r0, [pc, #28]	@ (8003ca0 <demo2nd+0xbc>)
 8003c82:	f7fc fea9 	bl	80009d8 <Printf>
}
 8003c86:	bf00      	nop
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	20002adc 	.word	0x20002adc
 8003c94:	0800f994 	.word	0x0800f994
 8003c98:	0800f168 	.word	0x0800f168
 8003c9c:	0800f18c 	.word	0x0800f18c
 8003ca0:	0800f1ac 	.word	0x0800f1ac

08003ca4 <demo3rd>:

static void demo3rd(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
	fpga_set_output_channel(0, 0xFFFFFFFF);  // on
 8003caa:	f04f 31ff 	mov.w	r1, #4294967295
 8003cae:	2000      	movs	r0, #0
 8003cb0:	f000 fa32 	bl	8004118 <fpga_set_output_channel>
	for(int i = 0; i < 3; i++){
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	607b      	str	r3, [r7, #4]
 8003cb8:	e007      	b.n	8003cca <demo3rd+0x26>
		if(check_test_done()){
 8003cba:	f7ff ff39 	bl	8003b30 <check_test_done>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d106      	bne.n	8003cd2 <demo3rd+0x2e>
	for(int i = 0; i < 3; i++){
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	607b      	str	r3, [r7, #4]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	ddf4      	ble.n	8003cba <demo3rd+0x16>
			break;
		}
	}
}
 8003cd0:	e000      	b.n	8003cd4 <demo3rd+0x30>
			break;
 8003cd2:	bf00      	nop
}
 8003cd4:	bf00      	nop
 8003cd6:	3708      	adds	r7, #8
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <runDemoTest>:

static void runDemoTest(uint8_t step)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	71fb      	strb	r3, [r7, #7]
	switch(step){
 8003ce6:	79fb      	ldrb	r3, [r7, #7]
 8003ce8:	2b07      	cmp	r3, #7
 8003cea:	d826      	bhi.n	8003d3a <runDemoTest+0x5e>
 8003cec:	a201      	add	r2, pc, #4	@ (adr r2, 8003cf4 <runDemoTest+0x18>)
 8003cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf2:	bf00      	nop
 8003cf4:	08003d15 	.word	0x08003d15
 8003cf8:	08003d1b 	.word	0x08003d1b
 8003cfc:	08003d1b 	.word	0x08003d1b
 8003d00:	08003d1b 	.word	0x08003d1b
 8003d04:	08003d1b 	.word	0x08003d1b
 8003d08:	08003d27 	.word	0x08003d27
 8003d0c:	08003d27 	.word	0x08003d27
 8003d10:	08003d35 	.word	0x08003d35
		case 0:
			demo1st();
 8003d14:	f7ff ff2e 	bl	8003b74 <demo1st>
			break;
 8003d18:	e010      	b.n	8003d3c <runDemoTest+0x60>
		case 1:
		case 2:
		case 3:
		case 4:
			demo2nd(step, 0x000000FF);
 8003d1a:	79fb      	ldrb	r3, [r7, #7]
 8003d1c:	21ff      	movs	r1, #255	@ 0xff
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7ff ff60 	bl	8003be4 <demo2nd>
			break;
 8003d24:	e00a      	b.n	8003d3c <runDemoTest+0x60>
		case 5:
		case 6:
			demo2nd(step, 0x0000FFFF);
 8003d26:	79fb      	ldrb	r3, [r7, #7]
 8003d28:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7ff ff59 	bl	8003be4 <demo2nd>
			break;
 8003d32:	e003      	b.n	8003d3c <runDemoTest+0x60>
		case 7:
			demo3rd();
 8003d34:	f7ff ffb6 	bl	8003ca4 <demo3rd>
			break;
 8003d38:	e000      	b.n	8003d3c <runDemoTest+0x60>
		default:
			break;
 8003d3a:	bf00      	nop
	}
}
 8003d3c:	bf00      	nop
 8003d3e:	3708      	adds	r7, #8
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <DemoProcTask>:

static void DemoProcTask(void const * argument)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
	uint8_t TestStep = 0;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	73fb      	strb	r3, [r7, #15]

	LOG_DBG("Start Demo Processor");
 8003d50:	4b21      	ldr	r3, [pc, #132]	@ (8003dd8 <DemoProcTask+0x94>)
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d903      	bls.n	8003d60 <DemoProcTask+0x1c>
 8003d58:	4920      	ldr	r1, [pc, #128]	@ (8003ddc <DemoProcTask+0x98>)
 8003d5a:	4821      	ldr	r0, [pc, #132]	@ (8003de0 <DemoProcTask+0x9c>)
 8003d5c:	f7fc fe3c 	bl	80009d8 <Printf>
	while(1){
		if(osSemaphoreWait(demoSemaHandle, osWaitForever) == osOK){
 8003d60:	4b20      	ldr	r3, [pc, #128]	@ (8003de4 <DemoProcTask+0xa0>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f04f 31ff 	mov.w	r1, #4294967295
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f006 fb35 	bl	800a3d8 <osSemaphoreWait>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d12d      	bne.n	8003dd0 <DemoProcTask+0x8c>
			LOG_DBG("Start Demo Test!!!")
 8003d74:	4b18      	ldr	r3, [pc, #96]	@ (8003dd8 <DemoProcTask+0x94>)
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d923      	bls.n	8003dc4 <DemoProcTask+0x80>
 8003d7c:	4917      	ldr	r1, [pc, #92]	@ (8003ddc <DemoProcTask+0x98>)
 8003d7e:	481a      	ldr	r0, [pc, #104]	@ (8003de8 <DemoProcTask+0xa4>)
 8003d80:	f7fc fe2a 	bl	80009d8 <Printf>
			while(m_cfg.demo_status == eDEMOSTART){
 8003d84:	e01e      	b.n	8003dc4 <DemoProcTask+0x80>
				LOG_DBG("Demo Step[%d]", TestStep);
 8003d86:	4b14      	ldr	r3, [pc, #80]	@ (8003dd8 <DemoProcTask+0x94>)
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d905      	bls.n	8003d9a <DemoProcTask+0x56>
 8003d8e:	7bfb      	ldrb	r3, [r7, #15]
 8003d90:	461a      	mov	r2, r3
 8003d92:	4912      	ldr	r1, [pc, #72]	@ (8003ddc <DemoProcTask+0x98>)
 8003d94:	4815      	ldr	r0, [pc, #84]	@ (8003dec <DemoProcTask+0xa8>)
 8003d96:	f7fc fe1f 	bl	80009d8 <Printf>
				m_cfg.demo_testdone = 0;
 8003d9a:	4b15      	ldr	r3, [pc, #84]	@ (8003df0 <DemoProcTask+0xac>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	705a      	strb	r2, [r3, #1]
				runDemoTest(TestStep);
 8003da0:	7bfb      	ldrb	r3, [r7, #15]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7ff ff9a 	bl	8003cdc <runDemoTest>
				m_cfg.demo_testdone = 1;
 8003da8:	4b11      	ldr	r3, [pc, #68]	@ (8003df0 <DemoProcTask+0xac>)
 8003daa:	2201      	movs	r2, #1
 8003dac:	705a      	strb	r2, [r3, #1]
				if(++TestStep > 7){
 8003dae:	7bfb      	ldrb	r3, [r7, #15]
 8003db0:	3301      	adds	r3, #1
 8003db2:	73fb      	strb	r3, [r7, #15]
 8003db4:	7bfb      	ldrb	r3, [r7, #15]
 8003db6:	2b07      	cmp	r3, #7
 8003db8:	d901      	bls.n	8003dbe <DemoProcTask+0x7a>
					TestStep = 0;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	73fb      	strb	r3, [r7, #15]
				}
				osDelay(100);
 8003dbe:	2064      	movs	r0, #100	@ 0x64
 8003dc0:	f006 f9af 	bl	800a122 <osDelay>
			while(m_cfg.demo_status == eDEMOSTART){
 8003dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8003df0 <DemoProcTask+0xac>)
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d0dc      	beq.n	8003d86 <DemoProcTask+0x42>
			}
			TestStep = 0;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	73fb      	strb	r3, [r7, #15]
		}
		osDelay(100);
 8003dd0:	2064      	movs	r0, #100	@ 0x64
 8003dd2:	f006 f9a6 	bl	800a122 <osDelay>
		if(osSemaphoreWait(demoSemaHandle, osWaitForever) == osOK){
 8003dd6:	e7c3      	b.n	8003d60 <DemoProcTask+0x1c>
 8003dd8:	20002adc 	.word	0x20002adc
 8003ddc:	0800f99c 	.word	0x0800f99c
 8003de0:	0800f1c4 	.word	0x0800f1c4
 8003de4:	20003068 	.word	0x20003068
 8003de8:	0800f1e4 	.word	0x0800f1e4
 8003dec:	0800f204 	.word	0x0800f204
 8003df0:	20002dc4 	.word	0x20002dc4

08003df4 <evt_handler>:
	}
}

static void evt_handler(event_t const* evt, void* p_context)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
	switch (evt->event)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	3b01      	subs	r3, #1
 8003e04:	2b1e      	cmp	r3, #30
 8003e06:	d86a      	bhi.n	8003ede <evt_handler+0xea>
 8003e08:	a201      	add	r2, pc, #4	@ (adr r2, 8003e10 <evt_handler+0x1c>)
 8003e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0e:	bf00      	nop
 8003e10:	08003e8d 	.word	0x08003e8d
 8003e14:	08003edf 	.word	0x08003edf
 8003e18:	08003edf 	.word	0x08003edf
 8003e1c:	08003edf 	.word	0x08003edf
 8003e20:	08003edf 	.word	0x08003edf
 8003e24:	08003e9b 	.word	0x08003e9b
 8003e28:	08003eb3 	.word	0x08003eb3
 8003e2c:	08003edf 	.word	0x08003edf
 8003e30:	08003edf 	.word	0x08003edf
 8003e34:	08003ead 	.word	0x08003ead
 8003e38:	08003edf 	.word	0x08003edf
 8003e3c:	08003edf 	.word	0x08003edf
 8003e40:	08003edf 	.word	0x08003edf
 8003e44:	08003edf 	.word	0x08003edf
 8003e48:	08003edf 	.word	0x08003edf
 8003e4c:	08003edf 	.word	0x08003edf
 8003e50:	08003edf 	.word	0x08003edf
 8003e54:	08003edf 	.word	0x08003edf
 8003e58:	08003edf 	.word	0x08003edf
 8003e5c:	08003edf 	.word	0x08003edf
 8003e60:	08003ec1 	.word	0x08003ec1
 8003e64:	08003ec9 	.word	0x08003ec9
 8003e68:	08003edf 	.word	0x08003edf
 8003e6c:	08003edf 	.word	0x08003edf
 8003e70:	08003edf 	.word	0x08003edf
 8003e74:	08003edf 	.word	0x08003edf
 8003e78:	08003edf 	.word	0x08003edf
 8003e7c:	08003edf 	.word	0x08003edf
 8003e80:	08003edf 	.word	0x08003edf
 8003e84:	08003edf 	.word	0x08003edf
 8003e88:	08003ed1 	.word	0x08003ed1
	{
		case EVT_menu_start:
			osTimerStart(measureTimerHandle,200); // 200msec
 8003e8c:	4b16      	ldr	r3, [pc, #88]	@ (8003ee8 <evt_handler+0xf4>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	21c8      	movs	r1, #200	@ 0xc8
 8003e92:	4618      	mov	r0, r3
 8003e94:	f006 f98e 	bl	800a1b4 <osTimerStart>
			break;
 8003e98:	e022      	b.n	8003ee0 <evt_handler+0xec>
		case EVT_received_tcp:
			onPushTcpData(evt->p_event_data, evt->event_data_size);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691a      	ldr	r2, [r3, #16]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	4610      	mov	r0, r2
 8003ea6:	f7ff fcf7 	bl	8003898 <onPushTcpData>
			break;
 8003eaa:	e019      	b.n	8003ee0 <evt_handler+0xec>
		case EVT_save_config:
			onSaveConfg();
 8003eac:	f7ff fd10 	bl	80038d0 <onSaveConfg>
			break;
 8003eb0:	e016      	b.n	8003ee0 <evt_handler+0xec>
		case EVT_cancel_config:
			// todo : roll back config & setting..
			break;
		case EVT_start_strobe:
			onStartStrobe(evt->param1);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7ff fd65 	bl	8003988 <onStartStrobe>
			break;
 8003ebe:	e00f      	b.n	8003ee0 <evt_handler+0xec>
		case EVT_self_test:
			onStartSelfTest(eDEMOSTART);
 8003ec0:	2001      	movs	r0, #1
 8003ec2:	f7ff fdc3 	bl	8003a4c <onStartSelfTest>
			break;
 8003ec6:	e00b      	b.n	8003ee0 <evt_handler+0xec>
		case EVT_stop_self_test:
			onStartSelfTest(eDEMOSTOP);
 8003ec8:	2000      	movs	r0, #0
 8003eca:	f7ff fdbf 	bl	8003a4c <onStartSelfTest>
			break;
 8003ece:	e007      	b.n	8003ee0 <evt_handler+0xec>
		case EVT_Set_DevID:
			onSetDeviceID(evt->param1);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7ff fe1a 	bl	8003b10 <onSetDeviceID>
			break;
 8003edc:	e000      	b.n	8003ee0 <evt_handler+0xec>
		default:
			break;
 8003ede:	bf00      	nop
	}
}
 8003ee0:	bf00      	nop
 8003ee2:	3708      	adds	r7, #8
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	20002dc8 	.word	0x20002dc8

08003eec <m_menu_normal_init>:

int m_menu_normal_init(void)
{
 8003eec:	b5b0      	push	{r4, r5, r7, lr}
 8003eee:	b08c      	sub	sp, #48	@ 0x30
 8003ef0:	af00      	add	r7, sp, #0
	LOG_INF("Menu Init");
 8003ef2:	4b4a      	ldr	r3, [pc, #296]	@ (800401c <m_menu_normal_init+0x130>)
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	2b03      	cmp	r3, #3
 8003ef8:	d903      	bls.n	8003f02 <m_menu_normal_init+0x16>
 8003efa:	4949      	ldr	r1, [pc, #292]	@ (8004020 <m_menu_normal_init+0x134>)
 8003efc:	4849      	ldr	r0, [pc, #292]	@ (8004024 <m_menu_normal_init+0x138>)
 8003efe:	f7fc fd6b 	bl	80009d8 <Printf>

	osSemaphoreDef(demoSema);
 8003f02:	2300      	movs	r3, #0
 8003f04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f06:	2300      	movs	r3, #0
 8003f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
	demoSemaHandle = osSemaphoreCreate(osSemaphore(demoSema), 1);
 8003f0a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003f0e:	2101      	movs	r1, #1
 8003f10:	4618      	mov	r0, r3
 8003f12:	f006 fa2f 	bl	800a374 <osSemaphoreCreate>
 8003f16:	4603      	mov	r3, r0
 8003f18:	4a43      	ldr	r2, [pc, #268]	@ (8004028 <m_menu_normal_init+0x13c>)
 8003f1a:	6013      	str	r3, [r2, #0]

	osTimerDef(measure_timer, on_measure);
 8003f1c:	4b43      	ldr	r3, [pc, #268]	@ (800402c <m_menu_normal_init+0x140>)
 8003f1e:	623b      	str	r3, [r7, #32]
 8003f20:	2300      	movs	r3, #0
 8003f22:	627b      	str	r3, [r7, #36]	@ 0x24
	measureTimerHandle = osTimerCreate(osTimer(measure_timer), osTimerPeriodic, NULL);
 8003f24:	f107 0320 	add.w	r3, r7, #32
 8003f28:	2200      	movs	r2, #0
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f006 f90d 	bl	800a14c <osTimerCreate>
 8003f32:	4603      	mov	r3, r0
 8003f34:	4a3e      	ldr	r2, [pc, #248]	@ (8004030 <m_menu_normal_init+0x144>)
 8003f36:	6013      	str	r3, [r2, #0]
	if(measureTimerHandle==NULL){
 8003f38:	4b3d      	ldr	r3, [pc, #244]	@ (8004030 <m_menu_normal_init+0x144>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d109      	bne.n	8003f54 <m_menu_normal_init+0x68>
		LOG_ERR("measureTimer Create Error!!");
 8003f40:	4b36      	ldr	r3, [pc, #216]	@ (800401c <m_menu_normal_init+0x130>)
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d003      	beq.n	8003f50 <m_menu_normal_init+0x64>
 8003f48:	4935      	ldr	r1, [pc, #212]	@ (8004020 <m_menu_normal_init+0x134>)
 8003f4a:	483a      	ldr	r0, [pc, #232]	@ (8004034 <m_menu_normal_init+0x148>)
 8003f4c:	f7fc fd44 	bl	80009d8 <Printf>
		return 1;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e05e      	b.n	8004012 <m_menu_normal_init+0x126>
	}

	LOG_DBG("Semaphore Handle[%d]", demoSemaHandle);
 8003f54:	4b31      	ldr	r3, [pc, #196]	@ (800401c <m_menu_normal_init+0x130>)
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d906      	bls.n	8003f6a <m_menu_normal_init+0x7e>
 8003f5c:	4b32      	ldr	r3, [pc, #200]	@ (8004028 <m_menu_normal_init+0x13c>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	461a      	mov	r2, r3
 8003f62:	492f      	ldr	r1, [pc, #188]	@ (8004020 <m_menu_normal_init+0x134>)
 8003f64:	4834      	ldr	r0, [pc, #208]	@ (8004038 <m_menu_normal_init+0x14c>)
 8003f66:	f7fc fd37 	bl	80009d8 <Printf>
	if(demoSemaHandle != NULL){
 8003f6a:	4b2f      	ldr	r3, [pc, #188]	@ (8004028 <m_menu_normal_init+0x13c>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d019      	beq.n	8003fa6 <m_menu_normal_init+0xba>
		if(osSemaphoreWait(demoSemaHandle, 0) == osOK){
 8003f72:	4b2d      	ldr	r3, [pc, #180]	@ (8004028 <m_menu_normal_init+0x13c>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2100      	movs	r1, #0
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f006 fa2d 	bl	800a3d8 <osSemaphoreWait>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d108      	bne.n	8003f96 <m_menu_normal_init+0xaa>
			LOG_DBG("Skip sema count!!");
 8003f84:	4b25      	ldr	r3, [pc, #148]	@ (800401c <m_menu_normal_init+0x130>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d90c      	bls.n	8003fa6 <m_menu_normal_init+0xba>
 8003f8c:	4924      	ldr	r1, [pc, #144]	@ (8004020 <m_menu_normal_init+0x134>)
 8003f8e:	482b      	ldr	r0, [pc, #172]	@ (800403c <m_menu_normal_init+0x150>)
 8003f90:	f7fc fd22 	bl	80009d8 <Printf>
 8003f94:	e007      	b.n	8003fa6 <m_menu_normal_init+0xba>
		}else{
			LOG_DBG("Sema count 0!!!");
 8003f96:	4b21      	ldr	r3, [pc, #132]	@ (800401c <m_menu_normal_init+0x130>)
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d903      	bls.n	8003fa6 <m_menu_normal_init+0xba>
 8003f9e:	4920      	ldr	r1, [pc, #128]	@ (8004020 <m_menu_normal_init+0x134>)
 8003fa0:	4827      	ldr	r0, [pc, #156]	@ (8004040 <m_menu_normal_init+0x154>)
 8003fa2:	f7fc fd19 	bl	80009d8 <Printf>
		}
	}

	osThreadDef(demoProc, DemoProcTask, osPriorityNormal, 0, 512);
 8003fa6:	4b27      	ldr	r3, [pc, #156]	@ (8004044 <m_menu_normal_init+0x158>)
 8003fa8:	1d3c      	adds	r4, r7, #4
 8003faa:	461d      	mov	r5, r3
 8003fac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003fae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003fb0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003fb4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	DemoTestTaskHandle = osThreadCreate(osThread(demoProc), NULL);
 8003fb8:	1d3b      	adds	r3, r7, #4
 8003fba:	2100      	movs	r1, #0
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f006 f864 	bl	800a08a <osThreadCreate>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	4a20      	ldr	r2, [pc, #128]	@ (8004048 <m_menu_normal_init+0x15c>)
 8003fc6:	6013      	str	r3, [r2, #0]
	if(DemoTestTaskHandle == NULL){
 8003fc8:	4b1f      	ldr	r3, [pc, #124]	@ (8004048 <m_menu_normal_init+0x15c>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d109      	bne.n	8003fe4 <m_menu_normal_init+0xf8>
		LOG_ERR("Demo Task create error!!");
 8003fd0:	4b12      	ldr	r3, [pc, #72]	@ (800401c <m_menu_normal_init+0x130>)
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d003      	beq.n	8003fe0 <m_menu_normal_init+0xf4>
 8003fd8:	4911      	ldr	r1, [pc, #68]	@ (8004020 <m_menu_normal_init+0x134>)
 8003fda:	481c      	ldr	r0, [pc, #112]	@ (800404c <m_menu_normal_init+0x160>)
 8003fdc:	f7fc fcfc 	bl	80009d8 <Printf>
		return 1;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e016      	b.n	8004012 <m_menu_normal_init+0x126>
	}

	menu_event.handler = evt_handler;
 8003fe4:	4b1a      	ldr	r3, [pc, #104]	@ (8004050 <m_menu_normal_init+0x164>)
 8003fe6:	4a1b      	ldr	r2, [pc, #108]	@ (8004054 <m_menu_normal_init+0x168>)
 8003fe8:	601a      	str	r2, [r3, #0]
	menu_event.p_context = NULL;
 8003fea:	4b19      	ldr	r3, [pc, #100]	@ (8004050 <m_menu_normal_init+0x164>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	605a      	str	r2, [r3, #4]
	if(m_event_register(&menu_event)){
 8003ff0:	4817      	ldr	r0, [pc, #92]	@ (8004050 <m_menu_normal_init+0x164>)
 8003ff2:	f7ff fa95 	bl	8003520 <m_event_register>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d009      	beq.n	8004010 <m_menu_normal_init+0x124>
		LOG_ERR("menu event registered error!!");
 8003ffc:	4b07      	ldr	r3, [pc, #28]	@ (800401c <m_menu_normal_init+0x130>)
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d003      	beq.n	800400c <m_menu_normal_init+0x120>
 8004004:	4906      	ldr	r1, [pc, #24]	@ (8004020 <m_menu_normal_init+0x134>)
 8004006:	4814      	ldr	r0, [pc, #80]	@ (8004058 <m_menu_normal_init+0x16c>)
 8004008:	f7fc fce6 	bl	80009d8 <Printf>
		return 1;
 800400c:	2301      	movs	r3, #1
 800400e:	e000      	b.n	8004012 <m_menu_normal_init+0x126>
	}

	return 0;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3730      	adds	r7, #48	@ 0x30
 8004016:	46bd      	mov	sp, r7
 8004018:	bdb0      	pop	{r4, r5, r7, pc}
 800401a:	bf00      	nop
 800401c:	20002adc 	.word	0x20002adc
 8004020:	0800f9ac 	.word	0x0800f9ac
 8004024:	0800f220 	.word	0x0800f220
 8004028:	20003068 	.word	0x20003068
 800402c:	08003839 	.word	0x08003839
 8004030:	20002dc8 	.word	0x20002dc8
 8004034:	0800f238 	.word	0x0800f238
 8004038:	0800f260 	.word	0x0800f260
 800403c:	0800f280 	.word	0x0800f280
 8004040:	0800f2a0 	.word	0x0800f2a0
 8004044:	0800f318 	.word	0x0800f318
 8004048:	20002dd4 	.word	0x20002dd4
 800404c:	0800f2bc 	.word	0x0800f2bc
 8004050:	20002dcc 	.word	0x20002dcc
 8004054:	08003df5 	.word	0x08003df5
 8004058:	0800f2e0 	.word	0x0800f2e0

0800405c <fpga_push_buf>:
};

event_queue_observer_t fpga_event;
/* Private function prototypes -----------------------------------------------*/
void fpga_push_buf(uint8_t ch)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	4603      	mov	r3, r0
 8004064:	71fb      	strb	r3, [r7, #7]
	int index = (front + 1) % MAX_FPGA_BUF;
 8004066:	4b12      	ldr	r3, [pc, #72]	@ (80040b0 <fpga_push_buf+0x54>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	3301      	adds	r3, #1
 800406c:	425a      	negs	r2, r3
 800406e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004072:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8004076:	bf58      	it	pl
 8004078:	4253      	negpl	r3, r2
 800407a:	60fb      	str	r3, [r7, #12]

	if(m_cfg.run_trigger == 0) return ;
 800407c:	4b0d      	ldr	r3, [pc, #52]	@ (80040b4 <fpga_push_buf+0x58>)
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00d      	beq.n	80040a0 <fpga_push_buf+0x44>

	if(index == rear) return ;
 8004084:	4b0c      	ldr	r3, [pc, #48]	@ (80040b8 <fpga_push_buf+0x5c>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	429a      	cmp	r2, r3
 800408c:	d00a      	beq.n	80040a4 <fpga_push_buf+0x48>

	front = index;
 800408e:	4a08      	ldr	r2, [pc, #32]	@ (80040b0 <fpga_push_buf+0x54>)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6013      	str	r3, [r2, #0]
	recv_buf[front] = ch;
 8004094:	4b06      	ldr	r3, [pc, #24]	@ (80040b0 <fpga_push_buf+0x54>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4908      	ldr	r1, [pc, #32]	@ (80040bc <fpga_push_buf+0x60>)
 800409a:	79fa      	ldrb	r2, [r7, #7]
 800409c:	54ca      	strb	r2, [r1, r3]
 800409e:	e002      	b.n	80040a6 <fpga_push_buf+0x4a>
	if(m_cfg.run_trigger == 0) return ;
 80040a0:	bf00      	nop
 80040a2:	e000      	b.n	80040a6 <fpga_push_buf+0x4a>
	if(index == rear) return ;
 80040a4:	bf00      	nop
}
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	20003070 	.word	0x20003070
 80040b4:	20003078 	.word	0x20003078
 80040b8:	2000306c 	.word	0x2000306c
 80040bc:	10000988 	.word	0x10000988

080040c0 <pop_fpga_buf>:

uint8_t pop_fpga_buf(uint8_t *ch)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
	if(front == rear) return 0;
 80040c8:	4b10      	ldr	r3, [pc, #64]	@ (800410c <pop_fpga_buf+0x4c>)
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	4b10      	ldr	r3, [pc, #64]	@ (8004110 <pop_fpga_buf+0x50>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d101      	bne.n	80040d8 <pop_fpga_buf+0x18>
 80040d4:	2300      	movs	r3, #0
 80040d6:	e012      	b.n	80040fe <pop_fpga_buf+0x3e>
	rear = (rear + 1) % MAX_FPGA_BUF;
 80040d8:	4b0d      	ldr	r3, [pc, #52]	@ (8004110 <pop_fpga_buf+0x50>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	3301      	adds	r3, #1
 80040de:	425a      	negs	r2, r3
 80040e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040e4:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80040e8:	bf58      	it	pl
 80040ea:	4253      	negpl	r3, r2
 80040ec:	4a08      	ldr	r2, [pc, #32]	@ (8004110 <pop_fpga_buf+0x50>)
 80040ee:	6013      	str	r3, [r2, #0]
	*ch =  recv_buf[rear];
 80040f0:	4b07      	ldr	r3, [pc, #28]	@ (8004110 <pop_fpga_buf+0x50>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a07      	ldr	r2, [pc, #28]	@ (8004114 <pop_fpga_buf+0x54>)
 80040f6:	5cd2      	ldrb	r2, [r2, r3]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	701a      	strb	r2, [r3, #0]

	return 1;
 80040fc:	2301      	movs	r3, #1
}
 80040fe:	4618      	mov	r0, r3
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	20003070 	.word	0x20003070
 8004110:	2000306c 	.word	0x2000306c
 8004114:	10000988 	.word	0x10000988

08004118 <fpga_set_output_channel>:
{
	fpga_set_output_channel(0, m_cfg.last_out_channel);
}

int fpga_set_output_channel(uint8_t outmode, uint32_t channel)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	4603      	mov	r3, r0
 8004120:	6039      	str	r1, [r7, #0]
 8004122:	71fb      	strb	r3, [r7, #7]
	fpga_data_t send_data;
	uChBit Channel;
	int error;

	Channel.channel_bit = channel;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	60bb      	str	r3, [r7, #8]
	send_data.header = WRITE_HEADER;
 8004128:	2355      	movs	r3, #85	@ 0x55
 800412a:	733b      	strb	r3, [r7, #12]
	send_data.addr = OUTPUT_CH_L_REG;
 800412c:	2304      	movs	r3, #4
 800412e:	737b      	strb	r3, [r7, #13]
	for(int i = 0; i<2; i++){
 8004130:	2300      	movs	r3, #0
 8004132:	617b      	str	r3, [r7, #20]
 8004134:	e03d      	b.n	80041b2 <fpga_set_output_channel+0x9a>
		send_data.addr-=i;
 8004136:	7b7a      	ldrb	r2, [r7, #13]
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	b2db      	uxtb	r3, r3
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	b2db      	uxtb	r3, r3
 8004140:	737b      	strb	r3, [r7, #13]
		send_data.data2 = Channel.channel_data[i*2];
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	3318      	adds	r3, #24
 8004148:	443b      	add	r3, r7
 800414a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800414e:	73fb      	strb	r3, [r7, #15]
		send_data.data1 = Channel.channel_data[i*2+1];
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	3301      	adds	r3, #1
 8004156:	3318      	adds	r3, #24
 8004158:	443b      	add	r3, r7
 800415a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800415e:	73bb      	strb	r3, [r7, #14]
		LOG_HEX_DUMP(&send_data, 4, "set output");
 8004160:	f107 030c 	add.w	r3, r7, #12
 8004164:	4a1a      	ldr	r2, [pc, #104]	@ (80041d0 <fpga_set_output_channel+0xb8>)
 8004166:	2104      	movs	r1, #4
 8004168:	4618      	mov	r0, r3
 800416a:	f7fc fc95 	bl	8000a98 <dump_printf>
		error = m_serial_send(eFPGA_UART, (uint8_t*)&send_data, 4);
 800416e:	f107 030c 	add.w	r3, r7, #12
 8004172:	2204      	movs	r2, #4
 8004174:	4619      	mov	r1, r3
 8004176:	2001      	movs	r0, #1
 8004178:	f001 f876 	bl	8005268 <m_serial_send>
 800417c:	6138      	str	r0, [r7, #16]
		RETURN_IF_ERROR(error);
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d013      	beq.n	80041ac <fpga_set_output_channel+0x94>
 8004184:	4b13      	ldr	r3, [pc, #76]	@ (80041d4 <fpga_set_output_channel+0xbc>)
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d003      	beq.n	8004194 <fpga_set_output_channel+0x7c>
 800418c:	4912      	ldr	r1, [pc, #72]	@ (80041d8 <fpga_set_output_channel+0xc0>)
 800418e:	4813      	ldr	r0, [pc, #76]	@ (80041dc <fpga_set_output_channel+0xc4>)
 8004190:	f7fc fc22 	bl	80009d8 <Printf>
 8004194:	4b0f      	ldr	r3, [pc, #60]	@ (80041d4 <fpga_set_output_channel+0xbc>)
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d005      	beq.n	80041a8 <fpga_set_output_channel+0x90>
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	2278      	movs	r2, #120	@ 0x78
 80041a0:	490d      	ldr	r1, [pc, #52]	@ (80041d8 <fpga_set_output_channel+0xc0>)
 80041a2:	480f      	ldr	r0, [pc, #60]	@ (80041e0 <fpga_set_output_channel+0xc8>)
 80041a4:	f7fc fc18 	bl	80009d8 <Printf>
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	e00c      	b.n	80041c6 <fpga_set_output_channel+0xae>
	for(int i = 0; i<2; i++){
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	3301      	adds	r3, #1
 80041b0:	617b      	str	r3, [r7, #20]
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	ddbe      	ble.n	8004136 <fpga_set_output_channel+0x1e>
	}
	if(channel != 0){
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d002      	beq.n	80041c4 <fpga_set_output_channel+0xac>
		m_cfg.last_out_channel = channel;
 80041be:	4a09      	ldr	r2, [pc, #36]	@ (80041e4 <fpga_set_output_channel+0xcc>)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	6093      	str	r3, [r2, #8]
	}

	return 0;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3718      	adds	r7, #24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	0800f374 	.word	0x0800f374
 80041d4:	20002adc 	.word	0x20002adc
 80041d8:	0800f9c0 	.word	0x0800f9c0
 80041dc:	0800f380 	.word	0x0800f380
 80041e0:	0800f3ac 	.word	0x0800f3ac
 80041e4:	20003078 	.word	0x20003078

080041e8 <fpga_set_input_channel>:

int fpga_set_input_channel(uint8_t outmode, uint32_t channel)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	4603      	mov	r3, r0
 80041f0:	6039      	str	r1, [r7, #0]
 80041f2:	71fb      	strb	r3, [r7, #7]
	fpga_data_t send_data;
	uChBit Channel;
	int error;

	Channel.channel_bit = channel;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	60bb      	str	r3, [r7, #8]
	send_data.header = WRITE_HEADER;
 80041f8:	2355      	movs	r3, #85	@ 0x55
 80041fa:	733b      	strb	r3, [r7, #12]
	send_data.addr = INPUT_CH_L_REG;
 80041fc:	2302      	movs	r3, #2
 80041fe:	737b      	strb	r3, [r7, #13]
	for(int i = 0; i<2; i++){
 8004200:	2300      	movs	r3, #0
 8004202:	617b      	str	r3, [r7, #20]
 8004204:	e03d      	b.n	8004282 <fpga_set_input_channel+0x9a>
		send_data.addr-=i;
 8004206:	7b7a      	ldrb	r2, [r7, #13]
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	b2db      	uxtb	r3, r3
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	b2db      	uxtb	r3, r3
 8004210:	737b      	strb	r3, [r7, #13]
		send_data.data2 = Channel.channel_data[i*2];
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	3318      	adds	r3, #24
 8004218:	443b      	add	r3, r7
 800421a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800421e:	73fb      	strb	r3, [r7, #15]
		send_data.data1 = Channel.channel_data[i*2+1];
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	005b      	lsls	r3, r3, #1
 8004224:	3301      	adds	r3, #1
 8004226:	3318      	adds	r3, #24
 8004228:	443b      	add	r3, r7
 800422a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800422e:	73bb      	strb	r3, [r7, #14]
		LOG_HEX_DUMP(&send_data, 4, "set input");
 8004230:	f107 030c 	add.w	r3, r7, #12
 8004234:	4a17      	ldr	r2, [pc, #92]	@ (8004294 <fpga_set_input_channel+0xac>)
 8004236:	2104      	movs	r1, #4
 8004238:	4618      	mov	r0, r3
 800423a:	f7fc fc2d 	bl	8000a98 <dump_printf>
		error = m_serial_send(eFPGA_UART, (uint8_t*)&send_data, 4);
 800423e:	f107 030c 	add.w	r3, r7, #12
 8004242:	2204      	movs	r2, #4
 8004244:	4619      	mov	r1, r3
 8004246:	2001      	movs	r0, #1
 8004248:	f001 f80e 	bl	8005268 <m_serial_send>
 800424c:	6138      	str	r0, [r7, #16]
		RETURN_IF_ERROR(error);
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d013      	beq.n	800427c <fpga_set_input_channel+0x94>
 8004254:	4b10      	ldr	r3, [pc, #64]	@ (8004298 <fpga_set_input_channel+0xb0>)
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d003      	beq.n	8004264 <fpga_set_input_channel+0x7c>
 800425c:	490f      	ldr	r1, [pc, #60]	@ (800429c <fpga_set_input_channel+0xb4>)
 800425e:	4810      	ldr	r0, [pc, #64]	@ (80042a0 <fpga_set_input_channel+0xb8>)
 8004260:	f7fc fbba 	bl	80009d8 <Printf>
 8004264:	4b0c      	ldr	r3, [pc, #48]	@ (8004298 <fpga_set_input_channel+0xb0>)
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d005      	beq.n	8004278 <fpga_set_input_channel+0x90>
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	2290      	movs	r2, #144	@ 0x90
 8004270:	490a      	ldr	r1, [pc, #40]	@ (800429c <fpga_set_input_channel+0xb4>)
 8004272:	480c      	ldr	r0, [pc, #48]	@ (80042a4 <fpga_set_input_channel+0xbc>)
 8004274:	f7fc fbb0 	bl	80009d8 <Printf>
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	e006      	b.n	800428a <fpga_set_input_channel+0xa2>
	for(int i = 0; i<2; i++){
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	3301      	adds	r3, #1
 8004280:	617b      	str	r3, [r7, #20]
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	2b01      	cmp	r3, #1
 8004286:	ddbe      	ble.n	8004206 <fpga_set_input_channel+0x1e>
	}

	return 0;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3718      	adds	r7, #24
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	0800f3e4 	.word	0x0800f3e4
 8004298:	20002adc 	.word	0x20002adc
 800429c:	0800f9d8 	.word	0x0800f9d8
 80042a0:	0800f380 	.word	0x0800f380
 80042a4:	0800f3ac 	.word	0x0800f3ac

080042a8 <fpga_set_mode>:

uint8_t fpga_set_mode(uint8_t mode)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	4603      	mov	r3, r0
 80042b0:	71fb      	strb	r3, [r7, #7]
	fpga_data_t send_data;

	send_data.header = WRITE_HEADER;
 80042b2:	2355      	movs	r3, #85	@ 0x55
 80042b4:	733b      	strb	r3, [r7, #12]
	send_data.addr = OPERATION_MODE_REG;
 80042b6:	2305      	movs	r3, #5
 80042b8:	737b      	strb	r3, [r7, #13]
	send_data.data1 = mode;
 80042ba:	79fb      	ldrb	r3, [r7, #7]
 80042bc:	73bb      	strb	r3, [r7, #14]
	send_data.data2 = 0;
 80042be:	2300      	movs	r3, #0
 80042c0:	73fb      	strb	r3, [r7, #15]

	LOG_DBG("Set Mode : [%d]", mode);
 80042c2:	4b0d      	ldr	r3, [pc, #52]	@ (80042f8 <fpga_set_mode+0x50>)
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d905      	bls.n	80042d6 <fpga_set_mode+0x2e>
 80042ca:	79fb      	ldrb	r3, [r7, #7]
 80042cc:	461a      	mov	r2, r3
 80042ce:	490b      	ldr	r1, [pc, #44]	@ (80042fc <fpga_set_mode+0x54>)
 80042d0:	480b      	ldr	r0, [pc, #44]	@ (8004300 <fpga_set_mode+0x58>)
 80042d2:	f7fc fb81 	bl	80009d8 <Printf>
	if(m_serial_send(eFPGA_UART, (uint8_t*)&send_data, 4) != HAL_OK){
 80042d6:	f107 030c 	add.w	r3, r7, #12
 80042da:	2204      	movs	r2, #4
 80042dc:	4619      	mov	r1, r3
 80042de:	2001      	movs	r0, #1
 80042e0:	f000 ffc2 	bl	8005268 <m_serial_send>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <fpga_set_mode+0x46>
		return 1;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e000      	b.n	80042f0 <fpga_set_mode+0x48>
	}

	return 0;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	20002adc 	.word	0x20002adc
 80042fc:	0800f9f0 	.word	0x0800f9f0
 8004300:	0800f3f0 	.word	0x0800f3f0

08004304 <fpga_select_output>:

uint8_t fpga_select_output(uint8_t sel_output, uint8_t ex_type)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	4603      	mov	r3, r0
 800430c:	460a      	mov	r2, r1
 800430e:	71fb      	strb	r3, [r7, #7]
 8004310:	4613      	mov	r3, r2
 8004312:	71bb      	strb	r3, [r7, #6]
	fpga_data_t send_data;

	send_data.header = WRITE_HEADER;
 8004314:	2355      	movs	r3, #85	@ 0x55
 8004316:	733b      	strb	r3, [r7, #12]
	send_data.addr = INOUT_SELECT_REG;
 8004318:	2306      	movs	r3, #6
 800431a:	737b      	strb	r3, [r7, #13]
	send_data.data1 = sel_output;
 800431c:	79fb      	ldrb	r3, [r7, #7]
 800431e:	73bb      	strb	r3, [r7, #14]
	send_data.data2 = 0;
 8004320:	2300      	movs	r3, #0
 8004322:	73fb      	strb	r3, [r7, #15]
	if(sel_output == eONE_N){
 8004324:	79fb      	ldrb	r3, [r7, #7]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d101      	bne.n	800432e <fpga_select_output+0x2a>
		send_data.data2 = ex_type;
 800432a:	79bb      	ldrb	r3, [r7, #6]
 800432c:	73fb      	strb	r3, [r7, #15]
	}

	LOG_HEX_DUMP(&send_data, 4, "set out mode");
 800432e:	f107 030c 	add.w	r3, r7, #12
 8004332:	4a0b      	ldr	r2, [pc, #44]	@ (8004360 <fpga_select_output+0x5c>)
 8004334:	2104      	movs	r1, #4
 8004336:	4618      	mov	r0, r3
 8004338:	f7fc fbae 	bl	8000a98 <dump_printf>
	if(m_serial_send(eFPGA_UART, (uint8_t*)&send_data, 4) != HAL_OK){
 800433c:	f107 030c 	add.w	r3, r7, #12
 8004340:	2204      	movs	r2, #4
 8004342:	4619      	mov	r1, r3
 8004344:	2001      	movs	r0, #1
 8004346:	f000 ff8f 	bl	8005268 <m_serial_send>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <fpga_select_output+0x50>
		return 1;
 8004350:	2301      	movs	r3, #1
 8004352:	e000      	b.n	8004356 <fpga_select_output+0x52>
	}

	return 0;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	0800f40c 	.word	0x0800f40c

08004364 <fpga_select_edge>:

uint8_t fpga_select_edge(uint8_t sel_edge)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	4603      	mov	r3, r0
 800436c:	71fb      	strb	r3, [r7, #7]
	fpga_data_t send_data;

	send_data.header = WRITE_HEADER;
 800436e:	2355      	movs	r3, #85	@ 0x55
 8004370:	733b      	strb	r3, [r7, #12]
	send_data.addr = TIGGER_INPUT_REG;
 8004372:	2307      	movs	r3, #7
 8004374:	737b      	strb	r3, [r7, #13]
	send_data.data1 = sel_edge;
 8004376:	79fb      	ldrb	r3, [r7, #7]
 8004378:	73bb      	strb	r3, [r7, #14]
	send_data.data2 = 0;
 800437a:	2300      	movs	r3, #0
 800437c:	73fb      	strb	r3, [r7, #15]

	if(m_serial_send(eFPGA_UART, (uint8_t*)&send_data, 4) != HAL_OK){
 800437e:	f107 030c 	add.w	r3, r7, #12
 8004382:	2204      	movs	r2, #4
 8004384:	4619      	mov	r1, r3
 8004386:	2001      	movs	r0, #1
 8004388:	f000 ff6e 	bl	8005268 <m_serial_send>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <fpga_select_edge+0x32>
		return 1;
 8004392:	2301      	movs	r3, #1
 8004394:	e000      	b.n	8004398 <fpga_select_edge+0x34>
	}

	return 0;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <fpga_set_delay_time>:

	return err;
}

int fpga_set_delay_time(uint8_t ch, uint16_t time)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	4603      	mov	r3, r0
 80043a8:	460a      	mov	r2, r1
 80043aa:	71fb      	strb	r3, [r7, #7]
 80043ac:	4613      	mov	r3, r2
 80043ae:	80bb      	strh	r3, [r7, #4]
	fpga_data_t send_data;
	uChtime set_time;
	int err_code;

	//LOG_DBG("CH[%d] Delay time[%d]", ch, time);
	set_time.u16_time = time;
 80043b0:	88bb      	ldrh	r3, [r7, #4]
 80043b2:	81bb      	strh	r3, [r7, #12]

	send_data.header = WRITE_HEADER;
 80043b4:	2355      	movs	r3, #85	@ 0x55
 80043b6:	743b      	strb	r3, [r7, #16]
	send_data.addr = CH1_DELAY_TIME_REG + ch;
 80043b8:	79fb      	ldrb	r3, [r7, #7]
 80043ba:	3310      	adds	r3, #16
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	747b      	strb	r3, [r7, #17]
	send_data.data1 = set_time.array_time[1];
 80043c0:	7b7b      	ldrb	r3, [r7, #13]
 80043c2:	74bb      	strb	r3, [r7, #18]
	send_data.data2 = set_time.array_time[0];
 80043c4:	7b3b      	ldrb	r3, [r7, #12]
 80043c6:	74fb      	strb	r3, [r7, #19]
	err_code = m_serial_send(eFPGA_UART, (uint8_t*)&send_data, 4);
 80043c8:	f107 0310 	add.w	r3, r7, #16
 80043cc:	2204      	movs	r2, #4
 80043ce:	4619      	mov	r1, r3
 80043d0:	2001      	movs	r0, #1
 80043d2:	f000 ff49 	bl	8005268 <m_serial_send>
 80043d6:	6178      	str	r0, [r7, #20]
	if(err_code != HAL_OK){
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d016      	beq.n	800440c <fpga_set_delay_time+0x6c>
		RETURN_IF_ERROR(err_code);
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d013      	beq.n	800440c <fpga_set_delay_time+0x6c>
 80043e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004418 <fpga_set_delay_time+0x78>)
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <fpga_set_delay_time+0x54>
 80043ec:	490b      	ldr	r1, [pc, #44]	@ (800441c <fpga_set_delay_time+0x7c>)
 80043ee:	480c      	ldr	r0, [pc, #48]	@ (8004420 <fpga_set_delay_time+0x80>)
 80043f0:	f7fc faf2 	bl	80009d8 <Printf>
 80043f4:	4b08      	ldr	r3, [pc, #32]	@ (8004418 <fpga_set_delay_time+0x78>)
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d005      	beq.n	8004408 <fpga_set_delay_time+0x68>
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	22e9      	movs	r2, #233	@ 0xe9
 8004400:	4906      	ldr	r1, [pc, #24]	@ (800441c <fpga_set_delay_time+0x7c>)
 8004402:	4808      	ldr	r0, [pc, #32]	@ (8004424 <fpga_set_delay_time+0x84>)
 8004404:	f7fc fae8 	bl	80009d8 <Printf>
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	e000      	b.n	800440e <fpga_set_delay_time+0x6e>
	}

	return 0;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3718      	adds	r7, #24
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	20002adc 	.word	0x20002adc
 800441c:	0800fa00 	.word	0x0800fa00
 8004420:	0800f380 	.word	0x0800f380
 8004424:	0800f3ac 	.word	0x0800f3ac

08004428 <fpga_set_on_time>:

int fpga_set_on_time(uint8_t ch, uint16_t time)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	4603      	mov	r3, r0
 8004430:	460a      	mov	r2, r1
 8004432:	71fb      	strb	r3, [r7, #7]
 8004434:	4613      	mov	r3, r2
 8004436:	80bb      	strh	r3, [r7, #4]
	fpga_data_t send_data;
	uChtime set_time;

	//LOG_DBG("CH[%d] On time[%d]", ch, time);
	set_time.u16_time = time;
 8004438:	88bb      	ldrh	r3, [r7, #4]
 800443a:	813b      	strh	r3, [r7, #8]

	send_data.header = WRITE_HEADER;
 800443c:	2355      	movs	r3, #85	@ 0x55
 800443e:	733b      	strb	r3, [r7, #12]
	send_data.addr = CH1_ON_TIME_REG + ch;
 8004440:	79fb      	ldrb	r3, [r7, #7]
 8004442:	3330      	adds	r3, #48	@ 0x30
 8004444:	b2db      	uxtb	r3, r3
 8004446:	737b      	strb	r3, [r7, #13]
	send_data.data1 = set_time.array_time[1];
 8004448:	7a7b      	ldrb	r3, [r7, #9]
 800444a:	73bb      	strb	r3, [r7, #14]
	send_data.data2 = set_time.array_time[0];
 800444c:	7a3b      	ldrb	r3, [r7, #8]
 800444e:	73fb      	strb	r3, [r7, #15]
	if(m_serial_send(eFPGA_UART, (uint8_t*)&send_data, 4) != HAL_OK){
 8004450:	f107 030c 	add.w	r3, r7, #12
 8004454:	2204      	movs	r2, #4
 8004456:	4619      	mov	r1, r3
 8004458:	2001      	movs	r0, #1
 800445a:	f000 ff05 	bl	8005268 <m_serial_send>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d002      	beq.n	800446a <fpga_set_on_time+0x42>
		return -1;
 8004464:	f04f 33ff 	mov.w	r3, #4294967295
 8004468:	e000      	b.n	800446c <fpga_set_on_time+0x44>
	}

	return 0;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <fpga_set_trigger_order>:

	return 0;
}

int fpga_set_trigger_order(uint8_t *ch_odder)
{
 8004474:	b590      	push	{r4, r7, lr}
 8004476:	b087      	sub	sp, #28
 8004478:	af02      	add	r7, sp, #8
 800447a:	6078      	str	r0, [r7, #4]
	fpga_data_t send_data ={0,};
 800447c:	2300      	movs	r3, #0
 800447e:	60bb      	str	r3, [r7, #8]

	send_data.header = WRITE_HEADER;
 8004480:	2355      	movs	r3, #85	@ 0x55
 8004482:	723b      	strb	r3, [r7, #8]
	for(int i = 0; i < MAX_CHANNEL; i+=2){
 8004484:	2300      	movs	r3, #0
 8004486:	60fb      	str	r3, [r7, #12]
 8004488:	e050      	b.n	800452c <fpga_set_trigger_order+0xb8>
		LOG_DBG("Ch %d Odder[%d] Ch %d Odder[%d]", i+1, ch_odder[i], i+2, ch_odder[i+1]);
 800448a:	4b2c      	ldr	r3, [pc, #176]	@ (800453c <fpga_set_trigger_order+0xc8>)
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	2b02      	cmp	r3, #2
 8004490:	d915      	bls.n	80044be <fpga_set_trigger_order+0x4a>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	1c58      	adds	r0, r3, #1
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	4413      	add	r3, r2
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	461c      	mov	r4, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	3302      	adds	r3, #2
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	3201      	adds	r2, #1
 80044a8:	6879      	ldr	r1, [r7, #4]
 80044aa:	440a      	add	r2, r1
 80044ac:	7812      	ldrb	r2, [r2, #0]
 80044ae:	9201      	str	r2, [sp, #4]
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	4623      	mov	r3, r4
 80044b4:	4602      	mov	r2, r0
 80044b6:	4922      	ldr	r1, [pc, #136]	@ (8004540 <fpga_set_trigger_order+0xcc>)
 80044b8:	4822      	ldr	r0, [pc, #136]	@ (8004544 <fpga_set_trigger_order+0xd0>)
 80044ba:	f7fc fa8d 	bl	80009d8 <Printf>
		if(ch_odder[i] > 0 || ch_odder[i+1] > 0){
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	4413      	add	r3, r2
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d106      	bne.n	80044d8 <fpga_set_trigger_order+0x64>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	3301      	adds	r3, #1
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	4413      	add	r3, r2
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d026      	beq.n	8004526 <fpga_set_trigger_order+0xb2>
			send_data.data1 = ch_odder[i];
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	4413      	add	r3, r2
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	72bb      	strb	r3, [r7, #10]
			send_data.data2 = ch_odder[i+1];
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	3301      	adds	r3, #1
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	4413      	add	r3, r2
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	72fb      	strb	r3, [r7, #11]
			send_data.addr = CH_1_2_TRIGGER_ORDER_REG + (i/2);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	0fda      	lsrs	r2, r3, #31
 80044f2:	4413      	add	r3, r2
 80044f4:	105b      	asrs	r3, r3, #1
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	3b70      	subs	r3, #112	@ 0x70
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	727b      	strb	r3, [r7, #9]
			LOG_HEX_DUMP(&send_data, sizeof(fpga_data_t), "Write Oder");
 80044fe:	f107 0308 	add.w	r3, r7, #8
 8004502:	4a11      	ldr	r2, [pc, #68]	@ (8004548 <fpga_set_trigger_order+0xd4>)
 8004504:	2104      	movs	r1, #4
 8004506:	4618      	mov	r0, r3
 8004508:	f7fc fac6 	bl	8000a98 <dump_printf>
			if(m_serial_send(eFPGA_UART, (uint8_t*)&send_data, 4) != HAL_OK){
 800450c:	f107 0308 	add.w	r3, r7, #8
 8004510:	2204      	movs	r2, #4
 8004512:	4619      	mov	r1, r3
 8004514:	2001      	movs	r0, #1
 8004516:	f000 fea7 	bl	8005268 <m_serial_send>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d002      	beq.n	8004526 <fpga_set_trigger_order+0xb2>
				return -1;
 8004520:	f04f 33ff 	mov.w	r3, #4294967295
 8004524:	e006      	b.n	8004534 <fpga_set_trigger_order+0xc0>
	for(int i = 0; i < MAX_CHANNEL; i+=2){
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	3302      	adds	r3, #2
 800452a:	60fb      	str	r3, [r7, #12]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2b07      	cmp	r3, #7
 8004530:	ddab      	ble.n	800448a <fpga_set_trigger_order+0x16>
			}
		}
	}

	return 0;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3714      	adds	r7, #20
 8004538:	46bd      	mov	sp, r7
 800453a:	bd90      	pop	{r4, r7, pc}
 800453c:	20002adc 	.word	0x20002adc
 8004540:	0800fa14 	.word	0x0800fa14
 8004544:	0800f41c 	.word	0x0800f41c
 8004548:	0800f448 	.word	0x0800f448

0800454c <onTriggerCtrl>:

static void onTriggerCtrl(uint8_t ctrl)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	4603      	mov	r3, r0
 8004554:	71fb      	strb	r3, [r7, #7]
	//LOG_DBG("Trigger %s", ctrl?"Start":"Stop");
	m_cfg.run_trigger = ctrl;
 8004556:	4a04      	ldr	r2, [pc, #16]	@ (8004568 <onTriggerCtrl+0x1c>)
 8004558:	79fb      	ldrb	r3, [r7, #7]
 800455a:	7013      	strb	r3, [r2, #0]
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	20003078 	.word	0x20003078

0800456c <parse_packet>:

static uint8_t parse_packet(uint8_t *pBuf)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
	if(pBuf[0] == 0x33){
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	2b33      	cmp	r3, #51	@ 0x33
 800457a:	d107      	bne.n	800458c <parse_packet+0x20>
		m_front_update_trigger_status(pBuf[1]);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	3301      	adds	r3, #1
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	4618      	mov	r0, r3
 8004584:	f000 fa92 	bl	8004aac <m_front_update_trigger_status>
		return 1;
 8004588:	2301      	movs	r3, #1
 800458a:	e000      	b.n	800458e <parse_packet+0x22>
	}else if(pBuf[0] == 0xAA){
		// response data
	}

	return 0;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <fpga_set_factory_reset>:

void fpga_set_factory_reset(void)
{
 8004596:	b580      	push	{r7, lr}
 8004598:	b084      	sub	sp, #16
 800459a:	af00      	add	r7, sp, #0
	int i;
	uint8_t order[MAX_CHANNEL] = {0,};
 800459c:	2300      	movs	r3, #0
 800459e:	607b      	str	r3, [r7, #4]
 80045a0:	2300      	movs	r3, #0
 80045a2:	60bb      	str	r3, [r7, #8]

	fpga_select_output(eONE_ONE, 0);
 80045a4:	2100      	movs	r1, #0
 80045a6:	2000      	movs	r0, #0
 80045a8:	f7ff feac 	bl	8004304 <fpga_select_output>
	fpga_select_edge(eTRIGGER_RISING);
 80045ac:	2001      	movs	r0, #1
 80045ae:	f7ff fed9 	bl	8004364 <fpga_select_edge>
	for(i = 0; i < MAX_CHANNEL; i++){
 80045b2:	2300      	movs	r3, #0
 80045b4:	60fb      	str	r3, [r7, #12]
 80045b6:	e00f      	b.n	80045d8 <fpga_set_factory_reset+0x42>
		fpga_set_on_time(i, 1000);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7ff ff31 	bl	8004428 <fpga_set_on_time>
		fpga_set_delay_time(i, 0);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2100      	movs	r1, #0
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7ff fee7 	bl	80043a0 <fpga_set_delay_time>
	for(i = 0; i < MAX_CHANNEL; i++){
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	3301      	adds	r3, #1
 80045d6:	60fb      	str	r3, [r7, #12]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2b07      	cmp	r3, #7
 80045dc:	ddec      	ble.n	80045b8 <fpga_set_factory_reset+0x22>
	}

	for(i = 0; i < 3; i++){
 80045de:	2300      	movs	r3, #0
 80045e0:	60fb      	str	r3, [r7, #12]
 80045e2:	e028      	b.n	8004636 <fpga_set_factory_reset+0xa0>

		order[(i*3)] = i+1;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	b2d9      	uxtb	r1, r3
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	4613      	mov	r3, r2
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	4413      	add	r3, r2
 80045f0:	1c4a      	adds	r2, r1, #1
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	3310      	adds	r3, #16
 80045f6:	443b      	add	r3, r7
 80045f8:	f803 2c0c 	strb.w	r2, [r3, #-12]
		order[(i*3)+1] = i+1;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	b2d9      	uxtb	r1, r3
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	4613      	mov	r3, r2
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	4413      	add	r3, r2
 8004608:	3301      	adds	r3, #1
 800460a:	1c4a      	adds	r2, r1, #1
 800460c:	b2d2      	uxtb	r2, r2
 800460e:	3310      	adds	r3, #16
 8004610:	443b      	add	r3, r7
 8004612:	f803 2c0c 	strb.w	r2, [r3, #-12]
		order[(i*3)+2] = i+1;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	b2d9      	uxtb	r1, r3
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	4613      	mov	r3, r2
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	4413      	add	r3, r2
 8004622:	3302      	adds	r3, #2
 8004624:	1c4a      	adds	r2, r1, #1
 8004626:	b2d2      	uxtb	r2, r2
 8004628:	3310      	adds	r3, #16
 800462a:	443b      	add	r3, r7
 800462c:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i = 0; i < 3; i++){
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	3301      	adds	r3, #1
 8004634:	60fb      	str	r3, [r7, #12]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2b02      	cmp	r3, #2
 800463a:	ddd3      	ble.n	80045e4 <fpga_set_factory_reset+0x4e>
	}
	fpga_set_trigger_order(order);
 800463c:	1d3b      	adds	r3, r7, #4
 800463e:	4618      	mov	r0, r3
 8004640:	f7ff ff18 	bl	8004474 <fpga_set_trigger_order>
	fpga_set_input_channel(0, 0x00000001);
 8004644:	2101      	movs	r1, #1
 8004646:	2000      	movs	r0, #0
 8004648:	f7ff fdce 	bl	80041e8 <fpga_set_input_channel>
	fpga_set_output_channel(0, 0x00000000);
 800464c:	2100      	movs	r1, #0
 800464e:	2000      	movs	r0, #0
 8004650:	f7ff fd62 	bl	8004118 <fpga_set_output_channel>
}
 8004654:	bf00      	nop
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <fpga_get_trigger_status>:

void fpga_get_trigger_status(uint8_t *pBuf)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
	memcpy(pBuf, m_cfg.trigger_buffer, MAX_PACKET_SIZE);
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	4b06      	ldr	r3, [pc, #24]	@ (8004680 <fpga_get_trigger_status+0x24>)
 8004668:	3302      	adds	r3, #2
 800466a:	6819      	ldr	r1, [r3, #0]
 800466c:	6011      	str	r1, [r2, #0]
 800466e:	791b      	ldrb	r3, [r3, #4]
 8004670:	7113      	strb	r3, [r2, #4]
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	20003078 	.word	0x20003078

08004684 <evt_handler>:

static void evt_handler(event_t const* evt, void* p_context)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
	switch (evt->event)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	2b18      	cmp	r3, #24
 8004694:	d00e      	beq.n	80046b4 <evt_handler+0x30>
 8004696:	2b18      	cmp	r3, #24
 8004698:	dc12      	bgt.n	80046c0 <evt_handler+0x3c>
 800469a:	2b13      	cmp	r3, #19
 800469c:	d002      	beq.n	80046a4 <evt_handler+0x20>
 800469e:	2b14      	cmp	r3, #20
 80046a0:	d004      	beq.n	80046ac <evt_handler+0x28>
			break;
		case EVT_remote_mode:
			m_cfg.run_mode = evt->param1;
			break;
		default:
			break;
 80046a2:	e00d      	b.n	80046c0 <evt_handler+0x3c>
			onTriggerCtrl(1);
 80046a4:	2001      	movs	r0, #1
 80046a6:	f7ff ff51 	bl	800454c <onTriggerCtrl>
			break;
 80046aa:	e00a      	b.n	80046c2 <evt_handler+0x3e>
			onTriggerCtrl(0);
 80046ac:	2000      	movs	r0, #0
 80046ae:	f7ff ff4d 	bl	800454c <onTriggerCtrl>
			break;
 80046b2:	e006      	b.n	80046c2 <evt_handler+0x3e>
			m_cfg.run_mode = evt->param1;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	4b04      	ldr	r3, [pc, #16]	@ (80046cc <evt_handler+0x48>)
 80046bc:	705a      	strb	r2, [r3, #1]
			break;
 80046be:	e000      	b.n	80046c2 <evt_handler+0x3e>
			break;
 80046c0:	bf00      	nop
	}
}
 80046c2:	bf00      	nop
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	20003078 	.word	0x20003078

080046d0 <FpgaProcTask>:

static void FpgaProcTask(void const * argument)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
	uint8_t ch;
	uint8_t cmd_buf[MAX_PACKET_SIZE]={0,}, cmd_pos = 0;
 80046d8:	2300      	movs	r3, #0
 80046da:	60fb      	str	r3, [r7, #12]
 80046dc:	2300      	movs	r3, #0
 80046de:	743b      	strb	r3, [r7, #16]
 80046e0:	2300      	movs	r3, #0
 80046e2:	75fb      	strb	r3, [r7, #23]
	uint16_t status_timer_tick = 0;
 80046e4:	2300      	movs	r3, #0
 80046e6:	82bb      	strh	r3, [r7, #20]

	while(1){
		if(m_cfg.run_trigger == 0){
 80046e8:	4b4a      	ldr	r3, [pc, #296]	@ (8004814 <FpgaProcTask+0x144>)
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d103      	bne.n	80046f8 <FpgaProcTask+0x28>
			osDelay(100);
 80046f0:	2064      	movs	r0, #100	@ 0x64
 80046f2:	f005 fd16 	bl	800a122 <osDelay>
			continue;
 80046f6:	e08b      	b.n	8004810 <FpgaProcTask+0x140>
		}

		if(pop_fpga_buf(&ch)){
 80046f8:	f107 0313 	add.w	r3, r7, #19
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7ff fcdf 	bl	80040c0 <pop_fpga_buf>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d04b      	beq.n	80047a0 <FpgaProcTask+0xd0>
			if((cmd_pos == 0) && ((ch != 0x33) && (ch != 0xAA))){
 8004708:	7dfb      	ldrb	r3, [r7, #23]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d109      	bne.n	8004722 <FpgaProcTask+0x52>
 800470e:	7cfb      	ldrb	r3, [r7, #19]
 8004710:	2b33      	cmp	r3, #51	@ 0x33
 8004712:	d006      	beq.n	8004722 <FpgaProcTask+0x52>
 8004714:	7cfb      	ldrb	r3, [r7, #19]
 8004716:	2baa      	cmp	r3, #170	@ 0xaa
 8004718:	d003      	beq.n	8004722 <FpgaProcTask+0x52>
				osDelay(10);
 800471a:	200a      	movs	r0, #10
 800471c:	f005 fd01 	bl	800a122 <osDelay>
				continue;
 8004720:	e076      	b.n	8004810 <FpgaProcTask+0x140>
			}

			if(cmd_pos<MAX_PACKET_SIZE){
 8004722:	7dfb      	ldrb	r3, [r7, #23]
 8004724:	2b04      	cmp	r3, #4
 8004726:	d807      	bhi.n	8004738 <FpgaProcTask+0x68>
				cmd_buf[cmd_pos++] = ch;
 8004728:	7dfb      	ldrb	r3, [r7, #23]
 800472a:	1c5a      	adds	r2, r3, #1
 800472c:	75fa      	strb	r2, [r7, #23]
 800472e:	7cfa      	ldrb	r2, [r7, #19]
 8004730:	3318      	adds	r3, #24
 8004732:	443b      	add	r3, r7
 8004734:	f803 2c0c 	strb.w	r2, [r3, #-12]
			}
			if(cmd_pos == MAX_PACKET_SIZE){
 8004738:	7dfb      	ldrb	r3, [r7, #23]
 800473a:	2b05      	cmp	r3, #5
 800473c:	d12c      	bne.n	8004798 <FpgaProcTask+0xc8>
					parse_packet(cmd_buf);
				}else{
					m_remote_response(cmd_buf);
				}
#else
				if(parse_packet(cmd_buf)){
 800473e:	f107 030c 	add.w	r3, r7, #12
 8004742:	4618      	mov	r0, r3
 8004744:	f7ff ff12 	bl	800456c <parse_packet>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d01b      	beq.n	8004786 <FpgaProcTask+0xb6>
					if((m_cfg.run_mode == eREMOTE_SERIAL) || (m_cfg.run_mode == eREMOTE_ETHER)){
 800474e:	4b31      	ldr	r3, [pc, #196]	@ (8004814 <FpgaProcTask+0x144>)
 8004750:	785b      	ldrb	r3, [r3, #1]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d003      	beq.n	800475e <FpgaProcTask+0x8e>
 8004756:	4b2f      	ldr	r3, [pc, #188]	@ (8004814 <FpgaProcTask+0x144>)
 8004758:	785b      	ldrb	r3, [r3, #1]
 800475a:	2b02      	cmp	r3, #2
 800475c:	d113      	bne.n	8004786 <FpgaProcTask+0xb6>
						status_timer_tick = 1;
 800475e:	2301      	movs	r3, #1
 8004760:	82bb      	strh	r3, [r7, #20]
						if(m_cfg.run_mode == eREMOTE_SERIAL){
 8004762:	4b2c      	ldr	r3, [pc, #176]	@ (8004814 <FpgaProcTask+0x144>)
 8004764:	785b      	ldrb	r3, [r3, #1]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d105      	bne.n	8004776 <FpgaProcTask+0xa6>
							m_remote_response(cmd_buf);
 800476a:	f107 030c 	add.w	r3, r7, #12
 800476e:	4618      	mov	r0, r3
 8004770:	f000 fa98 	bl	8004ca4 <m_remote_response>
 8004774:	e007      	b.n	8004786 <FpgaProcTask+0xb6>
						}else{
							memcpy(m_cfg.trigger_buffer, cmd_buf, MAX_PACKET_SIZE);
 8004776:	4b27      	ldr	r3, [pc, #156]	@ (8004814 <FpgaProcTask+0x144>)
 8004778:	3302      	adds	r3, #2
 800477a:	f107 020c 	add.w	r2, r7, #12
 800477e:	6810      	ldr	r0, [r2, #0]
 8004780:	6018      	str	r0, [r3, #0]
 8004782:	7912      	ldrb	r2, [r2, #4]
 8004784:	711a      	strb	r2, [r3, #4]
						}
					}
				}
#endif
				cmd_pos = 0;
 8004786:	2300      	movs	r3, #0
 8004788:	75fb      	strb	r3, [r7, #23]
				memset(cmd_buf, 0, MAX_PACKET_SIZE);
 800478a:	f107 030c 	add.w	r3, r7, #12
 800478e:	2205      	movs	r2, #5
 8004790:	2100      	movs	r1, #0
 8004792:	4618      	mov	r0, r3
 8004794:	f009 fa1a 	bl	800dbcc <memset>
			}
			osDelay(5);
 8004798:	2005      	movs	r0, #5
 800479a:	f005 fcc2 	bl	800a122 <osDelay>
 800479e:	e7a3      	b.n	80046e8 <FpgaProcTask+0x18>
		}else{
			if((m_cfg.run_mode == eREMOTE_SERIAL) || (m_cfg.run_mode == eREMOTE_ETHER)){
 80047a0:	4b1c      	ldr	r3, [pc, #112]	@ (8004814 <FpgaProcTask+0x144>)
 80047a2:	785b      	ldrb	r3, [r3, #1]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d003      	beq.n	80047b0 <FpgaProcTask+0xe0>
 80047a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004814 <FpgaProcTask+0x144>)
 80047aa:	785b      	ldrb	r3, [r3, #1]
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d12c      	bne.n	800480a <FpgaProcTask+0x13a>
				if(status_timer_tick && (status_timer_tick++ > TRIGGER_TIME_OUT)){
 80047b0:	8abb      	ldrh	r3, [r7, #20]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d029      	beq.n	800480a <FpgaProcTask+0x13a>
 80047b6:	8abb      	ldrh	r3, [r7, #20]
 80047b8:	1c5a      	adds	r2, r3, #1
 80047ba:	82ba      	strh	r2, [r7, #20]
 80047bc:	2b14      	cmp	r3, #20
 80047be:	d924      	bls.n	800480a <FpgaProcTask+0x13a>
					LOG_DBG("Clear Trigger Status");
 80047c0:	4b15      	ldr	r3, [pc, #84]	@ (8004818 <FpgaProcTask+0x148>)
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d903      	bls.n	80047d0 <FpgaProcTask+0x100>
 80047c8:	4914      	ldr	r1, [pc, #80]	@ (800481c <FpgaProcTask+0x14c>)
 80047ca:	4815      	ldr	r0, [pc, #84]	@ (8004820 <FpgaProcTask+0x150>)
 80047cc:	f7fc f904 	bl	80009d8 <Printf>
					status_timer_tick = 0;
 80047d0:	2300      	movs	r3, #0
 80047d2:	82bb      	strh	r3, [r7, #20]
					memset(cmd_buf, 0, MAX_PACKET_SIZE);
 80047d4:	f107 030c 	add.w	r3, r7, #12
 80047d8:	2205      	movs	r2, #5
 80047da:	2100      	movs	r1, #0
 80047dc:	4618      	mov	r0, r3
 80047de:	f009 f9f5 	bl	800dbcc <memset>
					cmd_buf[0] =0x33;
 80047e2:	2333      	movs	r3, #51	@ 0x33
 80047e4:	733b      	strb	r3, [r7, #12]
					if(m_cfg.run_mode == eREMOTE_SERIAL){
 80047e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004814 <FpgaProcTask+0x144>)
 80047e8:	785b      	ldrb	r3, [r3, #1]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d105      	bne.n	80047fa <FpgaProcTask+0x12a>
						m_remote_response(cmd_buf);
 80047ee:	f107 030c 	add.w	r3, r7, #12
 80047f2:	4618      	mov	r0, r3
 80047f4:	f000 fa56 	bl	8004ca4 <m_remote_response>
 80047f8:	e007      	b.n	800480a <FpgaProcTask+0x13a>
					}else{
						memcpy(m_cfg.trigger_buffer, cmd_buf, MAX_PACKET_SIZE);
 80047fa:	4b06      	ldr	r3, [pc, #24]	@ (8004814 <FpgaProcTask+0x144>)
 80047fc:	3302      	adds	r3, #2
 80047fe:	f107 020c 	add.w	r2, r7, #12
 8004802:	6810      	ldr	r0, [r2, #0]
 8004804:	6018      	str	r0, [r3, #0]
 8004806:	7912      	ldrb	r2, [r2, #4]
 8004808:	711a      	strb	r2, [r3, #4]
					}
				}
			}
			osDelay(100);
 800480a:	2064      	movs	r0, #100	@ 0x64
 800480c:	f005 fc89 	bl	800a122 <osDelay>
		if(m_cfg.run_trigger == 0){
 8004810:	e76a      	b.n	80046e8 <FpgaProcTask+0x18>
 8004812:	bf00      	nop
 8004814:	20003078 	.word	0x20003078
 8004818:	20002adc 	.word	0x20002adc
 800481c:	0800fa2c 	.word	0x0800fa2c
 8004820:	0800f454 	.word	0x0800f454

08004824 <fpga_proc_init>:
		}
	}
}

uint32_t fpga_proc_init(void)
{
 8004824:	b5b0      	push	{r4, r5, r7, lr}
 8004826:	b088      	sub	sp, #32
 8004828:	af00      	add	r7, sp, #0
	osThreadDef(fpgaProc, FpgaProcTask, osPriorityNormal, 0, 1024);
 800482a:	4b12      	ldr	r3, [pc, #72]	@ (8004874 <fpga_proc_init+0x50>)
 800482c:	1d3c      	adds	r4, r7, #4
 800482e:	461d      	mov	r5, r3
 8004830:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004832:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004834:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004838:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	fpgaprocTaskHandle = osThreadCreate(osThread(fpgaProc), NULL);
 800483c:	1d3b      	adds	r3, r7, #4
 800483e:	2100      	movs	r1, #0
 8004840:	4618      	mov	r0, r3
 8004842:	f005 fc22 	bl	800a08a <osThreadCreate>
 8004846:	4603      	mov	r3, r0
 8004848:	4a0b      	ldr	r2, [pc, #44]	@ (8004878 <fpga_proc_init+0x54>)
 800484a:	6013      	str	r3, [r2, #0]

	fpga_event.handler = evt_handler;
 800484c:	4b0b      	ldr	r3, [pc, #44]	@ (800487c <fpga_proc_init+0x58>)
 800484e:	4a0c      	ldr	r2, [pc, #48]	@ (8004880 <fpga_proc_init+0x5c>)
 8004850:	601a      	str	r2, [r3, #0]
	fpga_event.p_context = NULL;
 8004852:	4b0a      	ldr	r3, [pc, #40]	@ (800487c <fpga_proc_init+0x58>)
 8004854:	2200      	movs	r2, #0
 8004856:	605a      	str	r2, [r3, #4]
	if(m_event_register(&fpga_event)){
 8004858:	4808      	ldr	r0, [pc, #32]	@ (800487c <fpga_proc_init+0x58>)
 800485a:	f7fe fe61 	bl	8003520 <m_event_register>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <fpga_proc_init+0x44>
		return 1;
 8004864:	2301      	movs	r3, #1
 8004866:	e000      	b.n	800486a <fpga_proc_init+0x46>
	}

	return 0;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3720      	adds	r7, #32
 800486e:	46bd      	mov	sp, r7
 8004870:	bdb0      	pop	{r4, r5, r7, pc}
 8004872:	bf00      	nop
 8004874:	0800f480 	.word	0x0800f480
 8004878:	20003074 	.word	0x20003074
 800487c:	20003084 	.word	0x20003084
 8004880:	08004685 	.word	0x08004685

08004884 <push_event0>:
inline static uint32_t push_event0(event_type_t event)                                      { return m_event_push(event, 0, 0, 0, NULL, 0); }
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af02      	add	r7, sp, #8
 800488a:	4603      	mov	r3, r0
 800488c:	71fb      	strb	r3, [r7, #7]
 800488e:	79f8      	ldrb	r0, [r7, #7]
 8004890:	2300      	movs	r3, #0
 8004892:	9301      	str	r3, [sp, #4]
 8004894:	2300      	movs	r3, #0
 8004896:	9300      	str	r3, [sp, #0]
 8004898:	2300      	movs	r3, #0
 800489a:	2200      	movs	r2, #0
 800489c:	2100      	movs	r1, #0
 800489e:	f7fe fe69 	bl	8003574 <m_event_push>
 80048a2:	4603      	mov	r3, r0
 80048a4:	4618      	mov	r0, r3
 80048a6:	3708      	adds	r7, #8
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <push_event1>:
inline static uint32_t push_event1(event_type_t event, uint32_t param1)                     { return m_event_push(event, param1, 0, 0, NULL, 0); }
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af02      	add	r7, sp, #8
 80048b2:	4603      	mov	r3, r0
 80048b4:	6039      	str	r1, [r7, #0]
 80048b6:	71fb      	strb	r3, [r7, #7]
 80048b8:	79f8      	ldrb	r0, [r7, #7]
 80048ba:	2300      	movs	r3, #0
 80048bc:	9301      	str	r3, [sp, #4]
 80048be:	2300      	movs	r3, #0
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	2300      	movs	r3, #0
 80048c4:	2200      	movs	r2, #0
 80048c6:	6839      	ldr	r1, [r7, #0]
 80048c8:	f7fe fe54 	bl	8003574 <m_event_push>
 80048cc:	4603      	mov	r3, r0
 80048ce:	4618      	mov	r0, r3
 80048d0:	3708      	adds	r7, #8
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
	...

080048d8 <front_push_buf>:
{
	que._head = que._tail = 0;
}

void front_push_buf(uint8_t ch)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	4603      	mov	r3, r0
 80048e0:	71fb      	strb	r3, [r7, #7]
	int pos = (que._head + 1) % MAX_QUEUE_SIZE;
 80048e2:	4b11      	ldr	r3, [pc, #68]	@ (8004928 <front_push_buf+0x50>)
 80048e4:	881b      	ldrh	r3, [r3, #0]
 80048e6:	3301      	adds	r3, #1
 80048e8:	425a      	negs	r2, r3
 80048ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048ee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80048f2:	bf58      	it	pl
 80048f4:	4253      	negpl	r3, r2
 80048f6:	60fb      	str	r3, [r7, #12]

	if(pos == que._tail) return ;
 80048f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004928 <front_push_buf+0x50>)
 80048fa:	885b      	ldrh	r3, [r3, #2]
 80048fc:	461a      	mov	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	4293      	cmp	r3, r2
 8004902:	d00b      	beq.n	800491c <front_push_buf+0x44>

	que._data[que._head] = ch;
 8004904:	4b08      	ldr	r3, [pc, #32]	@ (8004928 <front_push_buf+0x50>)
 8004906:	881b      	ldrh	r3, [r3, #0]
 8004908:	461a      	mov	r2, r3
 800490a:	4b07      	ldr	r3, [pc, #28]	@ (8004928 <front_push_buf+0x50>)
 800490c:	4413      	add	r3, r2
 800490e:	79fa      	ldrb	r2, [r7, #7]
 8004910:	711a      	strb	r2, [r3, #4]
	que._head = pos;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	b29a      	uxth	r2, r3
 8004916:	4b04      	ldr	r3, [pc, #16]	@ (8004928 <front_push_buf+0x50>)
 8004918:	801a      	strh	r2, [r3, #0]
 800491a:	e000      	b.n	800491e <front_push_buf+0x46>
	if(pos == que._tail) return ;
 800491c:	bf00      	nop
}
 800491e:	3714      	adds	r7, #20
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr
 8004928:	2000309c 	.word	0x2000309c

0800492c <pop_buf>:

static uint8_t pop_buf(uint8_t *ch)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
	if(que._head == que._tail) return 0;
 8004934:	4b11      	ldr	r3, [pc, #68]	@ (800497c <pop_buf+0x50>)
 8004936:	881a      	ldrh	r2, [r3, #0]
 8004938:	4b10      	ldr	r3, [pc, #64]	@ (800497c <pop_buf+0x50>)
 800493a:	885b      	ldrh	r3, [r3, #2]
 800493c:	429a      	cmp	r2, r3
 800493e:	d101      	bne.n	8004944 <pop_buf+0x18>
 8004940:	2300      	movs	r3, #0
 8004942:	e015      	b.n	8004970 <pop_buf+0x44>

	*ch =  que._data[que._tail];
 8004944:	4b0d      	ldr	r3, [pc, #52]	@ (800497c <pop_buf+0x50>)
 8004946:	885b      	ldrh	r3, [r3, #2]
 8004948:	461a      	mov	r2, r3
 800494a:	4b0c      	ldr	r3, [pc, #48]	@ (800497c <pop_buf+0x50>)
 800494c:	4413      	add	r3, r2
 800494e:	791a      	ldrb	r2, [r3, #4]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	701a      	strb	r2, [r3, #0]
	que._tail = (que._tail + 1) % MAX_QUEUE_SIZE;
 8004954:	4b09      	ldr	r3, [pc, #36]	@ (800497c <pop_buf+0x50>)
 8004956:	885b      	ldrh	r3, [r3, #2]
 8004958:	3301      	adds	r3, #1
 800495a:	425a      	negs	r2, r3
 800495c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004960:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004964:	bf58      	it	pl
 8004966:	4253      	negpl	r3, r2
 8004968:	b29a      	uxth	r2, r3
 800496a:	4b04      	ldr	r3, [pc, #16]	@ (800497c <pop_buf+0x50>)
 800496c:	805a      	strh	r2, [r3, #2]

	return 1;
 800496e:	2301      	movs	r3, #1
}
 8004970:	4618      	mov	r0, r3
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	2000309c 	.word	0x2000309c

08004980 <find_cmd>:

static uint16_t find_cmd(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
	uint8_t data = 0, len = 0;
 8004986:	2300      	movs	r3, #0
 8004988:	71bb      	strb	r3, [r7, #6]
 800498a:	2300      	movs	r3, #0
 800498c:	71fb      	strb	r3, [r7, #7]

	while(pop_buf(&data)){
 800498e:	e031      	b.n	80049f4 <find_cmd+0x74>
		if((m_cfg.cmd_pos == 0)&&(data != CMD_HEAD)){
 8004990:	4b1f      	ldr	r3, [pc, #124]	@ (8004a10 <find_cmd+0x90>)
 8004992:	881b      	ldrh	r3, [r3, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d102      	bne.n	800499e <find_cmd+0x1e>
 8004998:	79bb      	ldrb	r3, [r7, #6]
 800499a:	2bef      	cmp	r3, #239	@ 0xef
 800499c:	d129      	bne.n	80049f2 <find_cmd+0x72>
			continue;
		}
		if(m_cfg.cmd_pos < MAX_CMD_SIZE){
 800499e:	4b1c      	ldr	r3, [pc, #112]	@ (8004a10 <find_cmd+0x90>)
 80049a0:	881b      	ldrh	r3, [r3, #0]
 80049a2:	2b07      	cmp	r3, #7
 80049a4:	d80a      	bhi.n	80049bc <find_cmd+0x3c>
			m_cfg.cmd_buffer[m_cfg.cmd_pos++] = data;
 80049a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004a10 <find_cmd+0x90>)
 80049a8:	881b      	ldrh	r3, [r3, #0]
 80049aa:	1c5a      	adds	r2, r3, #1
 80049ac:	b291      	uxth	r1, r2
 80049ae:	4a18      	ldr	r2, [pc, #96]	@ (8004a10 <find_cmd+0x90>)
 80049b0:	8011      	strh	r1, [r2, #0]
 80049b2:	4619      	mov	r1, r3
 80049b4:	79ba      	ldrb	r2, [r7, #6]
 80049b6:	4b16      	ldr	r3, [pc, #88]	@ (8004a10 <find_cmd+0x90>)
 80049b8:	440b      	add	r3, r1
 80049ba:	719a      	strb	r2, [r3, #6]
		}
		m_cfg.cmd_state = ((m_cfg.cmd_state<<8)|data);
 80049bc:	4b14      	ldr	r3, [pc, #80]	@ (8004a10 <find_cmd+0x90>)
 80049be:	885b      	ldrh	r3, [r3, #2]
 80049c0:	021b      	lsls	r3, r3, #8
 80049c2:	b21a      	sxth	r2, r3
 80049c4:	79bb      	ldrb	r3, [r7, #6]
 80049c6:	b21b      	sxth	r3, r3
 80049c8:	4313      	orrs	r3, r2
 80049ca:	b21b      	sxth	r3, r3
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	4b10      	ldr	r3, [pc, #64]	@ (8004a10 <find_cmd+0x90>)
 80049d0:	805a      	strh	r2, [r3, #2]
		if(m_cfg.cmd_state == CMD_TAIL){
 80049d2:	4b0f      	ldr	r3, [pc, #60]	@ (8004a10 <find_cmd+0x90>)
 80049d4:	885b      	ldrh	r3, [r3, #2]
 80049d6:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 80049da:	4293      	cmp	r3, r2
 80049dc:	d10a      	bne.n	80049f4 <find_cmd+0x74>
			len = m_cfg.cmd_pos;
 80049de:	4b0c      	ldr	r3, [pc, #48]	@ (8004a10 <find_cmd+0x90>)
 80049e0:	881b      	ldrh	r3, [r3, #0]
 80049e2:	71fb      	strb	r3, [r7, #7]
			m_cfg.cmd_state = 0;
 80049e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004a10 <find_cmd+0x90>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	805a      	strh	r2, [r3, #2]
			m_cfg.cmd_pos = 0;
 80049ea:	4b09      	ldr	r3, [pc, #36]	@ (8004a10 <find_cmd+0x90>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	801a      	strh	r2, [r3, #0]
 80049f0:	e000      	b.n	80049f4 <find_cmd+0x74>
			continue;
 80049f2:	bf00      	nop
	while(pop_buf(&data)){
 80049f4:	1dbb      	adds	r3, r7, #6
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7ff ff98 	bl	800492c <pop_buf>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1c6      	bne.n	8004990 <find_cmd+0x10>
		}
	}
	return len;
 8004a02:	79fb      	ldrb	r3, [r7, #7]
 8004a04:	b29b      	uxth	r3, r3
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3708      	adds	r7, #8
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	2000308c 	.word	0x2000308c

08004a14 <parse_front_cmd>:

static void parse_front_cmd(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
	uint8_t res[1];

	res[0] = eRESPONSE_OK;
 8004a1a:	23d0      	movs	r3, #208	@ 0xd0
 8004a1c:	713b      	strb	r3, [r7, #4]
	switch(m_cfg.cmd_buffer[2]){
 8004a1e:	4b12      	ldr	r3, [pc, #72]	@ (8004a68 <parse_front_cmd+0x54>)
 8004a20:	7a1b      	ldrb	r3, [r3, #8]
 8004a22:	2bc2      	cmp	r3, #194	@ 0xc2
 8004a24:	d011      	beq.n	8004a4a <parse_front_cmd+0x36>
 8004a26:	2bc2      	cmp	r3, #194	@ 0xc2
 8004a28:	dc16      	bgt.n	8004a58 <parse_front_cmd+0x44>
 8004a2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a2c:	d002      	beq.n	8004a34 <parse_front_cmd+0x20>
 8004a2e:	2bc1      	cmp	r3, #193	@ 0xc1
 8004a30:	d007      	beq.n	8004a42 <parse_front_cmd+0x2e>
 8004a32:	e011      	b.n	8004a58 <parse_front_cmd+0x44>
		case CMD_FR_SET_MODE:
			push_event1(EVT_remote_mode, (m_cfg.cmd_buffer[4]));
 8004a34:	4b0c      	ldr	r3, [pc, #48]	@ (8004a68 <parse_front_cmd+0x54>)
 8004a36:	7a9b      	ldrb	r3, [r3, #10]
 8004a38:	4619      	mov	r1, r3
 8004a3a:	2018      	movs	r0, #24
 8004a3c:	f7ff ff36 	bl	80048ac <push_event1>
			break;
 8004a40:	e00a      	b.n	8004a58 <parse_front_cmd+0x44>
		case CMD_FR_SELF_TEST:
			push_event0(EVT_self_test);
 8004a42:	2015      	movs	r0, #21
 8004a44:	f7ff ff1e 	bl	8004884 <push_event0>
			break;
 8004a48:	e006      	b.n	8004a58 <parse_front_cmd+0x44>
		case CMD_FR_SET_DEVID:
			push_event1(EVT_Set_DevID, m_cfg.cmd_buffer[4]);
 8004a4a:	4b07      	ldr	r3, [pc, #28]	@ (8004a68 <parse_front_cmd+0x54>)
 8004a4c:	7a9b      	ldrb	r3, [r3, #10]
 8004a4e:	4619      	mov	r1, r3
 8004a50:	201f      	movs	r0, #31
 8004a52:	f7ff ff2b 	bl	80048ac <push_event1>
			break;
 8004a56:	bf00      	nop
	}

	m_front_response(res);
 8004a58:	1d3b      	adds	r3, r7, #4
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 f842 	bl	8004ae4 <m_front_response>
}
 8004a60:	bf00      	nop
 8004a62:	3708      	adds	r7, #8
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	2000308c 	.word	0x2000308c

08004a6c <frontTask>:

void frontTask(void const * argument)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
	uint8_t size, ret;

	while(1){
		size = find_cmd();
 8004a74:	f7ff ff84 	bl	8004980 <find_cmd>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	73fb      	strb	r3, [r7, #15]
		if(size){
 8004a7c:	7bfb      	ldrb	r3, [r7, #15]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d0f8      	beq.n	8004a74 <frontTask+0x8>
			if(m_cfg.cmd_buffer[2]>=CMD_FR_SET_MODE){
 8004a82:	4b08      	ldr	r3, [pc, #32]	@ (8004aa4 <frontTask+0x38>)
 8004a84:	7a1b      	ldrb	r3, [r3, #8]
 8004a86:	2bbf      	cmp	r3, #191	@ 0xbf
 8004a88:	d902      	bls.n	8004a90 <frontTask+0x24>
				parse_front_cmd();
 8004a8a:	f7ff ffc3 	bl	8004a14 <parse_front_cmd>
 8004a8e:	e7f1      	b.n	8004a74 <frontTask+0x8>
			}else{
				ret = m_remote_front_parser(&m_cfg.cmd_buffer[2], size);
 8004a90:	7bfb      	ldrb	r3, [r7, #15]
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	4619      	mov	r1, r3
 8004a96:	4804      	ldr	r0, [pc, #16]	@ (8004aa8 <frontTask+0x3c>)
 8004a98:	f000 fa22 	bl	8004ee0 <m_remote_front_parser>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	73bb      	strb	r3, [r7, #14]
		size = find_cmd();
 8004aa0:	e7e8      	b.n	8004a74 <frontTask+0x8>
 8004aa2:	bf00      	nop
 8004aa4:	2000308c 	.word	0x2000308c
 8004aa8:	20003094 	.word	0x20003094

08004aac <m_front_update_trigger_status>:

	return ret;
}

void m_front_update_trigger_status(uint8_t trigger)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	71fb      	strb	r3, [r7, #7]
	uint8_t send_buf[]={RES_CMD_HEAD, 0x33, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF};
 8004ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8004ae0 <m_front_update_trigger_status+0x34>)
 8004ab8:	f107 0308 	add.w	r3, r7, #8
 8004abc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ac0:	e883 0003 	stmia.w	r3, {r0, r1}

	send_buf[2] = trigger;
 8004ac4:	79fb      	ldrb	r3, [r7, #7]
 8004ac6:	72bb      	strb	r3, [r7, #10]
	m_serial_send(eFRONT_UART, send_buf, MAX_CMD_SIZE);
 8004ac8:	f107 0308 	add.w	r3, r7, #8
 8004acc:	2208      	movs	r2, #8
 8004ace:	4619      	mov	r1, r3
 8004ad0:	2002      	movs	r0, #2
 8004ad2:	f000 fbc9 	bl	8005268 <m_serial_send>
}
 8004ad6:	bf00      	nop
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	0800f49c 	.word	0x0800f49c

08004ae4 <m_front_response>:

void m_front_response(uint8_t *data)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
	uint8_t send_buf[]={RES_CMD_HEAD, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF};
 8004aec:	4a0a      	ldr	r2, [pc, #40]	@ (8004b18 <m_front_response+0x34>)
 8004aee:	f107 0308 	add.w	r3, r7, #8
 8004af2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004af6:	e883 0003 	stmia.w	r3, {r0, r1}

	send_buf[1] = *data;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	727b      	strb	r3, [r7, #9]
	m_serial_send(eFRONT_UART, send_buf, MAX_CMD_SIZE);
 8004b00:	f107 0308 	add.w	r3, r7, #8
 8004b04:	2208      	movs	r2, #8
 8004b06:	4619      	mov	r1, r3
 8004b08:	2002      	movs	r0, #2
 8004b0a:	f000 fbad 	bl	8005268 <m_serial_send>
}
 8004b0e:	bf00      	nop
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	0800f4a4 	.word	0x0800f4a4

08004b1c <push_event0>:
inline static uint32_t push_event0(event_type_t event)                                      { return m_event_push(event, 0, 0, 0, NULL, 0); }
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af02      	add	r7, sp, #8
 8004b22:	4603      	mov	r3, r0
 8004b24:	71fb      	strb	r3, [r7, #7]
 8004b26:	79f8      	ldrb	r0, [r7, #7]
 8004b28:	2300      	movs	r3, #0
 8004b2a:	9301      	str	r3, [sp, #4]
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	9300      	str	r3, [sp, #0]
 8004b30:	2300      	movs	r3, #0
 8004b32:	2200      	movs	r2, #0
 8004b34:	2100      	movs	r1, #0
 8004b36:	f7fe fd1d 	bl	8003574 <m_event_push>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3708      	adds	r7, #8
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <push_event1>:
inline static uint32_t push_event1(event_type_t event, uint32_t param1)                     { return m_event_push(event, param1, 0, 0, NULL, 0); }
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af02      	add	r7, sp, #8
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	6039      	str	r1, [r7, #0]
 8004b4e:	71fb      	strb	r3, [r7, #7]
 8004b50:	79f8      	ldrb	r0, [r7, #7]
 8004b52:	2300      	movs	r3, #0
 8004b54:	9301      	str	r3, [sp, #4]
 8004b56:	2300      	movs	r3, #0
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	6839      	ldr	r1, [r7, #0]
 8004b60:	f7fe fd08 	bl	8003574 <m_event_push>
 8004b64:	4603      	mov	r3, r0
 8004b66:	4618      	mov	r0, r3
 8004b68:	3708      	adds	r7, #8
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
	...

08004b70 <remote_push_buf>:
osThreadId remoteTaskHandle;
CCMRAM static uint8_t recv_buf[MAX_RECV_BUF];
static int	front = 0, rear = 0;
static remote_mode_t old_mode;
void remote_push_buf(remote_mode_t eSource, uint8_t ch)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	4603      	mov	r3, r0
 8004b78:	460a      	mov	r2, r1
 8004b7a:	71fb      	strb	r3, [r7, #7]
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	71bb      	strb	r3, [r7, #6]
	int index = (front +1) % MAX_RECV_BUF;
 8004b80:	4b1b      	ldr	r3, [pc, #108]	@ (8004bf0 <remote_push_buf+0x80>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	3301      	adds	r3, #1
 8004b86:	425a      	negs	r2, r3
 8004b88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b8c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004b90:	bf58      	it	pl
 8004b92:	4253      	negpl	r3, r2
 8004b94:	60fb      	str	r3, [r7, #12]

	if(index == rear)
 8004b96:	4b17      	ldr	r3, [pc, #92]	@ (8004bf4 <remote_push_buf+0x84>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d021      	beq.n	8004be4 <remote_push_buf+0x74>
		return ;
	if(eSource != m_cfg.run_mode){
 8004ba0:	4b15      	ldr	r3, [pc, #84]	@ (8004bf8 <remote_push_buf+0x88>)
 8004ba2:	785b      	ldrb	r3, [r3, #1]
 8004ba4:	79fa      	ldrb	r2, [r7, #7]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d013      	beq.n	8004bd2 <remote_push_buf+0x62>
		if(old_mode != eSource){
 8004baa:	4b14      	ldr	r3, [pc, #80]	@ (8004bfc <remote_push_buf+0x8c>)
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	79fa      	ldrb	r2, [r7, #7]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d019      	beq.n	8004be8 <remote_push_buf+0x78>
			old_mode = eSource;
 8004bb4:	4a11      	ldr	r2, [pc, #68]	@ (8004bfc <remote_push_buf+0x8c>)
 8004bb6:	79fb      	ldrb	r3, [r7, #7]
 8004bb8:	7013      	strb	r3, [r2, #0]
			LOG_DBG("Skip source[%d] run_mode[%d]", eSource, m_cfg.run_mode);
 8004bba:	4b11      	ldr	r3, [pc, #68]	@ (8004c00 <remote_push_buf+0x90>)
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d912      	bls.n	8004be8 <remote_push_buf+0x78>
 8004bc2:	79fa      	ldrb	r2, [r7, #7]
 8004bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8004bf8 <remote_push_buf+0x88>)
 8004bc6:	785b      	ldrb	r3, [r3, #1]
 8004bc8:	490e      	ldr	r1, [pc, #56]	@ (8004c04 <remote_push_buf+0x94>)
 8004bca:	480f      	ldr	r0, [pc, #60]	@ (8004c08 <remote_push_buf+0x98>)
 8004bcc:	f7fb ff04 	bl	80009d8 <Printf>
		}
		return ;
 8004bd0:	e00a      	b.n	8004be8 <remote_push_buf+0x78>
	}

	front = index;
 8004bd2:	4a07      	ldr	r2, [pc, #28]	@ (8004bf0 <remote_push_buf+0x80>)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6013      	str	r3, [r2, #0]
	recv_buf[front] = ch;
 8004bd8:	4b05      	ldr	r3, [pc, #20]	@ (8004bf0 <remote_push_buf+0x80>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	490b      	ldr	r1, [pc, #44]	@ (8004c0c <remote_push_buf+0x9c>)
 8004bde:	79ba      	ldrb	r2, [r7, #6]
 8004be0:	54ca      	strb	r2, [r1, r3]
 8004be2:	e002      	b.n	8004bea <remote_push_buf+0x7a>
		return ;
 8004be4:	bf00      	nop
 8004be6:	e000      	b.n	8004bea <remote_push_buf+0x7a>
		return ;
 8004be8:	bf00      	nop
}
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	2000314c 	.word	0x2000314c
 8004bf4:	20003150 	.word	0x20003150
 8004bf8:	20000098 	.word	0x20000098
 8004bfc:	20003154 	.word	0x20003154
 8004c00:	20002adc 	.word	0x20002adc
 8004c04:	0800fa3c 	.word	0x0800fa3c
 8004c08:	0800f4d4 	.word	0x0800f4d4
 8004c0c:	10001188 	.word	0x10001188

08004c10 <remote_pop_buf>:

uint8_t remote_pop_buf(uint8_t *ch)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
	if(front == rear) return 0;
 8004c18:	4b10      	ldr	r3, [pc, #64]	@ (8004c5c <remote_pop_buf+0x4c>)
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	4b10      	ldr	r3, [pc, #64]	@ (8004c60 <remote_pop_buf+0x50>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d101      	bne.n	8004c28 <remote_pop_buf+0x18>
 8004c24:	2300      	movs	r3, #0
 8004c26:	e012      	b.n	8004c4e <remote_pop_buf+0x3e>
	rear = (rear + 1) % MAX_RECV_BUF;
 8004c28:	4b0d      	ldr	r3, [pc, #52]	@ (8004c60 <remote_pop_buf+0x50>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	425a      	negs	r2, r3
 8004c30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c34:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004c38:	bf58      	it	pl
 8004c3a:	4253      	negpl	r3, r2
 8004c3c:	4a08      	ldr	r2, [pc, #32]	@ (8004c60 <remote_pop_buf+0x50>)
 8004c3e:	6013      	str	r3, [r2, #0]
	*ch =  recv_buf[rear];
 8004c40:	4b07      	ldr	r3, [pc, #28]	@ (8004c60 <remote_pop_buf+0x50>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a07      	ldr	r2, [pc, #28]	@ (8004c64 <remote_pop_buf+0x54>)
 8004c46:	5cd2      	ldrb	r2, [r2, r3]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	701a      	strb	r2, [r3, #0]

	return 1;
 8004c4c:	2301      	movs	r3, #1
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	2000314c 	.word	0x2000314c
 8004c60:	20003150 	.word	0x20003150
 8004c64:	10001188 	.word	0x10001188

08004c68 <On_set_mode>:

static void On_set_mode(remote_mode_t mode)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	4603      	mov	r3, r0
 8004c70:	71fb      	strb	r3, [r7, #7]
	if(mode != m_cfg.run_mode){
 8004c72:	4b0b      	ldr	r3, [pc, #44]	@ (8004ca0 <On_set_mode+0x38>)
 8004c74:	785b      	ldrb	r3, [r3, #1]
 8004c76:	79fa      	ldrb	r2, [r7, #7]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d008      	beq.n	8004c8e <On_set_mode+0x26>
		if(m_cfg.run_mode != eREMOTE_NONE){
 8004c7c:	4b08      	ldr	r3, [pc, #32]	@ (8004ca0 <On_set_mode+0x38>)
 8004c7e:	785b      	ldrb	r3, [r3, #1]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d001      	beq.n	8004c88 <On_set_mode+0x20>
			fpga_set_factory_reset();
 8004c84:	f7ff fc87 	bl	8004596 <fpga_set_factory_reset>
		}
		m_cfg.run_mode = mode;
 8004c88:	4a05      	ldr	r2, [pc, #20]	@ (8004ca0 <On_set_mode+0x38>)
 8004c8a:	79fb      	ldrb	r3, [r7, #7]
 8004c8c:	7053      	strb	r3, [r2, #1]
	}
	push_event1(EVT_fpga_load_done, mode);
 8004c8e:	79fb      	ldrb	r3, [r7, #7]
 8004c90:	4619      	mov	r1, r3
 8004c92:	2019      	movs	r0, #25
 8004c94:	f7ff ff56 	bl	8004b44 <push_event1>
}
 8004c98:	bf00      	nop
 8004c9a:	3708      	adds	r7, #8
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	20000098 	.word	0x20000098

08004ca4 <m_remote_response>:

void m_remote_response(uint8_t *data)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
	uint8_t send_data[MAX_RESPONSE_LEN]={0,};
 8004cac:	2300      	movs	r3, #0
 8004cae:	60bb      	str	r3, [r7, #8]
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	60fb      	str	r3, [r7, #12]

	send_data[0] = RESPONSE_HEADER;
 8004cb4:	23df      	movs	r3, #223	@ 0xdf
 8004cb6:	723b      	strb	r3, [r7, #8]
	if(data[0] == 0x33){
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	2b33      	cmp	r3, #51	@ 0x33
 8004cbe:	d108      	bne.n	8004cd2 <m_remote_response+0x2e>
		memcpy(&send_data[1], data, 5);
 8004cc0:	f107 0308 	add.w	r3, r7, #8
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	2205      	movs	r2, #5
 8004cc8:	6879      	ldr	r1, [r7, #4]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f009 f808 	bl	800dce0 <memcpy>
 8004cd0:	e002      	b.n	8004cd8 <m_remote_response+0x34>
	}else{
		send_data[1] = data[0];
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	727b      	strb	r3, [r7, #9]
	}
	send_data[6] = 0xFE;
 8004cd8:	23fe      	movs	r3, #254	@ 0xfe
 8004cda:	73bb      	strb	r3, [r7, #14]
	send_data[7] = 0xFF;
 8004cdc:	23ff      	movs	r3, #255	@ 0xff
 8004cde:	73fb      	strb	r3, [r7, #15]

	m_serial_SendPC(send_data);
 8004ce0:	f107 0308 	add.w	r3, r7, #8
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f000 fb91 	bl	800540c <m_serial_SendPC>
}
 8004cea:	bf00      	nop
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
	...

08004cf4 <parse_command>:

    return "Unknown Command";
}

static uint8_t parse_command(remote_mode_t source, uint8_t *cmd_buf)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	6039      	str	r1, [r7, #0]
 8004cfe:	71fb      	strb	r3, [r7, #7]
	uint16_t time;
	uint32_t channel;
	uint8_t res[1] = {eRESPONSE_OK};
 8004d00:	23d0      	movs	r3, #208	@ 0xd0
 8004d02:	723b      	strb	r3, [r7, #8]

//	LOG_DBG("Recv CMD[%s]", Remote_Command_2_str(cmd_buf[0]));
//	LOG_HEX_DUMP(cmd_buf, 8,"Remote Data");
	switch(cmd_buf[0])
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	3ba0      	subs	r3, #160	@ 0xa0
 8004d0a:	2b1b      	cmp	r3, #27
 8004d0c:	f200 80c4 	bhi.w	8004e98 <parse_command+0x1a4>
 8004d10:	a201      	add	r2, pc, #4	@ (adr r2, 8004d18 <parse_command+0x24>)
 8004d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d16:	bf00      	nop
 8004d18:	08004e81 	.word	0x08004e81
 8004d1c:	08004e99 	.word	0x08004e99
 8004d20:	08004e99 	.word	0x08004e99
 8004d24:	08004e99 	.word	0x08004e99
 8004d28:	08004e99 	.word	0x08004e99
 8004d2c:	08004e99 	.word	0x08004e99
 8004d30:	08004e99 	.word	0x08004e99
 8004d34:	08004e99 	.word	0x08004e99
 8004d38:	08004e99 	.word	0x08004e99
 8004d3c:	08004e99 	.word	0x08004e99
 8004d40:	08004e99 	.word	0x08004e99
 8004d44:	08004e99 	.word	0x08004e99
 8004d48:	08004e99 	.word	0x08004e99
 8004d4c:	08004e99 	.word	0x08004e99
 8004d50:	08004e99 	.word	0x08004e99
 8004d54:	08004e99 	.word	0x08004e99
 8004d58:	08004e8d 	.word	0x08004e8d
 8004d5c:	08004d89 	.word	0x08004d89
 8004d60:	08004d9f 	.word	0x08004d9f
 8004d64:	08004dd9 	.word	0x08004dd9
 8004d68:	08004e13 	.word	0x08004e13
 8004d6c:	08004e37 	.word	0x08004e37
 8004d70:	08004e99 	.word	0x08004e99
 8004d74:	08004e99 	.word	0x08004e99
 8004d78:	08004e63 	.word	0x08004e63
 8004d7c:	08004e71 	.word	0x08004e71
 8004d80:	08004e99 	.word	0x08004e99
 8004d84:	08004e77 	.word	0x08004e77
	{
		case eCOMMAND_OUT_MODE :
			fpga_select_output(cmd_buf[2], cmd_buf[3]); // In one_one mode, ex_type should be zero..
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	3302      	adds	r3, #2
 8004d8c:	781a      	ldrb	r2, [r3, #0]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	3303      	adds	r3, #3
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	4619      	mov	r1, r3
 8004d96:	4610      	mov	r0, r2
 8004d98:	f7ff fab4 	bl	8004304 <fpga_select_output>
			break;
 8004d9c:	e07f      	b.n	8004e9e <parse_command+0x1aa>
		case eCOMMAND_ON_TIME:
			time = cmd_buf[2] << 8 | cmd_buf[3];
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	3302      	adds	r3, #2
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	021b      	lsls	r3, r3, #8
 8004da6:	b21a      	sxth	r2, r3
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	3303      	adds	r3, #3
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	b21b      	sxth	r3, r3
 8004db0:	4313      	orrs	r3, r2
 8004db2:	b21b      	sxth	r3, r3
 8004db4:	817b      	strh	r3, [r7, #10]
			fpga_set_on_time(cmd_buf[1], time);
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	3301      	adds	r3, #1
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	897a      	ldrh	r2, [r7, #10]
 8004dbe:	4611      	mov	r1, r2
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7ff fb31 	bl	8004428 <fpga_set_on_time>
			r_time.on_time[cmd_buf[1]] = time;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	3301      	adds	r3, #1
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	4619      	mov	r1, r3
 8004dce:	4a42      	ldr	r2, [pc, #264]	@ (8004ed8 <parse_command+0x1e4>)
 8004dd0:	897b      	ldrh	r3, [r7, #10]
 8004dd2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
			break;
 8004dd6:	e062      	b.n	8004e9e <parse_command+0x1aa>
		case eCOMMAND_DELAY_TIME:
			time = cmd_buf[2] << 8 | cmd_buf[3];
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	3302      	adds	r3, #2
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	021b      	lsls	r3, r3, #8
 8004de0:	b21a      	sxth	r2, r3
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	3303      	adds	r3, #3
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	b21b      	sxth	r3, r3
 8004dea:	4313      	orrs	r3, r2
 8004dec:	b21b      	sxth	r3, r3
 8004dee:	817b      	strh	r3, [r7, #10]
			fpga_set_delay_time(cmd_buf[1], time);
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	3301      	adds	r3, #1
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	897a      	ldrh	r2, [r7, #10]
 8004df8:	4611      	mov	r1, r2
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7ff fad0 	bl	80043a0 <fpga_set_delay_time>
			r_time.delay_time[cmd_buf[1]] = time;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	3301      	adds	r3, #1
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	4934      	ldr	r1, [pc, #208]	@ (8004ed8 <parse_command+0x1e4>)
 8004e08:	3308      	adds	r3, #8
 8004e0a:	897a      	ldrh	r2, [r7, #10]
 8004e0c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			break;
 8004e10:	e045      	b.n	8004e9e <parse_command+0x1aa>
		case eCOMMAND_INPUT_CHANNEL:
			channel = cmd_buf[2];
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	3302      	adds	r3, #2
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	60fb      	str	r3, [r7, #12]
			fpga_set_input_channel(0, channel);
 8004e1a:	68f9      	ldr	r1, [r7, #12]
 8004e1c:	2000      	movs	r0, #0
 8004e1e:	f7ff f9e3 	bl	80041e8 <fpga_set_input_channel>
			if(m_cfg.startRemoInit){
 8004e22:	4b2e      	ldr	r3, [pc, #184]	@ (8004edc <parse_command+0x1e8>)
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d038      	beq.n	8004e9c <parse_command+0x1a8>
				res[0] = eRESPONSE_RDY_LOAD_DONE;
 8004e2a:	23d3      	movs	r3, #211	@ 0xd3
 8004e2c:	723b      	strb	r3, [r7, #8]
				m_cfg.startRemoInit = 0;
 8004e2e:	4b2b      	ldr	r3, [pc, #172]	@ (8004edc <parse_command+0x1e8>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004e34:	e032      	b.n	8004e9c <parse_command+0x1a8>
		case eCOMMAND_OUTPUT_CHANNEL:
			channel = cmd_buf[2];
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	3302      	adds	r3, #2
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	60fb      	str	r3, [r7, #12]
			fpga_set_output_channel(0, channel);
 8004e3e:	68f9      	ldr	r1, [r7, #12]
 8004e40:	2000      	movs	r0, #0
 8004e42:	f7ff f969 	bl	8004118 <fpga_set_output_channel>
			if(channel != 0){
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d006      	beq.n	8004e5a <parse_command+0x166>
				//m_tftlcd_update_remote_time(&r_time);
				push_event0(EVT_set_remotetime);
 8004e4c:	201a      	movs	r0, #26
 8004e4e:	f7ff fe65 	bl	8004b1c <push_event0>
				push_event0(EVT_start_trigger);
 8004e52:	2013      	movs	r0, #19
 8004e54:	f7ff fe62 	bl	8004b1c <push_event0>
			}else{
				push_event0(EVT_stop_trigger);
			}
			break;
 8004e58:	e021      	b.n	8004e9e <parse_command+0x1aa>
				push_event0(EVT_stop_trigger);
 8004e5a:	2014      	movs	r0, #20
 8004e5c:	f7ff fe5e 	bl	8004b1c <push_event0>
			break;
 8004e60:	e01d      	b.n	8004e9e <parse_command+0x1aa>
		case eCOMMAND_INPUT_EDGE:
			fpga_select_edge(cmd_buf[2]);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	3302      	adds	r3, #2
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7ff fa7b 	bl	8004364 <fpga_select_edge>
			break;
 8004e6e:	e016      	b.n	8004e9e <parse_command+0x1aa>
		case eCOMMAND_FACTORY_RESET:
			fpga_set_factory_reset();
 8004e70:	f7ff fb91 	bl	8004596 <fpga_set_factory_reset>
			break;
 8004e74:	e013      	b.n	8004e9e <parse_command+0x1aa>
		case eCOMMAND_CLOSE_REMOTE:
			push_event1(EVT_remote_mode, eREMOTE_CLOSE);
 8004e76:	2104      	movs	r1, #4
 8004e78:	2018      	movs	r0, #24
 8004e7a:	f7ff fe63 	bl	8004b44 <push_event1>
			break;
 8004e7e:	e00e      	b.n	8004e9e <parse_command+0x1aa>
		case eCOMMAND_REMOTE_IP_STATUS:

			break;
		case eCOMMAND_CON_CMD:
			res[0] = eRESPONSE_CON_DONE;
 8004e80:	23d2      	movs	r3, #210	@ 0xd2
 8004e82:	723b      	strb	r3, [r7, #8]
			push_event0(EVT_stop_trigger);
 8004e84:	2014      	movs	r0, #20
 8004e86:	f7ff fe49 	bl	8004b1c <push_event0>
			break;
 8004e8a:	e008      	b.n	8004e9e <parse_command+0x1aa>
		case eCOMMAND_RDY_CMD:
			res[0] = eRESPONSE_OK;
 8004e8c:	23d0      	movs	r3, #208	@ 0xd0
 8004e8e:	723b      	strb	r3, [r7, #8]
			m_cfg.startRemoInit = 1;
 8004e90:	4b12      	ldr	r3, [pc, #72]	@ (8004edc <parse_command+0x1e8>)
 8004e92:	2201      	movs	r2, #1
 8004e94:	701a      	strb	r2, [r3, #0]
			break;
 8004e96:	e002      	b.n	8004e9e <parse_command+0x1aa>
		default:
			break;
 8004e98:	bf00      	nop
 8004e9a:	e000      	b.n	8004e9e <parse_command+0x1aa>
			break;
 8004e9c:	bf00      	nop
	}

	if(source == eREMOTE_ETHER){
 8004e9e:	79fb      	ldrb	r3, [r7, #7]
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d101      	bne.n	8004ea8 <parse_command+0x1b4>
		return res[0];
 8004ea4:	7a3b      	ldrb	r3, [r7, #8]
 8004ea6:	e012      	b.n	8004ece <parse_command+0x1da>
	}else if(source == eREMOTE_SERIAL){
 8004ea8:	79fb      	ldrb	r3, [r7, #7]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d106      	bne.n	8004ebc <parse_command+0x1c8>
		m_remote_response(res);
 8004eae:	f107 0308 	add.w	r3, r7, #8
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7ff fef6 	bl	8004ca4 <m_remote_response>
		return 0;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	e008      	b.n	8004ece <parse_command+0x1da>
	}else if(source == eREMOTE_FRONT){
 8004ebc:	79fb      	ldrb	r3, [r7, #7]
 8004ebe:	2b03      	cmp	r3, #3
 8004ec0:	d104      	bne.n	8004ecc <parse_command+0x1d8>
		m_front_response(res);
 8004ec2:	f107 0308 	add.w	r3, r7, #8
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7ff fe0c 	bl	8004ae4 <m_front_response>
	}

	return 0;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	20003120 	.word	0x20003120
 8004edc:	20000098 	.word	0x20000098

08004ee0 <m_remote_front_parser>:

uint8_t m_remote_front_parser(uint8_t *recv_buf, uint16_t size)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	460b      	mov	r3, r1
 8004eea:	807b      	strh	r3, [r7, #2]
	uint8_t ret;

	ret = parse_command(eREMOTE_FRONT, recv_buf);
 8004eec:	6879      	ldr	r1, [r7, #4]
 8004eee:	2003      	movs	r0, #3
 8004ef0:	f7ff ff00 	bl	8004cf4 <parse_command>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	73fb      	strb	r3, [r7, #15]

	return ret;
 8004ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
	...

08004f04 <m_remote_eth_parser>:

uint8_t m_remote_eth_parser(uint8_t *recv_buf, uint16_t size)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b08a      	sub	sp, #40	@ 0x28
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	807b      	strh	r3, [r7, #2]
	uint8_t *pBuf = recv_buf;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	61fb      	str	r3, [r7, #28]
	uint8_t cmd_buf[MAX_PACKET_SIZE]={0,}, cmd_pos = 0, ch, ret;
 8004f14:	2300      	movs	r3, #0
 8004f16:	613b      	str	r3, [r7, #16]
 8004f18:	f107 0314 	add.w	r3, r7, #20
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	601a      	str	r2, [r3, #0]
 8004f20:	809a      	strh	r2, [r3, #4]
 8004f22:	2300      	movs	r3, #0
 8004f24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint16_t idx = 0, cmd_tail = 0;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	847b      	strh	r3, [r7, #34]	@ 0x22
	uint8_t response[8]={RESPONSE_HEADER,eRESPONSE_OK,0,0x00,0x00,0x00,0xFE,0xFF};
 8004f30:	4a39      	ldr	r2, [pc, #228]	@ (8005018 <m_remote_eth_parser+0x114>)
 8004f32:	f107 0308 	add.w	r3, r7, #8
 8004f36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f3a:	e883 0003 	stmia.w	r3, {r0, r1}

	//LOG_DBG("Receive Eth data size [%d]", size);
	//LOG_HEX_DUMP(pBuf, size, "Remote received Data");
	while(size > idx){
 8004f3e:	e055      	b.n	8004fec <m_remote_eth_parser+0xe8>
		ch = pBuf[idx++];
 8004f40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004f42:	1c5a      	adds	r2, r3, #1
 8004f44:	84ba      	strh	r2, [r7, #36]	@ 0x24
 8004f46:	461a      	mov	r2, r3
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	76fb      	strb	r3, [r7, #27]
		if((cmd_pos == 0) && (ch != REMOTE_HEADER)){
 8004f50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d102      	bne.n	8004f5e <m_remote_eth_parser+0x5a>
 8004f58:	7efb      	ldrb	r3, [r7, #27]
 8004f5a:	2bef      	cmp	r3, #239	@ 0xef
 8004f5c:	d145      	bne.n	8004fea <m_remote_eth_parser+0xe6>
			continue;
		}

		if(cmd_pos<MAX_PACKET_SIZE){
 8004f5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f62:	2b09      	cmp	r3, #9
 8004f64:	d809      	bhi.n	8004f7a <m_remote_eth_parser+0x76>
			cmd_buf[cmd_pos++] = ch;
 8004f66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f6a:	1c5a      	adds	r2, r3, #1
 8004f6c:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8004f70:	3328      	adds	r3, #40	@ 0x28
 8004f72:	443b      	add	r3, r7
 8004f74:	7efa      	ldrb	r2, [r7, #27]
 8004f76:	f803 2c18 	strb.w	r2, [r3, #-24]
		}

		cmd_tail = ((cmd_tail<<8)| ch);
 8004f7a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004f7c:	021b      	lsls	r3, r3, #8
 8004f7e:	b21a      	sxth	r2, r3
 8004f80:	7efb      	ldrb	r3, [r7, #27]
 8004f82:	b21b      	sxth	r3, r3
 8004f84:	4313      	orrs	r3, r2
 8004f86:	b21b      	sxth	r3, r3
 8004f88:	847b      	strh	r3, [r7, #34]	@ 0x22
		if(cmd_tail == REMOTE_TAIL){
 8004f8a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004f8c:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d12b      	bne.n	8004fec <m_remote_eth_parser+0xe8>
			if(cmd_buf[1]){
 8004f94:	7c7b      	ldrb	r3, [r7, #17]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d01a      	beq.n	8004fd0 <m_remote_eth_parser+0xcc>
				if(cmd_buf[2] == eCOMMAND_REMOTE_IP_STATUS){
 8004f9a:	7cbb      	ldrb	r3, [r7, #18]
 8004f9c:	2bba      	cmp	r3, #186	@ 0xba
 8004f9e:	d106      	bne.n	8004fae <m_remote_eth_parser+0xaa>
					fpga_get_trigger_status(&response[1]);
 8004fa0:	f107 0308 	add.w	r3, r7, #8
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7ff fb58 	bl	800465c <fpga_get_trigger_status>
 8004fac:	e010      	b.n	8004fd0 <m_remote_eth_parser+0xcc>
				}else{
					ret = parse_command(eREMOTE_ETHER, &cmd_buf[2]);
 8004fae:	f107 0310 	add.w	r3, r7, #16
 8004fb2:	3302      	adds	r3, #2
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	2002      	movs	r0, #2
 8004fb8:	f7ff fe9c 	bl	8004cf4 <parse_command>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	76bb      	strb	r3, [r7, #26]
					if((ret == eRESPONSE_CON_DONE) || (ret == eRESPONSE_RDY_LOAD_DONE)){
 8004fc0:	7ebb      	ldrb	r3, [r7, #26]
 8004fc2:	2bd2      	cmp	r3, #210	@ 0xd2
 8004fc4:	d002      	beq.n	8004fcc <m_remote_eth_parser+0xc8>
 8004fc6:	7ebb      	ldrb	r3, [r7, #26]
 8004fc8:	2bd3      	cmp	r3, #211	@ 0xd3
 8004fca:	d101      	bne.n	8004fd0 <m_remote_eth_parser+0xcc>
						response[1] = ret;
 8004fcc:	7ebb      	ldrb	r3, [r7, #26]
 8004fce:	727b      	strb	r3, [r7, #9]
					}
				}
			}
			cmd_pos = 0;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			cmd_tail = 0;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	847b      	strh	r3, [r7, #34]	@ 0x22
			memset(cmd_buf, 0, MAX_PACKET_SIZE);
 8004fda:	f107 0310 	add.w	r3, r7, #16
 8004fde:	220a      	movs	r2, #10
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f008 fdf2 	bl	800dbcc <memset>
 8004fe8:	e000      	b.n	8004fec <m_remote_eth_parser+0xe8>
			continue;
 8004fea:	bf00      	nop
	while(size > idx){
 8004fec:	887a      	ldrh	r2, [r7, #2]
 8004fee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d8a5      	bhi.n	8004f40 <m_remote_eth_parser+0x3c>
		}
	}
	if(idx == size){
 8004ff4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004ff6:	887b      	ldrh	r3, [r7, #2]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d108      	bne.n	800500e <m_remote_eth_parser+0x10a>
		//LOG_HEX_DUMP(response, MAX_RESPONSE_LEN, "Eth Response Data");
		memcpy(recv_buf, response, MAX_RESPONSE_LEN);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	461a      	mov	r2, r3
 8005000:	f107 0308 	add.w	r3, r7, #8
 8005004:	cb03      	ldmia	r3!, {r0, r1}
 8005006:	6010      	str	r0, [r2, #0]
 8005008:	6051      	str	r1, [r2, #4]
		return MAX_RESPONSE_LEN;
 800500a:	2308      	movs	r3, #8
 800500c:	e000      	b.n	8005010 <m_remote_eth_parser+0x10c>
	}
	return 0;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3728      	adds	r7, #40	@ 0x28
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	0800f634 	.word	0x0800f634

0800501c <RemoteProcTask>:

static void RemoteProcTask(void const * argument)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
	uint8_t ch;
	uint8_t cmd_buf[MAX_PACKET_SIZE]={0,}, cmd_pos = 0;
 8005024:	2300      	movs	r3, #0
 8005026:	60fb      	str	r3, [r7, #12]
 8005028:	f107 0310 	add.w	r3, r7, #16
 800502c:	2200      	movs	r2, #0
 800502e:	601a      	str	r2, [r3, #0]
 8005030:	809a      	strh	r2, [r3, #4]
 8005032:	2300      	movs	r3, #0
 8005034:	75fb      	strb	r3, [r7, #23]

	LOG_DBG("Remote proc Task Start!!");
 8005036:	4b2e      	ldr	r3, [pc, #184]	@ (80050f0 <RemoteProcTask+0xd4>)
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	2b02      	cmp	r3, #2
 800503c:	d903      	bls.n	8005046 <RemoteProcTask+0x2a>
 800503e:	492d      	ldr	r1, [pc, #180]	@ (80050f4 <RemoteProcTask+0xd8>)
 8005040:	482d      	ldr	r0, [pc, #180]	@ (80050f8 <RemoteProcTask+0xdc>)
 8005042:	f7fb fcc9 	bl	80009d8 <Printf>
	while(1){
		if(m_cfg.run_mode != eREMOTE_SERIAL){
 8005046:	4b2d      	ldr	r3, [pc, #180]	@ (80050fc <RemoteProcTask+0xe0>)
 8005048:	785b      	ldrb	r3, [r3, #1]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d003      	beq.n	8005056 <RemoteProcTask+0x3a>
			osDelay(100);
 800504e:	2064      	movs	r0, #100	@ 0x64
 8005050:	f005 f867 	bl	800a122 <osDelay>
			continue;
 8005054:	e04a      	b.n	80050ec <RemoteProcTask+0xd0>
		}

		if(remote_pop_buf(&ch)){
 8005056:	f107 0316 	add.w	r3, r7, #22
 800505a:	4618      	mov	r0, r3
 800505c:	f7ff fdd8 	bl	8004c10 <remote_pop_buf>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d03f      	beq.n	80050e6 <RemoteProcTask+0xca>
			if((cmd_pos == 0) && (ch != REMOTE_HEADER) ){
 8005066:	7dfb      	ldrb	r3, [r7, #23]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d106      	bne.n	800507a <RemoteProcTask+0x5e>
 800506c:	7dbb      	ldrb	r3, [r7, #22]
 800506e:	2bef      	cmp	r3, #239	@ 0xef
 8005070:	d003      	beq.n	800507a <RemoteProcTask+0x5e>
				osDelay(10);
 8005072:	200a      	movs	r0, #10
 8005074:	f005 f855 	bl	800a122 <osDelay>
				continue;
 8005078:	e038      	b.n	80050ec <RemoteProcTask+0xd0>
			}

			if(cmd_pos<MAX_PACKET_SIZE){
 800507a:	7dfb      	ldrb	r3, [r7, #23]
 800507c:	2b09      	cmp	r3, #9
 800507e:	d807      	bhi.n	8005090 <RemoteProcTask+0x74>
				cmd_buf[cmd_pos++] = ch;
 8005080:	7dfb      	ldrb	r3, [r7, #23]
 8005082:	1c5a      	adds	r2, r3, #1
 8005084:	75fa      	strb	r2, [r7, #23]
 8005086:	7dba      	ldrb	r2, [r7, #22]
 8005088:	3318      	adds	r3, #24
 800508a:	443b      	add	r3, r7
 800508c:	f803 2c0c 	strb.w	r2, [r3, #-12]
			}

			m_cfg.cmd_tail = ((m_cfg.cmd_tail<<8)| ch);
 8005090:	4b1a      	ldr	r3, [pc, #104]	@ (80050fc <RemoteProcTask+0xe0>)
 8005092:	885b      	ldrh	r3, [r3, #2]
 8005094:	021b      	lsls	r3, r3, #8
 8005096:	b21a      	sxth	r2, r3
 8005098:	7dbb      	ldrb	r3, [r7, #22]
 800509a:	b21b      	sxth	r3, r3
 800509c:	4313      	orrs	r3, r2
 800509e:	b21b      	sxth	r3, r3
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	4b16      	ldr	r3, [pc, #88]	@ (80050fc <RemoteProcTask+0xe0>)
 80050a4:	805a      	strh	r2, [r3, #2]
			if(m_cfg.cmd_tail == REMOTE_TAIL){
 80050a6:	4b15      	ldr	r3, [pc, #84]	@ (80050fc <RemoteProcTask+0xe0>)
 80050a8:	885b      	ldrh	r3, [r3, #2]
 80050aa:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d1c9      	bne.n	8005046 <RemoteProcTask+0x2a>
				if(cmd_buf[1]){ // Write
 80050b2:	7b7b      	ldrb	r3, [r7, #13]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d0c6      	beq.n	8005046 <RemoteProcTask+0x2a>
					//LOG_HEX_DUMP(cmd_buf, 10, "Remote received Data");
					parse_command(eREMOTE_SERIAL, &cmd_buf[2]);
 80050b8:	f107 030c 	add.w	r3, r7, #12
 80050bc:	3302      	adds	r3, #2
 80050be:	4619      	mov	r1, r3
 80050c0:	2001      	movs	r0, #1
 80050c2:	f7ff fe17 	bl	8004cf4 <parse_command>
					cmd_pos = 0;
 80050c6:	2300      	movs	r3, #0
 80050c8:	75fb      	strb	r3, [r7, #23]
					m_cfg.cmd_tail = 0;
 80050ca:	4b0c      	ldr	r3, [pc, #48]	@ (80050fc <RemoteProcTask+0xe0>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	805a      	strh	r2, [r3, #2]
					memset(cmd_buf, 0, MAX_PACKET_SIZE);
 80050d0:	f107 030c 	add.w	r3, r7, #12
 80050d4:	220a      	movs	r2, #10
 80050d6:	2100      	movs	r1, #0
 80050d8:	4618      	mov	r0, r3
 80050da:	f008 fd77 	bl	800dbcc <memset>
					osDelay(1);
 80050de:	2001      	movs	r0, #1
 80050e0:	f005 f81f 	bl	800a122 <osDelay>
 80050e4:	e7af      	b.n	8005046 <RemoteProcTask+0x2a>
				}
			}
		}else{
			osDelay(10);
 80050e6:	200a      	movs	r0, #10
 80050e8:	f005 f81b 	bl	800a122 <osDelay>
		if(m_cfg.run_mode != eREMOTE_SERIAL){
 80050ec:	e7ab      	b.n	8005046 <RemoteProcTask+0x2a>
 80050ee:	bf00      	nop
 80050f0:	20002adc 	.word	0x20002adc
 80050f4:	0800fa4c 	.word	0x0800fa4c
 80050f8:	0800f63c 	.word	0x0800f63c
 80050fc:	20000098 	.word	0x20000098

08005100 <evt_handler>:
		}
	}
}

static void evt_handler(event_t const* evt, void* p_context)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
	switch(evt->event){
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	2b18      	cmp	r3, #24
 8005110:	d106      	bne.n	8005120 <evt_handler+0x20>
		case EVT_remote_mode:
			On_set_mode(evt->param1);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	b2db      	uxtb	r3, r3
 8005118:	4618      	mov	r0, r3
 800511a:	f7ff fda5 	bl	8004c68 <On_set_mode>
			break;
 800511e:	e000      	b.n	8005122 <evt_handler+0x22>
		default:
			break;
 8005120:	bf00      	nop
	}
}
 8005122:	bf00      	nop
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
	...

0800512c <remote_proc_init>:

uint8_t remote_proc_init(void)
{
 800512c:	b5b0      	push	{r4, r5, r7, lr}
 800512e:	b088      	sub	sp, #32
 8005130:	af00      	add	r7, sp, #0
	osThreadDef(remoteProc, RemoteProcTask, osPriorityNormal, 0, 512);
 8005132:	4b19      	ldr	r3, [pc, #100]	@ (8005198 <remote_proc_init+0x6c>)
 8005134:	1d3c      	adds	r4, r7, #4
 8005136:	461d      	mov	r5, r3
 8005138:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800513a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800513c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005140:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	remoteTaskHandle = osThreadCreate(osThread(remoteProc), NULL);
 8005144:	1d3b      	adds	r3, r7, #4
 8005146:	2100      	movs	r1, #0
 8005148:	4618      	mov	r0, r3
 800514a:	f004 ff9e 	bl	800a08a <osThreadCreate>
 800514e:	4603      	mov	r3, r0
 8005150:	4a12      	ldr	r2, [pc, #72]	@ (800519c <remote_proc_init+0x70>)
 8005152:	6013      	str	r3, [r2, #0]
	if(remoteTaskHandle == NULL){
 8005154:	4b11      	ldr	r3, [pc, #68]	@ (800519c <remote_proc_init+0x70>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d101      	bne.n	8005160 <remote_proc_init+0x34>
		return 1;
 800515c:	2301      	movs	r3, #1
 800515e:	e016      	b.n	800518e <remote_proc_init+0x62>
	}

	remote_event.handler = evt_handler;
 8005160:	4b0f      	ldr	r3, [pc, #60]	@ (80051a0 <remote_proc_init+0x74>)
 8005162:	4a10      	ldr	r2, [pc, #64]	@ (80051a4 <remote_proc_init+0x78>)
 8005164:	601a      	str	r2, [r3, #0]
	remote_event.p_context = NULL;
 8005166:	4b0e      	ldr	r3, [pc, #56]	@ (80051a0 <remote_proc_init+0x74>)
 8005168:	2200      	movs	r2, #0
 800516a:	605a      	str	r2, [r3, #4]
	if(m_event_register(&remote_event)){
 800516c:	480c      	ldr	r0, [pc, #48]	@ (80051a0 <remote_proc_init+0x74>)
 800516e:	f7fe f9d7 	bl	8003520 <m_event_register>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d009      	beq.n	800518c <remote_proc_init+0x60>
		LOG_DBG("Register Remote Processor event Error");
 8005178:	4b0b      	ldr	r3, [pc, #44]	@ (80051a8 <remote_proc_init+0x7c>)
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	2b02      	cmp	r3, #2
 800517e:	d903      	bls.n	8005188 <remote_proc_init+0x5c>
 8005180:	490a      	ldr	r1, [pc, #40]	@ (80051ac <remote_proc_init+0x80>)
 8005182:	480b      	ldr	r0, [pc, #44]	@ (80051b0 <remote_proc_init+0x84>)
 8005184:	f7fb fc28 	bl	80009d8 <Printf>
		return 1;
 8005188:	2301      	movs	r3, #1
 800518a:	e000      	b.n	800518e <remote_proc_init+0x62>
	}

	return 0;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3720      	adds	r7, #32
 8005192:	46bd      	mov	sp, r7
 8005194:	bdb0      	pop	{r4, r5, r7, pc}
 8005196:	bf00      	nop
 8005198:	0800f6a0 	.word	0x0800f6a0
 800519c:	20003148 	.word	0x20003148
 80051a0:	20003140 	.word	0x20003140
 80051a4:	08005101 	.word	0x08005101
 80051a8:	20002adc 	.word	0x20002adc
 80051ac:	0800fa5c 	.word	0x0800fa5c
 80051b0:	0800f660 	.word	0x0800f660

080051b4 <HAL_UART_RxCpltCallback>:
#endif

/* Private function prototypes -----------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
	/* Console */
	if ( huart->Instance == USART6 ){
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a18      	ldr	r2, [pc, #96]	@ (8005224 <HAL_UART_RxCpltCallback+0x70>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d10a      	bne.n	80051dc <HAL_UART_RxCpltCallback+0x28>
		fpga_push_buf(Fpga_rx_buf[0]);
 80051c6:	4b18      	ldr	r3, [pc, #96]	@ (8005228 <HAL_UART_RxCpltCallback+0x74>)
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7fe ff46 	bl	800405c <fpga_push_buf>
		HAL_UART_Receive_IT(FPGA_UART , &Fpga_rx_buf[0], 1 );
 80051d0:	2201      	movs	r2, #1
 80051d2:	4915      	ldr	r1, [pc, #84]	@ (8005228 <HAL_UART_RxCpltCallback+0x74>)
 80051d4:	4815      	ldr	r0, [pc, #84]	@ (800522c <HAL_UART_RxCpltCallback+0x78>)
 80051d6:	f003 ff98 	bl	800910a <HAL_UART_Receive_IT>
		HAL_UART_Receive_IT(EXT_UART , &Ext_rx_buf[0], 1 );
	}else if(huart->Instance == USART2){
		front_push_buf(Front_rx_buf[0]);
		HAL_UART_Receive_IT(FRONT_UART , &Front_rx_buf[0], 1 );
	}
}
 80051da:	e01f      	b.n	800521c <HAL_UART_RxCpltCallback+0x68>
	}else if(huart->Instance == USART1){
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a13      	ldr	r2, [pc, #76]	@ (8005230 <HAL_UART_RxCpltCallback+0x7c>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d10b      	bne.n	80051fe <HAL_UART_RxCpltCallback+0x4a>
		remote_push_buf(eREMOTE_SERIAL, Ext_rx_buf[0]);
 80051e6:	4b13      	ldr	r3, [pc, #76]	@ (8005234 <HAL_UART_RxCpltCallback+0x80>)
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	4619      	mov	r1, r3
 80051ec:	2001      	movs	r0, #1
 80051ee:	f7ff fcbf 	bl	8004b70 <remote_push_buf>
		HAL_UART_Receive_IT(EXT_UART , &Ext_rx_buf[0], 1 );
 80051f2:	2201      	movs	r2, #1
 80051f4:	490f      	ldr	r1, [pc, #60]	@ (8005234 <HAL_UART_RxCpltCallback+0x80>)
 80051f6:	4810      	ldr	r0, [pc, #64]	@ (8005238 <HAL_UART_RxCpltCallback+0x84>)
 80051f8:	f003 ff87 	bl	800910a <HAL_UART_Receive_IT>
}
 80051fc:	e00e      	b.n	800521c <HAL_UART_RxCpltCallback+0x68>
	}else if(huart->Instance == USART2){
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a0e      	ldr	r2, [pc, #56]	@ (800523c <HAL_UART_RxCpltCallback+0x88>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d109      	bne.n	800521c <HAL_UART_RxCpltCallback+0x68>
		front_push_buf(Front_rx_buf[0]);
 8005208:	4b0d      	ldr	r3, [pc, #52]	@ (8005240 <HAL_UART_RxCpltCallback+0x8c>)
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	4618      	mov	r0, r3
 800520e:	f7ff fb63 	bl	80048d8 <front_push_buf>
		HAL_UART_Receive_IT(FRONT_UART , &Front_rx_buf[0], 1 );
 8005212:	2201      	movs	r2, #1
 8005214:	490a      	ldr	r1, [pc, #40]	@ (8005240 <HAL_UART_RxCpltCallback+0x8c>)
 8005216:	480b      	ldr	r0, [pc, #44]	@ (8005244 <HAL_UART_RxCpltCallback+0x90>)
 8005218:	f003 ff77 	bl	800910a <HAL_UART_Receive_IT>
}
 800521c:	bf00      	nop
 800521e:	3708      	adds	r7, #8
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	40011400 	.word	0x40011400
 8005228:	20003158 	.word	0x20003158
 800522c:	20002c70 	.word	0x20002c70
 8005230:	40011000 	.word	0x40011000
 8005234:	20003160 	.word	0x20003160
 8005238:	20002b98 	.word	0x20002b98
 800523c:	40004400 	.word	0x40004400
 8005240:	2000315c 	.word	0x2000315c
 8005244:	20002be0 	.word	0x20002be0

08005248 <HAL_UART_TxCpltCallback>:

#if USE_SEND_IT
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
	g_tx_complete = 1;
 8005250:	4b04      	ldr	r3, [pc, #16]	@ (8005264 <HAL_UART_TxCpltCallback+0x1c>)
 8005252:	2201      	movs	r2, #1
 8005254:	701a      	strb	r2, [r3, #0]
}
 8005256:	bf00      	nop
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	20003161 	.word	0x20003161

08005268 <m_serial_send>:
#endif

int m_serial_send(eUartDev dest, uint8_t *send_data, uint32_t len)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b088      	sub	sp, #32
 800526c:	af00      	add	r7, sp, #0
 800526e:	4603      	mov	r3, r0
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
 8005274:	73fb      	strb	r3, [r7, #15]
	UART_HandleTypeDef *huart = FPGA_UART;
 8005276:	4b5c      	ldr	r3, [pc, #368]	@ (80053e8 <m_serial_send+0x180>)
 8005278:	61fb      	str	r3, [r7, #28]
	int error, timeout = 0;
 800527a:	2300      	movs	r3, #0
 800527c:	617b      	str	r3, [r7, #20]
//	char str_buf[30];

	if(dest == eFRONT_UART)
 800527e:	7bfb      	ldrb	r3, [r7, #15]
 8005280:	2b02      	cmp	r3, #2
 8005282:	d102      	bne.n	800528a <m_serial_send+0x22>
		huart = FRONT_UART;
 8005284:	4b59      	ldr	r3, [pc, #356]	@ (80053ec <m_serial_send+0x184>)
 8005286:	61fb      	str	r3, [r7, #28]
 8005288:	e017      	b.n	80052ba <m_serial_send+0x52>
	else if(dest == eEXT_UART)
 800528a:	7bfb      	ldrb	r3, [r7, #15]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d114      	bne.n	80052ba <m_serial_send+0x52>
		huart = EXT_UART;
 8005290:	4b57      	ldr	r3, [pc, #348]	@ (80053f0 <m_serial_send+0x188>)
 8005292:	61fb      	str	r3, [r7, #28]
//		LOG_HEX_DUMP(send_data, len, "FPGA Send Data");
//	}
//	if(dest ==eEXT_UART){
//		LOG_HEX_DUMP(send_data, len, "Send PC Data");
//	}
	while(huart->gState != HAL_UART_STATE_READY){
 8005294:	e011      	b.n	80052ba <m_serial_send+0x52>
		osDelay(10);
 8005296:	200a      	movs	r0, #10
 8005298:	f004 ff43 	bl	800a122 <osDelay>
		if(timeout++ > 10){
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	1c5a      	adds	r2, r3, #1
 80052a0:	617a      	str	r2, [r7, #20]
 80052a2:	2b0a      	cmp	r3, #10
 80052a4:	dd09      	ble.n	80052ba <m_serial_send+0x52>
			LOG_DBG("Uart busy....");
 80052a6:	4b53      	ldr	r3, [pc, #332]	@ (80053f4 <m_serial_send+0x18c>)
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d903      	bls.n	80052b6 <m_serial_send+0x4e>
 80052ae:	4952      	ldr	r1, [pc, #328]	@ (80053f8 <m_serial_send+0x190>)
 80052b0:	4852      	ldr	r0, [pc, #328]	@ (80053fc <m_serial_send+0x194>)
 80052b2:	f7fb fb91 	bl	80009d8 <Printf>
			timeout = 0;
 80052b6:	2300      	movs	r3, #0
 80052b8:	617b      	str	r3, [r7, #20]
	while(huart->gState != HAL_UART_STATE_READY){
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b20      	cmp	r3, #32
 80052c4:	d1e7      	bne.n	8005296 <m_serial_send+0x2e>
		}
	}
	timeout = 0;
 80052c6:	2300      	movs	r3, #0
 80052c8:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < 3; i++){
 80052ca:	2300      	movs	r3, #0
 80052cc:	613b      	str	r3, [r7, #16]
 80052ce:	e011      	b.n	80052f4 <m_serial_send+0x8c>
		error = HAL_UART_Transmit_IT (huart, send_data, len);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	461a      	mov	r2, r3
 80052d6:	68b9      	ldr	r1, [r7, #8]
 80052d8:	69f8      	ldr	r0, [r7, #28]
 80052da:	f003 fee0 	bl	800909e <HAL_UART_Transmit_IT>
 80052de:	4603      	mov	r3, r0
 80052e0:	61bb      	str	r3, [r7, #24]
		if (error == HAL_OK){
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d009      	beq.n	80052fc <m_serial_send+0x94>
			break;
		}
		osDelay(10);
 80052e8:	200a      	movs	r0, #10
 80052ea:	f004 ff1a 	bl	800a122 <osDelay>
	for(int i = 0; i < 3; i++){
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	3301      	adds	r3, #1
 80052f2:	613b      	str	r3, [r7, #16]
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	ddea      	ble.n	80052d0 <m_serial_send+0x68>
 80052fa:	e000      	b.n	80052fe <m_serial_send+0x96>
			break;
 80052fc:	bf00      	nop
	}
	if (error != HAL_OK){
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d036      	beq.n	8005372 <m_serial_send+0x10a>
		RETURN_IF_ERROR(error);
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d033      	beq.n	8005372 <m_serial_send+0x10a>
 800530a:	4b3a      	ldr	r3, [pc, #232]	@ (80053f4 <m_serial_send+0x18c>)
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d003      	beq.n	800531a <m_serial_send+0xb2>
 8005312:	4939      	ldr	r1, [pc, #228]	@ (80053f8 <m_serial_send+0x190>)
 8005314:	483a      	ldr	r0, [pc, #232]	@ (8005400 <m_serial_send+0x198>)
 8005316:	f7fb fb5f 	bl	80009d8 <Printf>
 800531a:	4b36      	ldr	r3, [pc, #216]	@ (80053f4 <m_serial_send+0x18c>)
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d005      	beq.n	800532e <m_serial_send+0xc6>
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	2269      	movs	r2, #105	@ 0x69
 8005326:	4934      	ldr	r1, [pc, #208]	@ (80053f8 <m_serial_send+0x190>)
 8005328:	4836      	ldr	r0, [pc, #216]	@ (8005404 <m_serial_send+0x19c>)
 800532a:	f7fb fb55 	bl	80009d8 <Printf>
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	e056      	b.n	80053e0 <m_serial_send+0x178>
	}

	while(HAL_UART_GetState(huart) == HAL_UART_STATE_BUSY_TX || HAL_UART_GetState(huart) == HAL_UART_STATE_BUSY_TX_RX){
		if(timeout++ > UART_TIME_OUT){
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	1c5a      	adds	r2, r3, #1
 8005336:	617a      	str	r2, [r7, #20]
 8005338:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800533c:	dd16      	ble.n	800536c <m_serial_send+0x104>
			RETURN_IF_ERROR(error);
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d013      	beq.n	800536c <m_serial_send+0x104>
 8005344:	4b2b      	ldr	r3, [pc, #172]	@ (80053f4 <m_serial_send+0x18c>)
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d003      	beq.n	8005354 <m_serial_send+0xec>
 800534c:	492a      	ldr	r1, [pc, #168]	@ (80053f8 <m_serial_send+0x190>)
 800534e:	482c      	ldr	r0, [pc, #176]	@ (8005400 <m_serial_send+0x198>)
 8005350:	f7fb fb42 	bl	80009d8 <Printf>
 8005354:	4b27      	ldr	r3, [pc, #156]	@ (80053f4 <m_serial_send+0x18c>)
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d005      	beq.n	8005368 <m_serial_send+0x100>
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	226e      	movs	r2, #110	@ 0x6e
 8005360:	4925      	ldr	r1, [pc, #148]	@ (80053f8 <m_serial_send+0x190>)
 8005362:	4828      	ldr	r0, [pc, #160]	@ (8005404 <m_serial_send+0x19c>)
 8005364:	f7fb fb38 	bl	80009d8 <Printf>
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	e039      	b.n	80053e0 <m_serial_send+0x178>
		}
		osDelay(10);
 800536c:	200a      	movs	r0, #10
 800536e:	f004 fed8 	bl	800a122 <osDelay>
	while(HAL_UART_GetState(huart) == HAL_UART_STATE_BUSY_TX || HAL_UART_GetState(huart) == HAL_UART_STATE_BUSY_TX_RX){
 8005372:	69f8      	ldr	r0, [r7, #28]
 8005374:	f004 f996 	bl	80096a4 <HAL_UART_GetState>
 8005378:	4603      	mov	r3, r0
 800537a:	2b21      	cmp	r3, #33	@ 0x21
 800537c:	d0d9      	beq.n	8005332 <m_serial_send+0xca>
 800537e:	69f8      	ldr	r0, [r7, #28]
 8005380:	f004 f990 	bl	80096a4 <HAL_UART_GetState>
 8005384:	4603      	mov	r3, r0
 8005386:	2b23      	cmp	r3, #35	@ 0x23
 8005388:	d0d3      	beq.n	8005332 <m_serial_send+0xca>
	}

	timeout = 0;
 800538a:	2300      	movs	r3, #0
 800538c:	617b      	str	r3, [r7, #20]
	while(g_tx_complete == 0){
 800538e:	e022      	b.n	80053d6 <m_serial_send+0x16e>
		if(timeout++ > UART_TIME_OUT){
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	1c5a      	adds	r2, r3, #1
 8005394:	617a      	str	r2, [r7, #20]
 8005396:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800539a:	dd19      	ble.n	80053d0 <m_serial_send+0x168>
			g_tx_complete = 0;
 800539c:	4b1a      	ldr	r3, [pc, #104]	@ (8005408 <m_serial_send+0x1a0>)
 800539e:	2200      	movs	r2, #0
 80053a0:	701a      	strb	r2, [r3, #0]
			RETURN_IF_ERROR(error);
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d013      	beq.n	80053d0 <m_serial_send+0x168>
 80053a8:	4b12      	ldr	r3, [pc, #72]	@ (80053f4 <m_serial_send+0x18c>)
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d003      	beq.n	80053b8 <m_serial_send+0x150>
 80053b0:	4911      	ldr	r1, [pc, #68]	@ (80053f8 <m_serial_send+0x190>)
 80053b2:	4813      	ldr	r0, [pc, #76]	@ (8005400 <m_serial_send+0x198>)
 80053b4:	f7fb fb10 	bl	80009d8 <Printf>
 80053b8:	4b0e      	ldr	r3, [pc, #56]	@ (80053f4 <m_serial_send+0x18c>)
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d005      	beq.n	80053cc <m_serial_send+0x164>
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	2277      	movs	r2, #119	@ 0x77
 80053c4:	490c      	ldr	r1, [pc, #48]	@ (80053f8 <m_serial_send+0x190>)
 80053c6:	480f      	ldr	r0, [pc, #60]	@ (8005404 <m_serial_send+0x19c>)
 80053c8:	f7fb fb06 	bl	80009d8 <Printf>
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	e007      	b.n	80053e0 <m_serial_send+0x178>
		}
		osDelay(10);
 80053d0:	200a      	movs	r0, #10
 80053d2:	f004 fea6 	bl	800a122 <osDelay>
	while(g_tx_complete == 0){
 80053d6:	4b0c      	ldr	r3, [pc, #48]	@ (8005408 <m_serial_send+0x1a0>)
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d0d8      	beq.n	8005390 <m_serial_send+0x128>

	error = HAL_UART_Transmit(huart, send_data, len, UART_TIME_OUT);
	RETURN_IF_ERROR(error);
#endif

	return error;
 80053de:	69bb      	ldr	r3, [r7, #24]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3720      	adds	r7, #32
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	20002c70 	.word	0x20002c70
 80053ec:	20002be0 	.word	0x20002be0
 80053f0:	20002b98 	.word	0x20002b98
 80053f4:	20002adc 	.word	0x20002adc
 80053f8:	0800fa70 	.word	0x0800fa70
 80053fc:	0800f6bc 	.word	0x0800f6bc
 8005400:	0800f6d8 	.word	0x0800f6d8
 8005404:	0800f704 	.word	0x0800f704
 8005408:	20003161 	.word	0x20003161

0800540c <m_serial_SendPC>:

void m_serial_SendPC(uint8_t *data)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
	//LOG_HEX_DUMP(data, MAX_RESPONSE_LEN, "Remote Send Data");
	m_serial_send(eEXT_UART, data, MAX_RESPONSE_LEN);
 8005414:	2208      	movs	r2, #8
 8005416:	6879      	ldr	r1, [r7, #4]
 8005418:	2000      	movs	r0, #0
 800541a:	f7ff ff25 	bl	8005268 <m_serial_send>
}
 800541e:	bf00      	nop
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
	...

08005428 <m_serial_init>:

int m_serial_init(void)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
	int err_code;

	LOG_INF("Serial Init");
 800542e:	4b29      	ldr	r3, [pc, #164]	@ (80054d4 <m_serial_init+0xac>)
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	2b03      	cmp	r3, #3
 8005434:	d903      	bls.n	800543e <m_serial_init+0x16>
 8005436:	4928      	ldr	r1, [pc, #160]	@ (80054d8 <m_serial_init+0xb0>)
 8005438:	4828      	ldr	r0, [pc, #160]	@ (80054dc <m_serial_init+0xb4>)
 800543a:	f7fb facd 	bl	80009d8 <Printf>
	//osDelay(300);

	err_code = fpga_proc_init();
 800543e:	f7ff f9f1 	bl	8004824 <fpga_proc_init>
 8005442:	4603      	mov	r3, r0
 8005444:	607b      	str	r3, [r7, #4]
	RETURN_IF_ERROR(err_code);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d013      	beq.n	8005474 <m_serial_init+0x4c>
 800544c:	4b21      	ldr	r3, [pc, #132]	@ (80054d4 <m_serial_init+0xac>)
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d003      	beq.n	800545c <m_serial_init+0x34>
 8005454:	4920      	ldr	r1, [pc, #128]	@ (80054d8 <m_serial_init+0xb0>)
 8005456:	4822      	ldr	r0, [pc, #136]	@ (80054e0 <m_serial_init+0xb8>)
 8005458:	f7fb fabe 	bl	80009d8 <Printf>
 800545c:	4b1d      	ldr	r3, [pc, #116]	@ (80054d4 <m_serial_init+0xac>)
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d005      	beq.n	8005470 <m_serial_init+0x48>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	229c      	movs	r2, #156	@ 0x9c
 8005468:	491b      	ldr	r1, [pc, #108]	@ (80054d8 <m_serial_init+0xb0>)
 800546a:	481e      	ldr	r0, [pc, #120]	@ (80054e4 <m_serial_init+0xbc>)
 800546c:	f7fb fab4 	bl	80009d8 <Printf>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	e02a      	b.n	80054ca <m_serial_init+0xa2>

	err_code = remote_proc_init();
 8005474:	f7ff fe5a 	bl	800512c <remote_proc_init>
 8005478:	4603      	mov	r3, r0
 800547a:	607b      	str	r3, [r7, #4]
	RETURN_IF_ERROR(err_code);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d013      	beq.n	80054aa <m_serial_init+0x82>
 8005482:	4b14      	ldr	r3, [pc, #80]	@ (80054d4 <m_serial_init+0xac>)
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d003      	beq.n	8005492 <m_serial_init+0x6a>
 800548a:	4913      	ldr	r1, [pc, #76]	@ (80054d8 <m_serial_init+0xb0>)
 800548c:	4814      	ldr	r0, [pc, #80]	@ (80054e0 <m_serial_init+0xb8>)
 800548e:	f7fb faa3 	bl	80009d8 <Printf>
 8005492:	4b10      	ldr	r3, [pc, #64]	@ (80054d4 <m_serial_init+0xac>)
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d005      	beq.n	80054a6 <m_serial_init+0x7e>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	229f      	movs	r2, #159	@ 0x9f
 800549e:	490e      	ldr	r1, [pc, #56]	@ (80054d8 <m_serial_init+0xb0>)
 80054a0:	4810      	ldr	r0, [pc, #64]	@ (80054e4 <m_serial_init+0xbc>)
 80054a2:	f7fb fa99 	bl	80009d8 <Printf>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	e00f      	b.n	80054ca <m_serial_init+0xa2>

	HAL_UART_Receive_IT(FPGA_UART, &Fpga_rx_buf[0], 1);
 80054aa:	2201      	movs	r2, #1
 80054ac:	490e      	ldr	r1, [pc, #56]	@ (80054e8 <m_serial_init+0xc0>)
 80054ae:	480f      	ldr	r0, [pc, #60]	@ (80054ec <m_serial_init+0xc4>)
 80054b0:	f003 fe2b 	bl	800910a <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(EXT_UART, &Ext_rx_buf[0], 1);
 80054b4:	2201      	movs	r2, #1
 80054b6:	490e      	ldr	r1, [pc, #56]	@ (80054f0 <m_serial_init+0xc8>)
 80054b8:	480e      	ldr	r0, [pc, #56]	@ (80054f4 <m_serial_init+0xcc>)
 80054ba:	f003 fe26 	bl	800910a <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(FRONT_UART, &Front_rx_buf[0], 1);
 80054be:	2201      	movs	r2, #1
 80054c0:	490d      	ldr	r1, [pc, #52]	@ (80054f8 <m_serial_init+0xd0>)
 80054c2:	480e      	ldr	r0, [pc, #56]	@ (80054fc <m_serial_init+0xd4>)
 80054c4:	f003 fe21 	bl	800910a <HAL_UART_Receive_IT>

	return 0;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3708      	adds	r7, #8
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	20002adc 	.word	0x20002adc
 80054d8:	0800fa80 	.word	0x0800fa80
 80054dc:	0800f73c 	.word	0x0800f73c
 80054e0:	0800f6d8 	.word	0x0800f6d8
 80054e4:	0800f704 	.word	0x0800f704
 80054e8:	20003158 	.word	0x20003158
 80054ec:	20002c70 	.word	0x20002c70
 80054f0:	20003160 	.word	0x20003160
 80054f4:	20002b98 	.word	0x20002b98
 80054f8:	2000315c 	.word	0x2000315c
 80054fc:	20002be0 	.word	0x20002be0

08005500 <crc32_ieee>:

/* Private function prototypes -----------------------------------------------*/
uint32_t crc32_ieee_update(uint32_t crc, const uint8_t *data, size_t len);

uint32_t crc32_ieee(const uint8_t *data, size_t len)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
	return crc32_ieee_update(0x0, data, len);
 800550a:	683a      	ldr	r2, [r7, #0]
 800550c:	6879      	ldr	r1, [r7, #4]
 800550e:	2000      	movs	r0, #0
 8005510:	f000 f806 	bl	8005520 <crc32_ieee_update>
 8005514:	4603      	mov	r3, r0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3708      	adds	r7, #8
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
	...

08005520 <crc32_ieee_update>:

uint32_t crc32_ieee_update(uint32_t crc, const uint8_t *data, size_t len)
{
 8005520:	b480      	push	{r7}
 8005522:	b087      	sub	sp, #28
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
		0x76dc4190U, 0x6b6b51f4U, 0x4db26158U, 0x5005713cU,
		0xedb88320U, 0xf00f9344U, 0xd6d6a3e8U, 0xcb61b38cU,
		0x9b64c2b0U, 0x86d3d2d4U, 0xa00ae278U, 0xbdbdf21cU,
	};

	crc = ~crc;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	43db      	mvns	r3, r3
 8005530:	60fb      	str	r3, [r7, #12]

	for (size_t i = 0; i < len; i++) {
 8005532:	2300      	movs	r3, #0
 8005534:	617b      	str	r3, [r7, #20]
 8005536:	e022      	b.n	800557e <crc32_ieee_update+0x5e>
		uint8_t byte = data[i];
 8005538:	68ba      	ldr	r2, [r7, #8]
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	4413      	add	r3, r2
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	74fb      	strb	r3, [r7, #19]

		crc = (crc >> 4) ^ table[(crc ^ byte) & 0x0f];
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	091a      	lsrs	r2, r3, #4
 8005546:	7cf9      	ldrb	r1, [r7, #19]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	404b      	eors	r3, r1
 800554c:	f003 030f 	and.w	r3, r3, #15
 8005550:	4911      	ldr	r1, [pc, #68]	@ (8005598 <crc32_ieee_update+0x78>)
 8005552:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005556:	4053      	eors	r3, r2
 8005558:	60fb      	str	r3, [r7, #12]
		crc = (crc >> 4) ^ table[(crc ^ ((uint32_t)byte >> 4)) & 0x0f];
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	091a      	lsrs	r2, r3, #4
 800555e:	7cfb      	ldrb	r3, [r7, #19]
 8005560:	091b      	lsrs	r3, r3, #4
 8005562:	b2db      	uxtb	r3, r3
 8005564:	4619      	mov	r1, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	404b      	eors	r3, r1
 800556a:	f003 030f 	and.w	r3, r3, #15
 800556e:	490a      	ldr	r1, [pc, #40]	@ (8005598 <crc32_ieee_update+0x78>)
 8005570:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005574:	4053      	eors	r3, r2
 8005576:	60fb      	str	r3, [r7, #12]
	for (size_t i = 0; i < len; i++) {
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	3301      	adds	r3, #1
 800557c:	617b      	str	r3, [r7, #20]
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	429a      	cmp	r2, r3
 8005584:	d3d8      	bcc.n	8005538 <crc32_ieee_update+0x18>
	}

	return (~crc);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	43db      	mvns	r3, r3
}
 800558a:	4618      	mov	r0, r3
 800558c:	371c      	adds	r7, #28
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	0800fa90 	.word	0x0800fa90

0800559c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800559c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80055d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80055a0:	f7fc fa48 	bl	8001a34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80055a4:	480c      	ldr	r0, [pc, #48]	@ (80055d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80055a6:	490d      	ldr	r1, [pc, #52]	@ (80055dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80055a8:	4a0d      	ldr	r2, [pc, #52]	@ (80055e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80055aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80055ac:	e002      	b.n	80055b4 <LoopCopyDataInit>

080055ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80055ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055b2:	3304      	adds	r3, #4

080055b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80055b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80055b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80055b8:	d3f9      	bcc.n	80055ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80055ba:	4a0a      	ldr	r2, [pc, #40]	@ (80055e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80055bc:	4c0a      	ldr	r4, [pc, #40]	@ (80055e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80055be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80055c0:	e001      	b.n	80055c6 <LoopFillZerobss>

080055c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80055c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80055c4:	3204      	adds	r2, #4

080055c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80055c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80055c8:	d3fb      	bcc.n	80055c2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80055ca:	f008 fb63 	bl	800dc94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80055ce:	f7fb fc85 	bl	8000edc <main>
  bx  lr    
 80055d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80055d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80055d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80055dc:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 80055e0:	0800fb14 	.word	0x0800fb14
  ldr r2, =_sbss
 80055e4:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 80055e8:	20013564 	.word	0x20013564

080055ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80055ec:	e7fe      	b.n	80055ec <ADC_IRQHandler>

080055ee <Ethernet_Init>:

/**
 * Initialize the ENC28J60 using default chip select pin
 * Flash the 2 MagJack LEDs
 */
void Ethernet_Init(uint8_t* macaddr) {
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b084      	sub	sp, #16
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
	int f;
	/* initialize enc28j60 */
	ENC28J60_Init(macaddr);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f9e8 	bl	80059cc <ENC28J60_Init>
	ENC28J60_Clkout(2); // change clkout from 6.25MHz to 12.5MHz
 80055fc:	2002      	movs	r0, #2
 80055fe:	f000 f9d4 	bl	80059aa <ENC28J60_Clkout>
	ENC28J60_DelayMs(10);
 8005602:	200a      	movs	r0, #10
 8005604:	f7fd fcb2 	bl	8002f6c <ENC28J60_DelayMs>

	for (f = 0; f < 3; f++) {
 8005608:	2300      	movs	r3, #0
 800560a:	60fb      	str	r3, [r7, #12]
 800560c:	e014      	b.n	8005638 <Ethernet_Init+0x4a>
		// 0x880 is PHLCON LEDB=on, LEDA=on
		// ENC28J60_PhyWrite(PHLCON,0b0011 1000 1000 00 00);
		ENC28J60_PhyWrite(PHLCON, 0x3880);
 800560e:	f44f 5162 	mov.w	r1, #14464	@ 0x3880
 8005612:	2014      	movs	r0, #20
 8005614:	f000 f99d 	bl	8005952 <ENC28J60_PhyWrite>
		ENC28J60_DelayMs(500);
 8005618:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800561c:	f7fd fca6 	bl	8002f6c <ENC28J60_DelayMs>

		// 0x990 is PHLCON LEDB=off, LEDA=off
		// ENC28J60_PhyWrite(PHLCON,0b0011 1001 1001 00 00);
		ENC28J60_PhyWrite(PHLCON, 0x3990);
 8005620:	f643 1190 	movw	r1, #14736	@ 0x3990
 8005624:	2014      	movs	r0, #20
 8005626:	f000 f994 	bl	8005952 <ENC28J60_PhyWrite>
		ENC28J60_DelayMs(500);
 800562a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800562e:	f7fd fc9d 	bl	8002f6c <ENC28J60_DelayMs>
	for (f = 0; f < 3; f++) {
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	3301      	adds	r3, #1
 8005636:	60fb      	str	r3, [r7, #12]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2b02      	cmp	r3, #2
 800563c:	dde7      	ble.n	800560e <Ethernet_Init+0x20>
	}

	// 0x476 is PHLCON LEDA=links status, LEDB=receive/transmit
	// ENC28J60_PhyWrite(PHLCON,0b0011 0100 0111 01 10);
	ENC28J60_PhyWrite(PHLCON, 0x3476);
 800563e:	f243 4176 	movw	r1, #13430	@ 0x3476
 8005642:	2014      	movs	r0, #20
 8005644:	f000 f985 	bl	8005952 <ENC28J60_PhyWrite>
	ENC28J60_DelayMs(100);
 8005648:	2064      	movs	r0, #100	@ 0x64
 800564a:	f7fd fc8f 	bl	8002f6c <ENC28J60_DelayMs>
}
 800564e:	bf00      	nop
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <Ethernet_Revision>:

uint8_t Ethernet_Read(uint8_t address) {
	return ENC28J60_Read(address);
}

uint8_t Ethernet_Revision(void) {
 8005656:	b580      	push	{r7, lr}
 8005658:	af00      	add	r7, sp, #0
	return ENC28J60_Getrev();
 800565a:	f000 fa51 	bl	8005b00 <ENC28J60_Getrev>
 800565e:	4603      	mov	r3, r0
}
 8005660:	4618      	mov	r0, r3
 8005662:	bd80      	pop	{r7, pc}

08005664 <Ethernet_PacketReceive>:

void Ethernet_PhyWrite(uint8_t address, uint16_t data) {
	ENC28J60_PhyWrite(address, data);
}

uint16_t Ethernet_PacketReceive(uint16_t len, uint8_t* packet) {
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	4603      	mov	r3, r0
 800566c:	6039      	str	r1, [r7, #0]
 800566e:	80fb      	strh	r3, [r7, #6]
	return ENC28J60_PacketReceive(len, packet);
 8005670:	88fb      	ldrh	r3, [r7, #6]
 8005672:	6839      	ldr	r1, [r7, #0]
 8005674:	4618      	mov	r0, r3
 8005676:	f000 faa7 	bl	8005bc8 <ENC28J60_PacketReceive>
 800567a:	4603      	mov	r3, r0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3708      	adds	r7, #8
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <Ethernet_init_ip_arp_udp_tcp>:

void Ethernet_PacketSend(uint16_t len, uint8_t* packet) {
	ENC28J60_PacketSend(len, packet);
}

void Ethernet_init_ip_arp_udp_tcp(uint8_t *mymac, uint8_t *myip, uint16_t wwwp) {
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	4613      	mov	r3, r2
 8005690:	80fb      	strh	r3, [r7, #6]
	init_ip_arp_udp_tcp(mymac, myip, wwwp);
 8005692:	88fb      	ldrh	r3, [r7, #6]
 8005694:	461a      	mov	r2, r3
 8005696:	68b9      	ldr	r1, [r7, #8]
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f7fc fb5b 	bl	8001d54 <init_ip_arp_udp_tcp>
}
 800569e:	bf00      	nop
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <Ethernet_packetloop_icmp_tcp>:

uint16_t Ethernet_get_tcp_data_pointer(void) {
	return get_tcp_data_pointer();
}

uint16_t Ethernet_packetloop_icmp_tcp(uint8_t *buf, uint16_t plen) {
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b082      	sub	sp, #8
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
 80056ae:	460b      	mov	r3, r1
 80056b0:	807b      	strh	r3, [r7, #2]
	return packetloop_icmp_tcp(buf, plen);
 80056b2:	887b      	ldrh	r3, [r7, #2]
 80056b4:	4619      	mov	r1, r3
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f7fd f8d4 	bl	8002864 <packetloop_icmp_tcp>
 80056bc:	4603      	mov	r3, r0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3708      	adds	r7, #8
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <Ethernet_wb_server_reply>:

void Ethernet_www_server_reply(uint8_t *buf, uint16_t dlen) {
	www_server_reply(buf, dlen);
}

void Ethernet_wb_server_reply(uint8_t *buf, uint16_t dlen) {
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b082      	sub	sp, #8
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
 80056ce:	460b      	mov	r3, r1
 80056d0:	807b      	strh	r3, [r7, #2]
	wb_server_reply(buf, dlen);
 80056d2:	887b      	ldrh	r3, [r7, #2]
 80056d4:	4619      	mov	r1, r3
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f7fc fed4 	bl	8002484 <wb_server_reply>
}
 80056dc:	bf00      	nop
 80056de:	3708      	adds	r7, #8
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <Ethernet_client_set_gwip>:
uint8_t Ethernet_client_store_gw_mac(uint8_t *buf) {
	return client_store_gw_mac(buf);
}

void Ethernet_client_set_gwip(uint8_t *gwipaddr) {
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
	client_set_gwip(gwipaddr);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f7fc ffb7 	bl	8002660 <client_set_gwip>
}
 80056f2:	bf00      	nop
 80056f4:	3708      	adds	r7, #8
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <ENC28J60_ReadOp>:
//
//__weak uint8_t ENC28J60_TransceiveByte(uint8_t data) {
//	return 0;
//}

uint8_t ENC28J60_ReadOp(uint8_t op, uint8_t address) {
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b084      	sub	sp, #16
 80056fe:	af00      	add	r7, sp, #0
 8005700:	4603      	mov	r3, r0
 8005702:	460a      	mov	r2, r1
 8005704:	71fb      	strb	r3, [r7, #7]
 8005706:	4613      	mov	r3, r2
 8005708:	71bb      	strb	r3, [r7, #6]
	uint8_t temp;
	ENC28J60_EnableChip();
 800570a:	f7fd fc3b 	bl	8002f84 <ENC28J60_EnableChip>
	ENC28J60_TransceiveByte(op | (address & ADDR_MASK));
 800570e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005712:	f003 031f 	and.w	r3, r3, #31
 8005716:	b25a      	sxtb	r2, r3
 8005718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800571c:	4313      	orrs	r3, r2
 800571e:	b25b      	sxtb	r3, r3
 8005720:	b2db      	uxtb	r3, r3
 8005722:	4618      	mov	r0, r3
 8005724:	f7fd fc46 	bl	8002fb4 <ENC28J60_TransceiveByte>
	temp = ENC28J60_TransceiveByte(0xFF);
 8005728:	20ff      	movs	r0, #255	@ 0xff
 800572a:	f7fd fc43 	bl	8002fb4 <ENC28J60_TransceiveByte>
 800572e:	4603      	mov	r3, r0
 8005730:	73fb      	strb	r3, [r7, #15]
	if (address & 0x80)
 8005732:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005736:	2b00      	cmp	r3, #0
 8005738:	da04      	bge.n	8005744 <ENC28J60_ReadOp+0x4a>
		temp = ENC28J60_TransceiveByte(0xFF);
 800573a:	20ff      	movs	r0, #255	@ 0xff
 800573c:	f7fd fc3a 	bl	8002fb4 <ENC28J60_TransceiveByte>
 8005740:	4603      	mov	r3, r0
 8005742:	73fb      	strb	r3, [r7, #15]
	ENC28J60_DisableChip();
 8005744:	f7fd fc2a 	bl	8002f9c <ENC28J60_DisableChip>
	return temp;
 8005748:	7bfb      	ldrb	r3, [r7, #15]
}
 800574a:	4618      	mov	r0, r3
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <ENC28J60_WriteOp>:

void ENC28J60_WriteOp(uint8_t op, uint8_t address, uint8_t data) {
 8005752:	b580      	push	{r7, lr}
 8005754:	b082      	sub	sp, #8
 8005756:	af00      	add	r7, sp, #0
 8005758:	4603      	mov	r3, r0
 800575a:	71fb      	strb	r3, [r7, #7]
 800575c:	460b      	mov	r3, r1
 800575e:	71bb      	strb	r3, [r7, #6]
 8005760:	4613      	mov	r3, r2
 8005762:	717b      	strb	r3, [r7, #5]
	ENC28J60_EnableChip();
 8005764:	f7fd fc0e 	bl	8002f84 <ENC28J60_EnableChip>
	ENC28J60_TransceiveByte(op | (address & ADDR_MASK));
 8005768:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800576c:	f003 031f 	and.w	r3, r3, #31
 8005770:	b25a      	sxtb	r2, r3
 8005772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005776:	4313      	orrs	r3, r2
 8005778:	b25b      	sxtb	r3, r3
 800577a:	b2db      	uxtb	r3, r3
 800577c:	4618      	mov	r0, r3
 800577e:	f7fd fc19 	bl	8002fb4 <ENC28J60_TransceiveByte>
	ENC28J60_TransceiveByte(data);
 8005782:	797b      	ldrb	r3, [r7, #5]
 8005784:	4618      	mov	r0, r3
 8005786:	f7fd fc15 	bl	8002fb4 <ENC28J60_TransceiveByte>
	ENC28J60_DisableChip();
 800578a:	f7fd fc07 	bl	8002f9c <ENC28J60_DisableChip>
}
 800578e:	bf00      	nop
 8005790:	3708      	adds	r7, #8
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <ENC28J60_ReadBuffer>:
	ENC28J60_WriteOp(ENC28J60_BIT_FIELD_CLR, ECON2, ECON2_PWRSV);
	while (!ENC28J60_Read(ESTAT) & ESTAT_CLKRDY)
		;
}

void ENC28J60_ReadBuffer(uint16_t len, uint8_t *data) {
 8005796:	b590      	push	{r4, r7, lr}
 8005798:	b083      	sub	sp, #12
 800579a:	af00      	add	r7, sp, #0
 800579c:	4603      	mov	r3, r0
 800579e:	6039      	str	r1, [r7, #0]
 80057a0:	80fb      	strh	r3, [r7, #6]
	ENC28J60_EnableChip();
 80057a2:	f7fd fbef 	bl	8002f84 <ENC28J60_EnableChip>
	ENC28J60_TransceiveByte(ENC28J60_READ_BUF_MEM);
 80057a6:	203a      	movs	r0, #58	@ 0x3a
 80057a8:	f7fd fc04 	bl	8002fb4 <ENC28J60_TransceiveByte>
	while (len--) {
 80057ac:	e007      	b.n	80057be <ENC28J60_ReadBuffer+0x28>
		*data++ = ENC28J60_TransceiveByte(0x00);
 80057ae:	683c      	ldr	r4, [r7, #0]
 80057b0:	1c63      	adds	r3, r4, #1
 80057b2:	603b      	str	r3, [r7, #0]
 80057b4:	2000      	movs	r0, #0
 80057b6:	f7fd fbfd 	bl	8002fb4 <ENC28J60_TransceiveByte>
 80057ba:	4603      	mov	r3, r0
 80057bc:	7023      	strb	r3, [r4, #0]
	while (len--) {
 80057be:	88fb      	ldrh	r3, [r7, #6]
 80057c0:	1e5a      	subs	r2, r3, #1
 80057c2:	80fa      	strh	r2, [r7, #6]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1f2      	bne.n	80057ae <ENC28J60_ReadBuffer+0x18>
	}
	ENC28J60_DisableChip();
 80057c8:	f7fd fbe8 	bl	8002f9c <ENC28J60_DisableChip>
}
 80057cc:	bf00      	nop
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd90      	pop	{r4, r7, pc}

080057d4 <ENC28J60_ReadBufferWord>:

static uint16_t ENC28J60_ReadBufferWord() {
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
	uint16_t result;
	ENC28J60_ReadBuffer(2, (uint8_t*) &result);
 80057da:	1dbb      	adds	r3, r7, #6
 80057dc:	4619      	mov	r1, r3
 80057de:	2002      	movs	r0, #2
 80057e0:	f7ff ffd9 	bl	8005796 <ENC28J60_ReadBuffer>
	return result;
 80057e4:	88fb      	ldrh	r3, [r7, #6]
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3708      	adds	r7, #8
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <ENC28J60_WriteBuffer>:

void ENC28J60_WriteBuffer(uint16_t len, uint8_t* data) {
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b082      	sub	sp, #8
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	4603      	mov	r3, r0
 80057f6:	6039      	str	r1, [r7, #0]
 80057f8:	80fb      	strh	r3, [r7, #6]
	ENC28J60_EnableChip();
 80057fa:	f7fd fbc3 	bl	8002f84 <ENC28J60_EnableChip>
	ENC28J60_TransceiveByte(ENC28J60_WRITE_BUF_MEM);
 80057fe:	207a      	movs	r0, #122	@ 0x7a
 8005800:	f7fd fbd8 	bl	8002fb4 <ENC28J60_TransceiveByte>
	while (len--)
 8005804:	e006      	b.n	8005814 <ENC28J60_WriteBuffer+0x26>
		ENC28J60_TransceiveByte(*data++);
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	1c5a      	adds	r2, r3, #1
 800580a:	603a      	str	r2, [r7, #0]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	4618      	mov	r0, r3
 8005810:	f7fd fbd0 	bl	8002fb4 <ENC28J60_TransceiveByte>
	while (len--)
 8005814:	88fb      	ldrh	r3, [r7, #6]
 8005816:	1e5a      	subs	r2, r3, #1
 8005818:	80fa      	strh	r2, [r7, #6]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1f3      	bne.n	8005806 <ENC28J60_WriteBuffer+0x18>
	ENC28J60_DisableChip();
 800581e:	f7fd fbbd 	bl	8002f9c <ENC28J60_DisableChip>
}
 8005822:	bf00      	nop
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
	...

0800582c <ENC28J60_SetBank>:

void ENC28J60_SetBank(uint8_t address) {
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	4603      	mov	r3, r0
 8005834:	71fb      	strb	r3, [r7, #7]
	if ((address & BANK_MASK) != CurrentBank) {
 8005836:	79fb      	ldrb	r3, [r7, #7]
 8005838:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800583c:	4a0d      	ldr	r2, [pc, #52]	@ (8005874 <ENC28J60_SetBank+0x48>)
 800583e:	7812      	ldrb	r2, [r2, #0]
 8005840:	4293      	cmp	r3, r2
 8005842:	d013      	beq.n	800586c <ENC28J60_SetBank+0x40>
		ENC28J60_WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_BSEL1 | ECON1_BSEL0);
 8005844:	2203      	movs	r2, #3
 8005846:	211f      	movs	r1, #31
 8005848:	20a0      	movs	r0, #160	@ 0xa0
 800584a:	f7ff ff82 	bl	8005752 <ENC28J60_WriteOp>
		CurrentBank = address & BANK_MASK;
 800584e:	79fb      	ldrb	r3, [r7, #7]
 8005850:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005854:	b2da      	uxtb	r2, r3
 8005856:	4b07      	ldr	r3, [pc, #28]	@ (8005874 <ENC28J60_SetBank+0x48>)
 8005858:	701a      	strb	r2, [r3, #0]
		ENC28J60_WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, CurrentBank >> 5);
 800585a:	4b06      	ldr	r3, [pc, #24]	@ (8005874 <ENC28J60_SetBank+0x48>)
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	095b      	lsrs	r3, r3, #5
 8005860:	b2db      	uxtb	r3, r3
 8005862:	461a      	mov	r2, r3
 8005864:	211f      	movs	r1, #31
 8005866:	2080      	movs	r0, #128	@ 0x80
 8005868:	f7ff ff73 	bl	8005752 <ENC28J60_WriteOp>
	}
}
 800586c:	bf00      	nop
 800586e:	3708      	adds	r7, #8
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	20003162 	.word	0x20003162

08005878 <ENC28J60_Read>:

uint8_t ENC28J60_Read(uint8_t address) {
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	4603      	mov	r3, r0
 8005880:	71fb      	strb	r3, [r7, #7]
	// set the bank
	ENC28J60_SetBank(address);
 8005882:	79fb      	ldrb	r3, [r7, #7]
 8005884:	4618      	mov	r0, r3
 8005886:	f7ff ffd1 	bl	800582c <ENC28J60_SetBank>
	// do the read
	return ENC28J60_ReadOp(ENC28J60_READ_CTRL_REG, address);
 800588a:	79fb      	ldrb	r3, [r7, #7]
 800588c:	4619      	mov	r1, r3
 800588e:	2000      	movs	r0, #0
 8005890:	f7ff ff33 	bl	80056fa <ENC28J60_ReadOp>
 8005894:	4603      	mov	r3, r0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3708      	adds	r7, #8
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <ENC28J60_WriteWord>:

void ENC28J60_WriteWord(uint8_t address, uint16_t data) {
 800589e:	b580      	push	{r7, lr}
 80058a0:	b082      	sub	sp, #8
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	4603      	mov	r3, r0
 80058a6:	460a      	mov	r2, r1
 80058a8:	71fb      	strb	r3, [r7, #7]
 80058aa:	4613      	mov	r3, r2
 80058ac:	80bb      	strh	r3, [r7, #4]
	ENC28J60_Write(address, data & 0xff);
 80058ae:	88bb      	ldrh	r3, [r7, #4]
 80058b0:	b2da      	uxtb	r2, r3
 80058b2:	79fb      	ldrb	r3, [r7, #7]
 80058b4:	4611      	mov	r1, r2
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 f835 	bl	8005926 <ENC28J60_Write>
	ENC28J60_Write(address + 1, data >> 8);
 80058bc:	79fb      	ldrb	r3, [r7, #7]
 80058be:	3301      	adds	r3, #1
 80058c0:	b2da      	uxtb	r2, r3
 80058c2:	88bb      	ldrh	r3, [r7, #4]
 80058c4:	0a1b      	lsrs	r3, r3, #8
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	4619      	mov	r1, r3
 80058cc:	4610      	mov	r0, r2
 80058ce:	f000 f82a 	bl	8005926 <ENC28J60_Write>
}
 80058d2:	bf00      	nop
 80058d4:	3708      	adds	r7, #8
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <ENC28J60_PhyReadH>:

// read upper 8 bits
uint16_t ENC28J60_PhyReadH(uint8_t address) {
 80058da:	b580      	push	{r7, lr}
 80058dc:	b082      	sub	sp, #8
 80058de:	af00      	add	r7, sp, #0
 80058e0:	4603      	mov	r3, r0
 80058e2:	71fb      	strb	r3, [r7, #7]
	// Set the right address and start the register read operation
	ENC28J60_Write(MIREGADR, address);
 80058e4:	79fb      	ldrb	r3, [r7, #7]
 80058e6:	4619      	mov	r1, r3
 80058e8:	20d4      	movs	r0, #212	@ 0xd4
 80058ea:	f000 f81c 	bl	8005926 <ENC28J60_Write>
	ENC28J60_Write(MICMD, MICMD_MIIRD);
 80058ee:	2101      	movs	r1, #1
 80058f0:	20d2      	movs	r0, #210	@ 0xd2
 80058f2:	f000 f818 	bl	8005926 <ENC28J60_Write>
	ENC28J60_DelayUs(15);
 80058f6:	200f      	movs	r0, #15
 80058f8:	f7fd fb24 	bl	8002f44 <ENC28J60_DelayUs>

	// wait until the PHY read completes
	while (ENC28J60_Read(MISTAT) & MISTAT_BUSY)
 80058fc:	bf00      	nop
 80058fe:	20ea      	movs	r0, #234	@ 0xea
 8005900:	f7ff ffba 	bl	8005878 <ENC28J60_Read>
 8005904:	4603      	mov	r3, r0
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1f7      	bne.n	80058fe <ENC28J60_PhyReadH+0x24>
		;

	// reset reading bit
	ENC28J60_Write(MICMD, 0x00);
 800590e:	2100      	movs	r1, #0
 8005910:	20d2      	movs	r0, #210	@ 0xd2
 8005912:	f000 f808 	bl	8005926 <ENC28J60_Write>

	return (ENC28J60_Read(MIRDH));
 8005916:	20d9      	movs	r0, #217	@ 0xd9
 8005918:	f7ff ffae 	bl	8005878 <ENC28J60_Read>
 800591c:	4603      	mov	r3, r0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3708      	adds	r7, #8
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <ENC28J60_Write>:

void ENC28J60_Write(uint8_t address, uint8_t data) {
 8005926:	b580      	push	{r7, lr}
 8005928:	b082      	sub	sp, #8
 800592a:	af00      	add	r7, sp, #0
 800592c:	4603      	mov	r3, r0
 800592e:	460a      	mov	r2, r1
 8005930:	71fb      	strb	r3, [r7, #7]
 8005932:	4613      	mov	r3, r2
 8005934:	71bb      	strb	r3, [r7, #6]
	// set the bank
	ENC28J60_SetBank(address);
 8005936:	79fb      	ldrb	r3, [r7, #7]
 8005938:	4618      	mov	r0, r3
 800593a:	f7ff ff77 	bl	800582c <ENC28J60_SetBank>
	// do the write
	ENC28J60_WriteOp(ENC28J60_WRITE_CTRL_REG, address, data);
 800593e:	79ba      	ldrb	r2, [r7, #6]
 8005940:	79fb      	ldrb	r3, [r7, #7]
 8005942:	4619      	mov	r1, r3
 8005944:	2040      	movs	r0, #64	@ 0x40
 8005946:	f7ff ff04 	bl	8005752 <ENC28J60_WriteOp>
}
 800594a:	bf00      	nop
 800594c:	3708      	adds	r7, #8
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <ENC28J60_PhyWrite>:

void ENC28J60_PhyWrite(uint8_t address, uint16_t data) {
 8005952:	b580      	push	{r7, lr}
 8005954:	b082      	sub	sp, #8
 8005956:	af00      	add	r7, sp, #0
 8005958:	4603      	mov	r3, r0
 800595a:	460a      	mov	r2, r1
 800595c:	71fb      	strb	r3, [r7, #7]
 800595e:	4613      	mov	r3, r2
 8005960:	80bb      	strh	r3, [r7, #4]
	// set the PHY register address
	ENC28J60_Write(MIREGADR, address);
 8005962:	79fb      	ldrb	r3, [r7, #7]
 8005964:	4619      	mov	r1, r3
 8005966:	20d4      	movs	r0, #212	@ 0xd4
 8005968:	f7ff ffdd 	bl	8005926 <ENC28J60_Write>
	// write the PHY data
	ENC28J60_Write(MIWRL, data);
 800596c:	88bb      	ldrh	r3, [r7, #4]
 800596e:	b2db      	uxtb	r3, r3
 8005970:	4619      	mov	r1, r3
 8005972:	20d6      	movs	r0, #214	@ 0xd6
 8005974:	f7ff ffd7 	bl	8005926 <ENC28J60_Write>
	ENC28J60_Write(MIWRH, data >> 8);
 8005978:	88bb      	ldrh	r3, [r7, #4]
 800597a:	0a1b      	lsrs	r3, r3, #8
 800597c:	b29b      	uxth	r3, r3
 800597e:	b2db      	uxtb	r3, r3
 8005980:	4619      	mov	r1, r3
 8005982:	20d7      	movs	r0, #215	@ 0xd7
 8005984:	f7ff ffcf 	bl	8005926 <ENC28J60_Write>
	// wait until the PHY write completes
	while (ENC28J60_Read(MISTAT) & MISTAT_BUSY) {
 8005988:	e002      	b.n	8005990 <ENC28J60_PhyWrite+0x3e>
		ENC28J60_DelayUs(15);
 800598a:	200f      	movs	r0, #15
 800598c:	f7fd fada 	bl	8002f44 <ENC28J60_DelayUs>
	while (ENC28J60_Read(MISTAT) & MISTAT_BUSY) {
 8005990:	20ea      	movs	r0, #234	@ 0xea
 8005992:	f7ff ff71 	bl	8005878 <ENC28J60_Read>
 8005996:	4603      	mov	r3, r0
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1f4      	bne.n	800598a <ENC28J60_PhyWrite+0x38>
	}
}
 80059a0:	bf00      	nop
 80059a2:	bf00      	nop
 80059a4:	3708      	adds	r7, #8
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <ENC28J60_Clkout>:
 ENC28J60_WriteWord(MIWRL, data);
 while (ENC28J60_ReadByte(MISTAT) & MISTAT_BUSY)
 ;
 }
 */
void ENC28J60_Clkout(uint8_t clk) {
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b082      	sub	sp, #8
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	4603      	mov	r3, r0
 80059b2:	71fb      	strb	r3, [r7, #7]
	//setup clkout: 2 is 12.5MHz:
	ENC28J60_Write(ECOCON, clk & 0x7);
 80059b4:	79fb      	ldrb	r3, [r7, #7]
 80059b6:	f003 0307 	and.w	r3, r3, #7
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	4619      	mov	r1, r3
 80059be:	2075      	movs	r0, #117	@ 0x75
 80059c0:	f7ff ffb1 	bl	8005926 <ENC28J60_Write>
}
 80059c4:	bf00      	nop
 80059c6:	3708      	adds	r7, #8
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <ENC28J60_Init>:

void ENC28J60_Init(uint8_t* macaddr) {
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
	ENC28J60_EnableChip();
 80059d4:	f7fd fad6 	bl	8002f84 <ENC28J60_EnableChip>

	// perform system reset
	ENC28J60_WriteOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
 80059d8:	22ff      	movs	r2, #255	@ 0xff
 80059da:	2100      	movs	r1, #0
 80059dc:	20ff      	movs	r0, #255	@ 0xff
 80059de:	f7ff feb8 	bl	8005752 <ENC28J60_WriteOp>
	ENC28J60_DelayMs(50);
 80059e2:	2032      	movs	r0, #50	@ 0x32
 80059e4:	f7fd fac2 	bl	8002f6c <ENC28J60_DelayMs>
	//while(!(ENC28J60_Read(ESTAT) & ESTAT_CLKRDY));
	// do bank 0 stuff
	// initialize receive buffer
	// 16-bit transfers, must write low byte first
	// set receive buffer start address
	gNextPacketPtr = RXSTART_INIT;
 80059e8:	4b43      	ldr	r3, [pc, #268]	@ (8005af8 <ENC28J60_Init+0x12c>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	801a      	strh	r2, [r3, #0]
	// Rx start
	ENC28J60_WriteWord(ERXSTL, RXSTART_INIT);
 80059ee:	2100      	movs	r1, #0
 80059f0:	2008      	movs	r0, #8
 80059f2:	f7ff ff54 	bl	800589e <ENC28J60_WriteWord>
	// set receive pointer address
	ENC28J60_WriteWord(ERXRDPTL, RXSTART_INIT);
 80059f6:	2100      	movs	r1, #0
 80059f8:	200c      	movs	r0, #12
 80059fa:	f7ff ff50 	bl	800589e <ENC28J60_WriteWord>
	// RX end
	ENC28J60_WriteWord(ERXNDL, RXSTOP_INIT);
 80059fe:	f641 11fe 	movw	r1, #6654	@ 0x19fe
 8005a02:	200a      	movs	r0, #10
 8005a04:	f7ff ff4b 	bl	800589e <ENC28J60_WriteWord>
	// TX start
	ENC28J60_WriteWord(ETXSTL, TXSTART_INIT);
 8005a08:	f641 11ff 	movw	r1, #6655	@ 0x19ff
 8005a0c:	2004      	movs	r0, #4
 8005a0e:	f7ff ff46 	bl	800589e <ENC28J60_WriteWord>
	// TX end
	ENC28J60_WriteWord(ETXNDL, TXSTOP_INIT);
 8005a12:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 8005a16:	2006      	movs	r0, #6
 8005a18:	f7ff ff41 	bl	800589e <ENC28J60_WriteWord>
	// This is hex 303F->EPMM0=0x3f,EPMM1=0x30

	//ENC28J60_Write(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN);
	//Change to add ERXFCON_BCEN recommended by epam
	//ENC28J60_Write(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN|ERXFCON_BCEN);
	erxfcon = ERXFCON_UCEN | ERXFCON_CRCEN | ERXFCON_PMEN | ERXFCON_BCEN;
 8005a1c:	4b37      	ldr	r3, [pc, #220]	@ (8005afc <ENC28J60_Init+0x130>)
 8005a1e:	22b1      	movs	r2, #177	@ 0xb1
 8005a20:	701a      	strb	r2, [r3, #0]
	ENC28J60_Write(ERXFCON, erxfcon);
 8005a22:	4b36      	ldr	r3, [pc, #216]	@ (8005afc <ENC28J60_Init+0x130>)
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	4619      	mov	r1, r3
 8005a28:	2038      	movs	r0, #56	@ 0x38
 8005a2a:	f7ff ff7c 	bl	8005926 <ENC28J60_Write>
	ENC28J60_WriteWord(EPMM0, 0x303f);
 8005a2e:	f243 013f 	movw	r1, #12351	@ 0x303f
 8005a32:	2028      	movs	r0, #40	@ 0x28
 8005a34:	f7ff ff33 	bl	800589e <ENC28J60_WriteWord>
	ENC28J60_WriteWord(EPMCSL, 0xf7f9);
 8005a38:	f24f 71f9 	movw	r1, #63481	@ 0xf7f9
 8005a3c:	2030      	movs	r0, #48	@ 0x30
 8005a3e:	f7ff ff2e 	bl	800589e <ENC28J60_WriteWord>
	//
	// do bank 2 stuff
	// enable MAC receive
	ENC28J60_Write(MACON1, MACON1_MARXEN | MACON1_TXPAUS | MACON1_RXPAUS);
 8005a42:	210d      	movs	r1, #13
 8005a44:	20c0      	movs	r0, #192	@ 0xc0
 8005a46:	f7ff ff6e 	bl	8005926 <ENC28J60_Write>
	// bring MAC out of reset
	ENC28J60_Write(MACON2, 0x00);
 8005a4a:	2100      	movs	r1, #0
 8005a4c:	20c1      	movs	r0, #193	@ 0xc1
 8005a4e:	f7ff ff6a 	bl	8005926 <ENC28J60_Write>
	// enable automatic padding to 60bytes and CRC operations
	ENC28J60_WriteOp(ENC28J60_BIT_FIELD_SET, MACON3,
 8005a52:	2232      	movs	r2, #50	@ 0x32
 8005a54:	21c2      	movs	r1, #194	@ 0xc2
 8005a56:	2080      	movs	r0, #128	@ 0x80
 8005a58:	f7ff fe7b 	bl	8005752 <ENC28J60_WriteOp>
	MACON3_PADCFG0 | MACON3_TXCRCEN | MACON3_FRMLNEN); //|MACON3_FULDPX);
	// set inter-frame gap (non-back-to-back)
	ENC28J60_WriteWord(MAIPGL, 0x0C12);
 8005a5c:	f640 4112 	movw	r1, #3090	@ 0xc12
 8005a60:	20c6      	movs	r0, #198	@ 0xc6
 8005a62:	f7ff ff1c 	bl	800589e <ENC28J60_WriteWord>
	// set inter-frame gap (back-to-back)
	ENC28J60_Write(MABBIPG, 0x12);
 8005a66:	2112      	movs	r1, #18
 8005a68:	20c4      	movs	r0, #196	@ 0xc4
 8005a6a:	f7ff ff5c 	bl	8005926 <ENC28J60_Write>
	// Set the maximum packet size which the controller will accept
	// Do not send packets longer than MAX_FRAMELEN:
	ENC28J60_WriteWord(MAMXFLL, MAX_FRAMELEN);
 8005a6e:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8005a72:	20ca      	movs	r0, #202	@ 0xca
 8005a74:	f7ff ff13 	bl	800589e <ENC28J60_WriteWord>
	// do bank 3 stuff
	// write MAC address
	// NOTE: MAC address in ENC28J60 is byte-backward
	ENC28J60_Write(MAADR5, macaddr[0]);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	20e4      	movs	r0, #228	@ 0xe4
 8005a80:	f7ff ff51 	bl	8005926 <ENC28J60_Write>
	ENC28J60_Write(MAADR4, macaddr[1]);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	3301      	adds	r3, #1
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	20e5      	movs	r0, #229	@ 0xe5
 8005a8e:	f7ff ff4a 	bl	8005926 <ENC28J60_Write>
	ENC28J60_Write(MAADR3, macaddr[2]);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	3302      	adds	r3, #2
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	4619      	mov	r1, r3
 8005a9a:	20e2      	movs	r0, #226	@ 0xe2
 8005a9c:	f7ff ff43 	bl	8005926 <ENC28J60_Write>
	ENC28J60_Write(MAADR2, macaddr[3]);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	3303      	adds	r3, #3
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	20e3      	movs	r0, #227	@ 0xe3
 8005aaa:	f7ff ff3c 	bl	8005926 <ENC28J60_Write>
	ENC28J60_Write(MAADR1, macaddr[4]);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	3304      	adds	r3, #4
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	20e0      	movs	r0, #224	@ 0xe0
 8005ab8:	f7ff ff35 	bl	8005926 <ENC28J60_Write>
	ENC28J60_Write(MAADR0, macaddr[5]);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	3305      	adds	r3, #5
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	20e1      	movs	r0, #225	@ 0xe1
 8005ac6:	f7ff ff2e 	bl	8005926 <ENC28J60_Write>
	// no loopback of transmitted frames
	ENC28J60_PhyWrite(PHCON2, PHCON2_HDLDIS);
 8005aca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005ace:	2010      	movs	r0, #16
 8005ad0:	f7ff ff3f 	bl	8005952 <ENC28J60_PhyWrite>
	// switch to bank 0
	ENC28J60_SetBank(ECON1);
 8005ad4:	201f      	movs	r0, #31
 8005ad6:	f7ff fea9 	bl	800582c <ENC28J60_SetBank>
	// enable interrutps
	ENC28J60_WriteOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE | EIE_PKTIE);
 8005ada:	22c0      	movs	r2, #192	@ 0xc0
 8005adc:	211b      	movs	r1, #27
 8005ade:	2080      	movs	r0, #128	@ 0x80
 8005ae0:	f7ff fe37 	bl	8005752 <ENC28J60_WriteOp>
	// enable packet reception
	ENC28J60_WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
 8005ae4:	2204      	movs	r2, #4
 8005ae6:	211f      	movs	r1, #31
 8005ae8:	2080      	movs	r0, #128	@ 0x80
 8005aea:	f7ff fe32 	bl	8005752 <ENC28J60_WriteOp>
}
 8005aee:	bf00      	nop
 8005af0:	3708      	adds	r7, #8
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	20003164 	.word	0x20003164
 8005afc:	20003166 	.word	0x20003166

08005b00 <ENC28J60_Getrev>:

// read the revision of the chip:
uint8_t ENC28J60_Getrev(void) {
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
	uint8_t rev;

	rev = ENC28J60_Read(EREVID);
 8005b06:	2072      	movs	r0, #114	@ 0x72
 8005b08:	f7ff feb6 	bl	8005878 <ENC28J60_Read>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	71fb      	strb	r3, [r7, #7]
	// microchip forgot to step the number on the silcon when they
	// released the revision B7. 6 is now rev B7. We still have
	// to see what they do when they release B8. At the moment
	// there is no B8 out yet
	if (rev > 5)
 8005b10:	79fb      	ldrb	r3, [r7, #7]
 8005b12:	2b05      	cmp	r3, #5
 8005b14:	d902      	bls.n	8005b1c <ENC28J60_Getrev+0x1c>
		rev++;
 8005b16:	79fb      	ldrb	r3, [r7, #7]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	71fb      	strb	r3, [r7, #7]
	return (rev);
 8005b1c:	79fb      	ldrb	r3, [r7, #7]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3708      	adds	r7, #8
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <ENC28J60_Linkup>:
	erxfcon &= (0xff ^ ERXFCON_MCEN);
	ENC28J60_Write(ERXFCON, erxfcon);
}

// link status
uint8_t ENC28J60_Linkup(void) {
 8005b26:	b580      	push	{r7, lr}
 8005b28:	af00      	add	r7, sp, #0
	// bit 10 (= bit 3 in upper reg)
	return (ENC28J60_PhyReadH(PHSTAT2) && 4);
 8005b2a:	2011      	movs	r0, #17
 8005b2c:	f7ff fed5 	bl	80058da <ENC28J60_PhyReadH>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d001      	beq.n	8005b3a <ENC28J60_Linkup+0x14>
 8005b36:	2301      	movs	r3, #1
 8005b38:	e000      	b.n	8005b3c <ENC28J60_Linkup+0x16>
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	b2db      	uxtb	r3, r3
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <ENC28J60_PacketSend>:

void ENC28J60_PacketSend(uint16_t len, uint8_t* packet) {
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b082      	sub	sp, #8
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	4603      	mov	r3, r0
 8005b4a:	6039      	str	r1, [r7, #0]
 8005b4c:	80fb      	strh	r3, [r7, #6]
	// Check no transmit in progress
	while (ENC28J60_ReadOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS) {
 8005b4e:	e011      	b.n	8005b74 <ENC28J60_PacketSend+0x32>
		// Reset the transmit logic problem. See Rev. B4 Silicon Errata point 12.
		if ((ENC28J60_Read(EIR) & EIR_TXERIF)) {
 8005b50:	201c      	movs	r0, #28
 8005b52:	f7ff fe91 	bl	8005878 <ENC28J60_Read>
 8005b56:	4603      	mov	r3, r0
 8005b58:	f003 0302 	and.w	r3, r3, #2
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d009      	beq.n	8005b74 <ENC28J60_PacketSend+0x32>
			ENC28J60_WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
 8005b60:	2280      	movs	r2, #128	@ 0x80
 8005b62:	211f      	movs	r1, #31
 8005b64:	2080      	movs	r0, #128	@ 0x80
 8005b66:	f7ff fdf4 	bl	8005752 <ENC28J60_WriteOp>
			ENC28J60_WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
 8005b6a:	2280      	movs	r2, #128	@ 0x80
 8005b6c:	211f      	movs	r1, #31
 8005b6e:	20a0      	movs	r0, #160	@ 0xa0
 8005b70:	f7ff fdef 	bl	8005752 <ENC28J60_WriteOp>
	while (ENC28J60_ReadOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS) {
 8005b74:	211f      	movs	r1, #31
 8005b76:	2000      	movs	r0, #0
 8005b78:	f7ff fdbf 	bl	80056fa <ENC28J60_ReadOp>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	f003 0308 	and.w	r3, r3, #8
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1e4      	bne.n	8005b50 <ENC28J60_PacketSend+0xe>
		}
	}

	// Set the write pointer to start of transmit buffer area
	ENC28J60_WriteWord(EWRPTL, TXSTART_INIT);
 8005b86:	f641 11ff 	movw	r1, #6655	@ 0x19ff
 8005b8a:	2002      	movs	r0, #2
 8005b8c:	f7ff fe87 	bl	800589e <ENC28J60_WriteWord>
	// Set the TXND pointer to correspond to the packet size given
	ENC28J60_WriteWord(ETXNDL, (TXSTART_INIT + len));
 8005b90:	88fb      	ldrh	r3, [r7, #6]
 8005b92:	f503 53cf 	add.w	r3, r3, #6624	@ 0x19e0
 8005b96:	331f      	adds	r3, #31
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	2006      	movs	r0, #6
 8005b9e:	f7ff fe7e 	bl	800589e <ENC28J60_WriteWord>
	// write per-packet control byte (0x00 means use macon3 settings)
	ENC28J60_WriteOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	207a      	movs	r0, #122	@ 0x7a
 8005ba8:	f7ff fdd3 	bl	8005752 <ENC28J60_WriteOp>
	// copy the packet into the transmit buffer
	ENC28J60_WriteBuffer(len, packet);
 8005bac:	88fb      	ldrh	r3, [r7, #6]
 8005bae:	6839      	ldr	r1, [r7, #0]
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7ff fe1c 	bl	80057ee <ENC28J60_WriteBuffer>
	// send the contents of the transmit buffer onto the network
	ENC28J60_WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
 8005bb6:	2208      	movs	r2, #8
 8005bb8:	211f      	movs	r1, #31
 8005bba:	2080      	movs	r0, #128	@ 0x80
 8005bbc:	f7ff fdc9 	bl	8005752 <ENC28J60_WriteOp>
	// Reset the transmit logic problem. See Rev. B4 Silicon Errata point 12.
}
 8005bc0:	bf00      	nop
 8005bc2:	3708      	adds	r7, #8
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <ENC28J60_PacketReceive>:
// Gets a packet from the network receive buffer, if one is available.
// The packet will by headed by an ethernet header.
//      maxlen  The maximum acceptable length of a retrieved packet.
//      packet  Pointer where packet data should be stored.
// Returns: Packet length in bytes if a packet was retrieved, zero otherwise.
uint16_t ENC28J60_PacketReceive(uint16_t maxlen, uint8_t* packet) {
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	4603      	mov	r3, r0
 8005bd0:	6039      	str	r1, [r7, #0]
 8005bd2:	80fb      	strh	r3, [r7, #6]
	uint16_t rxstat;
	uint16_t len;
	// check if a packet has been received and buffered
	//if( !(ENC28J60_Read(EIR) & EIR_PKTIF) ){
	// The above does not work. See Rev. B4 Silicon Errata point 6.
	if (ENC28J60_Read(EPKTCNT) == 0) {
 8005bd4:	2039      	movs	r0, #57	@ 0x39
 8005bd6:	f7ff fe4f 	bl	8005878 <ENC28J60_Read>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d101      	bne.n	8005be4 <ENC28J60_PacketReceive+0x1c>
		return (0);
 8005be0:	2300      	movs	r3, #0
 8005be2:	e04b      	b.n	8005c7c <ENC28J60_PacketReceive+0xb4>
	}

	// Set the read pointer to the start of the received packet
	ENC28J60_WriteWord(ERDPTL, gNextPacketPtr);
 8005be4:	4b27      	ldr	r3, [pc, #156]	@ (8005c84 <ENC28J60_PacketReceive+0xbc>)
 8005be6:	881b      	ldrh	r3, [r3, #0]
 8005be8:	4619      	mov	r1, r3
 8005bea:	2000      	movs	r0, #0
 8005bec:	f7ff fe57 	bl	800589e <ENC28J60_WriteWord>
	//ENC28J60_Write(ERDPTL, (gNextPacketPtr &0xFF));
	//ENC28J60_Write(ERDPTH, (gNextPacketPtr)>>8);
	// read the next packet pointer
	gNextPacketPtr = ENC28J60_ReadBufferWord();
 8005bf0:	f7ff fdf0 	bl	80057d4 <ENC28J60_ReadBufferWord>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	4b22      	ldr	r3, [pc, #136]	@ (8005c84 <ENC28J60_PacketReceive+0xbc>)
 8005bfa:	801a      	strh	r2, [r3, #0]
	//gNextPacketPtr  = ENC28J60_ReadOp(ENC28J60_READ_BUF_MEM, 0);
	//gNextPacketPtr |= ENC28J60_ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
	// read the packet length (see datasheet page 43)
	len = ENC28J60_ReadBufferWord() - 4;
 8005bfc:	f7ff fdea 	bl	80057d4 <ENC28J60_ReadBufferWord>
 8005c00:	4603      	mov	r3, r0
 8005c02:	3b04      	subs	r3, #4
 8005c04:	81fb      	strh	r3, [r7, #14]
	//len = ENC28J60_ReadOp(ENC28J60_READ_BUF_MEM, 0);
	//len |= ENC28J60_ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
	//len-=4; //remove the CRC count
	// read the receive status (see datasheet page 43)
	rxstat = ENC28J60_ReadBufferWord();
 8005c06:	f7ff fde5 	bl	80057d4 <ENC28J60_ReadBufferWord>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	81bb      	strh	r3, [r7, #12]
	//rxstat  = ENC28J60_ReadOp(ENC28J60_READ_BUF_MEM, 0);
	//rxstat |= ((uint16_t)ENC28J60_ReadOp(ENC28J60_READ_BUF_MEM, 0))<<8;
	// limit retrieve length
	if (len > maxlen - 1) {
 8005c0e:	88fa      	ldrh	r2, [r7, #6]
 8005c10:	89fb      	ldrh	r3, [r7, #14]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d802      	bhi.n	8005c1c <ENC28J60_PacketReceive+0x54>
		len = maxlen - 1;
 8005c16:	88fb      	ldrh	r3, [r7, #6]
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	81fb      	strh	r3, [r7, #14]
	}
	// check CRC and symbol errors (see datasheet page 44, table 7-3):
	// The ERXFCON.CRCEN is set by default. Normally we should not
	// need to check this.
	if ((rxstat & 0x80) == 0) {
 8005c1c:	89bb      	ldrh	r3, [r7, #12]
 8005c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d102      	bne.n	8005c2c <ENC28J60_PacketReceive+0x64>
		// invalid
		len = 0;
 8005c26:	2300      	movs	r3, #0
 8005c28:	81fb      	strh	r3, [r7, #14]
 8005c2a:	e004      	b.n	8005c36 <ENC28J60_PacketReceive+0x6e>
	} else {
		// copy the packet from the receive buffer
		ENC28J60_ReadBuffer(len, packet);
 8005c2c:	89fb      	ldrh	r3, [r7, #14]
 8005c2e:	6839      	ldr	r1, [r7, #0]
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7ff fdb0 	bl	8005796 <ENC28J60_ReadBuffer>
	}
	// Move the RX read pointer to the start of the next received packet
	// This frees the memory we just read out
	ENC28J60_WriteWord(ERXRDPTL, gNextPacketPtr);
 8005c36:	4b13      	ldr	r3, [pc, #76]	@ (8005c84 <ENC28J60_PacketReceive+0xbc>)
 8005c38:	881b      	ldrh	r3, [r3, #0]
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	200c      	movs	r0, #12
 8005c3e:	f7ff fe2e 	bl	800589e <ENC28J60_WriteWord>
	//ENC28J60_Write(ERXRDPTL, (gNextPacketPtr &0xFF));
	//ENC28J60_Write(ERXRDPTH, (gNextPacketPtr)>>8);
	// However, compensate for the errata point 13, rev B4: enver write an even address!
	if ((gNextPacketPtr - 1 < RXSTART_INIT)
 8005c42:	4b10      	ldr	r3, [pc, #64]	@ (8005c84 <ENC28J60_PacketReceive+0xbc>)
 8005c44:	881b      	ldrh	r3, [r3, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d004      	beq.n	8005c54 <ENC28J60_PacketReceive+0x8c>
			|| (gNextPacketPtr - 1 > RXSTOP_INIT)) {
 8005c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8005c84 <ENC28J60_PacketReceive+0xbc>)
 8005c4c:	881b      	ldrh	r3, [r3, #0]
 8005c4e:	f5b3 5fd0 	cmp.w	r3, #6656	@ 0x1a00
 8005c52:	d305      	bcc.n	8005c60 <ENC28J60_PacketReceive+0x98>
		ENC28J60_WriteWord(ERXRDPTL, RXSTOP_INIT);
 8005c54:	f641 11fe 	movw	r1, #6654	@ 0x19fe
 8005c58:	200c      	movs	r0, #12
 8005c5a:	f7ff fe20 	bl	800589e <ENC28J60_WriteWord>
 8005c5e:	e007      	b.n	8005c70 <ENC28J60_PacketReceive+0xa8>
		//ENC28J60_Write(ERXRDPTL, (RXSTOP_INIT)&0xFF);
		//ENC28J60_Write(ERXRDPTH, (RXSTOP_INIT)>>8);
	} else {
		ENC28J60_WriteWord(ERXRDPTL, (gNextPacketPtr - 1));
 8005c60:	4b08      	ldr	r3, [pc, #32]	@ (8005c84 <ENC28J60_PacketReceive+0xbc>)
 8005c62:	881b      	ldrh	r3, [r3, #0]
 8005c64:	3b01      	subs	r3, #1
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	4619      	mov	r1, r3
 8005c6a:	200c      	movs	r0, #12
 8005c6c:	f7ff fe17 	bl	800589e <ENC28J60_WriteWord>
		//ENC28J60_Write(ERXRDPTL, (gNextPacketPtr-1)&0xFF);
		//ENC28J60_Write(ERXRDPTH, (gNextPacketPtr-1)>>8);
	}
	// decrement the packet counter indicate we are done with this packet
	ENC28J60_WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
 8005c70:	2240      	movs	r2, #64	@ 0x40
 8005c72:	211e      	movs	r1, #30
 8005c74:	2080      	movs	r0, #128	@ 0x80
 8005c76:	f7ff fd6c 	bl	8005752 <ENC28J60_WriteOp>
	return (len);
 8005c7a:	89fb      	ldrh	r3, [r7, #14]
	 }
	 // decrement the packet counter indicate we are done with this packet
	 ENC28J60_WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
	 return(len);
	 */
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3710      	adds	r7, #16
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	20003164 	.word	0x20003164

08005c88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005c8c:	4b0e      	ldr	r3, [pc, #56]	@ (8005cc8 <HAL_Init+0x40>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a0d      	ldr	r2, [pc, #52]	@ (8005cc8 <HAL_Init+0x40>)
 8005c92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005c96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005c98:	4b0b      	ldr	r3, [pc, #44]	@ (8005cc8 <HAL_Init+0x40>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a0a      	ldr	r2, [pc, #40]	@ (8005cc8 <HAL_Init+0x40>)
 8005c9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005ca2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005ca4:	4b08      	ldr	r3, [pc, #32]	@ (8005cc8 <HAL_Init+0x40>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a07      	ldr	r2, [pc, #28]	@ (8005cc8 <HAL_Init+0x40>)
 8005caa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005cb0:	2003      	movs	r0, #3
 8005cb2:	f000 f913 	bl	8005edc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005cb6:	200f      	movs	r0, #15
 8005cb8:	f7fb fdc6 	bl	8001848 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005cbc:	f7fb fc08 	bl	80014d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	40023c00 	.word	0x40023c00

08005ccc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005cd0:	4b06      	ldr	r3, [pc, #24]	@ (8005cec <HAL_IncTick+0x20>)
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	4b06      	ldr	r3, [pc, #24]	@ (8005cf0 <HAL_IncTick+0x24>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4413      	add	r3, r2
 8005cdc:	4a04      	ldr	r2, [pc, #16]	@ (8005cf0 <HAL_IncTick+0x24>)
 8005cde:	6013      	str	r3, [r2, #0]
}
 8005ce0:	bf00      	nop
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	200000a8 	.word	0x200000a8
 8005cf0:	20003168 	.word	0x20003168

08005cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8005cf8:	4b03      	ldr	r3, [pc, #12]	@ (8005d08 <HAL_GetTick+0x14>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	20003168 	.word	0x20003168

08005d0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005d14:	f7ff ffee 	bl	8005cf4 <HAL_GetTick>
 8005d18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d24:	d005      	beq.n	8005d32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005d26:	4b0a      	ldr	r3, [pc, #40]	@ (8005d50 <HAL_Delay+0x44>)
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	4413      	add	r3, r2
 8005d30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005d32:	bf00      	nop
 8005d34:	f7ff ffde 	bl	8005cf4 <HAL_GetTick>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d8f7      	bhi.n	8005d34 <HAL_Delay+0x28>
  {
  }
}
 8005d44:	bf00      	nop
 8005d46:	bf00      	nop
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	200000a8 	.word	0x200000a8

08005d54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f003 0307 	and.w	r3, r3, #7
 8005d62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d64:	4b0c      	ldr	r3, [pc, #48]	@ (8005d98 <__NVIC_SetPriorityGrouping+0x44>)
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005d70:	4013      	ands	r3, r2
 8005d72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005d7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005d80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005d86:	4a04      	ldr	r2, [pc, #16]	@ (8005d98 <__NVIC_SetPriorityGrouping+0x44>)
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	60d3      	str	r3, [r2, #12]
}
 8005d8c:	bf00      	nop
 8005d8e:	3714      	adds	r7, #20
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr
 8005d98:	e000ed00 	.word	0xe000ed00

08005d9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005da0:	4b04      	ldr	r3, [pc, #16]	@ (8005db4 <__NVIC_GetPriorityGrouping+0x18>)
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	0a1b      	lsrs	r3, r3, #8
 8005da6:	f003 0307 	and.w	r3, r3, #7
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr
 8005db4:	e000ed00 	.word	0xe000ed00

08005db8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	db0b      	blt.n	8005de2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005dca:	79fb      	ldrb	r3, [r7, #7]
 8005dcc:	f003 021f 	and.w	r2, r3, #31
 8005dd0:	4907      	ldr	r1, [pc, #28]	@ (8005df0 <__NVIC_EnableIRQ+0x38>)
 8005dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dd6:	095b      	lsrs	r3, r3, #5
 8005dd8:	2001      	movs	r0, #1
 8005dda:	fa00 f202 	lsl.w	r2, r0, r2
 8005dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005de2:	bf00      	nop
 8005de4:	370c      	adds	r7, #12
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	e000e100 	.word	0xe000e100

08005df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	6039      	str	r1, [r7, #0]
 8005dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	db0a      	blt.n	8005e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	b2da      	uxtb	r2, r3
 8005e0c:	490c      	ldr	r1, [pc, #48]	@ (8005e40 <__NVIC_SetPriority+0x4c>)
 8005e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e12:	0112      	lsls	r2, r2, #4
 8005e14:	b2d2      	uxtb	r2, r2
 8005e16:	440b      	add	r3, r1
 8005e18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005e1c:	e00a      	b.n	8005e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	4908      	ldr	r1, [pc, #32]	@ (8005e44 <__NVIC_SetPriority+0x50>)
 8005e24:	79fb      	ldrb	r3, [r7, #7]
 8005e26:	f003 030f 	and.w	r3, r3, #15
 8005e2a:	3b04      	subs	r3, #4
 8005e2c:	0112      	lsls	r2, r2, #4
 8005e2e:	b2d2      	uxtb	r2, r2
 8005e30:	440b      	add	r3, r1
 8005e32:	761a      	strb	r2, [r3, #24]
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	e000e100 	.word	0xe000e100
 8005e44:	e000ed00 	.word	0xe000ed00

08005e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b089      	sub	sp, #36	@ 0x24
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f003 0307 	and.w	r3, r3, #7
 8005e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	f1c3 0307 	rsb	r3, r3, #7
 8005e62:	2b04      	cmp	r3, #4
 8005e64:	bf28      	it	cs
 8005e66:	2304      	movcs	r3, #4
 8005e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	3304      	adds	r3, #4
 8005e6e:	2b06      	cmp	r3, #6
 8005e70:	d902      	bls.n	8005e78 <NVIC_EncodePriority+0x30>
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	3b03      	subs	r3, #3
 8005e76:	e000      	b.n	8005e7a <NVIC_EncodePriority+0x32>
 8005e78:	2300      	movs	r3, #0
 8005e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	fa02 f303 	lsl.w	r3, r2, r3
 8005e86:	43da      	mvns	r2, r3
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	401a      	ands	r2, r3
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e90:	f04f 31ff 	mov.w	r1, #4294967295
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	fa01 f303 	lsl.w	r3, r1, r3
 8005e9a:	43d9      	mvns	r1, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ea0:	4313      	orrs	r3, r2
         );
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3724      	adds	r7, #36	@ 0x24
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
	...

08005eb0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8005eb4:	f3bf 8f4f 	dsb	sy
}
 8005eb8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005eba:	4b06      	ldr	r3, [pc, #24]	@ (8005ed4 <__NVIC_SystemReset+0x24>)
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005ec2:	4904      	ldr	r1, [pc, #16]	@ (8005ed4 <__NVIC_SystemReset+0x24>)
 8005ec4:	4b04      	ldr	r3, [pc, #16]	@ (8005ed8 <__NVIC_SystemReset+0x28>)
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005eca:	f3bf 8f4f 	dsb	sy
}
 8005ece:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005ed0:	bf00      	nop
 8005ed2:	e7fd      	b.n	8005ed0 <__NVIC_SystemReset+0x20>
 8005ed4:	e000ed00 	.word	0xe000ed00
 8005ed8:	05fa0004 	.word	0x05fa0004

08005edc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f7ff ff35 	bl	8005d54 <__NVIC_SetPriorityGrouping>
}
 8005eea:	bf00      	nop
 8005eec:	3708      	adds	r7, #8
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b086      	sub	sp, #24
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	4603      	mov	r3, r0
 8005efa:	60b9      	str	r1, [r7, #8]
 8005efc:	607a      	str	r2, [r7, #4]
 8005efe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005f00:	2300      	movs	r3, #0
 8005f02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005f04:	f7ff ff4a 	bl	8005d9c <__NVIC_GetPriorityGrouping>
 8005f08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	68b9      	ldr	r1, [r7, #8]
 8005f0e:	6978      	ldr	r0, [r7, #20]
 8005f10:	f7ff ff9a 	bl	8005e48 <NVIC_EncodePriority>
 8005f14:	4602      	mov	r2, r0
 8005f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f1a:	4611      	mov	r1, r2
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7ff ff69 	bl	8005df4 <__NVIC_SetPriority>
}
 8005f22:	bf00      	nop
 8005f24:	3718      	adds	r7, #24
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b082      	sub	sp, #8
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	4603      	mov	r3, r0
 8005f32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7ff ff3d 	bl	8005db8 <__NVIC_EnableIRQ>
}
 8005f3e:	bf00      	nop
 8005f40:	3708      	adds	r7, #8
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8005f4a:	f7ff ffb1 	bl	8005eb0 <__NVIC_SystemReset>

08005f4e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b084      	sub	sp, #16
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f5a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005f5c:	f7ff feca 	bl	8005cf4 <HAL_GetTick>
 8005f60:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d008      	beq.n	8005f80 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2280      	movs	r2, #128	@ 0x80
 8005f72:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e052      	b.n	8006026 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f022 0216 	bic.w	r2, r2, #22
 8005f8e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	695a      	ldr	r2, [r3, #20]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005f9e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d103      	bne.n	8005fb0 <HAL_DMA_Abort+0x62>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d007      	beq.n	8005fc0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f022 0208 	bic.w	r2, r2, #8
 8005fbe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f022 0201 	bic.w	r2, r2, #1
 8005fce:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005fd0:	e013      	b.n	8005ffa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005fd2:	f7ff fe8f 	bl	8005cf4 <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	2b05      	cmp	r3, #5
 8005fde:	d90c      	bls.n	8005ffa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2220      	movs	r2, #32
 8005fe4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2203      	movs	r2, #3
 8005fea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e015      	b.n	8006026 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0301 	and.w	r3, r3, #1
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1e4      	bne.n	8005fd2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800600c:	223f      	movs	r2, #63	@ 0x3f
 800600e:	409a      	lsls	r2, r3
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800602e:	b480      	push	{r7}
 8006030:	b083      	sub	sp, #12
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b02      	cmp	r3, #2
 8006040:	d004      	beq.n	800604c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2280      	movs	r2, #128	@ 0x80
 8006046:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e00c      	b.n	8006066 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2205      	movs	r2, #5
 8006050:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f022 0201 	bic.w	r2, r2, #1
 8006062:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	370c      	adds	r7, #12
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
	...

08006074 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b086      	sub	sp, #24
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006086:	4b23      	ldr	r3, [pc, #140]	@ (8006114 <HAL_FLASH_Program+0xa0>)
 8006088:	7e1b      	ldrb	r3, [r3, #24]
 800608a:	2b01      	cmp	r3, #1
 800608c:	d101      	bne.n	8006092 <HAL_FLASH_Program+0x1e>
 800608e:	2302      	movs	r3, #2
 8006090:	e03b      	b.n	800610a <HAL_FLASH_Program+0x96>
 8006092:	4b20      	ldr	r3, [pc, #128]	@ (8006114 <HAL_FLASH_Program+0xa0>)
 8006094:	2201      	movs	r2, #1
 8006096:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006098:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800609c:	f000 f87c 	bl	8006198 <FLASH_WaitForLastOperation>
 80060a0:	4603      	mov	r3, r0
 80060a2:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80060a4:	7dfb      	ldrb	r3, [r7, #23]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d12b      	bne.n	8006102 <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d105      	bne.n	80060bc <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80060b0:	783b      	ldrb	r3, [r7, #0]
 80060b2:	4619      	mov	r1, r3
 80060b4:	68b8      	ldr	r0, [r7, #8]
 80060b6:	f000 f927 	bl	8006308 <FLASH_Program_Byte>
 80060ba:	e016      	b.n	80060ea <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d105      	bne.n	80060ce <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80060c2:	883b      	ldrh	r3, [r7, #0]
 80060c4:	4619      	mov	r1, r3
 80060c6:	68b8      	ldr	r0, [r7, #8]
 80060c8:	f000 f8fa 	bl	80062c0 <FLASH_Program_HalfWord>
 80060cc:	e00d      	b.n	80060ea <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d105      	bne.n	80060e0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	4619      	mov	r1, r3
 80060d8:	68b8      	ldr	r0, [r7, #8]
 80060da:	f000 f8cf 	bl	800627c <FLASH_Program_Word>
 80060de:	e004      	b.n	80060ea <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80060e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060e4:	68b8      	ldr	r0, [r7, #8]
 80060e6:	f000 f897 	bl	8006218 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80060ea:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80060ee:	f000 f853 	bl	8006198 <FLASH_WaitForLastOperation>
 80060f2:	4603      	mov	r3, r0
 80060f4:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80060f6:	4b08      	ldr	r3, [pc, #32]	@ (8006118 <HAL_FLASH_Program+0xa4>)
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	4a07      	ldr	r2, [pc, #28]	@ (8006118 <HAL_FLASH_Program+0xa4>)
 80060fc:	f023 0301 	bic.w	r3, r3, #1
 8006100:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006102:	4b04      	ldr	r3, [pc, #16]	@ (8006114 <HAL_FLASH_Program+0xa0>)
 8006104:	2200      	movs	r2, #0
 8006106:	761a      	strb	r2, [r3, #24]

  return status;
 8006108:	7dfb      	ldrb	r3, [r7, #23]
}
 800610a:	4618      	mov	r0, r3
 800610c:	3718      	adds	r7, #24
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	2000316c 	.word	0x2000316c
 8006118:	40023c00 	.word	0x40023c00

0800611c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006122:	2300      	movs	r3, #0
 8006124:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006126:	4b0b      	ldr	r3, [pc, #44]	@ (8006154 <HAL_FLASH_Unlock+0x38>)
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	2b00      	cmp	r3, #0
 800612c:	da0b      	bge.n	8006146 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800612e:	4b09      	ldr	r3, [pc, #36]	@ (8006154 <HAL_FLASH_Unlock+0x38>)
 8006130:	4a09      	ldr	r2, [pc, #36]	@ (8006158 <HAL_FLASH_Unlock+0x3c>)
 8006132:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006134:	4b07      	ldr	r3, [pc, #28]	@ (8006154 <HAL_FLASH_Unlock+0x38>)
 8006136:	4a09      	ldr	r2, [pc, #36]	@ (800615c <HAL_FLASH_Unlock+0x40>)
 8006138:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800613a:	4b06      	ldr	r3, [pc, #24]	@ (8006154 <HAL_FLASH_Unlock+0x38>)
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	2b00      	cmp	r3, #0
 8006140:	da01      	bge.n	8006146 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8006146:	79fb      	ldrb	r3, [r7, #7]
}
 8006148:	4618      	mov	r0, r3
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr
 8006154:	40023c00 	.word	0x40023c00
 8006158:	45670123 	.word	0x45670123
 800615c:	cdef89ab 	.word	0xcdef89ab

08006160 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006160:	b480      	push	{r7}
 8006162:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8006164:	4b05      	ldr	r3, [pc, #20]	@ (800617c <HAL_FLASH_Lock+0x1c>)
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	4a04      	ldr	r2, [pc, #16]	@ (800617c <HAL_FLASH_Lock+0x1c>)
 800616a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800616e:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	40023c00 	.word	0x40023c00

08006180 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag
  */
uint32_t HAL_FLASH_GetError(void)
{
 8006180:	b480      	push	{r7}
 8006182:	af00      	add	r7, sp, #0
  return pFlash.ErrorCode;
 8006184:	4b03      	ldr	r3, [pc, #12]	@ (8006194 <HAL_FLASH_GetError+0x14>)
 8006186:	69db      	ldr	r3, [r3, #28]
}
 8006188:	4618      	mov	r0, r3
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	2000316c 	.word	0x2000316c

08006198 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80061a0:	2300      	movs	r3, #0
 80061a2:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80061a4:	4b1a      	ldr	r3, [pc, #104]	@ (8006210 <FLASH_WaitForLastOperation+0x78>)
 80061a6:	2200      	movs	r2, #0
 80061a8:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80061aa:	f7ff fda3 	bl	8005cf4 <HAL_GetTick>
 80061ae:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80061b0:	e010      	b.n	80061d4 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b8:	d00c      	beq.n	80061d4 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d007      	beq.n	80061d0 <FLASH_WaitForLastOperation+0x38>
 80061c0:	f7ff fd98 	bl	8005cf4 <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d201      	bcs.n	80061d4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	e019      	b.n	8006208 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80061d4:	4b0f      	ldr	r3, [pc, #60]	@ (8006214 <FLASH_WaitForLastOperation+0x7c>)
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1e8      	bne.n	80061b2 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80061e0:	4b0c      	ldr	r3, [pc, #48]	@ (8006214 <FLASH_WaitForLastOperation+0x7c>)
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	f003 0301 	and.w	r3, r3, #1
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d002      	beq.n	80061f2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80061ec:	4b09      	ldr	r3, [pc, #36]	@ (8006214 <FLASH_WaitForLastOperation+0x7c>)
 80061ee:	2201      	movs	r2, #1
 80061f0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80061f2:	4b08      	ldr	r3, [pc, #32]	@ (8006214 <FLASH_WaitForLastOperation+0x7c>)
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d003      	beq.n	8006206 <FLASH_WaitForLastOperation+0x6e>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80061fe:	f000 f8a5 	bl	800634c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e000      	b.n	8006208 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8006206:	2300      	movs	r3, #0

}
 8006208:	4618      	mov	r0, r3
 800620a:	3710      	adds	r7, #16
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}
 8006210:	2000316c 	.word	0x2000316c
 8006214:	40023c00 	.word	0x40023c00

08006218 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006224:	4b14      	ldr	r3, [pc, #80]	@ (8006278 <FLASH_Program_DoubleWord+0x60>)
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	4a13      	ldr	r2, [pc, #76]	@ (8006278 <FLASH_Program_DoubleWord+0x60>)
 800622a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800622e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8006230:	4b11      	ldr	r3, [pc, #68]	@ (8006278 <FLASH_Program_DoubleWord+0x60>)
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	4a10      	ldr	r2, [pc, #64]	@ (8006278 <FLASH_Program_DoubleWord+0x60>)
 8006236:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800623a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800623c:	4b0e      	ldr	r3, [pc, #56]	@ (8006278 <FLASH_Program_DoubleWord+0x60>)
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	4a0d      	ldr	r2, [pc, #52]	@ (8006278 <FLASH_Program_DoubleWord+0x60>)
 8006242:	f043 0301 	orr.w	r3, r3, #1
 8006246:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	683a      	ldr	r2, [r7, #0]
 800624c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800624e:	f3bf 8f6f 	isb	sy
}
 8006252:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8006254:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006258:	f04f 0200 	mov.w	r2, #0
 800625c:	f04f 0300 	mov.w	r3, #0
 8006260:	000a      	movs	r2, r1
 8006262:	2300      	movs	r3, #0
 8006264:	68f9      	ldr	r1, [r7, #12]
 8006266:	3104      	adds	r1, #4
 8006268:	4613      	mov	r3, r2
 800626a:	600b      	str	r3, [r1, #0]
}
 800626c:	bf00      	nop
 800626e:	3714      	adds	r7, #20
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr
 8006278:	40023c00 	.word	0x40023c00

0800627c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006286:	4b0d      	ldr	r3, [pc, #52]	@ (80062bc <FLASH_Program_Word+0x40>)
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	4a0c      	ldr	r2, [pc, #48]	@ (80062bc <FLASH_Program_Word+0x40>)
 800628c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006290:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8006292:	4b0a      	ldr	r3, [pc, #40]	@ (80062bc <FLASH_Program_Word+0x40>)
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	4a09      	ldr	r2, [pc, #36]	@ (80062bc <FLASH_Program_Word+0x40>)
 8006298:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800629c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800629e:	4b07      	ldr	r3, [pc, #28]	@ (80062bc <FLASH_Program_Word+0x40>)
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	4a06      	ldr	r2, [pc, #24]	@ (80062bc <FLASH_Program_Word+0x40>)
 80062a4:	f043 0301 	orr.w	r3, r3, #1
 80062a8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	683a      	ldr	r2, [r7, #0]
 80062ae:	601a      	str	r2, [r3, #0]
}
 80062b0:	bf00      	nop
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr
 80062bc:	40023c00 	.word	0x40023c00

080062c0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	460b      	mov	r3, r1
 80062ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80062cc:	4b0d      	ldr	r3, [pc, #52]	@ (8006304 <FLASH_Program_HalfWord+0x44>)
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	4a0c      	ldr	r2, [pc, #48]	@ (8006304 <FLASH_Program_HalfWord+0x44>)
 80062d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80062d8:	4b0a      	ldr	r3, [pc, #40]	@ (8006304 <FLASH_Program_HalfWord+0x44>)
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	4a09      	ldr	r2, [pc, #36]	@ (8006304 <FLASH_Program_HalfWord+0x44>)
 80062de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80062e4:	4b07      	ldr	r3, [pc, #28]	@ (8006304 <FLASH_Program_HalfWord+0x44>)
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	4a06      	ldr	r2, [pc, #24]	@ (8006304 <FLASH_Program_HalfWord+0x44>)
 80062ea:	f043 0301 	orr.w	r3, r3, #1
 80062ee:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	887a      	ldrh	r2, [r7, #2]
 80062f4:	801a      	strh	r2, [r3, #0]
}
 80062f6:	bf00      	nop
 80062f8:	370c      	adds	r7, #12
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	40023c00 	.word	0x40023c00

08006308 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	460b      	mov	r3, r1
 8006312:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006314:	4b0c      	ldr	r3, [pc, #48]	@ (8006348 <FLASH_Program_Byte+0x40>)
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	4a0b      	ldr	r2, [pc, #44]	@ (8006348 <FLASH_Program_Byte+0x40>)
 800631a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800631e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8006320:	4b09      	ldr	r3, [pc, #36]	@ (8006348 <FLASH_Program_Byte+0x40>)
 8006322:	4a09      	ldr	r2, [pc, #36]	@ (8006348 <FLASH_Program_Byte+0x40>)
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006328:	4b07      	ldr	r3, [pc, #28]	@ (8006348 <FLASH_Program_Byte+0x40>)
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	4a06      	ldr	r2, [pc, #24]	@ (8006348 <FLASH_Program_Byte+0x40>)
 800632e:	f043 0301 	orr.w	r3, r3, #1
 8006332:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	78fa      	ldrb	r2, [r7, #3]
 8006338:	701a      	strb	r2, [r3, #0]
}
 800633a:	bf00      	nop
 800633c:	370c      	adds	r7, #12
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	40023c00 	.word	0x40023c00

0800634c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800634c:	b480      	push	{r7}
 800634e:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8006350:	4b27      	ldr	r3, [pc, #156]	@ (80063f0 <FLASH_SetErrorCode+0xa4>)
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	f003 0310 	and.w	r3, r3, #16
 8006358:	2b00      	cmp	r3, #0
 800635a:	d008      	beq.n	800636e <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800635c:	4b25      	ldr	r3, [pc, #148]	@ (80063f4 <FLASH_SetErrorCode+0xa8>)
 800635e:	69db      	ldr	r3, [r3, #28]
 8006360:	f043 0310 	orr.w	r3, r3, #16
 8006364:	4a23      	ldr	r2, [pc, #140]	@ (80063f4 <FLASH_SetErrorCode+0xa8>)
 8006366:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8006368:	4b21      	ldr	r3, [pc, #132]	@ (80063f0 <FLASH_SetErrorCode+0xa4>)
 800636a:	2210      	movs	r2, #16
 800636c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800636e:	4b20      	ldr	r3, [pc, #128]	@ (80063f0 <FLASH_SetErrorCode+0xa4>)
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	f003 0320 	and.w	r3, r3, #32
 8006376:	2b00      	cmp	r3, #0
 8006378:	d008      	beq.n	800638c <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800637a:	4b1e      	ldr	r3, [pc, #120]	@ (80063f4 <FLASH_SetErrorCode+0xa8>)
 800637c:	69db      	ldr	r3, [r3, #28]
 800637e:	f043 0308 	orr.w	r3, r3, #8
 8006382:	4a1c      	ldr	r2, [pc, #112]	@ (80063f4 <FLASH_SetErrorCode+0xa8>)
 8006384:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8006386:	4b1a      	ldr	r3, [pc, #104]	@ (80063f0 <FLASH_SetErrorCode+0xa4>)
 8006388:	2220      	movs	r2, #32
 800638a:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800638c:	4b18      	ldr	r3, [pc, #96]	@ (80063f0 <FLASH_SetErrorCode+0xa4>)
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006394:	2b00      	cmp	r3, #0
 8006396:	d008      	beq.n	80063aa <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8006398:	4b16      	ldr	r3, [pc, #88]	@ (80063f4 <FLASH_SetErrorCode+0xa8>)
 800639a:	69db      	ldr	r3, [r3, #28]
 800639c:	f043 0304 	orr.w	r3, r3, #4
 80063a0:	4a14      	ldr	r2, [pc, #80]	@ (80063f4 <FLASH_SetErrorCode+0xa8>)
 80063a2:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80063a4:	4b12      	ldr	r3, [pc, #72]	@ (80063f0 <FLASH_SetErrorCode+0xa4>)
 80063a6:	2240      	movs	r2, #64	@ 0x40
 80063a8:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80063aa:	4b11      	ldr	r3, [pc, #68]	@ (80063f0 <FLASH_SetErrorCode+0xa4>)
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d008      	beq.n	80063c8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80063b6:	4b0f      	ldr	r3, [pc, #60]	@ (80063f4 <FLASH_SetErrorCode+0xa8>)
 80063b8:	69db      	ldr	r3, [r3, #28]
 80063ba:	f043 0302 	orr.w	r3, r3, #2
 80063be:	4a0d      	ldr	r2, [pc, #52]	@ (80063f4 <FLASH_SetErrorCode+0xa8>)
 80063c0:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80063c2:	4b0b      	ldr	r3, [pc, #44]	@ (80063f0 <FLASH_SetErrorCode+0xa4>)
 80063c4:	2280      	movs	r2, #128	@ 0x80
 80063c6:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80063c8:	4b09      	ldr	r3, [pc, #36]	@ (80063f0 <FLASH_SetErrorCode+0xa4>)
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	f003 0302 	and.w	r3, r3, #2
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d008      	beq.n	80063e6 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80063d4:	4b07      	ldr	r3, [pc, #28]	@ (80063f4 <FLASH_SetErrorCode+0xa8>)
 80063d6:	69db      	ldr	r3, [r3, #28]
 80063d8:	f043 0320 	orr.w	r3, r3, #32
 80063dc:	4a05      	ldr	r2, [pc, #20]	@ (80063f4 <FLASH_SetErrorCode+0xa8>)
 80063de:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80063e0:	4b03      	ldr	r3, [pc, #12]	@ (80063f0 <FLASH_SetErrorCode+0xa4>)
 80063e2:	2202      	movs	r2, #2
 80063e4:	60da      	str	r2, [r3, #12]
  }
}
 80063e6:	bf00      	nop
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr
 80063f0:	40023c00 	.word	0x40023c00
 80063f4:	2000316c 	.word	0x2000316c

080063f8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8006406:	2300      	movs	r3, #0
 8006408:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800640a:	4b31      	ldr	r3, [pc, #196]	@ (80064d0 <HAL_FLASHEx_Erase+0xd8>)
 800640c:	7e1b      	ldrb	r3, [r3, #24]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d101      	bne.n	8006416 <HAL_FLASHEx_Erase+0x1e>
 8006412:	2302      	movs	r3, #2
 8006414:	e058      	b.n	80064c8 <HAL_FLASHEx_Erase+0xd0>
 8006416:	4b2e      	ldr	r3, [pc, #184]	@ (80064d0 <HAL_FLASHEx_Erase+0xd8>)
 8006418:	2201      	movs	r2, #1
 800641a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800641c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006420:	f7ff feba 	bl	8006198 <FLASH_WaitForLastOperation>
 8006424:	4603      	mov	r3, r0
 8006426:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006428:	7bfb      	ldrb	r3, [r7, #15]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d148      	bne.n	80064c0 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	f04f 32ff 	mov.w	r2, #4294967295
 8006434:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2b01      	cmp	r3, #1
 800643c:	d115      	bne.n	800646a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	b2da      	uxtb	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	4619      	mov	r1, r3
 800644a:	4610      	mov	r0, r2
 800644c:	f000 f844 	bl	80064d8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006450:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006454:	f7ff fea0 	bl	8006198 <FLASH_WaitForLastOperation>
 8006458:	4603      	mov	r3, r0
 800645a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800645c:	4b1d      	ldr	r3, [pc, #116]	@ (80064d4 <HAL_FLASHEx_Erase+0xdc>)
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	4a1c      	ldr	r2, [pc, #112]	@ (80064d4 <HAL_FLASHEx_Erase+0xdc>)
 8006462:	f023 0304 	bic.w	r3, r3, #4
 8006466:	6113      	str	r3, [r2, #16]
 8006468:	e028      	b.n	80064bc <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	60bb      	str	r3, [r7, #8]
 8006470:	e01c      	b.n	80064ac <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	b2db      	uxtb	r3, r3
 8006478:	4619      	mov	r1, r3
 800647a:	68b8      	ldr	r0, [r7, #8]
 800647c:	f000 f850 	bl	8006520 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006480:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006484:	f7ff fe88 	bl	8006198 <FLASH_WaitForLastOperation>
 8006488:	4603      	mov	r3, r0
 800648a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800648c:	4b11      	ldr	r3, [pc, #68]	@ (80064d4 <HAL_FLASHEx_Erase+0xdc>)
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	4a10      	ldr	r2, [pc, #64]	@ (80064d4 <HAL_FLASHEx_Erase+0xdc>)
 8006492:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8006496:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8006498:	7bfb      	ldrb	r3, [r7, #15]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d003      	beq.n	80064a6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	68ba      	ldr	r2, [r7, #8]
 80064a2:	601a      	str	r2, [r3, #0]
          break;
 80064a4:	e00a      	b.n	80064bc <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	3301      	adds	r3, #1
 80064aa:	60bb      	str	r3, [r7, #8]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	68da      	ldr	r2, [r3, #12]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	4413      	add	r3, r2
 80064b6:	68ba      	ldr	r2, [r7, #8]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d3da      	bcc.n	8006472 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80064bc:	f000 f878 	bl	80065b0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80064c0:	4b03      	ldr	r3, [pc, #12]	@ (80064d0 <HAL_FLASHEx_Erase+0xd8>)
 80064c2:	2200      	movs	r2, #0
 80064c4:	761a      	strb	r2, [r3, #24]

  return status;
 80064c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3710      	adds	r7, #16
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	2000316c 	.word	0x2000316c
 80064d4:	40023c00 	.word	0x40023c00

080064d8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	4603      	mov	r3, r0
 80064e0:	6039      	str	r1, [r7, #0]
 80064e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80064e4:	4b0d      	ldr	r3, [pc, #52]	@ (800651c <FLASH_MassErase+0x44>)
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	4a0c      	ldr	r2, [pc, #48]	@ (800651c <FLASH_MassErase+0x44>)
 80064ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80064f0:	4b0a      	ldr	r3, [pc, #40]	@ (800651c <FLASH_MassErase+0x44>)
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	4a09      	ldr	r2, [pc, #36]	@ (800651c <FLASH_MassErase+0x44>)
 80064f6:	f043 0304 	orr.w	r3, r3, #4
 80064fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80064fc:	4b07      	ldr	r3, [pc, #28]	@ (800651c <FLASH_MassErase+0x44>)
 80064fe:	691a      	ldr	r2, [r3, #16]
 8006500:	79fb      	ldrb	r3, [r7, #7]
 8006502:	021b      	lsls	r3, r3, #8
 8006504:	4313      	orrs	r3, r2
 8006506:	4a05      	ldr	r2, [pc, #20]	@ (800651c <FLASH_MassErase+0x44>)
 8006508:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800650c:	6113      	str	r3, [r2, #16]
}
 800650e:	bf00      	nop
 8006510:	370c      	adds	r7, #12
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	40023c00 	.word	0x40023c00

08006520 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8006520:	b480      	push	{r7}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	460b      	mov	r3, r1
 800652a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800652c:	2300      	movs	r3, #0
 800652e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8006530:	78fb      	ldrb	r3, [r7, #3]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d102      	bne.n	800653c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8006536:	2300      	movs	r3, #0
 8006538:	60fb      	str	r3, [r7, #12]
 800653a:	e010      	b.n	800655e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800653c:	78fb      	ldrb	r3, [r7, #3]
 800653e:	2b01      	cmp	r3, #1
 8006540:	d103      	bne.n	800654a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8006542:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006546:	60fb      	str	r3, [r7, #12]
 8006548:	e009      	b.n	800655e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800654a:	78fb      	ldrb	r3, [r7, #3]
 800654c:	2b02      	cmp	r3, #2
 800654e:	d103      	bne.n	8006558 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8006550:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006554:	60fb      	str	r3, [r7, #12]
 8006556:	e002      	b.n	800655e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8006558:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800655c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800655e:	4b13      	ldr	r3, [pc, #76]	@ (80065ac <FLASH_Erase_Sector+0x8c>)
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	4a12      	ldr	r2, [pc, #72]	@ (80065ac <FLASH_Erase_Sector+0x8c>)
 8006564:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006568:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800656a:	4b10      	ldr	r3, [pc, #64]	@ (80065ac <FLASH_Erase_Sector+0x8c>)
 800656c:	691a      	ldr	r2, [r3, #16]
 800656e:	490f      	ldr	r1, [pc, #60]	@ (80065ac <FLASH_Erase_Sector+0x8c>)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	4313      	orrs	r3, r2
 8006574:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8006576:	4b0d      	ldr	r3, [pc, #52]	@ (80065ac <FLASH_Erase_Sector+0x8c>)
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	4a0c      	ldr	r2, [pc, #48]	@ (80065ac <FLASH_Erase_Sector+0x8c>)
 800657c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006580:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8006582:	4b0a      	ldr	r3, [pc, #40]	@ (80065ac <FLASH_Erase_Sector+0x8c>)
 8006584:	691a      	ldr	r2, [r3, #16]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	00db      	lsls	r3, r3, #3
 800658a:	4313      	orrs	r3, r2
 800658c:	4a07      	ldr	r2, [pc, #28]	@ (80065ac <FLASH_Erase_Sector+0x8c>)
 800658e:	f043 0302 	orr.w	r3, r3, #2
 8006592:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8006594:	4b05      	ldr	r3, [pc, #20]	@ (80065ac <FLASH_Erase_Sector+0x8c>)
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	4a04      	ldr	r2, [pc, #16]	@ (80065ac <FLASH_Erase_Sector+0x8c>)
 800659a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800659e:	6113      	str	r3, [r2, #16]
}
 80065a0:	bf00      	nop
 80065a2:	3714      	adds	r7, #20
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	40023c00 	.word	0x40023c00

080065b0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80065b0:	b480      	push	{r7}
 80065b2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80065b4:	4b20      	ldr	r3, [pc, #128]	@ (8006638 <FLASH_FlushCaches+0x88>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d017      	beq.n	80065f0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80065c0:	4b1d      	ldr	r3, [pc, #116]	@ (8006638 <FLASH_FlushCaches+0x88>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a1c      	ldr	r2, [pc, #112]	@ (8006638 <FLASH_FlushCaches+0x88>)
 80065c6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065ca:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80065cc:	4b1a      	ldr	r3, [pc, #104]	@ (8006638 <FLASH_FlushCaches+0x88>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a19      	ldr	r2, [pc, #100]	@ (8006638 <FLASH_FlushCaches+0x88>)
 80065d2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80065d6:	6013      	str	r3, [r2, #0]
 80065d8:	4b17      	ldr	r3, [pc, #92]	@ (8006638 <FLASH_FlushCaches+0x88>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a16      	ldr	r2, [pc, #88]	@ (8006638 <FLASH_FlushCaches+0x88>)
 80065de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80065e2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80065e4:	4b14      	ldr	r3, [pc, #80]	@ (8006638 <FLASH_FlushCaches+0x88>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a13      	ldr	r2, [pc, #76]	@ (8006638 <FLASH_FlushCaches+0x88>)
 80065ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80065ee:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80065f0:	4b11      	ldr	r3, [pc, #68]	@ (8006638 <FLASH_FlushCaches+0x88>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d017      	beq.n	800662c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80065fc:	4b0e      	ldr	r3, [pc, #56]	@ (8006638 <FLASH_FlushCaches+0x88>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a0d      	ldr	r2, [pc, #52]	@ (8006638 <FLASH_FlushCaches+0x88>)
 8006602:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006606:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006608:	4b0b      	ldr	r3, [pc, #44]	@ (8006638 <FLASH_FlushCaches+0x88>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a0a      	ldr	r2, [pc, #40]	@ (8006638 <FLASH_FlushCaches+0x88>)
 800660e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006612:	6013      	str	r3, [r2, #0]
 8006614:	4b08      	ldr	r3, [pc, #32]	@ (8006638 <FLASH_FlushCaches+0x88>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a07      	ldr	r2, [pc, #28]	@ (8006638 <FLASH_FlushCaches+0x88>)
 800661a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800661e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006620:	4b05      	ldr	r3, [pc, #20]	@ (8006638 <FLASH_FlushCaches+0x88>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a04      	ldr	r2, [pc, #16]	@ (8006638 <FLASH_FlushCaches+0x88>)
 8006626:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800662a:	6013      	str	r3, [r2, #0]
  }
}
 800662c:	bf00      	nop
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	40023c00 	.word	0x40023c00

0800663c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800663c:	b480      	push	{r7}
 800663e:	b089      	sub	sp, #36	@ 0x24
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006646:	2300      	movs	r3, #0
 8006648:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800664a:	2300      	movs	r3, #0
 800664c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800664e:	2300      	movs	r3, #0
 8006650:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006652:	2300      	movs	r3, #0
 8006654:	61fb      	str	r3, [r7, #28]
 8006656:	e16b      	b.n	8006930 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006658:	2201      	movs	r2, #1
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	fa02 f303 	lsl.w	r3, r2, r3
 8006660:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	697a      	ldr	r2, [r7, #20]
 8006668:	4013      	ands	r3, r2
 800666a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	429a      	cmp	r2, r3
 8006672:	f040 815a 	bne.w	800692a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f003 0303 	and.w	r3, r3, #3
 800667e:	2b01      	cmp	r3, #1
 8006680:	d005      	beq.n	800668e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800668a:	2b02      	cmp	r3, #2
 800668c:	d130      	bne.n	80066f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	005b      	lsls	r3, r3, #1
 8006698:	2203      	movs	r2, #3
 800669a:	fa02 f303 	lsl.w	r3, r2, r3
 800669e:	43db      	mvns	r3, r3
 80066a0:	69ba      	ldr	r2, [r7, #24]
 80066a2:	4013      	ands	r3, r2
 80066a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	68da      	ldr	r2, [r3, #12]
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	005b      	lsls	r3, r3, #1
 80066ae:	fa02 f303 	lsl.w	r3, r2, r3
 80066b2:	69ba      	ldr	r2, [r7, #24]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	69ba      	ldr	r2, [r7, #24]
 80066bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80066c4:	2201      	movs	r2, #1
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	fa02 f303 	lsl.w	r3, r2, r3
 80066cc:	43db      	mvns	r3, r3
 80066ce:	69ba      	ldr	r2, [r7, #24]
 80066d0:	4013      	ands	r3, r2
 80066d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	091b      	lsrs	r3, r3, #4
 80066da:	f003 0201 	and.w	r2, r3, #1
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	fa02 f303 	lsl.w	r3, r2, r3
 80066e4:	69ba      	ldr	r2, [r7, #24]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	69ba      	ldr	r2, [r7, #24]
 80066ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	f003 0303 	and.w	r3, r3, #3
 80066f8:	2b03      	cmp	r3, #3
 80066fa:	d017      	beq.n	800672c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	005b      	lsls	r3, r3, #1
 8006706:	2203      	movs	r2, #3
 8006708:	fa02 f303 	lsl.w	r3, r2, r3
 800670c:	43db      	mvns	r3, r3
 800670e:	69ba      	ldr	r2, [r7, #24]
 8006710:	4013      	ands	r3, r2
 8006712:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	689a      	ldr	r2, [r3, #8]
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	005b      	lsls	r3, r3, #1
 800671c:	fa02 f303 	lsl.w	r3, r2, r3
 8006720:	69ba      	ldr	r2, [r7, #24]
 8006722:	4313      	orrs	r3, r2
 8006724:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	69ba      	ldr	r2, [r7, #24]
 800672a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	f003 0303 	and.w	r3, r3, #3
 8006734:	2b02      	cmp	r3, #2
 8006736:	d123      	bne.n	8006780 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	08da      	lsrs	r2, r3, #3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	3208      	adds	r2, #8
 8006740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006744:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	f003 0307 	and.w	r3, r3, #7
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	220f      	movs	r2, #15
 8006750:	fa02 f303 	lsl.w	r3, r2, r3
 8006754:	43db      	mvns	r3, r3
 8006756:	69ba      	ldr	r2, [r7, #24]
 8006758:	4013      	ands	r3, r2
 800675a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	691a      	ldr	r2, [r3, #16]
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	f003 0307 	and.w	r3, r3, #7
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	fa02 f303 	lsl.w	r3, r2, r3
 800676c:	69ba      	ldr	r2, [r7, #24]
 800676e:	4313      	orrs	r3, r2
 8006770:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	08da      	lsrs	r2, r3, #3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	3208      	adds	r2, #8
 800677a:	69b9      	ldr	r1, [r7, #24]
 800677c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	005b      	lsls	r3, r3, #1
 800678a:	2203      	movs	r2, #3
 800678c:	fa02 f303 	lsl.w	r3, r2, r3
 8006790:	43db      	mvns	r3, r3
 8006792:	69ba      	ldr	r2, [r7, #24]
 8006794:	4013      	ands	r3, r2
 8006796:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	f003 0203 	and.w	r2, r3, #3
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	005b      	lsls	r3, r3, #1
 80067a4:	fa02 f303 	lsl.w	r3, r2, r3
 80067a8:	69ba      	ldr	r2, [r7, #24]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	69ba      	ldr	r2, [r7, #24]
 80067b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80067bc:	2b00      	cmp	r3, #0
 80067be:	f000 80b4 	beq.w	800692a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067c2:	2300      	movs	r3, #0
 80067c4:	60fb      	str	r3, [r7, #12]
 80067c6:	4b60      	ldr	r3, [pc, #384]	@ (8006948 <HAL_GPIO_Init+0x30c>)
 80067c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067ca:	4a5f      	ldr	r2, [pc, #380]	@ (8006948 <HAL_GPIO_Init+0x30c>)
 80067cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80067d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80067d2:	4b5d      	ldr	r3, [pc, #372]	@ (8006948 <HAL_GPIO_Init+0x30c>)
 80067d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067da:	60fb      	str	r3, [r7, #12]
 80067dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80067de:	4a5b      	ldr	r2, [pc, #364]	@ (800694c <HAL_GPIO_Init+0x310>)
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	089b      	lsrs	r3, r3, #2
 80067e4:	3302      	adds	r3, #2
 80067e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	f003 0303 	and.w	r3, r3, #3
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	220f      	movs	r2, #15
 80067f6:	fa02 f303 	lsl.w	r3, r2, r3
 80067fa:	43db      	mvns	r3, r3
 80067fc:	69ba      	ldr	r2, [r7, #24]
 80067fe:	4013      	ands	r3, r2
 8006800:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a52      	ldr	r2, [pc, #328]	@ (8006950 <HAL_GPIO_Init+0x314>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d02b      	beq.n	8006862 <HAL_GPIO_Init+0x226>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a51      	ldr	r2, [pc, #324]	@ (8006954 <HAL_GPIO_Init+0x318>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d025      	beq.n	800685e <HAL_GPIO_Init+0x222>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a50      	ldr	r2, [pc, #320]	@ (8006958 <HAL_GPIO_Init+0x31c>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d01f      	beq.n	800685a <HAL_GPIO_Init+0x21e>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a4f      	ldr	r2, [pc, #316]	@ (800695c <HAL_GPIO_Init+0x320>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d019      	beq.n	8006856 <HAL_GPIO_Init+0x21a>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a4e      	ldr	r2, [pc, #312]	@ (8006960 <HAL_GPIO_Init+0x324>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d013      	beq.n	8006852 <HAL_GPIO_Init+0x216>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a4d      	ldr	r2, [pc, #308]	@ (8006964 <HAL_GPIO_Init+0x328>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d00d      	beq.n	800684e <HAL_GPIO_Init+0x212>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a4c      	ldr	r2, [pc, #304]	@ (8006968 <HAL_GPIO_Init+0x32c>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d007      	beq.n	800684a <HAL_GPIO_Init+0x20e>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a4b      	ldr	r2, [pc, #300]	@ (800696c <HAL_GPIO_Init+0x330>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d101      	bne.n	8006846 <HAL_GPIO_Init+0x20a>
 8006842:	2307      	movs	r3, #7
 8006844:	e00e      	b.n	8006864 <HAL_GPIO_Init+0x228>
 8006846:	2308      	movs	r3, #8
 8006848:	e00c      	b.n	8006864 <HAL_GPIO_Init+0x228>
 800684a:	2306      	movs	r3, #6
 800684c:	e00a      	b.n	8006864 <HAL_GPIO_Init+0x228>
 800684e:	2305      	movs	r3, #5
 8006850:	e008      	b.n	8006864 <HAL_GPIO_Init+0x228>
 8006852:	2304      	movs	r3, #4
 8006854:	e006      	b.n	8006864 <HAL_GPIO_Init+0x228>
 8006856:	2303      	movs	r3, #3
 8006858:	e004      	b.n	8006864 <HAL_GPIO_Init+0x228>
 800685a:	2302      	movs	r3, #2
 800685c:	e002      	b.n	8006864 <HAL_GPIO_Init+0x228>
 800685e:	2301      	movs	r3, #1
 8006860:	e000      	b.n	8006864 <HAL_GPIO_Init+0x228>
 8006862:	2300      	movs	r3, #0
 8006864:	69fa      	ldr	r2, [r7, #28]
 8006866:	f002 0203 	and.w	r2, r2, #3
 800686a:	0092      	lsls	r2, r2, #2
 800686c:	4093      	lsls	r3, r2
 800686e:	69ba      	ldr	r2, [r7, #24]
 8006870:	4313      	orrs	r3, r2
 8006872:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006874:	4935      	ldr	r1, [pc, #212]	@ (800694c <HAL_GPIO_Init+0x310>)
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	089b      	lsrs	r3, r3, #2
 800687a:	3302      	adds	r3, #2
 800687c:	69ba      	ldr	r2, [r7, #24]
 800687e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006882:	4b3b      	ldr	r3, [pc, #236]	@ (8006970 <HAL_GPIO_Init+0x334>)
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	43db      	mvns	r3, r3
 800688c:	69ba      	ldr	r2, [r7, #24]
 800688e:	4013      	ands	r3, r2
 8006890:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800689a:	2b00      	cmp	r3, #0
 800689c:	d003      	beq.n	80068a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800689e:	69ba      	ldr	r2, [r7, #24]
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80068a6:	4a32      	ldr	r2, [pc, #200]	@ (8006970 <HAL_GPIO_Init+0x334>)
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80068ac:	4b30      	ldr	r3, [pc, #192]	@ (8006970 <HAL_GPIO_Init+0x334>)
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	43db      	mvns	r3, r3
 80068b6:	69ba      	ldr	r2, [r7, #24]
 80068b8:	4013      	ands	r3, r2
 80068ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d003      	beq.n	80068d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80068c8:	69ba      	ldr	r2, [r7, #24]
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80068d0:	4a27      	ldr	r2, [pc, #156]	@ (8006970 <HAL_GPIO_Init+0x334>)
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80068d6:	4b26      	ldr	r3, [pc, #152]	@ (8006970 <HAL_GPIO_Init+0x334>)
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	43db      	mvns	r3, r3
 80068e0:	69ba      	ldr	r2, [r7, #24]
 80068e2:	4013      	ands	r3, r2
 80068e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d003      	beq.n	80068fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80068f2:	69ba      	ldr	r2, [r7, #24]
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80068fa:	4a1d      	ldr	r2, [pc, #116]	@ (8006970 <HAL_GPIO_Init+0x334>)
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006900:	4b1b      	ldr	r3, [pc, #108]	@ (8006970 <HAL_GPIO_Init+0x334>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	43db      	mvns	r3, r3
 800690a:	69ba      	ldr	r2, [r7, #24]
 800690c:	4013      	ands	r3, r2
 800690e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d003      	beq.n	8006924 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800691c:	69ba      	ldr	r2, [r7, #24]
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	4313      	orrs	r3, r2
 8006922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006924:	4a12      	ldr	r2, [pc, #72]	@ (8006970 <HAL_GPIO_Init+0x334>)
 8006926:	69bb      	ldr	r3, [r7, #24]
 8006928:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	3301      	adds	r3, #1
 800692e:	61fb      	str	r3, [r7, #28]
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	2b0f      	cmp	r3, #15
 8006934:	f67f ae90 	bls.w	8006658 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006938:	bf00      	nop
 800693a:	bf00      	nop
 800693c:	3724      	adds	r7, #36	@ 0x24
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr
 8006946:	bf00      	nop
 8006948:	40023800 	.word	0x40023800
 800694c:	40013800 	.word	0x40013800
 8006950:	40020000 	.word	0x40020000
 8006954:	40020400 	.word	0x40020400
 8006958:	40020800 	.word	0x40020800
 800695c:	40020c00 	.word	0x40020c00
 8006960:	40021000 	.word	0x40021000
 8006964:	40021400 	.word	0x40021400
 8006968:	40021800 	.word	0x40021800
 800696c:	40021c00 	.word	0x40021c00
 8006970:	40013c00 	.word	0x40013c00

08006974 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	460b      	mov	r3, r1
 800697e:	807b      	strh	r3, [r7, #2]
 8006980:	4613      	mov	r3, r2
 8006982:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006984:	787b      	ldrb	r3, [r7, #1]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d003      	beq.n	8006992 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800698a:	887a      	ldrh	r2, [r7, #2]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006990:	e003      	b.n	800699a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006992:	887b      	ldrh	r3, [r7, #2]
 8006994:	041a      	lsls	r2, r3, #16
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	619a      	str	r2, [r3, #24]
}
 800699a:	bf00      	nop
 800699c:	370c      	adds	r7, #12
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
	...

080069a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d101      	bne.n	80069ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e12b      	b.n	8006c12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d106      	bne.n	80069d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f7fa fdaa 	bl	8001528 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2224      	movs	r2, #36	@ 0x24
 80069d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f022 0201 	bic.w	r2, r2, #1
 80069ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80069fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006a0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006a0c:	f001 fc62 	bl	80082d4 <HAL_RCC_GetPCLK1Freq>
 8006a10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	4a81      	ldr	r2, [pc, #516]	@ (8006c1c <HAL_I2C_Init+0x274>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d807      	bhi.n	8006a2c <HAL_I2C_Init+0x84>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	4a80      	ldr	r2, [pc, #512]	@ (8006c20 <HAL_I2C_Init+0x278>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	bf94      	ite	ls
 8006a24:	2301      	movls	r3, #1
 8006a26:	2300      	movhi	r3, #0
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	e006      	b.n	8006a3a <HAL_I2C_Init+0x92>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	4a7d      	ldr	r2, [pc, #500]	@ (8006c24 <HAL_I2C_Init+0x27c>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	bf94      	ite	ls
 8006a34:	2301      	movls	r3, #1
 8006a36:	2300      	movhi	r3, #0
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d001      	beq.n	8006a42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e0e7      	b.n	8006c12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	4a78      	ldr	r2, [pc, #480]	@ (8006c28 <HAL_I2C_Init+0x280>)
 8006a46:	fba2 2303 	umull	r2, r3, r2, r3
 8006a4a:	0c9b      	lsrs	r3, r3, #18
 8006a4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68ba      	ldr	r2, [r7, #8]
 8006a5e:	430a      	orrs	r2, r1
 8006a60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	6a1b      	ldr	r3, [r3, #32]
 8006a68:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	4a6a      	ldr	r2, [pc, #424]	@ (8006c1c <HAL_I2C_Init+0x274>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d802      	bhi.n	8006a7c <HAL_I2C_Init+0xd4>
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	e009      	b.n	8006a90 <HAL_I2C_Init+0xe8>
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006a82:	fb02 f303 	mul.w	r3, r2, r3
 8006a86:	4a69      	ldr	r2, [pc, #420]	@ (8006c2c <HAL_I2C_Init+0x284>)
 8006a88:	fba2 2303 	umull	r2, r3, r2, r3
 8006a8c:	099b      	lsrs	r3, r3, #6
 8006a8e:	3301      	adds	r3, #1
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	6812      	ldr	r2, [r2, #0]
 8006a94:	430b      	orrs	r3, r1
 8006a96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	69db      	ldr	r3, [r3, #28]
 8006a9e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006aa2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	495c      	ldr	r1, [pc, #368]	@ (8006c1c <HAL_I2C_Init+0x274>)
 8006aac:	428b      	cmp	r3, r1
 8006aae:	d819      	bhi.n	8006ae4 <HAL_I2C_Init+0x13c>
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	1e59      	subs	r1, r3, #1
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	005b      	lsls	r3, r3, #1
 8006aba:	fbb1 f3f3 	udiv	r3, r1, r3
 8006abe:	1c59      	adds	r1, r3, #1
 8006ac0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006ac4:	400b      	ands	r3, r1
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00a      	beq.n	8006ae0 <HAL_I2C_Init+0x138>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	1e59      	subs	r1, r3, #1
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	005b      	lsls	r3, r3, #1
 8006ad4:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ad8:	3301      	adds	r3, #1
 8006ada:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ade:	e051      	b.n	8006b84 <HAL_I2C_Init+0x1dc>
 8006ae0:	2304      	movs	r3, #4
 8006ae2:	e04f      	b.n	8006b84 <HAL_I2C_Init+0x1dc>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d111      	bne.n	8006b10 <HAL_I2C_Init+0x168>
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	1e58      	subs	r0, r3, #1
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6859      	ldr	r1, [r3, #4]
 8006af4:	460b      	mov	r3, r1
 8006af6:	005b      	lsls	r3, r3, #1
 8006af8:	440b      	add	r3, r1
 8006afa:	fbb0 f3f3 	udiv	r3, r0, r3
 8006afe:	3301      	adds	r3, #1
 8006b00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	bf0c      	ite	eq
 8006b08:	2301      	moveq	r3, #1
 8006b0a:	2300      	movne	r3, #0
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	e012      	b.n	8006b36 <HAL_I2C_Init+0x18e>
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	1e58      	subs	r0, r3, #1
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6859      	ldr	r1, [r3, #4]
 8006b18:	460b      	mov	r3, r1
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	440b      	add	r3, r1
 8006b1e:	0099      	lsls	r1, r3, #2
 8006b20:	440b      	add	r3, r1
 8006b22:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b26:	3301      	adds	r3, #1
 8006b28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	bf0c      	ite	eq
 8006b30:	2301      	moveq	r3, #1
 8006b32:	2300      	movne	r3, #0
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d001      	beq.n	8006b3e <HAL_I2C_Init+0x196>
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e022      	b.n	8006b84 <HAL_I2C_Init+0x1dc>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10e      	bne.n	8006b64 <HAL_I2C_Init+0x1bc>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	1e58      	subs	r0, r3, #1
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6859      	ldr	r1, [r3, #4]
 8006b4e:	460b      	mov	r3, r1
 8006b50:	005b      	lsls	r3, r3, #1
 8006b52:	440b      	add	r3, r1
 8006b54:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b58:	3301      	adds	r3, #1
 8006b5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b62:	e00f      	b.n	8006b84 <HAL_I2C_Init+0x1dc>
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	1e58      	subs	r0, r3, #1
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6859      	ldr	r1, [r3, #4]
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	440b      	add	r3, r1
 8006b72:	0099      	lsls	r1, r3, #2
 8006b74:	440b      	add	r3, r1
 8006b76:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b84:	6879      	ldr	r1, [r7, #4]
 8006b86:	6809      	ldr	r1, [r1, #0]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	69da      	ldr	r2, [r3, #28]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a1b      	ldr	r3, [r3, #32]
 8006b9e:	431a      	orrs	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	430a      	orrs	r2, r1
 8006ba6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006bb2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	6911      	ldr	r1, [r2, #16]
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	68d2      	ldr	r2, [r2, #12]
 8006bbe:	4311      	orrs	r1, r2
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	6812      	ldr	r2, [r2, #0]
 8006bc4:	430b      	orrs	r3, r1
 8006bc6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	695a      	ldr	r2, [r3, #20]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	431a      	orrs	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	430a      	orrs	r2, r1
 8006be2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f042 0201 	orr.w	r2, r2, #1
 8006bf2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2220      	movs	r2, #32
 8006bfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3710      	adds	r7, #16
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	000186a0 	.word	0x000186a0
 8006c20:	001e847f 	.word	0x001e847f
 8006c24:	003d08ff 	.word	0x003d08ff
 8006c28:	431bde83 	.word	0x431bde83
 8006c2c:	10624dd3 	.word	0x10624dd3

08006c30 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b088      	sub	sp, #32
 8006c34:	af02      	add	r7, sp, #8
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	4608      	mov	r0, r1
 8006c3a:	4611      	mov	r1, r2
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	4603      	mov	r3, r0
 8006c40:	817b      	strh	r3, [r7, #10]
 8006c42:	460b      	mov	r3, r1
 8006c44:	813b      	strh	r3, [r7, #8]
 8006c46:	4613      	mov	r3, r2
 8006c48:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006c4a:	f7ff f853 	bl	8005cf4 <HAL_GetTick>
 8006c4e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	2b20      	cmp	r3, #32
 8006c5a:	f040 80d9 	bne.w	8006e10 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	9300      	str	r3, [sp, #0]
 8006c62:	2319      	movs	r3, #25
 8006c64:	2201      	movs	r2, #1
 8006c66:	496d      	ldr	r1, [pc, #436]	@ (8006e1c <HAL_I2C_Mem_Write+0x1ec>)
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	f000 fc8b 	bl	8007584 <I2C_WaitOnFlagUntilTimeout>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d001      	beq.n	8006c78 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006c74:	2302      	movs	r3, #2
 8006c76:	e0cc      	b.n	8006e12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d101      	bne.n	8006c86 <HAL_I2C_Mem_Write+0x56>
 8006c82:	2302      	movs	r3, #2
 8006c84:	e0c5      	b.n	8006e12 <HAL_I2C_Mem_Write+0x1e2>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0301 	and.w	r3, r3, #1
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d007      	beq.n	8006cac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f042 0201 	orr.w	r2, r2, #1
 8006caa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006cba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2221      	movs	r2, #33	@ 0x21
 8006cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2240      	movs	r2, #64	@ 0x40
 8006cc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6a3a      	ldr	r2, [r7, #32]
 8006cd6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006cdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	4a4d      	ldr	r2, [pc, #308]	@ (8006e20 <HAL_I2C_Mem_Write+0x1f0>)
 8006cec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006cee:	88f8      	ldrh	r0, [r7, #6]
 8006cf0:	893a      	ldrh	r2, [r7, #8]
 8006cf2:	8979      	ldrh	r1, [r7, #10]
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	9301      	str	r3, [sp, #4]
 8006cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cfa:	9300      	str	r3, [sp, #0]
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f000 fac2 	bl	8007288 <I2C_RequestMemoryWrite>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d052      	beq.n	8006db0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e081      	b.n	8006e12 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d0e:	697a      	ldr	r2, [r7, #20]
 8006d10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f000 fd50 	bl	80077b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00d      	beq.n	8006d3a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d22:	2b04      	cmp	r3, #4
 8006d24:	d107      	bne.n	8006d36 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e06b      	b.n	8006e12 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d3e:	781a      	ldrb	r2, [r3, #0]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d4a:	1c5a      	adds	r2, r3, #1
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d54:	3b01      	subs	r3, #1
 8006d56:	b29a      	uxth	r2, r3
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	3b01      	subs	r3, #1
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	695b      	ldr	r3, [r3, #20]
 8006d70:	f003 0304 	and.w	r3, r3, #4
 8006d74:	2b04      	cmp	r3, #4
 8006d76:	d11b      	bne.n	8006db0 <HAL_I2C_Mem_Write+0x180>
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d017      	beq.n	8006db0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d84:	781a      	ldrb	r2, [r3, #0]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d90:	1c5a      	adds	r2, r3, #1
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	b29a      	uxth	r2, r3
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	3b01      	subs	r3, #1
 8006daa:	b29a      	uxth	r2, r3
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d1aa      	bne.n	8006d0e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006db8:	697a      	ldr	r2, [r7, #20]
 8006dba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f000 fd43 	bl	8007848 <I2C_WaitOnBTFFlagUntilTimeout>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00d      	beq.n	8006de4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dcc:	2b04      	cmp	r3, #4
 8006dce:	d107      	bne.n	8006de0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006dde:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e016      	b.n	8006e12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006df2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2220      	movs	r2, #32
 8006df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	e000      	b.n	8006e12 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006e10:	2302      	movs	r3, #2
  }
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3718      	adds	r7, #24
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	00100002 	.word	0x00100002
 8006e20:	ffff0000 	.word	0xffff0000

08006e24 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b08c      	sub	sp, #48	@ 0x30
 8006e28:	af02      	add	r7, sp, #8
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	4608      	mov	r0, r1
 8006e2e:	4611      	mov	r1, r2
 8006e30:	461a      	mov	r2, r3
 8006e32:	4603      	mov	r3, r0
 8006e34:	817b      	strh	r3, [r7, #10]
 8006e36:	460b      	mov	r3, r1
 8006e38:	813b      	strh	r3, [r7, #8]
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006e3e:	f7fe ff59 	bl	8005cf4 <HAL_GetTick>
 8006e42:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	2b20      	cmp	r3, #32
 8006e4e:	f040 8214 	bne.w	800727a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e54:	9300      	str	r3, [sp, #0]
 8006e56:	2319      	movs	r3, #25
 8006e58:	2201      	movs	r2, #1
 8006e5a:	497b      	ldr	r1, [pc, #492]	@ (8007048 <HAL_I2C_Mem_Read+0x224>)
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f000 fb91 	bl	8007584 <I2C_WaitOnFlagUntilTimeout>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d001      	beq.n	8006e6c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006e68:	2302      	movs	r3, #2
 8006e6a:	e207      	b.n	800727c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d101      	bne.n	8006e7a <HAL_I2C_Mem_Read+0x56>
 8006e76:	2302      	movs	r3, #2
 8006e78:	e200      	b.n	800727c <HAL_I2C_Mem_Read+0x458>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 0301 	and.w	r3, r3, #1
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d007      	beq.n	8006ea0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f042 0201 	orr.w	r2, r2, #1
 8006e9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006eae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2222      	movs	r2, #34	@ 0x22
 8006eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2240      	movs	r2, #64	@ 0x40
 8006ebc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006eca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006ed0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	4a5b      	ldr	r2, [pc, #364]	@ (800704c <HAL_I2C_Mem_Read+0x228>)
 8006ee0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006ee2:	88f8      	ldrh	r0, [r7, #6]
 8006ee4:	893a      	ldrh	r2, [r7, #8]
 8006ee6:	8979      	ldrh	r1, [r7, #10]
 8006ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eea:	9301      	str	r3, [sp, #4]
 8006eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eee:	9300      	str	r3, [sp, #0]
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	f000 fa5e 	bl	80073b4 <I2C_RequestMemoryRead>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d001      	beq.n	8006f02 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e1bc      	b.n	800727c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d113      	bne.n	8006f32 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	623b      	str	r3, [r7, #32]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	695b      	ldr	r3, [r3, #20]
 8006f14:	623b      	str	r3, [r7, #32]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	699b      	ldr	r3, [r3, #24]
 8006f1c:	623b      	str	r3, [r7, #32]
 8006f1e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f2e:	601a      	str	r2, [r3, #0]
 8006f30:	e190      	b.n	8007254 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d11b      	bne.n	8006f72 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	61fb      	str	r3, [r7, #28]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	695b      	ldr	r3, [r3, #20]
 8006f54:	61fb      	str	r3, [r7, #28]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	699b      	ldr	r3, [r3, #24]
 8006f5c:	61fb      	str	r3, [r7, #28]
 8006f5e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f6e:	601a      	str	r2, [r3, #0]
 8006f70:	e170      	b.n	8007254 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d11b      	bne.n	8006fb2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f88:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	61bb      	str	r3, [r7, #24]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	695b      	ldr	r3, [r3, #20]
 8006fa4:	61bb      	str	r3, [r7, #24]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	699b      	ldr	r3, [r3, #24]
 8006fac:	61bb      	str	r3, [r7, #24]
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	e150      	b.n	8007254 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	617b      	str	r3, [r7, #20]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	695b      	ldr	r3, [r3, #20]
 8006fbc:	617b      	str	r3, [r7, #20]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	617b      	str	r3, [r7, #20]
 8006fc6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006fc8:	e144      	b.n	8007254 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fce:	2b03      	cmp	r3, #3
 8006fd0:	f200 80f1 	bhi.w	80071b6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d123      	bne.n	8007024 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fde:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f000 fc79 	bl	80078d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d001      	beq.n	8006ff0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e145      	b.n	800727c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	691a      	ldr	r2, [r3, #16]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ffa:	b2d2      	uxtb	r2, r2
 8006ffc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007002:	1c5a      	adds	r2, r3, #1
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800700c:	3b01      	subs	r3, #1
 800700e:	b29a      	uxth	r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007018:	b29b      	uxth	r3, r3
 800701a:	3b01      	subs	r3, #1
 800701c:	b29a      	uxth	r2, r3
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007022:	e117      	b.n	8007254 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007028:	2b02      	cmp	r3, #2
 800702a:	d14e      	bne.n	80070ca <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800702c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800702e:	9300      	str	r3, [sp, #0]
 8007030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007032:	2200      	movs	r2, #0
 8007034:	4906      	ldr	r1, [pc, #24]	@ (8007050 <HAL_I2C_Mem_Read+0x22c>)
 8007036:	68f8      	ldr	r0, [r7, #12]
 8007038:	f000 faa4 	bl	8007584 <I2C_WaitOnFlagUntilTimeout>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d008      	beq.n	8007054 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	e11a      	b.n	800727c <HAL_I2C_Mem_Read+0x458>
 8007046:	bf00      	nop
 8007048:	00100002 	.word	0x00100002
 800704c:	ffff0000 	.word	0xffff0000
 8007050:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007062:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	691a      	ldr	r2, [r3, #16]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800706e:	b2d2      	uxtb	r2, r2
 8007070:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007076:	1c5a      	adds	r2, r3, #1
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007080:	3b01      	subs	r3, #1
 8007082:	b29a      	uxth	r2, r3
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800708c:	b29b      	uxth	r3, r3
 800708e:	3b01      	subs	r3, #1
 8007090:	b29a      	uxth	r2, r3
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	691a      	ldr	r2, [r3, #16]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a0:	b2d2      	uxtb	r2, r2
 80070a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a8:	1c5a      	adds	r2, r3, #1
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070b2:	3b01      	subs	r3, #1
 80070b4:	b29a      	uxth	r2, r3
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070be:	b29b      	uxth	r3, r3
 80070c0:	3b01      	subs	r3, #1
 80070c2:	b29a      	uxth	r2, r3
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80070c8:	e0c4      	b.n	8007254 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80070ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070d0:	2200      	movs	r2, #0
 80070d2:	496c      	ldr	r1, [pc, #432]	@ (8007284 <HAL_I2C_Mem_Read+0x460>)
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f000 fa55 	bl	8007584 <I2C_WaitOnFlagUntilTimeout>
 80070da:	4603      	mov	r3, r0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d001      	beq.n	80070e4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	e0cb      	b.n	800727c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80070f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	691a      	ldr	r2, [r3, #16]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070fe:	b2d2      	uxtb	r2, r2
 8007100:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007106:	1c5a      	adds	r2, r3, #1
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007110:	3b01      	subs	r3, #1
 8007112:	b29a      	uxth	r2, r3
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800711c:	b29b      	uxth	r3, r3
 800711e:	3b01      	subs	r3, #1
 8007120:	b29a      	uxth	r2, r3
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007128:	9300      	str	r3, [sp, #0]
 800712a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800712c:	2200      	movs	r2, #0
 800712e:	4955      	ldr	r1, [pc, #340]	@ (8007284 <HAL_I2C_Mem_Read+0x460>)
 8007130:	68f8      	ldr	r0, [r7, #12]
 8007132:	f000 fa27 	bl	8007584 <I2C_WaitOnFlagUntilTimeout>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d001      	beq.n	8007140 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	e09d      	b.n	800727c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800714e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	691a      	ldr	r2, [r3, #16]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800715a:	b2d2      	uxtb	r2, r2
 800715c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007162:	1c5a      	adds	r2, r3, #1
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800716c:	3b01      	subs	r3, #1
 800716e:	b29a      	uxth	r2, r3
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007178:	b29b      	uxth	r3, r3
 800717a:	3b01      	subs	r3, #1
 800717c:	b29a      	uxth	r2, r3
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	691a      	ldr	r2, [r3, #16]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800718c:	b2d2      	uxtb	r2, r2
 800718e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007194:	1c5a      	adds	r2, r3, #1
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800719e:	3b01      	subs	r3, #1
 80071a0:	b29a      	uxth	r2, r3
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	3b01      	subs	r3, #1
 80071ae:	b29a      	uxth	r2, r3
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80071b4:	e04e      	b.n	8007254 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071b8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f000 fb8c 	bl	80078d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d001      	beq.n	80071ca <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e058      	b.n	800727c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	691a      	ldr	r2, [r3, #16]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d4:	b2d2      	uxtb	r2, r2
 80071d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071dc:	1c5a      	adds	r2, r3, #1
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071e6:	3b01      	subs	r3, #1
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	3b01      	subs	r3, #1
 80071f6:	b29a      	uxth	r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	695b      	ldr	r3, [r3, #20]
 8007202:	f003 0304 	and.w	r3, r3, #4
 8007206:	2b04      	cmp	r3, #4
 8007208:	d124      	bne.n	8007254 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800720e:	2b03      	cmp	r3, #3
 8007210:	d107      	bne.n	8007222 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007220:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	691a      	ldr	r2, [r3, #16]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800722c:	b2d2      	uxtb	r2, r2
 800722e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007234:	1c5a      	adds	r2, r3, #1
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800723e:	3b01      	subs	r3, #1
 8007240:	b29a      	uxth	r2, r3
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800724a:	b29b      	uxth	r3, r3
 800724c:	3b01      	subs	r3, #1
 800724e:	b29a      	uxth	r2, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007258:	2b00      	cmp	r3, #0
 800725a:	f47f aeb6 	bne.w	8006fca <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2220      	movs	r2, #32
 8007262:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2200      	movs	r2, #0
 800726a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007276:	2300      	movs	r3, #0
 8007278:	e000      	b.n	800727c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800727a:	2302      	movs	r3, #2
  }
}
 800727c:	4618      	mov	r0, r3
 800727e:	3728      	adds	r7, #40	@ 0x28
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	00010004 	.word	0x00010004

08007288 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b088      	sub	sp, #32
 800728c:	af02      	add	r7, sp, #8
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	4608      	mov	r0, r1
 8007292:	4611      	mov	r1, r2
 8007294:	461a      	mov	r2, r3
 8007296:	4603      	mov	r3, r0
 8007298:	817b      	strh	r3, [r7, #10]
 800729a:	460b      	mov	r3, r1
 800729c:	813b      	strh	r3, [r7, #8]
 800729e:	4613      	mov	r3, r2
 80072a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80072b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80072b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b4:	9300      	str	r3, [sp, #0]
 80072b6:	6a3b      	ldr	r3, [r7, #32]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	f000 f960 	bl	8007584 <I2C_WaitOnFlagUntilTimeout>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00d      	beq.n	80072e6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072d8:	d103      	bne.n	80072e2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80072e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80072e2:	2303      	movs	r3, #3
 80072e4:	e05f      	b.n	80073a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80072e6:	897b      	ldrh	r3, [r7, #10]
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	461a      	mov	r2, r3
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80072f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80072f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f8:	6a3a      	ldr	r2, [r7, #32]
 80072fa:	492d      	ldr	r1, [pc, #180]	@ (80073b0 <I2C_RequestMemoryWrite+0x128>)
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f000 f9bb 	bl	8007678 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d001      	beq.n	800730c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	e04c      	b.n	80073a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800730c:	2300      	movs	r3, #0
 800730e:	617b      	str	r3, [r7, #20]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	695b      	ldr	r3, [r3, #20]
 8007316:	617b      	str	r3, [r7, #20]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	699b      	ldr	r3, [r3, #24]
 800731e:	617b      	str	r3, [r7, #20]
 8007320:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007324:	6a39      	ldr	r1, [r7, #32]
 8007326:	68f8      	ldr	r0, [r7, #12]
 8007328:	f000 fa46 	bl	80077b8 <I2C_WaitOnTXEFlagUntilTimeout>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d00d      	beq.n	800734e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007336:	2b04      	cmp	r3, #4
 8007338:	d107      	bne.n	800734a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007348:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	e02b      	b.n	80073a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800734e:	88fb      	ldrh	r3, [r7, #6]
 8007350:	2b01      	cmp	r3, #1
 8007352:	d105      	bne.n	8007360 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007354:	893b      	ldrh	r3, [r7, #8]
 8007356:	b2da      	uxtb	r2, r3
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	611a      	str	r2, [r3, #16]
 800735e:	e021      	b.n	80073a4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007360:	893b      	ldrh	r3, [r7, #8]
 8007362:	0a1b      	lsrs	r3, r3, #8
 8007364:	b29b      	uxth	r3, r3
 8007366:	b2da      	uxtb	r2, r3
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800736e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007370:	6a39      	ldr	r1, [r7, #32]
 8007372:	68f8      	ldr	r0, [r7, #12]
 8007374:	f000 fa20 	bl	80077b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d00d      	beq.n	800739a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007382:	2b04      	cmp	r3, #4
 8007384:	d107      	bne.n	8007396 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007394:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	e005      	b.n	80073a6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800739a:	893b      	ldrh	r3, [r7, #8]
 800739c:	b2da      	uxtb	r2, r3
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3718      	adds	r7, #24
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	00010002 	.word	0x00010002

080073b4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b088      	sub	sp, #32
 80073b8:	af02      	add	r7, sp, #8
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	4608      	mov	r0, r1
 80073be:	4611      	mov	r1, r2
 80073c0:	461a      	mov	r2, r3
 80073c2:	4603      	mov	r3, r0
 80073c4:	817b      	strh	r3, [r7, #10]
 80073c6:	460b      	mov	r3, r1
 80073c8:	813b      	strh	r3, [r7, #8]
 80073ca:	4613      	mov	r3, r2
 80073cc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80073dc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80073ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80073ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f0:	9300      	str	r3, [sp, #0]
 80073f2:	6a3b      	ldr	r3, [r7, #32]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	f000 f8c2 	bl	8007584 <I2C_WaitOnFlagUntilTimeout>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00d      	beq.n	8007422 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007410:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007414:	d103      	bne.n	800741e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800741c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800741e:	2303      	movs	r3, #3
 8007420:	e0aa      	b.n	8007578 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007422:	897b      	ldrh	r3, [r7, #10]
 8007424:	b2db      	uxtb	r3, r3
 8007426:	461a      	mov	r2, r3
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007430:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007434:	6a3a      	ldr	r2, [r7, #32]
 8007436:	4952      	ldr	r1, [pc, #328]	@ (8007580 <I2C_RequestMemoryRead+0x1cc>)
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f000 f91d 	bl	8007678 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d001      	beq.n	8007448 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	e097      	b.n	8007578 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007448:	2300      	movs	r3, #0
 800744a:	617b      	str	r3, [r7, #20]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	695b      	ldr	r3, [r3, #20]
 8007452:	617b      	str	r3, [r7, #20]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	617b      	str	r3, [r7, #20]
 800745c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800745e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007460:	6a39      	ldr	r1, [r7, #32]
 8007462:	68f8      	ldr	r0, [r7, #12]
 8007464:	f000 f9a8 	bl	80077b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d00d      	beq.n	800748a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007472:	2b04      	cmp	r3, #4
 8007474:	d107      	bne.n	8007486 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007484:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	e076      	b.n	8007578 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800748a:	88fb      	ldrh	r3, [r7, #6]
 800748c:	2b01      	cmp	r3, #1
 800748e:	d105      	bne.n	800749c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007490:	893b      	ldrh	r3, [r7, #8]
 8007492:	b2da      	uxtb	r2, r3
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	611a      	str	r2, [r3, #16]
 800749a:	e021      	b.n	80074e0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800749c:	893b      	ldrh	r3, [r7, #8]
 800749e:	0a1b      	lsrs	r3, r3, #8
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	b2da      	uxtb	r2, r3
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80074aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074ac:	6a39      	ldr	r1, [r7, #32]
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	f000 f982 	bl	80077b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00d      	beq.n	80074d6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074be:	2b04      	cmp	r3, #4
 80074c0:	d107      	bne.n	80074d2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80074d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e050      	b.n	8007578 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80074d6:	893b      	ldrh	r3, [r7, #8]
 80074d8:	b2da      	uxtb	r2, r3
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80074e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074e2:	6a39      	ldr	r1, [r7, #32]
 80074e4:	68f8      	ldr	r0, [r7, #12]
 80074e6:	f000 f967 	bl	80077b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00d      	beq.n	800750c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074f4:	2b04      	cmp	r3, #4
 80074f6:	d107      	bne.n	8007508 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007506:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	e035      	b.n	8007578 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800751a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800751c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800751e:	9300      	str	r3, [sp, #0]
 8007520:	6a3b      	ldr	r3, [r7, #32]
 8007522:	2200      	movs	r2, #0
 8007524:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007528:	68f8      	ldr	r0, [r7, #12]
 800752a:	f000 f82b 	bl	8007584 <I2C_WaitOnFlagUntilTimeout>
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d00d      	beq.n	8007550 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800753e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007542:	d103      	bne.n	800754c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800754a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800754c:	2303      	movs	r3, #3
 800754e:	e013      	b.n	8007578 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007550:	897b      	ldrh	r3, [r7, #10]
 8007552:	b2db      	uxtb	r3, r3
 8007554:	f043 0301 	orr.w	r3, r3, #1
 8007558:	b2da      	uxtb	r2, r3
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007562:	6a3a      	ldr	r2, [r7, #32]
 8007564:	4906      	ldr	r1, [pc, #24]	@ (8007580 <I2C_RequestMemoryRead+0x1cc>)
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f000 f886 	bl	8007678 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800756c:	4603      	mov	r3, r0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d001      	beq.n	8007576 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e000      	b.n	8007578 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3718      	adds	r7, #24
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}
 8007580:	00010002 	.word	0x00010002

08007584 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	603b      	str	r3, [r7, #0]
 8007590:	4613      	mov	r3, r2
 8007592:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007594:	e048      	b.n	8007628 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800759c:	d044      	beq.n	8007628 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800759e:	f7fe fba9 	bl	8005cf4 <HAL_GetTick>
 80075a2:	4602      	mov	r2, r0
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	683a      	ldr	r2, [r7, #0]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d302      	bcc.n	80075b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d139      	bne.n	8007628 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	0c1b      	lsrs	r3, r3, #16
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d10d      	bne.n	80075da <I2C_WaitOnFlagUntilTimeout+0x56>
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	695b      	ldr	r3, [r3, #20]
 80075c4:	43da      	mvns	r2, r3
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	4013      	ands	r3, r2
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	bf0c      	ite	eq
 80075d0:	2301      	moveq	r3, #1
 80075d2:	2300      	movne	r3, #0
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	461a      	mov	r2, r3
 80075d8:	e00c      	b.n	80075f4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	43da      	mvns	r2, r3
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	4013      	ands	r3, r2
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	bf0c      	ite	eq
 80075ec:	2301      	moveq	r3, #1
 80075ee:	2300      	movne	r3, #0
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	461a      	mov	r2, r3
 80075f4:	79fb      	ldrb	r3, [r7, #7]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d116      	bne.n	8007628 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2200      	movs	r2, #0
 80075fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2220      	movs	r2, #32
 8007604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2200      	movs	r2, #0
 800760c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007614:	f043 0220 	orr.w	r2, r3, #32
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2200      	movs	r2, #0
 8007620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e023      	b.n	8007670 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	0c1b      	lsrs	r3, r3, #16
 800762c:	b2db      	uxtb	r3, r3
 800762e:	2b01      	cmp	r3, #1
 8007630:	d10d      	bne.n	800764e <I2C_WaitOnFlagUntilTimeout+0xca>
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	695b      	ldr	r3, [r3, #20]
 8007638:	43da      	mvns	r2, r3
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	4013      	ands	r3, r2
 800763e:	b29b      	uxth	r3, r3
 8007640:	2b00      	cmp	r3, #0
 8007642:	bf0c      	ite	eq
 8007644:	2301      	moveq	r3, #1
 8007646:	2300      	movne	r3, #0
 8007648:	b2db      	uxtb	r3, r3
 800764a:	461a      	mov	r2, r3
 800764c:	e00c      	b.n	8007668 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	699b      	ldr	r3, [r3, #24]
 8007654:	43da      	mvns	r2, r3
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	4013      	ands	r3, r2
 800765a:	b29b      	uxth	r3, r3
 800765c:	2b00      	cmp	r3, #0
 800765e:	bf0c      	ite	eq
 8007660:	2301      	moveq	r3, #1
 8007662:	2300      	movne	r3, #0
 8007664:	b2db      	uxtb	r3, r3
 8007666:	461a      	mov	r2, r3
 8007668:	79fb      	ldrb	r3, [r7, #7]
 800766a:	429a      	cmp	r2, r3
 800766c:	d093      	beq.n	8007596 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	607a      	str	r2, [r7, #4]
 8007684:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007686:	e071      	b.n	800776c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	695b      	ldr	r3, [r3, #20]
 800768e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007692:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007696:	d123      	bne.n	80076e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80076a6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80076b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2200      	movs	r2, #0
 80076b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2220      	movs	r2, #32
 80076bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076cc:	f043 0204 	orr.w	r2, r3, #4
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	e067      	b.n	80077b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076e6:	d041      	beq.n	800776c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076e8:	f7fe fb04 	bl	8005cf4 <HAL_GetTick>
 80076ec:	4602      	mov	r2, r0
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	1ad3      	subs	r3, r2, r3
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d302      	bcc.n	80076fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d136      	bne.n	800776c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	0c1b      	lsrs	r3, r3, #16
 8007702:	b2db      	uxtb	r3, r3
 8007704:	2b01      	cmp	r3, #1
 8007706:	d10c      	bne.n	8007722 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	43da      	mvns	r2, r3
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	4013      	ands	r3, r2
 8007714:	b29b      	uxth	r3, r3
 8007716:	2b00      	cmp	r3, #0
 8007718:	bf14      	ite	ne
 800771a:	2301      	movne	r3, #1
 800771c:	2300      	moveq	r3, #0
 800771e:	b2db      	uxtb	r3, r3
 8007720:	e00b      	b.n	800773a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	699b      	ldr	r3, [r3, #24]
 8007728:	43da      	mvns	r2, r3
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	4013      	ands	r3, r2
 800772e:	b29b      	uxth	r3, r3
 8007730:	2b00      	cmp	r3, #0
 8007732:	bf14      	ite	ne
 8007734:	2301      	movne	r3, #1
 8007736:	2300      	moveq	r3, #0
 8007738:	b2db      	uxtb	r3, r3
 800773a:	2b00      	cmp	r3, #0
 800773c:	d016      	beq.n	800776c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2200      	movs	r2, #0
 8007742:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2220      	movs	r2, #32
 8007748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2200      	movs	r2, #0
 8007750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007758:	f043 0220 	orr.w	r2, r3, #32
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2200      	movs	r2, #0
 8007764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	e021      	b.n	80077b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	0c1b      	lsrs	r3, r3, #16
 8007770:	b2db      	uxtb	r3, r3
 8007772:	2b01      	cmp	r3, #1
 8007774:	d10c      	bne.n	8007790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	695b      	ldr	r3, [r3, #20]
 800777c:	43da      	mvns	r2, r3
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	4013      	ands	r3, r2
 8007782:	b29b      	uxth	r3, r3
 8007784:	2b00      	cmp	r3, #0
 8007786:	bf14      	ite	ne
 8007788:	2301      	movne	r3, #1
 800778a:	2300      	moveq	r3, #0
 800778c:	b2db      	uxtb	r3, r3
 800778e:	e00b      	b.n	80077a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	699b      	ldr	r3, [r3, #24]
 8007796:	43da      	mvns	r2, r3
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	4013      	ands	r3, r2
 800779c:	b29b      	uxth	r3, r3
 800779e:	2b00      	cmp	r3, #0
 80077a0:	bf14      	ite	ne
 80077a2:	2301      	movne	r3, #1
 80077a4:	2300      	moveq	r3, #0
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	f47f af6d 	bne.w	8007688 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80077c4:	e034      	b.n	8007830 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80077c6:	68f8      	ldr	r0, [r7, #12]
 80077c8:	f000 f8e3 	bl	8007992 <I2C_IsAcknowledgeFailed>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d001      	beq.n	80077d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	e034      	b.n	8007840 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077dc:	d028      	beq.n	8007830 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077de:	f7fe fa89 	bl	8005cf4 <HAL_GetTick>
 80077e2:	4602      	mov	r2, r0
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	1ad3      	subs	r3, r2, r3
 80077e8:	68ba      	ldr	r2, [r7, #8]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d302      	bcc.n	80077f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d11d      	bne.n	8007830 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	695b      	ldr	r3, [r3, #20]
 80077fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077fe:	2b80      	cmp	r3, #128	@ 0x80
 8007800:	d016      	beq.n	8007830 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2220      	movs	r2, #32
 800780c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2200      	movs	r2, #0
 8007814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800781c:	f043 0220 	orr.w	r2, r3, #32
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2200      	movs	r2, #0
 8007828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	e007      	b.n	8007840 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	695b      	ldr	r3, [r3, #20]
 8007836:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800783a:	2b80      	cmp	r3, #128	@ 0x80
 800783c:	d1c3      	bne.n	80077c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800783e:	2300      	movs	r3, #0
}
 8007840:	4618      	mov	r0, r3
 8007842:	3710      	adds	r7, #16
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	60b9      	str	r1, [r7, #8]
 8007852:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007854:	e034      	b.n	80078c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007856:	68f8      	ldr	r0, [r7, #12]
 8007858:	f000 f89b 	bl	8007992 <I2C_IsAcknowledgeFailed>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d001      	beq.n	8007866 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	e034      	b.n	80078d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800786c:	d028      	beq.n	80078c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800786e:	f7fe fa41 	bl	8005cf4 <HAL_GetTick>
 8007872:	4602      	mov	r2, r0
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	1ad3      	subs	r3, r2, r3
 8007878:	68ba      	ldr	r2, [r7, #8]
 800787a:	429a      	cmp	r2, r3
 800787c:	d302      	bcc.n	8007884 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d11d      	bne.n	80078c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	695b      	ldr	r3, [r3, #20]
 800788a:	f003 0304 	and.w	r3, r3, #4
 800788e:	2b04      	cmp	r3, #4
 8007890:	d016      	beq.n	80078c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2220      	movs	r2, #32
 800789c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078ac:	f043 0220 	orr.w	r2, r3, #32
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	e007      	b.n	80078d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	695b      	ldr	r3, [r3, #20]
 80078c6:	f003 0304 	and.w	r3, r3, #4
 80078ca:	2b04      	cmp	r3, #4
 80078cc:	d1c3      	bne.n	8007856 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80078e4:	e049      	b.n	800797a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	695b      	ldr	r3, [r3, #20]
 80078ec:	f003 0310 	and.w	r3, r3, #16
 80078f0:	2b10      	cmp	r3, #16
 80078f2:	d119      	bne.n	8007928 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f06f 0210 	mvn.w	r2, #16
 80078fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2220      	movs	r2, #32
 8007908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2200      	movs	r2, #0
 8007910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2200      	movs	r2, #0
 8007920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e030      	b.n	800798a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007928:	f7fe f9e4 	bl	8005cf4 <HAL_GetTick>
 800792c:	4602      	mov	r2, r0
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	68ba      	ldr	r2, [r7, #8]
 8007934:	429a      	cmp	r2, r3
 8007936:	d302      	bcc.n	800793e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d11d      	bne.n	800797a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	695b      	ldr	r3, [r3, #20]
 8007944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007948:	2b40      	cmp	r3, #64	@ 0x40
 800794a:	d016      	beq.n	800797a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2200      	movs	r2, #0
 8007950:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2220      	movs	r2, #32
 8007956:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2200      	movs	r2, #0
 800795e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007966:	f043 0220 	orr.w	r2, r3, #32
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2200      	movs	r2, #0
 8007972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	e007      	b.n	800798a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	695b      	ldr	r3, [r3, #20]
 8007980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007984:	2b40      	cmp	r3, #64	@ 0x40
 8007986:	d1ae      	bne.n	80078e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3710      	adds	r7, #16
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007992:	b480      	push	{r7}
 8007994:	b083      	sub	sp, #12
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	695b      	ldr	r3, [r3, #20]
 80079a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079a8:	d11b      	bne.n	80079e2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80079b2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2220      	movs	r2, #32
 80079be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ce:	f043 0204 	orr.w	r2, r3, #4
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	e000      	b.n	80079e4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d101      	bne.n	8007a02 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	e034      	b.n	8007a6c <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8007a0a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f245 5255 	movw	r2, #21845	@ 0x5555
 8007a14:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	6852      	ldr	r2, [r2, #4]
 8007a1e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	6892      	ldr	r2, [r2, #8]
 8007a28:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8007a2a:	f7fe f963 	bl	8005cf4 <HAL_GetTick>
 8007a2e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007a30:	e00f      	b.n	8007a52 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8007a32:	f7fe f95f 	bl	8005cf4 <HAL_GetTick>
 8007a36:	4602      	mov	r2, r0
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	1ad3      	subs	r3, r2, r3
 8007a3c:	2b31      	cmp	r3, #49	@ 0x31
 8007a3e:	d908      	bls.n	8007a52 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	f003 0303 	and.w	r3, r3, #3
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d001      	beq.n	8007a52 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8007a4e:	2303      	movs	r3, #3
 8007a50:	e00c      	b.n	8007a6c <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	68db      	ldr	r3, [r3, #12]
 8007a58:	f003 0303 	and.w	r3, r3, #3
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1e8      	bne.n	8007a32 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8007a68:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007a6a:	2300      	movs	r3, #0
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3710      	adds	r7, #16
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b086      	sub	sp, #24
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d101      	bne.n	8007a86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e267      	b.n	8007f56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f003 0301 	and.w	r3, r3, #1
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d075      	beq.n	8007b7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007a92:	4b88      	ldr	r3, [pc, #544]	@ (8007cb4 <HAL_RCC_OscConfig+0x240>)
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	f003 030c 	and.w	r3, r3, #12
 8007a9a:	2b04      	cmp	r3, #4
 8007a9c:	d00c      	beq.n	8007ab8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a9e:	4b85      	ldr	r3, [pc, #532]	@ (8007cb4 <HAL_RCC_OscConfig+0x240>)
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007aa6:	2b08      	cmp	r3, #8
 8007aa8:	d112      	bne.n	8007ad0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007aaa:	4b82      	ldr	r3, [pc, #520]	@ (8007cb4 <HAL_RCC_OscConfig+0x240>)
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ab2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ab6:	d10b      	bne.n	8007ad0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ab8:	4b7e      	ldr	r3, [pc, #504]	@ (8007cb4 <HAL_RCC_OscConfig+0x240>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d05b      	beq.n	8007b7c <HAL_RCC_OscConfig+0x108>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d157      	bne.n	8007b7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	e242      	b.n	8007f56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ad8:	d106      	bne.n	8007ae8 <HAL_RCC_OscConfig+0x74>
 8007ada:	4b76      	ldr	r3, [pc, #472]	@ (8007cb4 <HAL_RCC_OscConfig+0x240>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a75      	ldr	r2, [pc, #468]	@ (8007cb4 <HAL_RCC_OscConfig+0x240>)
 8007ae0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ae4:	6013      	str	r3, [r2, #0]
 8007ae6:	e01d      	b.n	8007b24 <HAL_RCC_OscConfig+0xb0>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007af0:	d10c      	bne.n	8007b0c <HAL_RCC_OscConfig+0x98>
 8007af2:	4b70      	ldr	r3, [pc, #448]	@ (8007cb4 <HAL_RCC_OscConfig+0x240>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a6f      	ldr	r2, [pc, #444]	@ (8007cb4 <HAL_RCC_OscConfig+0x240>)
 8007af8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007afc:	6013      	str	r3, [r2, #0]
 8007afe:	4b6d      	ldr	r3, [pc, #436]	@ (8007cb4 <HAL_RCC_OscConfig+0x240>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a6c      	ldr	r2, [pc, #432]	@ (8007cb4 <HAL_RCC_OscConfig+0x240>)
 8007b04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b08:	6013      	str	r3, [r2, #0]
 8007b0a:	e00b      	b.n	8007b24 <HAL_RCC_OscConfig+0xb0>
 8007b0c:	4b69      	ldr	r3, [pc, #420]	@ (8007cb4 <HAL_RCC_OscConfig+0x240>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a68      	ldr	r2, [pc, #416]	@ (8007cb4 <HAL_RCC_OscConfig+0x240>)
 8007b12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b16:	6013      	str	r3, [r2, #0]
 8007b18:	4b66      	ldr	r3, [pc, #408]	@ (8007cb4 <HAL_RCC_OscConfig+0x240>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a65      	ldr	r2, [pc, #404]	@ (8007cb4 <HAL_RCC_OscConfig+0x240>)
 8007b1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007b22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d013      	beq.n	8007b54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b2c:	f7fe f8e2 	bl	8005cf4 <HAL_GetTick>
 8007b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b32:	e008      	b.n	8007b46 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b34:	f7fe f8de 	bl	8005cf4 <HAL_GetTick>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	1ad3      	subs	r3, r2, r3
 8007b3e:	2b64      	cmp	r3, #100	@ 0x64
 8007b40:	d901      	bls.n	8007b46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007b42:	2303      	movs	r3, #3
 8007b44:	e207      	b.n	8007f56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b46:	4b5b      	ldr	r3, [pc, #364]	@ (8007cb4 <HAL_RCC_OscConfig+0x240>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d0f0      	beq.n	8007b34 <HAL_RCC_OscConfig+0xc0>
 8007b52:	e014      	b.n	8007b7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b54:	f7fe f8ce 	bl	8005cf4 <HAL_GetTick>
 8007b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b5a:	e008      	b.n	8007b6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b5c:	f7fe f8ca 	bl	8005cf4 <HAL_GetTick>
 8007b60:	4602      	mov	r2, r0
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	1ad3      	subs	r3, r2, r3
 8007b66:	2b64      	cmp	r3, #100	@ 0x64
 8007b68:	d901      	bls.n	8007b6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	e1f3      	b.n	8007f56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b6e:	4b51      	ldr	r3, [pc, #324]	@ (8007cb4 <HAL_RCC_OscConfig+0x240>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1f0      	bne.n	8007b5c <HAL_RCC_OscConfig+0xe8>
 8007b7a:	e000      	b.n	8007b7e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f003 0302 	and.w	r3, r3, #2
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d063      	beq.n	8007c52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007b8a:	4b4a      	ldr	r3, [pc, #296]	@ (8007cb4 <HAL_RCC_OscConfig+0x240>)
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	f003 030c 	and.w	r3, r3, #12
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d00b      	beq.n	8007bae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b96:	4b47      	ldr	r3, [pc, #284]	@ (8007cb4 <HAL_RCC_OscConfig+0x240>)
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007b9e:	2b08      	cmp	r3, #8
 8007ba0:	d11c      	bne.n	8007bdc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ba2:	4b44      	ldr	r3, [pc, #272]	@ (8007cb4 <HAL_RCC_OscConfig+0x240>)
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d116      	bne.n	8007bdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007bae:	4b41      	ldr	r3, [pc, #260]	@ (8007cb4 <HAL_RCC_OscConfig+0x240>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f003 0302 	and.w	r3, r3, #2
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d005      	beq.n	8007bc6 <HAL_RCC_OscConfig+0x152>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d001      	beq.n	8007bc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e1c7      	b.n	8007f56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bc6:	4b3b      	ldr	r3, [pc, #236]	@ (8007cb4 <HAL_RCC_OscConfig+0x240>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	00db      	lsls	r3, r3, #3
 8007bd4:	4937      	ldr	r1, [pc, #220]	@ (8007cb4 <HAL_RCC_OscConfig+0x240>)
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007bda:	e03a      	b.n	8007c52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d020      	beq.n	8007c26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007be4:	4b34      	ldr	r3, [pc, #208]	@ (8007cb8 <HAL_RCC_OscConfig+0x244>)
 8007be6:	2201      	movs	r2, #1
 8007be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bea:	f7fe f883 	bl	8005cf4 <HAL_GetTick>
 8007bee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bf0:	e008      	b.n	8007c04 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007bf2:	f7fe f87f 	bl	8005cf4 <HAL_GetTick>
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	1ad3      	subs	r3, r2, r3
 8007bfc:	2b02      	cmp	r3, #2
 8007bfe:	d901      	bls.n	8007c04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007c00:	2303      	movs	r3, #3
 8007c02:	e1a8      	b.n	8007f56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c04:	4b2b      	ldr	r3, [pc, #172]	@ (8007cb4 <HAL_RCC_OscConfig+0x240>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f003 0302 	and.w	r3, r3, #2
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d0f0      	beq.n	8007bf2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c10:	4b28      	ldr	r3, [pc, #160]	@ (8007cb4 <HAL_RCC_OscConfig+0x240>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	691b      	ldr	r3, [r3, #16]
 8007c1c:	00db      	lsls	r3, r3, #3
 8007c1e:	4925      	ldr	r1, [pc, #148]	@ (8007cb4 <HAL_RCC_OscConfig+0x240>)
 8007c20:	4313      	orrs	r3, r2
 8007c22:	600b      	str	r3, [r1, #0]
 8007c24:	e015      	b.n	8007c52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c26:	4b24      	ldr	r3, [pc, #144]	@ (8007cb8 <HAL_RCC_OscConfig+0x244>)
 8007c28:	2200      	movs	r2, #0
 8007c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c2c:	f7fe f862 	bl	8005cf4 <HAL_GetTick>
 8007c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c32:	e008      	b.n	8007c46 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c34:	f7fe f85e 	bl	8005cf4 <HAL_GetTick>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	1ad3      	subs	r3, r2, r3
 8007c3e:	2b02      	cmp	r3, #2
 8007c40:	d901      	bls.n	8007c46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007c42:	2303      	movs	r3, #3
 8007c44:	e187      	b.n	8007f56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c46:	4b1b      	ldr	r3, [pc, #108]	@ (8007cb4 <HAL_RCC_OscConfig+0x240>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f003 0302 	and.w	r3, r3, #2
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d1f0      	bne.n	8007c34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f003 0308 	and.w	r3, r3, #8
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d036      	beq.n	8007ccc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	695b      	ldr	r3, [r3, #20]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d016      	beq.n	8007c94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c66:	4b15      	ldr	r3, [pc, #84]	@ (8007cbc <HAL_RCC_OscConfig+0x248>)
 8007c68:	2201      	movs	r2, #1
 8007c6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c6c:	f7fe f842 	bl	8005cf4 <HAL_GetTick>
 8007c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c72:	e008      	b.n	8007c86 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c74:	f7fe f83e 	bl	8005cf4 <HAL_GetTick>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	1ad3      	subs	r3, r2, r3
 8007c7e:	2b02      	cmp	r3, #2
 8007c80:	d901      	bls.n	8007c86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007c82:	2303      	movs	r3, #3
 8007c84:	e167      	b.n	8007f56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c86:	4b0b      	ldr	r3, [pc, #44]	@ (8007cb4 <HAL_RCC_OscConfig+0x240>)
 8007c88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c8a:	f003 0302 	and.w	r3, r3, #2
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d0f0      	beq.n	8007c74 <HAL_RCC_OscConfig+0x200>
 8007c92:	e01b      	b.n	8007ccc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c94:	4b09      	ldr	r3, [pc, #36]	@ (8007cbc <HAL_RCC_OscConfig+0x248>)
 8007c96:	2200      	movs	r2, #0
 8007c98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c9a:	f7fe f82b 	bl	8005cf4 <HAL_GetTick>
 8007c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ca0:	e00e      	b.n	8007cc0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ca2:	f7fe f827 	bl	8005cf4 <HAL_GetTick>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	1ad3      	subs	r3, r2, r3
 8007cac:	2b02      	cmp	r3, #2
 8007cae:	d907      	bls.n	8007cc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007cb0:	2303      	movs	r3, #3
 8007cb2:	e150      	b.n	8007f56 <HAL_RCC_OscConfig+0x4e2>
 8007cb4:	40023800 	.word	0x40023800
 8007cb8:	42470000 	.word	0x42470000
 8007cbc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007cc0:	4b88      	ldr	r3, [pc, #544]	@ (8007ee4 <HAL_RCC_OscConfig+0x470>)
 8007cc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cc4:	f003 0302 	and.w	r3, r3, #2
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d1ea      	bne.n	8007ca2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f003 0304 	and.w	r3, r3, #4
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	f000 8097 	beq.w	8007e08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007cde:	4b81      	ldr	r3, [pc, #516]	@ (8007ee4 <HAL_RCC_OscConfig+0x470>)
 8007ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ce2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d10f      	bne.n	8007d0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007cea:	2300      	movs	r3, #0
 8007cec:	60bb      	str	r3, [r7, #8]
 8007cee:	4b7d      	ldr	r3, [pc, #500]	@ (8007ee4 <HAL_RCC_OscConfig+0x470>)
 8007cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cf2:	4a7c      	ldr	r2, [pc, #496]	@ (8007ee4 <HAL_RCC_OscConfig+0x470>)
 8007cf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007cf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8007cfa:	4b7a      	ldr	r3, [pc, #488]	@ (8007ee4 <HAL_RCC_OscConfig+0x470>)
 8007cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d02:	60bb      	str	r3, [r7, #8]
 8007d04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d06:	2301      	movs	r3, #1
 8007d08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d0a:	4b77      	ldr	r3, [pc, #476]	@ (8007ee8 <HAL_RCC_OscConfig+0x474>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d118      	bne.n	8007d48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007d16:	4b74      	ldr	r3, [pc, #464]	@ (8007ee8 <HAL_RCC_OscConfig+0x474>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a73      	ldr	r2, [pc, #460]	@ (8007ee8 <HAL_RCC_OscConfig+0x474>)
 8007d1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d22:	f7fd ffe7 	bl	8005cf4 <HAL_GetTick>
 8007d26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d28:	e008      	b.n	8007d3c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d2a:	f7fd ffe3 	bl	8005cf4 <HAL_GetTick>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	1ad3      	subs	r3, r2, r3
 8007d34:	2b02      	cmp	r3, #2
 8007d36:	d901      	bls.n	8007d3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007d38:	2303      	movs	r3, #3
 8007d3a:	e10c      	b.n	8007f56 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d3c:	4b6a      	ldr	r3, [pc, #424]	@ (8007ee8 <HAL_RCC_OscConfig+0x474>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d0f0      	beq.n	8007d2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d106      	bne.n	8007d5e <HAL_RCC_OscConfig+0x2ea>
 8007d50:	4b64      	ldr	r3, [pc, #400]	@ (8007ee4 <HAL_RCC_OscConfig+0x470>)
 8007d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d54:	4a63      	ldr	r2, [pc, #396]	@ (8007ee4 <HAL_RCC_OscConfig+0x470>)
 8007d56:	f043 0301 	orr.w	r3, r3, #1
 8007d5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d5c:	e01c      	b.n	8007d98 <HAL_RCC_OscConfig+0x324>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	2b05      	cmp	r3, #5
 8007d64:	d10c      	bne.n	8007d80 <HAL_RCC_OscConfig+0x30c>
 8007d66:	4b5f      	ldr	r3, [pc, #380]	@ (8007ee4 <HAL_RCC_OscConfig+0x470>)
 8007d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d6a:	4a5e      	ldr	r2, [pc, #376]	@ (8007ee4 <HAL_RCC_OscConfig+0x470>)
 8007d6c:	f043 0304 	orr.w	r3, r3, #4
 8007d70:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d72:	4b5c      	ldr	r3, [pc, #368]	@ (8007ee4 <HAL_RCC_OscConfig+0x470>)
 8007d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d76:	4a5b      	ldr	r2, [pc, #364]	@ (8007ee4 <HAL_RCC_OscConfig+0x470>)
 8007d78:	f043 0301 	orr.w	r3, r3, #1
 8007d7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d7e:	e00b      	b.n	8007d98 <HAL_RCC_OscConfig+0x324>
 8007d80:	4b58      	ldr	r3, [pc, #352]	@ (8007ee4 <HAL_RCC_OscConfig+0x470>)
 8007d82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d84:	4a57      	ldr	r2, [pc, #348]	@ (8007ee4 <HAL_RCC_OscConfig+0x470>)
 8007d86:	f023 0301 	bic.w	r3, r3, #1
 8007d8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d8c:	4b55      	ldr	r3, [pc, #340]	@ (8007ee4 <HAL_RCC_OscConfig+0x470>)
 8007d8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d90:	4a54      	ldr	r2, [pc, #336]	@ (8007ee4 <HAL_RCC_OscConfig+0x470>)
 8007d92:	f023 0304 	bic.w	r3, r3, #4
 8007d96:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d015      	beq.n	8007dcc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007da0:	f7fd ffa8 	bl	8005cf4 <HAL_GetTick>
 8007da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007da6:	e00a      	b.n	8007dbe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007da8:	f7fd ffa4 	bl	8005cf4 <HAL_GetTick>
 8007dac:	4602      	mov	r2, r0
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d901      	bls.n	8007dbe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	e0cb      	b.n	8007f56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007dbe:	4b49      	ldr	r3, [pc, #292]	@ (8007ee4 <HAL_RCC_OscConfig+0x470>)
 8007dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dc2:	f003 0302 	and.w	r3, r3, #2
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d0ee      	beq.n	8007da8 <HAL_RCC_OscConfig+0x334>
 8007dca:	e014      	b.n	8007df6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007dcc:	f7fd ff92 	bl	8005cf4 <HAL_GetTick>
 8007dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007dd2:	e00a      	b.n	8007dea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dd4:	f7fd ff8e 	bl	8005cf4 <HAL_GetTick>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	1ad3      	subs	r3, r2, r3
 8007dde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d901      	bls.n	8007dea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007de6:	2303      	movs	r3, #3
 8007de8:	e0b5      	b.n	8007f56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007dea:	4b3e      	ldr	r3, [pc, #248]	@ (8007ee4 <HAL_RCC_OscConfig+0x470>)
 8007dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dee:	f003 0302 	and.w	r3, r3, #2
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1ee      	bne.n	8007dd4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007df6:	7dfb      	ldrb	r3, [r7, #23]
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d105      	bne.n	8007e08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007dfc:	4b39      	ldr	r3, [pc, #228]	@ (8007ee4 <HAL_RCC_OscConfig+0x470>)
 8007dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e00:	4a38      	ldr	r2, [pc, #224]	@ (8007ee4 <HAL_RCC_OscConfig+0x470>)
 8007e02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e06:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	699b      	ldr	r3, [r3, #24]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	f000 80a1 	beq.w	8007f54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007e12:	4b34      	ldr	r3, [pc, #208]	@ (8007ee4 <HAL_RCC_OscConfig+0x470>)
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	f003 030c 	and.w	r3, r3, #12
 8007e1a:	2b08      	cmp	r3, #8
 8007e1c:	d05c      	beq.n	8007ed8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	699b      	ldr	r3, [r3, #24]
 8007e22:	2b02      	cmp	r3, #2
 8007e24:	d141      	bne.n	8007eaa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e26:	4b31      	ldr	r3, [pc, #196]	@ (8007eec <HAL_RCC_OscConfig+0x478>)
 8007e28:	2200      	movs	r2, #0
 8007e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e2c:	f7fd ff62 	bl	8005cf4 <HAL_GetTick>
 8007e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e32:	e008      	b.n	8007e46 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e34:	f7fd ff5e 	bl	8005cf4 <HAL_GetTick>
 8007e38:	4602      	mov	r2, r0
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	1ad3      	subs	r3, r2, r3
 8007e3e:	2b02      	cmp	r3, #2
 8007e40:	d901      	bls.n	8007e46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007e42:	2303      	movs	r3, #3
 8007e44:	e087      	b.n	8007f56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e46:	4b27      	ldr	r3, [pc, #156]	@ (8007ee4 <HAL_RCC_OscConfig+0x470>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d1f0      	bne.n	8007e34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	69da      	ldr	r2, [r3, #28]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a1b      	ldr	r3, [r3, #32]
 8007e5a:	431a      	orrs	r2, r3
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e60:	019b      	lsls	r3, r3, #6
 8007e62:	431a      	orrs	r2, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e68:	085b      	lsrs	r3, r3, #1
 8007e6a:	3b01      	subs	r3, #1
 8007e6c:	041b      	lsls	r3, r3, #16
 8007e6e:	431a      	orrs	r2, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e74:	061b      	lsls	r3, r3, #24
 8007e76:	491b      	ldr	r1, [pc, #108]	@ (8007ee4 <HAL_RCC_OscConfig+0x470>)
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e7c:	4b1b      	ldr	r3, [pc, #108]	@ (8007eec <HAL_RCC_OscConfig+0x478>)
 8007e7e:	2201      	movs	r2, #1
 8007e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e82:	f7fd ff37 	bl	8005cf4 <HAL_GetTick>
 8007e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e88:	e008      	b.n	8007e9c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e8a:	f7fd ff33 	bl	8005cf4 <HAL_GetTick>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	1ad3      	subs	r3, r2, r3
 8007e94:	2b02      	cmp	r3, #2
 8007e96:	d901      	bls.n	8007e9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007e98:	2303      	movs	r3, #3
 8007e9a:	e05c      	b.n	8007f56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e9c:	4b11      	ldr	r3, [pc, #68]	@ (8007ee4 <HAL_RCC_OscConfig+0x470>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d0f0      	beq.n	8007e8a <HAL_RCC_OscConfig+0x416>
 8007ea8:	e054      	b.n	8007f54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007eaa:	4b10      	ldr	r3, [pc, #64]	@ (8007eec <HAL_RCC_OscConfig+0x478>)
 8007eac:	2200      	movs	r2, #0
 8007eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007eb0:	f7fd ff20 	bl	8005cf4 <HAL_GetTick>
 8007eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007eb6:	e008      	b.n	8007eca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007eb8:	f7fd ff1c 	bl	8005cf4 <HAL_GetTick>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	2b02      	cmp	r3, #2
 8007ec4:	d901      	bls.n	8007eca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	e045      	b.n	8007f56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007eca:	4b06      	ldr	r3, [pc, #24]	@ (8007ee4 <HAL_RCC_OscConfig+0x470>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d1f0      	bne.n	8007eb8 <HAL_RCC_OscConfig+0x444>
 8007ed6:	e03d      	b.n	8007f54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	699b      	ldr	r3, [r3, #24]
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d107      	bne.n	8007ef0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e038      	b.n	8007f56 <HAL_RCC_OscConfig+0x4e2>
 8007ee4:	40023800 	.word	0x40023800
 8007ee8:	40007000 	.word	0x40007000
 8007eec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007ef0:	4b1b      	ldr	r3, [pc, #108]	@ (8007f60 <HAL_RCC_OscConfig+0x4ec>)
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	699b      	ldr	r3, [r3, #24]
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d028      	beq.n	8007f50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d121      	bne.n	8007f50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d11a      	bne.n	8007f50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007f1a:	68fa      	ldr	r2, [r7, #12]
 8007f1c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007f20:	4013      	ands	r3, r2
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007f26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d111      	bne.n	8007f50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f36:	085b      	lsrs	r3, r3, #1
 8007f38:	3b01      	subs	r3, #1
 8007f3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d107      	bne.n	8007f50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d001      	beq.n	8007f54 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	e000      	b.n	8007f56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007f54:	2300      	movs	r3, #0
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3718      	adds	r7, #24
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	40023800 	.word	0x40023800

08007f64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d101      	bne.n	8007f78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	e0cc      	b.n	8008112 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007f78:	4b68      	ldr	r3, [pc, #416]	@ (800811c <HAL_RCC_ClockConfig+0x1b8>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f003 0307 	and.w	r3, r3, #7
 8007f80:	683a      	ldr	r2, [r7, #0]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d90c      	bls.n	8007fa0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f86:	4b65      	ldr	r3, [pc, #404]	@ (800811c <HAL_RCC_ClockConfig+0x1b8>)
 8007f88:	683a      	ldr	r2, [r7, #0]
 8007f8a:	b2d2      	uxtb	r2, r2
 8007f8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f8e:	4b63      	ldr	r3, [pc, #396]	@ (800811c <HAL_RCC_ClockConfig+0x1b8>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f003 0307 	and.w	r3, r3, #7
 8007f96:	683a      	ldr	r2, [r7, #0]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d001      	beq.n	8007fa0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e0b8      	b.n	8008112 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f003 0302 	and.w	r3, r3, #2
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d020      	beq.n	8007fee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f003 0304 	and.w	r3, r3, #4
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d005      	beq.n	8007fc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007fb8:	4b59      	ldr	r3, [pc, #356]	@ (8008120 <HAL_RCC_ClockConfig+0x1bc>)
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	4a58      	ldr	r2, [pc, #352]	@ (8008120 <HAL_RCC_ClockConfig+0x1bc>)
 8007fbe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007fc2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f003 0308 	and.w	r3, r3, #8
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d005      	beq.n	8007fdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007fd0:	4b53      	ldr	r3, [pc, #332]	@ (8008120 <HAL_RCC_ClockConfig+0x1bc>)
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	4a52      	ldr	r2, [pc, #328]	@ (8008120 <HAL_RCC_ClockConfig+0x1bc>)
 8007fd6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007fda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007fdc:	4b50      	ldr	r3, [pc, #320]	@ (8008120 <HAL_RCC_ClockConfig+0x1bc>)
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	494d      	ldr	r1, [pc, #308]	@ (8008120 <HAL_RCC_ClockConfig+0x1bc>)
 8007fea:	4313      	orrs	r3, r2
 8007fec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f003 0301 	and.w	r3, r3, #1
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d044      	beq.n	8008084 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d107      	bne.n	8008012 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008002:	4b47      	ldr	r3, [pc, #284]	@ (8008120 <HAL_RCC_ClockConfig+0x1bc>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800800a:	2b00      	cmp	r3, #0
 800800c:	d119      	bne.n	8008042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	e07f      	b.n	8008112 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	2b02      	cmp	r3, #2
 8008018:	d003      	beq.n	8008022 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800801e:	2b03      	cmp	r3, #3
 8008020:	d107      	bne.n	8008032 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008022:	4b3f      	ldr	r3, [pc, #252]	@ (8008120 <HAL_RCC_ClockConfig+0x1bc>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800802a:	2b00      	cmp	r3, #0
 800802c:	d109      	bne.n	8008042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800802e:	2301      	movs	r3, #1
 8008030:	e06f      	b.n	8008112 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008032:	4b3b      	ldr	r3, [pc, #236]	@ (8008120 <HAL_RCC_ClockConfig+0x1bc>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f003 0302 	and.w	r3, r3, #2
 800803a:	2b00      	cmp	r3, #0
 800803c:	d101      	bne.n	8008042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	e067      	b.n	8008112 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008042:	4b37      	ldr	r3, [pc, #220]	@ (8008120 <HAL_RCC_ClockConfig+0x1bc>)
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	f023 0203 	bic.w	r2, r3, #3
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	4934      	ldr	r1, [pc, #208]	@ (8008120 <HAL_RCC_ClockConfig+0x1bc>)
 8008050:	4313      	orrs	r3, r2
 8008052:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008054:	f7fd fe4e 	bl	8005cf4 <HAL_GetTick>
 8008058:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800805a:	e00a      	b.n	8008072 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800805c:	f7fd fe4a 	bl	8005cf4 <HAL_GetTick>
 8008060:	4602      	mov	r2, r0
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	1ad3      	subs	r3, r2, r3
 8008066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800806a:	4293      	cmp	r3, r2
 800806c:	d901      	bls.n	8008072 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800806e:	2303      	movs	r3, #3
 8008070:	e04f      	b.n	8008112 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008072:	4b2b      	ldr	r3, [pc, #172]	@ (8008120 <HAL_RCC_ClockConfig+0x1bc>)
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	f003 020c 	and.w	r2, r3, #12
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	429a      	cmp	r2, r3
 8008082:	d1eb      	bne.n	800805c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008084:	4b25      	ldr	r3, [pc, #148]	@ (800811c <HAL_RCC_ClockConfig+0x1b8>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f003 0307 	and.w	r3, r3, #7
 800808c:	683a      	ldr	r2, [r7, #0]
 800808e:	429a      	cmp	r2, r3
 8008090:	d20c      	bcs.n	80080ac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008092:	4b22      	ldr	r3, [pc, #136]	@ (800811c <HAL_RCC_ClockConfig+0x1b8>)
 8008094:	683a      	ldr	r2, [r7, #0]
 8008096:	b2d2      	uxtb	r2, r2
 8008098:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800809a:	4b20      	ldr	r3, [pc, #128]	@ (800811c <HAL_RCC_ClockConfig+0x1b8>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f003 0307 	and.w	r3, r3, #7
 80080a2:	683a      	ldr	r2, [r7, #0]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d001      	beq.n	80080ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	e032      	b.n	8008112 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f003 0304 	and.w	r3, r3, #4
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d008      	beq.n	80080ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80080b8:	4b19      	ldr	r3, [pc, #100]	@ (8008120 <HAL_RCC_ClockConfig+0x1bc>)
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	4916      	ldr	r1, [pc, #88]	@ (8008120 <HAL_RCC_ClockConfig+0x1bc>)
 80080c6:	4313      	orrs	r3, r2
 80080c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f003 0308 	and.w	r3, r3, #8
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d009      	beq.n	80080ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80080d6:	4b12      	ldr	r3, [pc, #72]	@ (8008120 <HAL_RCC_ClockConfig+0x1bc>)
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	00db      	lsls	r3, r3, #3
 80080e4:	490e      	ldr	r1, [pc, #56]	@ (8008120 <HAL_RCC_ClockConfig+0x1bc>)
 80080e6:	4313      	orrs	r3, r2
 80080e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80080ea:	f000 f821 	bl	8008130 <HAL_RCC_GetSysClockFreq>
 80080ee:	4602      	mov	r2, r0
 80080f0:	4b0b      	ldr	r3, [pc, #44]	@ (8008120 <HAL_RCC_ClockConfig+0x1bc>)
 80080f2:	689b      	ldr	r3, [r3, #8]
 80080f4:	091b      	lsrs	r3, r3, #4
 80080f6:	f003 030f 	and.w	r3, r3, #15
 80080fa:	490a      	ldr	r1, [pc, #40]	@ (8008124 <HAL_RCC_ClockConfig+0x1c0>)
 80080fc:	5ccb      	ldrb	r3, [r1, r3]
 80080fe:	fa22 f303 	lsr.w	r3, r2, r3
 8008102:	4a09      	ldr	r2, [pc, #36]	@ (8008128 <HAL_RCC_ClockConfig+0x1c4>)
 8008104:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008106:	4b09      	ldr	r3, [pc, #36]	@ (800812c <HAL_RCC_ClockConfig+0x1c8>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4618      	mov	r0, r3
 800810c:	f7f9 fb9c 	bl	8001848 <HAL_InitTick>

  return HAL_OK;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	40023c00 	.word	0x40023c00
 8008120:	40023800 	.word	0x40023800
 8008124:	0800f804 	.word	0x0800f804
 8008128:	20000080 	.word	0x20000080
 800812c:	200000a4 	.word	0x200000a4

08008130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008134:	b090      	sub	sp, #64	@ 0x40
 8008136:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008138:	2300      	movs	r3, #0
 800813a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800813c:	2300      	movs	r3, #0
 800813e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8008140:	2300      	movs	r3, #0
 8008142:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8008144:	2300      	movs	r3, #0
 8008146:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008148:	4b59      	ldr	r3, [pc, #356]	@ (80082b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	f003 030c 	and.w	r3, r3, #12
 8008150:	2b08      	cmp	r3, #8
 8008152:	d00d      	beq.n	8008170 <HAL_RCC_GetSysClockFreq+0x40>
 8008154:	2b08      	cmp	r3, #8
 8008156:	f200 80a1 	bhi.w	800829c <HAL_RCC_GetSysClockFreq+0x16c>
 800815a:	2b00      	cmp	r3, #0
 800815c:	d002      	beq.n	8008164 <HAL_RCC_GetSysClockFreq+0x34>
 800815e:	2b04      	cmp	r3, #4
 8008160:	d003      	beq.n	800816a <HAL_RCC_GetSysClockFreq+0x3a>
 8008162:	e09b      	b.n	800829c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008164:	4b53      	ldr	r3, [pc, #332]	@ (80082b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8008166:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008168:	e09b      	b.n	80082a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800816a:	4b53      	ldr	r3, [pc, #332]	@ (80082b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800816c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800816e:	e098      	b.n	80082a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008170:	4b4f      	ldr	r3, [pc, #316]	@ (80082b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008178:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800817a:	4b4d      	ldr	r3, [pc, #308]	@ (80082b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008182:	2b00      	cmp	r3, #0
 8008184:	d028      	beq.n	80081d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008186:	4b4a      	ldr	r3, [pc, #296]	@ (80082b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	099b      	lsrs	r3, r3, #6
 800818c:	2200      	movs	r2, #0
 800818e:	623b      	str	r3, [r7, #32]
 8008190:	627a      	str	r2, [r7, #36]	@ 0x24
 8008192:	6a3b      	ldr	r3, [r7, #32]
 8008194:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008198:	2100      	movs	r1, #0
 800819a:	4b47      	ldr	r3, [pc, #284]	@ (80082b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800819c:	fb03 f201 	mul.w	r2, r3, r1
 80081a0:	2300      	movs	r3, #0
 80081a2:	fb00 f303 	mul.w	r3, r0, r3
 80081a6:	4413      	add	r3, r2
 80081a8:	4a43      	ldr	r2, [pc, #268]	@ (80082b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80081aa:	fba0 1202 	umull	r1, r2, r0, r2
 80081ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80081b0:	460a      	mov	r2, r1
 80081b2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80081b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081b6:	4413      	add	r3, r2
 80081b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081bc:	2200      	movs	r2, #0
 80081be:	61bb      	str	r3, [r7, #24]
 80081c0:	61fa      	str	r2, [r7, #28]
 80081c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80081c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80081ca:	f7f8 f859 	bl	8000280 <__aeabi_uldivmod>
 80081ce:	4602      	mov	r2, r0
 80081d0:	460b      	mov	r3, r1
 80081d2:	4613      	mov	r3, r2
 80081d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081d6:	e053      	b.n	8008280 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80081d8:	4b35      	ldr	r3, [pc, #212]	@ (80082b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	099b      	lsrs	r3, r3, #6
 80081de:	2200      	movs	r2, #0
 80081e0:	613b      	str	r3, [r7, #16]
 80081e2:	617a      	str	r2, [r7, #20]
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80081ea:	f04f 0b00 	mov.w	fp, #0
 80081ee:	4652      	mov	r2, sl
 80081f0:	465b      	mov	r3, fp
 80081f2:	f04f 0000 	mov.w	r0, #0
 80081f6:	f04f 0100 	mov.w	r1, #0
 80081fa:	0159      	lsls	r1, r3, #5
 80081fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008200:	0150      	lsls	r0, r2, #5
 8008202:	4602      	mov	r2, r0
 8008204:	460b      	mov	r3, r1
 8008206:	ebb2 080a 	subs.w	r8, r2, sl
 800820a:	eb63 090b 	sbc.w	r9, r3, fp
 800820e:	f04f 0200 	mov.w	r2, #0
 8008212:	f04f 0300 	mov.w	r3, #0
 8008216:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800821a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800821e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008222:	ebb2 0408 	subs.w	r4, r2, r8
 8008226:	eb63 0509 	sbc.w	r5, r3, r9
 800822a:	f04f 0200 	mov.w	r2, #0
 800822e:	f04f 0300 	mov.w	r3, #0
 8008232:	00eb      	lsls	r3, r5, #3
 8008234:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008238:	00e2      	lsls	r2, r4, #3
 800823a:	4614      	mov	r4, r2
 800823c:	461d      	mov	r5, r3
 800823e:	eb14 030a 	adds.w	r3, r4, sl
 8008242:	603b      	str	r3, [r7, #0]
 8008244:	eb45 030b 	adc.w	r3, r5, fp
 8008248:	607b      	str	r3, [r7, #4]
 800824a:	f04f 0200 	mov.w	r2, #0
 800824e:	f04f 0300 	mov.w	r3, #0
 8008252:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008256:	4629      	mov	r1, r5
 8008258:	028b      	lsls	r3, r1, #10
 800825a:	4621      	mov	r1, r4
 800825c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008260:	4621      	mov	r1, r4
 8008262:	028a      	lsls	r2, r1, #10
 8008264:	4610      	mov	r0, r2
 8008266:	4619      	mov	r1, r3
 8008268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800826a:	2200      	movs	r2, #0
 800826c:	60bb      	str	r3, [r7, #8]
 800826e:	60fa      	str	r2, [r7, #12]
 8008270:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008274:	f7f8 f804 	bl	8000280 <__aeabi_uldivmod>
 8008278:	4602      	mov	r2, r0
 800827a:	460b      	mov	r3, r1
 800827c:	4613      	mov	r3, r2
 800827e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008280:	4b0b      	ldr	r3, [pc, #44]	@ (80082b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	0c1b      	lsrs	r3, r3, #16
 8008286:	f003 0303 	and.w	r3, r3, #3
 800828a:	3301      	adds	r3, #1
 800828c:	005b      	lsls	r3, r3, #1
 800828e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008290:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008294:	fbb2 f3f3 	udiv	r3, r2, r3
 8008298:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800829a:	e002      	b.n	80082a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800829c:	4b05      	ldr	r3, [pc, #20]	@ (80082b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800829e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80082a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80082a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3740      	adds	r7, #64	@ 0x40
 80082a8:	46bd      	mov	sp, r7
 80082aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082ae:	bf00      	nop
 80082b0:	40023800 	.word	0x40023800
 80082b4:	00f42400 	.word	0x00f42400
 80082b8:	017d7840 	.word	0x017d7840

080082bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082bc:	b480      	push	{r7}
 80082be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80082c0:	4b03      	ldr	r3, [pc, #12]	@ (80082d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80082c2:	681b      	ldr	r3, [r3, #0]
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop
 80082d0:	20000080 	.word	0x20000080

080082d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80082d8:	f7ff fff0 	bl	80082bc <HAL_RCC_GetHCLKFreq>
 80082dc:	4602      	mov	r2, r0
 80082de:	4b05      	ldr	r3, [pc, #20]	@ (80082f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	0a9b      	lsrs	r3, r3, #10
 80082e4:	f003 0307 	and.w	r3, r3, #7
 80082e8:	4903      	ldr	r1, [pc, #12]	@ (80082f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80082ea:	5ccb      	ldrb	r3, [r1, r3]
 80082ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	40023800 	.word	0x40023800
 80082f8:	0800f814 	.word	0x0800f814

080082fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008300:	f7ff ffdc 	bl	80082bc <HAL_RCC_GetHCLKFreq>
 8008304:	4602      	mov	r2, r0
 8008306:	4b05      	ldr	r3, [pc, #20]	@ (800831c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	0b5b      	lsrs	r3, r3, #13
 800830c:	f003 0307 	and.w	r3, r3, #7
 8008310:	4903      	ldr	r1, [pc, #12]	@ (8008320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008312:	5ccb      	ldrb	r3, [r1, r3]
 8008314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008318:	4618      	mov	r0, r3
 800831a:	bd80      	pop	{r7, pc}
 800831c:	40023800 	.word	0x40023800
 8008320:	0800f814 	.word	0x0800f814

08008324 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	220f      	movs	r2, #15
 8008332:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008334:	4b12      	ldr	r3, [pc, #72]	@ (8008380 <HAL_RCC_GetClockConfig+0x5c>)
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	f003 0203 	and.w	r2, r3, #3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008340:	4b0f      	ldr	r3, [pc, #60]	@ (8008380 <HAL_RCC_GetClockConfig+0x5c>)
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800834c:	4b0c      	ldr	r3, [pc, #48]	@ (8008380 <HAL_RCC_GetClockConfig+0x5c>)
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008358:	4b09      	ldr	r3, [pc, #36]	@ (8008380 <HAL_RCC_GetClockConfig+0x5c>)
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	08db      	lsrs	r3, r3, #3
 800835e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008366:	4b07      	ldr	r3, [pc, #28]	@ (8008384 <HAL_RCC_GetClockConfig+0x60>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f003 0207 	and.w	r2, r3, #7
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	601a      	str	r2, [r3, #0]
}
 8008372:	bf00      	nop
 8008374:	370c      	adds	r7, #12
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr
 800837e:	bf00      	nop
 8008380:	40023800 	.word	0x40023800
 8008384:	40023c00 	.word	0x40023c00

08008388 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d101      	bne.n	800839a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008396:	2301      	movs	r3, #1
 8008398:	e07b      	b.n	8008492 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d108      	bne.n	80083b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80083aa:	d009      	beq.n	80083c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	61da      	str	r2, [r3, #28]
 80083b2:	e005      	b.n	80083c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d106      	bne.n	80083e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2200      	movs	r2, #0
 80083d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f7f9 f8ec 	bl	80015b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2202      	movs	r2, #2
 80083e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80083f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008408:	431a      	orrs	r2, r3
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008412:	431a      	orrs	r2, r3
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	691b      	ldr	r3, [r3, #16]
 8008418:	f003 0302 	and.w	r3, r3, #2
 800841c:	431a      	orrs	r2, r3
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	695b      	ldr	r3, [r3, #20]
 8008422:	f003 0301 	and.w	r3, r3, #1
 8008426:	431a      	orrs	r2, r3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	699b      	ldr	r3, [r3, #24]
 800842c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008430:	431a      	orrs	r2, r3
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	69db      	ldr	r3, [r3, #28]
 8008436:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800843a:	431a      	orrs	r2, r3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6a1b      	ldr	r3, [r3, #32]
 8008440:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008444:	ea42 0103 	orr.w	r1, r2, r3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800844c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	430a      	orrs	r2, r1
 8008456:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	699b      	ldr	r3, [r3, #24]
 800845c:	0c1b      	lsrs	r3, r3, #16
 800845e:	f003 0104 	and.w	r1, r3, #4
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008466:	f003 0210 	and.w	r2, r3, #16
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	430a      	orrs	r2, r1
 8008470:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	69da      	ldr	r2, [r3, #28]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008480:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2201      	movs	r2, #1
 800848c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	3708      	adds	r7, #8
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}

0800849a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800849a:	b580      	push	{r7, lr}
 800849c:	b08a      	sub	sp, #40	@ 0x28
 800849e:	af00      	add	r7, sp, #0
 80084a0:	60f8      	str	r0, [r7, #12]
 80084a2:	60b9      	str	r1, [r7, #8]
 80084a4:	607a      	str	r2, [r7, #4]
 80084a6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80084a8:	2301      	movs	r3, #1
 80084aa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80084ac:	f7fd fc22 	bl	8005cf4 <HAL_GetTick>
 80084b0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80084b8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80084c0:	887b      	ldrh	r3, [r7, #2]
 80084c2:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80084c4:	7ffb      	ldrb	r3, [r7, #31]
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d00c      	beq.n	80084e4 <HAL_SPI_TransmitReceive+0x4a>
 80084ca:	69bb      	ldr	r3, [r7, #24]
 80084cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80084d0:	d106      	bne.n	80084e0 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d102      	bne.n	80084e0 <HAL_SPI_TransmitReceive+0x46>
 80084da:	7ffb      	ldrb	r3, [r7, #31]
 80084dc:	2b04      	cmp	r3, #4
 80084de:	d001      	beq.n	80084e4 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80084e0:	2302      	movs	r3, #2
 80084e2:	e17f      	b.n	80087e4 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d005      	beq.n	80084f6 <HAL_SPI_TransmitReceive+0x5c>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d002      	beq.n	80084f6 <HAL_SPI_TransmitReceive+0x5c>
 80084f0:	887b      	ldrh	r3, [r7, #2]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d101      	bne.n	80084fa <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80084f6:	2301      	movs	r3, #1
 80084f8:	e174      	b.n	80087e4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008500:	2b01      	cmp	r3, #1
 8008502:	d101      	bne.n	8008508 <HAL_SPI_TransmitReceive+0x6e>
 8008504:	2302      	movs	r3, #2
 8008506:	e16d      	b.n	80087e4 <HAL_SPI_TransmitReceive+0x34a>
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2201      	movs	r2, #1
 800850c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008516:	b2db      	uxtb	r3, r3
 8008518:	2b04      	cmp	r3, #4
 800851a:	d003      	beq.n	8008524 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2205      	movs	r2, #5
 8008520:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2200      	movs	r2, #0
 8008528:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	887a      	ldrh	r2, [r7, #2]
 8008534:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	887a      	ldrh	r2, [r7, #2]
 800853a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	68ba      	ldr	r2, [r7, #8]
 8008540:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	887a      	ldrh	r2, [r7, #2]
 8008546:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	887a      	ldrh	r2, [r7, #2]
 800854c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2200      	movs	r2, #0
 8008552:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2200      	movs	r2, #0
 8008558:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008564:	2b40      	cmp	r3, #64	@ 0x40
 8008566:	d007      	beq.n	8008578 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008576:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008580:	d17e      	bne.n	8008680 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d002      	beq.n	8008590 <HAL_SPI_TransmitReceive+0xf6>
 800858a:	8afb      	ldrh	r3, [r7, #22]
 800858c:	2b01      	cmp	r3, #1
 800858e:	d16c      	bne.n	800866a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008594:	881a      	ldrh	r2, [r3, #0]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085a0:	1c9a      	adds	r2, r3, #2
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	3b01      	subs	r3, #1
 80085ae:	b29a      	uxth	r2, r3
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085b4:	e059      	b.n	800866a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	f003 0302 	and.w	r3, r3, #2
 80085c0:	2b02      	cmp	r3, #2
 80085c2:	d11b      	bne.n	80085fc <HAL_SPI_TransmitReceive+0x162>
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d016      	beq.n	80085fc <HAL_SPI_TransmitReceive+0x162>
 80085ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d113      	bne.n	80085fc <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085d8:	881a      	ldrh	r2, [r3, #0]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085e4:	1c9a      	adds	r2, r3, #2
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	3b01      	subs	r3, #1
 80085f2:	b29a      	uxth	r2, r3
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80085f8:	2300      	movs	r3, #0
 80085fa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	f003 0301 	and.w	r3, r3, #1
 8008606:	2b01      	cmp	r3, #1
 8008608:	d119      	bne.n	800863e <HAL_SPI_TransmitReceive+0x1a4>
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800860e:	b29b      	uxth	r3, r3
 8008610:	2b00      	cmp	r3, #0
 8008612:	d014      	beq.n	800863e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	68da      	ldr	r2, [r3, #12]
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800861e:	b292      	uxth	r2, r2
 8008620:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008626:	1c9a      	adds	r2, r3, #2
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008630:	b29b      	uxth	r3, r3
 8008632:	3b01      	subs	r3, #1
 8008634:	b29a      	uxth	r2, r3
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800863a:	2301      	movs	r3, #1
 800863c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800863e:	f7fd fb59 	bl	8005cf4 <HAL_GetTick>
 8008642:	4602      	mov	r2, r0
 8008644:	6a3b      	ldr	r3, [r7, #32]
 8008646:	1ad3      	subs	r3, r2, r3
 8008648:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800864a:	429a      	cmp	r2, r3
 800864c:	d80d      	bhi.n	800866a <HAL_SPI_TransmitReceive+0x1d0>
 800864e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008654:	d009      	beq.n	800866a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2201      	movs	r2, #1
 800865a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2200      	movs	r2, #0
 8008662:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008666:	2303      	movs	r3, #3
 8008668:	e0bc      	b.n	80087e4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800866e:	b29b      	uxth	r3, r3
 8008670:	2b00      	cmp	r3, #0
 8008672:	d1a0      	bne.n	80085b6 <HAL_SPI_TransmitReceive+0x11c>
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008678:	b29b      	uxth	r3, r3
 800867a:	2b00      	cmp	r3, #0
 800867c:	d19b      	bne.n	80085b6 <HAL_SPI_TransmitReceive+0x11c>
 800867e:	e082      	b.n	8008786 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d002      	beq.n	800868e <HAL_SPI_TransmitReceive+0x1f4>
 8008688:	8afb      	ldrh	r3, [r7, #22]
 800868a:	2b01      	cmp	r3, #1
 800868c:	d171      	bne.n	8008772 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	330c      	adds	r3, #12
 8008698:	7812      	ldrb	r2, [r2, #0]
 800869a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086a0:	1c5a      	adds	r2, r3, #1
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	3b01      	subs	r3, #1
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80086b4:	e05d      	b.n	8008772 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	f003 0302 	and.w	r3, r3, #2
 80086c0:	2b02      	cmp	r3, #2
 80086c2:	d11c      	bne.n	80086fe <HAL_SPI_TransmitReceive+0x264>
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d017      	beq.n	80086fe <HAL_SPI_TransmitReceive+0x264>
 80086ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d114      	bne.n	80086fe <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	330c      	adds	r3, #12
 80086de:	7812      	ldrb	r2, [r2, #0]
 80086e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086e6:	1c5a      	adds	r2, r3, #1
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	3b01      	subs	r3, #1
 80086f4:	b29a      	uxth	r2, r3
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80086fa:	2300      	movs	r3, #0
 80086fc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	f003 0301 	and.w	r3, r3, #1
 8008708:	2b01      	cmp	r3, #1
 800870a:	d119      	bne.n	8008740 <HAL_SPI_TransmitReceive+0x2a6>
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008710:	b29b      	uxth	r3, r3
 8008712:	2b00      	cmp	r3, #0
 8008714:	d014      	beq.n	8008740 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	68da      	ldr	r2, [r3, #12]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008720:	b2d2      	uxtb	r2, r2
 8008722:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008728:	1c5a      	adds	r2, r3, #1
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008732:	b29b      	uxth	r3, r3
 8008734:	3b01      	subs	r3, #1
 8008736:	b29a      	uxth	r2, r3
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800873c:	2301      	movs	r3, #1
 800873e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008740:	f7fd fad8 	bl	8005cf4 <HAL_GetTick>
 8008744:	4602      	mov	r2, r0
 8008746:	6a3b      	ldr	r3, [r7, #32]
 8008748:	1ad3      	subs	r3, r2, r3
 800874a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800874c:	429a      	cmp	r2, r3
 800874e:	d803      	bhi.n	8008758 <HAL_SPI_TransmitReceive+0x2be>
 8008750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008756:	d102      	bne.n	800875e <HAL_SPI_TransmitReceive+0x2c4>
 8008758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800875a:	2b00      	cmp	r3, #0
 800875c:	d109      	bne.n	8008772 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2201      	movs	r2, #1
 8008762:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2200      	movs	r2, #0
 800876a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800876e:	2303      	movs	r3, #3
 8008770:	e038      	b.n	80087e4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008776:	b29b      	uxth	r3, r3
 8008778:	2b00      	cmp	r3, #0
 800877a:	d19c      	bne.n	80086b6 <HAL_SPI_TransmitReceive+0x21c>
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008780:	b29b      	uxth	r3, r3
 8008782:	2b00      	cmp	r3, #0
 8008784:	d197      	bne.n	80086b6 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008786:	6a3a      	ldr	r2, [r7, #32]
 8008788:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800878a:	68f8      	ldr	r0, [r7, #12]
 800878c:	f000 f8b6 	bl	80088fc <SPI_EndRxTxTransaction>
 8008790:	4603      	mov	r3, r0
 8008792:	2b00      	cmp	r3, #0
 8008794:	d008      	beq.n	80087a8 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2220      	movs	r2, #32
 800879a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2200      	movs	r2, #0
 80087a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80087a4:	2301      	movs	r3, #1
 80087a6:	e01d      	b.n	80087e4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d10a      	bne.n	80087c6 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80087b0:	2300      	movs	r3, #0
 80087b2:	613b      	str	r3, [r7, #16]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	68db      	ldr	r3, [r3, #12]
 80087ba:	613b      	str	r3, [r7, #16]
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	613b      	str	r3, [r7, #16]
 80087c4:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2201      	movs	r2, #1
 80087ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2200      	movs	r2, #0
 80087d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d001      	beq.n	80087e2 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80087de:	2301      	movs	r3, #1
 80087e0:	e000      	b.n	80087e4 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80087e2:	2300      	movs	r3, #0
  }
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3728      	adds	r7, #40	@ 0x28
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b088      	sub	sp, #32
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	60b9      	str	r1, [r7, #8]
 80087f6:	603b      	str	r3, [r7, #0]
 80087f8:	4613      	mov	r3, r2
 80087fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80087fc:	f7fd fa7a 	bl	8005cf4 <HAL_GetTick>
 8008800:	4602      	mov	r2, r0
 8008802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008804:	1a9b      	subs	r3, r3, r2
 8008806:	683a      	ldr	r2, [r7, #0]
 8008808:	4413      	add	r3, r2
 800880a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800880c:	f7fd fa72 	bl	8005cf4 <HAL_GetTick>
 8008810:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008812:	4b39      	ldr	r3, [pc, #228]	@ (80088f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	015b      	lsls	r3, r3, #5
 8008818:	0d1b      	lsrs	r3, r3, #20
 800881a:	69fa      	ldr	r2, [r7, #28]
 800881c:	fb02 f303 	mul.w	r3, r2, r3
 8008820:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008822:	e054      	b.n	80088ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800882a:	d050      	beq.n	80088ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800882c:	f7fd fa62 	bl	8005cf4 <HAL_GetTick>
 8008830:	4602      	mov	r2, r0
 8008832:	69bb      	ldr	r3, [r7, #24]
 8008834:	1ad3      	subs	r3, r2, r3
 8008836:	69fa      	ldr	r2, [r7, #28]
 8008838:	429a      	cmp	r2, r3
 800883a:	d902      	bls.n	8008842 <SPI_WaitFlagStateUntilTimeout+0x56>
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d13d      	bne.n	80088be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	685a      	ldr	r2, [r3, #4]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008850:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800885a:	d111      	bne.n	8008880 <SPI_WaitFlagStateUntilTimeout+0x94>
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008864:	d004      	beq.n	8008870 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800886e:	d107      	bne.n	8008880 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800887e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008884:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008888:	d10f      	bne.n	80088aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008898:	601a      	str	r2, [r3, #0]
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80088a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2201      	movs	r2, #1
 80088ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80088ba:	2303      	movs	r3, #3
 80088bc:	e017      	b.n	80088ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d101      	bne.n	80088c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80088c4:	2300      	movs	r3, #0
 80088c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	3b01      	subs	r3, #1
 80088cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	689a      	ldr	r2, [r3, #8]
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	4013      	ands	r3, r2
 80088d8:	68ba      	ldr	r2, [r7, #8]
 80088da:	429a      	cmp	r2, r3
 80088dc:	bf0c      	ite	eq
 80088de:	2301      	moveq	r3, #1
 80088e0:	2300      	movne	r3, #0
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	461a      	mov	r2, r3
 80088e6:	79fb      	ldrb	r3, [r7, #7]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d19b      	bne.n	8008824 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3720      	adds	r7, #32
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop
 80088f8:	20000080 	.word	0x20000080

080088fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b088      	sub	sp, #32
 8008900:	af02      	add	r7, sp, #8
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	9300      	str	r3, [sp, #0]
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	2201      	movs	r2, #1
 8008910:	2102      	movs	r1, #2
 8008912:	68f8      	ldr	r0, [r7, #12]
 8008914:	f7ff ff6a 	bl	80087ec <SPI_WaitFlagStateUntilTimeout>
 8008918:	4603      	mov	r3, r0
 800891a:	2b00      	cmp	r3, #0
 800891c:	d007      	beq.n	800892e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008922:	f043 0220 	orr.w	r2, r3, #32
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800892a:	2303      	movs	r3, #3
 800892c:	e032      	b.n	8008994 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800892e:	4b1b      	ldr	r3, [pc, #108]	@ (800899c <SPI_EndRxTxTransaction+0xa0>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a1b      	ldr	r2, [pc, #108]	@ (80089a0 <SPI_EndRxTxTransaction+0xa4>)
 8008934:	fba2 2303 	umull	r2, r3, r2, r3
 8008938:	0d5b      	lsrs	r3, r3, #21
 800893a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800893e:	fb02 f303 	mul.w	r3, r2, r3
 8008942:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800894c:	d112      	bne.n	8008974 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	9300      	str	r3, [sp, #0]
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	2200      	movs	r2, #0
 8008956:	2180      	movs	r1, #128	@ 0x80
 8008958:	68f8      	ldr	r0, [r7, #12]
 800895a:	f7ff ff47 	bl	80087ec <SPI_WaitFlagStateUntilTimeout>
 800895e:	4603      	mov	r3, r0
 8008960:	2b00      	cmp	r3, #0
 8008962:	d016      	beq.n	8008992 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008968:	f043 0220 	orr.w	r2, r3, #32
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008970:	2303      	movs	r3, #3
 8008972:	e00f      	b.n	8008994 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d00a      	beq.n	8008990 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	3b01      	subs	r3, #1
 800897e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800898a:	2b80      	cmp	r3, #128	@ 0x80
 800898c:	d0f2      	beq.n	8008974 <SPI_EndRxTxTransaction+0x78>
 800898e:	e000      	b.n	8008992 <SPI_EndRxTxTransaction+0x96>
        break;
 8008990:	bf00      	nop
  }

  return HAL_OK;
 8008992:	2300      	movs	r3, #0
}
 8008994:	4618      	mov	r0, r3
 8008996:	3718      	adds	r7, #24
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}
 800899c:	20000080 	.word	0x20000080
 80089a0:	165e9f81 	.word	0x165e9f81

080089a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d101      	bne.n	80089b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e041      	b.n	8008a3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d106      	bne.n	80089d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 f839 	bl	8008a42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2202      	movs	r2, #2
 80089d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	3304      	adds	r3, #4
 80089e0:	4619      	mov	r1, r3
 80089e2:	4610      	mov	r0, r2
 80089e4:	f000 f9c0 	bl	8008d68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2201      	movs	r2, #1
 80089ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2201      	movs	r2, #1
 80089f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2201      	movs	r2, #1
 8008a04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2201      	movs	r2, #1
 8008a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3708      	adds	r7, #8
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008a42:	b480      	push	{r7}
 8008a44:	b083      	sub	sp, #12
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008a4a:	bf00      	nop
 8008a4c:	370c      	adds	r7, #12
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr
	...

08008a58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b085      	sub	sp, #20
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d001      	beq.n	8008a70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	e04e      	b.n	8008b0e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2202      	movs	r2, #2
 8008a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	68da      	ldr	r2, [r3, #12]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f042 0201 	orr.w	r2, r2, #1
 8008a86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a23      	ldr	r2, [pc, #140]	@ (8008b1c <HAL_TIM_Base_Start_IT+0xc4>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d022      	beq.n	8008ad8 <HAL_TIM_Base_Start_IT+0x80>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a9a:	d01d      	beq.n	8008ad8 <HAL_TIM_Base_Start_IT+0x80>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a1f      	ldr	r2, [pc, #124]	@ (8008b20 <HAL_TIM_Base_Start_IT+0xc8>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d018      	beq.n	8008ad8 <HAL_TIM_Base_Start_IT+0x80>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a1e      	ldr	r2, [pc, #120]	@ (8008b24 <HAL_TIM_Base_Start_IT+0xcc>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d013      	beq.n	8008ad8 <HAL_TIM_Base_Start_IT+0x80>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a1c      	ldr	r2, [pc, #112]	@ (8008b28 <HAL_TIM_Base_Start_IT+0xd0>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d00e      	beq.n	8008ad8 <HAL_TIM_Base_Start_IT+0x80>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4a1b      	ldr	r2, [pc, #108]	@ (8008b2c <HAL_TIM_Base_Start_IT+0xd4>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d009      	beq.n	8008ad8 <HAL_TIM_Base_Start_IT+0x80>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a19      	ldr	r2, [pc, #100]	@ (8008b30 <HAL_TIM_Base_Start_IT+0xd8>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d004      	beq.n	8008ad8 <HAL_TIM_Base_Start_IT+0x80>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a18      	ldr	r2, [pc, #96]	@ (8008b34 <HAL_TIM_Base_Start_IT+0xdc>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d111      	bne.n	8008afc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	f003 0307 	and.w	r3, r3, #7
 8008ae2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2b06      	cmp	r3, #6
 8008ae8:	d010      	beq.n	8008b0c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f042 0201 	orr.w	r2, r2, #1
 8008af8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008afa:	e007      	b.n	8008b0c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	681a      	ldr	r2, [r3, #0]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f042 0201 	orr.w	r2, r2, #1
 8008b0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008b0c:	2300      	movs	r3, #0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3714      	adds	r7, #20
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr
 8008b1a:	bf00      	nop
 8008b1c:	40010000 	.word	0x40010000
 8008b20:	40000400 	.word	0x40000400
 8008b24:	40000800 	.word	0x40000800
 8008b28:	40000c00 	.word	0x40000c00
 8008b2c:	40010400 	.word	0x40010400
 8008b30:	40014000 	.word	0x40014000
 8008b34:	40001800 	.word	0x40001800

08008b38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	68db      	ldr	r3, [r3, #12]
 8008b46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	f003 0302 	and.w	r3, r3, #2
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d020      	beq.n	8008b9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f003 0302 	and.w	r3, r3, #2
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d01b      	beq.n	8008b9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f06f 0202 	mvn.w	r2, #2
 8008b6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2201      	movs	r2, #1
 8008b72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	699b      	ldr	r3, [r3, #24]
 8008b7a:	f003 0303 	and.w	r3, r3, #3
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d003      	beq.n	8008b8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 f8d2 	bl	8008d2c <HAL_TIM_IC_CaptureCallback>
 8008b88:	e005      	b.n	8008b96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 f8c4 	bl	8008d18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 f8d5 	bl	8008d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	f003 0304 	and.w	r3, r3, #4
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d020      	beq.n	8008be8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f003 0304 	and.w	r3, r3, #4
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d01b      	beq.n	8008be8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f06f 0204 	mvn.w	r2, #4
 8008bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2202      	movs	r2, #2
 8008bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	699b      	ldr	r3, [r3, #24]
 8008bc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d003      	beq.n	8008bd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 f8ac 	bl	8008d2c <HAL_TIM_IC_CaptureCallback>
 8008bd4:	e005      	b.n	8008be2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 f89e 	bl	8008d18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 f8af 	bl	8008d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2200      	movs	r2, #0
 8008be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	f003 0308 	and.w	r3, r3, #8
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d020      	beq.n	8008c34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f003 0308 	and.w	r3, r3, #8
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d01b      	beq.n	8008c34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f06f 0208 	mvn.w	r2, #8
 8008c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2204      	movs	r2, #4
 8008c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	69db      	ldr	r3, [r3, #28]
 8008c12:	f003 0303 	and.w	r3, r3, #3
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d003      	beq.n	8008c22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 f886 	bl	8008d2c <HAL_TIM_IC_CaptureCallback>
 8008c20:	e005      	b.n	8008c2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 f878 	bl	8008d18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 f889 	bl	8008d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2200      	movs	r2, #0
 8008c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	f003 0310 	and.w	r3, r3, #16
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d020      	beq.n	8008c80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f003 0310 	and.w	r3, r3, #16
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d01b      	beq.n	8008c80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f06f 0210 	mvn.w	r2, #16
 8008c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2208      	movs	r2, #8
 8008c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	69db      	ldr	r3, [r3, #28]
 8008c5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d003      	beq.n	8008c6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 f860 	bl	8008d2c <HAL_TIM_IC_CaptureCallback>
 8008c6c:	e005      	b.n	8008c7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 f852 	bl	8008d18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 f863 	bl	8008d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	f003 0301 	and.w	r3, r3, #1
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d00c      	beq.n	8008ca4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f003 0301 	and.w	r3, r3, #1
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d007      	beq.n	8008ca4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f06f 0201 	mvn.w	r2, #1
 8008c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f7f8 fbfe 	bl	80014a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d00c      	beq.n	8008cc8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d007      	beq.n	8008cc8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 f906 	bl	8008ed4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d00c      	beq.n	8008cec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d007      	beq.n	8008cec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 f834 	bl	8008d54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	f003 0320 	and.w	r3, r3, #32
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d00c      	beq.n	8008d10 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f003 0320 	and.w	r3, r3, #32
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d007      	beq.n	8008d10 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f06f 0220 	mvn.w	r2, #32
 8008d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 f8d8 	bl	8008ec0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d10:	bf00      	nop
 8008d12:	3710      	adds	r7, #16
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008d20:	bf00      	nop
 8008d22:	370c      	adds	r7, #12
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008d34:	bf00      	nop
 8008d36:	370c      	adds	r7, #12
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008d48:	bf00      	nop
 8008d4a:	370c      	adds	r7, #12
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008d5c:	bf00      	nop
 8008d5e:	370c      	adds	r7, #12
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr

08008d68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b085      	sub	sp, #20
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	4a46      	ldr	r2, [pc, #280]	@ (8008e94 <TIM_Base_SetConfig+0x12c>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d013      	beq.n	8008da8 <TIM_Base_SetConfig+0x40>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d86:	d00f      	beq.n	8008da8 <TIM_Base_SetConfig+0x40>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	4a43      	ldr	r2, [pc, #268]	@ (8008e98 <TIM_Base_SetConfig+0x130>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d00b      	beq.n	8008da8 <TIM_Base_SetConfig+0x40>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4a42      	ldr	r2, [pc, #264]	@ (8008e9c <TIM_Base_SetConfig+0x134>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d007      	beq.n	8008da8 <TIM_Base_SetConfig+0x40>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a41      	ldr	r2, [pc, #260]	@ (8008ea0 <TIM_Base_SetConfig+0x138>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d003      	beq.n	8008da8 <TIM_Base_SetConfig+0x40>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4a40      	ldr	r2, [pc, #256]	@ (8008ea4 <TIM_Base_SetConfig+0x13c>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d108      	bne.n	8008dba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	68fa      	ldr	r2, [r7, #12]
 8008db6:	4313      	orrs	r3, r2
 8008db8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	4a35      	ldr	r2, [pc, #212]	@ (8008e94 <TIM_Base_SetConfig+0x12c>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d02b      	beq.n	8008e1a <TIM_Base_SetConfig+0xb2>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008dc8:	d027      	beq.n	8008e1a <TIM_Base_SetConfig+0xb2>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4a32      	ldr	r2, [pc, #200]	@ (8008e98 <TIM_Base_SetConfig+0x130>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d023      	beq.n	8008e1a <TIM_Base_SetConfig+0xb2>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4a31      	ldr	r2, [pc, #196]	@ (8008e9c <TIM_Base_SetConfig+0x134>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d01f      	beq.n	8008e1a <TIM_Base_SetConfig+0xb2>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4a30      	ldr	r2, [pc, #192]	@ (8008ea0 <TIM_Base_SetConfig+0x138>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d01b      	beq.n	8008e1a <TIM_Base_SetConfig+0xb2>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4a2f      	ldr	r2, [pc, #188]	@ (8008ea4 <TIM_Base_SetConfig+0x13c>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d017      	beq.n	8008e1a <TIM_Base_SetConfig+0xb2>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4a2e      	ldr	r2, [pc, #184]	@ (8008ea8 <TIM_Base_SetConfig+0x140>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d013      	beq.n	8008e1a <TIM_Base_SetConfig+0xb2>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	4a2d      	ldr	r2, [pc, #180]	@ (8008eac <TIM_Base_SetConfig+0x144>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d00f      	beq.n	8008e1a <TIM_Base_SetConfig+0xb2>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	4a2c      	ldr	r2, [pc, #176]	@ (8008eb0 <TIM_Base_SetConfig+0x148>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d00b      	beq.n	8008e1a <TIM_Base_SetConfig+0xb2>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4a2b      	ldr	r2, [pc, #172]	@ (8008eb4 <TIM_Base_SetConfig+0x14c>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d007      	beq.n	8008e1a <TIM_Base_SetConfig+0xb2>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	4a2a      	ldr	r2, [pc, #168]	@ (8008eb8 <TIM_Base_SetConfig+0x150>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d003      	beq.n	8008e1a <TIM_Base_SetConfig+0xb2>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	4a29      	ldr	r2, [pc, #164]	@ (8008ebc <TIM_Base_SetConfig+0x154>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d108      	bne.n	8008e2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	68db      	ldr	r3, [r3, #12]
 8008e26:	68fa      	ldr	r2, [r7, #12]
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	695b      	ldr	r3, [r3, #20]
 8008e36:	4313      	orrs	r3, r2
 8008e38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	68fa      	ldr	r2, [r7, #12]
 8008e3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	689a      	ldr	r2, [r3, #8]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	4a10      	ldr	r2, [pc, #64]	@ (8008e94 <TIM_Base_SetConfig+0x12c>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d003      	beq.n	8008e60 <TIM_Base_SetConfig+0xf8>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4a12      	ldr	r2, [pc, #72]	@ (8008ea4 <TIM_Base_SetConfig+0x13c>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d103      	bne.n	8008e68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	691a      	ldr	r2, [r3, #16]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	691b      	ldr	r3, [r3, #16]
 8008e72:	f003 0301 	and.w	r3, r3, #1
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d105      	bne.n	8008e86 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	f023 0201 	bic.w	r2, r3, #1
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	611a      	str	r2, [r3, #16]
  }
}
 8008e86:	bf00      	nop
 8008e88:	3714      	adds	r7, #20
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr
 8008e92:	bf00      	nop
 8008e94:	40010000 	.word	0x40010000
 8008e98:	40000400 	.word	0x40000400
 8008e9c:	40000800 	.word	0x40000800
 8008ea0:	40000c00 	.word	0x40000c00
 8008ea4:	40010400 	.word	0x40010400
 8008ea8:	40014000 	.word	0x40014000
 8008eac:	40014400 	.word	0x40014400
 8008eb0:	40014800 	.word	0x40014800
 8008eb4:	40001800 	.word	0x40001800
 8008eb8:	40001c00 	.word	0x40001c00
 8008ebc:	40002000 	.word	0x40002000

08008ec0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ec8:	bf00      	nop
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008edc:	bf00      	nop
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d101      	bne.n	8008efa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e042      	b.n	8008f80 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d106      	bne.n	8008f14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f7f8 fb9a 	bl	8001648 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2224      	movs	r2, #36	@ 0x24
 8008f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	68da      	ldr	r2, [r3, #12]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008f2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 fe07 	bl	8009b40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	691a      	ldr	r2, [r3, #16]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008f40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	695a      	ldr	r2, [r3, #20]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008f50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	68da      	ldr	r2, [r3, #12]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008f60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2200      	movs	r2, #0
 8008f66:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2220      	movs	r2, #32
 8008f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2220      	movs	r2, #32
 8008f74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008f7e:	2300      	movs	r3, #0
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3708      	adds	r7, #8
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b08a      	sub	sp, #40	@ 0x28
 8008f8c:	af02      	add	r7, sp, #8
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	60b9      	str	r1, [r7, #8]
 8008f92:	603b      	str	r3, [r7, #0]
 8008f94:	4613      	mov	r3, r2
 8008f96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008fa2:	b2db      	uxtb	r3, r3
 8008fa4:	2b20      	cmp	r3, #32
 8008fa6:	d175      	bne.n	8009094 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d002      	beq.n	8008fb4 <HAL_UART_Transmit+0x2c>
 8008fae:	88fb      	ldrh	r3, [r7, #6]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d101      	bne.n	8008fb8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	e06e      	b.n	8009096 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2221      	movs	r2, #33	@ 0x21
 8008fc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008fc6:	f7fc fe95 	bl	8005cf4 <HAL_GetTick>
 8008fca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	88fa      	ldrh	r2, [r7, #6]
 8008fd0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	88fa      	ldrh	r2, [r7, #6]
 8008fd6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fe0:	d108      	bne.n	8008ff4 <HAL_UART_Transmit+0x6c>
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	691b      	ldr	r3, [r3, #16]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d104      	bne.n	8008ff4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008fea:	2300      	movs	r3, #0
 8008fec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	61bb      	str	r3, [r7, #24]
 8008ff2:	e003      	b.n	8008ffc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008ffc:	e02e      	b.n	800905c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	9300      	str	r3, [sp, #0]
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	2200      	movs	r2, #0
 8009006:	2180      	movs	r1, #128	@ 0x80
 8009008:	68f8      	ldr	r0, [r7, #12]
 800900a:	f000 fb69 	bl	80096e0 <UART_WaitOnFlagUntilTimeout>
 800900e:	4603      	mov	r3, r0
 8009010:	2b00      	cmp	r3, #0
 8009012:	d005      	beq.n	8009020 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2220      	movs	r2, #32
 8009018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800901c:	2303      	movs	r3, #3
 800901e:	e03a      	b.n	8009096 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009020:	69fb      	ldr	r3, [r7, #28]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d10b      	bne.n	800903e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009026:	69bb      	ldr	r3, [r7, #24]
 8009028:	881b      	ldrh	r3, [r3, #0]
 800902a:	461a      	mov	r2, r3
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009034:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009036:	69bb      	ldr	r3, [r7, #24]
 8009038:	3302      	adds	r3, #2
 800903a:	61bb      	str	r3, [r7, #24]
 800903c:	e007      	b.n	800904e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	781a      	ldrb	r2, [r3, #0]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	3301      	adds	r3, #1
 800904c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009052:	b29b      	uxth	r3, r3
 8009054:	3b01      	subs	r3, #1
 8009056:	b29a      	uxth	r2, r3
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009060:	b29b      	uxth	r3, r3
 8009062:	2b00      	cmp	r3, #0
 8009064:	d1cb      	bne.n	8008ffe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	9300      	str	r3, [sp, #0]
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	2200      	movs	r2, #0
 800906e:	2140      	movs	r1, #64	@ 0x40
 8009070:	68f8      	ldr	r0, [r7, #12]
 8009072:	f000 fb35 	bl	80096e0 <UART_WaitOnFlagUntilTimeout>
 8009076:	4603      	mov	r3, r0
 8009078:	2b00      	cmp	r3, #0
 800907a:	d005      	beq.n	8009088 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2220      	movs	r2, #32
 8009080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009084:	2303      	movs	r3, #3
 8009086:	e006      	b.n	8009096 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2220      	movs	r2, #32
 800908c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009090:	2300      	movs	r3, #0
 8009092:	e000      	b.n	8009096 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009094:	2302      	movs	r3, #2
  }
}
 8009096:	4618      	mov	r0, r3
 8009098:	3720      	adds	r7, #32
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}

0800909e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800909e:	b480      	push	{r7}
 80090a0:	b085      	sub	sp, #20
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	60f8      	str	r0, [r7, #12]
 80090a6:	60b9      	str	r1, [r7, #8]
 80090a8:	4613      	mov	r3, r2
 80090aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80090b2:	b2db      	uxtb	r3, r3
 80090b4:	2b20      	cmp	r3, #32
 80090b6:	d121      	bne.n	80090fc <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d002      	beq.n	80090c4 <HAL_UART_Transmit_IT+0x26>
 80090be:	88fb      	ldrh	r3, [r7, #6]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d101      	bne.n	80090c8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	e01a      	b.n	80090fe <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	68ba      	ldr	r2, [r7, #8]
 80090cc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	88fa      	ldrh	r2, [r7, #6]
 80090d2:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	88fa      	ldrh	r2, [r7, #6]
 80090d8:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2200      	movs	r2, #0
 80090de:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2221      	movs	r2, #33	@ 0x21
 80090e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	68da      	ldr	r2, [r3, #12]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80090f6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80090f8:	2300      	movs	r3, #0
 80090fa:	e000      	b.n	80090fe <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80090fc:	2302      	movs	r3, #2
  }
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3714      	adds	r7, #20
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr

0800910a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800910a:	b580      	push	{r7, lr}
 800910c:	b084      	sub	sp, #16
 800910e:	af00      	add	r7, sp, #0
 8009110:	60f8      	str	r0, [r7, #12]
 8009112:	60b9      	str	r1, [r7, #8]
 8009114:	4613      	mov	r3, r2
 8009116:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800911e:	b2db      	uxtb	r3, r3
 8009120:	2b20      	cmp	r3, #32
 8009122:	d112      	bne.n	800914a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d002      	beq.n	8009130 <HAL_UART_Receive_IT+0x26>
 800912a:	88fb      	ldrh	r3, [r7, #6]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d101      	bne.n	8009134 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009130:	2301      	movs	r3, #1
 8009132:	e00b      	b.n	800914c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2200      	movs	r2, #0
 8009138:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800913a:	88fb      	ldrh	r3, [r7, #6]
 800913c:	461a      	mov	r2, r3
 800913e:	68b9      	ldr	r1, [r7, #8]
 8009140:	68f8      	ldr	r0, [r7, #12]
 8009142:	f000 fb26 	bl	8009792 <UART_Start_Receive_IT>
 8009146:	4603      	mov	r3, r0
 8009148:	e000      	b.n	800914c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800914a:	2302      	movs	r3, #2
  }
}
 800914c:	4618      	mov	r0, r3
 800914e:	3710      	adds	r7, #16
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b0ba      	sub	sp, #232	@ 0xe8
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	68db      	ldr	r3, [r3, #12]
 800916c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	695b      	ldr	r3, [r3, #20]
 8009176:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800917a:	2300      	movs	r3, #0
 800917c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009180:	2300      	movs	r3, #0
 8009182:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800918a:	f003 030f 	and.w	r3, r3, #15
 800918e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009192:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009196:	2b00      	cmp	r3, #0
 8009198:	d10f      	bne.n	80091ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800919a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800919e:	f003 0320 	and.w	r3, r3, #32
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d009      	beq.n	80091ba <HAL_UART_IRQHandler+0x66>
 80091a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091aa:	f003 0320 	and.w	r3, r3, #32
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d003      	beq.n	80091ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 fc06 	bl	80099c4 <UART_Receive_IT>
      return;
 80091b8:	e25b      	b.n	8009672 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80091ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80091be:	2b00      	cmp	r3, #0
 80091c0:	f000 80de 	beq.w	8009380 <HAL_UART_IRQHandler+0x22c>
 80091c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091c8:	f003 0301 	and.w	r3, r3, #1
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d106      	bne.n	80091de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80091d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091d4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f000 80d1 	beq.w	8009380 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80091de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091e2:	f003 0301 	and.w	r3, r3, #1
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d00b      	beq.n	8009202 <HAL_UART_IRQHandler+0xae>
 80091ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d005      	beq.n	8009202 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091fa:	f043 0201 	orr.w	r2, r3, #1
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009206:	f003 0304 	and.w	r3, r3, #4
 800920a:	2b00      	cmp	r3, #0
 800920c:	d00b      	beq.n	8009226 <HAL_UART_IRQHandler+0xd2>
 800920e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009212:	f003 0301 	and.w	r3, r3, #1
 8009216:	2b00      	cmp	r3, #0
 8009218:	d005      	beq.n	8009226 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800921e:	f043 0202 	orr.w	r2, r3, #2
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800922a:	f003 0302 	and.w	r3, r3, #2
 800922e:	2b00      	cmp	r3, #0
 8009230:	d00b      	beq.n	800924a <HAL_UART_IRQHandler+0xf6>
 8009232:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009236:	f003 0301 	and.w	r3, r3, #1
 800923a:	2b00      	cmp	r3, #0
 800923c:	d005      	beq.n	800924a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009242:	f043 0204 	orr.w	r2, r3, #4
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800924a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800924e:	f003 0308 	and.w	r3, r3, #8
 8009252:	2b00      	cmp	r3, #0
 8009254:	d011      	beq.n	800927a <HAL_UART_IRQHandler+0x126>
 8009256:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800925a:	f003 0320 	and.w	r3, r3, #32
 800925e:	2b00      	cmp	r3, #0
 8009260:	d105      	bne.n	800926e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009262:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009266:	f003 0301 	and.w	r3, r3, #1
 800926a:	2b00      	cmp	r3, #0
 800926c:	d005      	beq.n	800927a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009272:	f043 0208 	orr.w	r2, r3, #8
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800927e:	2b00      	cmp	r3, #0
 8009280:	f000 81f2 	beq.w	8009668 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009288:	f003 0320 	and.w	r3, r3, #32
 800928c:	2b00      	cmp	r3, #0
 800928e:	d008      	beq.n	80092a2 <HAL_UART_IRQHandler+0x14e>
 8009290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009294:	f003 0320 	and.w	r3, r3, #32
 8009298:	2b00      	cmp	r3, #0
 800929a:	d002      	beq.n	80092a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 fb91 	bl	80099c4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	695b      	ldr	r3, [r3, #20]
 80092a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092ac:	2b40      	cmp	r3, #64	@ 0x40
 80092ae:	bf0c      	ite	eq
 80092b0:	2301      	moveq	r3, #1
 80092b2:	2300      	movne	r3, #0
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092be:	f003 0308 	and.w	r3, r3, #8
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d103      	bne.n	80092ce <HAL_UART_IRQHandler+0x17a>
 80092c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d04f      	beq.n	800936e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 fa99 	bl	8009806 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	695b      	ldr	r3, [r3, #20]
 80092da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092de:	2b40      	cmp	r3, #64	@ 0x40
 80092e0:	d141      	bne.n	8009366 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	3314      	adds	r3, #20
 80092e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80092f0:	e853 3f00 	ldrex	r3, [r3]
 80092f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80092f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80092fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009300:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	3314      	adds	r3, #20
 800930a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800930e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009312:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009316:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800931a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800931e:	e841 2300 	strex	r3, r2, [r1]
 8009322:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009326:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800932a:	2b00      	cmp	r3, #0
 800932c:	d1d9      	bne.n	80092e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009332:	2b00      	cmp	r3, #0
 8009334:	d013      	beq.n	800935e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800933a:	4a7e      	ldr	r2, [pc, #504]	@ (8009534 <HAL_UART_IRQHandler+0x3e0>)
 800933c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009342:	4618      	mov	r0, r3
 8009344:	f7fc fe73 	bl	800602e <HAL_DMA_Abort_IT>
 8009348:	4603      	mov	r3, r0
 800934a:	2b00      	cmp	r3, #0
 800934c:	d016      	beq.n	800937c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009352:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009358:	4610      	mov	r0, r2
 800935a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800935c:	e00e      	b.n	800937c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 f98a 	bl	8009678 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009364:	e00a      	b.n	800937c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 f986 	bl	8009678 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800936c:	e006      	b.n	800937c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 f982 	bl	8009678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800937a:	e175      	b.n	8009668 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800937c:	bf00      	nop
    return;
 800937e:	e173      	b.n	8009668 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009384:	2b01      	cmp	r3, #1
 8009386:	f040 814f 	bne.w	8009628 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800938a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800938e:	f003 0310 	and.w	r3, r3, #16
 8009392:	2b00      	cmp	r3, #0
 8009394:	f000 8148 	beq.w	8009628 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800939c:	f003 0310 	and.w	r3, r3, #16
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	f000 8141 	beq.w	8009628 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80093a6:	2300      	movs	r3, #0
 80093a8:	60bb      	str	r3, [r7, #8]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	60bb      	str	r3, [r7, #8]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	60bb      	str	r3, [r7, #8]
 80093ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	695b      	ldr	r3, [r3, #20]
 80093c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093c6:	2b40      	cmp	r3, #64	@ 0x40
 80093c8:	f040 80b6 	bne.w	8009538 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80093d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80093dc:	2b00      	cmp	r3, #0
 80093de:	f000 8145 	beq.w	800966c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80093e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80093ea:	429a      	cmp	r2, r3
 80093ec:	f080 813e 	bcs.w	800966c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80093f6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093fc:	69db      	ldr	r3, [r3, #28]
 80093fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009402:	f000 8088 	beq.w	8009516 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	330c      	adds	r3, #12
 800940c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009410:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009414:	e853 3f00 	ldrex	r3, [r3]
 8009418:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800941c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009420:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009424:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	330c      	adds	r3, #12
 800942e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009432:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009436:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800943a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800943e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009442:	e841 2300 	strex	r3, r2, [r1]
 8009446:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800944a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800944e:	2b00      	cmp	r3, #0
 8009450:	d1d9      	bne.n	8009406 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	3314      	adds	r3, #20
 8009458:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800945a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800945c:	e853 3f00 	ldrex	r3, [r3]
 8009460:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009462:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009464:	f023 0301 	bic.w	r3, r3, #1
 8009468:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	3314      	adds	r3, #20
 8009472:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009476:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800947a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800947c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800947e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009482:	e841 2300 	strex	r3, r2, [r1]
 8009486:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009488:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800948a:	2b00      	cmp	r3, #0
 800948c:	d1e1      	bne.n	8009452 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	3314      	adds	r3, #20
 8009494:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009496:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009498:	e853 3f00 	ldrex	r3, [r3]
 800949c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800949e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80094a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	3314      	adds	r3, #20
 80094ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80094b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80094b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80094b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80094ba:	e841 2300 	strex	r3, r2, [r1]
 80094be:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80094c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d1e3      	bne.n	800948e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2220      	movs	r2, #32
 80094ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2200      	movs	r2, #0
 80094d2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	330c      	adds	r3, #12
 80094da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094de:	e853 3f00 	ldrex	r3, [r3]
 80094e2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80094e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094e6:	f023 0310 	bic.w	r3, r3, #16
 80094ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	330c      	adds	r3, #12
 80094f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80094f8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80094fa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094fc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80094fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009500:	e841 2300 	strex	r3, r2, [r1]
 8009504:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009506:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009508:	2b00      	cmp	r3, #0
 800950a:	d1e3      	bne.n	80094d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009510:	4618      	mov	r0, r3
 8009512:	f7fc fd1c 	bl	8005f4e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2202      	movs	r2, #2
 800951a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009524:	b29b      	uxth	r3, r3
 8009526:	1ad3      	subs	r3, r2, r3
 8009528:	b29b      	uxth	r3, r3
 800952a:	4619      	mov	r1, r3
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 f8ad 	bl	800968c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009532:	e09b      	b.n	800966c <HAL_UART_IRQHandler+0x518>
 8009534:	080098cd 	.word	0x080098cd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009540:	b29b      	uxth	r3, r3
 8009542:	1ad3      	subs	r3, r2, r3
 8009544:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800954c:	b29b      	uxth	r3, r3
 800954e:	2b00      	cmp	r3, #0
 8009550:	f000 808e 	beq.w	8009670 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009554:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009558:	2b00      	cmp	r3, #0
 800955a:	f000 8089 	beq.w	8009670 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	330c      	adds	r3, #12
 8009564:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009568:	e853 3f00 	ldrex	r3, [r3]
 800956c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800956e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009570:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009574:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	330c      	adds	r3, #12
 800957e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009582:	647a      	str	r2, [r7, #68]	@ 0x44
 8009584:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009586:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009588:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800958a:	e841 2300 	strex	r3, r2, [r1]
 800958e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009590:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009592:	2b00      	cmp	r3, #0
 8009594:	d1e3      	bne.n	800955e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	3314      	adds	r3, #20
 800959c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800959e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a0:	e853 3f00 	ldrex	r3, [r3]
 80095a4:	623b      	str	r3, [r7, #32]
   return(result);
 80095a6:	6a3b      	ldr	r3, [r7, #32]
 80095a8:	f023 0301 	bic.w	r3, r3, #1
 80095ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	3314      	adds	r3, #20
 80095b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80095ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80095bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095c2:	e841 2300 	strex	r3, r2, [r1]
 80095c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80095c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d1e3      	bne.n	8009596 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2220      	movs	r2, #32
 80095d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2200      	movs	r2, #0
 80095da:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	330c      	adds	r3, #12
 80095e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	e853 3f00 	ldrex	r3, [r3]
 80095ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f023 0310 	bic.w	r3, r3, #16
 80095f2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	330c      	adds	r3, #12
 80095fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009600:	61fa      	str	r2, [r7, #28]
 8009602:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009604:	69b9      	ldr	r1, [r7, #24]
 8009606:	69fa      	ldr	r2, [r7, #28]
 8009608:	e841 2300 	strex	r3, r2, [r1]
 800960c:	617b      	str	r3, [r7, #20]
   return(result);
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d1e3      	bne.n	80095dc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2202      	movs	r2, #2
 8009618:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800961a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800961e:	4619      	mov	r1, r3
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 f833 	bl	800968c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009626:	e023      	b.n	8009670 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800962c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009630:	2b00      	cmp	r3, #0
 8009632:	d009      	beq.n	8009648 <HAL_UART_IRQHandler+0x4f4>
 8009634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009638:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800963c:	2b00      	cmp	r3, #0
 800963e:	d003      	beq.n	8009648 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 f957 	bl	80098f4 <UART_Transmit_IT>
    return;
 8009646:	e014      	b.n	8009672 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800964c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009650:	2b00      	cmp	r3, #0
 8009652:	d00e      	beq.n	8009672 <HAL_UART_IRQHandler+0x51e>
 8009654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800965c:	2b00      	cmp	r3, #0
 800965e:	d008      	beq.n	8009672 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f000 f997 	bl	8009994 <UART_EndTransmit_IT>
    return;
 8009666:	e004      	b.n	8009672 <HAL_UART_IRQHandler+0x51e>
    return;
 8009668:	bf00      	nop
 800966a:	e002      	b.n	8009672 <HAL_UART_IRQHandler+0x51e>
      return;
 800966c:	bf00      	nop
 800966e:	e000      	b.n	8009672 <HAL_UART_IRQHandler+0x51e>
      return;
 8009670:	bf00      	nop
  }
}
 8009672:	37e8      	adds	r7, #232	@ 0xe8
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009678:	b480      	push	{r7}
 800967a:	b083      	sub	sp, #12
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009680:	bf00      	nop
 8009682:	370c      	adds	r7, #12
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr

0800968c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800968c:	b480      	push	{r7}
 800968e:	b083      	sub	sp, #12
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	460b      	mov	r3, r1
 8009696:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009698:	bf00      	nop
 800969a:	370c      	adds	r7, #12
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr

080096a4 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b085      	sub	sp, #20
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 80096ac:	2300      	movs	r3, #0
 80096ae:	60fb      	str	r3, [r7, #12]
 80096b0:	2300      	movs	r3, #0
 80096b2:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80096ba:	b2db      	uxtb	r3, r3
 80096bc:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	b2da      	uxtb	r2, r3
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	b2db      	uxtb	r3, r3
 80096d0:	4313      	orrs	r3, r2
 80096d2:	b2db      	uxtb	r3, r3
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3714      	adds	r7, #20
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr

080096e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b086      	sub	sp, #24
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	60f8      	str	r0, [r7, #12]
 80096e8:	60b9      	str	r1, [r7, #8]
 80096ea:	603b      	str	r3, [r7, #0]
 80096ec:	4613      	mov	r3, r2
 80096ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096f0:	e03b      	b.n	800976a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096f2:	6a3b      	ldr	r3, [r7, #32]
 80096f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096f8:	d037      	beq.n	800976a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096fa:	f7fc fafb 	bl	8005cf4 <HAL_GetTick>
 80096fe:	4602      	mov	r2, r0
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	1ad3      	subs	r3, r2, r3
 8009704:	6a3a      	ldr	r2, [r7, #32]
 8009706:	429a      	cmp	r2, r3
 8009708:	d302      	bcc.n	8009710 <UART_WaitOnFlagUntilTimeout+0x30>
 800970a:	6a3b      	ldr	r3, [r7, #32]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d101      	bne.n	8009714 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009710:	2303      	movs	r3, #3
 8009712:	e03a      	b.n	800978a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	68db      	ldr	r3, [r3, #12]
 800971a:	f003 0304 	and.w	r3, r3, #4
 800971e:	2b00      	cmp	r3, #0
 8009720:	d023      	beq.n	800976a <UART_WaitOnFlagUntilTimeout+0x8a>
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	2b80      	cmp	r3, #128	@ 0x80
 8009726:	d020      	beq.n	800976a <UART_WaitOnFlagUntilTimeout+0x8a>
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	2b40      	cmp	r3, #64	@ 0x40
 800972c:	d01d      	beq.n	800976a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f003 0308 	and.w	r3, r3, #8
 8009738:	2b08      	cmp	r3, #8
 800973a:	d116      	bne.n	800976a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800973c:	2300      	movs	r3, #0
 800973e:	617b      	str	r3, [r7, #20]
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	617b      	str	r3, [r7, #20]
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	617b      	str	r3, [r7, #20]
 8009750:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009752:	68f8      	ldr	r0, [r7, #12]
 8009754:	f000 f857 	bl	8009806 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2208      	movs	r2, #8
 800975c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2200      	movs	r2, #0
 8009762:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009766:	2301      	movs	r3, #1
 8009768:	e00f      	b.n	800978a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	4013      	ands	r3, r2
 8009774:	68ba      	ldr	r2, [r7, #8]
 8009776:	429a      	cmp	r2, r3
 8009778:	bf0c      	ite	eq
 800977a:	2301      	moveq	r3, #1
 800977c:	2300      	movne	r3, #0
 800977e:	b2db      	uxtb	r3, r3
 8009780:	461a      	mov	r2, r3
 8009782:	79fb      	ldrb	r3, [r7, #7]
 8009784:	429a      	cmp	r2, r3
 8009786:	d0b4      	beq.n	80096f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009788:	2300      	movs	r3, #0
}
 800978a:	4618      	mov	r0, r3
 800978c:	3718      	adds	r7, #24
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}

08009792 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009792:	b480      	push	{r7}
 8009794:	b085      	sub	sp, #20
 8009796:	af00      	add	r7, sp, #0
 8009798:	60f8      	str	r0, [r7, #12]
 800979a:	60b9      	str	r1, [r7, #8]
 800979c:	4613      	mov	r3, r2
 800979e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	68ba      	ldr	r2, [r7, #8]
 80097a4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	88fa      	ldrh	r2, [r7, #6]
 80097aa:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	88fa      	ldrh	r2, [r7, #6]
 80097b0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2200      	movs	r2, #0
 80097b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2222      	movs	r2, #34	@ 0x22
 80097bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	691b      	ldr	r3, [r3, #16]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d007      	beq.n	80097d8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	68da      	ldr	r2, [r3, #12]
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80097d6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	695a      	ldr	r2, [r3, #20]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f042 0201 	orr.w	r2, r2, #1
 80097e6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	68da      	ldr	r2, [r3, #12]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f042 0220 	orr.w	r2, r2, #32
 80097f6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80097f8:	2300      	movs	r3, #0
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3714      	adds	r7, #20
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr

08009806 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009806:	b480      	push	{r7}
 8009808:	b095      	sub	sp, #84	@ 0x54
 800980a:	af00      	add	r7, sp, #0
 800980c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	330c      	adds	r3, #12
 8009814:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009818:	e853 3f00 	ldrex	r3, [r3]
 800981c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800981e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009820:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009824:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	330c      	adds	r3, #12
 800982c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800982e:	643a      	str	r2, [r7, #64]	@ 0x40
 8009830:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009832:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009834:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009836:	e841 2300 	strex	r3, r2, [r1]
 800983a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800983c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800983e:	2b00      	cmp	r3, #0
 8009840:	d1e5      	bne.n	800980e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	3314      	adds	r3, #20
 8009848:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800984a:	6a3b      	ldr	r3, [r7, #32]
 800984c:	e853 3f00 	ldrex	r3, [r3]
 8009850:	61fb      	str	r3, [r7, #28]
   return(result);
 8009852:	69fb      	ldr	r3, [r7, #28]
 8009854:	f023 0301 	bic.w	r3, r3, #1
 8009858:	64bb      	str	r3, [r7, #72]	@ 0x48
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	3314      	adds	r3, #20
 8009860:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009862:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009864:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009866:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009868:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800986a:	e841 2300 	strex	r3, r2, [r1]
 800986e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009872:	2b00      	cmp	r3, #0
 8009874:	d1e5      	bne.n	8009842 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800987a:	2b01      	cmp	r3, #1
 800987c:	d119      	bne.n	80098b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	330c      	adds	r3, #12
 8009884:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	e853 3f00 	ldrex	r3, [r3]
 800988c:	60bb      	str	r3, [r7, #8]
   return(result);
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	f023 0310 	bic.w	r3, r3, #16
 8009894:	647b      	str	r3, [r7, #68]	@ 0x44
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	330c      	adds	r3, #12
 800989c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800989e:	61ba      	str	r2, [r7, #24]
 80098a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a2:	6979      	ldr	r1, [r7, #20]
 80098a4:	69ba      	ldr	r2, [r7, #24]
 80098a6:	e841 2300 	strex	r3, r2, [r1]
 80098aa:	613b      	str	r3, [r7, #16]
   return(result);
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d1e5      	bne.n	800987e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2220      	movs	r2, #32
 80098b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2200      	movs	r2, #0
 80098be:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80098c0:	bf00      	nop
 80098c2:	3754      	adds	r7, #84	@ 0x54
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr

080098cc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b084      	sub	sp, #16
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	2200      	movs	r2, #0
 80098de:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2200      	movs	r2, #0
 80098e4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80098e6:	68f8      	ldr	r0, [r7, #12]
 80098e8:	f7ff fec6 	bl	8009678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098ec:	bf00      	nop
 80098ee:	3710      	adds	r7, #16
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b085      	sub	sp, #20
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009902:	b2db      	uxtb	r3, r3
 8009904:	2b21      	cmp	r3, #33	@ 0x21
 8009906:	d13e      	bne.n	8009986 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	689b      	ldr	r3, [r3, #8]
 800990c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009910:	d114      	bne.n	800993c <UART_Transmit_IT+0x48>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	691b      	ldr	r3, [r3, #16]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d110      	bne.n	800993c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6a1b      	ldr	r3, [r3, #32]
 800991e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	881b      	ldrh	r3, [r3, #0]
 8009924:	461a      	mov	r2, r3
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800992e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6a1b      	ldr	r3, [r3, #32]
 8009934:	1c9a      	adds	r2, r3, #2
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	621a      	str	r2, [r3, #32]
 800993a:	e008      	b.n	800994e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6a1b      	ldr	r3, [r3, #32]
 8009940:	1c59      	adds	r1, r3, #1
 8009942:	687a      	ldr	r2, [r7, #4]
 8009944:	6211      	str	r1, [r2, #32]
 8009946:	781a      	ldrb	r2, [r3, #0]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009952:	b29b      	uxth	r3, r3
 8009954:	3b01      	subs	r3, #1
 8009956:	b29b      	uxth	r3, r3
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	4619      	mov	r1, r3
 800995c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800995e:	2b00      	cmp	r3, #0
 8009960:	d10f      	bne.n	8009982 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	68da      	ldr	r2, [r3, #12]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009970:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	68da      	ldr	r2, [r3, #12]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009980:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009982:	2300      	movs	r3, #0
 8009984:	e000      	b.n	8009988 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009986:	2302      	movs	r3, #2
  }
}
 8009988:	4618      	mov	r0, r3
 800998a:	3714      	adds	r7, #20
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr

08009994 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b082      	sub	sp, #8
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	68da      	ldr	r2, [r3, #12]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80099aa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2220      	movs	r2, #32
 80099b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f7fb fc47 	bl	8005248 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3708      	adds	r7, #8
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b08c      	sub	sp, #48	@ 0x30
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80099d2:	b2db      	uxtb	r3, r3
 80099d4:	2b22      	cmp	r3, #34	@ 0x22
 80099d6:	f040 80ae 	bne.w	8009b36 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	689b      	ldr	r3, [r3, #8]
 80099de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099e2:	d117      	bne.n	8009a14 <UART_Receive_IT+0x50>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	691b      	ldr	r3, [r3, #16]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d113      	bne.n	8009a14 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80099ec:	2300      	movs	r3, #0
 80099ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099f4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a02:	b29a      	uxth	r2, r3
 8009a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a06:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a0c:	1c9a      	adds	r2, r3, #2
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	629a      	str	r2, [r3, #40]	@ 0x28
 8009a12:	e026      	b.n	8009a62 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	689b      	ldr	r3, [r3, #8]
 8009a22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a26:	d007      	beq.n	8009a38 <UART_Receive_IT+0x74>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	689b      	ldr	r3, [r3, #8]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d10a      	bne.n	8009a46 <UART_Receive_IT+0x82>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	691b      	ldr	r3, [r3, #16]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d106      	bne.n	8009a46 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	685b      	ldr	r3, [r3, #4]
 8009a3e:	b2da      	uxtb	r2, r3
 8009a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a42:	701a      	strb	r2, [r3, #0]
 8009a44:	e008      	b.n	8009a58 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a52:	b2da      	uxtb	r2, r3
 8009a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a56:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a5c:	1c5a      	adds	r2, r3, #1
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	3b01      	subs	r3, #1
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	4619      	mov	r1, r3
 8009a70:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d15d      	bne.n	8009b32 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	68da      	ldr	r2, [r3, #12]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f022 0220 	bic.w	r2, r2, #32
 8009a84:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	68da      	ldr	r2, [r3, #12]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009a94:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	695a      	ldr	r2, [r3, #20]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f022 0201 	bic.w	r2, r2, #1
 8009aa4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2220      	movs	r2, #32
 8009aaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	d135      	bne.n	8009b28 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	330c      	adds	r3, #12
 8009ac8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	e853 3f00 	ldrex	r3, [r3]
 8009ad0:	613b      	str	r3, [r7, #16]
   return(result);
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	f023 0310 	bic.w	r3, r3, #16
 8009ad8:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	330c      	adds	r3, #12
 8009ae0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ae2:	623a      	str	r2, [r7, #32]
 8009ae4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae6:	69f9      	ldr	r1, [r7, #28]
 8009ae8:	6a3a      	ldr	r2, [r7, #32]
 8009aea:	e841 2300 	strex	r3, r2, [r1]
 8009aee:	61bb      	str	r3, [r7, #24]
   return(result);
 8009af0:	69bb      	ldr	r3, [r7, #24]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d1e5      	bne.n	8009ac2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f003 0310 	and.w	r3, r3, #16
 8009b00:	2b10      	cmp	r3, #16
 8009b02:	d10a      	bne.n	8009b1a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009b04:	2300      	movs	r3, #0
 8009b06:	60fb      	str	r3, [r7, #12]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	60fb      	str	r3, [r7, #12]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	60fb      	str	r3, [r7, #12]
 8009b18:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009b1e:	4619      	mov	r1, r3
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f7ff fdb3 	bl	800968c <HAL_UARTEx_RxEventCallback>
 8009b26:	e002      	b.n	8009b2e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f7fb fb43 	bl	80051b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	e002      	b.n	8009b38 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009b32:	2300      	movs	r3, #0
 8009b34:	e000      	b.n	8009b38 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009b36:	2302      	movs	r3, #2
  }
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3730      	adds	r7, #48	@ 0x30
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b44:	b0c0      	sub	sp, #256	@ 0x100
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	691b      	ldr	r3, [r3, #16]
 8009b54:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b5c:	68d9      	ldr	r1, [r3, #12]
 8009b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	ea40 0301 	orr.w	r3, r0, r1
 8009b68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b6e:	689a      	ldr	r2, [r3, #8]
 8009b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b74:	691b      	ldr	r3, [r3, #16]
 8009b76:	431a      	orrs	r2, r3
 8009b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b7c:	695b      	ldr	r3, [r3, #20]
 8009b7e:	431a      	orrs	r2, r3
 8009b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b84:	69db      	ldr	r3, [r3, #28]
 8009b86:	4313      	orrs	r3, r2
 8009b88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	68db      	ldr	r3, [r3, #12]
 8009b94:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009b98:	f021 010c 	bic.w	r1, r1, #12
 8009b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009ba6:	430b      	orrs	r3, r1
 8009ba8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	695b      	ldr	r3, [r3, #20]
 8009bb2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bba:	6999      	ldr	r1, [r3, #24]
 8009bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	ea40 0301 	orr.w	r3, r0, r1
 8009bc6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	4b8f      	ldr	r3, [pc, #572]	@ (8009e0c <UART_SetConfig+0x2cc>)
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d005      	beq.n	8009be0 <UART_SetConfig+0xa0>
 8009bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	4b8d      	ldr	r3, [pc, #564]	@ (8009e10 <UART_SetConfig+0x2d0>)
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d104      	bne.n	8009bea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009be0:	f7fe fb8c 	bl	80082fc <HAL_RCC_GetPCLK2Freq>
 8009be4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009be8:	e003      	b.n	8009bf2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009bea:	f7fe fb73 	bl	80082d4 <HAL_RCC_GetPCLK1Freq>
 8009bee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bf6:	69db      	ldr	r3, [r3, #28]
 8009bf8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bfc:	f040 810c 	bne.w	8009e18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009c00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c04:	2200      	movs	r2, #0
 8009c06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009c0a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009c0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009c12:	4622      	mov	r2, r4
 8009c14:	462b      	mov	r3, r5
 8009c16:	1891      	adds	r1, r2, r2
 8009c18:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009c1a:	415b      	adcs	r3, r3
 8009c1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009c1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009c22:	4621      	mov	r1, r4
 8009c24:	eb12 0801 	adds.w	r8, r2, r1
 8009c28:	4629      	mov	r1, r5
 8009c2a:	eb43 0901 	adc.w	r9, r3, r1
 8009c2e:	f04f 0200 	mov.w	r2, #0
 8009c32:	f04f 0300 	mov.w	r3, #0
 8009c36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009c3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009c3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009c42:	4690      	mov	r8, r2
 8009c44:	4699      	mov	r9, r3
 8009c46:	4623      	mov	r3, r4
 8009c48:	eb18 0303 	adds.w	r3, r8, r3
 8009c4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009c50:	462b      	mov	r3, r5
 8009c52:	eb49 0303 	adc.w	r3, r9, r3
 8009c56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	2200      	movs	r2, #0
 8009c62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009c66:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009c6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009c6e:	460b      	mov	r3, r1
 8009c70:	18db      	adds	r3, r3, r3
 8009c72:	653b      	str	r3, [r7, #80]	@ 0x50
 8009c74:	4613      	mov	r3, r2
 8009c76:	eb42 0303 	adc.w	r3, r2, r3
 8009c7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009c80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009c84:	f7f6 fafc 	bl	8000280 <__aeabi_uldivmod>
 8009c88:	4602      	mov	r2, r0
 8009c8a:	460b      	mov	r3, r1
 8009c8c:	4b61      	ldr	r3, [pc, #388]	@ (8009e14 <UART_SetConfig+0x2d4>)
 8009c8e:	fba3 2302 	umull	r2, r3, r3, r2
 8009c92:	095b      	lsrs	r3, r3, #5
 8009c94:	011c      	lsls	r4, r3, #4
 8009c96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009ca0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009ca4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009ca8:	4642      	mov	r2, r8
 8009caa:	464b      	mov	r3, r9
 8009cac:	1891      	adds	r1, r2, r2
 8009cae:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009cb0:	415b      	adcs	r3, r3
 8009cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009cb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009cb8:	4641      	mov	r1, r8
 8009cba:	eb12 0a01 	adds.w	sl, r2, r1
 8009cbe:	4649      	mov	r1, r9
 8009cc0:	eb43 0b01 	adc.w	fp, r3, r1
 8009cc4:	f04f 0200 	mov.w	r2, #0
 8009cc8:	f04f 0300 	mov.w	r3, #0
 8009ccc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009cd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009cd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009cd8:	4692      	mov	sl, r2
 8009cda:	469b      	mov	fp, r3
 8009cdc:	4643      	mov	r3, r8
 8009cde:	eb1a 0303 	adds.w	r3, sl, r3
 8009ce2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009ce6:	464b      	mov	r3, r9
 8009ce8:	eb4b 0303 	adc.w	r3, fp, r3
 8009cec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009cfc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009d00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009d04:	460b      	mov	r3, r1
 8009d06:	18db      	adds	r3, r3, r3
 8009d08:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d0a:	4613      	mov	r3, r2
 8009d0c:	eb42 0303 	adc.w	r3, r2, r3
 8009d10:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009d16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009d1a:	f7f6 fab1 	bl	8000280 <__aeabi_uldivmod>
 8009d1e:	4602      	mov	r2, r0
 8009d20:	460b      	mov	r3, r1
 8009d22:	4611      	mov	r1, r2
 8009d24:	4b3b      	ldr	r3, [pc, #236]	@ (8009e14 <UART_SetConfig+0x2d4>)
 8009d26:	fba3 2301 	umull	r2, r3, r3, r1
 8009d2a:	095b      	lsrs	r3, r3, #5
 8009d2c:	2264      	movs	r2, #100	@ 0x64
 8009d2e:	fb02 f303 	mul.w	r3, r2, r3
 8009d32:	1acb      	subs	r3, r1, r3
 8009d34:	00db      	lsls	r3, r3, #3
 8009d36:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009d3a:	4b36      	ldr	r3, [pc, #216]	@ (8009e14 <UART_SetConfig+0x2d4>)
 8009d3c:	fba3 2302 	umull	r2, r3, r3, r2
 8009d40:	095b      	lsrs	r3, r3, #5
 8009d42:	005b      	lsls	r3, r3, #1
 8009d44:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009d48:	441c      	add	r4, r3
 8009d4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009d4e:	2200      	movs	r2, #0
 8009d50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009d54:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009d58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009d5c:	4642      	mov	r2, r8
 8009d5e:	464b      	mov	r3, r9
 8009d60:	1891      	adds	r1, r2, r2
 8009d62:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009d64:	415b      	adcs	r3, r3
 8009d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009d6c:	4641      	mov	r1, r8
 8009d6e:	1851      	adds	r1, r2, r1
 8009d70:	6339      	str	r1, [r7, #48]	@ 0x30
 8009d72:	4649      	mov	r1, r9
 8009d74:	414b      	adcs	r3, r1
 8009d76:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d78:	f04f 0200 	mov.w	r2, #0
 8009d7c:	f04f 0300 	mov.w	r3, #0
 8009d80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009d84:	4659      	mov	r1, fp
 8009d86:	00cb      	lsls	r3, r1, #3
 8009d88:	4651      	mov	r1, sl
 8009d8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d8e:	4651      	mov	r1, sl
 8009d90:	00ca      	lsls	r2, r1, #3
 8009d92:	4610      	mov	r0, r2
 8009d94:	4619      	mov	r1, r3
 8009d96:	4603      	mov	r3, r0
 8009d98:	4642      	mov	r2, r8
 8009d9a:	189b      	adds	r3, r3, r2
 8009d9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009da0:	464b      	mov	r3, r9
 8009da2:	460a      	mov	r2, r1
 8009da4:	eb42 0303 	adc.w	r3, r2, r3
 8009da8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009db0:	685b      	ldr	r3, [r3, #4]
 8009db2:	2200      	movs	r2, #0
 8009db4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009db8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009dbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	18db      	adds	r3, r3, r3
 8009dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009dc6:	4613      	mov	r3, r2
 8009dc8:	eb42 0303 	adc.w	r3, r2, r3
 8009dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009dce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009dd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009dd6:	f7f6 fa53 	bl	8000280 <__aeabi_uldivmod>
 8009dda:	4602      	mov	r2, r0
 8009ddc:	460b      	mov	r3, r1
 8009dde:	4b0d      	ldr	r3, [pc, #52]	@ (8009e14 <UART_SetConfig+0x2d4>)
 8009de0:	fba3 1302 	umull	r1, r3, r3, r2
 8009de4:	095b      	lsrs	r3, r3, #5
 8009de6:	2164      	movs	r1, #100	@ 0x64
 8009de8:	fb01 f303 	mul.w	r3, r1, r3
 8009dec:	1ad3      	subs	r3, r2, r3
 8009dee:	00db      	lsls	r3, r3, #3
 8009df0:	3332      	adds	r3, #50	@ 0x32
 8009df2:	4a08      	ldr	r2, [pc, #32]	@ (8009e14 <UART_SetConfig+0x2d4>)
 8009df4:	fba2 2303 	umull	r2, r3, r2, r3
 8009df8:	095b      	lsrs	r3, r3, #5
 8009dfa:	f003 0207 	and.w	r2, r3, #7
 8009dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4422      	add	r2, r4
 8009e06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009e08:	e106      	b.n	800a018 <UART_SetConfig+0x4d8>
 8009e0a:	bf00      	nop
 8009e0c:	40011000 	.word	0x40011000
 8009e10:	40011400 	.word	0x40011400
 8009e14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009e18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009e22:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009e26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009e2a:	4642      	mov	r2, r8
 8009e2c:	464b      	mov	r3, r9
 8009e2e:	1891      	adds	r1, r2, r2
 8009e30:	6239      	str	r1, [r7, #32]
 8009e32:	415b      	adcs	r3, r3
 8009e34:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009e3a:	4641      	mov	r1, r8
 8009e3c:	1854      	adds	r4, r2, r1
 8009e3e:	4649      	mov	r1, r9
 8009e40:	eb43 0501 	adc.w	r5, r3, r1
 8009e44:	f04f 0200 	mov.w	r2, #0
 8009e48:	f04f 0300 	mov.w	r3, #0
 8009e4c:	00eb      	lsls	r3, r5, #3
 8009e4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009e52:	00e2      	lsls	r2, r4, #3
 8009e54:	4614      	mov	r4, r2
 8009e56:	461d      	mov	r5, r3
 8009e58:	4643      	mov	r3, r8
 8009e5a:	18e3      	adds	r3, r4, r3
 8009e5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009e60:	464b      	mov	r3, r9
 8009e62:	eb45 0303 	adc.w	r3, r5, r3
 8009e66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	2200      	movs	r2, #0
 8009e72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009e76:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009e7a:	f04f 0200 	mov.w	r2, #0
 8009e7e:	f04f 0300 	mov.w	r3, #0
 8009e82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009e86:	4629      	mov	r1, r5
 8009e88:	008b      	lsls	r3, r1, #2
 8009e8a:	4621      	mov	r1, r4
 8009e8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e90:	4621      	mov	r1, r4
 8009e92:	008a      	lsls	r2, r1, #2
 8009e94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009e98:	f7f6 f9f2 	bl	8000280 <__aeabi_uldivmod>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	4b60      	ldr	r3, [pc, #384]	@ (800a024 <UART_SetConfig+0x4e4>)
 8009ea2:	fba3 2302 	umull	r2, r3, r3, r2
 8009ea6:	095b      	lsrs	r3, r3, #5
 8009ea8:	011c      	lsls	r4, r3, #4
 8009eaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009eae:	2200      	movs	r2, #0
 8009eb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009eb4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009eb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009ebc:	4642      	mov	r2, r8
 8009ebe:	464b      	mov	r3, r9
 8009ec0:	1891      	adds	r1, r2, r2
 8009ec2:	61b9      	str	r1, [r7, #24]
 8009ec4:	415b      	adcs	r3, r3
 8009ec6:	61fb      	str	r3, [r7, #28]
 8009ec8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009ecc:	4641      	mov	r1, r8
 8009ece:	1851      	adds	r1, r2, r1
 8009ed0:	6139      	str	r1, [r7, #16]
 8009ed2:	4649      	mov	r1, r9
 8009ed4:	414b      	adcs	r3, r1
 8009ed6:	617b      	str	r3, [r7, #20]
 8009ed8:	f04f 0200 	mov.w	r2, #0
 8009edc:	f04f 0300 	mov.w	r3, #0
 8009ee0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009ee4:	4659      	mov	r1, fp
 8009ee6:	00cb      	lsls	r3, r1, #3
 8009ee8:	4651      	mov	r1, sl
 8009eea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009eee:	4651      	mov	r1, sl
 8009ef0:	00ca      	lsls	r2, r1, #3
 8009ef2:	4610      	mov	r0, r2
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	4642      	mov	r2, r8
 8009efa:	189b      	adds	r3, r3, r2
 8009efc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009f00:	464b      	mov	r3, r9
 8009f02:	460a      	mov	r2, r1
 8009f04:	eb42 0303 	adc.w	r3, r2, r3
 8009f08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f10:	685b      	ldr	r3, [r3, #4]
 8009f12:	2200      	movs	r2, #0
 8009f14:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009f16:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009f18:	f04f 0200 	mov.w	r2, #0
 8009f1c:	f04f 0300 	mov.w	r3, #0
 8009f20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009f24:	4649      	mov	r1, r9
 8009f26:	008b      	lsls	r3, r1, #2
 8009f28:	4641      	mov	r1, r8
 8009f2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f2e:	4641      	mov	r1, r8
 8009f30:	008a      	lsls	r2, r1, #2
 8009f32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009f36:	f7f6 f9a3 	bl	8000280 <__aeabi_uldivmod>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	4611      	mov	r1, r2
 8009f40:	4b38      	ldr	r3, [pc, #224]	@ (800a024 <UART_SetConfig+0x4e4>)
 8009f42:	fba3 2301 	umull	r2, r3, r3, r1
 8009f46:	095b      	lsrs	r3, r3, #5
 8009f48:	2264      	movs	r2, #100	@ 0x64
 8009f4a:	fb02 f303 	mul.w	r3, r2, r3
 8009f4e:	1acb      	subs	r3, r1, r3
 8009f50:	011b      	lsls	r3, r3, #4
 8009f52:	3332      	adds	r3, #50	@ 0x32
 8009f54:	4a33      	ldr	r2, [pc, #204]	@ (800a024 <UART_SetConfig+0x4e4>)
 8009f56:	fba2 2303 	umull	r2, r3, r2, r3
 8009f5a:	095b      	lsrs	r3, r3, #5
 8009f5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009f60:	441c      	add	r4, r3
 8009f62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009f66:	2200      	movs	r2, #0
 8009f68:	673b      	str	r3, [r7, #112]	@ 0x70
 8009f6a:	677a      	str	r2, [r7, #116]	@ 0x74
 8009f6c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009f70:	4642      	mov	r2, r8
 8009f72:	464b      	mov	r3, r9
 8009f74:	1891      	adds	r1, r2, r2
 8009f76:	60b9      	str	r1, [r7, #8]
 8009f78:	415b      	adcs	r3, r3
 8009f7a:	60fb      	str	r3, [r7, #12]
 8009f7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009f80:	4641      	mov	r1, r8
 8009f82:	1851      	adds	r1, r2, r1
 8009f84:	6039      	str	r1, [r7, #0]
 8009f86:	4649      	mov	r1, r9
 8009f88:	414b      	adcs	r3, r1
 8009f8a:	607b      	str	r3, [r7, #4]
 8009f8c:	f04f 0200 	mov.w	r2, #0
 8009f90:	f04f 0300 	mov.w	r3, #0
 8009f94:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009f98:	4659      	mov	r1, fp
 8009f9a:	00cb      	lsls	r3, r1, #3
 8009f9c:	4651      	mov	r1, sl
 8009f9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009fa2:	4651      	mov	r1, sl
 8009fa4:	00ca      	lsls	r2, r1, #3
 8009fa6:	4610      	mov	r0, r2
 8009fa8:	4619      	mov	r1, r3
 8009faa:	4603      	mov	r3, r0
 8009fac:	4642      	mov	r2, r8
 8009fae:	189b      	adds	r3, r3, r2
 8009fb0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009fb2:	464b      	mov	r3, r9
 8009fb4:	460a      	mov	r2, r1
 8009fb6:	eb42 0303 	adc.w	r3, r2, r3
 8009fba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	663b      	str	r3, [r7, #96]	@ 0x60
 8009fc6:	667a      	str	r2, [r7, #100]	@ 0x64
 8009fc8:	f04f 0200 	mov.w	r2, #0
 8009fcc:	f04f 0300 	mov.w	r3, #0
 8009fd0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009fd4:	4649      	mov	r1, r9
 8009fd6:	008b      	lsls	r3, r1, #2
 8009fd8:	4641      	mov	r1, r8
 8009fda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009fde:	4641      	mov	r1, r8
 8009fe0:	008a      	lsls	r2, r1, #2
 8009fe2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009fe6:	f7f6 f94b 	bl	8000280 <__aeabi_uldivmod>
 8009fea:	4602      	mov	r2, r0
 8009fec:	460b      	mov	r3, r1
 8009fee:	4b0d      	ldr	r3, [pc, #52]	@ (800a024 <UART_SetConfig+0x4e4>)
 8009ff0:	fba3 1302 	umull	r1, r3, r3, r2
 8009ff4:	095b      	lsrs	r3, r3, #5
 8009ff6:	2164      	movs	r1, #100	@ 0x64
 8009ff8:	fb01 f303 	mul.w	r3, r1, r3
 8009ffc:	1ad3      	subs	r3, r2, r3
 8009ffe:	011b      	lsls	r3, r3, #4
 800a000:	3332      	adds	r3, #50	@ 0x32
 800a002:	4a08      	ldr	r2, [pc, #32]	@ (800a024 <UART_SetConfig+0x4e4>)
 800a004:	fba2 2303 	umull	r2, r3, r2, r3
 800a008:	095b      	lsrs	r3, r3, #5
 800a00a:	f003 020f 	and.w	r2, r3, #15
 800a00e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4422      	add	r2, r4
 800a016:	609a      	str	r2, [r3, #8]
}
 800a018:	bf00      	nop
 800a01a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a01e:	46bd      	mov	sp, r7
 800a020:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a024:	51eb851f 	.word	0x51eb851f

0800a028 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a028:	b480      	push	{r7}
 800a02a:	b085      	sub	sp, #20
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	4603      	mov	r3, r0
 800a030:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a032:	2300      	movs	r3, #0
 800a034:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a036:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a03a:	2b84      	cmp	r3, #132	@ 0x84
 800a03c:	d005      	beq.n	800a04a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a03e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	4413      	add	r3, r2
 800a046:	3303      	adds	r3, #3
 800a048:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a04a:	68fb      	ldr	r3, [r7, #12]
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3714      	adds	r7, #20
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr

0800a058 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a058:	b480      	push	{r7}
 800a05a:	b083      	sub	sp, #12
 800a05c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a05e:	f3ef 8305 	mrs	r3, IPSR
 800a062:	607b      	str	r3, [r7, #4]
  return(result);
 800a064:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a066:	2b00      	cmp	r3, #0
 800a068:	bf14      	ite	ne
 800a06a:	2301      	movne	r3, #1
 800a06c:	2300      	moveq	r3, #0
 800a06e:	b2db      	uxtb	r3, r3
}
 800a070:	4618      	mov	r0, r3
 800a072:	370c      	adds	r7, #12
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr

0800a07c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a080:	f001 feb6 	bl	800bdf0 <vTaskStartScheduler>
  
  return osOK;
 800a084:	2300      	movs	r3, #0
}
 800a086:	4618      	mov	r0, r3
 800a088:	bd80      	pop	{r7, pc}

0800a08a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a08a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a08c:	b089      	sub	sp, #36	@ 0x24
 800a08e:	af04      	add	r7, sp, #16
 800a090:	6078      	str	r0, [r7, #4]
 800a092:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	695b      	ldr	r3, [r3, #20]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d020      	beq.n	800a0de <osThreadCreate+0x54>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	699b      	ldr	r3, [r3, #24]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d01c      	beq.n	800a0de <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	685c      	ldr	r4, [r3, #4]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	691e      	ldr	r6, [r3, #16]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f7ff ffb6 	bl	800a028 <makeFreeRtosPriority>
 800a0bc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	695b      	ldr	r3, [r3, #20]
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a0c6:	9202      	str	r2, [sp, #8]
 800a0c8:	9301      	str	r3, [sp, #4]
 800a0ca:	9100      	str	r1, [sp, #0]
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	4632      	mov	r2, r6
 800a0d0:	4629      	mov	r1, r5
 800a0d2:	4620      	mov	r0, r4
 800a0d4:	f001 fca6 	bl	800ba24 <xTaskCreateStatic>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	60fb      	str	r3, [r7, #12]
 800a0dc:	e01c      	b.n	800a118 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	685c      	ldr	r4, [r3, #4]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a0ea:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f7ff ff98 	bl	800a028 <makeFreeRtosPriority>
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	f107 030c 	add.w	r3, r7, #12
 800a0fe:	9301      	str	r3, [sp, #4]
 800a100:	9200      	str	r2, [sp, #0]
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	4632      	mov	r2, r6
 800a106:	4629      	mov	r1, r5
 800a108:	4620      	mov	r0, r4
 800a10a:	f001 fceb 	bl	800bae4 <xTaskCreate>
 800a10e:	4603      	mov	r3, r0
 800a110:	2b01      	cmp	r3, #1
 800a112:	d001      	beq.n	800a118 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a114:	2300      	movs	r3, #0
 800a116:	e000      	b.n	800a11a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a118:	68fb      	ldr	r3, [r7, #12]
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3714      	adds	r7, #20
 800a11e:	46bd      	mov	sp, r7
 800a120:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a122 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a122:	b580      	push	{r7, lr}
 800a124:	b084      	sub	sp, #16
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d001      	beq.n	800a138 <osDelay+0x16>
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	e000      	b.n	800a13a <osDelay+0x18>
 800a138:	2301      	movs	r3, #1
 800a13a:	4618      	mov	r0, r3
 800a13c:	f001 fe22 	bl	800bd84 <vTaskDelay>
  
  return osOK;
 800a140:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a142:	4618      	mov	r0, r3
 800a144:	3710      	adds	r7, #16
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}
	...

0800a14c <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b086      	sub	sp, #24
 800a150:	af02      	add	r7, sp, #8
 800a152:	60f8      	str	r0, [r7, #12]
 800a154:	460b      	mov	r3, r1
 800a156:	607a      	str	r2, [r7, #4]
 800a158:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d013      	beq.n	800a18a <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 800a162:	7afb      	ldrb	r3, [r7, #11]
 800a164:	2b01      	cmp	r3, #1
 800a166:	d101      	bne.n	800a16c <osTimerCreate+0x20>
 800a168:	2101      	movs	r1, #1
 800a16a:	e000      	b.n	800a16e <osTimerCreate+0x22>
 800a16c:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 800a172:	68fa      	ldr	r2, [r7, #12]
 800a174:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 800a176:	9201      	str	r2, [sp, #4]
 800a178:	9300      	str	r3, [sp, #0]
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	460a      	mov	r2, r1
 800a17e:	2101      	movs	r1, #1
 800a180:	480b      	ldr	r0, [pc, #44]	@ (800a1b0 <osTimerCreate+0x64>)
 800a182:	f002 fd28 	bl	800cbd6 <xTimerCreateStatic>
 800a186:	4603      	mov	r3, r0
 800a188:	e00e      	b.n	800a1a8 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800a18a:	7afb      	ldrb	r3, [r7, #11]
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	d101      	bne.n	800a194 <osTimerCreate+0x48>
 800a190:	2201      	movs	r2, #1
 800a192:	e000      	b.n	800a196 <osTimerCreate+0x4a>
 800a194:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800a19a:	9300      	str	r3, [sp, #0]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2101      	movs	r1, #1
 800a1a0:	4803      	ldr	r0, [pc, #12]	@ (800a1b0 <osTimerCreate+0x64>)
 800a1a2:	f002 fcf7 	bl	800cb94 <xTimerCreate>
 800a1a6:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3710      	adds	r7, #16
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}
 800a1b0:	0800f754 	.word	0x0800f754

0800a1b4 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b088      	sub	sp, #32
 800a1b8:	af02      	add	r7, sp, #8
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d101      	bne.n	800a1d4 <osTimerStart+0x20>
    ticks = 1;
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 800a1d4:	f7ff ff40 	bl	800a058 <inHandlerMode>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d01a      	beq.n	800a214 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 800a1de:	f107 030c 	add.w	r3, r7, #12
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	9200      	str	r2, [sp, #0]
 800a1e6:	693a      	ldr	r2, [r7, #16]
 800a1e8:	2109      	movs	r1, #9
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f002 fd70 	bl	800ccd0 <xTimerGenericCommand>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	2b01      	cmp	r3, #1
 800a1f4:	d002      	beq.n	800a1fc <osTimerStart+0x48>
    {
      result = osErrorOS;
 800a1f6:	23ff      	movs	r3, #255	@ 0xff
 800a1f8:	617b      	str	r3, [r7, #20]
 800a1fa:	e018      	b.n	800a22e <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d015      	beq.n	800a22e <osTimerStart+0x7a>
 800a202:	4b0d      	ldr	r3, [pc, #52]	@ (800a238 <osTimerStart+0x84>)
 800a204:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a208:	601a      	str	r2, [r3, #0]
 800a20a:	f3bf 8f4f 	dsb	sy
 800a20e:	f3bf 8f6f 	isb	sy
 800a212:	e00c      	b.n	800a22e <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 800a214:	2300      	movs	r3, #0
 800a216:	9300      	str	r3, [sp, #0]
 800a218:	2300      	movs	r3, #0
 800a21a:	693a      	ldr	r2, [r7, #16]
 800a21c:	2104      	movs	r1, #4
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f002 fd56 	bl	800ccd0 <xTimerGenericCommand>
 800a224:	4603      	mov	r3, r0
 800a226:	2b01      	cmp	r3, #1
 800a228:	d001      	beq.n	800a22e <osTimerStart+0x7a>
      result = osErrorOS;
 800a22a:	23ff      	movs	r3, #255	@ 0xff
 800a22c:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 800a22e:	697b      	ldr	r3, [r7, #20]
}
 800a230:	4618      	mov	r0, r3
 800a232:	3718      	adds	r7, #24
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}
 800a238:	e000ed04 	.word	0xe000ed04

0800a23c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b082      	sub	sp, #8
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d007      	beq.n	800a25c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	685b      	ldr	r3, [r3, #4]
 800a250:	4619      	mov	r1, r3
 800a252:	2001      	movs	r0, #1
 800a254:	f000 fda1 	bl	800ad9a <xQueueCreateMutexStatic>
 800a258:	4603      	mov	r3, r0
 800a25a:	e003      	b.n	800a264 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800a25c:	2001      	movs	r0, #1
 800a25e:	f000 fd84 	bl	800ad6a <xQueueCreateMutex>
 800a262:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800a264:	4618      	mov	r0, r3
 800a266:	3708      	adds	r7, #8
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}

0800a26c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b084      	sub	sp, #16
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a276:	2300      	movs	r3, #0
 800a278:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d101      	bne.n	800a284 <osMutexWait+0x18>
    return osErrorParameter;
 800a280:	2380      	movs	r3, #128	@ 0x80
 800a282:	e03a      	b.n	800a2fa <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800a284:	2300      	movs	r3, #0
 800a286:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a28e:	d103      	bne.n	800a298 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800a290:	f04f 33ff 	mov.w	r3, #4294967295
 800a294:	60fb      	str	r3, [r7, #12]
 800a296:	e009      	b.n	800a2ac <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d006      	beq.n	800a2ac <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d101      	bne.n	800a2ac <osMutexWait+0x40>
      ticks = 1;
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a2ac:	f7ff fed4 	bl	800a058 <inHandlerMode>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d017      	beq.n	800a2e6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a2b6:	f107 0308 	add.w	r3, r7, #8
 800a2ba:	461a      	mov	r2, r3
 800a2bc:	2100      	movs	r1, #0
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f001 f9a8 	bl	800b614 <xQueueReceiveFromISR>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	d001      	beq.n	800a2ce <osMutexWait+0x62>
      return osErrorOS;
 800a2ca:	23ff      	movs	r3, #255	@ 0xff
 800a2cc:	e015      	b.n	800a2fa <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d011      	beq.n	800a2f8 <osMutexWait+0x8c>
 800a2d4:	4b0b      	ldr	r3, [pc, #44]	@ (800a304 <osMutexWait+0x98>)
 800a2d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2da:	601a      	str	r2, [r3, #0]
 800a2dc:	f3bf 8f4f 	dsb	sy
 800a2e0:	f3bf 8f6f 	isb	sy
 800a2e4:	e008      	b.n	800a2f8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800a2e6:	68f9      	ldr	r1, [r7, #12]
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f001 f883 	bl	800b3f4 <xQueueSemaphoreTake>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d001      	beq.n	800a2f8 <osMutexWait+0x8c>
    return osErrorOS;
 800a2f4:	23ff      	movs	r3, #255	@ 0xff
 800a2f6:	e000      	b.n	800a2fa <osMutexWait+0x8e>
  }
  
  return osOK;
 800a2f8:	2300      	movs	r3, #0
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3710      	adds	r7, #16
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}
 800a302:	bf00      	nop
 800a304:	e000ed04 	.word	0xe000ed04

0800a308 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a310:	2300      	movs	r3, #0
 800a312:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a314:	2300      	movs	r3, #0
 800a316:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800a318:	f7ff fe9e 	bl	800a058 <inHandlerMode>
 800a31c:	4603      	mov	r3, r0
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d016      	beq.n	800a350 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a322:	f107 0308 	add.w	r3, r7, #8
 800a326:	4619      	mov	r1, r3
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f000 fef1 	bl	800b110 <xQueueGiveFromISR>
 800a32e:	4603      	mov	r3, r0
 800a330:	2b01      	cmp	r3, #1
 800a332:	d001      	beq.n	800a338 <osMutexRelease+0x30>
      return osErrorOS;
 800a334:	23ff      	movs	r3, #255	@ 0xff
 800a336:	e017      	b.n	800a368 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d013      	beq.n	800a366 <osMutexRelease+0x5e>
 800a33e:	4b0c      	ldr	r3, [pc, #48]	@ (800a370 <osMutexRelease+0x68>)
 800a340:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a344:	601a      	str	r2, [r3, #0]
 800a346:	f3bf 8f4f 	dsb	sy
 800a34a:	f3bf 8f6f 	isb	sy
 800a34e:	e00a      	b.n	800a366 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800a350:	2300      	movs	r3, #0
 800a352:	2200      	movs	r2, #0
 800a354:	2100      	movs	r1, #0
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f000 fd3a 	bl	800add0 <xQueueGenericSend>
 800a35c:	4603      	mov	r3, r0
 800a35e:	2b01      	cmp	r3, #1
 800a360:	d001      	beq.n	800a366 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800a362:	23ff      	movs	r3, #255	@ 0xff
 800a364:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800a366:	68fb      	ldr	r3, [r7, #12]
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3710      	adds	r7, #16
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}
 800a370:	e000ed04 	.word	0xe000ed04

0800a374 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800a374:	b580      	push	{r7, lr}
 800a376:	b086      	sub	sp, #24
 800a378:	af02      	add	r7, sp, #8
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d00f      	beq.n	800a3a6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	2b01      	cmp	r3, #1
 800a38a:	d10a      	bne.n	800a3a2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	2203      	movs	r2, #3
 800a392:	9200      	str	r2, [sp, #0]
 800a394:	2200      	movs	r2, #0
 800a396:	2100      	movs	r1, #0
 800a398:	2001      	movs	r0, #1
 800a39a:	f000 fbf5 	bl	800ab88 <xQueueGenericCreateStatic>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	e016      	b.n	800a3d0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	e014      	b.n	800a3d0 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	2b01      	cmp	r3, #1
 800a3aa:	d110      	bne.n	800a3ce <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800a3ac:	2203      	movs	r2, #3
 800a3ae:	2100      	movs	r1, #0
 800a3b0:	2001      	movs	r0, #1
 800a3b2:	f000 fc66 	bl	800ac82 <xQueueGenericCreate>
 800a3b6:	60f8      	str	r0, [r7, #12]
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d005      	beq.n	800a3ca <osSemaphoreCreate+0x56>
 800a3be:	2300      	movs	r3, #0
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	2100      	movs	r1, #0
 800a3c4:	68f8      	ldr	r0, [r7, #12]
 800a3c6:	f000 fd03 	bl	800add0 <xQueueGenericSend>
      return sema;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	e000      	b.n	800a3d0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800a3ce:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3710      	adds	r7, #16
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}

0800a3d8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b084      	sub	sp, #16
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d101      	bne.n	800a3f0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800a3ec:	2380      	movs	r3, #128	@ 0x80
 800a3ee:	e03a      	b.n	800a466 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3fa:	d103      	bne.n	800a404 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800a3fc:	f04f 33ff 	mov.w	r3, #4294967295
 800a400:	60fb      	str	r3, [r7, #12]
 800a402:	e009      	b.n	800a418 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d006      	beq.n	800a418 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d101      	bne.n	800a418 <osSemaphoreWait+0x40>
      ticks = 1;
 800a414:	2301      	movs	r3, #1
 800a416:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a418:	f7ff fe1e 	bl	800a058 <inHandlerMode>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d017      	beq.n	800a452 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a422:	f107 0308 	add.w	r3, r7, #8
 800a426:	461a      	mov	r2, r3
 800a428:	2100      	movs	r1, #0
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f001 f8f2 	bl	800b614 <xQueueReceiveFromISR>
 800a430:	4603      	mov	r3, r0
 800a432:	2b01      	cmp	r3, #1
 800a434:	d001      	beq.n	800a43a <osSemaphoreWait+0x62>
      return osErrorOS;
 800a436:	23ff      	movs	r3, #255	@ 0xff
 800a438:	e015      	b.n	800a466 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d011      	beq.n	800a464 <osSemaphoreWait+0x8c>
 800a440:	4b0b      	ldr	r3, [pc, #44]	@ (800a470 <osSemaphoreWait+0x98>)
 800a442:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a446:	601a      	str	r2, [r3, #0]
 800a448:	f3bf 8f4f 	dsb	sy
 800a44c:	f3bf 8f6f 	isb	sy
 800a450:	e008      	b.n	800a464 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800a452:	68f9      	ldr	r1, [r7, #12]
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f000 ffcd 	bl	800b3f4 <xQueueSemaphoreTake>
 800a45a:	4603      	mov	r3, r0
 800a45c:	2b01      	cmp	r3, #1
 800a45e:	d001      	beq.n	800a464 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800a460:	23ff      	movs	r3, #255	@ 0xff
 800a462:	e000      	b.n	800a466 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800a464:	2300      	movs	r3, #0
}
 800a466:	4618      	mov	r0, r3
 800a468:	3710      	adds	r7, #16
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}
 800a46e:	bf00      	nop
 800a470:	e000ed04 	.word	0xe000ed04

0800a474 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b084      	sub	sp, #16
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a47c:	2300      	movs	r3, #0
 800a47e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a480:	2300      	movs	r3, #0
 800a482:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800a484:	f7ff fde8 	bl	800a058 <inHandlerMode>
 800a488:	4603      	mov	r3, r0
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d016      	beq.n	800a4bc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a48e:	f107 0308 	add.w	r3, r7, #8
 800a492:	4619      	mov	r1, r3
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f000 fe3b 	bl	800b110 <xQueueGiveFromISR>
 800a49a:	4603      	mov	r3, r0
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d001      	beq.n	800a4a4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800a4a0:	23ff      	movs	r3, #255	@ 0xff
 800a4a2:	e017      	b.n	800a4d4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d013      	beq.n	800a4d2 <osSemaphoreRelease+0x5e>
 800a4aa:	4b0c      	ldr	r3, [pc, #48]	@ (800a4dc <osSemaphoreRelease+0x68>)
 800a4ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4b0:	601a      	str	r2, [r3, #0]
 800a4b2:	f3bf 8f4f 	dsb	sy
 800a4b6:	f3bf 8f6f 	isb	sy
 800a4ba:	e00a      	b.n	800a4d2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800a4bc:	2300      	movs	r3, #0
 800a4be:	2200      	movs	r2, #0
 800a4c0:	2100      	movs	r1, #0
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f000 fc84 	bl	800add0 <xQueueGenericSend>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	2b01      	cmp	r3, #1
 800a4cc:	d001      	beq.n	800a4d2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800a4ce:	23ff      	movs	r3, #255	@ 0xff
 800a4d0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3710      	adds	r7, #16
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}
 800a4dc:	e000ed04 	.word	0xe000ed04

0800a4e0 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b086      	sub	sp, #24
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	3303      	adds	r3, #3
 800a4ee:	f023 0303 	bic.w	r3, r3, #3
 800a4f2:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 800a4f4:	2014      	movs	r0, #20
 800a4f6:	f003 f931 	bl	800d75c <pvPortMalloc>
 800a4fa:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d046      	beq.n	800a590 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 800a50a:	68fa      	ldr	r2, [r7, #12]
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	2200      	movs	r2, #0
 800a514:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4618      	mov	r0, r3
 800a51c:	f003 f91e 	bl	800d75c <pvPortMalloc>
 800a520:	4602      	mov	r2, r0
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d02b      	beq.n	800a586 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	68fa      	ldr	r2, [r7, #12]
 800a534:	fb02 f303 	mul.w	r3, r2, r3
 800a538:	4618      	mov	r0, r3
 800a53a:	f003 f90f 	bl	800d75c <pvPortMalloc>
 800a53e:	4602      	mov	r2, r0
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d011      	beq.n	800a570 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 800a54c:	2300      	movs	r3, #0
 800a54e:	613b      	str	r3, [r7, #16]
 800a550:	e008      	b.n	800a564 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	685a      	ldr	r2, [r3, #4]
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	4413      	add	r3, r2
 800a55a:	2200      	movs	r2, #0
 800a55c:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	3301      	adds	r3, #1
 800a562:	613b      	str	r3, [r7, #16]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	693a      	ldr	r2, [r7, #16]
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d3f1      	bcc.n	800a552 <osPoolCreate+0x72>
 800a56e:	e00f      	b.n	800a590 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	4618      	mov	r0, r3
 800a576:	f003 f9bf 	bl	800d8f8 <vPortFree>
        vPortFree(thePool);
 800a57a:	6978      	ldr	r0, [r7, #20]
 800a57c:	f003 f9bc 	bl	800d8f8 <vPortFree>
        thePool = NULL;
 800a580:	2300      	movs	r3, #0
 800a582:	617b      	str	r3, [r7, #20]
 800a584:	e004      	b.n	800a590 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 800a586:	6978      	ldr	r0, [r7, #20]
 800a588:	f003 f9b6 	bl	800d8f8 <vPortFree>
      thePool = NULL;
 800a58c:	2300      	movs	r3, #0
 800a58e:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 800a590:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 800a592:	4618      	mov	r0, r3
 800a594:	3718      	adds	r7, #24
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}

0800a59a <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 800a59a:	b580      	push	{r7, lr}
 800a59c:	b08a      	sub	sp, #40	@ 0x28
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	627b      	str	r3, [r7, #36]	@ 0x24
  void *p = NULL;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 800a5aa:	f7ff fd55 	bl	800a058 <inHandlerMode>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d00e      	beq.n	800a5d2 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a5b4:	f3ef 8211 	mrs	r2, BASEPRI
 800a5b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5bc:	f383 8811 	msr	BASEPRI, r3
 800a5c0:	f3bf 8f6f 	isb	sy
 800a5c4:	f3bf 8f4f 	dsb	sy
 800a5c8:	617a      	str	r2, [r7, #20]
 800a5ca:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a5cc:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 800a5ce:	627b      	str	r3, [r7, #36]	@ 0x24
 800a5d0:	e001      	b.n	800a5d6 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 800a5d2:	f002 ffa1 	bl	800d518 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	61fb      	str	r3, [r7, #28]
 800a5da:	e029      	b.n	800a630 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	691a      	ldr	r2, [r3, #16]
 800a5e0:	69fb      	ldr	r3, [r7, #28]
 800a5e2:	4413      	add	r3, r2
 800a5e4:	687a      	ldr	r2, [r7, #4]
 800a5e6:	6892      	ldr	r2, [r2, #8]
 800a5e8:	fbb3 f1f2 	udiv	r1, r3, r2
 800a5ec:	fb01 f202 	mul.w	r2, r1, r2
 800a5f0:	1a9b      	subs	r3, r3, r2
 800a5f2:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	685a      	ldr	r2, [r3, #4]
 800a5f8:	69bb      	ldr	r3, [r7, #24]
 800a5fa:	4413      	add	r3, r2
 800a5fc:	781b      	ldrb	r3, [r3, #0]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d113      	bne.n	800a62a <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	685a      	ldr	r2, [r3, #4]
 800a606:	69bb      	ldr	r3, [r7, #24]
 800a608:	4413      	add	r3, r2
 800a60a:	2201      	movs	r2, #1
 800a60c:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	4619      	mov	r1, r3
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	68db      	ldr	r3, [r3, #12]
 800a618:	69ba      	ldr	r2, [r7, #24]
 800a61a:	fb02 f303 	mul.w	r3, r2, r3
 800a61e:	440b      	add	r3, r1
 800a620:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	69ba      	ldr	r2, [r7, #24]
 800a626:	611a      	str	r2, [r3, #16]
      break;
 800a628:	e007      	b.n	800a63a <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 800a62a:	69fb      	ldr	r3, [r7, #28]
 800a62c:	3301      	adds	r3, #1
 800a62e:	61fb      	str	r3, [r7, #28]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	689b      	ldr	r3, [r3, #8]
 800a634:	69fa      	ldr	r2, [r7, #28]
 800a636:	429a      	cmp	r2, r3
 800a638:	d3d0      	bcc.n	800a5dc <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 800a63a:	f7ff fd0d 	bl	800a058 <inHandlerMode>
 800a63e:	4603      	mov	r3, r0
 800a640:	2b00      	cmp	r3, #0
 800a642:	d005      	beq.n	800a650 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 800a644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a646:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a64e:	e001      	b.n	800a654 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 800a650:	f002 ff94 	bl	800d57c <vPortExitCritical>
  }
  
  return p;
 800a654:	6a3b      	ldr	r3, [r7, #32]
}
 800a656:	4618      	mov	r0, r3
 800a658:	3728      	adds	r7, #40	@ 0x28
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}

0800a65e <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 800a65e:	b480      	push	{r7}
 800a660:	b085      	sub	sp, #20
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
 800a666:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d101      	bne.n	800a672 <osPoolFree+0x14>
    return osErrorParameter;
 800a66e:	2380      	movs	r3, #128	@ 0x80
 800a670:	e030      	b.n	800a6d4 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d101      	bne.n	800a67c <osPoolFree+0x1e>
    return osErrorParameter;
 800a678:	2380      	movs	r3, #128	@ 0x80
 800a67a:	e02b      	b.n	800a6d4 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	683a      	ldr	r2, [r7, #0]
 800a682:	429a      	cmp	r2, r3
 800a684:	d201      	bcs.n	800a68a <osPoolFree+0x2c>
    return osErrorParameter;
 800a686:	2380      	movs	r3, #128	@ 0x80
 800a688:	e024      	b.n	800a6d4 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	687a      	ldr	r2, [r7, #4]
 800a68e:	6812      	ldr	r2, [r2, #0]
 800a690:	1a9b      	subs	r3, r3, r2
 800a692:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	68da      	ldr	r2, [r3, #12]
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a69e:	fb01 f202 	mul.w	r2, r1, r2
 800a6a2:	1a9b      	subs	r3, r3, r2
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d001      	beq.n	800a6ac <osPoolFree+0x4e>
    return osErrorParameter;
 800a6a8:	2380      	movs	r3, #128	@ 0x80
 800a6aa:	e013      	b.n	800a6d4 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	68db      	ldr	r3, [r3, #12]
 800a6b0:	68fa      	ldr	r2, [r7, #12]
 800a6b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6b6:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	689b      	ldr	r3, [r3, #8]
 800a6bc:	68fa      	ldr	r2, [r7, #12]
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d301      	bcc.n	800a6c6 <osPoolFree+0x68>
    return osErrorParameter;
 800a6c2:	2380      	movs	r3, #128	@ 0x80
 800a6c4:	e006      	b.n	800a6d4 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	685a      	ldr	r2, [r3, #4]
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	4413      	add	r3, r2
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 800a6d2:	2300      	movs	r3, #0
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3714      	adds	r7, #20
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr

0800a6e0 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 800a6e0:	b590      	push	{r4, r7, lr}
 800a6e2:	b087      	sub	sp, #28
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
 800a6e8:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	60fb      	str	r3, [r7, #12]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	613b      	str	r3, [r7, #16]
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	689c      	ldr	r4, [r3, #8]
 800a6fe:	200c      	movs	r0, #12
 800a700:	f003 f82c 	bl	800d75c <pvPortMalloc>
 800a704:	4603      	mov	r3, r0
 800a706:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	689b      	ldr	r3, [r3, #8]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d101      	bne.n	800a716 <osMailCreate+0x36>
    return NULL;
 800a712:	2300      	movs	r3, #0
 800a714:	e038      	b.n	800a788 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	689b      	ldr	r3, [r3, #8]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	687a      	ldr	r2, [r7, #4]
 800a71e:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6818      	ldr	r0, [r3, #0]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	689b      	ldr	r3, [r3, #8]
 800a728:	681c      	ldr	r4, [r3, #0]
 800a72a:	2200      	movs	r2, #0
 800a72c:	2104      	movs	r1, #4
 800a72e:	f000 faa8 	bl	800ac82 <xQueueGenericCreate>
 800a732:	4603      	mov	r3, r0
 800a734:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	689b      	ldr	r3, [r3, #8]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d107      	bne.n	800a752 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	689b      	ldr	r3, [r3, #8]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4618      	mov	r0, r3
 800a74a:	f003 f8d5 	bl	800d8f8 <vPortFree>
    return NULL;
 800a74e:	2300      	movs	r3, #0
 800a750:	e01a      	b.n	800a788 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	689b      	ldr	r3, [r3, #8]
 800a756:	681c      	ldr	r4, [r3, #0]
 800a758:	f107 030c 	add.w	r3, r7, #12
 800a75c:	4618      	mov	r0, r3
 800a75e:	f7ff febf 	bl	800a4e0 <osPoolCreate>
 800a762:	4603      	mov	r3, r0
 800a764:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	689b      	ldr	r3, [r3, #8]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	689b      	ldr	r3, [r3, #8]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d107      	bne.n	800a782 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	689b      	ldr	r3, [r3, #8]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4618      	mov	r0, r3
 800a77a:	f003 f8bd 	bl	800d8f8 <vPortFree>
    return NULL;
 800a77e:	2300      	movs	r3, #0
 800a780:	e002      	b.n	800a788 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	689b      	ldr	r3, [r3, #8]
 800a786:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 800a788:	4618      	mov	r0, r3
 800a78a:	371c      	adds	r7, #28
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd90      	pop	{r4, r7, pc}

0800a790 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b084      	sub	sp, #16
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d101      	bne.n	800a7a4 <osMailAlloc+0x14>
    return NULL;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	e006      	b.n	800a7b2 <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	689b      	ldr	r3, [r3, #8]
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f7ff fef6 	bl	800a59a <osPoolAlloc>
 800a7ae:	60f8      	str	r0, [r7, #12]
  
  return p;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3710      	adds	r7, #16
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
	...

0800a7bc <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b084      	sub	sp, #16
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
 800a7c4:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d101      	bne.n	800a7d0 <osMailPut+0x14>
    return osErrorParameter;
 800a7cc:	2380      	movs	r3, #128	@ 0x80
 800a7ce:	e02c      	b.n	800a82a <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 800a7d4:	f7ff fc40 	bl	800a058 <inHandlerMode>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d018      	beq.n	800a810 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6858      	ldr	r0, [r3, #4]
 800a7e2:	f107 020c 	add.w	r2, r7, #12
 800a7e6:	4639      	mov	r1, r7
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	f000 fbf3 	bl	800afd4 <xQueueGenericSendFromISR>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	2b01      	cmp	r3, #1
 800a7f2:	d001      	beq.n	800a7f8 <osMailPut+0x3c>
      return osErrorOS;
 800a7f4:	23ff      	movs	r3, #255	@ 0xff
 800a7f6:	e018      	b.n	800a82a <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d014      	beq.n	800a828 <osMailPut+0x6c>
 800a7fe:	4b0d      	ldr	r3, [pc, #52]	@ (800a834 <osMailPut+0x78>)
 800a800:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a804:	601a      	str	r2, [r3, #0]
 800a806:	f3bf 8f4f 	dsb	sy
 800a80a:	f3bf 8f6f 	isb	sy
 800a80e:	e00b      	b.n	800a828 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6858      	ldr	r0, [r3, #4]
 800a814:	4639      	mov	r1, r7
 800a816:	2300      	movs	r3, #0
 800a818:	2200      	movs	r2, #0
 800a81a:	f000 fad9 	bl	800add0 <xQueueGenericSend>
 800a81e:	4603      	mov	r3, r0
 800a820:	2b01      	cmp	r3, #1
 800a822:	d001      	beq.n	800a828 <osMailPut+0x6c>
      return osErrorOS;
 800a824:	23ff      	movs	r3, #255	@ 0xff
 800a826:	e000      	b.n	800a82a <osMailPut+0x6e>
    }
  }
  
  return osOK;
 800a828:	2300      	movs	r3, #0
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3710      	adds	r7, #16
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
 800a832:	bf00      	nop
 800a834:	e000ed04 	.word	0xe000ed04

0800a838 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 800a838:	b590      	push	{r4, r7, lr}
 800a83a:	b08b      	sub	sp, #44	@ 0x2c
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	60b9      	str	r1, [r7, #8]
 800a842:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d10a      	bne.n	800a864 <osMailGet+0x2c>
    event.status = osErrorParameter;
 800a84e:	2380      	movs	r3, #128	@ 0x80
 800a850:	617b      	str	r3, [r7, #20]
    return event;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	461c      	mov	r4, r3
 800a856:	f107 0314 	add.w	r3, r7, #20
 800a85a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a85e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a862:	e056      	b.n	800a912 <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800a864:	2300      	movs	r3, #0
 800a866:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a868:	2300      	movs	r3, #0
 800a86a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a872:	d103      	bne.n	800a87c <osMailGet+0x44>
    ticks = portMAX_DELAY;
 800a874:	f04f 33ff 	mov.w	r3, #4294967295
 800a878:	627b      	str	r3, [r7, #36]	@ 0x24
 800a87a:	e009      	b.n	800a890 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d006      	beq.n	800a890 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800a886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d101      	bne.n	800a890 <osMailGet+0x58>
      ticks = 1;
 800a88c:	2301      	movs	r3, #1
 800a88e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a890:	f7ff fbe2 	bl	800a058 <inHandlerMode>
 800a894:	4603      	mov	r3, r0
 800a896:	2b00      	cmp	r3, #0
 800a898:	d01d      	beq.n	800a8d6 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	6858      	ldr	r0, [r3, #4]
 800a89e:	f107 0220 	add.w	r2, r7, #32
 800a8a2:	f107 0314 	add.w	r3, r7, #20
 800a8a6:	3304      	adds	r3, #4
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	f000 feb3 	bl	800b614 <xQueueReceiveFromISR>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d102      	bne.n	800a8ba <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 800a8b4:	2320      	movs	r3, #32
 800a8b6:	617b      	str	r3, [r7, #20]
 800a8b8:	e001      	b.n	800a8be <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a8be:	6a3b      	ldr	r3, [r7, #32]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d01e      	beq.n	800a902 <osMailGet+0xca>
 800a8c4:	4b15      	ldr	r3, [pc, #84]	@ (800a91c <osMailGet+0xe4>)
 800a8c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8ca:	601a      	str	r2, [r3, #0]
 800a8cc:	f3bf 8f4f 	dsb	sy
 800a8d0:	f3bf 8f6f 	isb	sy
 800a8d4:	e015      	b.n	800a902 <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	6858      	ldr	r0, [r3, #4]
 800a8da:	f107 0314 	add.w	r3, r7, #20
 800a8de:	3304      	adds	r3, #4
 800a8e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	f000 fca4 	bl	800b230 <xQueueReceive>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	2b01      	cmp	r3, #1
 800a8ec:	d102      	bne.n	800a8f4 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 800a8ee:	2320      	movs	r3, #32
 800a8f0:	617b      	str	r3, [r7, #20]
 800a8f2:	e006      	b.n	800a902 <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a8f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d101      	bne.n	800a8fe <osMailGet+0xc6>
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	e000      	b.n	800a900 <osMailGet+0xc8>
 800a8fe:	2340      	movs	r3, #64	@ 0x40
 800a900:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	461c      	mov	r4, r3
 800a906:	f107 0314 	add.w	r3, r7, #20
 800a90a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a90e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a912:	68f8      	ldr	r0, [r7, #12]
 800a914:	372c      	adds	r7, #44	@ 0x2c
 800a916:	46bd      	mov	sp, r7
 800a918:	bd90      	pop	{r4, r7, pc}
 800a91a:	bf00      	nop
 800a91c:	e000ed04 	.word	0xe000ed04

0800a920 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b082      	sub	sp, #8
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d101      	bne.n	800a934 <osMailFree+0x14>
    return osErrorParameter;
 800a930:	2380      	movs	r3, #128	@ 0x80
 800a932:	e006      	b.n	800a942 <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	689b      	ldr	r3, [r3, #8]
 800a938:	6839      	ldr	r1, [r7, #0]
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7ff fe8f 	bl	800a65e <osPoolFree>
 800a940:	4603      	mov	r3, r0
}
 800a942:	4618      	mov	r0, r3
 800a944:	3708      	adds	r7, #8
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}

0800a94a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a94a:	b480      	push	{r7}
 800a94c:	b083      	sub	sp, #12
 800a94e:	af00      	add	r7, sp, #0
 800a950:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f103 0208 	add.w	r2, r3, #8
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f04f 32ff 	mov.w	r2, #4294967295
 800a962:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f103 0208 	add.w	r2, r3, #8
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f103 0208 	add.w	r2, r3, #8
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2200      	movs	r2, #0
 800a97c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a97e:	bf00      	nop
 800a980:	370c      	adds	r7, #12
 800a982:	46bd      	mov	sp, r7
 800a984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a988:	4770      	bx	lr

0800a98a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a98a:	b480      	push	{r7}
 800a98c:	b083      	sub	sp, #12
 800a98e:	af00      	add	r7, sp, #0
 800a990:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2200      	movs	r2, #0
 800a996:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a998:	bf00      	nop
 800a99a:	370c      	adds	r7, #12
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr

0800a9a4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b085      	sub	sp, #20
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	68fa      	ldr	r2, [r7, #12]
 800a9b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	689a      	ldr	r2, [r3, #8]
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	689b      	ldr	r3, [r3, #8]
 800a9c6:	683a      	ldr	r2, [r7, #0]
 800a9c8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	683a      	ldr	r2, [r7, #0]
 800a9ce:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	687a      	ldr	r2, [r7, #4]
 800a9d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	1c5a      	adds	r2, r3, #1
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	601a      	str	r2, [r3, #0]
}
 800a9e0:	bf00      	nop
 800a9e2:	3714      	adds	r7, #20
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr

0800a9ec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b085      	sub	sp, #20
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa02:	d103      	bne.n	800aa0c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	691b      	ldr	r3, [r3, #16]
 800aa08:	60fb      	str	r3, [r7, #12]
 800aa0a:	e00c      	b.n	800aa26 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	3308      	adds	r3, #8
 800aa10:	60fb      	str	r3, [r7, #12]
 800aa12:	e002      	b.n	800aa1a <vListInsert+0x2e>
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	60fb      	str	r3, [r7, #12]
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	68ba      	ldr	r2, [r7, #8]
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d2f6      	bcs.n	800aa14 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	685a      	ldr	r2, [r3, #4]
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	683a      	ldr	r2, [r7, #0]
 800aa34:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	68fa      	ldr	r2, [r7, #12]
 800aa3a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	683a      	ldr	r2, [r7, #0]
 800aa40:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	687a      	ldr	r2, [r7, #4]
 800aa46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	1c5a      	adds	r2, r3, #1
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	601a      	str	r2, [r3, #0]
}
 800aa52:	bf00      	nop
 800aa54:	3714      	adds	r7, #20
 800aa56:	46bd      	mov	sp, r7
 800aa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5c:	4770      	bx	lr

0800aa5e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aa5e:	b480      	push	{r7}
 800aa60:	b085      	sub	sp, #20
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	691b      	ldr	r3, [r3, #16]
 800aa6a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	685b      	ldr	r3, [r3, #4]
 800aa70:	687a      	ldr	r2, [r7, #4]
 800aa72:	6892      	ldr	r2, [r2, #8]
 800aa74:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	689b      	ldr	r3, [r3, #8]
 800aa7a:	687a      	ldr	r2, [r7, #4]
 800aa7c:	6852      	ldr	r2, [r2, #4]
 800aa7e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	687a      	ldr	r2, [r7, #4]
 800aa86:	429a      	cmp	r2, r3
 800aa88:	d103      	bne.n	800aa92 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	689a      	ldr	r2, [r3, #8]
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2200      	movs	r2, #0
 800aa96:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	1e5a      	subs	r2, r3, #1
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	681b      	ldr	r3, [r3, #0]
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3714      	adds	r7, #20
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab0:	4770      	bx	lr
	...

0800aab4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b084      	sub	sp, #16
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d10b      	bne.n	800aae0 <xQueueGenericReset+0x2c>
	__asm volatile
 800aac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aacc:	f383 8811 	msr	BASEPRI, r3
 800aad0:	f3bf 8f6f 	isb	sy
 800aad4:	f3bf 8f4f 	dsb	sy
 800aad8:	60bb      	str	r3, [r7, #8]
}
 800aada:	bf00      	nop
 800aadc:	bf00      	nop
 800aade:	e7fd      	b.n	800aadc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800aae0:	f002 fd1a 	bl	800d518 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681a      	ldr	r2, [r3, #0]
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aaec:	68f9      	ldr	r1, [r7, #12]
 800aaee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800aaf0:	fb01 f303 	mul.w	r3, r1, r3
 800aaf4:	441a      	add	r2, r3
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	2200      	movs	r2, #0
 800aafe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681a      	ldr	r2, [r3, #0]
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681a      	ldr	r2, [r3, #0]
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab10:	3b01      	subs	r3, #1
 800ab12:	68f9      	ldr	r1, [r7, #12]
 800ab14:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ab16:	fb01 f303 	mul.w	r3, r1, r3
 800ab1a:	441a      	add	r2, r3
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	22ff      	movs	r2, #255	@ 0xff
 800ab24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	22ff      	movs	r2, #255	@ 0xff
 800ab2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d114      	bne.n	800ab60 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	691b      	ldr	r3, [r3, #16]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d01a      	beq.n	800ab74 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	3310      	adds	r3, #16
 800ab42:	4618      	mov	r0, r3
 800ab44:	f001 fbf0 	bl	800c328 <xTaskRemoveFromEventList>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d012      	beq.n	800ab74 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ab4e:	4b0d      	ldr	r3, [pc, #52]	@ (800ab84 <xQueueGenericReset+0xd0>)
 800ab50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab54:	601a      	str	r2, [r3, #0]
 800ab56:	f3bf 8f4f 	dsb	sy
 800ab5a:	f3bf 8f6f 	isb	sy
 800ab5e:	e009      	b.n	800ab74 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	3310      	adds	r3, #16
 800ab64:	4618      	mov	r0, r3
 800ab66:	f7ff fef0 	bl	800a94a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	3324      	adds	r3, #36	@ 0x24
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f7ff feeb 	bl	800a94a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ab74:	f002 fd02 	bl	800d57c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ab78:	2301      	movs	r3, #1
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3710      	adds	r7, #16
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop
 800ab84:	e000ed04 	.word	0xe000ed04

0800ab88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b08e      	sub	sp, #56	@ 0x38
 800ab8c:	af02      	add	r7, sp, #8
 800ab8e:	60f8      	str	r0, [r7, #12]
 800ab90:	60b9      	str	r1, [r7, #8]
 800ab92:	607a      	str	r2, [r7, #4]
 800ab94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d10b      	bne.n	800abb4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800ab9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aba0:	f383 8811 	msr	BASEPRI, r3
 800aba4:	f3bf 8f6f 	isb	sy
 800aba8:	f3bf 8f4f 	dsb	sy
 800abac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800abae:	bf00      	nop
 800abb0:	bf00      	nop
 800abb2:	e7fd      	b.n	800abb0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d10b      	bne.n	800abd2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800abba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abbe:	f383 8811 	msr	BASEPRI, r3
 800abc2:	f3bf 8f6f 	isb	sy
 800abc6:	f3bf 8f4f 	dsb	sy
 800abca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800abcc:	bf00      	nop
 800abce:	bf00      	nop
 800abd0:	e7fd      	b.n	800abce <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d002      	beq.n	800abde <xQueueGenericCreateStatic+0x56>
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d001      	beq.n	800abe2 <xQueueGenericCreateStatic+0x5a>
 800abde:	2301      	movs	r3, #1
 800abe0:	e000      	b.n	800abe4 <xQueueGenericCreateStatic+0x5c>
 800abe2:	2300      	movs	r3, #0
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d10b      	bne.n	800ac00 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800abe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abec:	f383 8811 	msr	BASEPRI, r3
 800abf0:	f3bf 8f6f 	isb	sy
 800abf4:	f3bf 8f4f 	dsb	sy
 800abf8:	623b      	str	r3, [r7, #32]
}
 800abfa:	bf00      	nop
 800abfc:	bf00      	nop
 800abfe:	e7fd      	b.n	800abfc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d102      	bne.n	800ac0c <xQueueGenericCreateStatic+0x84>
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d101      	bne.n	800ac10 <xQueueGenericCreateStatic+0x88>
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	e000      	b.n	800ac12 <xQueueGenericCreateStatic+0x8a>
 800ac10:	2300      	movs	r3, #0
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d10b      	bne.n	800ac2e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800ac16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac1a:	f383 8811 	msr	BASEPRI, r3
 800ac1e:	f3bf 8f6f 	isb	sy
 800ac22:	f3bf 8f4f 	dsb	sy
 800ac26:	61fb      	str	r3, [r7, #28]
}
 800ac28:	bf00      	nop
 800ac2a:	bf00      	nop
 800ac2c:	e7fd      	b.n	800ac2a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ac2e:	2348      	movs	r3, #72	@ 0x48
 800ac30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	2b48      	cmp	r3, #72	@ 0x48
 800ac36:	d00b      	beq.n	800ac50 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800ac38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac3c:	f383 8811 	msr	BASEPRI, r3
 800ac40:	f3bf 8f6f 	isb	sy
 800ac44:	f3bf 8f4f 	dsb	sy
 800ac48:	61bb      	str	r3, [r7, #24]
}
 800ac4a:	bf00      	nop
 800ac4c:	bf00      	nop
 800ac4e:	e7fd      	b.n	800ac4c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ac50:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800ac56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d00d      	beq.n	800ac78 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ac5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac5e:	2201      	movs	r2, #1
 800ac60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ac64:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ac68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac6a:	9300      	str	r3, [sp, #0]
 800ac6c:	4613      	mov	r3, r2
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	68b9      	ldr	r1, [r7, #8]
 800ac72:	68f8      	ldr	r0, [r7, #12]
 800ac74:	f000 f840 	bl	800acf8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ac78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3730      	adds	r7, #48	@ 0x30
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}

0800ac82 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ac82:	b580      	push	{r7, lr}
 800ac84:	b08a      	sub	sp, #40	@ 0x28
 800ac86:	af02      	add	r7, sp, #8
 800ac88:	60f8      	str	r0, [r7, #12]
 800ac8a:	60b9      	str	r1, [r7, #8]
 800ac8c:	4613      	mov	r3, r2
 800ac8e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d10b      	bne.n	800acae <xQueueGenericCreate+0x2c>
	__asm volatile
 800ac96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac9a:	f383 8811 	msr	BASEPRI, r3
 800ac9e:	f3bf 8f6f 	isb	sy
 800aca2:	f3bf 8f4f 	dsb	sy
 800aca6:	613b      	str	r3, [r7, #16]
}
 800aca8:	bf00      	nop
 800acaa:	bf00      	nop
 800acac:	e7fd      	b.n	800acaa <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	68ba      	ldr	r2, [r7, #8]
 800acb2:	fb02 f303 	mul.w	r3, r2, r3
 800acb6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800acb8:	69fb      	ldr	r3, [r7, #28]
 800acba:	3348      	adds	r3, #72	@ 0x48
 800acbc:	4618      	mov	r0, r3
 800acbe:	f002 fd4d 	bl	800d75c <pvPortMalloc>
 800acc2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800acc4:	69bb      	ldr	r3, [r7, #24]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d011      	beq.n	800acee <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800acca:	69bb      	ldr	r3, [r7, #24]
 800accc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	3348      	adds	r3, #72	@ 0x48
 800acd2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800acd4:	69bb      	ldr	r3, [r7, #24]
 800acd6:	2200      	movs	r2, #0
 800acd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800acdc:	79fa      	ldrb	r2, [r7, #7]
 800acde:	69bb      	ldr	r3, [r7, #24]
 800ace0:	9300      	str	r3, [sp, #0]
 800ace2:	4613      	mov	r3, r2
 800ace4:	697a      	ldr	r2, [r7, #20]
 800ace6:	68b9      	ldr	r1, [r7, #8]
 800ace8:	68f8      	ldr	r0, [r7, #12]
 800acea:	f000 f805 	bl	800acf8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800acee:	69bb      	ldr	r3, [r7, #24]
	}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3720      	adds	r7, #32
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b084      	sub	sp, #16
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	60f8      	str	r0, [r7, #12]
 800ad00:	60b9      	str	r1, [r7, #8]
 800ad02:	607a      	str	r2, [r7, #4]
 800ad04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d103      	bne.n	800ad14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ad0c:	69bb      	ldr	r3, [r7, #24]
 800ad0e:	69ba      	ldr	r2, [r7, #24]
 800ad10:	601a      	str	r2, [r3, #0]
 800ad12:	e002      	b.n	800ad1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ad14:	69bb      	ldr	r3, [r7, #24]
 800ad16:	687a      	ldr	r2, [r7, #4]
 800ad18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ad1a:	69bb      	ldr	r3, [r7, #24]
 800ad1c:	68fa      	ldr	r2, [r7, #12]
 800ad1e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ad20:	69bb      	ldr	r3, [r7, #24]
 800ad22:	68ba      	ldr	r2, [r7, #8]
 800ad24:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ad26:	2101      	movs	r1, #1
 800ad28:	69b8      	ldr	r0, [r7, #24]
 800ad2a:	f7ff fec3 	bl	800aab4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ad2e:	bf00      	nop
 800ad30:	3710      	adds	r7, #16
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}

0800ad36 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ad36:	b580      	push	{r7, lr}
 800ad38:	b082      	sub	sp, #8
 800ad3a:	af00      	add	r7, sp, #0
 800ad3c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d00e      	beq.n	800ad62 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2200      	movs	r2, #0
 800ad48:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2200      	movs	r2, #0
 800ad54:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ad56:	2300      	movs	r3, #0
 800ad58:	2200      	movs	r2, #0
 800ad5a:	2100      	movs	r1, #0
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f000 f837 	bl	800add0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ad62:	bf00      	nop
 800ad64:	3708      	adds	r7, #8
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}

0800ad6a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ad6a:	b580      	push	{r7, lr}
 800ad6c:	b086      	sub	sp, #24
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	4603      	mov	r3, r0
 800ad72:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ad74:	2301      	movs	r3, #1
 800ad76:	617b      	str	r3, [r7, #20]
 800ad78:	2300      	movs	r3, #0
 800ad7a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ad7c:	79fb      	ldrb	r3, [r7, #7]
 800ad7e:	461a      	mov	r2, r3
 800ad80:	6939      	ldr	r1, [r7, #16]
 800ad82:	6978      	ldr	r0, [r7, #20]
 800ad84:	f7ff ff7d 	bl	800ac82 <xQueueGenericCreate>
 800ad88:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ad8a:	68f8      	ldr	r0, [r7, #12]
 800ad8c:	f7ff ffd3 	bl	800ad36 <prvInitialiseMutex>

		return xNewQueue;
 800ad90:	68fb      	ldr	r3, [r7, #12]
	}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3718      	adds	r7, #24
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}

0800ad9a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ad9a:	b580      	push	{r7, lr}
 800ad9c:	b088      	sub	sp, #32
 800ad9e:	af02      	add	r7, sp, #8
 800ada0:	4603      	mov	r3, r0
 800ada2:	6039      	str	r1, [r7, #0]
 800ada4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ada6:	2301      	movs	r3, #1
 800ada8:	617b      	str	r3, [r7, #20]
 800adaa:	2300      	movs	r3, #0
 800adac:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800adae:	79fb      	ldrb	r3, [r7, #7]
 800adb0:	9300      	str	r3, [sp, #0]
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	2200      	movs	r2, #0
 800adb6:	6939      	ldr	r1, [r7, #16]
 800adb8:	6978      	ldr	r0, [r7, #20]
 800adba:	f7ff fee5 	bl	800ab88 <xQueueGenericCreateStatic>
 800adbe:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800adc0:	68f8      	ldr	r0, [r7, #12]
 800adc2:	f7ff ffb8 	bl	800ad36 <prvInitialiseMutex>

		return xNewQueue;
 800adc6:	68fb      	ldr	r3, [r7, #12]
	}
 800adc8:	4618      	mov	r0, r3
 800adca:	3718      	adds	r7, #24
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b08e      	sub	sp, #56	@ 0x38
 800add4:	af00      	add	r7, sp, #0
 800add6:	60f8      	str	r0, [r7, #12]
 800add8:	60b9      	str	r1, [r7, #8]
 800adda:	607a      	str	r2, [r7, #4]
 800addc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800adde:	2300      	movs	r3, #0
 800ade0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ade6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d10b      	bne.n	800ae04 <xQueueGenericSend+0x34>
	__asm volatile
 800adec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adf0:	f383 8811 	msr	BASEPRI, r3
 800adf4:	f3bf 8f6f 	isb	sy
 800adf8:	f3bf 8f4f 	dsb	sy
 800adfc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800adfe:	bf00      	nop
 800ae00:	bf00      	nop
 800ae02:	e7fd      	b.n	800ae00 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d103      	bne.n	800ae12 <xQueueGenericSend+0x42>
 800ae0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d101      	bne.n	800ae16 <xQueueGenericSend+0x46>
 800ae12:	2301      	movs	r3, #1
 800ae14:	e000      	b.n	800ae18 <xQueueGenericSend+0x48>
 800ae16:	2300      	movs	r3, #0
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d10b      	bne.n	800ae34 <xQueueGenericSend+0x64>
	__asm volatile
 800ae1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae20:	f383 8811 	msr	BASEPRI, r3
 800ae24:	f3bf 8f6f 	isb	sy
 800ae28:	f3bf 8f4f 	dsb	sy
 800ae2c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ae2e:	bf00      	nop
 800ae30:	bf00      	nop
 800ae32:	e7fd      	b.n	800ae30 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	2b02      	cmp	r3, #2
 800ae38:	d103      	bne.n	800ae42 <xQueueGenericSend+0x72>
 800ae3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae3e:	2b01      	cmp	r3, #1
 800ae40:	d101      	bne.n	800ae46 <xQueueGenericSend+0x76>
 800ae42:	2301      	movs	r3, #1
 800ae44:	e000      	b.n	800ae48 <xQueueGenericSend+0x78>
 800ae46:	2300      	movs	r3, #0
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d10b      	bne.n	800ae64 <xQueueGenericSend+0x94>
	__asm volatile
 800ae4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae50:	f383 8811 	msr	BASEPRI, r3
 800ae54:	f3bf 8f6f 	isb	sy
 800ae58:	f3bf 8f4f 	dsb	sy
 800ae5c:	623b      	str	r3, [r7, #32]
}
 800ae5e:	bf00      	nop
 800ae60:	bf00      	nop
 800ae62:	e7fd      	b.n	800ae60 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ae64:	f001 fc26 	bl	800c6b4 <xTaskGetSchedulerState>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d102      	bne.n	800ae74 <xQueueGenericSend+0xa4>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d101      	bne.n	800ae78 <xQueueGenericSend+0xa8>
 800ae74:	2301      	movs	r3, #1
 800ae76:	e000      	b.n	800ae7a <xQueueGenericSend+0xaa>
 800ae78:	2300      	movs	r3, #0
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d10b      	bne.n	800ae96 <xQueueGenericSend+0xc6>
	__asm volatile
 800ae7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae82:	f383 8811 	msr	BASEPRI, r3
 800ae86:	f3bf 8f6f 	isb	sy
 800ae8a:	f3bf 8f4f 	dsb	sy
 800ae8e:	61fb      	str	r3, [r7, #28]
}
 800ae90:	bf00      	nop
 800ae92:	bf00      	nop
 800ae94:	e7fd      	b.n	800ae92 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae96:	f002 fb3f 	bl	800d518 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ae9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ae9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d302      	bcc.n	800aeac <xQueueGenericSend+0xdc>
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	2b02      	cmp	r3, #2
 800aeaa:	d129      	bne.n	800af00 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aeac:	683a      	ldr	r2, [r7, #0]
 800aeae:	68b9      	ldr	r1, [r7, #8]
 800aeb0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aeb2:	f000 fc49 	bl	800b748 <prvCopyDataToQueue>
 800aeb6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aeb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d010      	beq.n	800aee2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aec2:	3324      	adds	r3, #36	@ 0x24
 800aec4:	4618      	mov	r0, r3
 800aec6:	f001 fa2f 	bl	800c328 <xTaskRemoveFromEventList>
 800aeca:	4603      	mov	r3, r0
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d013      	beq.n	800aef8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800aed0:	4b3f      	ldr	r3, [pc, #252]	@ (800afd0 <xQueueGenericSend+0x200>)
 800aed2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aed6:	601a      	str	r2, [r3, #0]
 800aed8:	f3bf 8f4f 	dsb	sy
 800aedc:	f3bf 8f6f 	isb	sy
 800aee0:	e00a      	b.n	800aef8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800aee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d007      	beq.n	800aef8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800aee8:	4b39      	ldr	r3, [pc, #228]	@ (800afd0 <xQueueGenericSend+0x200>)
 800aeea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aeee:	601a      	str	r2, [r3, #0]
 800aef0:	f3bf 8f4f 	dsb	sy
 800aef4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800aef8:	f002 fb40 	bl	800d57c <vPortExitCritical>
				return pdPASS;
 800aefc:	2301      	movs	r3, #1
 800aefe:	e063      	b.n	800afc8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d103      	bne.n	800af0e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800af06:	f002 fb39 	bl	800d57c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800af0a:	2300      	movs	r3, #0
 800af0c:	e05c      	b.n	800afc8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800af0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af10:	2b00      	cmp	r3, #0
 800af12:	d106      	bne.n	800af22 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800af14:	f107 0314 	add.w	r3, r7, #20
 800af18:	4618      	mov	r0, r3
 800af1a:	f001 fa69 	bl	800c3f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800af1e:	2301      	movs	r3, #1
 800af20:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800af22:	f002 fb2b 	bl	800d57c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800af26:	f000 ffd3 	bl	800bed0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800af2a:	f002 faf5 	bl	800d518 <vPortEnterCritical>
 800af2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800af34:	b25b      	sxtb	r3, r3
 800af36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af3a:	d103      	bne.n	800af44 <xQueueGenericSend+0x174>
 800af3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af3e:	2200      	movs	r2, #0
 800af40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800af44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af46:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800af4a:	b25b      	sxtb	r3, r3
 800af4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af50:	d103      	bne.n	800af5a <xQueueGenericSend+0x18a>
 800af52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af54:	2200      	movs	r2, #0
 800af56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800af5a:	f002 fb0f 	bl	800d57c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800af5e:	1d3a      	adds	r2, r7, #4
 800af60:	f107 0314 	add.w	r3, r7, #20
 800af64:	4611      	mov	r1, r2
 800af66:	4618      	mov	r0, r3
 800af68:	f001 fa58 	bl	800c41c <xTaskCheckForTimeOut>
 800af6c:	4603      	mov	r3, r0
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d124      	bne.n	800afbc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800af72:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800af74:	f000 fce0 	bl	800b938 <prvIsQueueFull>
 800af78:	4603      	mov	r3, r0
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d018      	beq.n	800afb0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800af7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af80:	3310      	adds	r3, #16
 800af82:	687a      	ldr	r2, [r7, #4]
 800af84:	4611      	mov	r1, r2
 800af86:	4618      	mov	r0, r3
 800af88:	f001 f97c 	bl	800c284 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800af8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800af8e:	f000 fc6b 	bl	800b868 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800af92:	f000 ffab 	bl	800beec <xTaskResumeAll>
 800af96:	4603      	mov	r3, r0
 800af98:	2b00      	cmp	r3, #0
 800af9a:	f47f af7c 	bne.w	800ae96 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800af9e:	4b0c      	ldr	r3, [pc, #48]	@ (800afd0 <xQueueGenericSend+0x200>)
 800afa0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800afa4:	601a      	str	r2, [r3, #0]
 800afa6:	f3bf 8f4f 	dsb	sy
 800afaa:	f3bf 8f6f 	isb	sy
 800afae:	e772      	b.n	800ae96 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800afb0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800afb2:	f000 fc59 	bl	800b868 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800afb6:	f000 ff99 	bl	800beec <xTaskResumeAll>
 800afba:	e76c      	b.n	800ae96 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800afbc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800afbe:	f000 fc53 	bl	800b868 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800afc2:	f000 ff93 	bl	800beec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800afc6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3738      	adds	r7, #56	@ 0x38
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}
 800afd0:	e000ed04 	.word	0xe000ed04

0800afd4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b090      	sub	sp, #64	@ 0x40
 800afd8:	af00      	add	r7, sp, #0
 800afda:	60f8      	str	r0, [r7, #12]
 800afdc:	60b9      	str	r1, [r7, #8]
 800afde:	607a      	str	r2, [r7, #4]
 800afe0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800afe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d10b      	bne.n	800b004 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800afec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aff0:	f383 8811 	msr	BASEPRI, r3
 800aff4:	f3bf 8f6f 	isb	sy
 800aff8:	f3bf 8f4f 	dsb	sy
 800affc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800affe:	bf00      	nop
 800b000:	bf00      	nop
 800b002:	e7fd      	b.n	800b000 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d103      	bne.n	800b012 <xQueueGenericSendFromISR+0x3e>
 800b00a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b00c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d101      	bne.n	800b016 <xQueueGenericSendFromISR+0x42>
 800b012:	2301      	movs	r3, #1
 800b014:	e000      	b.n	800b018 <xQueueGenericSendFromISR+0x44>
 800b016:	2300      	movs	r3, #0
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d10b      	bne.n	800b034 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b01c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b020:	f383 8811 	msr	BASEPRI, r3
 800b024:	f3bf 8f6f 	isb	sy
 800b028:	f3bf 8f4f 	dsb	sy
 800b02c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b02e:	bf00      	nop
 800b030:	bf00      	nop
 800b032:	e7fd      	b.n	800b030 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	2b02      	cmp	r3, #2
 800b038:	d103      	bne.n	800b042 <xQueueGenericSendFromISR+0x6e>
 800b03a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b03c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b03e:	2b01      	cmp	r3, #1
 800b040:	d101      	bne.n	800b046 <xQueueGenericSendFromISR+0x72>
 800b042:	2301      	movs	r3, #1
 800b044:	e000      	b.n	800b048 <xQueueGenericSendFromISR+0x74>
 800b046:	2300      	movs	r3, #0
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d10b      	bne.n	800b064 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b04c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b050:	f383 8811 	msr	BASEPRI, r3
 800b054:	f3bf 8f6f 	isb	sy
 800b058:	f3bf 8f4f 	dsb	sy
 800b05c:	623b      	str	r3, [r7, #32]
}
 800b05e:	bf00      	nop
 800b060:	bf00      	nop
 800b062:	e7fd      	b.n	800b060 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b064:	f002 fb38 	bl	800d6d8 <vPortValidateInterruptPriority>
	__asm volatile
 800b068:	f3ef 8211 	mrs	r2, BASEPRI
 800b06c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b070:	f383 8811 	msr	BASEPRI, r3
 800b074:	f3bf 8f6f 	isb	sy
 800b078:	f3bf 8f4f 	dsb	sy
 800b07c:	61fa      	str	r2, [r7, #28]
 800b07e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800b080:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b082:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b086:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b08a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d302      	bcc.n	800b096 <xQueueGenericSendFromISR+0xc2>
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	2b02      	cmp	r3, #2
 800b094:	d12f      	bne.n	800b0f6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b098:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b09c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b0a6:	683a      	ldr	r2, [r7, #0]
 800b0a8:	68b9      	ldr	r1, [r7, #8]
 800b0aa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b0ac:	f000 fb4c 	bl	800b748 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b0b0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b0b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0b8:	d112      	bne.n	800b0e0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b0ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d016      	beq.n	800b0f0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b0c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0c4:	3324      	adds	r3, #36	@ 0x24
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f001 f92e 	bl	800c328 <xTaskRemoveFromEventList>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d00e      	beq.n	800b0f0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d00b      	beq.n	800b0f0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2201      	movs	r2, #1
 800b0dc:	601a      	str	r2, [r3, #0]
 800b0de:	e007      	b.n	800b0f0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b0e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b0e4:	3301      	adds	r3, #1
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	b25a      	sxtb	r2, r3
 800b0ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b0f4:	e001      	b.n	800b0fa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b0fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0fc:	617b      	str	r3, [r7, #20]
	__asm volatile
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	f383 8811 	msr	BASEPRI, r3
}
 800b104:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b106:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3740      	adds	r7, #64	@ 0x40
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}

0800b110 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b08e      	sub	sp, #56	@ 0x38
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
 800b118:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b11e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b120:	2b00      	cmp	r3, #0
 800b122:	d10b      	bne.n	800b13c <xQueueGiveFromISR+0x2c>
	__asm volatile
 800b124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b128:	f383 8811 	msr	BASEPRI, r3
 800b12c:	f3bf 8f6f 	isb	sy
 800b130:	f3bf 8f4f 	dsb	sy
 800b134:	623b      	str	r3, [r7, #32]
}
 800b136:	bf00      	nop
 800b138:	bf00      	nop
 800b13a:	e7fd      	b.n	800b138 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b13c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b13e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b140:	2b00      	cmp	r3, #0
 800b142:	d00b      	beq.n	800b15c <xQueueGiveFromISR+0x4c>
	__asm volatile
 800b144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b148:	f383 8811 	msr	BASEPRI, r3
 800b14c:	f3bf 8f6f 	isb	sy
 800b150:	f3bf 8f4f 	dsb	sy
 800b154:	61fb      	str	r3, [r7, #28]
}
 800b156:	bf00      	nop
 800b158:	bf00      	nop
 800b15a:	e7fd      	b.n	800b158 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b15c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d103      	bne.n	800b16c <xQueueGiveFromISR+0x5c>
 800b164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b166:	689b      	ldr	r3, [r3, #8]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d101      	bne.n	800b170 <xQueueGiveFromISR+0x60>
 800b16c:	2301      	movs	r3, #1
 800b16e:	e000      	b.n	800b172 <xQueueGiveFromISR+0x62>
 800b170:	2300      	movs	r3, #0
 800b172:	2b00      	cmp	r3, #0
 800b174:	d10b      	bne.n	800b18e <xQueueGiveFromISR+0x7e>
	__asm volatile
 800b176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b17a:	f383 8811 	msr	BASEPRI, r3
 800b17e:	f3bf 8f6f 	isb	sy
 800b182:	f3bf 8f4f 	dsb	sy
 800b186:	61bb      	str	r3, [r7, #24]
}
 800b188:	bf00      	nop
 800b18a:	bf00      	nop
 800b18c:	e7fd      	b.n	800b18a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b18e:	f002 faa3 	bl	800d6d8 <vPortValidateInterruptPriority>
	__asm volatile
 800b192:	f3ef 8211 	mrs	r2, BASEPRI
 800b196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b19a:	f383 8811 	msr	BASEPRI, r3
 800b19e:	f3bf 8f6f 	isb	sy
 800b1a2:	f3bf 8f4f 	dsb	sy
 800b1a6:	617a      	str	r2, [r7, #20]
 800b1a8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b1aa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b1ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b1ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1b2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b1b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d22b      	bcs.n	800b216 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b1be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b1c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b1c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1ca:	1c5a      	adds	r2, r3, #1
 800b1cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ce:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b1d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b1d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1d8:	d112      	bne.n	800b200 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b1da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d016      	beq.n	800b210 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b1e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1e4:	3324      	adds	r3, #36	@ 0x24
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f001 f89e 	bl	800c328 <xTaskRemoveFromEventList>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d00e      	beq.n	800b210 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d00b      	beq.n	800b210 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	2201      	movs	r2, #1
 800b1fc:	601a      	str	r2, [r3, #0]
 800b1fe:	e007      	b.n	800b210 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b200:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b204:	3301      	adds	r3, #1
 800b206:	b2db      	uxtb	r3, r3
 800b208:	b25a      	sxtb	r2, r3
 800b20a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b20c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b210:	2301      	movs	r3, #1
 800b212:	637b      	str	r3, [r7, #52]	@ 0x34
 800b214:	e001      	b.n	800b21a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b216:	2300      	movs	r3, #0
 800b218:	637b      	str	r3, [r7, #52]	@ 0x34
 800b21a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b21c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	f383 8811 	msr	BASEPRI, r3
}
 800b224:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3738      	adds	r7, #56	@ 0x38
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}

0800b230 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b08c      	sub	sp, #48	@ 0x30
 800b234:	af00      	add	r7, sp, #0
 800b236:	60f8      	str	r0, [r7, #12]
 800b238:	60b9      	str	r1, [r7, #8]
 800b23a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b23c:	2300      	movs	r3, #0
 800b23e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b246:	2b00      	cmp	r3, #0
 800b248:	d10b      	bne.n	800b262 <xQueueReceive+0x32>
	__asm volatile
 800b24a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b24e:	f383 8811 	msr	BASEPRI, r3
 800b252:	f3bf 8f6f 	isb	sy
 800b256:	f3bf 8f4f 	dsb	sy
 800b25a:	623b      	str	r3, [r7, #32]
}
 800b25c:	bf00      	nop
 800b25e:	bf00      	nop
 800b260:	e7fd      	b.n	800b25e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d103      	bne.n	800b270 <xQueueReceive+0x40>
 800b268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b26a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d101      	bne.n	800b274 <xQueueReceive+0x44>
 800b270:	2301      	movs	r3, #1
 800b272:	e000      	b.n	800b276 <xQueueReceive+0x46>
 800b274:	2300      	movs	r3, #0
 800b276:	2b00      	cmp	r3, #0
 800b278:	d10b      	bne.n	800b292 <xQueueReceive+0x62>
	__asm volatile
 800b27a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b27e:	f383 8811 	msr	BASEPRI, r3
 800b282:	f3bf 8f6f 	isb	sy
 800b286:	f3bf 8f4f 	dsb	sy
 800b28a:	61fb      	str	r3, [r7, #28]
}
 800b28c:	bf00      	nop
 800b28e:	bf00      	nop
 800b290:	e7fd      	b.n	800b28e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b292:	f001 fa0f 	bl	800c6b4 <xTaskGetSchedulerState>
 800b296:	4603      	mov	r3, r0
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d102      	bne.n	800b2a2 <xQueueReceive+0x72>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d101      	bne.n	800b2a6 <xQueueReceive+0x76>
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	e000      	b.n	800b2a8 <xQueueReceive+0x78>
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d10b      	bne.n	800b2c4 <xQueueReceive+0x94>
	__asm volatile
 800b2ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2b0:	f383 8811 	msr	BASEPRI, r3
 800b2b4:	f3bf 8f6f 	isb	sy
 800b2b8:	f3bf 8f4f 	dsb	sy
 800b2bc:	61bb      	str	r3, [r7, #24]
}
 800b2be:	bf00      	nop
 800b2c0:	bf00      	nop
 800b2c2:	e7fd      	b.n	800b2c0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b2c4:	f002 f928 	bl	800d518 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b2c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2cc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b2ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d01f      	beq.n	800b314 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b2d4:	68b9      	ldr	r1, [r7, #8]
 800b2d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b2d8:	f000 faa0 	bl	800b81c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b2dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2de:	1e5a      	subs	r2, r3, #1
 800b2e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2e2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b2e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2e6:	691b      	ldr	r3, [r3, #16]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d00f      	beq.n	800b30c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b2ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2ee:	3310      	adds	r3, #16
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f001 f819 	bl	800c328 <xTaskRemoveFromEventList>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d007      	beq.n	800b30c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b2fc:	4b3c      	ldr	r3, [pc, #240]	@ (800b3f0 <xQueueReceive+0x1c0>)
 800b2fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b302:	601a      	str	r2, [r3, #0]
 800b304:	f3bf 8f4f 	dsb	sy
 800b308:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b30c:	f002 f936 	bl	800d57c <vPortExitCritical>
				return pdPASS;
 800b310:	2301      	movs	r3, #1
 800b312:	e069      	b.n	800b3e8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d103      	bne.n	800b322 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b31a:	f002 f92f 	bl	800d57c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b31e:	2300      	movs	r3, #0
 800b320:	e062      	b.n	800b3e8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b324:	2b00      	cmp	r3, #0
 800b326:	d106      	bne.n	800b336 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b328:	f107 0310 	add.w	r3, r7, #16
 800b32c:	4618      	mov	r0, r3
 800b32e:	f001 f85f 	bl	800c3f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b332:	2301      	movs	r3, #1
 800b334:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b336:	f002 f921 	bl	800d57c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b33a:	f000 fdc9 	bl	800bed0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b33e:	f002 f8eb 	bl	800d518 <vPortEnterCritical>
 800b342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b344:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b348:	b25b      	sxtb	r3, r3
 800b34a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b34e:	d103      	bne.n	800b358 <xQueueReceive+0x128>
 800b350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b352:	2200      	movs	r2, #0
 800b354:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b35a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b35e:	b25b      	sxtb	r3, r3
 800b360:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b364:	d103      	bne.n	800b36e <xQueueReceive+0x13e>
 800b366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b368:	2200      	movs	r2, #0
 800b36a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b36e:	f002 f905 	bl	800d57c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b372:	1d3a      	adds	r2, r7, #4
 800b374:	f107 0310 	add.w	r3, r7, #16
 800b378:	4611      	mov	r1, r2
 800b37a:	4618      	mov	r0, r3
 800b37c:	f001 f84e 	bl	800c41c <xTaskCheckForTimeOut>
 800b380:	4603      	mov	r3, r0
 800b382:	2b00      	cmp	r3, #0
 800b384:	d123      	bne.n	800b3ce <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b386:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b388:	f000 fac0 	bl	800b90c <prvIsQueueEmpty>
 800b38c:	4603      	mov	r3, r0
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d017      	beq.n	800b3c2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b394:	3324      	adds	r3, #36	@ 0x24
 800b396:	687a      	ldr	r2, [r7, #4]
 800b398:	4611      	mov	r1, r2
 800b39a:	4618      	mov	r0, r3
 800b39c:	f000 ff72 	bl	800c284 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b3a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b3a2:	f000 fa61 	bl	800b868 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b3a6:	f000 fda1 	bl	800beec <xTaskResumeAll>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d189      	bne.n	800b2c4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b3b0:	4b0f      	ldr	r3, [pc, #60]	@ (800b3f0 <xQueueReceive+0x1c0>)
 800b3b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3b6:	601a      	str	r2, [r3, #0]
 800b3b8:	f3bf 8f4f 	dsb	sy
 800b3bc:	f3bf 8f6f 	isb	sy
 800b3c0:	e780      	b.n	800b2c4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b3c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b3c4:	f000 fa50 	bl	800b868 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b3c8:	f000 fd90 	bl	800beec <xTaskResumeAll>
 800b3cc:	e77a      	b.n	800b2c4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b3ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b3d0:	f000 fa4a 	bl	800b868 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b3d4:	f000 fd8a 	bl	800beec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b3d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b3da:	f000 fa97 	bl	800b90c <prvIsQueueEmpty>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	f43f af6f 	beq.w	800b2c4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b3e6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3730      	adds	r7, #48	@ 0x30
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}
 800b3f0:	e000ed04 	.word	0xe000ed04

0800b3f4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b08e      	sub	sp, #56	@ 0x38
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b3fe:	2300      	movs	r3, #0
 800b400:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b406:	2300      	movs	r3, #0
 800b408:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b40a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d10b      	bne.n	800b428 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800b410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b414:	f383 8811 	msr	BASEPRI, r3
 800b418:	f3bf 8f6f 	isb	sy
 800b41c:	f3bf 8f4f 	dsb	sy
 800b420:	623b      	str	r3, [r7, #32]
}
 800b422:	bf00      	nop
 800b424:	bf00      	nop
 800b426:	e7fd      	b.n	800b424 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b42a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d00b      	beq.n	800b448 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800b430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b434:	f383 8811 	msr	BASEPRI, r3
 800b438:	f3bf 8f6f 	isb	sy
 800b43c:	f3bf 8f4f 	dsb	sy
 800b440:	61fb      	str	r3, [r7, #28]
}
 800b442:	bf00      	nop
 800b444:	bf00      	nop
 800b446:	e7fd      	b.n	800b444 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b448:	f001 f934 	bl	800c6b4 <xTaskGetSchedulerState>
 800b44c:	4603      	mov	r3, r0
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d102      	bne.n	800b458 <xQueueSemaphoreTake+0x64>
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d101      	bne.n	800b45c <xQueueSemaphoreTake+0x68>
 800b458:	2301      	movs	r3, #1
 800b45a:	e000      	b.n	800b45e <xQueueSemaphoreTake+0x6a>
 800b45c:	2300      	movs	r3, #0
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d10b      	bne.n	800b47a <xQueueSemaphoreTake+0x86>
	__asm volatile
 800b462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b466:	f383 8811 	msr	BASEPRI, r3
 800b46a:	f3bf 8f6f 	isb	sy
 800b46e:	f3bf 8f4f 	dsb	sy
 800b472:	61bb      	str	r3, [r7, #24]
}
 800b474:	bf00      	nop
 800b476:	bf00      	nop
 800b478:	e7fd      	b.n	800b476 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b47a:	f002 f84d 	bl	800d518 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b47e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b482:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b486:	2b00      	cmp	r3, #0
 800b488:	d024      	beq.n	800b4d4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b48a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b48c:	1e5a      	subs	r2, r3, #1
 800b48e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b490:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d104      	bne.n	800b4a4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b49a:	f001 fab7 	bl	800ca0c <pvTaskIncrementMutexHeldCount>
 800b49e:	4602      	mov	r2, r0
 800b4a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4a2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4a6:	691b      	ldr	r3, [r3, #16]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d00f      	beq.n	800b4cc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4ae:	3310      	adds	r3, #16
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f000 ff39 	bl	800c328 <xTaskRemoveFromEventList>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d007      	beq.n	800b4cc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b4bc:	4b54      	ldr	r3, [pc, #336]	@ (800b610 <xQueueSemaphoreTake+0x21c>)
 800b4be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4c2:	601a      	str	r2, [r3, #0]
 800b4c4:	f3bf 8f4f 	dsb	sy
 800b4c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b4cc:	f002 f856 	bl	800d57c <vPortExitCritical>
				return pdPASS;
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	e098      	b.n	800b606 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d112      	bne.n	800b500 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b4da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d00b      	beq.n	800b4f8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800b4e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4e4:	f383 8811 	msr	BASEPRI, r3
 800b4e8:	f3bf 8f6f 	isb	sy
 800b4ec:	f3bf 8f4f 	dsb	sy
 800b4f0:	617b      	str	r3, [r7, #20]
}
 800b4f2:	bf00      	nop
 800b4f4:	bf00      	nop
 800b4f6:	e7fd      	b.n	800b4f4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b4f8:	f002 f840 	bl	800d57c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	e082      	b.n	800b606 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b502:	2b00      	cmp	r3, #0
 800b504:	d106      	bne.n	800b514 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b506:	f107 030c 	add.w	r3, r7, #12
 800b50a:	4618      	mov	r0, r3
 800b50c:	f000 ff70 	bl	800c3f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b510:	2301      	movs	r3, #1
 800b512:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b514:	f002 f832 	bl	800d57c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b518:	f000 fcda 	bl	800bed0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b51c:	f001 fffc 	bl	800d518 <vPortEnterCritical>
 800b520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b522:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b526:	b25b      	sxtb	r3, r3
 800b528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b52c:	d103      	bne.n	800b536 <xQueueSemaphoreTake+0x142>
 800b52e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b530:	2200      	movs	r2, #0
 800b532:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b538:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b53c:	b25b      	sxtb	r3, r3
 800b53e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b542:	d103      	bne.n	800b54c <xQueueSemaphoreTake+0x158>
 800b544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b546:	2200      	movs	r2, #0
 800b548:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b54c:	f002 f816 	bl	800d57c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b550:	463a      	mov	r2, r7
 800b552:	f107 030c 	add.w	r3, r7, #12
 800b556:	4611      	mov	r1, r2
 800b558:	4618      	mov	r0, r3
 800b55a:	f000 ff5f 	bl	800c41c <xTaskCheckForTimeOut>
 800b55e:	4603      	mov	r3, r0
 800b560:	2b00      	cmp	r3, #0
 800b562:	d132      	bne.n	800b5ca <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b564:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b566:	f000 f9d1 	bl	800b90c <prvIsQueueEmpty>
 800b56a:	4603      	mov	r3, r0
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d026      	beq.n	800b5be <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d109      	bne.n	800b58c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800b578:	f001 ffce 	bl	800d518 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b57c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b57e:	689b      	ldr	r3, [r3, #8]
 800b580:	4618      	mov	r0, r3
 800b582:	f001 f8b5 	bl	800c6f0 <xTaskPriorityInherit>
 800b586:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800b588:	f001 fff8 	bl	800d57c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b58c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b58e:	3324      	adds	r3, #36	@ 0x24
 800b590:	683a      	ldr	r2, [r7, #0]
 800b592:	4611      	mov	r1, r2
 800b594:	4618      	mov	r0, r3
 800b596:	f000 fe75 	bl	800c284 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b59a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b59c:	f000 f964 	bl	800b868 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b5a0:	f000 fca4 	bl	800beec <xTaskResumeAll>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	f47f af67 	bne.w	800b47a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800b5ac:	4b18      	ldr	r3, [pc, #96]	@ (800b610 <xQueueSemaphoreTake+0x21c>)
 800b5ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b5b2:	601a      	str	r2, [r3, #0]
 800b5b4:	f3bf 8f4f 	dsb	sy
 800b5b8:	f3bf 8f6f 	isb	sy
 800b5bc:	e75d      	b.n	800b47a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b5be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b5c0:	f000 f952 	bl	800b868 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b5c4:	f000 fc92 	bl	800beec <xTaskResumeAll>
 800b5c8:	e757      	b.n	800b47a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b5ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b5cc:	f000 f94c 	bl	800b868 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b5d0:	f000 fc8c 	bl	800beec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b5d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b5d6:	f000 f999 	bl	800b90c <prvIsQueueEmpty>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	f43f af4c 	beq.w	800b47a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b5e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d00d      	beq.n	800b604 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800b5e8:	f001 ff96 	bl	800d518 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b5ec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b5ee:	f000 f893 	bl	800b718 <prvGetDisinheritPriorityAfterTimeout>
 800b5f2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b5f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5f6:	689b      	ldr	r3, [r3, #8]
 800b5f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f001 f976 	bl	800c8ec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b600:	f001 ffbc 	bl	800d57c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b604:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b606:	4618      	mov	r0, r3
 800b608:	3738      	adds	r7, #56	@ 0x38
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop
 800b610:	e000ed04 	.word	0xe000ed04

0800b614 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b08e      	sub	sp, #56	@ 0x38
 800b618:	af00      	add	r7, sp, #0
 800b61a:	60f8      	str	r0, [r7, #12]
 800b61c:	60b9      	str	r1, [r7, #8]
 800b61e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b626:	2b00      	cmp	r3, #0
 800b628:	d10b      	bne.n	800b642 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800b62a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b62e:	f383 8811 	msr	BASEPRI, r3
 800b632:	f3bf 8f6f 	isb	sy
 800b636:	f3bf 8f4f 	dsb	sy
 800b63a:	623b      	str	r3, [r7, #32]
}
 800b63c:	bf00      	nop
 800b63e:	bf00      	nop
 800b640:	e7fd      	b.n	800b63e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d103      	bne.n	800b650 <xQueueReceiveFromISR+0x3c>
 800b648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b64a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d101      	bne.n	800b654 <xQueueReceiveFromISR+0x40>
 800b650:	2301      	movs	r3, #1
 800b652:	e000      	b.n	800b656 <xQueueReceiveFromISR+0x42>
 800b654:	2300      	movs	r3, #0
 800b656:	2b00      	cmp	r3, #0
 800b658:	d10b      	bne.n	800b672 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800b65a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b65e:	f383 8811 	msr	BASEPRI, r3
 800b662:	f3bf 8f6f 	isb	sy
 800b666:	f3bf 8f4f 	dsb	sy
 800b66a:	61fb      	str	r3, [r7, #28]
}
 800b66c:	bf00      	nop
 800b66e:	bf00      	nop
 800b670:	e7fd      	b.n	800b66e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b672:	f002 f831 	bl	800d6d8 <vPortValidateInterruptPriority>
	__asm volatile
 800b676:	f3ef 8211 	mrs	r2, BASEPRI
 800b67a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b67e:	f383 8811 	msr	BASEPRI, r3
 800b682:	f3bf 8f6f 	isb	sy
 800b686:	f3bf 8f4f 	dsb	sy
 800b68a:	61ba      	str	r2, [r7, #24]
 800b68c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b68e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b690:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b696:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d02f      	beq.n	800b6fe <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b69e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b6a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b6a8:	68b9      	ldr	r1, [r7, #8]
 800b6aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b6ac:	f000 f8b6 	bl	800b81c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b6b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6b2:	1e5a      	subs	r2, r3, #1
 800b6b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6b6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b6b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b6bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6c0:	d112      	bne.n	800b6e8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b6c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6c4:	691b      	ldr	r3, [r3, #16]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d016      	beq.n	800b6f8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b6ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6cc:	3310      	adds	r3, #16
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f000 fe2a 	bl	800c328 <xTaskRemoveFromEventList>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d00e      	beq.n	800b6f8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d00b      	beq.n	800b6f8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2201      	movs	r2, #1
 800b6e4:	601a      	str	r2, [r3, #0]
 800b6e6:	e007      	b.n	800b6f8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b6e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b6ec:	3301      	adds	r3, #1
 800b6ee:	b2db      	uxtb	r3, r3
 800b6f0:	b25a      	sxtb	r2, r3
 800b6f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6fc:	e001      	b.n	800b702 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800b6fe:	2300      	movs	r3, #0
 800b700:	637b      	str	r3, [r7, #52]	@ 0x34
 800b702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b704:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	f383 8811 	msr	BASEPRI, r3
}
 800b70c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b70e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b710:	4618      	mov	r0, r3
 800b712:	3738      	adds	r7, #56	@ 0x38
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}

0800b718 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b718:	b480      	push	{r7}
 800b71a:	b085      	sub	sp, #20
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b724:	2b00      	cmp	r3, #0
 800b726:	d006      	beq.n	800b736 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	f1c3 0307 	rsb	r3, r3, #7
 800b732:	60fb      	str	r3, [r7, #12]
 800b734:	e001      	b.n	800b73a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b736:	2300      	movs	r3, #0
 800b738:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b73a:	68fb      	ldr	r3, [r7, #12]
	}
 800b73c:	4618      	mov	r0, r3
 800b73e:	3714      	adds	r7, #20
 800b740:	46bd      	mov	sp, r7
 800b742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b746:	4770      	bx	lr

0800b748 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b086      	sub	sp, #24
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	60f8      	str	r0, [r7, #12]
 800b750:	60b9      	str	r1, [r7, #8]
 800b752:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b754:	2300      	movs	r3, #0
 800b756:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b75c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b762:	2b00      	cmp	r3, #0
 800b764:	d10d      	bne.n	800b782 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d14d      	bne.n	800b80a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	689b      	ldr	r3, [r3, #8]
 800b772:	4618      	mov	r0, r3
 800b774:	f001 f832 	bl	800c7dc <xTaskPriorityDisinherit>
 800b778:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	2200      	movs	r2, #0
 800b77e:	609a      	str	r2, [r3, #8]
 800b780:	e043      	b.n	800b80a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d119      	bne.n	800b7bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	6858      	ldr	r0, [r3, #4]
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b790:	461a      	mov	r2, r3
 800b792:	68b9      	ldr	r1, [r7, #8]
 800b794:	f002 faa4 	bl	800dce0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	685a      	ldr	r2, [r3, #4]
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7a0:	441a      	add	r2, r3
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	685a      	ldr	r2, [r3, #4]
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	689b      	ldr	r3, [r3, #8]
 800b7ae:	429a      	cmp	r2, r3
 800b7b0:	d32b      	bcc.n	800b80a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	681a      	ldr	r2, [r3, #0]
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	605a      	str	r2, [r3, #4]
 800b7ba:	e026      	b.n	800b80a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	68d8      	ldr	r0, [r3, #12]
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7c4:	461a      	mov	r2, r3
 800b7c6:	68b9      	ldr	r1, [r7, #8]
 800b7c8:	f002 fa8a 	bl	800dce0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	68da      	ldr	r2, [r3, #12]
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7d4:	425b      	negs	r3, r3
 800b7d6:	441a      	add	r2, r3
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	68da      	ldr	r2, [r3, #12]
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	d207      	bcs.n	800b7f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	689a      	ldr	r2, [r3, #8]
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7f0:	425b      	negs	r3, r3
 800b7f2:	441a      	add	r2, r3
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2b02      	cmp	r3, #2
 800b7fc:	d105      	bne.n	800b80a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d002      	beq.n	800b80a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	3b01      	subs	r3, #1
 800b808:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	1c5a      	adds	r2, r3, #1
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b812:	697b      	ldr	r3, [r7, #20]
}
 800b814:	4618      	mov	r0, r3
 800b816:	3718      	adds	r7, #24
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b082      	sub	sp, #8
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d018      	beq.n	800b860 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	68da      	ldr	r2, [r3, #12]
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b836:	441a      	add	r2, r3
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	68da      	ldr	r2, [r3, #12]
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	689b      	ldr	r3, [r3, #8]
 800b844:	429a      	cmp	r2, r3
 800b846:	d303      	bcc.n	800b850 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681a      	ldr	r2, [r3, #0]
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	68d9      	ldr	r1, [r3, #12]
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b858:	461a      	mov	r2, r3
 800b85a:	6838      	ldr	r0, [r7, #0]
 800b85c:	f002 fa40 	bl	800dce0 <memcpy>
	}
}
 800b860:	bf00      	nop
 800b862:	3708      	adds	r7, #8
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}

0800b868 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b084      	sub	sp, #16
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b870:	f001 fe52 	bl	800d518 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b87a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b87c:	e011      	b.n	800b8a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b882:	2b00      	cmp	r3, #0
 800b884:	d012      	beq.n	800b8ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	3324      	adds	r3, #36	@ 0x24
 800b88a:	4618      	mov	r0, r3
 800b88c:	f000 fd4c 	bl	800c328 <xTaskRemoveFromEventList>
 800b890:	4603      	mov	r3, r0
 800b892:	2b00      	cmp	r3, #0
 800b894:	d001      	beq.n	800b89a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b896:	f000 fe25 	bl	800c4e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b89a:	7bfb      	ldrb	r3, [r7, #15]
 800b89c:	3b01      	subs	r3, #1
 800b89e:	b2db      	uxtb	r3, r3
 800b8a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b8a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	dce9      	bgt.n	800b87e <prvUnlockQueue+0x16>
 800b8aa:	e000      	b.n	800b8ae <prvUnlockQueue+0x46>
					break;
 800b8ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	22ff      	movs	r2, #255	@ 0xff
 800b8b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b8b6:	f001 fe61 	bl	800d57c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b8ba:	f001 fe2d 	bl	800d518 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b8c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b8c6:	e011      	b.n	800b8ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	691b      	ldr	r3, [r3, #16]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d012      	beq.n	800b8f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	3310      	adds	r3, #16
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f000 fd27 	bl	800c328 <xTaskRemoveFromEventList>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d001      	beq.n	800b8e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b8e0:	f000 fe00 	bl	800c4e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b8e4:	7bbb      	ldrb	r3, [r7, #14]
 800b8e6:	3b01      	subs	r3, #1
 800b8e8:	b2db      	uxtb	r3, r3
 800b8ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b8ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	dce9      	bgt.n	800b8c8 <prvUnlockQueue+0x60>
 800b8f4:	e000      	b.n	800b8f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b8f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	22ff      	movs	r2, #255	@ 0xff
 800b8fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b900:	f001 fe3c 	bl	800d57c <vPortExitCritical>
}
 800b904:	bf00      	nop
 800b906:	3710      	adds	r7, #16
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}

0800b90c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b084      	sub	sp, #16
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b914:	f001 fe00 	bl	800d518 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d102      	bne.n	800b926 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b920:	2301      	movs	r3, #1
 800b922:	60fb      	str	r3, [r7, #12]
 800b924:	e001      	b.n	800b92a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b926:	2300      	movs	r3, #0
 800b928:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b92a:	f001 fe27 	bl	800d57c <vPortExitCritical>

	return xReturn;
 800b92e:	68fb      	ldr	r3, [r7, #12]
}
 800b930:	4618      	mov	r0, r3
 800b932:	3710      	adds	r7, #16
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}

0800b938 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b084      	sub	sp, #16
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b940:	f001 fdea 	bl	800d518 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b94c:	429a      	cmp	r2, r3
 800b94e:	d102      	bne.n	800b956 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b950:	2301      	movs	r3, #1
 800b952:	60fb      	str	r3, [r7, #12]
 800b954:	e001      	b.n	800b95a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b956:	2300      	movs	r3, #0
 800b958:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b95a:	f001 fe0f 	bl	800d57c <vPortExitCritical>

	return xReturn;
 800b95e:	68fb      	ldr	r3, [r7, #12]
}
 800b960:	4618      	mov	r0, r3
 800b962:	3710      	adds	r7, #16
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}

0800b968 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b968:	b480      	push	{r7}
 800b96a:	b085      	sub	sp, #20
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
 800b970:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b972:	2300      	movs	r3, #0
 800b974:	60fb      	str	r3, [r7, #12]
 800b976:	e014      	b.n	800b9a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b978:	4a0f      	ldr	r2, [pc, #60]	@ (800b9b8 <vQueueAddToRegistry+0x50>)
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d10b      	bne.n	800b99c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b984:	490c      	ldr	r1, [pc, #48]	@ (800b9b8 <vQueueAddToRegistry+0x50>)
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	683a      	ldr	r2, [r7, #0]
 800b98a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b98e:	4a0a      	ldr	r2, [pc, #40]	@ (800b9b8 <vQueueAddToRegistry+0x50>)
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	00db      	lsls	r3, r3, #3
 800b994:	4413      	add	r3, r2
 800b996:	687a      	ldr	r2, [r7, #4]
 800b998:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b99a:	e006      	b.n	800b9aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	3301      	adds	r3, #1
 800b9a0:	60fb      	str	r3, [r7, #12]
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	2b07      	cmp	r3, #7
 800b9a6:	d9e7      	bls.n	800b978 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b9a8:	bf00      	nop
 800b9aa:	bf00      	nop
 800b9ac:	3714      	adds	r7, #20
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b4:	4770      	bx	lr
 800b9b6:	bf00      	nop
 800b9b8:	2000318c 	.word	0x2000318c

0800b9bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b086      	sub	sp, #24
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	60f8      	str	r0, [r7, #12]
 800b9c4:	60b9      	str	r1, [r7, #8]
 800b9c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b9cc:	f001 fda4 	bl	800d518 <vPortEnterCritical>
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b9d6:	b25b      	sxtb	r3, r3
 800b9d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9dc:	d103      	bne.n	800b9e6 <vQueueWaitForMessageRestricted+0x2a>
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b9ec:	b25b      	sxtb	r3, r3
 800b9ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9f2:	d103      	bne.n	800b9fc <vQueueWaitForMessageRestricted+0x40>
 800b9f4:	697b      	ldr	r3, [r7, #20]
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b9fc:	f001 fdbe 	bl	800d57c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ba00:	697b      	ldr	r3, [r7, #20]
 800ba02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d106      	bne.n	800ba16 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	3324      	adds	r3, #36	@ 0x24
 800ba0c:	687a      	ldr	r2, [r7, #4]
 800ba0e:	68b9      	ldr	r1, [r7, #8]
 800ba10:	4618      	mov	r0, r3
 800ba12:	f000 fc5d 	bl	800c2d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ba16:	6978      	ldr	r0, [r7, #20]
 800ba18:	f7ff ff26 	bl	800b868 <prvUnlockQueue>
	}
 800ba1c:	bf00      	nop
 800ba1e:	3718      	adds	r7, #24
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}

0800ba24 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b08e      	sub	sp, #56	@ 0x38
 800ba28:	af04      	add	r7, sp, #16
 800ba2a:	60f8      	str	r0, [r7, #12]
 800ba2c:	60b9      	str	r1, [r7, #8]
 800ba2e:	607a      	str	r2, [r7, #4]
 800ba30:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ba32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d10b      	bne.n	800ba50 <xTaskCreateStatic+0x2c>
	__asm volatile
 800ba38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba3c:	f383 8811 	msr	BASEPRI, r3
 800ba40:	f3bf 8f6f 	isb	sy
 800ba44:	f3bf 8f4f 	dsb	sy
 800ba48:	623b      	str	r3, [r7, #32]
}
 800ba4a:	bf00      	nop
 800ba4c:	bf00      	nop
 800ba4e:	e7fd      	b.n	800ba4c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ba50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d10b      	bne.n	800ba6e <xTaskCreateStatic+0x4a>
	__asm volatile
 800ba56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba5a:	f383 8811 	msr	BASEPRI, r3
 800ba5e:	f3bf 8f6f 	isb	sy
 800ba62:	f3bf 8f4f 	dsb	sy
 800ba66:	61fb      	str	r3, [r7, #28]
}
 800ba68:	bf00      	nop
 800ba6a:	bf00      	nop
 800ba6c:	e7fd      	b.n	800ba6a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ba6e:	23a0      	movs	r3, #160	@ 0xa0
 800ba70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	2ba0      	cmp	r3, #160	@ 0xa0
 800ba76:	d00b      	beq.n	800ba90 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ba78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba7c:	f383 8811 	msr	BASEPRI, r3
 800ba80:	f3bf 8f6f 	isb	sy
 800ba84:	f3bf 8f4f 	dsb	sy
 800ba88:	61bb      	str	r3, [r7, #24]
}
 800ba8a:	bf00      	nop
 800ba8c:	bf00      	nop
 800ba8e:	e7fd      	b.n	800ba8c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ba90:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ba92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d01e      	beq.n	800bad6 <xTaskCreateStatic+0xb2>
 800ba98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d01b      	beq.n	800bad6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ba9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baa0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800baa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baa4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800baa6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800baa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baaa:	2202      	movs	r2, #2
 800baac:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bab0:	2300      	movs	r3, #0
 800bab2:	9303      	str	r3, [sp, #12]
 800bab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bab6:	9302      	str	r3, [sp, #8]
 800bab8:	f107 0314 	add.w	r3, r7, #20
 800babc:	9301      	str	r3, [sp, #4]
 800babe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bac0:	9300      	str	r3, [sp, #0]
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	687a      	ldr	r2, [r7, #4]
 800bac6:	68b9      	ldr	r1, [r7, #8]
 800bac8:	68f8      	ldr	r0, [r7, #12]
 800baca:	f000 f851 	bl	800bb70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bace:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bad0:	f000 f8ee 	bl	800bcb0 <prvAddNewTaskToReadyList>
 800bad4:	e001      	b.n	800bada <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800bad6:	2300      	movs	r3, #0
 800bad8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bada:	697b      	ldr	r3, [r7, #20]
	}
 800badc:	4618      	mov	r0, r3
 800bade:	3728      	adds	r7, #40	@ 0x28
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}

0800bae4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b08c      	sub	sp, #48	@ 0x30
 800bae8:	af04      	add	r7, sp, #16
 800baea:	60f8      	str	r0, [r7, #12]
 800baec:	60b9      	str	r1, [r7, #8]
 800baee:	603b      	str	r3, [r7, #0]
 800baf0:	4613      	mov	r3, r2
 800baf2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800baf4:	88fb      	ldrh	r3, [r7, #6]
 800baf6:	009b      	lsls	r3, r3, #2
 800baf8:	4618      	mov	r0, r3
 800bafa:	f001 fe2f 	bl	800d75c <pvPortMalloc>
 800bafe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bb00:	697b      	ldr	r3, [r7, #20]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d00e      	beq.n	800bb24 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bb06:	20a0      	movs	r0, #160	@ 0xa0
 800bb08:	f001 fe28 	bl	800d75c <pvPortMalloc>
 800bb0c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bb0e:	69fb      	ldr	r3, [r7, #28]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d003      	beq.n	800bb1c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bb14:	69fb      	ldr	r3, [r7, #28]
 800bb16:	697a      	ldr	r2, [r7, #20]
 800bb18:	631a      	str	r2, [r3, #48]	@ 0x30
 800bb1a:	e005      	b.n	800bb28 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bb1c:	6978      	ldr	r0, [r7, #20]
 800bb1e:	f001 feeb 	bl	800d8f8 <vPortFree>
 800bb22:	e001      	b.n	800bb28 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bb24:	2300      	movs	r3, #0
 800bb26:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bb28:	69fb      	ldr	r3, [r7, #28]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d017      	beq.n	800bb5e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bb2e:	69fb      	ldr	r3, [r7, #28]
 800bb30:	2200      	movs	r2, #0
 800bb32:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bb36:	88fa      	ldrh	r2, [r7, #6]
 800bb38:	2300      	movs	r3, #0
 800bb3a:	9303      	str	r3, [sp, #12]
 800bb3c:	69fb      	ldr	r3, [r7, #28]
 800bb3e:	9302      	str	r3, [sp, #8]
 800bb40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb42:	9301      	str	r3, [sp, #4]
 800bb44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb46:	9300      	str	r3, [sp, #0]
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	68b9      	ldr	r1, [r7, #8]
 800bb4c:	68f8      	ldr	r0, [r7, #12]
 800bb4e:	f000 f80f 	bl	800bb70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bb52:	69f8      	ldr	r0, [r7, #28]
 800bb54:	f000 f8ac 	bl	800bcb0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bb58:	2301      	movs	r3, #1
 800bb5a:	61bb      	str	r3, [r7, #24]
 800bb5c:	e002      	b.n	800bb64 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bb5e:	f04f 33ff 	mov.w	r3, #4294967295
 800bb62:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bb64:	69bb      	ldr	r3, [r7, #24]
	}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3720      	adds	r7, #32
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}
	...

0800bb70 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b088      	sub	sp, #32
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	60f8      	str	r0, [r7, #12]
 800bb78:	60b9      	str	r1, [r7, #8]
 800bb7a:	607a      	str	r2, [r7, #4]
 800bb7c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bb7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bb88:	3b01      	subs	r3, #1
 800bb8a:	009b      	lsls	r3, r3, #2
 800bb8c:	4413      	add	r3, r2
 800bb8e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bb90:	69bb      	ldr	r3, [r7, #24]
 800bb92:	f023 0307 	bic.w	r3, r3, #7
 800bb96:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bb98:	69bb      	ldr	r3, [r7, #24]
 800bb9a:	f003 0307 	and.w	r3, r3, #7
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d00b      	beq.n	800bbba <prvInitialiseNewTask+0x4a>
	__asm volatile
 800bba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bba6:	f383 8811 	msr	BASEPRI, r3
 800bbaa:	f3bf 8f6f 	isb	sy
 800bbae:	f3bf 8f4f 	dsb	sy
 800bbb2:	617b      	str	r3, [r7, #20]
}
 800bbb4:	bf00      	nop
 800bbb6:	bf00      	nop
 800bbb8:	e7fd      	b.n	800bbb6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d01f      	beq.n	800bc00 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	61fb      	str	r3, [r7, #28]
 800bbc4:	e012      	b.n	800bbec <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bbc6:	68ba      	ldr	r2, [r7, #8]
 800bbc8:	69fb      	ldr	r3, [r7, #28]
 800bbca:	4413      	add	r3, r2
 800bbcc:	7819      	ldrb	r1, [r3, #0]
 800bbce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bbd0:	69fb      	ldr	r3, [r7, #28]
 800bbd2:	4413      	add	r3, r2
 800bbd4:	3334      	adds	r3, #52	@ 0x34
 800bbd6:	460a      	mov	r2, r1
 800bbd8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bbda:	68ba      	ldr	r2, [r7, #8]
 800bbdc:	69fb      	ldr	r3, [r7, #28]
 800bbde:	4413      	add	r3, r2
 800bbe0:	781b      	ldrb	r3, [r3, #0]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d006      	beq.n	800bbf4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bbe6:	69fb      	ldr	r3, [r7, #28]
 800bbe8:	3301      	adds	r3, #1
 800bbea:	61fb      	str	r3, [r7, #28]
 800bbec:	69fb      	ldr	r3, [r7, #28]
 800bbee:	2b0f      	cmp	r3, #15
 800bbf0:	d9e9      	bls.n	800bbc6 <prvInitialiseNewTask+0x56>
 800bbf2:	e000      	b.n	800bbf6 <prvInitialiseNewTask+0x86>
			{
				break;
 800bbf4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bbf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bbfe:	e003      	b.n	800bc08 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bc00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc02:	2200      	movs	r2, #0
 800bc04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bc08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc0a:	2b06      	cmp	r3, #6
 800bc0c:	d901      	bls.n	800bc12 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bc0e:	2306      	movs	r3, #6
 800bc10:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bc12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bc16:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bc18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bc1c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800bc1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc20:	2200      	movs	r2, #0
 800bc22:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bc24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc26:	3304      	adds	r3, #4
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f7fe feae 	bl	800a98a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bc2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc30:	3318      	adds	r3, #24
 800bc32:	4618      	mov	r0, r3
 800bc34:	f7fe fea9 	bl	800a98a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bc38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc3c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc40:	f1c3 0207 	rsb	r2, r3, #7
 800bc44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc46:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bc48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc4c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bc4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc50:	2200      	movs	r2, #0
 800bc52:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bc56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc58:	2200      	movs	r2, #0
 800bc5a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bc5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc60:	334c      	adds	r3, #76	@ 0x4c
 800bc62:	224c      	movs	r2, #76	@ 0x4c
 800bc64:	2100      	movs	r1, #0
 800bc66:	4618      	mov	r0, r3
 800bc68:	f001 ffb0 	bl	800dbcc <memset>
 800bc6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc6e:	4a0d      	ldr	r2, [pc, #52]	@ (800bca4 <prvInitialiseNewTask+0x134>)
 800bc70:	651a      	str	r2, [r3, #80]	@ 0x50
 800bc72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc74:	4a0c      	ldr	r2, [pc, #48]	@ (800bca8 <prvInitialiseNewTask+0x138>)
 800bc76:	655a      	str	r2, [r3, #84]	@ 0x54
 800bc78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc7a:	4a0c      	ldr	r2, [pc, #48]	@ (800bcac <prvInitialiseNewTask+0x13c>)
 800bc7c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bc7e:	683a      	ldr	r2, [r7, #0]
 800bc80:	68f9      	ldr	r1, [r7, #12]
 800bc82:	69b8      	ldr	r0, [r7, #24]
 800bc84:	f001 fb18 	bl	800d2b8 <pxPortInitialiseStack>
 800bc88:	4602      	mov	r2, r0
 800bc8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc8c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bc8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d002      	beq.n	800bc9a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bc94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc9a:	bf00      	nop
 800bc9c:	3720      	adds	r7, #32
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bd80      	pop	{r7, pc}
 800bca2:	bf00      	nop
 800bca4:	2001341c 	.word	0x2001341c
 800bca8:	20013484 	.word	0x20013484
 800bcac:	200134ec 	.word	0x200134ec

0800bcb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b082      	sub	sp, #8
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bcb8:	f001 fc2e 	bl	800d518 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bcbc:	4b2a      	ldr	r3, [pc, #168]	@ (800bd68 <prvAddNewTaskToReadyList+0xb8>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	3301      	adds	r3, #1
 800bcc2:	4a29      	ldr	r2, [pc, #164]	@ (800bd68 <prvAddNewTaskToReadyList+0xb8>)
 800bcc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bcc6:	4b29      	ldr	r3, [pc, #164]	@ (800bd6c <prvAddNewTaskToReadyList+0xbc>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d109      	bne.n	800bce2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bcce:	4a27      	ldr	r2, [pc, #156]	@ (800bd6c <prvAddNewTaskToReadyList+0xbc>)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bcd4:	4b24      	ldr	r3, [pc, #144]	@ (800bd68 <prvAddNewTaskToReadyList+0xb8>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	2b01      	cmp	r3, #1
 800bcda:	d110      	bne.n	800bcfe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bcdc:	f000 fc26 	bl	800c52c <prvInitialiseTaskLists>
 800bce0:	e00d      	b.n	800bcfe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bce2:	4b23      	ldr	r3, [pc, #140]	@ (800bd70 <prvAddNewTaskToReadyList+0xc0>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d109      	bne.n	800bcfe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bcea:	4b20      	ldr	r3, [pc, #128]	@ (800bd6c <prvAddNewTaskToReadyList+0xbc>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	d802      	bhi.n	800bcfe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bcf8:	4a1c      	ldr	r2, [pc, #112]	@ (800bd6c <prvAddNewTaskToReadyList+0xbc>)
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bcfe:	4b1d      	ldr	r3, [pc, #116]	@ (800bd74 <prvAddNewTaskToReadyList+0xc4>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	3301      	adds	r3, #1
 800bd04:	4a1b      	ldr	r2, [pc, #108]	@ (800bd74 <prvAddNewTaskToReadyList+0xc4>)
 800bd06:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd0c:	2201      	movs	r2, #1
 800bd0e:	409a      	lsls	r2, r3
 800bd10:	4b19      	ldr	r3, [pc, #100]	@ (800bd78 <prvAddNewTaskToReadyList+0xc8>)
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	4313      	orrs	r3, r2
 800bd16:	4a18      	ldr	r2, [pc, #96]	@ (800bd78 <prvAddNewTaskToReadyList+0xc8>)
 800bd18:	6013      	str	r3, [r2, #0]
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd1e:	4613      	mov	r3, r2
 800bd20:	009b      	lsls	r3, r3, #2
 800bd22:	4413      	add	r3, r2
 800bd24:	009b      	lsls	r3, r3, #2
 800bd26:	4a15      	ldr	r2, [pc, #84]	@ (800bd7c <prvAddNewTaskToReadyList+0xcc>)
 800bd28:	441a      	add	r2, r3
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	3304      	adds	r3, #4
 800bd2e:	4619      	mov	r1, r3
 800bd30:	4610      	mov	r0, r2
 800bd32:	f7fe fe37 	bl	800a9a4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bd36:	f001 fc21 	bl	800d57c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bd3a:	4b0d      	ldr	r3, [pc, #52]	@ (800bd70 <prvAddNewTaskToReadyList+0xc0>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d00e      	beq.n	800bd60 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bd42:	4b0a      	ldr	r3, [pc, #40]	@ (800bd6c <prvAddNewTaskToReadyList+0xbc>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd4c:	429a      	cmp	r2, r3
 800bd4e:	d207      	bcs.n	800bd60 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bd50:	4b0b      	ldr	r3, [pc, #44]	@ (800bd80 <prvAddNewTaskToReadyList+0xd0>)
 800bd52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd56:	601a      	str	r2, [r3, #0]
 800bd58:	f3bf 8f4f 	dsb	sy
 800bd5c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bd60:	bf00      	nop
 800bd62:	3708      	adds	r7, #8
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}
 800bd68:	200032cc 	.word	0x200032cc
 800bd6c:	200031cc 	.word	0x200031cc
 800bd70:	200032d8 	.word	0x200032d8
 800bd74:	200032e8 	.word	0x200032e8
 800bd78:	200032d4 	.word	0x200032d4
 800bd7c:	200031d0 	.word	0x200031d0
 800bd80:	e000ed04 	.word	0xe000ed04

0800bd84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b084      	sub	sp, #16
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d018      	beq.n	800bdc8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bd96:	4b14      	ldr	r3, [pc, #80]	@ (800bde8 <vTaskDelay+0x64>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d00b      	beq.n	800bdb6 <vTaskDelay+0x32>
	__asm volatile
 800bd9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bda2:	f383 8811 	msr	BASEPRI, r3
 800bda6:	f3bf 8f6f 	isb	sy
 800bdaa:	f3bf 8f4f 	dsb	sy
 800bdae:	60bb      	str	r3, [r7, #8]
}
 800bdb0:	bf00      	nop
 800bdb2:	bf00      	nop
 800bdb4:	e7fd      	b.n	800bdb2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bdb6:	f000 f88b 	bl	800bed0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bdba:	2100      	movs	r1, #0
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f000 fe39 	bl	800ca34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bdc2:	f000 f893 	bl	800beec <xTaskResumeAll>
 800bdc6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d107      	bne.n	800bdde <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800bdce:	4b07      	ldr	r3, [pc, #28]	@ (800bdec <vTaskDelay+0x68>)
 800bdd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bdd4:	601a      	str	r2, [r3, #0]
 800bdd6:	f3bf 8f4f 	dsb	sy
 800bdda:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bdde:	bf00      	nop
 800bde0:	3710      	adds	r7, #16
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}
 800bde6:	bf00      	nop
 800bde8:	200032f4 	.word	0x200032f4
 800bdec:	e000ed04 	.word	0xe000ed04

0800bdf0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b08a      	sub	sp, #40	@ 0x28
 800bdf4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bdfe:	463a      	mov	r2, r7
 800be00:	1d39      	adds	r1, r7, #4
 800be02:	f107 0308 	add.w	r3, r7, #8
 800be06:	4618      	mov	r0, r3
 800be08:	f7f4 fdb2 	bl	8000970 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800be0c:	6839      	ldr	r1, [r7, #0]
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	68ba      	ldr	r2, [r7, #8]
 800be12:	9202      	str	r2, [sp, #8]
 800be14:	9301      	str	r3, [sp, #4]
 800be16:	2300      	movs	r3, #0
 800be18:	9300      	str	r3, [sp, #0]
 800be1a:	2300      	movs	r3, #0
 800be1c:	460a      	mov	r2, r1
 800be1e:	4924      	ldr	r1, [pc, #144]	@ (800beb0 <vTaskStartScheduler+0xc0>)
 800be20:	4824      	ldr	r0, [pc, #144]	@ (800beb4 <vTaskStartScheduler+0xc4>)
 800be22:	f7ff fdff 	bl	800ba24 <xTaskCreateStatic>
 800be26:	4603      	mov	r3, r0
 800be28:	4a23      	ldr	r2, [pc, #140]	@ (800beb8 <vTaskStartScheduler+0xc8>)
 800be2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800be2c:	4b22      	ldr	r3, [pc, #136]	@ (800beb8 <vTaskStartScheduler+0xc8>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d002      	beq.n	800be3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800be34:	2301      	movs	r3, #1
 800be36:	617b      	str	r3, [r7, #20]
 800be38:	e001      	b.n	800be3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800be3a:	2300      	movs	r3, #0
 800be3c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800be3e:	697b      	ldr	r3, [r7, #20]
 800be40:	2b01      	cmp	r3, #1
 800be42:	d102      	bne.n	800be4a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800be44:	f000 fe5c 	bl	800cb00 <xTimerCreateTimerTask>
 800be48:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800be4a:	697b      	ldr	r3, [r7, #20]
 800be4c:	2b01      	cmp	r3, #1
 800be4e:	d11b      	bne.n	800be88 <vTaskStartScheduler+0x98>
	__asm volatile
 800be50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be54:	f383 8811 	msr	BASEPRI, r3
 800be58:	f3bf 8f6f 	isb	sy
 800be5c:	f3bf 8f4f 	dsb	sy
 800be60:	613b      	str	r3, [r7, #16]
}
 800be62:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800be64:	4b15      	ldr	r3, [pc, #84]	@ (800bebc <vTaskStartScheduler+0xcc>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	334c      	adds	r3, #76	@ 0x4c
 800be6a:	4a15      	ldr	r2, [pc, #84]	@ (800bec0 <vTaskStartScheduler+0xd0>)
 800be6c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800be6e:	4b15      	ldr	r3, [pc, #84]	@ (800bec4 <vTaskStartScheduler+0xd4>)
 800be70:	f04f 32ff 	mov.w	r2, #4294967295
 800be74:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800be76:	4b14      	ldr	r3, [pc, #80]	@ (800bec8 <vTaskStartScheduler+0xd8>)
 800be78:	2201      	movs	r2, #1
 800be7a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800be7c:	4b13      	ldr	r3, [pc, #76]	@ (800becc <vTaskStartScheduler+0xdc>)
 800be7e:	2200      	movs	r2, #0
 800be80:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800be82:	f001 faa5 	bl	800d3d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800be86:	e00f      	b.n	800bea8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be8e:	d10b      	bne.n	800bea8 <vTaskStartScheduler+0xb8>
	__asm volatile
 800be90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be94:	f383 8811 	msr	BASEPRI, r3
 800be98:	f3bf 8f6f 	isb	sy
 800be9c:	f3bf 8f4f 	dsb	sy
 800bea0:	60fb      	str	r3, [r7, #12]
}
 800bea2:	bf00      	nop
 800bea4:	bf00      	nop
 800bea6:	e7fd      	b.n	800bea4 <vTaskStartScheduler+0xb4>
}
 800bea8:	bf00      	nop
 800beaa:	3718      	adds	r7, #24
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}
 800beb0:	0800f758 	.word	0x0800f758
 800beb4:	0800c4fd 	.word	0x0800c4fd
 800beb8:	200032f0 	.word	0x200032f0
 800bebc:	200031cc 	.word	0x200031cc
 800bec0:	200000b0 	.word	0x200000b0
 800bec4:	200032ec 	.word	0x200032ec
 800bec8:	200032d8 	.word	0x200032d8
 800becc:	200032d0 	.word	0x200032d0

0800bed0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bed0:	b480      	push	{r7}
 800bed2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bed4:	4b04      	ldr	r3, [pc, #16]	@ (800bee8 <vTaskSuspendAll+0x18>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	3301      	adds	r3, #1
 800beda:	4a03      	ldr	r2, [pc, #12]	@ (800bee8 <vTaskSuspendAll+0x18>)
 800bedc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bede:	bf00      	nop
 800bee0:	46bd      	mov	sp, r7
 800bee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee6:	4770      	bx	lr
 800bee8:	200032f4 	.word	0x200032f4

0800beec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b084      	sub	sp, #16
 800bef0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bef2:	2300      	movs	r3, #0
 800bef4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bef6:	2300      	movs	r3, #0
 800bef8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800befa:	4b42      	ldr	r3, [pc, #264]	@ (800c004 <xTaskResumeAll+0x118>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d10b      	bne.n	800bf1a <xTaskResumeAll+0x2e>
	__asm volatile
 800bf02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf06:	f383 8811 	msr	BASEPRI, r3
 800bf0a:	f3bf 8f6f 	isb	sy
 800bf0e:	f3bf 8f4f 	dsb	sy
 800bf12:	603b      	str	r3, [r7, #0]
}
 800bf14:	bf00      	nop
 800bf16:	bf00      	nop
 800bf18:	e7fd      	b.n	800bf16 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bf1a:	f001 fafd 	bl	800d518 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bf1e:	4b39      	ldr	r3, [pc, #228]	@ (800c004 <xTaskResumeAll+0x118>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	3b01      	subs	r3, #1
 800bf24:	4a37      	ldr	r2, [pc, #220]	@ (800c004 <xTaskResumeAll+0x118>)
 800bf26:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf28:	4b36      	ldr	r3, [pc, #216]	@ (800c004 <xTaskResumeAll+0x118>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d161      	bne.n	800bff4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bf30:	4b35      	ldr	r3, [pc, #212]	@ (800c008 <xTaskResumeAll+0x11c>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d05d      	beq.n	800bff4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bf38:	e02e      	b.n	800bf98 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf3a:	4b34      	ldr	r3, [pc, #208]	@ (800c00c <xTaskResumeAll+0x120>)
 800bf3c:	68db      	ldr	r3, [r3, #12]
 800bf3e:	68db      	ldr	r3, [r3, #12]
 800bf40:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	3318      	adds	r3, #24
 800bf46:	4618      	mov	r0, r3
 800bf48:	f7fe fd89 	bl	800aa5e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	3304      	adds	r3, #4
 800bf50:	4618      	mov	r0, r3
 800bf52:	f7fe fd84 	bl	800aa5e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf5a:	2201      	movs	r2, #1
 800bf5c:	409a      	lsls	r2, r3
 800bf5e:	4b2c      	ldr	r3, [pc, #176]	@ (800c010 <xTaskResumeAll+0x124>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	4313      	orrs	r3, r2
 800bf64:	4a2a      	ldr	r2, [pc, #168]	@ (800c010 <xTaskResumeAll+0x124>)
 800bf66:	6013      	str	r3, [r2, #0]
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf6c:	4613      	mov	r3, r2
 800bf6e:	009b      	lsls	r3, r3, #2
 800bf70:	4413      	add	r3, r2
 800bf72:	009b      	lsls	r3, r3, #2
 800bf74:	4a27      	ldr	r2, [pc, #156]	@ (800c014 <xTaskResumeAll+0x128>)
 800bf76:	441a      	add	r2, r3
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	3304      	adds	r3, #4
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	4610      	mov	r0, r2
 800bf80:	f7fe fd10 	bl	800a9a4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf88:	4b23      	ldr	r3, [pc, #140]	@ (800c018 <xTaskResumeAll+0x12c>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf8e:	429a      	cmp	r2, r3
 800bf90:	d302      	bcc.n	800bf98 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800bf92:	4b22      	ldr	r3, [pc, #136]	@ (800c01c <xTaskResumeAll+0x130>)
 800bf94:	2201      	movs	r2, #1
 800bf96:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bf98:	4b1c      	ldr	r3, [pc, #112]	@ (800c00c <xTaskResumeAll+0x120>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d1cc      	bne.n	800bf3a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d001      	beq.n	800bfaa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bfa6:	f000 fb65 	bl	800c674 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bfaa:	4b1d      	ldr	r3, [pc, #116]	@ (800c020 <xTaskResumeAll+0x134>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d010      	beq.n	800bfd8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bfb6:	f000 f847 	bl	800c048 <xTaskIncrementTick>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d002      	beq.n	800bfc6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bfc0:	4b16      	ldr	r3, [pc, #88]	@ (800c01c <xTaskResumeAll+0x130>)
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	3b01      	subs	r3, #1
 800bfca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d1f1      	bne.n	800bfb6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800bfd2:	4b13      	ldr	r3, [pc, #76]	@ (800c020 <xTaskResumeAll+0x134>)
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bfd8:	4b10      	ldr	r3, [pc, #64]	@ (800c01c <xTaskResumeAll+0x130>)
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d009      	beq.n	800bff4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bfe4:	4b0f      	ldr	r3, [pc, #60]	@ (800c024 <xTaskResumeAll+0x138>)
 800bfe6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bfea:	601a      	str	r2, [r3, #0]
 800bfec:	f3bf 8f4f 	dsb	sy
 800bff0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bff4:	f001 fac2 	bl	800d57c <vPortExitCritical>

	return xAlreadyYielded;
 800bff8:	68bb      	ldr	r3, [r7, #8]
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3710      	adds	r7, #16
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}
 800c002:	bf00      	nop
 800c004:	200032f4 	.word	0x200032f4
 800c008:	200032cc 	.word	0x200032cc
 800c00c:	2000328c 	.word	0x2000328c
 800c010:	200032d4 	.word	0x200032d4
 800c014:	200031d0 	.word	0x200031d0
 800c018:	200031cc 	.word	0x200031cc
 800c01c:	200032e0 	.word	0x200032e0
 800c020:	200032dc 	.word	0x200032dc
 800c024:	e000ed04 	.word	0xe000ed04

0800c028 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c028:	b480      	push	{r7}
 800c02a:	b083      	sub	sp, #12
 800c02c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c02e:	4b05      	ldr	r3, [pc, #20]	@ (800c044 <xTaskGetTickCount+0x1c>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c034:	687b      	ldr	r3, [r7, #4]
}
 800c036:	4618      	mov	r0, r3
 800c038:	370c      	adds	r7, #12
 800c03a:	46bd      	mov	sp, r7
 800c03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c040:	4770      	bx	lr
 800c042:	bf00      	nop
 800c044:	200032d0 	.word	0x200032d0

0800c048 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b086      	sub	sp, #24
 800c04c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c04e:	2300      	movs	r3, #0
 800c050:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c052:	4b4f      	ldr	r3, [pc, #316]	@ (800c190 <xTaskIncrementTick+0x148>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	2b00      	cmp	r3, #0
 800c058:	f040 808f 	bne.w	800c17a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c05c:	4b4d      	ldr	r3, [pc, #308]	@ (800c194 <xTaskIncrementTick+0x14c>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	3301      	adds	r3, #1
 800c062:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c064:	4a4b      	ldr	r2, [pc, #300]	@ (800c194 <xTaskIncrementTick+0x14c>)
 800c066:	693b      	ldr	r3, [r7, #16]
 800c068:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c06a:	693b      	ldr	r3, [r7, #16]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d121      	bne.n	800c0b4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c070:	4b49      	ldr	r3, [pc, #292]	@ (800c198 <xTaskIncrementTick+0x150>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d00b      	beq.n	800c092 <xTaskIncrementTick+0x4a>
	__asm volatile
 800c07a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c07e:	f383 8811 	msr	BASEPRI, r3
 800c082:	f3bf 8f6f 	isb	sy
 800c086:	f3bf 8f4f 	dsb	sy
 800c08a:	603b      	str	r3, [r7, #0]
}
 800c08c:	bf00      	nop
 800c08e:	bf00      	nop
 800c090:	e7fd      	b.n	800c08e <xTaskIncrementTick+0x46>
 800c092:	4b41      	ldr	r3, [pc, #260]	@ (800c198 <xTaskIncrementTick+0x150>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	60fb      	str	r3, [r7, #12]
 800c098:	4b40      	ldr	r3, [pc, #256]	@ (800c19c <xTaskIncrementTick+0x154>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	4a3e      	ldr	r2, [pc, #248]	@ (800c198 <xTaskIncrementTick+0x150>)
 800c09e:	6013      	str	r3, [r2, #0]
 800c0a0:	4a3e      	ldr	r2, [pc, #248]	@ (800c19c <xTaskIncrementTick+0x154>)
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	6013      	str	r3, [r2, #0]
 800c0a6:	4b3e      	ldr	r3, [pc, #248]	@ (800c1a0 <xTaskIncrementTick+0x158>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	3301      	adds	r3, #1
 800c0ac:	4a3c      	ldr	r2, [pc, #240]	@ (800c1a0 <xTaskIncrementTick+0x158>)
 800c0ae:	6013      	str	r3, [r2, #0]
 800c0b0:	f000 fae0 	bl	800c674 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c0b4:	4b3b      	ldr	r3, [pc, #236]	@ (800c1a4 <xTaskIncrementTick+0x15c>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	693a      	ldr	r2, [r7, #16]
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	d348      	bcc.n	800c150 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c0be:	4b36      	ldr	r3, [pc, #216]	@ (800c198 <xTaskIncrementTick+0x150>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d104      	bne.n	800c0d2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0c8:	4b36      	ldr	r3, [pc, #216]	@ (800c1a4 <xTaskIncrementTick+0x15c>)
 800c0ca:	f04f 32ff 	mov.w	r2, #4294967295
 800c0ce:	601a      	str	r2, [r3, #0]
					break;
 800c0d0:	e03e      	b.n	800c150 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0d2:	4b31      	ldr	r3, [pc, #196]	@ (800c198 <xTaskIncrementTick+0x150>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	68db      	ldr	r3, [r3, #12]
 800c0d8:	68db      	ldr	r3, [r3, #12]
 800c0da:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c0e2:	693a      	ldr	r2, [r7, #16]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d203      	bcs.n	800c0f2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c0ea:	4a2e      	ldr	r2, [pc, #184]	@ (800c1a4 <xTaskIncrementTick+0x15c>)
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c0f0:	e02e      	b.n	800c150 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c0f2:	68bb      	ldr	r3, [r7, #8]
 800c0f4:	3304      	adds	r3, #4
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f7fe fcb1 	bl	800aa5e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c100:	2b00      	cmp	r3, #0
 800c102:	d004      	beq.n	800c10e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	3318      	adds	r3, #24
 800c108:	4618      	mov	r0, r3
 800c10a:	f7fe fca8 	bl	800aa5e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c112:	2201      	movs	r2, #1
 800c114:	409a      	lsls	r2, r3
 800c116:	4b24      	ldr	r3, [pc, #144]	@ (800c1a8 <xTaskIncrementTick+0x160>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	4313      	orrs	r3, r2
 800c11c:	4a22      	ldr	r2, [pc, #136]	@ (800c1a8 <xTaskIncrementTick+0x160>)
 800c11e:	6013      	str	r3, [r2, #0]
 800c120:	68bb      	ldr	r3, [r7, #8]
 800c122:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c124:	4613      	mov	r3, r2
 800c126:	009b      	lsls	r3, r3, #2
 800c128:	4413      	add	r3, r2
 800c12a:	009b      	lsls	r3, r3, #2
 800c12c:	4a1f      	ldr	r2, [pc, #124]	@ (800c1ac <xTaskIncrementTick+0x164>)
 800c12e:	441a      	add	r2, r3
 800c130:	68bb      	ldr	r3, [r7, #8]
 800c132:	3304      	adds	r3, #4
 800c134:	4619      	mov	r1, r3
 800c136:	4610      	mov	r0, r2
 800c138:	f7fe fc34 	bl	800a9a4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c140:	4b1b      	ldr	r3, [pc, #108]	@ (800c1b0 <xTaskIncrementTick+0x168>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c146:	429a      	cmp	r2, r3
 800c148:	d3b9      	bcc.n	800c0be <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c14a:	2301      	movs	r3, #1
 800c14c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c14e:	e7b6      	b.n	800c0be <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c150:	4b17      	ldr	r3, [pc, #92]	@ (800c1b0 <xTaskIncrementTick+0x168>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c156:	4915      	ldr	r1, [pc, #84]	@ (800c1ac <xTaskIncrementTick+0x164>)
 800c158:	4613      	mov	r3, r2
 800c15a:	009b      	lsls	r3, r3, #2
 800c15c:	4413      	add	r3, r2
 800c15e:	009b      	lsls	r3, r3, #2
 800c160:	440b      	add	r3, r1
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	2b01      	cmp	r3, #1
 800c166:	d901      	bls.n	800c16c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c168:	2301      	movs	r3, #1
 800c16a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c16c:	4b11      	ldr	r3, [pc, #68]	@ (800c1b4 <xTaskIncrementTick+0x16c>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d007      	beq.n	800c184 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c174:	2301      	movs	r3, #1
 800c176:	617b      	str	r3, [r7, #20]
 800c178:	e004      	b.n	800c184 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c17a:	4b0f      	ldr	r3, [pc, #60]	@ (800c1b8 <xTaskIncrementTick+0x170>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	3301      	adds	r3, #1
 800c180:	4a0d      	ldr	r2, [pc, #52]	@ (800c1b8 <xTaskIncrementTick+0x170>)
 800c182:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c184:	697b      	ldr	r3, [r7, #20]
}
 800c186:	4618      	mov	r0, r3
 800c188:	3718      	adds	r7, #24
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}
 800c18e:	bf00      	nop
 800c190:	200032f4 	.word	0x200032f4
 800c194:	200032d0 	.word	0x200032d0
 800c198:	20003284 	.word	0x20003284
 800c19c:	20003288 	.word	0x20003288
 800c1a0:	200032e4 	.word	0x200032e4
 800c1a4:	200032ec 	.word	0x200032ec
 800c1a8:	200032d4 	.word	0x200032d4
 800c1ac:	200031d0 	.word	0x200031d0
 800c1b0:	200031cc 	.word	0x200031cc
 800c1b4:	200032e0 	.word	0x200032e0
 800c1b8:	200032dc 	.word	0x200032dc

0800c1bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b087      	sub	sp, #28
 800c1c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c1c2:	4b2a      	ldr	r3, [pc, #168]	@ (800c26c <vTaskSwitchContext+0xb0>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d003      	beq.n	800c1d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c1ca:	4b29      	ldr	r3, [pc, #164]	@ (800c270 <vTaskSwitchContext+0xb4>)
 800c1cc:	2201      	movs	r2, #1
 800c1ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c1d0:	e045      	b.n	800c25e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800c1d2:	4b27      	ldr	r3, [pc, #156]	@ (800c270 <vTaskSwitchContext+0xb4>)
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1d8:	4b26      	ldr	r3, [pc, #152]	@ (800c274 <vTaskSwitchContext+0xb8>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	fab3 f383 	clz	r3, r3
 800c1e4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c1e6:	7afb      	ldrb	r3, [r7, #11]
 800c1e8:	f1c3 031f 	rsb	r3, r3, #31
 800c1ec:	617b      	str	r3, [r7, #20]
 800c1ee:	4922      	ldr	r1, [pc, #136]	@ (800c278 <vTaskSwitchContext+0xbc>)
 800c1f0:	697a      	ldr	r2, [r7, #20]
 800c1f2:	4613      	mov	r3, r2
 800c1f4:	009b      	lsls	r3, r3, #2
 800c1f6:	4413      	add	r3, r2
 800c1f8:	009b      	lsls	r3, r3, #2
 800c1fa:	440b      	add	r3, r1
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d10b      	bne.n	800c21a <vTaskSwitchContext+0x5e>
	__asm volatile
 800c202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c206:	f383 8811 	msr	BASEPRI, r3
 800c20a:	f3bf 8f6f 	isb	sy
 800c20e:	f3bf 8f4f 	dsb	sy
 800c212:	607b      	str	r3, [r7, #4]
}
 800c214:	bf00      	nop
 800c216:	bf00      	nop
 800c218:	e7fd      	b.n	800c216 <vTaskSwitchContext+0x5a>
 800c21a:	697a      	ldr	r2, [r7, #20]
 800c21c:	4613      	mov	r3, r2
 800c21e:	009b      	lsls	r3, r3, #2
 800c220:	4413      	add	r3, r2
 800c222:	009b      	lsls	r3, r3, #2
 800c224:	4a14      	ldr	r2, [pc, #80]	@ (800c278 <vTaskSwitchContext+0xbc>)
 800c226:	4413      	add	r3, r2
 800c228:	613b      	str	r3, [r7, #16]
 800c22a:	693b      	ldr	r3, [r7, #16]
 800c22c:	685b      	ldr	r3, [r3, #4]
 800c22e:	685a      	ldr	r2, [r3, #4]
 800c230:	693b      	ldr	r3, [r7, #16]
 800c232:	605a      	str	r2, [r3, #4]
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	685a      	ldr	r2, [r3, #4]
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	3308      	adds	r3, #8
 800c23c:	429a      	cmp	r2, r3
 800c23e:	d104      	bne.n	800c24a <vTaskSwitchContext+0x8e>
 800c240:	693b      	ldr	r3, [r7, #16]
 800c242:	685b      	ldr	r3, [r3, #4]
 800c244:	685a      	ldr	r2, [r3, #4]
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	605a      	str	r2, [r3, #4]
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	685b      	ldr	r3, [r3, #4]
 800c24e:	68db      	ldr	r3, [r3, #12]
 800c250:	4a0a      	ldr	r2, [pc, #40]	@ (800c27c <vTaskSwitchContext+0xc0>)
 800c252:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c254:	4b09      	ldr	r3, [pc, #36]	@ (800c27c <vTaskSwitchContext+0xc0>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	334c      	adds	r3, #76	@ 0x4c
 800c25a:	4a09      	ldr	r2, [pc, #36]	@ (800c280 <vTaskSwitchContext+0xc4>)
 800c25c:	6013      	str	r3, [r2, #0]
}
 800c25e:	bf00      	nop
 800c260:	371c      	adds	r7, #28
 800c262:	46bd      	mov	sp, r7
 800c264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c268:	4770      	bx	lr
 800c26a:	bf00      	nop
 800c26c:	200032f4 	.word	0x200032f4
 800c270:	200032e0 	.word	0x200032e0
 800c274:	200032d4 	.word	0x200032d4
 800c278:	200031d0 	.word	0x200031d0
 800c27c:	200031cc 	.word	0x200031cc
 800c280:	200000b0 	.word	0x200000b0

0800c284 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b084      	sub	sp, #16
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d10b      	bne.n	800c2ac <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c298:	f383 8811 	msr	BASEPRI, r3
 800c29c:	f3bf 8f6f 	isb	sy
 800c2a0:	f3bf 8f4f 	dsb	sy
 800c2a4:	60fb      	str	r3, [r7, #12]
}
 800c2a6:	bf00      	nop
 800c2a8:	bf00      	nop
 800c2aa:	e7fd      	b.n	800c2a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c2ac:	4b07      	ldr	r3, [pc, #28]	@ (800c2cc <vTaskPlaceOnEventList+0x48>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	3318      	adds	r3, #24
 800c2b2:	4619      	mov	r1, r3
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f7fe fb99 	bl	800a9ec <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c2ba:	2101      	movs	r1, #1
 800c2bc:	6838      	ldr	r0, [r7, #0]
 800c2be:	f000 fbb9 	bl	800ca34 <prvAddCurrentTaskToDelayedList>
}
 800c2c2:	bf00      	nop
 800c2c4:	3710      	adds	r7, #16
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}
 800c2ca:	bf00      	nop
 800c2cc:	200031cc 	.word	0x200031cc

0800c2d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b086      	sub	sp, #24
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	60f8      	str	r0, [r7, #12]
 800c2d8:	60b9      	str	r1, [r7, #8]
 800c2da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d10b      	bne.n	800c2fa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c2e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2e6:	f383 8811 	msr	BASEPRI, r3
 800c2ea:	f3bf 8f6f 	isb	sy
 800c2ee:	f3bf 8f4f 	dsb	sy
 800c2f2:	617b      	str	r3, [r7, #20]
}
 800c2f4:	bf00      	nop
 800c2f6:	bf00      	nop
 800c2f8:	e7fd      	b.n	800c2f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c2fa:	4b0a      	ldr	r3, [pc, #40]	@ (800c324 <vTaskPlaceOnEventListRestricted+0x54>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	3318      	adds	r3, #24
 800c300:	4619      	mov	r1, r3
 800c302:	68f8      	ldr	r0, [r7, #12]
 800c304:	f7fe fb4e 	bl	800a9a4 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d002      	beq.n	800c314 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c30e:	f04f 33ff 	mov.w	r3, #4294967295
 800c312:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c314:	6879      	ldr	r1, [r7, #4]
 800c316:	68b8      	ldr	r0, [r7, #8]
 800c318:	f000 fb8c 	bl	800ca34 <prvAddCurrentTaskToDelayedList>
	}
 800c31c:	bf00      	nop
 800c31e:	3718      	adds	r7, #24
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}
 800c324:	200031cc 	.word	0x200031cc

0800c328 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b086      	sub	sp, #24
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	68db      	ldr	r3, [r3, #12]
 800c334:	68db      	ldr	r3, [r3, #12]
 800c336:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c338:	693b      	ldr	r3, [r7, #16]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d10b      	bne.n	800c356 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c33e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c342:	f383 8811 	msr	BASEPRI, r3
 800c346:	f3bf 8f6f 	isb	sy
 800c34a:	f3bf 8f4f 	dsb	sy
 800c34e:	60fb      	str	r3, [r7, #12]
}
 800c350:	bf00      	nop
 800c352:	bf00      	nop
 800c354:	e7fd      	b.n	800c352 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	3318      	adds	r3, #24
 800c35a:	4618      	mov	r0, r3
 800c35c:	f7fe fb7f 	bl	800aa5e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c360:	4b1d      	ldr	r3, [pc, #116]	@ (800c3d8 <xTaskRemoveFromEventList+0xb0>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d11c      	bne.n	800c3a2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	3304      	adds	r3, #4
 800c36c:	4618      	mov	r0, r3
 800c36e:	f7fe fb76 	bl	800aa5e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c376:	2201      	movs	r2, #1
 800c378:	409a      	lsls	r2, r3
 800c37a:	4b18      	ldr	r3, [pc, #96]	@ (800c3dc <xTaskRemoveFromEventList+0xb4>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	4313      	orrs	r3, r2
 800c380:	4a16      	ldr	r2, [pc, #88]	@ (800c3dc <xTaskRemoveFromEventList+0xb4>)
 800c382:	6013      	str	r3, [r2, #0]
 800c384:	693b      	ldr	r3, [r7, #16]
 800c386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c388:	4613      	mov	r3, r2
 800c38a:	009b      	lsls	r3, r3, #2
 800c38c:	4413      	add	r3, r2
 800c38e:	009b      	lsls	r3, r3, #2
 800c390:	4a13      	ldr	r2, [pc, #76]	@ (800c3e0 <xTaskRemoveFromEventList+0xb8>)
 800c392:	441a      	add	r2, r3
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	3304      	adds	r3, #4
 800c398:	4619      	mov	r1, r3
 800c39a:	4610      	mov	r0, r2
 800c39c:	f7fe fb02 	bl	800a9a4 <vListInsertEnd>
 800c3a0:	e005      	b.n	800c3ae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c3a2:	693b      	ldr	r3, [r7, #16]
 800c3a4:	3318      	adds	r3, #24
 800c3a6:	4619      	mov	r1, r3
 800c3a8:	480e      	ldr	r0, [pc, #56]	@ (800c3e4 <xTaskRemoveFromEventList+0xbc>)
 800c3aa:	f7fe fafb 	bl	800a9a4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c3ae:	693b      	ldr	r3, [r7, #16]
 800c3b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3b2:	4b0d      	ldr	r3, [pc, #52]	@ (800c3e8 <xTaskRemoveFromEventList+0xc0>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	d905      	bls.n	800c3c8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c3bc:	2301      	movs	r3, #1
 800c3be:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c3c0:	4b0a      	ldr	r3, [pc, #40]	@ (800c3ec <xTaskRemoveFromEventList+0xc4>)
 800c3c2:	2201      	movs	r2, #1
 800c3c4:	601a      	str	r2, [r3, #0]
 800c3c6:	e001      	b.n	800c3cc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c3cc:	697b      	ldr	r3, [r7, #20]
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3718      	adds	r7, #24
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}
 800c3d6:	bf00      	nop
 800c3d8:	200032f4 	.word	0x200032f4
 800c3dc:	200032d4 	.word	0x200032d4
 800c3e0:	200031d0 	.word	0x200031d0
 800c3e4:	2000328c 	.word	0x2000328c
 800c3e8:	200031cc 	.word	0x200031cc
 800c3ec:	200032e0 	.word	0x200032e0

0800c3f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c3f0:	b480      	push	{r7}
 800c3f2:	b083      	sub	sp, #12
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c3f8:	4b06      	ldr	r3, [pc, #24]	@ (800c414 <vTaskInternalSetTimeOutState+0x24>)
 800c3fa:	681a      	ldr	r2, [r3, #0]
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c400:	4b05      	ldr	r3, [pc, #20]	@ (800c418 <vTaskInternalSetTimeOutState+0x28>)
 800c402:	681a      	ldr	r2, [r3, #0]
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	605a      	str	r2, [r3, #4]
}
 800c408:	bf00      	nop
 800c40a:	370c      	adds	r7, #12
 800c40c:	46bd      	mov	sp, r7
 800c40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c412:	4770      	bx	lr
 800c414:	200032e4 	.word	0x200032e4
 800c418:	200032d0 	.word	0x200032d0

0800c41c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b088      	sub	sp, #32
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
 800c424:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d10b      	bne.n	800c444 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c42c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c430:	f383 8811 	msr	BASEPRI, r3
 800c434:	f3bf 8f6f 	isb	sy
 800c438:	f3bf 8f4f 	dsb	sy
 800c43c:	613b      	str	r3, [r7, #16]
}
 800c43e:	bf00      	nop
 800c440:	bf00      	nop
 800c442:	e7fd      	b.n	800c440 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d10b      	bne.n	800c462 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c44a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c44e:	f383 8811 	msr	BASEPRI, r3
 800c452:	f3bf 8f6f 	isb	sy
 800c456:	f3bf 8f4f 	dsb	sy
 800c45a:	60fb      	str	r3, [r7, #12]
}
 800c45c:	bf00      	nop
 800c45e:	bf00      	nop
 800c460:	e7fd      	b.n	800c45e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c462:	f001 f859 	bl	800d518 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c466:	4b1d      	ldr	r3, [pc, #116]	@ (800c4dc <xTaskCheckForTimeOut+0xc0>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	685b      	ldr	r3, [r3, #4]
 800c470:	69ba      	ldr	r2, [r7, #24]
 800c472:	1ad3      	subs	r3, r2, r3
 800c474:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c47e:	d102      	bne.n	800c486 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c480:	2300      	movs	r3, #0
 800c482:	61fb      	str	r3, [r7, #28]
 800c484:	e023      	b.n	800c4ce <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681a      	ldr	r2, [r3, #0]
 800c48a:	4b15      	ldr	r3, [pc, #84]	@ (800c4e0 <xTaskCheckForTimeOut+0xc4>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	429a      	cmp	r2, r3
 800c490:	d007      	beq.n	800c4a2 <xTaskCheckForTimeOut+0x86>
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	685b      	ldr	r3, [r3, #4]
 800c496:	69ba      	ldr	r2, [r7, #24]
 800c498:	429a      	cmp	r2, r3
 800c49a:	d302      	bcc.n	800c4a2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c49c:	2301      	movs	r3, #1
 800c49e:	61fb      	str	r3, [r7, #28]
 800c4a0:	e015      	b.n	800c4ce <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	697a      	ldr	r2, [r7, #20]
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	d20b      	bcs.n	800c4c4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	681a      	ldr	r2, [r3, #0]
 800c4b0:	697b      	ldr	r3, [r7, #20]
 800c4b2:	1ad2      	subs	r2, r2, r3
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f7ff ff99 	bl	800c3f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	61fb      	str	r3, [r7, #28]
 800c4c2:	e004      	b.n	800c4ce <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c4ce:	f001 f855 	bl	800d57c <vPortExitCritical>

	return xReturn;
 800c4d2:	69fb      	ldr	r3, [r7, #28]
}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3720      	adds	r7, #32
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}
 800c4dc:	200032d0 	.word	0x200032d0
 800c4e0:	200032e4 	.word	0x200032e4

0800c4e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c4e8:	4b03      	ldr	r3, [pc, #12]	@ (800c4f8 <vTaskMissedYield+0x14>)
 800c4ea:	2201      	movs	r2, #1
 800c4ec:	601a      	str	r2, [r3, #0]
}
 800c4ee:	bf00      	nop
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f6:	4770      	bx	lr
 800c4f8:	200032e0 	.word	0x200032e0

0800c4fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b082      	sub	sp, #8
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c504:	f000 f852 	bl	800c5ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c508:	4b06      	ldr	r3, [pc, #24]	@ (800c524 <prvIdleTask+0x28>)
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	2b01      	cmp	r3, #1
 800c50e:	d9f9      	bls.n	800c504 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c510:	4b05      	ldr	r3, [pc, #20]	@ (800c528 <prvIdleTask+0x2c>)
 800c512:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c516:	601a      	str	r2, [r3, #0]
 800c518:	f3bf 8f4f 	dsb	sy
 800c51c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c520:	e7f0      	b.n	800c504 <prvIdleTask+0x8>
 800c522:	bf00      	nop
 800c524:	200031d0 	.word	0x200031d0
 800c528:	e000ed04 	.word	0xe000ed04

0800c52c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b082      	sub	sp, #8
 800c530:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c532:	2300      	movs	r3, #0
 800c534:	607b      	str	r3, [r7, #4]
 800c536:	e00c      	b.n	800c552 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c538:	687a      	ldr	r2, [r7, #4]
 800c53a:	4613      	mov	r3, r2
 800c53c:	009b      	lsls	r3, r3, #2
 800c53e:	4413      	add	r3, r2
 800c540:	009b      	lsls	r3, r3, #2
 800c542:	4a12      	ldr	r2, [pc, #72]	@ (800c58c <prvInitialiseTaskLists+0x60>)
 800c544:	4413      	add	r3, r2
 800c546:	4618      	mov	r0, r3
 800c548:	f7fe f9ff 	bl	800a94a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	3301      	adds	r3, #1
 800c550:	607b      	str	r3, [r7, #4]
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2b06      	cmp	r3, #6
 800c556:	d9ef      	bls.n	800c538 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c558:	480d      	ldr	r0, [pc, #52]	@ (800c590 <prvInitialiseTaskLists+0x64>)
 800c55a:	f7fe f9f6 	bl	800a94a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c55e:	480d      	ldr	r0, [pc, #52]	@ (800c594 <prvInitialiseTaskLists+0x68>)
 800c560:	f7fe f9f3 	bl	800a94a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c564:	480c      	ldr	r0, [pc, #48]	@ (800c598 <prvInitialiseTaskLists+0x6c>)
 800c566:	f7fe f9f0 	bl	800a94a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c56a:	480c      	ldr	r0, [pc, #48]	@ (800c59c <prvInitialiseTaskLists+0x70>)
 800c56c:	f7fe f9ed 	bl	800a94a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c570:	480b      	ldr	r0, [pc, #44]	@ (800c5a0 <prvInitialiseTaskLists+0x74>)
 800c572:	f7fe f9ea 	bl	800a94a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c576:	4b0b      	ldr	r3, [pc, #44]	@ (800c5a4 <prvInitialiseTaskLists+0x78>)
 800c578:	4a05      	ldr	r2, [pc, #20]	@ (800c590 <prvInitialiseTaskLists+0x64>)
 800c57a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c57c:	4b0a      	ldr	r3, [pc, #40]	@ (800c5a8 <prvInitialiseTaskLists+0x7c>)
 800c57e:	4a05      	ldr	r2, [pc, #20]	@ (800c594 <prvInitialiseTaskLists+0x68>)
 800c580:	601a      	str	r2, [r3, #0]
}
 800c582:	bf00      	nop
 800c584:	3708      	adds	r7, #8
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}
 800c58a:	bf00      	nop
 800c58c:	200031d0 	.word	0x200031d0
 800c590:	2000325c 	.word	0x2000325c
 800c594:	20003270 	.word	0x20003270
 800c598:	2000328c 	.word	0x2000328c
 800c59c:	200032a0 	.word	0x200032a0
 800c5a0:	200032b8 	.word	0x200032b8
 800c5a4:	20003284 	.word	0x20003284
 800c5a8:	20003288 	.word	0x20003288

0800c5ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b082      	sub	sp, #8
 800c5b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c5b2:	e019      	b.n	800c5e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c5b4:	f000 ffb0 	bl	800d518 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5b8:	4b10      	ldr	r3, [pc, #64]	@ (800c5fc <prvCheckTasksWaitingTermination+0x50>)
 800c5ba:	68db      	ldr	r3, [r3, #12]
 800c5bc:	68db      	ldr	r3, [r3, #12]
 800c5be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	3304      	adds	r3, #4
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	f7fe fa4a 	bl	800aa5e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c5ca:	4b0d      	ldr	r3, [pc, #52]	@ (800c600 <prvCheckTasksWaitingTermination+0x54>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	3b01      	subs	r3, #1
 800c5d0:	4a0b      	ldr	r2, [pc, #44]	@ (800c600 <prvCheckTasksWaitingTermination+0x54>)
 800c5d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c5d4:	4b0b      	ldr	r3, [pc, #44]	@ (800c604 <prvCheckTasksWaitingTermination+0x58>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	3b01      	subs	r3, #1
 800c5da:	4a0a      	ldr	r2, [pc, #40]	@ (800c604 <prvCheckTasksWaitingTermination+0x58>)
 800c5dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c5de:	f000 ffcd 	bl	800d57c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f000 f810 	bl	800c608 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c5e8:	4b06      	ldr	r3, [pc, #24]	@ (800c604 <prvCheckTasksWaitingTermination+0x58>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d1e1      	bne.n	800c5b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c5f0:	bf00      	nop
 800c5f2:	bf00      	nop
 800c5f4:	3708      	adds	r7, #8
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}
 800c5fa:	bf00      	nop
 800c5fc:	200032a0 	.word	0x200032a0
 800c600:	200032cc 	.word	0x200032cc
 800c604:	200032b4 	.word	0x200032b4

0800c608 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b084      	sub	sp, #16
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	334c      	adds	r3, #76	@ 0x4c
 800c614:	4618      	mov	r0, r3
 800c616:	f001 fae1 	bl	800dbdc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800c620:	2b00      	cmp	r3, #0
 800c622:	d108      	bne.n	800c636 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c628:	4618      	mov	r0, r3
 800c62a:	f001 f965 	bl	800d8f8 <vPortFree>
				vPortFree( pxTCB );
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f001 f962 	bl	800d8f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c634:	e019      	b.n	800c66a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800c63c:	2b01      	cmp	r3, #1
 800c63e:	d103      	bne.n	800c648 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f001 f959 	bl	800d8f8 <vPortFree>
	}
 800c646:	e010      	b.n	800c66a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800c64e:	2b02      	cmp	r3, #2
 800c650:	d00b      	beq.n	800c66a <prvDeleteTCB+0x62>
	__asm volatile
 800c652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c656:	f383 8811 	msr	BASEPRI, r3
 800c65a:	f3bf 8f6f 	isb	sy
 800c65e:	f3bf 8f4f 	dsb	sy
 800c662:	60fb      	str	r3, [r7, #12]
}
 800c664:	bf00      	nop
 800c666:	bf00      	nop
 800c668:	e7fd      	b.n	800c666 <prvDeleteTCB+0x5e>
	}
 800c66a:	bf00      	nop
 800c66c:	3710      	adds	r7, #16
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}
	...

0800c674 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c674:	b480      	push	{r7}
 800c676:	b083      	sub	sp, #12
 800c678:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c67a:	4b0c      	ldr	r3, [pc, #48]	@ (800c6ac <prvResetNextTaskUnblockTime+0x38>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d104      	bne.n	800c68e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c684:	4b0a      	ldr	r3, [pc, #40]	@ (800c6b0 <prvResetNextTaskUnblockTime+0x3c>)
 800c686:	f04f 32ff 	mov.w	r2, #4294967295
 800c68a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c68c:	e008      	b.n	800c6a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c68e:	4b07      	ldr	r3, [pc, #28]	@ (800c6ac <prvResetNextTaskUnblockTime+0x38>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	68db      	ldr	r3, [r3, #12]
 800c694:	68db      	ldr	r3, [r3, #12]
 800c696:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	685b      	ldr	r3, [r3, #4]
 800c69c:	4a04      	ldr	r2, [pc, #16]	@ (800c6b0 <prvResetNextTaskUnblockTime+0x3c>)
 800c69e:	6013      	str	r3, [r2, #0]
}
 800c6a0:	bf00      	nop
 800c6a2:	370c      	adds	r7, #12
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6aa:	4770      	bx	lr
 800c6ac:	20003284 	.word	0x20003284
 800c6b0:	200032ec 	.word	0x200032ec

0800c6b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c6b4:	b480      	push	{r7}
 800c6b6:	b083      	sub	sp, #12
 800c6b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c6ba:	4b0b      	ldr	r3, [pc, #44]	@ (800c6e8 <xTaskGetSchedulerState+0x34>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d102      	bne.n	800c6c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	607b      	str	r3, [r7, #4]
 800c6c6:	e008      	b.n	800c6da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c6c8:	4b08      	ldr	r3, [pc, #32]	@ (800c6ec <xTaskGetSchedulerState+0x38>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d102      	bne.n	800c6d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c6d0:	2302      	movs	r3, #2
 800c6d2:	607b      	str	r3, [r7, #4]
 800c6d4:	e001      	b.n	800c6da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c6da:	687b      	ldr	r3, [r7, #4]
	}
 800c6dc:	4618      	mov	r0, r3
 800c6de:	370c      	adds	r7, #12
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e6:	4770      	bx	lr
 800c6e8:	200032d8 	.word	0x200032d8
 800c6ec:	200032f4 	.word	0x200032f4

0800c6f0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b084      	sub	sp, #16
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d05e      	beq.n	800c7c4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c70a:	4b31      	ldr	r3, [pc, #196]	@ (800c7d0 <xTaskPriorityInherit+0xe0>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c710:	429a      	cmp	r2, r3
 800c712:	d24e      	bcs.n	800c7b2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	699b      	ldr	r3, [r3, #24]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	db06      	blt.n	800c72a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c71c:	4b2c      	ldr	r3, [pc, #176]	@ (800c7d0 <xTaskPriorityInherit+0xe0>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c722:	f1c3 0207 	rsb	r2, r3, #7
 800c726:	68bb      	ldr	r3, [r7, #8]
 800c728:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	6959      	ldr	r1, [r3, #20]
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c732:	4613      	mov	r3, r2
 800c734:	009b      	lsls	r3, r3, #2
 800c736:	4413      	add	r3, r2
 800c738:	009b      	lsls	r3, r3, #2
 800c73a:	4a26      	ldr	r2, [pc, #152]	@ (800c7d4 <xTaskPriorityInherit+0xe4>)
 800c73c:	4413      	add	r3, r2
 800c73e:	4299      	cmp	r1, r3
 800c740:	d12f      	bne.n	800c7a2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	3304      	adds	r3, #4
 800c746:	4618      	mov	r0, r3
 800c748:	f7fe f989 	bl	800aa5e <uxListRemove>
 800c74c:	4603      	mov	r3, r0
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d10a      	bne.n	800c768 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c756:	2201      	movs	r2, #1
 800c758:	fa02 f303 	lsl.w	r3, r2, r3
 800c75c:	43da      	mvns	r2, r3
 800c75e:	4b1e      	ldr	r3, [pc, #120]	@ (800c7d8 <xTaskPriorityInherit+0xe8>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	4013      	ands	r3, r2
 800c764:	4a1c      	ldr	r2, [pc, #112]	@ (800c7d8 <xTaskPriorityInherit+0xe8>)
 800c766:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c768:	4b19      	ldr	r3, [pc, #100]	@ (800c7d0 <xTaskPriorityInherit+0xe0>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c776:	2201      	movs	r2, #1
 800c778:	409a      	lsls	r2, r3
 800c77a:	4b17      	ldr	r3, [pc, #92]	@ (800c7d8 <xTaskPriorityInherit+0xe8>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	4313      	orrs	r3, r2
 800c780:	4a15      	ldr	r2, [pc, #84]	@ (800c7d8 <xTaskPriorityInherit+0xe8>)
 800c782:	6013      	str	r3, [r2, #0]
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c788:	4613      	mov	r3, r2
 800c78a:	009b      	lsls	r3, r3, #2
 800c78c:	4413      	add	r3, r2
 800c78e:	009b      	lsls	r3, r3, #2
 800c790:	4a10      	ldr	r2, [pc, #64]	@ (800c7d4 <xTaskPriorityInherit+0xe4>)
 800c792:	441a      	add	r2, r3
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	3304      	adds	r3, #4
 800c798:	4619      	mov	r1, r3
 800c79a:	4610      	mov	r0, r2
 800c79c:	f7fe f902 	bl	800a9a4 <vListInsertEnd>
 800c7a0:	e004      	b.n	800c7ac <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c7a2:	4b0b      	ldr	r3, [pc, #44]	@ (800c7d0 <xTaskPriorityInherit+0xe0>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7a8:	68bb      	ldr	r3, [r7, #8]
 800c7aa:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	60fb      	str	r3, [r7, #12]
 800c7b0:	e008      	b.n	800c7c4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c7b6:	4b06      	ldr	r3, [pc, #24]	@ (800c7d0 <xTaskPriorityInherit+0xe0>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7bc:	429a      	cmp	r2, r3
 800c7be:	d201      	bcs.n	800c7c4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c7c0:	2301      	movs	r3, #1
 800c7c2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
	}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3710      	adds	r7, #16
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}
 800c7ce:	bf00      	nop
 800c7d0:	200031cc 	.word	0x200031cc
 800c7d4:	200031d0 	.word	0x200031d0
 800c7d8:	200032d4 	.word	0x200032d4

0800c7dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b086      	sub	sp, #24
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d070      	beq.n	800c8d4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c7f2:	4b3b      	ldr	r3, [pc, #236]	@ (800c8e0 <xTaskPriorityDisinherit+0x104>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	693a      	ldr	r2, [r7, #16]
 800c7f8:	429a      	cmp	r2, r3
 800c7fa:	d00b      	beq.n	800c814 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c7fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c800:	f383 8811 	msr	BASEPRI, r3
 800c804:	f3bf 8f6f 	isb	sy
 800c808:	f3bf 8f4f 	dsb	sy
 800c80c:	60fb      	str	r3, [r7, #12]
}
 800c80e:	bf00      	nop
 800c810:	bf00      	nop
 800c812:	e7fd      	b.n	800c810 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c814:	693b      	ldr	r3, [r7, #16]
 800c816:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d10b      	bne.n	800c834 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c81c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c820:	f383 8811 	msr	BASEPRI, r3
 800c824:	f3bf 8f6f 	isb	sy
 800c828:	f3bf 8f4f 	dsb	sy
 800c82c:	60bb      	str	r3, [r7, #8]
}
 800c82e:	bf00      	nop
 800c830:	bf00      	nop
 800c832:	e7fd      	b.n	800c830 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c838:	1e5a      	subs	r2, r3, #1
 800c83a:	693b      	ldr	r3, [r7, #16]
 800c83c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c842:	693b      	ldr	r3, [r7, #16]
 800c844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c846:	429a      	cmp	r2, r3
 800c848:	d044      	beq.n	800c8d4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d140      	bne.n	800c8d4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c852:	693b      	ldr	r3, [r7, #16]
 800c854:	3304      	adds	r3, #4
 800c856:	4618      	mov	r0, r3
 800c858:	f7fe f901 	bl	800aa5e <uxListRemove>
 800c85c:	4603      	mov	r3, r0
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d115      	bne.n	800c88e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c862:	693b      	ldr	r3, [r7, #16]
 800c864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c866:	491f      	ldr	r1, [pc, #124]	@ (800c8e4 <xTaskPriorityDisinherit+0x108>)
 800c868:	4613      	mov	r3, r2
 800c86a:	009b      	lsls	r3, r3, #2
 800c86c:	4413      	add	r3, r2
 800c86e:	009b      	lsls	r3, r3, #2
 800c870:	440b      	add	r3, r1
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d10a      	bne.n	800c88e <xTaskPriorityDisinherit+0xb2>
 800c878:	693b      	ldr	r3, [r7, #16]
 800c87a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c87c:	2201      	movs	r2, #1
 800c87e:	fa02 f303 	lsl.w	r3, r2, r3
 800c882:	43da      	mvns	r2, r3
 800c884:	4b18      	ldr	r3, [pc, #96]	@ (800c8e8 <xTaskPriorityDisinherit+0x10c>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	4013      	ands	r3, r2
 800c88a:	4a17      	ldr	r2, [pc, #92]	@ (800c8e8 <xTaskPriorityDisinherit+0x10c>)
 800c88c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c892:	693b      	ldr	r3, [r7, #16]
 800c894:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c89a:	f1c3 0207 	rsb	r2, r3, #7
 800c89e:	693b      	ldr	r3, [r7, #16]
 800c8a0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8a6:	2201      	movs	r2, #1
 800c8a8:	409a      	lsls	r2, r3
 800c8aa:	4b0f      	ldr	r3, [pc, #60]	@ (800c8e8 <xTaskPriorityDisinherit+0x10c>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	4313      	orrs	r3, r2
 800c8b0:	4a0d      	ldr	r2, [pc, #52]	@ (800c8e8 <xTaskPriorityDisinherit+0x10c>)
 800c8b2:	6013      	str	r3, [r2, #0]
 800c8b4:	693b      	ldr	r3, [r7, #16]
 800c8b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8b8:	4613      	mov	r3, r2
 800c8ba:	009b      	lsls	r3, r3, #2
 800c8bc:	4413      	add	r3, r2
 800c8be:	009b      	lsls	r3, r3, #2
 800c8c0:	4a08      	ldr	r2, [pc, #32]	@ (800c8e4 <xTaskPriorityDisinherit+0x108>)
 800c8c2:	441a      	add	r2, r3
 800c8c4:	693b      	ldr	r3, [r7, #16]
 800c8c6:	3304      	adds	r3, #4
 800c8c8:	4619      	mov	r1, r3
 800c8ca:	4610      	mov	r0, r2
 800c8cc:	f7fe f86a 	bl	800a9a4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c8d4:	697b      	ldr	r3, [r7, #20]
	}
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	3718      	adds	r7, #24
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}
 800c8de:	bf00      	nop
 800c8e0:	200031cc 	.word	0x200031cc
 800c8e4:	200031d0 	.word	0x200031d0
 800c8e8:	200032d4 	.word	0x200032d4

0800c8ec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b088      	sub	sp, #32
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
 800c8f4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d079      	beq.n	800c9f8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c904:	69bb      	ldr	r3, [r7, #24]
 800c906:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d10b      	bne.n	800c924 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800c90c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c910:	f383 8811 	msr	BASEPRI, r3
 800c914:	f3bf 8f6f 	isb	sy
 800c918:	f3bf 8f4f 	dsb	sy
 800c91c:	60fb      	str	r3, [r7, #12]
}
 800c91e:	bf00      	nop
 800c920:	bf00      	nop
 800c922:	e7fd      	b.n	800c920 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c924:	69bb      	ldr	r3, [r7, #24]
 800c926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c928:	683a      	ldr	r2, [r7, #0]
 800c92a:	429a      	cmp	r2, r3
 800c92c:	d902      	bls.n	800c934 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	61fb      	str	r3, [r7, #28]
 800c932:	e002      	b.n	800c93a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c934:	69bb      	ldr	r3, [r7, #24]
 800c936:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c938:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c93a:	69bb      	ldr	r3, [r7, #24]
 800c93c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c93e:	69fa      	ldr	r2, [r7, #28]
 800c940:	429a      	cmp	r2, r3
 800c942:	d059      	beq.n	800c9f8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c944:	69bb      	ldr	r3, [r7, #24]
 800c946:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c948:	697a      	ldr	r2, [r7, #20]
 800c94a:	429a      	cmp	r2, r3
 800c94c:	d154      	bne.n	800c9f8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c94e:	4b2c      	ldr	r3, [pc, #176]	@ (800ca00 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	69ba      	ldr	r2, [r7, #24]
 800c954:	429a      	cmp	r2, r3
 800c956:	d10b      	bne.n	800c970 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800c958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c95c:	f383 8811 	msr	BASEPRI, r3
 800c960:	f3bf 8f6f 	isb	sy
 800c964:	f3bf 8f4f 	dsb	sy
 800c968:	60bb      	str	r3, [r7, #8]
}
 800c96a:	bf00      	nop
 800c96c:	bf00      	nop
 800c96e:	e7fd      	b.n	800c96c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c970:	69bb      	ldr	r3, [r7, #24]
 800c972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c974:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c976:	69bb      	ldr	r3, [r7, #24]
 800c978:	69fa      	ldr	r2, [r7, #28]
 800c97a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c97c:	69bb      	ldr	r3, [r7, #24]
 800c97e:	699b      	ldr	r3, [r3, #24]
 800c980:	2b00      	cmp	r3, #0
 800c982:	db04      	blt.n	800c98e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c984:	69fb      	ldr	r3, [r7, #28]
 800c986:	f1c3 0207 	rsb	r2, r3, #7
 800c98a:	69bb      	ldr	r3, [r7, #24]
 800c98c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c98e:	69bb      	ldr	r3, [r7, #24]
 800c990:	6959      	ldr	r1, [r3, #20]
 800c992:	693a      	ldr	r2, [r7, #16]
 800c994:	4613      	mov	r3, r2
 800c996:	009b      	lsls	r3, r3, #2
 800c998:	4413      	add	r3, r2
 800c99a:	009b      	lsls	r3, r3, #2
 800c99c:	4a19      	ldr	r2, [pc, #100]	@ (800ca04 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c99e:	4413      	add	r3, r2
 800c9a0:	4299      	cmp	r1, r3
 800c9a2:	d129      	bne.n	800c9f8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c9a4:	69bb      	ldr	r3, [r7, #24]
 800c9a6:	3304      	adds	r3, #4
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	f7fe f858 	bl	800aa5e <uxListRemove>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d10a      	bne.n	800c9ca <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800c9b4:	69bb      	ldr	r3, [r7, #24]
 800c9b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9b8:	2201      	movs	r2, #1
 800c9ba:	fa02 f303 	lsl.w	r3, r2, r3
 800c9be:	43da      	mvns	r2, r3
 800c9c0:	4b11      	ldr	r3, [pc, #68]	@ (800ca08 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	4013      	ands	r3, r2
 800c9c6:	4a10      	ldr	r2, [pc, #64]	@ (800ca08 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800c9c8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c9ca:	69bb      	ldr	r3, [r7, #24]
 800c9cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9ce:	2201      	movs	r2, #1
 800c9d0:	409a      	lsls	r2, r3
 800c9d2:	4b0d      	ldr	r3, [pc, #52]	@ (800ca08 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	4313      	orrs	r3, r2
 800c9d8:	4a0b      	ldr	r2, [pc, #44]	@ (800ca08 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800c9da:	6013      	str	r3, [r2, #0]
 800c9dc:	69bb      	ldr	r3, [r7, #24]
 800c9de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9e0:	4613      	mov	r3, r2
 800c9e2:	009b      	lsls	r3, r3, #2
 800c9e4:	4413      	add	r3, r2
 800c9e6:	009b      	lsls	r3, r3, #2
 800c9e8:	4a06      	ldr	r2, [pc, #24]	@ (800ca04 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c9ea:	441a      	add	r2, r3
 800c9ec:	69bb      	ldr	r3, [r7, #24]
 800c9ee:	3304      	adds	r3, #4
 800c9f0:	4619      	mov	r1, r3
 800c9f2:	4610      	mov	r0, r2
 800c9f4:	f7fd ffd6 	bl	800a9a4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c9f8:	bf00      	nop
 800c9fa:	3720      	adds	r7, #32
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}
 800ca00:	200031cc 	.word	0x200031cc
 800ca04:	200031d0 	.word	0x200031d0
 800ca08:	200032d4 	.word	0x200032d4

0800ca0c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ca0c:	b480      	push	{r7}
 800ca0e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ca10:	4b07      	ldr	r3, [pc, #28]	@ (800ca30 <pvTaskIncrementMutexHeldCount+0x24>)
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d004      	beq.n	800ca22 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ca18:	4b05      	ldr	r3, [pc, #20]	@ (800ca30 <pvTaskIncrementMutexHeldCount+0x24>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ca1e:	3201      	adds	r2, #1
 800ca20:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800ca22:	4b03      	ldr	r3, [pc, #12]	@ (800ca30 <pvTaskIncrementMutexHeldCount+0x24>)
 800ca24:	681b      	ldr	r3, [r3, #0]
	}
 800ca26:	4618      	mov	r0, r3
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2e:	4770      	bx	lr
 800ca30:	200031cc 	.word	0x200031cc

0800ca34 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b084      	sub	sp, #16
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
 800ca3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ca3e:	4b29      	ldr	r3, [pc, #164]	@ (800cae4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ca44:	4b28      	ldr	r3, [pc, #160]	@ (800cae8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	3304      	adds	r3, #4
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f7fe f807 	bl	800aa5e <uxListRemove>
 800ca50:	4603      	mov	r3, r0
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d10b      	bne.n	800ca6e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ca56:	4b24      	ldr	r3, [pc, #144]	@ (800cae8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca5c:	2201      	movs	r2, #1
 800ca5e:	fa02 f303 	lsl.w	r3, r2, r3
 800ca62:	43da      	mvns	r2, r3
 800ca64:	4b21      	ldr	r3, [pc, #132]	@ (800caec <prvAddCurrentTaskToDelayedList+0xb8>)
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	4013      	ands	r3, r2
 800ca6a:	4a20      	ldr	r2, [pc, #128]	@ (800caec <prvAddCurrentTaskToDelayedList+0xb8>)
 800ca6c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca74:	d10a      	bne.n	800ca8c <prvAddCurrentTaskToDelayedList+0x58>
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d007      	beq.n	800ca8c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca7c:	4b1a      	ldr	r3, [pc, #104]	@ (800cae8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	3304      	adds	r3, #4
 800ca82:	4619      	mov	r1, r3
 800ca84:	481a      	ldr	r0, [pc, #104]	@ (800caf0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ca86:	f7fd ff8d 	bl	800a9a4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ca8a:	e026      	b.n	800cada <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ca8c:	68fa      	ldr	r2, [r7, #12]
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	4413      	add	r3, r2
 800ca92:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ca94:	4b14      	ldr	r3, [pc, #80]	@ (800cae8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	68ba      	ldr	r2, [r7, #8]
 800ca9a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ca9c:	68ba      	ldr	r2, [r7, #8]
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	429a      	cmp	r2, r3
 800caa2:	d209      	bcs.n	800cab8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800caa4:	4b13      	ldr	r3, [pc, #76]	@ (800caf4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800caa6:	681a      	ldr	r2, [r3, #0]
 800caa8:	4b0f      	ldr	r3, [pc, #60]	@ (800cae8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	3304      	adds	r3, #4
 800caae:	4619      	mov	r1, r3
 800cab0:	4610      	mov	r0, r2
 800cab2:	f7fd ff9b 	bl	800a9ec <vListInsert>
}
 800cab6:	e010      	b.n	800cada <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cab8:	4b0f      	ldr	r3, [pc, #60]	@ (800caf8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800caba:	681a      	ldr	r2, [r3, #0]
 800cabc:	4b0a      	ldr	r3, [pc, #40]	@ (800cae8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	3304      	adds	r3, #4
 800cac2:	4619      	mov	r1, r3
 800cac4:	4610      	mov	r0, r2
 800cac6:	f7fd ff91 	bl	800a9ec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800caca:	4b0c      	ldr	r3, [pc, #48]	@ (800cafc <prvAddCurrentTaskToDelayedList+0xc8>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	68ba      	ldr	r2, [r7, #8]
 800cad0:	429a      	cmp	r2, r3
 800cad2:	d202      	bcs.n	800cada <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800cad4:	4a09      	ldr	r2, [pc, #36]	@ (800cafc <prvAddCurrentTaskToDelayedList+0xc8>)
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	6013      	str	r3, [r2, #0]
}
 800cada:	bf00      	nop
 800cadc:	3710      	adds	r7, #16
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}
 800cae2:	bf00      	nop
 800cae4:	200032d0 	.word	0x200032d0
 800cae8:	200031cc 	.word	0x200031cc
 800caec:	200032d4 	.word	0x200032d4
 800caf0:	200032b8 	.word	0x200032b8
 800caf4:	20003288 	.word	0x20003288
 800caf8:	20003284 	.word	0x20003284
 800cafc:	200032ec 	.word	0x200032ec

0800cb00 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b08a      	sub	sp, #40	@ 0x28
 800cb04:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cb06:	2300      	movs	r3, #0
 800cb08:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cb0a:	f000 fb95 	bl	800d238 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cb0e:	4b1d      	ldr	r3, [pc, #116]	@ (800cb84 <xTimerCreateTimerTask+0x84>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d021      	beq.n	800cb5a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cb16:	2300      	movs	r3, #0
 800cb18:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cb1e:	1d3a      	adds	r2, r7, #4
 800cb20:	f107 0108 	add.w	r1, r7, #8
 800cb24:	f107 030c 	add.w	r3, r7, #12
 800cb28:	4618      	mov	r0, r3
 800cb2a:	f7f3 ff3b 	bl	80009a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cb2e:	6879      	ldr	r1, [r7, #4]
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	68fa      	ldr	r2, [r7, #12]
 800cb34:	9202      	str	r2, [sp, #8]
 800cb36:	9301      	str	r3, [sp, #4]
 800cb38:	2302      	movs	r3, #2
 800cb3a:	9300      	str	r3, [sp, #0]
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	460a      	mov	r2, r1
 800cb40:	4911      	ldr	r1, [pc, #68]	@ (800cb88 <xTimerCreateTimerTask+0x88>)
 800cb42:	4812      	ldr	r0, [pc, #72]	@ (800cb8c <xTimerCreateTimerTask+0x8c>)
 800cb44:	f7fe ff6e 	bl	800ba24 <xTaskCreateStatic>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	4a11      	ldr	r2, [pc, #68]	@ (800cb90 <xTimerCreateTimerTask+0x90>)
 800cb4c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cb4e:	4b10      	ldr	r3, [pc, #64]	@ (800cb90 <xTimerCreateTimerTask+0x90>)
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d001      	beq.n	800cb5a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cb56:	2301      	movs	r3, #1
 800cb58:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d10b      	bne.n	800cb78 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800cb60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb64:	f383 8811 	msr	BASEPRI, r3
 800cb68:	f3bf 8f6f 	isb	sy
 800cb6c:	f3bf 8f4f 	dsb	sy
 800cb70:	613b      	str	r3, [r7, #16]
}
 800cb72:	bf00      	nop
 800cb74:	bf00      	nop
 800cb76:	e7fd      	b.n	800cb74 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cb78:	697b      	ldr	r3, [r7, #20]
}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	3718      	adds	r7, #24
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}
 800cb82:	bf00      	nop
 800cb84:	20003328 	.word	0x20003328
 800cb88:	0800f760 	.word	0x0800f760
 800cb8c:	0800ce09 	.word	0x0800ce09
 800cb90:	2000332c 	.word	0x2000332c

0800cb94 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b088      	sub	sp, #32
 800cb98:	af02      	add	r7, sp, #8
 800cb9a:	60f8      	str	r0, [r7, #12]
 800cb9c:	60b9      	str	r1, [r7, #8]
 800cb9e:	607a      	str	r2, [r7, #4]
 800cba0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800cba2:	2028      	movs	r0, #40	@ 0x28
 800cba4:	f000 fdda 	bl	800d75c <pvPortMalloc>
 800cba8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d00d      	beq.n	800cbcc <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800cbb0:	697b      	ldr	r3, [r7, #20]
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800cbb8:	697b      	ldr	r3, [r7, #20]
 800cbba:	9301      	str	r3, [sp, #4]
 800cbbc:	6a3b      	ldr	r3, [r7, #32]
 800cbbe:	9300      	str	r3, [sp, #0]
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	687a      	ldr	r2, [r7, #4]
 800cbc4:	68b9      	ldr	r1, [r7, #8]
 800cbc6:	68f8      	ldr	r0, [r7, #12]
 800cbc8:	f000 f845 	bl	800cc56 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800cbcc:	697b      	ldr	r3, [r7, #20]
	}
 800cbce:	4618      	mov	r0, r3
 800cbd0:	3718      	adds	r7, #24
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bd80      	pop	{r7, pc}

0800cbd6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800cbd6:	b580      	push	{r7, lr}
 800cbd8:	b08a      	sub	sp, #40	@ 0x28
 800cbda:	af02      	add	r7, sp, #8
 800cbdc:	60f8      	str	r0, [r7, #12]
 800cbde:	60b9      	str	r1, [r7, #8]
 800cbe0:	607a      	str	r2, [r7, #4]
 800cbe2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800cbe4:	2328      	movs	r3, #40	@ 0x28
 800cbe6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800cbe8:	693b      	ldr	r3, [r7, #16]
 800cbea:	2b28      	cmp	r3, #40	@ 0x28
 800cbec:	d00b      	beq.n	800cc06 <xTimerCreateStatic+0x30>
	__asm volatile
 800cbee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbf2:	f383 8811 	msr	BASEPRI, r3
 800cbf6:	f3bf 8f6f 	isb	sy
 800cbfa:	f3bf 8f4f 	dsb	sy
 800cbfe:	61bb      	str	r3, [r7, #24]
}
 800cc00:	bf00      	nop
 800cc02:	bf00      	nop
 800cc04:	e7fd      	b.n	800cc02 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cc06:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800cc08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d10b      	bne.n	800cc26 <xTimerCreateStatic+0x50>
	__asm volatile
 800cc0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc12:	f383 8811 	msr	BASEPRI, r3
 800cc16:	f3bf 8f6f 	isb	sy
 800cc1a:	f3bf 8f4f 	dsb	sy
 800cc1e:	617b      	str	r3, [r7, #20]
}
 800cc20:	bf00      	nop
 800cc22:	bf00      	nop
 800cc24:	e7fd      	b.n	800cc22 <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800cc26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc28:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800cc2a:	69fb      	ldr	r3, [r7, #28]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d00d      	beq.n	800cc4c <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800cc30:	69fb      	ldr	r3, [r7, #28]
 800cc32:	2202      	movs	r2, #2
 800cc34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800cc38:	69fb      	ldr	r3, [r7, #28]
 800cc3a:	9301      	str	r3, [sp, #4]
 800cc3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc3e:	9300      	str	r3, [sp, #0]
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	687a      	ldr	r2, [r7, #4]
 800cc44:	68b9      	ldr	r1, [r7, #8]
 800cc46:	68f8      	ldr	r0, [r7, #12]
 800cc48:	f000 f805 	bl	800cc56 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800cc4c:	69fb      	ldr	r3, [r7, #28]
	}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	3720      	adds	r7, #32
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}

0800cc56 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800cc56:	b580      	push	{r7, lr}
 800cc58:	b086      	sub	sp, #24
 800cc5a:	af00      	add	r7, sp, #0
 800cc5c:	60f8      	str	r0, [r7, #12]
 800cc5e:	60b9      	str	r1, [r7, #8]
 800cc60:	607a      	str	r2, [r7, #4]
 800cc62:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d10b      	bne.n	800cc82 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800cc6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc6e:	f383 8811 	msr	BASEPRI, r3
 800cc72:	f3bf 8f6f 	isb	sy
 800cc76:	f3bf 8f4f 	dsb	sy
 800cc7a:	617b      	str	r3, [r7, #20]
}
 800cc7c:	bf00      	nop
 800cc7e:	bf00      	nop
 800cc80:	e7fd      	b.n	800cc7e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800cc82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d01e      	beq.n	800ccc6 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800cc88:	f000 fad6 	bl	800d238 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800cc8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc8e:	68fa      	ldr	r2, [r7, #12]
 800cc90:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800cc92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc94:	68ba      	ldr	r2, [r7, #8]
 800cc96:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800cc98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc9a:	683a      	ldr	r2, [r7, #0]
 800cc9c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800cc9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cca0:	6a3a      	ldr	r2, [r7, #32]
 800cca2:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800cca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cca6:	3304      	adds	r3, #4
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f7fd fe6e 	bl	800a98a <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d008      	beq.n	800ccc6 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800ccb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccb6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ccba:	f043 0304 	orr.w	r3, r3, #4
 800ccbe:	b2da      	uxtb	r2, r3
 800ccc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800ccc6:	bf00      	nop
 800ccc8:	3718      	adds	r7, #24
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}
	...

0800ccd0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b08a      	sub	sp, #40	@ 0x28
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	60f8      	str	r0, [r7, #12]
 800ccd8:	60b9      	str	r1, [r7, #8]
 800ccda:	607a      	str	r2, [r7, #4]
 800ccdc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ccde:	2300      	movs	r3, #0
 800cce0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d10b      	bne.n	800cd00 <xTimerGenericCommand+0x30>
	__asm volatile
 800cce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccec:	f383 8811 	msr	BASEPRI, r3
 800ccf0:	f3bf 8f6f 	isb	sy
 800ccf4:	f3bf 8f4f 	dsb	sy
 800ccf8:	623b      	str	r3, [r7, #32]
}
 800ccfa:	bf00      	nop
 800ccfc:	bf00      	nop
 800ccfe:	e7fd      	b.n	800ccfc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cd00:	4b19      	ldr	r3, [pc, #100]	@ (800cd68 <xTimerGenericCommand+0x98>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d02a      	beq.n	800cd5e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	2b05      	cmp	r3, #5
 800cd18:	dc18      	bgt.n	800cd4c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cd1a:	f7ff fccb 	bl	800c6b4 <xTaskGetSchedulerState>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	2b02      	cmp	r3, #2
 800cd22:	d109      	bne.n	800cd38 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cd24:	4b10      	ldr	r3, [pc, #64]	@ (800cd68 <xTimerGenericCommand+0x98>)
 800cd26:	6818      	ldr	r0, [r3, #0]
 800cd28:	f107 0114 	add.w	r1, r7, #20
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd30:	f7fe f84e 	bl	800add0 <xQueueGenericSend>
 800cd34:	6278      	str	r0, [r7, #36]	@ 0x24
 800cd36:	e012      	b.n	800cd5e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cd38:	4b0b      	ldr	r3, [pc, #44]	@ (800cd68 <xTimerGenericCommand+0x98>)
 800cd3a:	6818      	ldr	r0, [r3, #0]
 800cd3c:	f107 0114 	add.w	r1, r7, #20
 800cd40:	2300      	movs	r3, #0
 800cd42:	2200      	movs	r2, #0
 800cd44:	f7fe f844 	bl	800add0 <xQueueGenericSend>
 800cd48:	6278      	str	r0, [r7, #36]	@ 0x24
 800cd4a:	e008      	b.n	800cd5e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cd4c:	4b06      	ldr	r3, [pc, #24]	@ (800cd68 <xTimerGenericCommand+0x98>)
 800cd4e:	6818      	ldr	r0, [r3, #0]
 800cd50:	f107 0114 	add.w	r1, r7, #20
 800cd54:	2300      	movs	r3, #0
 800cd56:	683a      	ldr	r2, [r7, #0]
 800cd58:	f7fe f93c 	bl	800afd4 <xQueueGenericSendFromISR>
 800cd5c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cd5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	3728      	adds	r7, #40	@ 0x28
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd80      	pop	{r7, pc}
 800cd68:	20003328 	.word	0x20003328

0800cd6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b088      	sub	sp, #32
 800cd70:	af02      	add	r7, sp, #8
 800cd72:	6078      	str	r0, [r7, #4]
 800cd74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd76:	4b23      	ldr	r3, [pc, #140]	@ (800ce04 <prvProcessExpiredTimer+0x98>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	68db      	ldr	r3, [r3, #12]
 800cd7c:	68db      	ldr	r3, [r3, #12]
 800cd7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cd80:	697b      	ldr	r3, [r7, #20]
 800cd82:	3304      	adds	r3, #4
 800cd84:	4618      	mov	r0, r3
 800cd86:	f7fd fe6a 	bl	800aa5e <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800cd90:	f003 0304 	and.w	r3, r3, #4
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d023      	beq.n	800cde0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cd98:	697b      	ldr	r3, [r7, #20]
 800cd9a:	699a      	ldr	r2, [r3, #24]
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	18d1      	adds	r1, r2, r3
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	683a      	ldr	r2, [r7, #0]
 800cda4:	6978      	ldr	r0, [r7, #20]
 800cda6:	f000 f8d5 	bl	800cf54 <prvInsertTimerInActiveList>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d020      	beq.n	800cdf2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	9300      	str	r3, [sp, #0]
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	687a      	ldr	r2, [r7, #4]
 800cdb8:	2100      	movs	r1, #0
 800cdba:	6978      	ldr	r0, [r7, #20]
 800cdbc:	f7ff ff88 	bl	800ccd0 <xTimerGenericCommand>
 800cdc0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cdc2:	693b      	ldr	r3, [r7, #16]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d114      	bne.n	800cdf2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800cdc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdcc:	f383 8811 	msr	BASEPRI, r3
 800cdd0:	f3bf 8f6f 	isb	sy
 800cdd4:	f3bf 8f4f 	dsb	sy
 800cdd8:	60fb      	str	r3, [r7, #12]
}
 800cdda:	bf00      	nop
 800cddc:	bf00      	nop
 800cdde:	e7fd      	b.n	800cddc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cde0:	697b      	ldr	r3, [r7, #20]
 800cde2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800cde6:	f023 0301 	bic.w	r3, r3, #1
 800cdea:	b2da      	uxtb	r2, r3
 800cdec:	697b      	ldr	r3, [r7, #20]
 800cdee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cdf2:	697b      	ldr	r3, [r7, #20]
 800cdf4:	6a1b      	ldr	r3, [r3, #32]
 800cdf6:	6978      	ldr	r0, [r7, #20]
 800cdf8:	4798      	blx	r3
}
 800cdfa:	bf00      	nop
 800cdfc:	3718      	adds	r7, #24
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}
 800ce02:	bf00      	nop
 800ce04:	20003320 	.word	0x20003320

0800ce08 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b084      	sub	sp, #16
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ce10:	f107 0308 	add.w	r3, r7, #8
 800ce14:	4618      	mov	r0, r3
 800ce16:	f000 f859 	bl	800cecc <prvGetNextExpireTime>
 800ce1a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	4619      	mov	r1, r3
 800ce20:	68f8      	ldr	r0, [r7, #12]
 800ce22:	f000 f805 	bl	800ce30 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ce26:	f000 f8d7 	bl	800cfd8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ce2a:	bf00      	nop
 800ce2c:	e7f0      	b.n	800ce10 <prvTimerTask+0x8>
	...

0800ce30 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b084      	sub	sp, #16
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ce3a:	f7ff f849 	bl	800bed0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ce3e:	f107 0308 	add.w	r3, r7, #8
 800ce42:	4618      	mov	r0, r3
 800ce44:	f000 f866 	bl	800cf14 <prvSampleTimeNow>
 800ce48:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d130      	bne.n	800ceb2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d10a      	bne.n	800ce6c <prvProcessTimerOrBlockTask+0x3c>
 800ce56:	687a      	ldr	r2, [r7, #4]
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	429a      	cmp	r2, r3
 800ce5c:	d806      	bhi.n	800ce6c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ce5e:	f7ff f845 	bl	800beec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ce62:	68f9      	ldr	r1, [r7, #12]
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f7ff ff81 	bl	800cd6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ce6a:	e024      	b.n	800ceb6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d008      	beq.n	800ce84 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ce72:	4b13      	ldr	r3, [pc, #76]	@ (800cec0 <prvProcessTimerOrBlockTask+0x90>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d101      	bne.n	800ce80 <prvProcessTimerOrBlockTask+0x50>
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	e000      	b.n	800ce82 <prvProcessTimerOrBlockTask+0x52>
 800ce80:	2300      	movs	r3, #0
 800ce82:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ce84:	4b0f      	ldr	r3, [pc, #60]	@ (800cec4 <prvProcessTimerOrBlockTask+0x94>)
 800ce86:	6818      	ldr	r0, [r3, #0]
 800ce88:	687a      	ldr	r2, [r7, #4]
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	1ad3      	subs	r3, r2, r3
 800ce8e:	683a      	ldr	r2, [r7, #0]
 800ce90:	4619      	mov	r1, r3
 800ce92:	f7fe fd93 	bl	800b9bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ce96:	f7ff f829 	bl	800beec <xTaskResumeAll>
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d10a      	bne.n	800ceb6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cea0:	4b09      	ldr	r3, [pc, #36]	@ (800cec8 <prvProcessTimerOrBlockTask+0x98>)
 800cea2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cea6:	601a      	str	r2, [r3, #0]
 800cea8:	f3bf 8f4f 	dsb	sy
 800ceac:	f3bf 8f6f 	isb	sy
}
 800ceb0:	e001      	b.n	800ceb6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ceb2:	f7ff f81b 	bl	800beec <xTaskResumeAll>
}
 800ceb6:	bf00      	nop
 800ceb8:	3710      	adds	r7, #16
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}
 800cebe:	bf00      	nop
 800cec0:	20003324 	.word	0x20003324
 800cec4:	20003328 	.word	0x20003328
 800cec8:	e000ed04 	.word	0xe000ed04

0800cecc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cecc:	b480      	push	{r7}
 800cece:	b085      	sub	sp, #20
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ced4:	4b0e      	ldr	r3, [pc, #56]	@ (800cf10 <prvGetNextExpireTime+0x44>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d101      	bne.n	800cee2 <prvGetNextExpireTime+0x16>
 800cede:	2201      	movs	r2, #1
 800cee0:	e000      	b.n	800cee4 <prvGetNextExpireTime+0x18>
 800cee2:	2200      	movs	r2, #0
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d105      	bne.n	800cefc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cef0:	4b07      	ldr	r3, [pc, #28]	@ (800cf10 <prvGetNextExpireTime+0x44>)
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	68db      	ldr	r3, [r3, #12]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	60fb      	str	r3, [r7, #12]
 800cefa:	e001      	b.n	800cf00 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cefc:	2300      	movs	r3, #0
 800cefe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cf00:	68fb      	ldr	r3, [r7, #12]
}
 800cf02:	4618      	mov	r0, r3
 800cf04:	3714      	adds	r7, #20
 800cf06:	46bd      	mov	sp, r7
 800cf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0c:	4770      	bx	lr
 800cf0e:	bf00      	nop
 800cf10:	20003320 	.word	0x20003320

0800cf14 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b084      	sub	sp, #16
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cf1c:	f7ff f884 	bl	800c028 <xTaskGetTickCount>
 800cf20:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cf22:	4b0b      	ldr	r3, [pc, #44]	@ (800cf50 <prvSampleTimeNow+0x3c>)
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	68fa      	ldr	r2, [r7, #12]
 800cf28:	429a      	cmp	r2, r3
 800cf2a:	d205      	bcs.n	800cf38 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cf2c:	f000 f91e 	bl	800d16c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2201      	movs	r2, #1
 800cf34:	601a      	str	r2, [r3, #0]
 800cf36:	e002      	b.n	800cf3e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cf3e:	4a04      	ldr	r2, [pc, #16]	@ (800cf50 <prvSampleTimeNow+0x3c>)
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cf44:	68fb      	ldr	r3, [r7, #12]
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	3710      	adds	r7, #16
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}
 800cf4e:	bf00      	nop
 800cf50:	20003330 	.word	0x20003330

0800cf54 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b086      	sub	sp, #24
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	60f8      	str	r0, [r7, #12]
 800cf5c:	60b9      	str	r1, [r7, #8]
 800cf5e:	607a      	str	r2, [r7, #4]
 800cf60:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cf62:	2300      	movs	r3, #0
 800cf64:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	68ba      	ldr	r2, [r7, #8]
 800cf6a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	68fa      	ldr	r2, [r7, #12]
 800cf70:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cf72:	68ba      	ldr	r2, [r7, #8]
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	429a      	cmp	r2, r3
 800cf78:	d812      	bhi.n	800cfa0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf7a:	687a      	ldr	r2, [r7, #4]
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	1ad2      	subs	r2, r2, r3
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	699b      	ldr	r3, [r3, #24]
 800cf84:	429a      	cmp	r2, r3
 800cf86:	d302      	bcc.n	800cf8e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cf88:	2301      	movs	r3, #1
 800cf8a:	617b      	str	r3, [r7, #20]
 800cf8c:	e01b      	b.n	800cfc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cf8e:	4b10      	ldr	r3, [pc, #64]	@ (800cfd0 <prvInsertTimerInActiveList+0x7c>)
 800cf90:	681a      	ldr	r2, [r3, #0]
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	3304      	adds	r3, #4
 800cf96:	4619      	mov	r1, r3
 800cf98:	4610      	mov	r0, r2
 800cf9a:	f7fd fd27 	bl	800a9ec <vListInsert>
 800cf9e:	e012      	b.n	800cfc6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cfa0:	687a      	ldr	r2, [r7, #4]
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	429a      	cmp	r2, r3
 800cfa6:	d206      	bcs.n	800cfb6 <prvInsertTimerInActiveList+0x62>
 800cfa8:	68ba      	ldr	r2, [r7, #8]
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	429a      	cmp	r2, r3
 800cfae:	d302      	bcc.n	800cfb6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	617b      	str	r3, [r7, #20]
 800cfb4:	e007      	b.n	800cfc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cfb6:	4b07      	ldr	r3, [pc, #28]	@ (800cfd4 <prvInsertTimerInActiveList+0x80>)
 800cfb8:	681a      	ldr	r2, [r3, #0]
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	3304      	adds	r3, #4
 800cfbe:	4619      	mov	r1, r3
 800cfc0:	4610      	mov	r0, r2
 800cfc2:	f7fd fd13 	bl	800a9ec <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cfc6:	697b      	ldr	r3, [r7, #20]
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3718      	adds	r7, #24
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}
 800cfd0:	20003324 	.word	0x20003324
 800cfd4:	20003320 	.word	0x20003320

0800cfd8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b08c      	sub	sp, #48	@ 0x30
 800cfdc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cfde:	e0b2      	b.n	800d146 <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cfe0:	68bb      	ldr	r3, [r7, #8]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	f2c0 80af 	blt.w	800d146 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cfe8:	693b      	ldr	r3, [r7, #16]
 800cfea:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cfec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfee:	695b      	ldr	r3, [r3, #20]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d004      	beq.n	800cffe <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cff6:	3304      	adds	r3, #4
 800cff8:	4618      	mov	r0, r3
 800cffa:	f7fd fd30 	bl	800aa5e <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cffe:	1d3b      	adds	r3, r7, #4
 800d000:	4618      	mov	r0, r3
 800d002:	f7ff ff87 	bl	800cf14 <prvSampleTimeNow>
 800d006:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	2b09      	cmp	r3, #9
 800d00c:	f200 8098 	bhi.w	800d140 <prvProcessReceivedCommands+0x168>
 800d010:	a201      	add	r2, pc, #4	@ (adr r2, 800d018 <prvProcessReceivedCommands+0x40>)
 800d012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d016:	bf00      	nop
 800d018:	0800d041 	.word	0x0800d041
 800d01c:	0800d041 	.word	0x0800d041
 800d020:	0800d041 	.word	0x0800d041
 800d024:	0800d0b7 	.word	0x0800d0b7
 800d028:	0800d0cb 	.word	0x0800d0cb
 800d02c:	0800d117 	.word	0x0800d117
 800d030:	0800d041 	.word	0x0800d041
 800d034:	0800d041 	.word	0x0800d041
 800d038:	0800d0b7 	.word	0x0800d0b7
 800d03c:	0800d0cb 	.word	0x0800d0cb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d042:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d046:	f043 0301 	orr.w	r3, r3, #1
 800d04a:	b2da      	uxtb	r2, r3
 800d04c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d04e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d052:	68fa      	ldr	r2, [r7, #12]
 800d054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d056:	699b      	ldr	r3, [r3, #24]
 800d058:	18d1      	adds	r1, r2, r3
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	6a3a      	ldr	r2, [r7, #32]
 800d05e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d060:	f7ff ff78 	bl	800cf54 <prvInsertTimerInActiveList>
 800d064:	4603      	mov	r3, r0
 800d066:	2b00      	cmp	r3, #0
 800d068:	d06c      	beq.n	800d144 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d06c:	6a1b      	ldr	r3, [r3, #32]
 800d06e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d070:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d074:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d078:	f003 0304 	and.w	r3, r3, #4
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d061      	beq.n	800d144 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d080:	68fa      	ldr	r2, [r7, #12]
 800d082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d084:	699b      	ldr	r3, [r3, #24]
 800d086:	441a      	add	r2, r3
 800d088:	2300      	movs	r3, #0
 800d08a:	9300      	str	r3, [sp, #0]
 800d08c:	2300      	movs	r3, #0
 800d08e:	2100      	movs	r1, #0
 800d090:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d092:	f7ff fe1d 	bl	800ccd0 <xTimerGenericCommand>
 800d096:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800d098:	69fb      	ldr	r3, [r7, #28]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d152      	bne.n	800d144 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 800d09e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0a2:	f383 8811 	msr	BASEPRI, r3
 800d0a6:	f3bf 8f6f 	isb	sy
 800d0aa:	f3bf 8f4f 	dsb	sy
 800d0ae:	61bb      	str	r3, [r7, #24]
}
 800d0b0:	bf00      	nop
 800d0b2:	bf00      	nop
 800d0b4:	e7fd      	b.n	800d0b2 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d0bc:	f023 0301 	bic.w	r3, r3, #1
 800d0c0:	b2da      	uxtb	r2, r3
 800d0c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 800d0c8:	e03d      	b.n	800d146 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0cc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d0d0:	f043 0301 	orr.w	r3, r3, #1
 800d0d4:	b2da      	uxtb	r2, r3
 800d0d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d0dc:	68fa      	ldr	r2, [r7, #12]
 800d0de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0e0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d0e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0e4:	699b      	ldr	r3, [r3, #24]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d10b      	bne.n	800d102 <prvProcessReceivedCommands+0x12a>
	__asm volatile
 800d0ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0ee:	f383 8811 	msr	BASEPRI, r3
 800d0f2:	f3bf 8f6f 	isb	sy
 800d0f6:	f3bf 8f4f 	dsb	sy
 800d0fa:	617b      	str	r3, [r7, #20]
}
 800d0fc:	bf00      	nop
 800d0fe:	bf00      	nop
 800d100:	e7fd      	b.n	800d0fe <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d104:	699a      	ldr	r2, [r3, #24]
 800d106:	6a3b      	ldr	r3, [r7, #32]
 800d108:	18d1      	adds	r1, r2, r3
 800d10a:	6a3b      	ldr	r3, [r7, #32]
 800d10c:	6a3a      	ldr	r2, [r7, #32]
 800d10e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d110:	f7ff ff20 	bl	800cf54 <prvInsertTimerInActiveList>
					break;
 800d114:	e017      	b.n	800d146 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d118:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d11c:	f003 0302 	and.w	r3, r3, #2
 800d120:	2b00      	cmp	r3, #0
 800d122:	d103      	bne.n	800d12c <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 800d124:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d126:	f000 fbe7 	bl	800d8f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d12a:	e00c      	b.n	800d146 <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d12c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d12e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d132:	f023 0301 	bic.w	r3, r3, #1
 800d136:	b2da      	uxtb	r2, r3
 800d138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d13a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 800d13e:	e002      	b.n	800d146 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 800d140:	bf00      	nop
 800d142:	e000      	b.n	800d146 <prvProcessReceivedCommands+0x16e>
					break;
 800d144:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d146:	4b08      	ldr	r3, [pc, #32]	@ (800d168 <prvProcessReceivedCommands+0x190>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	f107 0108 	add.w	r1, r7, #8
 800d14e:	2200      	movs	r2, #0
 800d150:	4618      	mov	r0, r3
 800d152:	f7fe f86d 	bl	800b230 <xQueueReceive>
 800d156:	4603      	mov	r3, r0
 800d158:	2b00      	cmp	r3, #0
 800d15a:	f47f af41 	bne.w	800cfe0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d15e:	bf00      	nop
 800d160:	bf00      	nop
 800d162:	3728      	adds	r7, #40	@ 0x28
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}
 800d168:	20003328 	.word	0x20003328

0800d16c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b088      	sub	sp, #32
 800d170:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d172:	e049      	b.n	800d208 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d174:	4b2e      	ldr	r3, [pc, #184]	@ (800d230 <prvSwitchTimerLists+0xc4>)
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	68db      	ldr	r3, [r3, #12]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d17e:	4b2c      	ldr	r3, [pc, #176]	@ (800d230 <prvSwitchTimerLists+0xc4>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	68db      	ldr	r3, [r3, #12]
 800d184:	68db      	ldr	r3, [r3, #12]
 800d186:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	3304      	adds	r3, #4
 800d18c:	4618      	mov	r0, r3
 800d18e:	f7fd fc66 	bl	800aa5e <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	6a1b      	ldr	r3, [r3, #32]
 800d196:	68f8      	ldr	r0, [r7, #12]
 800d198:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d1a0:	f003 0304 	and.w	r3, r3, #4
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d02f      	beq.n	800d208 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	699b      	ldr	r3, [r3, #24]
 800d1ac:	693a      	ldr	r2, [r7, #16]
 800d1ae:	4413      	add	r3, r2
 800d1b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d1b2:	68ba      	ldr	r2, [r7, #8]
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	429a      	cmp	r2, r3
 800d1b8:	d90e      	bls.n	800d1d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	68ba      	ldr	r2, [r7, #8]
 800d1be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	68fa      	ldr	r2, [r7, #12]
 800d1c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d1c6:	4b1a      	ldr	r3, [pc, #104]	@ (800d230 <prvSwitchTimerLists+0xc4>)
 800d1c8:	681a      	ldr	r2, [r3, #0]
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	3304      	adds	r3, #4
 800d1ce:	4619      	mov	r1, r3
 800d1d0:	4610      	mov	r0, r2
 800d1d2:	f7fd fc0b 	bl	800a9ec <vListInsert>
 800d1d6:	e017      	b.n	800d208 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d1d8:	2300      	movs	r3, #0
 800d1da:	9300      	str	r3, [sp, #0]
 800d1dc:	2300      	movs	r3, #0
 800d1de:	693a      	ldr	r2, [r7, #16]
 800d1e0:	2100      	movs	r1, #0
 800d1e2:	68f8      	ldr	r0, [r7, #12]
 800d1e4:	f7ff fd74 	bl	800ccd0 <xTimerGenericCommand>
 800d1e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d10b      	bne.n	800d208 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800d1f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1f4:	f383 8811 	msr	BASEPRI, r3
 800d1f8:	f3bf 8f6f 	isb	sy
 800d1fc:	f3bf 8f4f 	dsb	sy
 800d200:	603b      	str	r3, [r7, #0]
}
 800d202:	bf00      	nop
 800d204:	bf00      	nop
 800d206:	e7fd      	b.n	800d204 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d208:	4b09      	ldr	r3, [pc, #36]	@ (800d230 <prvSwitchTimerLists+0xc4>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d1b0      	bne.n	800d174 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d212:	4b07      	ldr	r3, [pc, #28]	@ (800d230 <prvSwitchTimerLists+0xc4>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d218:	4b06      	ldr	r3, [pc, #24]	@ (800d234 <prvSwitchTimerLists+0xc8>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	4a04      	ldr	r2, [pc, #16]	@ (800d230 <prvSwitchTimerLists+0xc4>)
 800d21e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d220:	4a04      	ldr	r2, [pc, #16]	@ (800d234 <prvSwitchTimerLists+0xc8>)
 800d222:	697b      	ldr	r3, [r7, #20]
 800d224:	6013      	str	r3, [r2, #0]
}
 800d226:	bf00      	nop
 800d228:	3718      	adds	r7, #24
 800d22a:	46bd      	mov	sp, r7
 800d22c:	bd80      	pop	{r7, pc}
 800d22e:	bf00      	nop
 800d230:	20003320 	.word	0x20003320
 800d234:	20003324 	.word	0x20003324

0800d238 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b082      	sub	sp, #8
 800d23c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d23e:	f000 f96b 	bl	800d518 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d242:	4b15      	ldr	r3, [pc, #84]	@ (800d298 <prvCheckForValidListAndQueue+0x60>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d120      	bne.n	800d28c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d24a:	4814      	ldr	r0, [pc, #80]	@ (800d29c <prvCheckForValidListAndQueue+0x64>)
 800d24c:	f7fd fb7d 	bl	800a94a <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d250:	4813      	ldr	r0, [pc, #76]	@ (800d2a0 <prvCheckForValidListAndQueue+0x68>)
 800d252:	f7fd fb7a 	bl	800a94a <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d256:	4b13      	ldr	r3, [pc, #76]	@ (800d2a4 <prvCheckForValidListAndQueue+0x6c>)
 800d258:	4a10      	ldr	r2, [pc, #64]	@ (800d29c <prvCheckForValidListAndQueue+0x64>)
 800d25a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d25c:	4b12      	ldr	r3, [pc, #72]	@ (800d2a8 <prvCheckForValidListAndQueue+0x70>)
 800d25e:	4a10      	ldr	r2, [pc, #64]	@ (800d2a0 <prvCheckForValidListAndQueue+0x68>)
 800d260:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d262:	2300      	movs	r3, #0
 800d264:	9300      	str	r3, [sp, #0]
 800d266:	4b11      	ldr	r3, [pc, #68]	@ (800d2ac <prvCheckForValidListAndQueue+0x74>)
 800d268:	4a11      	ldr	r2, [pc, #68]	@ (800d2b0 <prvCheckForValidListAndQueue+0x78>)
 800d26a:	210c      	movs	r1, #12
 800d26c:	200a      	movs	r0, #10
 800d26e:	f7fd fc8b 	bl	800ab88 <xQueueGenericCreateStatic>
 800d272:	4603      	mov	r3, r0
 800d274:	4a08      	ldr	r2, [pc, #32]	@ (800d298 <prvCheckForValidListAndQueue+0x60>)
 800d276:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d278:	4b07      	ldr	r3, [pc, #28]	@ (800d298 <prvCheckForValidListAndQueue+0x60>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d005      	beq.n	800d28c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d280:	4b05      	ldr	r3, [pc, #20]	@ (800d298 <prvCheckForValidListAndQueue+0x60>)
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	490b      	ldr	r1, [pc, #44]	@ (800d2b4 <prvCheckForValidListAndQueue+0x7c>)
 800d286:	4618      	mov	r0, r3
 800d288:	f7fe fb6e 	bl	800b968 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d28c:	f000 f976 	bl	800d57c <vPortExitCritical>
}
 800d290:	bf00      	nop
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}
 800d296:	bf00      	nop
 800d298:	20003328 	.word	0x20003328
 800d29c:	200032f8 	.word	0x200032f8
 800d2a0:	2000330c 	.word	0x2000330c
 800d2a4:	20003320 	.word	0x20003320
 800d2a8:	20003324 	.word	0x20003324
 800d2ac:	200033ac 	.word	0x200033ac
 800d2b0:	20003334 	.word	0x20003334
 800d2b4:	0800f768 	.word	0x0800f768

0800d2b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d2b8:	b480      	push	{r7}
 800d2ba:	b085      	sub	sp, #20
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	60f8      	str	r0, [r7, #12]
 800d2c0:	60b9      	str	r1, [r7, #8]
 800d2c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	3b04      	subs	r3, #4
 800d2c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d2d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	3b04      	subs	r3, #4
 800d2d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d2d8:	68bb      	ldr	r3, [r7, #8]
 800d2da:	f023 0201 	bic.w	r2, r3, #1
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	3b04      	subs	r3, #4
 800d2e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d2e8:	4a0c      	ldr	r2, [pc, #48]	@ (800d31c <pxPortInitialiseStack+0x64>)
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	3b14      	subs	r3, #20
 800d2f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d2f4:	687a      	ldr	r2, [r7, #4]
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	3b04      	subs	r3, #4
 800d2fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	f06f 0202 	mvn.w	r2, #2
 800d306:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	3b20      	subs	r3, #32
 800d30c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d30e:	68fb      	ldr	r3, [r7, #12]
}
 800d310:	4618      	mov	r0, r3
 800d312:	3714      	adds	r7, #20
 800d314:	46bd      	mov	sp, r7
 800d316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31a:	4770      	bx	lr
 800d31c:	0800d321 	.word	0x0800d321

0800d320 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d320:	b480      	push	{r7}
 800d322:	b085      	sub	sp, #20
 800d324:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d326:	2300      	movs	r3, #0
 800d328:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d32a:	4b13      	ldr	r3, [pc, #76]	@ (800d378 <prvTaskExitError+0x58>)
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d332:	d00b      	beq.n	800d34c <prvTaskExitError+0x2c>
	__asm volatile
 800d334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d338:	f383 8811 	msr	BASEPRI, r3
 800d33c:	f3bf 8f6f 	isb	sy
 800d340:	f3bf 8f4f 	dsb	sy
 800d344:	60fb      	str	r3, [r7, #12]
}
 800d346:	bf00      	nop
 800d348:	bf00      	nop
 800d34a:	e7fd      	b.n	800d348 <prvTaskExitError+0x28>
	__asm volatile
 800d34c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d350:	f383 8811 	msr	BASEPRI, r3
 800d354:	f3bf 8f6f 	isb	sy
 800d358:	f3bf 8f4f 	dsb	sy
 800d35c:	60bb      	str	r3, [r7, #8]
}
 800d35e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d360:	bf00      	nop
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d0fc      	beq.n	800d362 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d368:	bf00      	nop
 800d36a:	bf00      	nop
 800d36c:	3714      	adds	r7, #20
 800d36e:	46bd      	mov	sp, r7
 800d370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d374:	4770      	bx	lr
 800d376:	bf00      	nop
 800d378:	200000ac 	.word	0x200000ac
 800d37c:	00000000 	.word	0x00000000

0800d380 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d380:	4b07      	ldr	r3, [pc, #28]	@ (800d3a0 <pxCurrentTCBConst2>)
 800d382:	6819      	ldr	r1, [r3, #0]
 800d384:	6808      	ldr	r0, [r1, #0]
 800d386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d38a:	f380 8809 	msr	PSP, r0
 800d38e:	f3bf 8f6f 	isb	sy
 800d392:	f04f 0000 	mov.w	r0, #0
 800d396:	f380 8811 	msr	BASEPRI, r0
 800d39a:	4770      	bx	lr
 800d39c:	f3af 8000 	nop.w

0800d3a0 <pxCurrentTCBConst2>:
 800d3a0:	200031cc 	.word	0x200031cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d3a4:	bf00      	nop
 800d3a6:	bf00      	nop

0800d3a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d3a8:	4808      	ldr	r0, [pc, #32]	@ (800d3cc <prvPortStartFirstTask+0x24>)
 800d3aa:	6800      	ldr	r0, [r0, #0]
 800d3ac:	6800      	ldr	r0, [r0, #0]
 800d3ae:	f380 8808 	msr	MSP, r0
 800d3b2:	f04f 0000 	mov.w	r0, #0
 800d3b6:	f380 8814 	msr	CONTROL, r0
 800d3ba:	b662      	cpsie	i
 800d3bc:	b661      	cpsie	f
 800d3be:	f3bf 8f4f 	dsb	sy
 800d3c2:	f3bf 8f6f 	isb	sy
 800d3c6:	df00      	svc	0
 800d3c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d3ca:	bf00      	nop
 800d3cc:	e000ed08 	.word	0xe000ed08

0800d3d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b086      	sub	sp, #24
 800d3d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d3d6:	4b47      	ldr	r3, [pc, #284]	@ (800d4f4 <xPortStartScheduler+0x124>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	4a47      	ldr	r2, [pc, #284]	@ (800d4f8 <xPortStartScheduler+0x128>)
 800d3dc:	4293      	cmp	r3, r2
 800d3de:	d10b      	bne.n	800d3f8 <xPortStartScheduler+0x28>
	__asm volatile
 800d3e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3e4:	f383 8811 	msr	BASEPRI, r3
 800d3e8:	f3bf 8f6f 	isb	sy
 800d3ec:	f3bf 8f4f 	dsb	sy
 800d3f0:	613b      	str	r3, [r7, #16]
}
 800d3f2:	bf00      	nop
 800d3f4:	bf00      	nop
 800d3f6:	e7fd      	b.n	800d3f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d3f8:	4b3e      	ldr	r3, [pc, #248]	@ (800d4f4 <xPortStartScheduler+0x124>)
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	4a3f      	ldr	r2, [pc, #252]	@ (800d4fc <xPortStartScheduler+0x12c>)
 800d3fe:	4293      	cmp	r3, r2
 800d400:	d10b      	bne.n	800d41a <xPortStartScheduler+0x4a>
	__asm volatile
 800d402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d406:	f383 8811 	msr	BASEPRI, r3
 800d40a:	f3bf 8f6f 	isb	sy
 800d40e:	f3bf 8f4f 	dsb	sy
 800d412:	60fb      	str	r3, [r7, #12]
}
 800d414:	bf00      	nop
 800d416:	bf00      	nop
 800d418:	e7fd      	b.n	800d416 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d41a:	4b39      	ldr	r3, [pc, #228]	@ (800d500 <xPortStartScheduler+0x130>)
 800d41c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d41e:	697b      	ldr	r3, [r7, #20]
 800d420:	781b      	ldrb	r3, [r3, #0]
 800d422:	b2db      	uxtb	r3, r3
 800d424:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	22ff      	movs	r2, #255	@ 0xff
 800d42a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d42c:	697b      	ldr	r3, [r7, #20]
 800d42e:	781b      	ldrb	r3, [r3, #0]
 800d430:	b2db      	uxtb	r3, r3
 800d432:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d434:	78fb      	ldrb	r3, [r7, #3]
 800d436:	b2db      	uxtb	r3, r3
 800d438:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d43c:	b2da      	uxtb	r2, r3
 800d43e:	4b31      	ldr	r3, [pc, #196]	@ (800d504 <xPortStartScheduler+0x134>)
 800d440:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d442:	4b31      	ldr	r3, [pc, #196]	@ (800d508 <xPortStartScheduler+0x138>)
 800d444:	2207      	movs	r2, #7
 800d446:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d448:	e009      	b.n	800d45e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d44a:	4b2f      	ldr	r3, [pc, #188]	@ (800d508 <xPortStartScheduler+0x138>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	3b01      	subs	r3, #1
 800d450:	4a2d      	ldr	r2, [pc, #180]	@ (800d508 <xPortStartScheduler+0x138>)
 800d452:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d454:	78fb      	ldrb	r3, [r7, #3]
 800d456:	b2db      	uxtb	r3, r3
 800d458:	005b      	lsls	r3, r3, #1
 800d45a:	b2db      	uxtb	r3, r3
 800d45c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d45e:	78fb      	ldrb	r3, [r7, #3]
 800d460:	b2db      	uxtb	r3, r3
 800d462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d466:	2b80      	cmp	r3, #128	@ 0x80
 800d468:	d0ef      	beq.n	800d44a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d46a:	4b27      	ldr	r3, [pc, #156]	@ (800d508 <xPortStartScheduler+0x138>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	f1c3 0307 	rsb	r3, r3, #7
 800d472:	2b04      	cmp	r3, #4
 800d474:	d00b      	beq.n	800d48e <xPortStartScheduler+0xbe>
	__asm volatile
 800d476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d47a:	f383 8811 	msr	BASEPRI, r3
 800d47e:	f3bf 8f6f 	isb	sy
 800d482:	f3bf 8f4f 	dsb	sy
 800d486:	60bb      	str	r3, [r7, #8]
}
 800d488:	bf00      	nop
 800d48a:	bf00      	nop
 800d48c:	e7fd      	b.n	800d48a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d48e:	4b1e      	ldr	r3, [pc, #120]	@ (800d508 <xPortStartScheduler+0x138>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	021b      	lsls	r3, r3, #8
 800d494:	4a1c      	ldr	r2, [pc, #112]	@ (800d508 <xPortStartScheduler+0x138>)
 800d496:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d498:	4b1b      	ldr	r3, [pc, #108]	@ (800d508 <xPortStartScheduler+0x138>)
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d4a0:	4a19      	ldr	r2, [pc, #100]	@ (800d508 <xPortStartScheduler+0x138>)
 800d4a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	b2da      	uxtb	r2, r3
 800d4a8:	697b      	ldr	r3, [r7, #20]
 800d4aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d4ac:	4b17      	ldr	r3, [pc, #92]	@ (800d50c <xPortStartScheduler+0x13c>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	4a16      	ldr	r2, [pc, #88]	@ (800d50c <xPortStartScheduler+0x13c>)
 800d4b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d4b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d4b8:	4b14      	ldr	r3, [pc, #80]	@ (800d50c <xPortStartScheduler+0x13c>)
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	4a13      	ldr	r2, [pc, #76]	@ (800d50c <xPortStartScheduler+0x13c>)
 800d4be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d4c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d4c4:	f000 f8da 	bl	800d67c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d4c8:	4b11      	ldr	r3, [pc, #68]	@ (800d510 <xPortStartScheduler+0x140>)
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d4ce:	f000 f8f9 	bl	800d6c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d4d2:	4b10      	ldr	r3, [pc, #64]	@ (800d514 <xPortStartScheduler+0x144>)
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	4a0f      	ldr	r2, [pc, #60]	@ (800d514 <xPortStartScheduler+0x144>)
 800d4d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d4dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d4de:	f7ff ff63 	bl	800d3a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d4e2:	f7fe fe6b 	bl	800c1bc <vTaskSwitchContext>
	prvTaskExitError();
 800d4e6:	f7ff ff1b 	bl	800d320 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d4ea:	2300      	movs	r3, #0
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	3718      	adds	r7, #24
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}
 800d4f4:	e000ed00 	.word	0xe000ed00
 800d4f8:	410fc271 	.word	0x410fc271
 800d4fc:	410fc270 	.word	0x410fc270
 800d500:	e000e400 	.word	0xe000e400
 800d504:	200033f4 	.word	0x200033f4
 800d508:	200033f8 	.word	0x200033f8
 800d50c:	e000ed20 	.word	0xe000ed20
 800d510:	200000ac 	.word	0x200000ac
 800d514:	e000ef34 	.word	0xe000ef34

0800d518 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d518:	b480      	push	{r7}
 800d51a:	b083      	sub	sp, #12
 800d51c:	af00      	add	r7, sp, #0
	__asm volatile
 800d51e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d522:	f383 8811 	msr	BASEPRI, r3
 800d526:	f3bf 8f6f 	isb	sy
 800d52a:	f3bf 8f4f 	dsb	sy
 800d52e:	607b      	str	r3, [r7, #4]
}
 800d530:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d532:	4b10      	ldr	r3, [pc, #64]	@ (800d574 <vPortEnterCritical+0x5c>)
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	3301      	adds	r3, #1
 800d538:	4a0e      	ldr	r2, [pc, #56]	@ (800d574 <vPortEnterCritical+0x5c>)
 800d53a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d53c:	4b0d      	ldr	r3, [pc, #52]	@ (800d574 <vPortEnterCritical+0x5c>)
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	2b01      	cmp	r3, #1
 800d542:	d110      	bne.n	800d566 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d544:	4b0c      	ldr	r3, [pc, #48]	@ (800d578 <vPortEnterCritical+0x60>)
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	b2db      	uxtb	r3, r3
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d00b      	beq.n	800d566 <vPortEnterCritical+0x4e>
	__asm volatile
 800d54e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d552:	f383 8811 	msr	BASEPRI, r3
 800d556:	f3bf 8f6f 	isb	sy
 800d55a:	f3bf 8f4f 	dsb	sy
 800d55e:	603b      	str	r3, [r7, #0]
}
 800d560:	bf00      	nop
 800d562:	bf00      	nop
 800d564:	e7fd      	b.n	800d562 <vPortEnterCritical+0x4a>
	}
}
 800d566:	bf00      	nop
 800d568:	370c      	adds	r7, #12
 800d56a:	46bd      	mov	sp, r7
 800d56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d570:	4770      	bx	lr
 800d572:	bf00      	nop
 800d574:	200000ac 	.word	0x200000ac
 800d578:	e000ed04 	.word	0xe000ed04

0800d57c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d57c:	b480      	push	{r7}
 800d57e:	b083      	sub	sp, #12
 800d580:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d582:	4b12      	ldr	r3, [pc, #72]	@ (800d5cc <vPortExitCritical+0x50>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d10b      	bne.n	800d5a2 <vPortExitCritical+0x26>
	__asm volatile
 800d58a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d58e:	f383 8811 	msr	BASEPRI, r3
 800d592:	f3bf 8f6f 	isb	sy
 800d596:	f3bf 8f4f 	dsb	sy
 800d59a:	607b      	str	r3, [r7, #4]
}
 800d59c:	bf00      	nop
 800d59e:	bf00      	nop
 800d5a0:	e7fd      	b.n	800d59e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d5a2:	4b0a      	ldr	r3, [pc, #40]	@ (800d5cc <vPortExitCritical+0x50>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	3b01      	subs	r3, #1
 800d5a8:	4a08      	ldr	r2, [pc, #32]	@ (800d5cc <vPortExitCritical+0x50>)
 800d5aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d5ac:	4b07      	ldr	r3, [pc, #28]	@ (800d5cc <vPortExitCritical+0x50>)
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d105      	bne.n	800d5c0 <vPortExitCritical+0x44>
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	f383 8811 	msr	BASEPRI, r3
}
 800d5be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d5c0:	bf00      	nop
 800d5c2:	370c      	adds	r7, #12
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ca:	4770      	bx	lr
 800d5cc:	200000ac 	.word	0x200000ac

0800d5d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d5d0:	f3ef 8009 	mrs	r0, PSP
 800d5d4:	f3bf 8f6f 	isb	sy
 800d5d8:	4b15      	ldr	r3, [pc, #84]	@ (800d630 <pxCurrentTCBConst>)
 800d5da:	681a      	ldr	r2, [r3, #0]
 800d5dc:	f01e 0f10 	tst.w	lr, #16
 800d5e0:	bf08      	it	eq
 800d5e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d5e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5ea:	6010      	str	r0, [r2, #0]
 800d5ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d5f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d5f4:	f380 8811 	msr	BASEPRI, r0
 800d5f8:	f3bf 8f4f 	dsb	sy
 800d5fc:	f3bf 8f6f 	isb	sy
 800d600:	f7fe fddc 	bl	800c1bc <vTaskSwitchContext>
 800d604:	f04f 0000 	mov.w	r0, #0
 800d608:	f380 8811 	msr	BASEPRI, r0
 800d60c:	bc09      	pop	{r0, r3}
 800d60e:	6819      	ldr	r1, [r3, #0]
 800d610:	6808      	ldr	r0, [r1, #0]
 800d612:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d616:	f01e 0f10 	tst.w	lr, #16
 800d61a:	bf08      	it	eq
 800d61c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d620:	f380 8809 	msr	PSP, r0
 800d624:	f3bf 8f6f 	isb	sy
 800d628:	4770      	bx	lr
 800d62a:	bf00      	nop
 800d62c:	f3af 8000 	nop.w

0800d630 <pxCurrentTCBConst>:
 800d630:	200031cc 	.word	0x200031cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d634:	bf00      	nop
 800d636:	bf00      	nop

0800d638 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b082      	sub	sp, #8
 800d63c:	af00      	add	r7, sp, #0
	__asm volatile
 800d63e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d642:	f383 8811 	msr	BASEPRI, r3
 800d646:	f3bf 8f6f 	isb	sy
 800d64a:	f3bf 8f4f 	dsb	sy
 800d64e:	607b      	str	r3, [r7, #4]
}
 800d650:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d652:	f7fe fcf9 	bl	800c048 <xTaskIncrementTick>
 800d656:	4603      	mov	r3, r0
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d003      	beq.n	800d664 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d65c:	4b06      	ldr	r3, [pc, #24]	@ (800d678 <SysTick_Handler+0x40>)
 800d65e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d662:	601a      	str	r2, [r3, #0]
 800d664:	2300      	movs	r3, #0
 800d666:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d668:	683b      	ldr	r3, [r7, #0]
 800d66a:	f383 8811 	msr	BASEPRI, r3
}
 800d66e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d670:	bf00      	nop
 800d672:	3708      	adds	r7, #8
 800d674:	46bd      	mov	sp, r7
 800d676:	bd80      	pop	{r7, pc}
 800d678:	e000ed04 	.word	0xe000ed04

0800d67c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d67c:	b480      	push	{r7}
 800d67e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d680:	4b0b      	ldr	r3, [pc, #44]	@ (800d6b0 <vPortSetupTimerInterrupt+0x34>)
 800d682:	2200      	movs	r2, #0
 800d684:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d686:	4b0b      	ldr	r3, [pc, #44]	@ (800d6b4 <vPortSetupTimerInterrupt+0x38>)
 800d688:	2200      	movs	r2, #0
 800d68a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d68c:	4b0a      	ldr	r3, [pc, #40]	@ (800d6b8 <vPortSetupTimerInterrupt+0x3c>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	4a0a      	ldr	r2, [pc, #40]	@ (800d6bc <vPortSetupTimerInterrupt+0x40>)
 800d692:	fba2 2303 	umull	r2, r3, r2, r3
 800d696:	099b      	lsrs	r3, r3, #6
 800d698:	4a09      	ldr	r2, [pc, #36]	@ (800d6c0 <vPortSetupTimerInterrupt+0x44>)
 800d69a:	3b01      	subs	r3, #1
 800d69c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d69e:	4b04      	ldr	r3, [pc, #16]	@ (800d6b0 <vPortSetupTimerInterrupt+0x34>)
 800d6a0:	2207      	movs	r2, #7
 800d6a2:	601a      	str	r2, [r3, #0]
}
 800d6a4:	bf00      	nop
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ac:	4770      	bx	lr
 800d6ae:	bf00      	nop
 800d6b0:	e000e010 	.word	0xe000e010
 800d6b4:	e000e018 	.word	0xe000e018
 800d6b8:	20000080 	.word	0x20000080
 800d6bc:	10624dd3 	.word	0x10624dd3
 800d6c0:	e000e014 	.word	0xe000e014

0800d6c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d6c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d6d4 <vPortEnableVFP+0x10>
 800d6c8:	6801      	ldr	r1, [r0, #0]
 800d6ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d6ce:	6001      	str	r1, [r0, #0]
 800d6d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d6d2:	bf00      	nop
 800d6d4:	e000ed88 	.word	0xe000ed88

0800d6d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d6d8:	b480      	push	{r7}
 800d6da:	b085      	sub	sp, #20
 800d6dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d6de:	f3ef 8305 	mrs	r3, IPSR
 800d6e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	2b0f      	cmp	r3, #15
 800d6e8:	d915      	bls.n	800d716 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d6ea:	4a18      	ldr	r2, [pc, #96]	@ (800d74c <vPortValidateInterruptPriority+0x74>)
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	4413      	add	r3, r2
 800d6f0:	781b      	ldrb	r3, [r3, #0]
 800d6f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d6f4:	4b16      	ldr	r3, [pc, #88]	@ (800d750 <vPortValidateInterruptPriority+0x78>)
 800d6f6:	781b      	ldrb	r3, [r3, #0]
 800d6f8:	7afa      	ldrb	r2, [r7, #11]
 800d6fa:	429a      	cmp	r2, r3
 800d6fc:	d20b      	bcs.n	800d716 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d6fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d702:	f383 8811 	msr	BASEPRI, r3
 800d706:	f3bf 8f6f 	isb	sy
 800d70a:	f3bf 8f4f 	dsb	sy
 800d70e:	607b      	str	r3, [r7, #4]
}
 800d710:	bf00      	nop
 800d712:	bf00      	nop
 800d714:	e7fd      	b.n	800d712 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d716:	4b0f      	ldr	r3, [pc, #60]	@ (800d754 <vPortValidateInterruptPriority+0x7c>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d71e:	4b0e      	ldr	r3, [pc, #56]	@ (800d758 <vPortValidateInterruptPriority+0x80>)
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	429a      	cmp	r2, r3
 800d724:	d90b      	bls.n	800d73e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d72a:	f383 8811 	msr	BASEPRI, r3
 800d72e:	f3bf 8f6f 	isb	sy
 800d732:	f3bf 8f4f 	dsb	sy
 800d736:	603b      	str	r3, [r7, #0]
}
 800d738:	bf00      	nop
 800d73a:	bf00      	nop
 800d73c:	e7fd      	b.n	800d73a <vPortValidateInterruptPriority+0x62>
	}
 800d73e:	bf00      	nop
 800d740:	3714      	adds	r7, #20
 800d742:	46bd      	mov	sp, r7
 800d744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d748:	4770      	bx	lr
 800d74a:	bf00      	nop
 800d74c:	e000e3f0 	.word	0xe000e3f0
 800d750:	200033f4 	.word	0x200033f4
 800d754:	e000ed0c 	.word	0xe000ed0c
 800d758:	200033f8 	.word	0x200033f8

0800d75c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b08a      	sub	sp, #40	@ 0x28
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d764:	2300      	movs	r3, #0
 800d766:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d768:	f7fe fbb2 	bl	800bed0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d76c:	4b5c      	ldr	r3, [pc, #368]	@ (800d8e0 <pvPortMalloc+0x184>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d101      	bne.n	800d778 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d774:	f000 f924 	bl	800d9c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d778:	4b5a      	ldr	r3, [pc, #360]	@ (800d8e4 <pvPortMalloc+0x188>)
 800d77a:	681a      	ldr	r2, [r3, #0]
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	4013      	ands	r3, r2
 800d780:	2b00      	cmp	r3, #0
 800d782:	f040 8095 	bne.w	800d8b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d01e      	beq.n	800d7ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d78c:	2208      	movs	r2, #8
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	4413      	add	r3, r2
 800d792:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	f003 0307 	and.w	r3, r3, #7
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d015      	beq.n	800d7ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	f023 0307 	bic.w	r3, r3, #7
 800d7a4:	3308      	adds	r3, #8
 800d7a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f003 0307 	and.w	r3, r3, #7
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d00b      	beq.n	800d7ca <pvPortMalloc+0x6e>
	__asm volatile
 800d7b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7b6:	f383 8811 	msr	BASEPRI, r3
 800d7ba:	f3bf 8f6f 	isb	sy
 800d7be:	f3bf 8f4f 	dsb	sy
 800d7c2:	617b      	str	r3, [r7, #20]
}
 800d7c4:	bf00      	nop
 800d7c6:	bf00      	nop
 800d7c8:	e7fd      	b.n	800d7c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d06f      	beq.n	800d8b0 <pvPortMalloc+0x154>
 800d7d0:	4b45      	ldr	r3, [pc, #276]	@ (800d8e8 <pvPortMalloc+0x18c>)
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	687a      	ldr	r2, [r7, #4]
 800d7d6:	429a      	cmp	r2, r3
 800d7d8:	d86a      	bhi.n	800d8b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d7da:	4b44      	ldr	r3, [pc, #272]	@ (800d8ec <pvPortMalloc+0x190>)
 800d7dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d7de:	4b43      	ldr	r3, [pc, #268]	@ (800d8ec <pvPortMalloc+0x190>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d7e4:	e004      	b.n	800d7f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d7e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d7ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d7f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7f2:	685b      	ldr	r3, [r3, #4]
 800d7f4:	687a      	ldr	r2, [r7, #4]
 800d7f6:	429a      	cmp	r2, r3
 800d7f8:	d903      	bls.n	800d802 <pvPortMalloc+0xa6>
 800d7fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d1f1      	bne.n	800d7e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d802:	4b37      	ldr	r3, [pc, #220]	@ (800d8e0 <pvPortMalloc+0x184>)
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d808:	429a      	cmp	r2, r3
 800d80a:	d051      	beq.n	800d8b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d80c:	6a3b      	ldr	r3, [r7, #32]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	2208      	movs	r2, #8
 800d812:	4413      	add	r3, r2
 800d814:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d818:	681a      	ldr	r2, [r3, #0]
 800d81a:	6a3b      	ldr	r3, [r7, #32]
 800d81c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d81e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d820:	685a      	ldr	r2, [r3, #4]
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	1ad2      	subs	r2, r2, r3
 800d826:	2308      	movs	r3, #8
 800d828:	005b      	lsls	r3, r3, #1
 800d82a:	429a      	cmp	r2, r3
 800d82c:	d920      	bls.n	800d870 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d82e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	4413      	add	r3, r2
 800d834:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d836:	69bb      	ldr	r3, [r7, #24]
 800d838:	f003 0307 	and.w	r3, r3, #7
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d00b      	beq.n	800d858 <pvPortMalloc+0xfc>
	__asm volatile
 800d840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d844:	f383 8811 	msr	BASEPRI, r3
 800d848:	f3bf 8f6f 	isb	sy
 800d84c:	f3bf 8f4f 	dsb	sy
 800d850:	613b      	str	r3, [r7, #16]
}
 800d852:	bf00      	nop
 800d854:	bf00      	nop
 800d856:	e7fd      	b.n	800d854 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d85a:	685a      	ldr	r2, [r3, #4]
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	1ad2      	subs	r2, r2, r3
 800d860:	69bb      	ldr	r3, [r7, #24]
 800d862:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d866:	687a      	ldr	r2, [r7, #4]
 800d868:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d86a:	69b8      	ldr	r0, [r7, #24]
 800d86c:	f000 f90a 	bl	800da84 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d870:	4b1d      	ldr	r3, [pc, #116]	@ (800d8e8 <pvPortMalloc+0x18c>)
 800d872:	681a      	ldr	r2, [r3, #0]
 800d874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d876:	685b      	ldr	r3, [r3, #4]
 800d878:	1ad3      	subs	r3, r2, r3
 800d87a:	4a1b      	ldr	r2, [pc, #108]	@ (800d8e8 <pvPortMalloc+0x18c>)
 800d87c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d87e:	4b1a      	ldr	r3, [pc, #104]	@ (800d8e8 <pvPortMalloc+0x18c>)
 800d880:	681a      	ldr	r2, [r3, #0]
 800d882:	4b1b      	ldr	r3, [pc, #108]	@ (800d8f0 <pvPortMalloc+0x194>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	429a      	cmp	r2, r3
 800d888:	d203      	bcs.n	800d892 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d88a:	4b17      	ldr	r3, [pc, #92]	@ (800d8e8 <pvPortMalloc+0x18c>)
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	4a18      	ldr	r2, [pc, #96]	@ (800d8f0 <pvPortMalloc+0x194>)
 800d890:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d894:	685a      	ldr	r2, [r3, #4]
 800d896:	4b13      	ldr	r3, [pc, #76]	@ (800d8e4 <pvPortMalloc+0x188>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	431a      	orrs	r2, r3
 800d89c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d89e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d8a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d8a6:	4b13      	ldr	r3, [pc, #76]	@ (800d8f4 <pvPortMalloc+0x198>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	3301      	adds	r3, #1
 800d8ac:	4a11      	ldr	r2, [pc, #68]	@ (800d8f4 <pvPortMalloc+0x198>)
 800d8ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d8b0:	f7fe fb1c 	bl	800beec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d8b4:	69fb      	ldr	r3, [r7, #28]
 800d8b6:	f003 0307 	and.w	r3, r3, #7
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d00b      	beq.n	800d8d6 <pvPortMalloc+0x17a>
	__asm volatile
 800d8be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8c2:	f383 8811 	msr	BASEPRI, r3
 800d8c6:	f3bf 8f6f 	isb	sy
 800d8ca:	f3bf 8f4f 	dsb	sy
 800d8ce:	60fb      	str	r3, [r7, #12]
}
 800d8d0:	bf00      	nop
 800d8d2:	bf00      	nop
 800d8d4:	e7fd      	b.n	800d8d2 <pvPortMalloc+0x176>
	return pvReturn;
 800d8d6:	69fb      	ldr	r3, [r7, #28]
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3728      	adds	r7, #40	@ 0x28
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}
 800d8e0:	20013404 	.word	0x20013404
 800d8e4:	20013418 	.word	0x20013418
 800d8e8:	20013408 	.word	0x20013408
 800d8ec:	200133fc 	.word	0x200133fc
 800d8f0:	2001340c 	.word	0x2001340c
 800d8f4:	20013410 	.word	0x20013410

0800d8f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b086      	sub	sp, #24
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d04f      	beq.n	800d9aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d90a:	2308      	movs	r3, #8
 800d90c:	425b      	negs	r3, r3
 800d90e:	697a      	ldr	r2, [r7, #20]
 800d910:	4413      	add	r3, r2
 800d912:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d914:	697b      	ldr	r3, [r7, #20]
 800d916:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d918:	693b      	ldr	r3, [r7, #16]
 800d91a:	685a      	ldr	r2, [r3, #4]
 800d91c:	4b25      	ldr	r3, [pc, #148]	@ (800d9b4 <vPortFree+0xbc>)
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	4013      	ands	r3, r2
 800d922:	2b00      	cmp	r3, #0
 800d924:	d10b      	bne.n	800d93e <vPortFree+0x46>
	__asm volatile
 800d926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d92a:	f383 8811 	msr	BASEPRI, r3
 800d92e:	f3bf 8f6f 	isb	sy
 800d932:	f3bf 8f4f 	dsb	sy
 800d936:	60fb      	str	r3, [r7, #12]
}
 800d938:	bf00      	nop
 800d93a:	bf00      	nop
 800d93c:	e7fd      	b.n	800d93a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d93e:	693b      	ldr	r3, [r7, #16]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d00b      	beq.n	800d95e <vPortFree+0x66>
	__asm volatile
 800d946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d94a:	f383 8811 	msr	BASEPRI, r3
 800d94e:	f3bf 8f6f 	isb	sy
 800d952:	f3bf 8f4f 	dsb	sy
 800d956:	60bb      	str	r3, [r7, #8]
}
 800d958:	bf00      	nop
 800d95a:	bf00      	nop
 800d95c:	e7fd      	b.n	800d95a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d95e:	693b      	ldr	r3, [r7, #16]
 800d960:	685a      	ldr	r2, [r3, #4]
 800d962:	4b14      	ldr	r3, [pc, #80]	@ (800d9b4 <vPortFree+0xbc>)
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	4013      	ands	r3, r2
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d01e      	beq.n	800d9aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d96c:	693b      	ldr	r3, [r7, #16]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d11a      	bne.n	800d9aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d974:	693b      	ldr	r3, [r7, #16]
 800d976:	685a      	ldr	r2, [r3, #4]
 800d978:	4b0e      	ldr	r3, [pc, #56]	@ (800d9b4 <vPortFree+0xbc>)
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	43db      	mvns	r3, r3
 800d97e:	401a      	ands	r2, r3
 800d980:	693b      	ldr	r3, [r7, #16]
 800d982:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d984:	f7fe faa4 	bl	800bed0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d988:	693b      	ldr	r3, [r7, #16]
 800d98a:	685a      	ldr	r2, [r3, #4]
 800d98c:	4b0a      	ldr	r3, [pc, #40]	@ (800d9b8 <vPortFree+0xc0>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	4413      	add	r3, r2
 800d992:	4a09      	ldr	r2, [pc, #36]	@ (800d9b8 <vPortFree+0xc0>)
 800d994:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d996:	6938      	ldr	r0, [r7, #16]
 800d998:	f000 f874 	bl	800da84 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d99c:	4b07      	ldr	r3, [pc, #28]	@ (800d9bc <vPortFree+0xc4>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	3301      	adds	r3, #1
 800d9a2:	4a06      	ldr	r2, [pc, #24]	@ (800d9bc <vPortFree+0xc4>)
 800d9a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d9a6:	f7fe faa1 	bl	800beec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d9aa:	bf00      	nop
 800d9ac:	3718      	adds	r7, #24
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	bd80      	pop	{r7, pc}
 800d9b2:	bf00      	nop
 800d9b4:	20013418 	.word	0x20013418
 800d9b8:	20013408 	.word	0x20013408
 800d9bc:	20013414 	.word	0x20013414

0800d9c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d9c0:	b480      	push	{r7}
 800d9c2:	b085      	sub	sp, #20
 800d9c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d9c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800d9ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d9cc:	4b27      	ldr	r3, [pc, #156]	@ (800da6c <prvHeapInit+0xac>)
 800d9ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	f003 0307 	and.w	r3, r3, #7
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d00c      	beq.n	800d9f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	3307      	adds	r3, #7
 800d9de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	f023 0307 	bic.w	r3, r3, #7
 800d9e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d9e8:	68ba      	ldr	r2, [r7, #8]
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	1ad3      	subs	r3, r2, r3
 800d9ee:	4a1f      	ldr	r2, [pc, #124]	@ (800da6c <prvHeapInit+0xac>)
 800d9f0:	4413      	add	r3, r2
 800d9f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d9f8:	4a1d      	ldr	r2, [pc, #116]	@ (800da70 <prvHeapInit+0xb0>)
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d9fe:	4b1c      	ldr	r3, [pc, #112]	@ (800da70 <prvHeapInit+0xb0>)
 800da00:	2200      	movs	r2, #0
 800da02:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	68ba      	ldr	r2, [r7, #8]
 800da08:	4413      	add	r3, r2
 800da0a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800da0c:	2208      	movs	r2, #8
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	1a9b      	subs	r3, r3, r2
 800da12:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	f023 0307 	bic.w	r3, r3, #7
 800da1a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	4a15      	ldr	r2, [pc, #84]	@ (800da74 <prvHeapInit+0xb4>)
 800da20:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800da22:	4b14      	ldr	r3, [pc, #80]	@ (800da74 <prvHeapInit+0xb4>)
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	2200      	movs	r2, #0
 800da28:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800da2a:	4b12      	ldr	r3, [pc, #72]	@ (800da74 <prvHeapInit+0xb4>)
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	2200      	movs	r2, #0
 800da30:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	68fa      	ldr	r2, [r7, #12]
 800da3a:	1ad2      	subs	r2, r2, r3
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800da40:	4b0c      	ldr	r3, [pc, #48]	@ (800da74 <prvHeapInit+0xb4>)
 800da42:	681a      	ldr	r2, [r3, #0]
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800da48:	683b      	ldr	r3, [r7, #0]
 800da4a:	685b      	ldr	r3, [r3, #4]
 800da4c:	4a0a      	ldr	r2, [pc, #40]	@ (800da78 <prvHeapInit+0xb8>)
 800da4e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	685b      	ldr	r3, [r3, #4]
 800da54:	4a09      	ldr	r2, [pc, #36]	@ (800da7c <prvHeapInit+0xbc>)
 800da56:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800da58:	4b09      	ldr	r3, [pc, #36]	@ (800da80 <prvHeapInit+0xc0>)
 800da5a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800da5e:	601a      	str	r2, [r3, #0]
}
 800da60:	bf00      	nop
 800da62:	3714      	adds	r7, #20
 800da64:	46bd      	mov	sp, r7
 800da66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6a:	4770      	bx	lr
 800da6c:	200033fc 	.word	0x200033fc
 800da70:	200133fc 	.word	0x200133fc
 800da74:	20013404 	.word	0x20013404
 800da78:	2001340c 	.word	0x2001340c
 800da7c:	20013408 	.word	0x20013408
 800da80:	20013418 	.word	0x20013418

0800da84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800da84:	b480      	push	{r7}
 800da86:	b085      	sub	sp, #20
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800da8c:	4b28      	ldr	r3, [pc, #160]	@ (800db30 <prvInsertBlockIntoFreeList+0xac>)
 800da8e:	60fb      	str	r3, [r7, #12]
 800da90:	e002      	b.n	800da98 <prvInsertBlockIntoFreeList+0x14>
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	60fb      	str	r3, [r7, #12]
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	687a      	ldr	r2, [r7, #4]
 800da9e:	429a      	cmp	r2, r3
 800daa0:	d8f7      	bhi.n	800da92 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	685b      	ldr	r3, [r3, #4]
 800daaa:	68ba      	ldr	r2, [r7, #8]
 800daac:	4413      	add	r3, r2
 800daae:	687a      	ldr	r2, [r7, #4]
 800dab0:	429a      	cmp	r2, r3
 800dab2:	d108      	bne.n	800dac6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	685a      	ldr	r2, [r3, #4]
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	685b      	ldr	r3, [r3, #4]
 800dabc:	441a      	add	r2, r3
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	685b      	ldr	r3, [r3, #4]
 800dace:	68ba      	ldr	r2, [r7, #8]
 800dad0:	441a      	add	r2, r3
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	429a      	cmp	r2, r3
 800dad8:	d118      	bne.n	800db0c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	681a      	ldr	r2, [r3, #0]
 800dade:	4b15      	ldr	r3, [pc, #84]	@ (800db34 <prvInsertBlockIntoFreeList+0xb0>)
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	429a      	cmp	r2, r3
 800dae4:	d00d      	beq.n	800db02 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	685a      	ldr	r2, [r3, #4]
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	685b      	ldr	r3, [r3, #4]
 800daf0:	441a      	add	r2, r3
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	681a      	ldr	r2, [r3, #0]
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	601a      	str	r2, [r3, #0]
 800db00:	e008      	b.n	800db14 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800db02:	4b0c      	ldr	r3, [pc, #48]	@ (800db34 <prvInsertBlockIntoFreeList+0xb0>)
 800db04:	681a      	ldr	r2, [r3, #0]
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	601a      	str	r2, [r3, #0]
 800db0a:	e003      	b.n	800db14 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	681a      	ldr	r2, [r3, #0]
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800db14:	68fa      	ldr	r2, [r7, #12]
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	429a      	cmp	r2, r3
 800db1a:	d002      	beq.n	800db22 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	687a      	ldr	r2, [r7, #4]
 800db20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800db22:	bf00      	nop
 800db24:	3714      	adds	r7, #20
 800db26:	46bd      	mov	sp, r7
 800db28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2c:	4770      	bx	lr
 800db2e:	bf00      	nop
 800db30:	200133fc 	.word	0x200133fc
 800db34:	20013404 	.word	0x20013404

0800db38 <_vsniprintf_r>:
 800db38:	b530      	push	{r4, r5, lr}
 800db3a:	4614      	mov	r4, r2
 800db3c:	2c00      	cmp	r4, #0
 800db3e:	b09b      	sub	sp, #108	@ 0x6c
 800db40:	4605      	mov	r5, r0
 800db42:	461a      	mov	r2, r3
 800db44:	da05      	bge.n	800db52 <_vsniprintf_r+0x1a>
 800db46:	238b      	movs	r3, #139	@ 0x8b
 800db48:	6003      	str	r3, [r0, #0]
 800db4a:	f04f 30ff 	mov.w	r0, #4294967295
 800db4e:	b01b      	add	sp, #108	@ 0x6c
 800db50:	bd30      	pop	{r4, r5, pc}
 800db52:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800db56:	f8ad 300c 	strh.w	r3, [sp, #12]
 800db5a:	bf14      	ite	ne
 800db5c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800db60:	4623      	moveq	r3, r4
 800db62:	9302      	str	r3, [sp, #8]
 800db64:	9305      	str	r3, [sp, #20]
 800db66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800db6a:	9100      	str	r1, [sp, #0]
 800db6c:	9104      	str	r1, [sp, #16]
 800db6e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800db72:	4669      	mov	r1, sp
 800db74:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800db76:	f000 fa15 	bl	800dfa4 <_svfiprintf_r>
 800db7a:	1c43      	adds	r3, r0, #1
 800db7c:	bfbc      	itt	lt
 800db7e:	238b      	movlt	r3, #139	@ 0x8b
 800db80:	602b      	strlt	r3, [r5, #0]
 800db82:	2c00      	cmp	r4, #0
 800db84:	d0e3      	beq.n	800db4e <_vsniprintf_r+0x16>
 800db86:	9b00      	ldr	r3, [sp, #0]
 800db88:	2200      	movs	r2, #0
 800db8a:	701a      	strb	r2, [r3, #0]
 800db8c:	e7df      	b.n	800db4e <_vsniprintf_r+0x16>
	...

0800db90 <vsniprintf>:
 800db90:	b507      	push	{r0, r1, r2, lr}
 800db92:	9300      	str	r3, [sp, #0]
 800db94:	4613      	mov	r3, r2
 800db96:	460a      	mov	r2, r1
 800db98:	4601      	mov	r1, r0
 800db9a:	4803      	ldr	r0, [pc, #12]	@ (800dba8 <vsniprintf+0x18>)
 800db9c:	6800      	ldr	r0, [r0, #0]
 800db9e:	f7ff ffcb 	bl	800db38 <_vsniprintf_r>
 800dba2:	b003      	add	sp, #12
 800dba4:	f85d fb04 	ldr.w	pc, [sp], #4
 800dba8:	200000b0 	.word	0x200000b0

0800dbac <memcmp>:
 800dbac:	b510      	push	{r4, lr}
 800dbae:	3901      	subs	r1, #1
 800dbb0:	4402      	add	r2, r0
 800dbb2:	4290      	cmp	r0, r2
 800dbb4:	d101      	bne.n	800dbba <memcmp+0xe>
 800dbb6:	2000      	movs	r0, #0
 800dbb8:	e005      	b.n	800dbc6 <memcmp+0x1a>
 800dbba:	7803      	ldrb	r3, [r0, #0]
 800dbbc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800dbc0:	42a3      	cmp	r3, r4
 800dbc2:	d001      	beq.n	800dbc8 <memcmp+0x1c>
 800dbc4:	1b18      	subs	r0, r3, r4
 800dbc6:	bd10      	pop	{r4, pc}
 800dbc8:	3001      	adds	r0, #1
 800dbca:	e7f2      	b.n	800dbb2 <memcmp+0x6>

0800dbcc <memset>:
 800dbcc:	4402      	add	r2, r0
 800dbce:	4603      	mov	r3, r0
 800dbd0:	4293      	cmp	r3, r2
 800dbd2:	d100      	bne.n	800dbd6 <memset+0xa>
 800dbd4:	4770      	bx	lr
 800dbd6:	f803 1b01 	strb.w	r1, [r3], #1
 800dbda:	e7f9      	b.n	800dbd0 <memset+0x4>

0800dbdc <_reclaim_reent>:
 800dbdc:	4b29      	ldr	r3, [pc, #164]	@ (800dc84 <_reclaim_reent+0xa8>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	4283      	cmp	r3, r0
 800dbe2:	b570      	push	{r4, r5, r6, lr}
 800dbe4:	4604      	mov	r4, r0
 800dbe6:	d04b      	beq.n	800dc80 <_reclaim_reent+0xa4>
 800dbe8:	69c3      	ldr	r3, [r0, #28]
 800dbea:	b1ab      	cbz	r3, 800dc18 <_reclaim_reent+0x3c>
 800dbec:	68db      	ldr	r3, [r3, #12]
 800dbee:	b16b      	cbz	r3, 800dc0c <_reclaim_reent+0x30>
 800dbf0:	2500      	movs	r5, #0
 800dbf2:	69e3      	ldr	r3, [r4, #28]
 800dbf4:	68db      	ldr	r3, [r3, #12]
 800dbf6:	5959      	ldr	r1, [r3, r5]
 800dbf8:	2900      	cmp	r1, #0
 800dbfa:	d13b      	bne.n	800dc74 <_reclaim_reent+0x98>
 800dbfc:	3504      	adds	r5, #4
 800dbfe:	2d80      	cmp	r5, #128	@ 0x80
 800dc00:	d1f7      	bne.n	800dbf2 <_reclaim_reent+0x16>
 800dc02:	69e3      	ldr	r3, [r4, #28]
 800dc04:	4620      	mov	r0, r4
 800dc06:	68d9      	ldr	r1, [r3, #12]
 800dc08:	f000 f878 	bl	800dcfc <_free_r>
 800dc0c:	69e3      	ldr	r3, [r4, #28]
 800dc0e:	6819      	ldr	r1, [r3, #0]
 800dc10:	b111      	cbz	r1, 800dc18 <_reclaim_reent+0x3c>
 800dc12:	4620      	mov	r0, r4
 800dc14:	f000 f872 	bl	800dcfc <_free_r>
 800dc18:	6961      	ldr	r1, [r4, #20]
 800dc1a:	b111      	cbz	r1, 800dc22 <_reclaim_reent+0x46>
 800dc1c:	4620      	mov	r0, r4
 800dc1e:	f000 f86d 	bl	800dcfc <_free_r>
 800dc22:	69e1      	ldr	r1, [r4, #28]
 800dc24:	b111      	cbz	r1, 800dc2c <_reclaim_reent+0x50>
 800dc26:	4620      	mov	r0, r4
 800dc28:	f000 f868 	bl	800dcfc <_free_r>
 800dc2c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800dc2e:	b111      	cbz	r1, 800dc36 <_reclaim_reent+0x5a>
 800dc30:	4620      	mov	r0, r4
 800dc32:	f000 f863 	bl	800dcfc <_free_r>
 800dc36:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dc38:	b111      	cbz	r1, 800dc40 <_reclaim_reent+0x64>
 800dc3a:	4620      	mov	r0, r4
 800dc3c:	f000 f85e 	bl	800dcfc <_free_r>
 800dc40:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800dc42:	b111      	cbz	r1, 800dc4a <_reclaim_reent+0x6e>
 800dc44:	4620      	mov	r0, r4
 800dc46:	f000 f859 	bl	800dcfc <_free_r>
 800dc4a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800dc4c:	b111      	cbz	r1, 800dc54 <_reclaim_reent+0x78>
 800dc4e:	4620      	mov	r0, r4
 800dc50:	f000 f854 	bl	800dcfc <_free_r>
 800dc54:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800dc56:	b111      	cbz	r1, 800dc5e <_reclaim_reent+0x82>
 800dc58:	4620      	mov	r0, r4
 800dc5a:	f000 f84f 	bl	800dcfc <_free_r>
 800dc5e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800dc60:	b111      	cbz	r1, 800dc68 <_reclaim_reent+0x8c>
 800dc62:	4620      	mov	r0, r4
 800dc64:	f000 f84a 	bl	800dcfc <_free_r>
 800dc68:	6a23      	ldr	r3, [r4, #32]
 800dc6a:	b14b      	cbz	r3, 800dc80 <_reclaim_reent+0xa4>
 800dc6c:	4620      	mov	r0, r4
 800dc6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dc72:	4718      	bx	r3
 800dc74:	680e      	ldr	r6, [r1, #0]
 800dc76:	4620      	mov	r0, r4
 800dc78:	f000 f840 	bl	800dcfc <_free_r>
 800dc7c:	4631      	mov	r1, r6
 800dc7e:	e7bb      	b.n	800dbf8 <_reclaim_reent+0x1c>
 800dc80:	bd70      	pop	{r4, r5, r6, pc}
 800dc82:	bf00      	nop
 800dc84:	200000b0 	.word	0x200000b0

0800dc88 <__errno>:
 800dc88:	4b01      	ldr	r3, [pc, #4]	@ (800dc90 <__errno+0x8>)
 800dc8a:	6818      	ldr	r0, [r3, #0]
 800dc8c:	4770      	bx	lr
 800dc8e:	bf00      	nop
 800dc90:	200000b0 	.word	0x200000b0

0800dc94 <__libc_init_array>:
 800dc94:	b570      	push	{r4, r5, r6, lr}
 800dc96:	4d0d      	ldr	r5, [pc, #52]	@ (800dccc <__libc_init_array+0x38>)
 800dc98:	4c0d      	ldr	r4, [pc, #52]	@ (800dcd0 <__libc_init_array+0x3c>)
 800dc9a:	1b64      	subs	r4, r4, r5
 800dc9c:	10a4      	asrs	r4, r4, #2
 800dc9e:	2600      	movs	r6, #0
 800dca0:	42a6      	cmp	r6, r4
 800dca2:	d109      	bne.n	800dcb8 <__libc_init_array+0x24>
 800dca4:	4d0b      	ldr	r5, [pc, #44]	@ (800dcd4 <__libc_init_array+0x40>)
 800dca6:	4c0c      	ldr	r4, [pc, #48]	@ (800dcd8 <__libc_init_array+0x44>)
 800dca8:	f000 fc66 	bl	800e578 <_init>
 800dcac:	1b64      	subs	r4, r4, r5
 800dcae:	10a4      	asrs	r4, r4, #2
 800dcb0:	2600      	movs	r6, #0
 800dcb2:	42a6      	cmp	r6, r4
 800dcb4:	d105      	bne.n	800dcc2 <__libc_init_array+0x2e>
 800dcb6:	bd70      	pop	{r4, r5, r6, pc}
 800dcb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcbc:	4798      	blx	r3
 800dcbe:	3601      	adds	r6, #1
 800dcc0:	e7ee      	b.n	800dca0 <__libc_init_array+0xc>
 800dcc2:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcc6:	4798      	blx	r3
 800dcc8:	3601      	adds	r6, #1
 800dcca:	e7f2      	b.n	800dcb2 <__libc_init_array+0x1e>
 800dccc:	0800fb0c 	.word	0x0800fb0c
 800dcd0:	0800fb0c 	.word	0x0800fb0c
 800dcd4:	0800fb0c 	.word	0x0800fb0c
 800dcd8:	0800fb10 	.word	0x0800fb10

0800dcdc <__retarget_lock_acquire_recursive>:
 800dcdc:	4770      	bx	lr

0800dcde <__retarget_lock_release_recursive>:
 800dcde:	4770      	bx	lr

0800dce0 <memcpy>:
 800dce0:	440a      	add	r2, r1
 800dce2:	4291      	cmp	r1, r2
 800dce4:	f100 33ff 	add.w	r3, r0, #4294967295
 800dce8:	d100      	bne.n	800dcec <memcpy+0xc>
 800dcea:	4770      	bx	lr
 800dcec:	b510      	push	{r4, lr}
 800dcee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dcf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dcf6:	4291      	cmp	r1, r2
 800dcf8:	d1f9      	bne.n	800dcee <memcpy+0xe>
 800dcfa:	bd10      	pop	{r4, pc}

0800dcfc <_free_r>:
 800dcfc:	b538      	push	{r3, r4, r5, lr}
 800dcfe:	4605      	mov	r5, r0
 800dd00:	2900      	cmp	r1, #0
 800dd02:	d041      	beq.n	800dd88 <_free_r+0x8c>
 800dd04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd08:	1f0c      	subs	r4, r1, #4
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	bfb8      	it	lt
 800dd0e:	18e4      	addlt	r4, r4, r3
 800dd10:	f000 f8e0 	bl	800ded4 <__malloc_lock>
 800dd14:	4a1d      	ldr	r2, [pc, #116]	@ (800dd8c <_free_r+0x90>)
 800dd16:	6813      	ldr	r3, [r2, #0]
 800dd18:	b933      	cbnz	r3, 800dd28 <_free_r+0x2c>
 800dd1a:	6063      	str	r3, [r4, #4]
 800dd1c:	6014      	str	r4, [r2, #0]
 800dd1e:	4628      	mov	r0, r5
 800dd20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd24:	f000 b8dc 	b.w	800dee0 <__malloc_unlock>
 800dd28:	42a3      	cmp	r3, r4
 800dd2a:	d908      	bls.n	800dd3e <_free_r+0x42>
 800dd2c:	6820      	ldr	r0, [r4, #0]
 800dd2e:	1821      	adds	r1, r4, r0
 800dd30:	428b      	cmp	r3, r1
 800dd32:	bf01      	itttt	eq
 800dd34:	6819      	ldreq	r1, [r3, #0]
 800dd36:	685b      	ldreq	r3, [r3, #4]
 800dd38:	1809      	addeq	r1, r1, r0
 800dd3a:	6021      	streq	r1, [r4, #0]
 800dd3c:	e7ed      	b.n	800dd1a <_free_r+0x1e>
 800dd3e:	461a      	mov	r2, r3
 800dd40:	685b      	ldr	r3, [r3, #4]
 800dd42:	b10b      	cbz	r3, 800dd48 <_free_r+0x4c>
 800dd44:	42a3      	cmp	r3, r4
 800dd46:	d9fa      	bls.n	800dd3e <_free_r+0x42>
 800dd48:	6811      	ldr	r1, [r2, #0]
 800dd4a:	1850      	adds	r0, r2, r1
 800dd4c:	42a0      	cmp	r0, r4
 800dd4e:	d10b      	bne.n	800dd68 <_free_r+0x6c>
 800dd50:	6820      	ldr	r0, [r4, #0]
 800dd52:	4401      	add	r1, r0
 800dd54:	1850      	adds	r0, r2, r1
 800dd56:	4283      	cmp	r3, r0
 800dd58:	6011      	str	r1, [r2, #0]
 800dd5a:	d1e0      	bne.n	800dd1e <_free_r+0x22>
 800dd5c:	6818      	ldr	r0, [r3, #0]
 800dd5e:	685b      	ldr	r3, [r3, #4]
 800dd60:	6053      	str	r3, [r2, #4]
 800dd62:	4408      	add	r0, r1
 800dd64:	6010      	str	r0, [r2, #0]
 800dd66:	e7da      	b.n	800dd1e <_free_r+0x22>
 800dd68:	d902      	bls.n	800dd70 <_free_r+0x74>
 800dd6a:	230c      	movs	r3, #12
 800dd6c:	602b      	str	r3, [r5, #0]
 800dd6e:	e7d6      	b.n	800dd1e <_free_r+0x22>
 800dd70:	6820      	ldr	r0, [r4, #0]
 800dd72:	1821      	adds	r1, r4, r0
 800dd74:	428b      	cmp	r3, r1
 800dd76:	bf04      	itt	eq
 800dd78:	6819      	ldreq	r1, [r3, #0]
 800dd7a:	685b      	ldreq	r3, [r3, #4]
 800dd7c:	6063      	str	r3, [r4, #4]
 800dd7e:	bf04      	itt	eq
 800dd80:	1809      	addeq	r1, r1, r0
 800dd82:	6021      	streq	r1, [r4, #0]
 800dd84:	6054      	str	r4, [r2, #4]
 800dd86:	e7ca      	b.n	800dd1e <_free_r+0x22>
 800dd88:	bd38      	pop	{r3, r4, r5, pc}
 800dd8a:	bf00      	nop
 800dd8c:	20013560 	.word	0x20013560

0800dd90 <sbrk_aligned>:
 800dd90:	b570      	push	{r4, r5, r6, lr}
 800dd92:	4e0f      	ldr	r6, [pc, #60]	@ (800ddd0 <sbrk_aligned+0x40>)
 800dd94:	460c      	mov	r4, r1
 800dd96:	6831      	ldr	r1, [r6, #0]
 800dd98:	4605      	mov	r5, r0
 800dd9a:	b911      	cbnz	r1, 800dda2 <sbrk_aligned+0x12>
 800dd9c:	f000 fba6 	bl	800e4ec <_sbrk_r>
 800dda0:	6030      	str	r0, [r6, #0]
 800dda2:	4621      	mov	r1, r4
 800dda4:	4628      	mov	r0, r5
 800dda6:	f000 fba1 	bl	800e4ec <_sbrk_r>
 800ddaa:	1c43      	adds	r3, r0, #1
 800ddac:	d103      	bne.n	800ddb6 <sbrk_aligned+0x26>
 800ddae:	f04f 34ff 	mov.w	r4, #4294967295
 800ddb2:	4620      	mov	r0, r4
 800ddb4:	bd70      	pop	{r4, r5, r6, pc}
 800ddb6:	1cc4      	adds	r4, r0, #3
 800ddb8:	f024 0403 	bic.w	r4, r4, #3
 800ddbc:	42a0      	cmp	r0, r4
 800ddbe:	d0f8      	beq.n	800ddb2 <sbrk_aligned+0x22>
 800ddc0:	1a21      	subs	r1, r4, r0
 800ddc2:	4628      	mov	r0, r5
 800ddc4:	f000 fb92 	bl	800e4ec <_sbrk_r>
 800ddc8:	3001      	adds	r0, #1
 800ddca:	d1f2      	bne.n	800ddb2 <sbrk_aligned+0x22>
 800ddcc:	e7ef      	b.n	800ddae <sbrk_aligned+0x1e>
 800ddce:	bf00      	nop
 800ddd0:	2001355c 	.word	0x2001355c

0800ddd4 <_malloc_r>:
 800ddd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ddd8:	1ccd      	adds	r5, r1, #3
 800ddda:	f025 0503 	bic.w	r5, r5, #3
 800ddde:	3508      	adds	r5, #8
 800dde0:	2d0c      	cmp	r5, #12
 800dde2:	bf38      	it	cc
 800dde4:	250c      	movcc	r5, #12
 800dde6:	2d00      	cmp	r5, #0
 800dde8:	4606      	mov	r6, r0
 800ddea:	db01      	blt.n	800ddf0 <_malloc_r+0x1c>
 800ddec:	42a9      	cmp	r1, r5
 800ddee:	d904      	bls.n	800ddfa <_malloc_r+0x26>
 800ddf0:	230c      	movs	r3, #12
 800ddf2:	6033      	str	r3, [r6, #0]
 800ddf4:	2000      	movs	r0, #0
 800ddf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddfa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ded0 <_malloc_r+0xfc>
 800ddfe:	f000 f869 	bl	800ded4 <__malloc_lock>
 800de02:	f8d8 3000 	ldr.w	r3, [r8]
 800de06:	461c      	mov	r4, r3
 800de08:	bb44      	cbnz	r4, 800de5c <_malloc_r+0x88>
 800de0a:	4629      	mov	r1, r5
 800de0c:	4630      	mov	r0, r6
 800de0e:	f7ff ffbf 	bl	800dd90 <sbrk_aligned>
 800de12:	1c43      	adds	r3, r0, #1
 800de14:	4604      	mov	r4, r0
 800de16:	d158      	bne.n	800deca <_malloc_r+0xf6>
 800de18:	f8d8 4000 	ldr.w	r4, [r8]
 800de1c:	4627      	mov	r7, r4
 800de1e:	2f00      	cmp	r7, #0
 800de20:	d143      	bne.n	800deaa <_malloc_r+0xd6>
 800de22:	2c00      	cmp	r4, #0
 800de24:	d04b      	beq.n	800debe <_malloc_r+0xea>
 800de26:	6823      	ldr	r3, [r4, #0]
 800de28:	4639      	mov	r1, r7
 800de2a:	4630      	mov	r0, r6
 800de2c:	eb04 0903 	add.w	r9, r4, r3
 800de30:	f000 fb5c 	bl	800e4ec <_sbrk_r>
 800de34:	4581      	cmp	r9, r0
 800de36:	d142      	bne.n	800debe <_malloc_r+0xea>
 800de38:	6821      	ldr	r1, [r4, #0]
 800de3a:	1a6d      	subs	r5, r5, r1
 800de3c:	4629      	mov	r1, r5
 800de3e:	4630      	mov	r0, r6
 800de40:	f7ff ffa6 	bl	800dd90 <sbrk_aligned>
 800de44:	3001      	adds	r0, #1
 800de46:	d03a      	beq.n	800debe <_malloc_r+0xea>
 800de48:	6823      	ldr	r3, [r4, #0]
 800de4a:	442b      	add	r3, r5
 800de4c:	6023      	str	r3, [r4, #0]
 800de4e:	f8d8 3000 	ldr.w	r3, [r8]
 800de52:	685a      	ldr	r2, [r3, #4]
 800de54:	bb62      	cbnz	r2, 800deb0 <_malloc_r+0xdc>
 800de56:	f8c8 7000 	str.w	r7, [r8]
 800de5a:	e00f      	b.n	800de7c <_malloc_r+0xa8>
 800de5c:	6822      	ldr	r2, [r4, #0]
 800de5e:	1b52      	subs	r2, r2, r5
 800de60:	d420      	bmi.n	800dea4 <_malloc_r+0xd0>
 800de62:	2a0b      	cmp	r2, #11
 800de64:	d917      	bls.n	800de96 <_malloc_r+0xc2>
 800de66:	1961      	adds	r1, r4, r5
 800de68:	42a3      	cmp	r3, r4
 800de6a:	6025      	str	r5, [r4, #0]
 800de6c:	bf18      	it	ne
 800de6e:	6059      	strne	r1, [r3, #4]
 800de70:	6863      	ldr	r3, [r4, #4]
 800de72:	bf08      	it	eq
 800de74:	f8c8 1000 	streq.w	r1, [r8]
 800de78:	5162      	str	r2, [r4, r5]
 800de7a:	604b      	str	r3, [r1, #4]
 800de7c:	4630      	mov	r0, r6
 800de7e:	f000 f82f 	bl	800dee0 <__malloc_unlock>
 800de82:	f104 000b 	add.w	r0, r4, #11
 800de86:	1d23      	adds	r3, r4, #4
 800de88:	f020 0007 	bic.w	r0, r0, #7
 800de8c:	1ac2      	subs	r2, r0, r3
 800de8e:	bf1c      	itt	ne
 800de90:	1a1b      	subne	r3, r3, r0
 800de92:	50a3      	strne	r3, [r4, r2]
 800de94:	e7af      	b.n	800ddf6 <_malloc_r+0x22>
 800de96:	6862      	ldr	r2, [r4, #4]
 800de98:	42a3      	cmp	r3, r4
 800de9a:	bf0c      	ite	eq
 800de9c:	f8c8 2000 	streq.w	r2, [r8]
 800dea0:	605a      	strne	r2, [r3, #4]
 800dea2:	e7eb      	b.n	800de7c <_malloc_r+0xa8>
 800dea4:	4623      	mov	r3, r4
 800dea6:	6864      	ldr	r4, [r4, #4]
 800dea8:	e7ae      	b.n	800de08 <_malloc_r+0x34>
 800deaa:	463c      	mov	r4, r7
 800deac:	687f      	ldr	r7, [r7, #4]
 800deae:	e7b6      	b.n	800de1e <_malloc_r+0x4a>
 800deb0:	461a      	mov	r2, r3
 800deb2:	685b      	ldr	r3, [r3, #4]
 800deb4:	42a3      	cmp	r3, r4
 800deb6:	d1fb      	bne.n	800deb0 <_malloc_r+0xdc>
 800deb8:	2300      	movs	r3, #0
 800deba:	6053      	str	r3, [r2, #4]
 800debc:	e7de      	b.n	800de7c <_malloc_r+0xa8>
 800debe:	230c      	movs	r3, #12
 800dec0:	6033      	str	r3, [r6, #0]
 800dec2:	4630      	mov	r0, r6
 800dec4:	f000 f80c 	bl	800dee0 <__malloc_unlock>
 800dec8:	e794      	b.n	800ddf4 <_malloc_r+0x20>
 800deca:	6005      	str	r5, [r0, #0]
 800decc:	e7d6      	b.n	800de7c <_malloc_r+0xa8>
 800dece:	bf00      	nop
 800ded0:	20013560 	.word	0x20013560

0800ded4 <__malloc_lock>:
 800ded4:	4801      	ldr	r0, [pc, #4]	@ (800dedc <__malloc_lock+0x8>)
 800ded6:	f7ff bf01 	b.w	800dcdc <__retarget_lock_acquire_recursive>
 800deda:	bf00      	nop
 800dedc:	20013558 	.word	0x20013558

0800dee0 <__malloc_unlock>:
 800dee0:	4801      	ldr	r0, [pc, #4]	@ (800dee8 <__malloc_unlock+0x8>)
 800dee2:	f7ff befc 	b.w	800dcde <__retarget_lock_release_recursive>
 800dee6:	bf00      	nop
 800dee8:	20013558 	.word	0x20013558

0800deec <__ssputs_r>:
 800deec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800def0:	688e      	ldr	r6, [r1, #8]
 800def2:	461f      	mov	r7, r3
 800def4:	42be      	cmp	r6, r7
 800def6:	680b      	ldr	r3, [r1, #0]
 800def8:	4682      	mov	sl, r0
 800defa:	460c      	mov	r4, r1
 800defc:	4690      	mov	r8, r2
 800defe:	d82d      	bhi.n	800df5c <__ssputs_r+0x70>
 800df00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800df04:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800df08:	d026      	beq.n	800df58 <__ssputs_r+0x6c>
 800df0a:	6965      	ldr	r5, [r4, #20]
 800df0c:	6909      	ldr	r1, [r1, #16]
 800df0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800df12:	eba3 0901 	sub.w	r9, r3, r1
 800df16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800df1a:	1c7b      	adds	r3, r7, #1
 800df1c:	444b      	add	r3, r9
 800df1e:	106d      	asrs	r5, r5, #1
 800df20:	429d      	cmp	r5, r3
 800df22:	bf38      	it	cc
 800df24:	461d      	movcc	r5, r3
 800df26:	0553      	lsls	r3, r2, #21
 800df28:	d527      	bpl.n	800df7a <__ssputs_r+0x8e>
 800df2a:	4629      	mov	r1, r5
 800df2c:	f7ff ff52 	bl	800ddd4 <_malloc_r>
 800df30:	4606      	mov	r6, r0
 800df32:	b360      	cbz	r0, 800df8e <__ssputs_r+0xa2>
 800df34:	6921      	ldr	r1, [r4, #16]
 800df36:	464a      	mov	r2, r9
 800df38:	f7ff fed2 	bl	800dce0 <memcpy>
 800df3c:	89a3      	ldrh	r3, [r4, #12]
 800df3e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800df42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df46:	81a3      	strh	r3, [r4, #12]
 800df48:	6126      	str	r6, [r4, #16]
 800df4a:	6165      	str	r5, [r4, #20]
 800df4c:	444e      	add	r6, r9
 800df4e:	eba5 0509 	sub.w	r5, r5, r9
 800df52:	6026      	str	r6, [r4, #0]
 800df54:	60a5      	str	r5, [r4, #8]
 800df56:	463e      	mov	r6, r7
 800df58:	42be      	cmp	r6, r7
 800df5a:	d900      	bls.n	800df5e <__ssputs_r+0x72>
 800df5c:	463e      	mov	r6, r7
 800df5e:	6820      	ldr	r0, [r4, #0]
 800df60:	4632      	mov	r2, r6
 800df62:	4641      	mov	r1, r8
 800df64:	f000 faa8 	bl	800e4b8 <memmove>
 800df68:	68a3      	ldr	r3, [r4, #8]
 800df6a:	1b9b      	subs	r3, r3, r6
 800df6c:	60a3      	str	r3, [r4, #8]
 800df6e:	6823      	ldr	r3, [r4, #0]
 800df70:	4433      	add	r3, r6
 800df72:	6023      	str	r3, [r4, #0]
 800df74:	2000      	movs	r0, #0
 800df76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df7a:	462a      	mov	r2, r5
 800df7c:	f000 fac6 	bl	800e50c <_realloc_r>
 800df80:	4606      	mov	r6, r0
 800df82:	2800      	cmp	r0, #0
 800df84:	d1e0      	bne.n	800df48 <__ssputs_r+0x5c>
 800df86:	6921      	ldr	r1, [r4, #16]
 800df88:	4650      	mov	r0, sl
 800df8a:	f7ff feb7 	bl	800dcfc <_free_r>
 800df8e:	230c      	movs	r3, #12
 800df90:	f8ca 3000 	str.w	r3, [sl]
 800df94:	89a3      	ldrh	r3, [r4, #12]
 800df96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df9a:	81a3      	strh	r3, [r4, #12]
 800df9c:	f04f 30ff 	mov.w	r0, #4294967295
 800dfa0:	e7e9      	b.n	800df76 <__ssputs_r+0x8a>
	...

0800dfa4 <_svfiprintf_r>:
 800dfa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfa8:	4698      	mov	r8, r3
 800dfaa:	898b      	ldrh	r3, [r1, #12]
 800dfac:	061b      	lsls	r3, r3, #24
 800dfae:	b09d      	sub	sp, #116	@ 0x74
 800dfb0:	4607      	mov	r7, r0
 800dfb2:	460d      	mov	r5, r1
 800dfb4:	4614      	mov	r4, r2
 800dfb6:	d510      	bpl.n	800dfda <_svfiprintf_r+0x36>
 800dfb8:	690b      	ldr	r3, [r1, #16]
 800dfba:	b973      	cbnz	r3, 800dfda <_svfiprintf_r+0x36>
 800dfbc:	2140      	movs	r1, #64	@ 0x40
 800dfbe:	f7ff ff09 	bl	800ddd4 <_malloc_r>
 800dfc2:	6028      	str	r0, [r5, #0]
 800dfc4:	6128      	str	r0, [r5, #16]
 800dfc6:	b930      	cbnz	r0, 800dfd6 <_svfiprintf_r+0x32>
 800dfc8:	230c      	movs	r3, #12
 800dfca:	603b      	str	r3, [r7, #0]
 800dfcc:	f04f 30ff 	mov.w	r0, #4294967295
 800dfd0:	b01d      	add	sp, #116	@ 0x74
 800dfd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfd6:	2340      	movs	r3, #64	@ 0x40
 800dfd8:	616b      	str	r3, [r5, #20]
 800dfda:	2300      	movs	r3, #0
 800dfdc:	9309      	str	r3, [sp, #36]	@ 0x24
 800dfde:	2320      	movs	r3, #32
 800dfe0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dfe4:	f8cd 800c 	str.w	r8, [sp, #12]
 800dfe8:	2330      	movs	r3, #48	@ 0x30
 800dfea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e188 <_svfiprintf_r+0x1e4>
 800dfee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dff2:	f04f 0901 	mov.w	r9, #1
 800dff6:	4623      	mov	r3, r4
 800dff8:	469a      	mov	sl, r3
 800dffa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dffe:	b10a      	cbz	r2, 800e004 <_svfiprintf_r+0x60>
 800e000:	2a25      	cmp	r2, #37	@ 0x25
 800e002:	d1f9      	bne.n	800dff8 <_svfiprintf_r+0x54>
 800e004:	ebba 0b04 	subs.w	fp, sl, r4
 800e008:	d00b      	beq.n	800e022 <_svfiprintf_r+0x7e>
 800e00a:	465b      	mov	r3, fp
 800e00c:	4622      	mov	r2, r4
 800e00e:	4629      	mov	r1, r5
 800e010:	4638      	mov	r0, r7
 800e012:	f7ff ff6b 	bl	800deec <__ssputs_r>
 800e016:	3001      	adds	r0, #1
 800e018:	f000 80a7 	beq.w	800e16a <_svfiprintf_r+0x1c6>
 800e01c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e01e:	445a      	add	r2, fp
 800e020:	9209      	str	r2, [sp, #36]	@ 0x24
 800e022:	f89a 3000 	ldrb.w	r3, [sl]
 800e026:	2b00      	cmp	r3, #0
 800e028:	f000 809f 	beq.w	800e16a <_svfiprintf_r+0x1c6>
 800e02c:	2300      	movs	r3, #0
 800e02e:	f04f 32ff 	mov.w	r2, #4294967295
 800e032:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e036:	f10a 0a01 	add.w	sl, sl, #1
 800e03a:	9304      	str	r3, [sp, #16]
 800e03c:	9307      	str	r3, [sp, #28]
 800e03e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e042:	931a      	str	r3, [sp, #104]	@ 0x68
 800e044:	4654      	mov	r4, sl
 800e046:	2205      	movs	r2, #5
 800e048:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e04c:	484e      	ldr	r0, [pc, #312]	@ (800e188 <_svfiprintf_r+0x1e4>)
 800e04e:	f7f2 f8c7 	bl	80001e0 <memchr>
 800e052:	9a04      	ldr	r2, [sp, #16]
 800e054:	b9d8      	cbnz	r0, 800e08e <_svfiprintf_r+0xea>
 800e056:	06d0      	lsls	r0, r2, #27
 800e058:	bf44      	itt	mi
 800e05a:	2320      	movmi	r3, #32
 800e05c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e060:	0711      	lsls	r1, r2, #28
 800e062:	bf44      	itt	mi
 800e064:	232b      	movmi	r3, #43	@ 0x2b
 800e066:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e06a:	f89a 3000 	ldrb.w	r3, [sl]
 800e06e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e070:	d015      	beq.n	800e09e <_svfiprintf_r+0xfa>
 800e072:	9a07      	ldr	r2, [sp, #28]
 800e074:	4654      	mov	r4, sl
 800e076:	2000      	movs	r0, #0
 800e078:	f04f 0c0a 	mov.w	ip, #10
 800e07c:	4621      	mov	r1, r4
 800e07e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e082:	3b30      	subs	r3, #48	@ 0x30
 800e084:	2b09      	cmp	r3, #9
 800e086:	d94b      	bls.n	800e120 <_svfiprintf_r+0x17c>
 800e088:	b1b0      	cbz	r0, 800e0b8 <_svfiprintf_r+0x114>
 800e08a:	9207      	str	r2, [sp, #28]
 800e08c:	e014      	b.n	800e0b8 <_svfiprintf_r+0x114>
 800e08e:	eba0 0308 	sub.w	r3, r0, r8
 800e092:	fa09 f303 	lsl.w	r3, r9, r3
 800e096:	4313      	orrs	r3, r2
 800e098:	9304      	str	r3, [sp, #16]
 800e09a:	46a2      	mov	sl, r4
 800e09c:	e7d2      	b.n	800e044 <_svfiprintf_r+0xa0>
 800e09e:	9b03      	ldr	r3, [sp, #12]
 800e0a0:	1d19      	adds	r1, r3, #4
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	9103      	str	r1, [sp, #12]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	bfbb      	ittet	lt
 800e0aa:	425b      	neglt	r3, r3
 800e0ac:	f042 0202 	orrlt.w	r2, r2, #2
 800e0b0:	9307      	strge	r3, [sp, #28]
 800e0b2:	9307      	strlt	r3, [sp, #28]
 800e0b4:	bfb8      	it	lt
 800e0b6:	9204      	strlt	r2, [sp, #16]
 800e0b8:	7823      	ldrb	r3, [r4, #0]
 800e0ba:	2b2e      	cmp	r3, #46	@ 0x2e
 800e0bc:	d10a      	bne.n	800e0d4 <_svfiprintf_r+0x130>
 800e0be:	7863      	ldrb	r3, [r4, #1]
 800e0c0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e0c2:	d132      	bne.n	800e12a <_svfiprintf_r+0x186>
 800e0c4:	9b03      	ldr	r3, [sp, #12]
 800e0c6:	1d1a      	adds	r2, r3, #4
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	9203      	str	r2, [sp, #12]
 800e0cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e0d0:	3402      	adds	r4, #2
 800e0d2:	9305      	str	r3, [sp, #20]
 800e0d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e198 <_svfiprintf_r+0x1f4>
 800e0d8:	7821      	ldrb	r1, [r4, #0]
 800e0da:	2203      	movs	r2, #3
 800e0dc:	4650      	mov	r0, sl
 800e0de:	f7f2 f87f 	bl	80001e0 <memchr>
 800e0e2:	b138      	cbz	r0, 800e0f4 <_svfiprintf_r+0x150>
 800e0e4:	9b04      	ldr	r3, [sp, #16]
 800e0e6:	eba0 000a 	sub.w	r0, r0, sl
 800e0ea:	2240      	movs	r2, #64	@ 0x40
 800e0ec:	4082      	lsls	r2, r0
 800e0ee:	4313      	orrs	r3, r2
 800e0f0:	3401      	adds	r4, #1
 800e0f2:	9304      	str	r3, [sp, #16]
 800e0f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0f8:	4824      	ldr	r0, [pc, #144]	@ (800e18c <_svfiprintf_r+0x1e8>)
 800e0fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e0fe:	2206      	movs	r2, #6
 800e100:	f7f2 f86e 	bl	80001e0 <memchr>
 800e104:	2800      	cmp	r0, #0
 800e106:	d036      	beq.n	800e176 <_svfiprintf_r+0x1d2>
 800e108:	4b21      	ldr	r3, [pc, #132]	@ (800e190 <_svfiprintf_r+0x1ec>)
 800e10a:	bb1b      	cbnz	r3, 800e154 <_svfiprintf_r+0x1b0>
 800e10c:	9b03      	ldr	r3, [sp, #12]
 800e10e:	3307      	adds	r3, #7
 800e110:	f023 0307 	bic.w	r3, r3, #7
 800e114:	3308      	adds	r3, #8
 800e116:	9303      	str	r3, [sp, #12]
 800e118:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e11a:	4433      	add	r3, r6
 800e11c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e11e:	e76a      	b.n	800dff6 <_svfiprintf_r+0x52>
 800e120:	fb0c 3202 	mla	r2, ip, r2, r3
 800e124:	460c      	mov	r4, r1
 800e126:	2001      	movs	r0, #1
 800e128:	e7a8      	b.n	800e07c <_svfiprintf_r+0xd8>
 800e12a:	2300      	movs	r3, #0
 800e12c:	3401      	adds	r4, #1
 800e12e:	9305      	str	r3, [sp, #20]
 800e130:	4619      	mov	r1, r3
 800e132:	f04f 0c0a 	mov.w	ip, #10
 800e136:	4620      	mov	r0, r4
 800e138:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e13c:	3a30      	subs	r2, #48	@ 0x30
 800e13e:	2a09      	cmp	r2, #9
 800e140:	d903      	bls.n	800e14a <_svfiprintf_r+0x1a6>
 800e142:	2b00      	cmp	r3, #0
 800e144:	d0c6      	beq.n	800e0d4 <_svfiprintf_r+0x130>
 800e146:	9105      	str	r1, [sp, #20]
 800e148:	e7c4      	b.n	800e0d4 <_svfiprintf_r+0x130>
 800e14a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e14e:	4604      	mov	r4, r0
 800e150:	2301      	movs	r3, #1
 800e152:	e7f0      	b.n	800e136 <_svfiprintf_r+0x192>
 800e154:	ab03      	add	r3, sp, #12
 800e156:	9300      	str	r3, [sp, #0]
 800e158:	462a      	mov	r2, r5
 800e15a:	4b0e      	ldr	r3, [pc, #56]	@ (800e194 <_svfiprintf_r+0x1f0>)
 800e15c:	a904      	add	r1, sp, #16
 800e15e:	4638      	mov	r0, r7
 800e160:	f3af 8000 	nop.w
 800e164:	1c42      	adds	r2, r0, #1
 800e166:	4606      	mov	r6, r0
 800e168:	d1d6      	bne.n	800e118 <_svfiprintf_r+0x174>
 800e16a:	89ab      	ldrh	r3, [r5, #12]
 800e16c:	065b      	lsls	r3, r3, #25
 800e16e:	f53f af2d 	bmi.w	800dfcc <_svfiprintf_r+0x28>
 800e172:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e174:	e72c      	b.n	800dfd0 <_svfiprintf_r+0x2c>
 800e176:	ab03      	add	r3, sp, #12
 800e178:	9300      	str	r3, [sp, #0]
 800e17a:	462a      	mov	r2, r5
 800e17c:	4b05      	ldr	r3, [pc, #20]	@ (800e194 <_svfiprintf_r+0x1f0>)
 800e17e:	a904      	add	r1, sp, #16
 800e180:	4638      	mov	r0, r7
 800e182:	f000 f879 	bl	800e278 <_printf_i>
 800e186:	e7ed      	b.n	800e164 <_svfiprintf_r+0x1c0>
 800e188:	0800fad0 	.word	0x0800fad0
 800e18c:	0800fada 	.word	0x0800fada
 800e190:	00000000 	.word	0x00000000
 800e194:	0800deed 	.word	0x0800deed
 800e198:	0800fad6 	.word	0x0800fad6

0800e19c <_printf_common>:
 800e19c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1a0:	4616      	mov	r6, r2
 800e1a2:	4698      	mov	r8, r3
 800e1a4:	688a      	ldr	r2, [r1, #8]
 800e1a6:	690b      	ldr	r3, [r1, #16]
 800e1a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e1ac:	4293      	cmp	r3, r2
 800e1ae:	bfb8      	it	lt
 800e1b0:	4613      	movlt	r3, r2
 800e1b2:	6033      	str	r3, [r6, #0]
 800e1b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e1b8:	4607      	mov	r7, r0
 800e1ba:	460c      	mov	r4, r1
 800e1bc:	b10a      	cbz	r2, 800e1c2 <_printf_common+0x26>
 800e1be:	3301      	adds	r3, #1
 800e1c0:	6033      	str	r3, [r6, #0]
 800e1c2:	6823      	ldr	r3, [r4, #0]
 800e1c4:	0699      	lsls	r1, r3, #26
 800e1c6:	bf42      	ittt	mi
 800e1c8:	6833      	ldrmi	r3, [r6, #0]
 800e1ca:	3302      	addmi	r3, #2
 800e1cc:	6033      	strmi	r3, [r6, #0]
 800e1ce:	6825      	ldr	r5, [r4, #0]
 800e1d0:	f015 0506 	ands.w	r5, r5, #6
 800e1d4:	d106      	bne.n	800e1e4 <_printf_common+0x48>
 800e1d6:	f104 0a19 	add.w	sl, r4, #25
 800e1da:	68e3      	ldr	r3, [r4, #12]
 800e1dc:	6832      	ldr	r2, [r6, #0]
 800e1de:	1a9b      	subs	r3, r3, r2
 800e1e0:	42ab      	cmp	r3, r5
 800e1e2:	dc26      	bgt.n	800e232 <_printf_common+0x96>
 800e1e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e1e8:	6822      	ldr	r2, [r4, #0]
 800e1ea:	3b00      	subs	r3, #0
 800e1ec:	bf18      	it	ne
 800e1ee:	2301      	movne	r3, #1
 800e1f0:	0692      	lsls	r2, r2, #26
 800e1f2:	d42b      	bmi.n	800e24c <_printf_common+0xb0>
 800e1f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e1f8:	4641      	mov	r1, r8
 800e1fa:	4638      	mov	r0, r7
 800e1fc:	47c8      	blx	r9
 800e1fe:	3001      	adds	r0, #1
 800e200:	d01e      	beq.n	800e240 <_printf_common+0xa4>
 800e202:	6823      	ldr	r3, [r4, #0]
 800e204:	6922      	ldr	r2, [r4, #16]
 800e206:	f003 0306 	and.w	r3, r3, #6
 800e20a:	2b04      	cmp	r3, #4
 800e20c:	bf02      	ittt	eq
 800e20e:	68e5      	ldreq	r5, [r4, #12]
 800e210:	6833      	ldreq	r3, [r6, #0]
 800e212:	1aed      	subeq	r5, r5, r3
 800e214:	68a3      	ldr	r3, [r4, #8]
 800e216:	bf0c      	ite	eq
 800e218:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e21c:	2500      	movne	r5, #0
 800e21e:	4293      	cmp	r3, r2
 800e220:	bfc4      	itt	gt
 800e222:	1a9b      	subgt	r3, r3, r2
 800e224:	18ed      	addgt	r5, r5, r3
 800e226:	2600      	movs	r6, #0
 800e228:	341a      	adds	r4, #26
 800e22a:	42b5      	cmp	r5, r6
 800e22c:	d11a      	bne.n	800e264 <_printf_common+0xc8>
 800e22e:	2000      	movs	r0, #0
 800e230:	e008      	b.n	800e244 <_printf_common+0xa8>
 800e232:	2301      	movs	r3, #1
 800e234:	4652      	mov	r2, sl
 800e236:	4641      	mov	r1, r8
 800e238:	4638      	mov	r0, r7
 800e23a:	47c8      	blx	r9
 800e23c:	3001      	adds	r0, #1
 800e23e:	d103      	bne.n	800e248 <_printf_common+0xac>
 800e240:	f04f 30ff 	mov.w	r0, #4294967295
 800e244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e248:	3501      	adds	r5, #1
 800e24a:	e7c6      	b.n	800e1da <_printf_common+0x3e>
 800e24c:	18e1      	adds	r1, r4, r3
 800e24e:	1c5a      	adds	r2, r3, #1
 800e250:	2030      	movs	r0, #48	@ 0x30
 800e252:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e256:	4422      	add	r2, r4
 800e258:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e25c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e260:	3302      	adds	r3, #2
 800e262:	e7c7      	b.n	800e1f4 <_printf_common+0x58>
 800e264:	2301      	movs	r3, #1
 800e266:	4622      	mov	r2, r4
 800e268:	4641      	mov	r1, r8
 800e26a:	4638      	mov	r0, r7
 800e26c:	47c8      	blx	r9
 800e26e:	3001      	adds	r0, #1
 800e270:	d0e6      	beq.n	800e240 <_printf_common+0xa4>
 800e272:	3601      	adds	r6, #1
 800e274:	e7d9      	b.n	800e22a <_printf_common+0x8e>
	...

0800e278 <_printf_i>:
 800e278:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e27c:	7e0f      	ldrb	r7, [r1, #24]
 800e27e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e280:	2f78      	cmp	r7, #120	@ 0x78
 800e282:	4691      	mov	r9, r2
 800e284:	4680      	mov	r8, r0
 800e286:	460c      	mov	r4, r1
 800e288:	469a      	mov	sl, r3
 800e28a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e28e:	d807      	bhi.n	800e2a0 <_printf_i+0x28>
 800e290:	2f62      	cmp	r7, #98	@ 0x62
 800e292:	d80a      	bhi.n	800e2aa <_printf_i+0x32>
 800e294:	2f00      	cmp	r7, #0
 800e296:	f000 80d2 	beq.w	800e43e <_printf_i+0x1c6>
 800e29a:	2f58      	cmp	r7, #88	@ 0x58
 800e29c:	f000 80b9 	beq.w	800e412 <_printf_i+0x19a>
 800e2a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e2a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e2a8:	e03a      	b.n	800e320 <_printf_i+0xa8>
 800e2aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e2ae:	2b15      	cmp	r3, #21
 800e2b0:	d8f6      	bhi.n	800e2a0 <_printf_i+0x28>
 800e2b2:	a101      	add	r1, pc, #4	@ (adr r1, 800e2b8 <_printf_i+0x40>)
 800e2b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e2b8:	0800e311 	.word	0x0800e311
 800e2bc:	0800e325 	.word	0x0800e325
 800e2c0:	0800e2a1 	.word	0x0800e2a1
 800e2c4:	0800e2a1 	.word	0x0800e2a1
 800e2c8:	0800e2a1 	.word	0x0800e2a1
 800e2cc:	0800e2a1 	.word	0x0800e2a1
 800e2d0:	0800e325 	.word	0x0800e325
 800e2d4:	0800e2a1 	.word	0x0800e2a1
 800e2d8:	0800e2a1 	.word	0x0800e2a1
 800e2dc:	0800e2a1 	.word	0x0800e2a1
 800e2e0:	0800e2a1 	.word	0x0800e2a1
 800e2e4:	0800e425 	.word	0x0800e425
 800e2e8:	0800e34f 	.word	0x0800e34f
 800e2ec:	0800e3df 	.word	0x0800e3df
 800e2f0:	0800e2a1 	.word	0x0800e2a1
 800e2f4:	0800e2a1 	.word	0x0800e2a1
 800e2f8:	0800e447 	.word	0x0800e447
 800e2fc:	0800e2a1 	.word	0x0800e2a1
 800e300:	0800e34f 	.word	0x0800e34f
 800e304:	0800e2a1 	.word	0x0800e2a1
 800e308:	0800e2a1 	.word	0x0800e2a1
 800e30c:	0800e3e7 	.word	0x0800e3e7
 800e310:	6833      	ldr	r3, [r6, #0]
 800e312:	1d1a      	adds	r2, r3, #4
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	6032      	str	r2, [r6, #0]
 800e318:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e31c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e320:	2301      	movs	r3, #1
 800e322:	e09d      	b.n	800e460 <_printf_i+0x1e8>
 800e324:	6833      	ldr	r3, [r6, #0]
 800e326:	6820      	ldr	r0, [r4, #0]
 800e328:	1d19      	adds	r1, r3, #4
 800e32a:	6031      	str	r1, [r6, #0]
 800e32c:	0606      	lsls	r6, r0, #24
 800e32e:	d501      	bpl.n	800e334 <_printf_i+0xbc>
 800e330:	681d      	ldr	r5, [r3, #0]
 800e332:	e003      	b.n	800e33c <_printf_i+0xc4>
 800e334:	0645      	lsls	r5, r0, #25
 800e336:	d5fb      	bpl.n	800e330 <_printf_i+0xb8>
 800e338:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e33c:	2d00      	cmp	r5, #0
 800e33e:	da03      	bge.n	800e348 <_printf_i+0xd0>
 800e340:	232d      	movs	r3, #45	@ 0x2d
 800e342:	426d      	negs	r5, r5
 800e344:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e348:	4859      	ldr	r0, [pc, #356]	@ (800e4b0 <_printf_i+0x238>)
 800e34a:	230a      	movs	r3, #10
 800e34c:	e011      	b.n	800e372 <_printf_i+0xfa>
 800e34e:	6821      	ldr	r1, [r4, #0]
 800e350:	6833      	ldr	r3, [r6, #0]
 800e352:	0608      	lsls	r0, r1, #24
 800e354:	f853 5b04 	ldr.w	r5, [r3], #4
 800e358:	d402      	bmi.n	800e360 <_printf_i+0xe8>
 800e35a:	0649      	lsls	r1, r1, #25
 800e35c:	bf48      	it	mi
 800e35e:	b2ad      	uxthmi	r5, r5
 800e360:	2f6f      	cmp	r7, #111	@ 0x6f
 800e362:	4853      	ldr	r0, [pc, #332]	@ (800e4b0 <_printf_i+0x238>)
 800e364:	6033      	str	r3, [r6, #0]
 800e366:	bf14      	ite	ne
 800e368:	230a      	movne	r3, #10
 800e36a:	2308      	moveq	r3, #8
 800e36c:	2100      	movs	r1, #0
 800e36e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e372:	6866      	ldr	r6, [r4, #4]
 800e374:	60a6      	str	r6, [r4, #8]
 800e376:	2e00      	cmp	r6, #0
 800e378:	bfa2      	ittt	ge
 800e37a:	6821      	ldrge	r1, [r4, #0]
 800e37c:	f021 0104 	bicge.w	r1, r1, #4
 800e380:	6021      	strge	r1, [r4, #0]
 800e382:	b90d      	cbnz	r5, 800e388 <_printf_i+0x110>
 800e384:	2e00      	cmp	r6, #0
 800e386:	d04b      	beq.n	800e420 <_printf_i+0x1a8>
 800e388:	4616      	mov	r6, r2
 800e38a:	fbb5 f1f3 	udiv	r1, r5, r3
 800e38e:	fb03 5711 	mls	r7, r3, r1, r5
 800e392:	5dc7      	ldrb	r7, [r0, r7]
 800e394:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e398:	462f      	mov	r7, r5
 800e39a:	42bb      	cmp	r3, r7
 800e39c:	460d      	mov	r5, r1
 800e39e:	d9f4      	bls.n	800e38a <_printf_i+0x112>
 800e3a0:	2b08      	cmp	r3, #8
 800e3a2:	d10b      	bne.n	800e3bc <_printf_i+0x144>
 800e3a4:	6823      	ldr	r3, [r4, #0]
 800e3a6:	07df      	lsls	r7, r3, #31
 800e3a8:	d508      	bpl.n	800e3bc <_printf_i+0x144>
 800e3aa:	6923      	ldr	r3, [r4, #16]
 800e3ac:	6861      	ldr	r1, [r4, #4]
 800e3ae:	4299      	cmp	r1, r3
 800e3b0:	bfde      	ittt	le
 800e3b2:	2330      	movle	r3, #48	@ 0x30
 800e3b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e3b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e3bc:	1b92      	subs	r2, r2, r6
 800e3be:	6122      	str	r2, [r4, #16]
 800e3c0:	f8cd a000 	str.w	sl, [sp]
 800e3c4:	464b      	mov	r3, r9
 800e3c6:	aa03      	add	r2, sp, #12
 800e3c8:	4621      	mov	r1, r4
 800e3ca:	4640      	mov	r0, r8
 800e3cc:	f7ff fee6 	bl	800e19c <_printf_common>
 800e3d0:	3001      	adds	r0, #1
 800e3d2:	d14a      	bne.n	800e46a <_printf_i+0x1f2>
 800e3d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e3d8:	b004      	add	sp, #16
 800e3da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3de:	6823      	ldr	r3, [r4, #0]
 800e3e0:	f043 0320 	orr.w	r3, r3, #32
 800e3e4:	6023      	str	r3, [r4, #0]
 800e3e6:	4833      	ldr	r0, [pc, #204]	@ (800e4b4 <_printf_i+0x23c>)
 800e3e8:	2778      	movs	r7, #120	@ 0x78
 800e3ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e3ee:	6823      	ldr	r3, [r4, #0]
 800e3f0:	6831      	ldr	r1, [r6, #0]
 800e3f2:	061f      	lsls	r7, r3, #24
 800e3f4:	f851 5b04 	ldr.w	r5, [r1], #4
 800e3f8:	d402      	bmi.n	800e400 <_printf_i+0x188>
 800e3fa:	065f      	lsls	r7, r3, #25
 800e3fc:	bf48      	it	mi
 800e3fe:	b2ad      	uxthmi	r5, r5
 800e400:	6031      	str	r1, [r6, #0]
 800e402:	07d9      	lsls	r1, r3, #31
 800e404:	bf44      	itt	mi
 800e406:	f043 0320 	orrmi.w	r3, r3, #32
 800e40a:	6023      	strmi	r3, [r4, #0]
 800e40c:	b11d      	cbz	r5, 800e416 <_printf_i+0x19e>
 800e40e:	2310      	movs	r3, #16
 800e410:	e7ac      	b.n	800e36c <_printf_i+0xf4>
 800e412:	4827      	ldr	r0, [pc, #156]	@ (800e4b0 <_printf_i+0x238>)
 800e414:	e7e9      	b.n	800e3ea <_printf_i+0x172>
 800e416:	6823      	ldr	r3, [r4, #0]
 800e418:	f023 0320 	bic.w	r3, r3, #32
 800e41c:	6023      	str	r3, [r4, #0]
 800e41e:	e7f6      	b.n	800e40e <_printf_i+0x196>
 800e420:	4616      	mov	r6, r2
 800e422:	e7bd      	b.n	800e3a0 <_printf_i+0x128>
 800e424:	6833      	ldr	r3, [r6, #0]
 800e426:	6825      	ldr	r5, [r4, #0]
 800e428:	6961      	ldr	r1, [r4, #20]
 800e42a:	1d18      	adds	r0, r3, #4
 800e42c:	6030      	str	r0, [r6, #0]
 800e42e:	062e      	lsls	r6, r5, #24
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	d501      	bpl.n	800e438 <_printf_i+0x1c0>
 800e434:	6019      	str	r1, [r3, #0]
 800e436:	e002      	b.n	800e43e <_printf_i+0x1c6>
 800e438:	0668      	lsls	r0, r5, #25
 800e43a:	d5fb      	bpl.n	800e434 <_printf_i+0x1bc>
 800e43c:	8019      	strh	r1, [r3, #0]
 800e43e:	2300      	movs	r3, #0
 800e440:	6123      	str	r3, [r4, #16]
 800e442:	4616      	mov	r6, r2
 800e444:	e7bc      	b.n	800e3c0 <_printf_i+0x148>
 800e446:	6833      	ldr	r3, [r6, #0]
 800e448:	1d1a      	adds	r2, r3, #4
 800e44a:	6032      	str	r2, [r6, #0]
 800e44c:	681e      	ldr	r6, [r3, #0]
 800e44e:	6862      	ldr	r2, [r4, #4]
 800e450:	2100      	movs	r1, #0
 800e452:	4630      	mov	r0, r6
 800e454:	f7f1 fec4 	bl	80001e0 <memchr>
 800e458:	b108      	cbz	r0, 800e45e <_printf_i+0x1e6>
 800e45a:	1b80      	subs	r0, r0, r6
 800e45c:	6060      	str	r0, [r4, #4]
 800e45e:	6863      	ldr	r3, [r4, #4]
 800e460:	6123      	str	r3, [r4, #16]
 800e462:	2300      	movs	r3, #0
 800e464:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e468:	e7aa      	b.n	800e3c0 <_printf_i+0x148>
 800e46a:	6923      	ldr	r3, [r4, #16]
 800e46c:	4632      	mov	r2, r6
 800e46e:	4649      	mov	r1, r9
 800e470:	4640      	mov	r0, r8
 800e472:	47d0      	blx	sl
 800e474:	3001      	adds	r0, #1
 800e476:	d0ad      	beq.n	800e3d4 <_printf_i+0x15c>
 800e478:	6823      	ldr	r3, [r4, #0]
 800e47a:	079b      	lsls	r3, r3, #30
 800e47c:	d413      	bmi.n	800e4a6 <_printf_i+0x22e>
 800e47e:	68e0      	ldr	r0, [r4, #12]
 800e480:	9b03      	ldr	r3, [sp, #12]
 800e482:	4298      	cmp	r0, r3
 800e484:	bfb8      	it	lt
 800e486:	4618      	movlt	r0, r3
 800e488:	e7a6      	b.n	800e3d8 <_printf_i+0x160>
 800e48a:	2301      	movs	r3, #1
 800e48c:	4632      	mov	r2, r6
 800e48e:	4649      	mov	r1, r9
 800e490:	4640      	mov	r0, r8
 800e492:	47d0      	blx	sl
 800e494:	3001      	adds	r0, #1
 800e496:	d09d      	beq.n	800e3d4 <_printf_i+0x15c>
 800e498:	3501      	adds	r5, #1
 800e49a:	68e3      	ldr	r3, [r4, #12]
 800e49c:	9903      	ldr	r1, [sp, #12]
 800e49e:	1a5b      	subs	r3, r3, r1
 800e4a0:	42ab      	cmp	r3, r5
 800e4a2:	dcf2      	bgt.n	800e48a <_printf_i+0x212>
 800e4a4:	e7eb      	b.n	800e47e <_printf_i+0x206>
 800e4a6:	2500      	movs	r5, #0
 800e4a8:	f104 0619 	add.w	r6, r4, #25
 800e4ac:	e7f5      	b.n	800e49a <_printf_i+0x222>
 800e4ae:	bf00      	nop
 800e4b0:	0800fae1 	.word	0x0800fae1
 800e4b4:	0800faf2 	.word	0x0800faf2

0800e4b8 <memmove>:
 800e4b8:	4288      	cmp	r0, r1
 800e4ba:	b510      	push	{r4, lr}
 800e4bc:	eb01 0402 	add.w	r4, r1, r2
 800e4c0:	d902      	bls.n	800e4c8 <memmove+0x10>
 800e4c2:	4284      	cmp	r4, r0
 800e4c4:	4623      	mov	r3, r4
 800e4c6:	d807      	bhi.n	800e4d8 <memmove+0x20>
 800e4c8:	1e43      	subs	r3, r0, #1
 800e4ca:	42a1      	cmp	r1, r4
 800e4cc:	d008      	beq.n	800e4e0 <memmove+0x28>
 800e4ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e4d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e4d6:	e7f8      	b.n	800e4ca <memmove+0x12>
 800e4d8:	4402      	add	r2, r0
 800e4da:	4601      	mov	r1, r0
 800e4dc:	428a      	cmp	r2, r1
 800e4de:	d100      	bne.n	800e4e2 <memmove+0x2a>
 800e4e0:	bd10      	pop	{r4, pc}
 800e4e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e4e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e4ea:	e7f7      	b.n	800e4dc <memmove+0x24>

0800e4ec <_sbrk_r>:
 800e4ec:	b538      	push	{r3, r4, r5, lr}
 800e4ee:	4d06      	ldr	r5, [pc, #24]	@ (800e508 <_sbrk_r+0x1c>)
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	4604      	mov	r4, r0
 800e4f4:	4608      	mov	r0, r1
 800e4f6:	602b      	str	r3, [r5, #0]
 800e4f8:	f7f3 fa66 	bl	80019c8 <_sbrk>
 800e4fc:	1c43      	adds	r3, r0, #1
 800e4fe:	d102      	bne.n	800e506 <_sbrk_r+0x1a>
 800e500:	682b      	ldr	r3, [r5, #0]
 800e502:	b103      	cbz	r3, 800e506 <_sbrk_r+0x1a>
 800e504:	6023      	str	r3, [r4, #0]
 800e506:	bd38      	pop	{r3, r4, r5, pc}
 800e508:	20013554 	.word	0x20013554

0800e50c <_realloc_r>:
 800e50c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e510:	4680      	mov	r8, r0
 800e512:	4615      	mov	r5, r2
 800e514:	460c      	mov	r4, r1
 800e516:	b921      	cbnz	r1, 800e522 <_realloc_r+0x16>
 800e518:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e51c:	4611      	mov	r1, r2
 800e51e:	f7ff bc59 	b.w	800ddd4 <_malloc_r>
 800e522:	b92a      	cbnz	r2, 800e530 <_realloc_r+0x24>
 800e524:	f7ff fbea 	bl	800dcfc <_free_r>
 800e528:	2400      	movs	r4, #0
 800e52a:	4620      	mov	r0, r4
 800e52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e530:	f000 f81a 	bl	800e568 <_malloc_usable_size_r>
 800e534:	4285      	cmp	r5, r0
 800e536:	4606      	mov	r6, r0
 800e538:	d802      	bhi.n	800e540 <_realloc_r+0x34>
 800e53a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e53e:	d8f4      	bhi.n	800e52a <_realloc_r+0x1e>
 800e540:	4629      	mov	r1, r5
 800e542:	4640      	mov	r0, r8
 800e544:	f7ff fc46 	bl	800ddd4 <_malloc_r>
 800e548:	4607      	mov	r7, r0
 800e54a:	2800      	cmp	r0, #0
 800e54c:	d0ec      	beq.n	800e528 <_realloc_r+0x1c>
 800e54e:	42b5      	cmp	r5, r6
 800e550:	462a      	mov	r2, r5
 800e552:	4621      	mov	r1, r4
 800e554:	bf28      	it	cs
 800e556:	4632      	movcs	r2, r6
 800e558:	f7ff fbc2 	bl	800dce0 <memcpy>
 800e55c:	4621      	mov	r1, r4
 800e55e:	4640      	mov	r0, r8
 800e560:	f7ff fbcc 	bl	800dcfc <_free_r>
 800e564:	463c      	mov	r4, r7
 800e566:	e7e0      	b.n	800e52a <_realloc_r+0x1e>

0800e568 <_malloc_usable_size_r>:
 800e568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e56c:	1f18      	subs	r0, r3, #4
 800e56e:	2b00      	cmp	r3, #0
 800e570:	bfbc      	itt	lt
 800e572:	580b      	ldrlt	r3, [r1, r0]
 800e574:	18c0      	addlt	r0, r0, r3
 800e576:	4770      	bx	lr

0800e578 <_init>:
 800e578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e57a:	bf00      	nop
 800e57c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e57e:	bc08      	pop	{r3}
 800e580:	469e      	mov	lr, r3
 800e582:	4770      	bx	lr

0800e584 <_fini>:
 800e584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e586:	bf00      	nop
 800e588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e58a:	bc08      	pop	{r3}
 800e58c:	469e      	mov	lr, r3
 800e58e:	4770      	bx	lr
