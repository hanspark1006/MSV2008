
Frontend.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cc4  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a14  08008dd4  08008dd4  00009dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097e8  080097e8  0000b1a0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080097e8  080097e8  0000a7e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097f0  080097f0  0000b1a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097f0  080097f0  0000a7f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080097f4  080097f4  0000a7f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001a0  20000000  080097f8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ec0  200001a0  08009998  0000b1a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002060  08009998  0000c060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019bf0  00000000  00000000  0000b1c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049ce  00000000  00000000  00024db9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001700  00000000  00000000  00029788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011ae  00000000  00000000  0002ae88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cc7e  00000000  00000000  0002c036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cf35  00000000  00000000  00048cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096be3  00000000  00000000  00065be9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fc7cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006284  00000000  00000000  000fc810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  00102a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001a0 	.word	0x200001a0
 800012c:	00000000 	.word	0x00000000
 8000130:	08008dbc 	.word	0x08008dbc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001a4 	.word	0x200001a4
 800014c:	08008dbc 	.word	0x08008dbc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <key_check>:

/* Private function prototypes -----------------------------------------------*/
//static void AppsTask(void const * argument);
/* Private functions ---------------------------------------------------------*/
uint8_t key_check(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
	uint8_t read_key = 0;
 8000166:	2300      	movs	r3, #0
 8000168:	71fb      	strb	r3, [r7, #7]

	if(HAL_GPIO_ReadPin(ENTER_SW_GPIO_Port, ENTER_SW_Pin) == GPIO_PIN_RESET){
 800016a:	2101      	movs	r1, #1
 800016c:	4817      	ldr	r0, [pc, #92]	@ (80001cc <key_check+0x6c>)
 800016e:	f003 fdf9 	bl	8003d64 <HAL_GPIO_ReadPin>
 8000172:	4603      	mov	r3, r0
 8000174:	2b00      	cmp	r3, #0
 8000176:	d103      	bne.n	8000180 <key_check+0x20>
		//LOG_INF("Enter\r\n");
		read_key |= KEY_ENTER_PIN;
 8000178:	79fb      	ldrb	r3, [r7, #7]
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	71fb      	strb	r3, [r7, #7]
	}
	if(HAL_GPIO_ReadPin(UP_SW_GPIO_Port, UP_SW_Pin) == GPIO_PIN_RESET){
 8000180:	2180      	movs	r1, #128	@ 0x80
 8000182:	4813      	ldr	r0, [pc, #76]	@ (80001d0 <key_check+0x70>)
 8000184:	f003 fdee 	bl	8003d64 <HAL_GPIO_ReadPin>
 8000188:	4603      	mov	r3, r0
 800018a:	2b00      	cmp	r3, #0
 800018c:	d103      	bne.n	8000196 <key_check+0x36>
		//LOG_INF("UP\r\n");
		read_key |= KEY_UP_PIN;
 800018e:	79fb      	ldrb	r3, [r7, #7]
 8000190:	f043 0302 	orr.w	r3, r3, #2
 8000194:	71fb      	strb	r3, [r7, #7]
	}
	if(HAL_GPIO_ReadPin(DOWN_SW_GPIO_Port, DOWN_SW_Pin) == GPIO_PIN_RESET){
 8000196:	2140      	movs	r1, #64	@ 0x40
 8000198:	480d      	ldr	r0, [pc, #52]	@ (80001d0 <key_check+0x70>)
 800019a:	f003 fde3 	bl	8003d64 <HAL_GPIO_ReadPin>
 800019e:	4603      	mov	r3, r0
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d103      	bne.n	80001ac <key_check+0x4c>
		//LOG_INF("DOWN\r\n");
		read_key |= KEY_DOWN_PIN;
 80001a4:	79fb      	ldrb	r3, [r7, #7]
 80001a6:	f043 0304 	orr.w	r3, r3, #4
 80001aa:	71fb      	strb	r3, [r7, #7]
	}
	if(HAL_GPIO_ReadPin(MODE_SW_GPIO_Port, MODE_SW_Pin) == GPIO_PIN_RESET){
 80001ac:	2102      	movs	r1, #2
 80001ae:	4807      	ldr	r0, [pc, #28]	@ (80001cc <key_check+0x6c>)
 80001b0:	f003 fdd8 	bl	8003d64 <HAL_GPIO_ReadPin>
 80001b4:	4603      	mov	r3, r0
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d103      	bne.n	80001c2 <key_check+0x62>
		//LOG_INF("MODE\r\n");
		read_key |= KEY_MODE_PIN;
 80001ba:	79fb      	ldrb	r3, [r7, #7]
 80001bc:	f043 0308 	orr.w	r3, r3, #8
 80001c0:	71fb      	strb	r3, [r7, #7]
	}
	return read_key;
 80001c2:	79fb      	ldrb	r3, [r7, #7]
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	40010c00 	.word	0x40010c00
 80001d0:	40010800 	.word	0x40010800

080001d4 <btn_tmr_callback>:

void btn_tmr_callback(void const *argument)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	if(m_cfg.btn_status == eBTN_PRESS){
 80001dc:	4b12      	ldr	r3, [pc, #72]	@ (8000228 <btn_tmr_callback+0x54>)
 80001de:	789b      	ldrb	r3, [r3, #2]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d104      	bne.n	80001ee <btn_tmr_callback+0x1a>
		m_cfg.key_tick++;
 80001e4:	4b10      	ldr	r3, [pc, #64]	@ (8000228 <btn_tmr_callback+0x54>)
 80001e6:	689b      	ldr	r3, [r3, #8]
 80001e8:	3301      	adds	r3, #1
 80001ea:	4a0f      	ldr	r2, [pc, #60]	@ (8000228 <btn_tmr_callback+0x54>)
 80001ec:	6093      	str	r3, [r2, #8]
	}

	if((m_cfg.setting_mode) &&((m_cfg.sc_id == eSET_TRIGGER_SC) || (m_cfg.sc_id == eOPMODE_SC))){
 80001ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000228 <btn_tmr_callback+0x54>)
 80001f0:	78db      	ldrb	r3, [r3, #3]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d014      	beq.n	8000220 <btn_tmr_callback+0x4c>
 80001f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000228 <btn_tmr_callback+0x54>)
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	2b04      	cmp	r3, #4
 80001fc:	d003      	beq.n	8000206 <btn_tmr_callback+0x32>
 80001fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000228 <btn_tmr_callback+0x54>)
 8000200:	781b      	ldrb	r3, [r3, #0]
 8000202:	2b05      	cmp	r3, #5
 8000204:	d10c      	bne.n	8000220 <btn_tmr_callback+0x4c>
		if(m_cfg.blink_tick++ >= TIMER_50_MSEC){
 8000206:	4b08      	ldr	r3, [pc, #32]	@ (8000228 <btn_tmr_callback+0x54>)
 8000208:	899b      	ldrh	r3, [r3, #12]
 800020a:	1c5a      	adds	r2, r3, #1
 800020c:	b291      	uxth	r1, r2
 800020e:	4a06      	ldr	r2, [pc, #24]	@ (8000228 <btn_tmr_callback+0x54>)
 8000210:	8191      	strh	r1, [r2, #12]
 8000212:	2b31      	cmp	r3, #49	@ 0x31
 8000214:	d904      	bls.n	8000220 <btn_tmr_callback+0x4c>
			screen_blink();
 8000216:	f001 fc25 	bl	8001a64 <screen_blink>
			m_cfg.blink_tick = 0;
 800021a:	4b03      	ldr	r3, [pc, #12]	@ (8000228 <btn_tmr_callback+0x54>)
 800021c:	2200      	movs	r2, #0
 800021e:	819a      	strh	r2, [r3, #12]
		}
	}
}
 8000220:	bf00      	nop
 8000222:	3708      	adds	r7, #8
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	20000000 	.word	0x20000000

0800022c <set_skip_key>:

void set_skip_key(void)
{
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
	m_cfg.key_tick = 0;
 8000230:	4b06      	ldr	r3, [pc, #24]	@ (800024c <set_skip_key+0x20>)
 8000232:	2200      	movs	r2, #0
 8000234:	609a      	str	r2, [r3, #8]
	m_cfg.btn_status = eBTN_RELEASE;
 8000236:	4b05      	ldr	r3, [pc, #20]	@ (800024c <set_skip_key+0x20>)
 8000238:	2201      	movs	r2, #1
 800023a:	709a      	strb	r2, [r3, #2]
	m_cfg.skip_press = 1;
 800023c:	4b03      	ldr	r3, [pc, #12]	@ (800024c <set_skip_key+0x20>)
 800023e:	2201      	movs	r2, #1
 8000240:	715a      	strb	r2, [r3, #5]
}
 8000242:	bf00      	nop
 8000244:	46bd      	mov	sp, r7
 8000246:	bc80      	pop	{r7}
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	20000000 	.word	0x20000000

08000250 <key_process>:

Key_t key_process(void)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
	uint8_t read_key;
	static Key_t multi_key=eKey_Idle, get_key = eKey_Idle,  old_key = eKey_Idle, release_old = eKey_Idle;
	Key_t press_key = eKey_Idle;
 8000256:	2300      	movs	r3, #0
 8000258:	71fb      	strb	r3, [r7, #7]

	read_key = key_check();
 800025a:	f7ff ff81 	bl	8000160 <key_check>
 800025e:	4603      	mov	r3, r0
 8000260:	71bb      	strb	r3, [r7, #6]
	if(read_key & 0x0F){ // down key
 8000262:	79bb      	ldrb	r3, [r7, #6]
 8000264:	f003 030f 	and.w	r3, r3, #15
 8000268:	2b00      	cmp	r3, #0
 800026a:	f000 808b 	beq.w	8000384 <key_process+0x134>
		if(m_cfg.skip_press){
 800026e:	4b65      	ldr	r3, [pc, #404]	@ (8000404 <key_process+0x1b4>)
 8000270:	795b      	ldrb	r3, [r3, #5]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <key_process+0x2a>
			return press_key;
 8000276:	79fb      	ldrb	r3, [r7, #7]
 8000278:	e0c0      	b.n	80003fc <key_process+0x1ac>
		}
		m_cfg.btn_status = eBTN_PRESS;
 800027a:	4b62      	ldr	r3, [pc, #392]	@ (8000404 <key_process+0x1b4>)
 800027c:	2200      	movs	r2, #0
 800027e:	709a      	strb	r2, [r3, #2]
		switch(read_key){
 8000280:	79bb      	ldrb	r3, [r7, #6]
 8000282:	3b03      	subs	r3, #3
 8000284:	2b09      	cmp	r3, #9
 8000286:	bf8c      	ite	hi
 8000288:	2201      	movhi	r2, #1
 800028a:	2200      	movls	r2, #0
 800028c:	b2d2      	uxtb	r2, r2
 800028e:	2a00      	cmp	r2, #0
 8000290:	d110      	bne.n	80002b4 <key_process+0x64>
 8000292:	f240 22cd 	movw	r2, #717	@ 0x2cd
 8000296:	fa22 f303 	lsr.w	r3, r2, r3
 800029a:	f003 0301 	and.w	r3, r3, #1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	bf14      	ite	ne
 80002a2:	2301      	movne	r3, #1
 80002a4:	2300      	moveq	r3, #0
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d003      	beq.n	80002b4 <key_process+0x64>
			case KEY_CUR_DOWN_PIN:
			case KEY_FACTORY_PIN:
			case KEY_USER_PIN:
			case KEY_VERSION_PIN:
			case KEY_CHSEL_PIN:
				multi_key = read_key;
 80002ac:	4a56      	ldr	r2, [pc, #344]	@ (8000408 <key_process+0x1b8>)
 80002ae:	79bb      	ldrb	r3, [r7, #6]
 80002b0:	7013      	strb	r3, [r2, #0]
				break;
 80002b2:	e003      	b.n	80002bc <key_process+0x6c>
			default:
				get_key = read_key;
 80002b4:	4a55      	ldr	r2, [pc, #340]	@ (800040c <key_process+0x1bc>)
 80002b6:	79bb      	ldrb	r3, [r7, #6]
 80002b8:	7013      	strb	r3, [r2, #0]
				break;
 80002ba:	bf00      	nop
		}
		if(old_key != read_key){
 80002bc:	4b54      	ldr	r3, [pc, #336]	@ (8000410 <key_process+0x1c0>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	79ba      	ldrb	r2, [r7, #6]
 80002c2:	429a      	cmp	r2, r3
 80002c4:	d00e      	beq.n	80002e4 <key_process+0x94>
			LOG_DBG("tick[%d] %s", m_cfg.key_tick, key_id_2_str(read_key));
 80002c6:	4b4f      	ldr	r3, [pc, #316]	@ (8000404 <key_process+0x1b4>)
 80002c8:	689c      	ldr	r4, [r3, #8]
 80002ca:	79bb      	ldrb	r3, [r7, #6]
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 fd01 	bl	8000cd4 <key_id_2_str>
 80002d2:	4603      	mov	r3, r0
 80002d4:	461a      	mov	r2, r3
 80002d6:	4621      	mov	r1, r4
 80002d8:	484e      	ldr	r0, [pc, #312]	@ (8000414 <key_process+0x1c4>)
 80002da:	f000 fc17 	bl	8000b0c <Printf>
			old_key = read_key;
 80002de:	4a4c      	ldr	r2, [pc, #304]	@ (8000410 <key_process+0x1c0>)
 80002e0:	79bb      	ldrb	r3, [r7, #6]
 80002e2:	7013      	strb	r3, [r2, #0]
		}
		if(get_key == eKey_Mode){
 80002e4:	4b49      	ldr	r3, [pc, #292]	@ (800040c <key_process+0x1bc>)
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2b08      	cmp	r3, #8
 80002ea:	d139      	bne.n	8000360 <key_process+0x110>
			if((m_cfg.setting_mode) && (m_cfg.key_tick > TIMER_50_MSEC)){
 80002ec:	4b45      	ldr	r3, [pc, #276]	@ (8000404 <key_process+0x1b4>)
 80002ee:	78db      	ldrb	r3, [r3, #3]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d014      	beq.n	800031e <key_process+0xce>
 80002f4:	4b43      	ldr	r3, [pc, #268]	@ (8000404 <key_process+0x1b4>)
 80002f6:	689b      	ldr	r3, [r3, #8]
 80002f8:	2b32      	cmp	r3, #50	@ 0x32
 80002fa:	d910      	bls.n	800031e <key_process+0xce>
				if(multi_key != eKey_Idle){
 80002fc:	4b42      	ldr	r3, [pc, #264]	@ (8000408 <key_process+0x1b8>)
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d002      	beq.n	800030a <key_process+0xba>
					m_cfg.mul_press = 1;
 8000304:	4b3f      	ldr	r3, [pc, #252]	@ (8000404 <key_process+0x1b4>)
 8000306:	2201      	movs	r2, #1
 8000308:	711a      	strb	r2, [r3, #4]
				}
				press_key = multi_key;
 800030a:	4b3f      	ldr	r3, [pc, #252]	@ (8000408 <key_process+0x1b8>)
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	71fb      	strb	r3, [r7, #7]
				multi_key = eKey_Idle;
 8000310:	4b3d      	ldr	r3, [pc, #244]	@ (8000408 <key_process+0x1b8>)
 8000312:	2200      	movs	r2, #0
 8000314:	701a      	strb	r2, [r3, #0]
				m_cfg.key_tick = 0;
 8000316:	4b3b      	ldr	r3, [pc, #236]	@ (8000404 <key_process+0x1b4>)
 8000318:	2200      	movs	r2, #0
 800031a:	609a      	str	r2, [r3, #8]
 800031c:	e01e      	b.n	800035c <key_process+0x10c>
			}else if(m_cfg.key_tick >= TIMER_2_SEC){
 800031e:	4b39      	ldr	r3, [pc, #228]	@ (8000404 <key_process+0x1b4>)
 8000320:	689b      	ldr	r3, [r3, #8]
 8000322:	2bc7      	cmp	r3, #199	@ 0xc7
 8000324:	d918      	bls.n	8000358 <key_process+0x108>
				if(m_cfg.setting_mode == 0){
 8000326:	4b37      	ldr	r3, [pc, #220]	@ (8000404 <key_process+0x1b4>)
 8000328:	78db      	ldrb	r3, [r3, #3]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d108      	bne.n	8000340 <key_process+0xf0>
					press_key = eKey_SetMode;
 800032e:	2310      	movs	r3, #16
 8000330:	71fb      	strb	r3, [r7, #7]
					m_cfg.setting_mode = 1;
 8000332:	4b34      	ldr	r3, [pc, #208]	@ (8000404 <key_process+0x1b4>)
 8000334:	2201      	movs	r2, #1
 8000336:	70da      	strb	r2, [r3, #3]
					m_cfg.blink_tick = 0;
 8000338:	4b32      	ldr	r3, [pc, #200]	@ (8000404 <key_process+0x1b4>)
 800033a:	2200      	movs	r2, #0
 800033c:	819a      	strh	r2, [r3, #12]
 800033e:	e008      	b.n	8000352 <key_process+0x102>
				}else if(m_cfg.remote_ctrl){
 8000340:	4b30      	ldr	r3, [pc, #192]	@ (8000404 <key_process+0x1b4>)
 8000342:	7b9b      	ldrb	r3, [r3, #14]
 8000344:	2b00      	cmp	r3, #0
 8000346:	d004      	beq.n	8000352 <key_process+0x102>
					m_cfg.remote_ctrl = 0;
 8000348:	4b2e      	ldr	r3, [pc, #184]	@ (8000404 <key_process+0x1b4>)
 800034a:	2200      	movs	r2, #0
 800034c:	739a      	strb	r2, [r3, #14]
					press_key = eKey_ExitRemote;
 800034e:	2320      	movs	r3, #32
 8000350:	71fb      	strb	r3, [r7, #7]
				}
				set_skip_key();
 8000352:	f7ff ff6b 	bl	800022c <set_skip_key>
 8000356:	e001      	b.n	800035c <key_process+0x10c>
			}else{
				return eKey_Idle;
 8000358:	2300      	movs	r3, #0
 800035a:	e04f      	b.n	80003fc <key_process+0x1ac>
			}

			return press_key;
 800035c:	79fb      	ldrb	r3, [r7, #7]
 800035e:	e04d      	b.n	80003fc <key_process+0x1ac>
		}

		if((multi_key!=eKey_Idle) && (m_cfg.key_tick > TIMER_5_SEC)){
 8000360:	4b29      	ldr	r3, [pc, #164]	@ (8000408 <key_process+0x1b8>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d048      	beq.n	80003fa <key_process+0x1aa>
 8000368:	4b26      	ldr	r3, [pc, #152]	@ (8000404 <key_process+0x1b4>)
 800036a:	689b      	ldr	r3, [r3, #8]
 800036c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000370:	d943      	bls.n	80003fa <key_process+0x1aa>
			press_key = multi_key;
 8000372:	4b25      	ldr	r3, [pc, #148]	@ (8000408 <key_process+0x1b8>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	71fb      	strb	r3, [r7, #7]
			multi_key = eKey_Idle;
 8000378:	4b23      	ldr	r3, [pc, #140]	@ (8000408 <key_process+0x1b8>)
 800037a:	2200      	movs	r2, #0
 800037c:	701a      	strb	r2, [r3, #0]
			set_skip_key();
 800037e:	f7ff ff55 	bl	800022c <set_skip_key>
 8000382:	e03a      	b.n	80003fa <key_process+0x1aa>
		}
	}else{  // up key
		if((get_key != eKey_Idle)&& (release_old != get_key)){
 8000384:	4b21      	ldr	r3, [pc, #132]	@ (800040c <key_process+0x1bc>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d015      	beq.n	80003b8 <key_process+0x168>
 800038c:	4b22      	ldr	r3, [pc, #136]	@ (8000418 <key_process+0x1c8>)
 800038e:	781a      	ldrb	r2, [r3, #0]
 8000390:	4b1e      	ldr	r3, [pc, #120]	@ (800040c <key_process+0x1bc>)
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	429a      	cmp	r2, r3
 8000396:	d00f      	beq.n	80003b8 <key_process+0x168>
			LOG_DBG("Release[%s] tick[%d]", key_id_2_str(get_key), m_cfg.key_tick);
 8000398:	4b1c      	ldr	r3, [pc, #112]	@ (800040c <key_process+0x1bc>)
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	4618      	mov	r0, r3
 800039e:	f000 fc99 	bl	8000cd4 <key_id_2_str>
 80003a2:	4601      	mov	r1, r0
 80003a4:	4b17      	ldr	r3, [pc, #92]	@ (8000404 <key_process+0x1b4>)
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	461a      	mov	r2, r3
 80003aa:	481c      	ldr	r0, [pc, #112]	@ (800041c <key_process+0x1cc>)
 80003ac:	f000 fbae 	bl	8000b0c <Printf>
			release_old = get_key;
 80003b0:	4b16      	ldr	r3, [pc, #88]	@ (800040c <key_process+0x1bc>)
 80003b2:	781a      	ldrb	r2, [r3, #0]
 80003b4:	4b18      	ldr	r3, [pc, #96]	@ (8000418 <key_process+0x1c8>)
 80003b6:	701a      	strb	r2, [r3, #0]
		}
		m_cfg.btn_status = eBTN_RELEASE;
 80003b8:	4b12      	ldr	r3, [pc, #72]	@ (8000404 <key_process+0x1b4>)
 80003ba:	2201      	movs	r2, #1
 80003bc:	709a      	strb	r2, [r3, #2]
		if((m_cfg.key_tick > TIMER_10_MSEC) && (m_cfg.key_tick < TIMER_50_MSEC)){
 80003be:	4b11      	ldr	r3, [pc, #68]	@ (8000404 <key_process+0x1b4>)
 80003c0:	689b      	ldr	r3, [r3, #8]
 80003c2:	2b0a      	cmp	r3, #10
 80003c4:	d90d      	bls.n	80003e2 <key_process+0x192>
 80003c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000404 <key_process+0x1b4>)
 80003c8:	689b      	ldr	r3, [r3, #8]
 80003ca:	2b31      	cmp	r3, #49	@ 0x31
 80003cc:	d809      	bhi.n	80003e2 <key_process+0x192>
			if(m_cfg.mul_press == 0){
 80003ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000404 <key_process+0x1b4>)
 80003d0:	791b      	ldrb	r3, [r3, #4]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d105      	bne.n	80003e2 <key_process+0x192>
				press_key = get_key;
 80003d6:	4b0d      	ldr	r3, [pc, #52]	@ (800040c <key_process+0x1bc>)
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	71fb      	strb	r3, [r7, #7]
				get_key = eKey_Idle;
 80003dc:	4b0b      	ldr	r3, [pc, #44]	@ (800040c <key_process+0x1bc>)
 80003de:	2200      	movs	r2, #0
 80003e0:	701a      	strb	r2, [r3, #0]
			}
		}
		old_key = eKey_Idle;
 80003e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000410 <key_process+0x1c0>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	701a      	strb	r2, [r3, #0]
		m_cfg.skip_press = 0;
 80003e8:	4b06      	ldr	r3, [pc, #24]	@ (8000404 <key_process+0x1b4>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	715a      	strb	r2, [r3, #5]
		m_cfg.key_tick = 0;
 80003ee:	4b05      	ldr	r3, [pc, #20]	@ (8000404 <key_process+0x1b4>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
		m_cfg.mul_press = 0;
 80003f4:	4b03      	ldr	r3, [pc, #12]	@ (8000404 <key_process+0x1b4>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	711a      	strb	r2, [r3, #4]
	}

	return press_key;
 80003fa:	79fb      	ldrb	r3, [r7, #7]
}
 80003fc:	4618      	mov	r0, r3
 80003fe:	370c      	adds	r7, #12
 8000400:	46bd      	mov	sp, r7
 8000402:	bd90      	pop	{r4, r7, pc}
 8000404:	20000000 	.word	0x20000000
 8000408:	200001c0 	.word	0x200001c0
 800040c:	200001c1 	.word	0x200001c1
 8000410:	200001c2 	.word	0x200001c2
 8000414:	08008dd4 	.word	0x08008dd4
 8000418:	200001c3 	.word	0x200001c3
 800041c:	08008de8 	.word	0x08008de8

08000420 <run_menu>:

void run_menu(Key_t input_key)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b084      	sub	sp, #16
 8000424:	af00      	add	r7, sp, #0
 8000426:	4603      	mov	r3, r0
 8000428:	71fb      	strb	r3, [r7, #7]
	ScreenID_t next_sc = eMAX_SCREEN_ID;
 800042a:	230f      	movs	r3, #15
 800042c:	73fb      	strb	r3, [r7, #15]

	LOG_DBG("Old SC[%d] Key[%x]", m_cfg.sc_id, input_key);
 800042e:	4b43      	ldr	r3, [pc, #268]	@ (800053c <run_menu+0x11c>)
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	4619      	mov	r1, r3
 8000434:	79fb      	ldrb	r3, [r7, #7]
 8000436:	461a      	mov	r2, r3
 8000438:	4841      	ldr	r0, [pc, #260]	@ (8000540 <run_menu+0x120>)
 800043a:	f000 fb67 	bl	8000b0c <Printf>
	if(m_cfg.setting_mode == 0){
 800043e:	4b3f      	ldr	r3, [pc, #252]	@ (800053c <run_menu+0x11c>)
 8000440:	78db      	ldrb	r3, [r3, #3]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d13e      	bne.n	80004c4 <run_menu+0xa4>
		switch(input_key){
 8000446:	79fb      	ldrb	r3, [r7, #7]
 8000448:	3b01      	subs	r3, #1
 800044a:	2b08      	cmp	r3, #8
 800044c:	d839      	bhi.n	80004c2 <run_menu+0xa2>
 800044e:	a201      	add	r2, pc, #4	@ (adr r2, 8000454 <run_menu+0x34>)
 8000450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000454:	080004c3 	.word	0x080004c3
 8000458:	080004c3 	.word	0x080004c3
 800045c:	080004b3 	.word	0x080004b3
 8000460:	080004c3 	.word	0x080004c3
 8000464:	080004bb 	.word	0x080004bb
 8000468:	080004a3 	.word	0x080004a3
 800046c:	080004c3 	.word	0x080004c3
 8000470:	08000479 	.word	0x08000479
 8000474:	080004ab 	.word	0x080004ab
			case eKey_Enter:
				break;
			case eKey_Mode:
				if(++m_cfg.list_idx >= MAX_SCREEN_STEP){
 8000478:	4b30      	ldr	r3, [pc, #192]	@ (800053c <run_menu+0x11c>)
 800047a:	785b      	ldrb	r3, [r3, #1]
 800047c:	3301      	adds	r3, #1
 800047e:	b2da      	uxtb	r2, r3
 8000480:	4b2e      	ldr	r3, [pc, #184]	@ (800053c <run_menu+0x11c>)
 8000482:	705a      	strb	r2, [r3, #1]
 8000484:	4b2d      	ldr	r3, [pc, #180]	@ (800053c <run_menu+0x11c>)
 8000486:	785b      	ldrb	r3, [r3, #1]
 8000488:	2b05      	cmp	r3, #5
 800048a:	d902      	bls.n	8000492 <run_menu+0x72>
					m_cfg.list_idx = 0;
 800048c:	4b2b      	ldr	r3, [pc, #172]	@ (800053c <run_menu+0x11c>)
 800048e:	2200      	movs	r2, #0
 8000490:	705a      	strb	r2, [r3, #1]
				}
				m_cfg.sc_id = screen_list[m_cfg.list_idx];
 8000492:	4b2a      	ldr	r3, [pc, #168]	@ (800053c <run_menu+0x11c>)
 8000494:	785b      	ldrb	r3, [r3, #1]
 8000496:	461a      	mov	r2, r3
 8000498:	4b2a      	ldr	r3, [pc, #168]	@ (8000544 <run_menu+0x124>)
 800049a:	5c9a      	ldrb	r2, [r3, r2]
 800049c:	4b27      	ldr	r3, [pc, #156]	@ (800053c <run_menu+0x11c>)
 800049e:	701a      	strb	r2, [r3, #0]
				break;
 80004a0:	e010      	b.n	80004c4 <run_menu+0xa4>
			case eKey_ChSel:
				m_cfg.sc_id = eCHSELECT_SC;
 80004a2:	4b26      	ldr	r3, [pc, #152]	@ (800053c <run_menu+0x11c>)
 80004a4:	220d      	movs	r2, #13
 80004a6:	701a      	strb	r2, [r3, #0]
				break;
 80004a8:	e00c      	b.n	80004c4 <run_menu+0xa4>
			case eKey_Factory:
				m_cfg.sc_id = eFACTORY_SC;
 80004aa:	4b24      	ldr	r3, [pc, #144]	@ (800053c <run_menu+0x11c>)
 80004ac:	220c      	movs	r2, #12
 80004ae:	701a      	strb	r2, [r3, #0]
				break;
 80004b0:	e008      	b.n	80004c4 <run_menu+0xa4>
			case eKey_User:
				m_cfg.sc_id = eUSERMODE_SC;
 80004b2:	4b22      	ldr	r3, [pc, #136]	@ (800053c <run_menu+0x11c>)
 80004b4:	220b      	movs	r2, #11
 80004b6:	701a      	strb	r2, [r3, #0]
				break;
 80004b8:	e004      	b.n	80004c4 <run_menu+0xa4>
			case eKey_Version:
				m_cfg.sc_id = eVERSION_SC;
 80004ba:	4b20      	ldr	r3, [pc, #128]	@ (800053c <run_menu+0x11c>)
 80004bc:	220e      	movs	r2, #14
 80004be:	701a      	strb	r2, [r3, #0]
				break;
 80004c0:	e000      	b.n	80004c4 <run_menu+0xa4>
			default:
				break;
 80004c2:	bf00      	nop
		}
	}
	LOG_DBG("Change SC[%d]", m_cfg.sc_id);
 80004c4:	4b1d      	ldr	r3, [pc, #116]	@ (800053c <run_menu+0x11c>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	4619      	mov	r1, r3
 80004ca:	481f      	ldr	r0, [pc, #124]	@ (8000548 <run_menu+0x128>)
 80004cc:	f000 fb1e 	bl	8000b0c <Printf>
	next_sc = screen_process(m_cfg.sc_id, input_key);
 80004d0:	4b1a      	ldr	r3, [pc, #104]	@ (800053c <run_menu+0x11c>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	79fa      	ldrb	r2, [r7, #7]
 80004d6:	4611      	mov	r1, r2
 80004d8:	4618      	mov	r0, r3
 80004da:	f001 fafd 	bl	8001ad8 <screen_process>
 80004de:	4603      	mov	r3, r0
 80004e0:	73fb      	strb	r3, [r7, #15]
	if(next_sc < eMAX_SCREEN_ID ){
 80004e2:	7bfb      	ldrb	r3, [r7, #15]
 80004e4:	2b0e      	cmp	r3, #14
 80004e6:	d817      	bhi.n	8000518 <run_menu+0xf8>
		LOG_INF("Next Sc[%d] Cur SC[%d]", next_sc, m_cfg.sc_id)
 80004e8:	7bfb      	ldrb	r3, [r7, #15]
 80004ea:	4a14      	ldr	r2, [pc, #80]	@ (800053c <run_menu+0x11c>)
 80004ec:	7812      	ldrb	r2, [r2, #0]
 80004ee:	4619      	mov	r1, r3
 80004f0:	4816      	ldr	r0, [pc, #88]	@ (800054c <run_menu+0x12c>)
 80004f2:	f000 fb0b 	bl	8000b0c <Printf>
		if(next_sc != m_cfg.sc_id){
 80004f6:	4b11      	ldr	r3, [pc, #68]	@ (800053c <run_menu+0x11c>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	7bfa      	ldrb	r2, [r7, #15]
 80004fc:	429a      	cmp	r2, r3
 80004fe:	d018      	beq.n	8000532 <run_menu+0x112>
			m_cfg.sc_id = next_sc;
 8000500:	4a0e      	ldr	r2, [pc, #56]	@ (800053c <run_menu+0x11c>)
 8000502:	7bfb      	ldrb	r3, [r7, #15]
 8000504:	7013      	strb	r3, [r2, #0]
			next_sc = screen_process(m_cfg.sc_id, eKey_Idle);
 8000506:	4b0d      	ldr	r3, [pc, #52]	@ (800053c <run_menu+0x11c>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2100      	movs	r1, #0
 800050c:	4618      	mov	r0, r3
 800050e:	f001 fae3 	bl	8001ad8 <screen_process>
 8000512:	4603      	mov	r3, r0
 8000514:	73fb      	strb	r3, [r7, #15]
			m_cfg.setting_mode = 0;
			m_cfg.sc_id = eCHANNEL_SC;
			m_cfg.list_idx = 0;
		}
	}
}
 8000516:	e00c      	b.n	8000532 <run_menu+0x112>
		if(m_cfg.setting_mode){
 8000518:	4b08      	ldr	r3, [pc, #32]	@ (800053c <run_menu+0x11c>)
 800051a:	78db      	ldrb	r3, [r3, #3]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d008      	beq.n	8000532 <run_menu+0x112>
			m_cfg.setting_mode = 0;
 8000520:	4b06      	ldr	r3, [pc, #24]	@ (800053c <run_menu+0x11c>)
 8000522:	2200      	movs	r2, #0
 8000524:	70da      	strb	r2, [r3, #3]
			m_cfg.sc_id = eCHANNEL_SC;
 8000526:	4b05      	ldr	r3, [pc, #20]	@ (800053c <run_menu+0x11c>)
 8000528:	2201      	movs	r2, #1
 800052a:	701a      	strb	r2, [r3, #0]
			m_cfg.list_idx = 0;
 800052c:	4b03      	ldr	r3, [pc, #12]	@ (800053c <run_menu+0x11c>)
 800052e:	2200      	movs	r2, #0
 8000530:	705a      	strb	r2, [r3, #1]
}
 8000532:	bf00      	nop
 8000534:	3710      	adds	r7, #16
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	20000000 	.word	0x20000000
 8000540:	08008e04 	.word	0x08008e04
 8000544:	20000010 	.word	0x20000010
 8000548:	08008e20 	.word	0x08008e20
 800054c:	08008e38 	.word	0x08008e38

08000550 <AppsTask>:

//void AppsTask(void const * argument)
void AppsTask(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
	Key_t read_key;

	osTimerStart(btn_TimerHandle, (TIMER_10_MSEC));
 8000556:	4b18      	ldr	r3, [pc, #96]	@ (80005b8 <AppsTask+0x68>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	210a      	movs	r1, #10
 800055c:	4618      	mov	r0, r3
 800055e:	f005 f9f5 	bl	800594c <osTimerStart>
	m_cfg.btn_status = eBTN_PRESS;
 8000562:	4b16      	ldr	r3, [pc, #88]	@ (80005bc <AppsTask+0x6c>)
 8000564:	2200      	movs	r2, #0
 8000566:	709a      	strb	r2, [r3, #2]
	while(1){
		if(m_cfg.key_tick >= TIMER_3_SEC){
 8000568:	4b14      	ldr	r3, [pc, #80]	@ (80005bc <AppsTask+0x6c>)
 800056a:	689b      	ldr	r3, [r3, #8]
 800056c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000570:	d30f      	bcc.n	8000592 <AppsTask+0x42>
			m_cfg.sc_id = eCHANNEL_SC;
 8000572:	4b12      	ldr	r3, [pc, #72]	@ (80005bc <AppsTask+0x6c>)
 8000574:	2201      	movs	r2, #1
 8000576:	701a      	strb	r2, [r3, #0]
			screen_process(m_cfg.sc_id, eKey_Idle);
 8000578:	4b10      	ldr	r3, [pc, #64]	@ (80005bc <AppsTask+0x6c>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f001 faaa 	bl	8001ad8 <screen_process>
			m_cfg.btn_status = eBTN_RELEASE;
 8000584:	4b0d      	ldr	r3, [pc, #52]	@ (80005bc <AppsTask+0x6c>)
 8000586:	2201      	movs	r2, #1
 8000588:	709a      	strb	r2, [r3, #2]
			m_cfg.key_tick = 0;
 800058a:	4b0c      	ldr	r3, [pc, #48]	@ (80005bc <AppsTask+0x6c>)
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
			break;
 8000590:	e003      	b.n	800059a <AppsTask+0x4a>
		}
		osDelay(10);
 8000592:	200a      	movs	r0, #10
 8000594:	f005 f991 	bl	80058ba <osDelay>
		if(m_cfg.key_tick >= TIMER_3_SEC){
 8000598:	e7e6      	b.n	8000568 <AppsTask+0x18>
	}

	while(1){
		read_key = key_process();
 800059a:	f7ff fe59 	bl	8000250 <key_process>
 800059e:	4603      	mov	r3, r0
 80005a0:	71fb      	strb	r3, [r7, #7]
		if(read_key != eKey_Idle){
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d003      	beq.n	80005b0 <AppsTask+0x60>
			run_menu(read_key);
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff ff38 	bl	8000420 <run_menu>
		}
		osDelay(10);
 80005b0:	200a      	movs	r0, #10
 80005b2:	f005 f982 	bl	80058ba <osDelay>
		read_key = key_process();
 80005b6:	e7f0      	b.n	800059a <AppsTask+0x4a>
 80005b8:	200001bc 	.word	0x200001bc
 80005bc:	20000000 	.word	0x20000000

080005c0 <apps_init>:
	}
}

int apps_init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
	osTimerDef(btn_Timer, btn_tmr_callback);
 80005c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000600 <apps_init+0x40>)
 80005c8:	603b      	str	r3, [r7, #0]
 80005ca:	2300      	movs	r3, #0
 80005cc:	607b      	str	r3, [r7, #4]
	btn_TimerHandle = osTimerCreate(osTimer(btn_Timer), osTimerPeriodic, NULL);
 80005ce:	463b      	mov	r3, r7
 80005d0:	2200      	movs	r2, #0
 80005d2:	2101      	movs	r1, #1
 80005d4:	4618      	mov	r0, r3
 80005d6:	f005 f985 	bl	80058e4 <osTimerCreate>
 80005da:	4603      	mov	r3, r0
 80005dc:	4a09      	ldr	r2, [pc, #36]	@ (8000604 <apps_init+0x44>)
 80005de:	6013      	str	r3, [r2, #0]
	if(btn_TimerHandle == NULL){
 80005e0:	4b08      	ldr	r3, [pc, #32]	@ (8000604 <apps_init+0x44>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d105      	bne.n	80005f4 <apps_init+0x34>
		LOG_ERR("Front Key timer Create Error");
 80005e8:	4807      	ldr	r0, [pc, #28]	@ (8000608 <apps_init+0x48>)
 80005ea:	f000 fa8f 	bl	8000b0c <Printf>
		return -1;
 80005ee:	f04f 33ff 	mov.w	r3, #4294967295
 80005f2:	e000      	b.n	80005f6 <apps_init+0x36>
	if(AppsTaskHandle == NULL){
		LOG_ERR("Front Apps Task Create Error");
		return -1;
	}
#endif
	return 0;
 80005f4:	2300      	movs	r3, #0
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	080001d5 	.word	0x080001d5
 8000604:	200001bc 	.word	0x200001bc
 8000608:	08008e58 	.word	0x08008e58

0800060c <set_default_config>:

config_t m_flash_cfg, *m_app_config;
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
static void set_default_config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	LOG_INF("Set Default Configuration...");
 8000610:	4806      	ldr	r0, [pc, #24]	@ (800062c <set_default_config+0x20>)
 8000612:	f000 fa7b 	bl	8000b0c <Printf>
	memcpy(&m_flash_cfg, &def_config, sizeof(config_t));
 8000616:	4a06      	ldr	r2, [pc, #24]	@ (8000630 <set_default_config+0x24>)
 8000618:	4b06      	ldr	r3, [pc, #24]	@ (8000634 <set_default_config+0x28>)
 800061a:	4610      	mov	r0, r2
 800061c:	4619      	mov	r1, r3
 800061e:	2347      	movs	r3, #71	@ 0x47
 8000620:	461a      	mov	r2, r3
 8000622:	f007 ff71 	bl	8008508 <memcpy>
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	08008e7c 	.word	0x08008e7c
 8000630:	200001c4 	.word	0x200001c4
 8000634:	20000018 	.word	0x20000018

08000638 <app_config_init>:

void app_config_init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	if(app_read_config(&m_flash_cfg)){
 800063c:	4808      	ldr	r0, [pc, #32]	@ (8000660 <app_config_init+0x28>)
 800063e:	f000 f821 	bl	8000684 <app_read_config>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <app_config_init+0x14>
		set_default_config();
 8000648:	f7ff ffe0 	bl	800060c <set_default_config>
	}
	m_app_config = &m_flash_cfg;
 800064c:	4b05      	ldr	r3, [pc, #20]	@ (8000664 <app_config_init+0x2c>)
 800064e:	4a04      	ldr	r2, [pc, #16]	@ (8000660 <app_config_init+0x28>)
 8000650:	601a      	str	r2, [r3, #0]
	LOG_HEX_DUMP(&m_flash_cfg, sizeof(config_t), "Config Data");
 8000652:	4a05      	ldr	r2, [pc, #20]	@ (8000668 <app_config_init+0x30>)
 8000654:	2147      	movs	r1, #71	@ 0x47
 8000656:	4802      	ldr	r0, [pc, #8]	@ (8000660 <app_config_init+0x28>)
 8000658:	f000 faaa 	bl	8000bb0 <dump_printf>
}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	200001c4 	.word	0x200001c4
 8000664:	2000020c 	.word	0x2000020c
 8000668:	08008ea0 	.word	0x08008ea0

0800066c <app_save_config>:

int app_save_config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	return m_flash_config_write((void *)&m_flash_cfg, sizeof(config_t));
 8000670:	2147      	movs	r1, #71	@ 0x47
 8000672:	4803      	ldr	r0, [pc, #12]	@ (8000680 <app_save_config+0x14>)
 8000674:	f000 f870 	bl	8000758 <m_flash_config_write>
 8000678:	4603      	mov	r3, r0
}
 800067a:	4618      	mov	r0, r3
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	200001c4 	.word	0x200001c4

08000684 <app_read_config>:

uint8_t app_read_config(config_t *pConfig)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	m_flash_config_read((void *)pConfig, sizeof(config_t));
 800068c:	2147      	movs	r1, #71	@ 0x47
 800068e:	6878      	ldr	r0, [r7, #4]
 8000690:	f000 f84e 	bl	8000730 <m_flash_config_read>
	if(pConfig->valid != CONFIG_VALID){
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b19      	cmp	r3, #25
 800069a:	d004      	beq.n	80006a6 <app_read_config+0x22>
		LOG_ERR("Configuration is not valid!!!");
 800069c:	4804      	ldr	r0, [pc, #16]	@ (80006b0 <app_read_config+0x2c>)
 800069e:	f000 fa35 	bl	8000b0c <Printf>
		return 1;
 80006a2:	2301      	movs	r3, #1
 80006a4:	e000      	b.n	80006a8 <app_read_config+0x24>
	}
	return 0;
 80006a6:	2300      	movs	r3, #0
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	08008eac 	.word	0x08008eac

080006b4 <m_flash_config_erase>:
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/

/* Private function prototypes -----------------------------------------------*/
int m_flash_config_erase(void)
{
 80006b4:	b590      	push	{r4, r7, lr}
 80006b6:	b087      	sub	sp, #28
 80006b8:	af00      	add	r7, sp, #0
	int err_code;
	uint32_t PageError;
	FLASH_EraseInitTypeDef EraseInitStruct;

	HAL_FLASH_Unlock();
 80006ba:	f003 f835 	bl	8003728 <HAL_FLASH_Unlock>

	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80006be:	2300      	movs	r3, #0
 80006c0:	603b      	str	r3, [r7, #0]
	EraseInitStruct.PageAddress = FRONT_CONFIG_ADDRESS;
 80006c2:	4b17      	ldr	r3, [pc, #92]	@ (8000720 <m_flash_config_erase+0x6c>)
 80006c4:	60bb      	str	r3, [r7, #8]
	EraseInitStruct.NbPages     = 1;
 80006c6:	2301      	movs	r3, #1
 80006c8:	60fb      	str	r3, [r7, #12]

	err_code = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 80006ca:	f107 0210 	add.w	r2, r7, #16
 80006ce:	463b      	mov	r3, r7
 80006d0:	4611      	mov	r1, r2
 80006d2:	4618      	mov	r0, r3
 80006d4:	f003 f91a 	bl	800390c <HAL_FLASHEx_Erase>
 80006d8:	4603      	mov	r3, r0
 80006da:	617b      	str	r3, [r7, #20]
	if (err_code != HAL_OK)
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d017      	beq.n	8000712 <m_flash_config_erase+0x5e>
	{
		LOG_ERR("Page Error[%x] Flash Error[%x]", PageError, HAL_FLASH_GetError());
 80006e2:	693c      	ldr	r4, [r7, #16]
 80006e4:	f003 f856 	bl	8003794 <HAL_FLASH_GetError>
 80006e8:	4603      	mov	r3, r0
 80006ea:	461a      	mov	r2, r3
 80006ec:	4621      	mov	r1, r4
 80006ee:	480d      	ldr	r0, [pc, #52]	@ (8000724 <m_flash_config_erase+0x70>)
 80006f0:	f000 fa0c 	bl	8000b0c <Printf>
		HAL_FLASH_Lock();
 80006f4:	f003 f83e 	bl	8003774 <HAL_FLASH_Lock>
		RETURN_IF_ERROR(err_code);
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d009      	beq.n	8000712 <m_flash_config_erase+0x5e>
 80006fe:	480a      	ldr	r0, [pc, #40]	@ (8000728 <m_flash_config_erase+0x74>)
 8000700:	f000 fa04 	bl	8000b0c <Printf>
 8000704:	697a      	ldr	r2, [r7, #20]
 8000706:	2122      	movs	r1, #34	@ 0x22
 8000708:	4808      	ldr	r0, [pc, #32]	@ (800072c <m_flash_config_erase+0x78>)
 800070a:	f000 f9ff 	bl	8000b0c <Printf>
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	e002      	b.n	8000718 <m_flash_config_erase+0x64>
	}

	HAL_FLASH_Lock();
 8000712:	f003 f82f 	bl	8003774 <HAL_FLASH_Lock>
	return 0;
 8000716:	2300      	movs	r3, #0
}
 8000718:	4618      	mov	r0, r3
 800071a:	371c      	adds	r7, #28
 800071c:	46bd      	mov	sp, r7
 800071e:	bd90      	pop	{r4, r7, pc}
 8000720:	0800f800 	.word	0x0800f800
 8000724:	08008ed4 	.word	0x08008ed4
 8000728:	08008efc 	.word	0x08008efc
 800072c:	08008f20 	.word	0x08008f20

08000730 <m_flash_config_read>:

void m_flash_config_read(void *pBuffer, int size)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	6039      	str	r1, [r7, #0]
	uint32_t address;

	address = FRONT_CONFIG_ADDRESS;
 800073a:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <m_flash_config_read+0x24>)
 800073c:	60fb      	str	r3, [r7, #12]

	memcpy(pBuffer, (uint32_t *)address, size);
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	683a      	ldr	r2, [r7, #0]
 8000742:	4619      	mov	r1, r3
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f007 fedf 	bl	8008508 <memcpy>
	//LOG_HEX_DUMP(pBuffer, size, "Dump DB");
}
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	0800f800 	.word	0x0800f800

08000758 <m_flash_config_write>:

int m_flash_config_write(void *Data_p, int size)
{
 8000758:	b5b0      	push	{r4, r5, r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	6039      	str	r1, [r7, #0]
	unsigned int write_size =0;
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
	uint32_t Address, write_data;
	uint16_t *pData;

	Address = FRONT_CONFIG_ADDRESS;
 8000766:	4b20      	ldr	r3, [pc, #128]	@ (80007e8 <m_flash_config_write+0x90>)
 8000768:	613b      	str	r3, [r7, #16]

	pData = (uint16_t *)Data_p;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	60fb      	str	r3, [r7, #12]

	if(m_flash_config_erase()){
 800076e:	f7ff ffa1 	bl	80006b4 <m_flash_config_erase>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d002      	beq.n	800077e <m_flash_config_write+0x26>
		return -1;
 8000778:	f04f 33ff 	mov.w	r3, #4294967295
 800077c:	e02f      	b.n	80007de <m_flash_config_write+0x86>
	}

	HAL_FLASH_Unlock();
 800077e:	f002 ffd3 	bl	8003728 <HAL_FLASH_Unlock>

	while(write_size < size)
 8000782:	e025      	b.n	80007d0 <m_flash_config_write+0x78>
	{
		write_data = (uint16_t)*pData;
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	881b      	ldrh	r3, [r3, #0]
 8000788:	60bb      	str	r3, [r7, #8]
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Address, write_data) != HAL_OK)
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	2200      	movs	r2, #0
 800078e:	461c      	mov	r4, r3
 8000790:	4615      	mov	r5, r2
 8000792:	4622      	mov	r2, r4
 8000794:	462b      	mov	r3, r5
 8000796:	6939      	ldr	r1, [r7, #16]
 8000798:	2001      	movs	r0, #1
 800079a:	f002 ff55 	bl	8003648 <HAL_FLASH_Program>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d00c      	beq.n	80007be <m_flash_config_write+0x66>
		{

			LOG_ERR("Flash Write Error [%lx] TotSize[%d] WriteSize[%d]", HAL_FLASH_GetError(), size, write_size);
 80007a4:	f002 fff6 	bl	8003794 <HAL_FLASH_GetError>
 80007a8:	4601      	mov	r1, r0
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	683a      	ldr	r2, [r7, #0]
 80007ae:	480f      	ldr	r0, [pc, #60]	@ (80007ec <m_flash_config_write+0x94>)
 80007b0:	f000 f9ac 	bl	8000b0c <Printf>

			HAL_FLASH_Lock();
 80007b4:	f002 ffde 	bl	8003774 <HAL_FLASH_Lock>
			return -1;
 80007b8:	f04f 33ff 	mov.w	r3, #4294967295
 80007bc:	e00f      	b.n	80007de <m_flash_config_write+0x86>
		}
		pData++;
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	3302      	adds	r3, #2
 80007c2:	60fb      	str	r3, [r7, #12]
		write_size+=2;
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	3302      	adds	r3, #2
 80007c8:	617b      	str	r3, [r7, #20]
		Address +=2;
 80007ca:	693b      	ldr	r3, [r7, #16]
 80007cc:	3302      	adds	r3, #2
 80007ce:	613b      	str	r3, [r7, #16]
	while(write_size < size)
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	697a      	ldr	r2, [r7, #20]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d3d5      	bcc.n	8000784 <m_flash_config_write+0x2c>
	}

	HAL_FLASH_Lock();
 80007d8:	f002 ffcc 	bl	8003774 <HAL_FLASH_Lock>
	return 0;
 80007dc:	2300      	movs	r3, #0
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3718      	adds	r7, #24
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bdb0      	pop	{r4, r5, r7, pc}
 80007e6:	bf00      	nop
 80007e8:	0800f800 	.word	0x0800f800
 80007ec:	08008f54 	.word	0x08008f54

080007f0 <trigger_set>:
		HAL_GPIO_WritePin(trigger[cnt].Port, trigger[cnt].pin, GPIO_PIN_SET);
	}
}

void trigger_set(uint8_t signal)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	71fb      	strb	r3, [r7, #7]
	int cnt;
	
	if(signal == 0){
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d116      	bne.n	800082e <trigger_set+0x3e>
		for(cnt = 0; cnt < MAX_CHANNEL; cnt++){
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	e00f      	b.n	8000826 <trigger_set+0x36>
			HAL_GPIO_WritePin(trigger[cnt].Port, trigger[cnt].pin, GPIO_PIN_SET);
 8000806:	4a1a      	ldr	r2, [pc, #104]	@ (8000870 <trigger_set+0x80>)
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800080e:	4a18      	ldr	r2, [pc, #96]	@ (8000870 <trigger_set+0x80>)
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	00db      	lsls	r3, r3, #3
 8000814:	4413      	add	r3, r2
 8000816:	889b      	ldrh	r3, [r3, #4]
 8000818:	2201      	movs	r2, #1
 800081a:	4619      	mov	r1, r3
 800081c:	f003 fab9 	bl	8003d92 <HAL_GPIO_WritePin>
		for(cnt = 0; cnt < MAX_CHANNEL; cnt++){
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	3301      	adds	r3, #1
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	2b07      	cmp	r3, #7
 800082a:	ddec      	ble.n	8000806 <trigger_set+0x16>
		}
		return ;
 800082c:	e01d      	b.n	800086a <trigger_set+0x7a>
	}
	
	for(cnt = 0; cnt < MAX_CHANNEL; cnt++){
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	e017      	b.n	8000864 <trigger_set+0x74>
		if((signal >> cnt) & 0x01){
 8000834:	79fa      	ldrb	r2, [r7, #7]
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	fa42 f303 	asr.w	r3, r2, r3
 800083c:	f003 0301 	and.w	r3, r3, #1
 8000840:	2b00      	cmp	r3, #0
 8000842:	d00c      	beq.n	800085e <trigger_set+0x6e>
			HAL_GPIO_WritePin(trigger[cnt].Port, trigger[cnt].pin, GPIO_PIN_RESET);
 8000844:	4a0a      	ldr	r2, [pc, #40]	@ (8000870 <trigger_set+0x80>)
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800084c:	4a08      	ldr	r2, [pc, #32]	@ (8000870 <trigger_set+0x80>)
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	00db      	lsls	r3, r3, #3
 8000852:	4413      	add	r3, r2
 8000854:	889b      	ldrh	r3, [r3, #4]
 8000856:	2200      	movs	r2, #0
 8000858:	4619      	mov	r1, r3
 800085a:	f003 fa9a 	bl	8003d92 <HAL_GPIO_WritePin>
	for(cnt = 0; cnt < MAX_CHANNEL; cnt++){
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	3301      	adds	r3, #1
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	2b07      	cmp	r3, #7
 8000868:	dde4      	ble.n	8000834 <trigger_set+0x44>
		}
	}
}
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000060 	.word	0x20000060

08000874 <push_buf>:
static serial_cfg_t config;
/* Private function prototypes -----------------------------------------------*/
//static void SerialTask(void const * argument);
/* Private functions ---------------------------------------------------------*/
static void push_buf(uint8_t ch)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
	int pos = (que._head + 1) % MAX_QUEUE_SIZE;
 800087e:	4b11      	ldr	r3, [pc, #68]	@ (80008c4 <push_buf+0x50>)
 8000880:	881b      	ldrh	r3, [r3, #0]
 8000882:	3301      	adds	r3, #1
 8000884:	425a      	negs	r2, r3
 8000886:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800088a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800088e:	bf58      	it	pl
 8000890:	4253      	negpl	r3, r2
 8000892:	60fb      	str	r3, [r7, #12]

	if(pos == que._tail) return ;
 8000894:	4b0b      	ldr	r3, [pc, #44]	@ (80008c4 <push_buf+0x50>)
 8000896:	885b      	ldrh	r3, [r3, #2]
 8000898:	461a      	mov	r2, r3
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	4293      	cmp	r3, r2
 800089e:	d00b      	beq.n	80008b8 <push_buf+0x44>

	que._data[que._head] = ch;
 80008a0:	4b08      	ldr	r3, [pc, #32]	@ (80008c4 <push_buf+0x50>)
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	461a      	mov	r2, r3
 80008a6:	4b07      	ldr	r3, [pc, #28]	@ (80008c4 <push_buf+0x50>)
 80008a8:	4413      	add	r3, r2
 80008aa:	79fa      	ldrb	r2, [r7, #7]
 80008ac:	711a      	strb	r2, [r3, #4]
	que._head = pos;
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	4b04      	ldr	r3, [pc, #16]	@ (80008c4 <push_buf+0x50>)
 80008b4:	801a      	strh	r2, [r3, #0]
 80008b6:	e000      	b.n	80008ba <push_buf+0x46>
	if(pos == que._tail) return ;
 80008b8:	bf00      	nop
}
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	20000214 	.word	0x20000214

080008c8 <pop_buf>:

static uint8_t pop_buf(uint8_t *ch)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	if(que._head == que._tail) return 0;
 80008d0:	4b11      	ldr	r3, [pc, #68]	@ (8000918 <pop_buf+0x50>)
 80008d2:	881a      	ldrh	r2, [r3, #0]
 80008d4:	4b10      	ldr	r3, [pc, #64]	@ (8000918 <pop_buf+0x50>)
 80008d6:	885b      	ldrh	r3, [r3, #2]
 80008d8:	429a      	cmp	r2, r3
 80008da:	d101      	bne.n	80008e0 <pop_buf+0x18>
 80008dc:	2300      	movs	r3, #0
 80008de:	e015      	b.n	800090c <pop_buf+0x44>

	*ch = que._data[que._tail];
 80008e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000918 <pop_buf+0x50>)
 80008e2:	885b      	ldrh	r3, [r3, #2]
 80008e4:	461a      	mov	r2, r3
 80008e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000918 <pop_buf+0x50>)
 80008e8:	4413      	add	r3, r2
 80008ea:	791a      	ldrb	r2, [r3, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	701a      	strb	r2, [r3, #0]
	que._tail = (que._tail + 1)%MAX_QUEUE_SIZE;
 80008f0:	4b09      	ldr	r3, [pc, #36]	@ (8000918 <pop_buf+0x50>)
 80008f2:	885b      	ldrh	r3, [r3, #2]
 80008f4:	3301      	adds	r3, #1
 80008f6:	425a      	negs	r2, r3
 80008f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80008fc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8000900:	bf58      	it	pl
 8000902:	4253      	negpl	r3, r2
 8000904:	b29a      	uxth	r2, r3
 8000906:	4b04      	ldr	r3, [pc, #16]	@ (8000918 <pop_buf+0x50>)
 8000908:	805a      	strh	r2, [r3, #2]

	return 1;
 800090a:	2301      	movs	r3, #1
}
 800090c:	4618      	mov	r0, r3
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	bc80      	pop	{r7}
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	20000214 	.word	0x20000214

0800091c <find_cmd>:

static uint8_t find_cmd(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
	uint8_t data = 0, len = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	71bb      	strb	r3, [r7, #6]
 8000926:	2300      	movs	r3, #0
 8000928:	71fb      	strb	r3, [r7, #7]

	while(pop_buf(&data)){
 800092a:	e02c      	b.n	8000986 <find_cmd+0x6a>
		if((config.cmd_pos == 0)&&(data != CMD_HEAD)){
 800092c:	4b1c      	ldr	r3, [pc, #112]	@ (80009a0 <find_cmd+0x84>)
 800092e:	895b      	ldrh	r3, [r3, #10]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d102      	bne.n	800093a <find_cmd+0x1e>
 8000934:	79bb      	ldrb	r3, [r7, #6]
 8000936:	2bdf      	cmp	r3, #223	@ 0xdf
 8000938:	d124      	bne.n	8000984 <find_cmd+0x68>
			continue;
		}
		if(config.cmd_pos < CMD_MAX_SIZE){
 800093a:	4b19      	ldr	r3, [pc, #100]	@ (80009a0 <find_cmd+0x84>)
 800093c:	895b      	ldrh	r3, [r3, #10]
 800093e:	2b09      	cmp	r3, #9
 8000940:	d809      	bhi.n	8000956 <find_cmd+0x3a>
			config.cmd_buffer[config.cmd_pos++] = data;
 8000942:	4b17      	ldr	r3, [pc, #92]	@ (80009a0 <find_cmd+0x84>)
 8000944:	895b      	ldrh	r3, [r3, #10]
 8000946:	1c5a      	adds	r2, r3, #1
 8000948:	b291      	uxth	r1, r2
 800094a:	4a15      	ldr	r2, [pc, #84]	@ (80009a0 <find_cmd+0x84>)
 800094c:	8151      	strh	r1, [r2, #10]
 800094e:	461a      	mov	r2, r3
 8000950:	79b9      	ldrb	r1, [r7, #6]
 8000952:	4b13      	ldr	r3, [pc, #76]	@ (80009a0 <find_cmd+0x84>)
 8000954:	5499      	strb	r1, [r3, r2]
		}
		config.cmd_state = ((config.cmd_state<<8)|data);
 8000956:	4b12      	ldr	r3, [pc, #72]	@ (80009a0 <find_cmd+0x84>)
 8000958:	68db      	ldr	r3, [r3, #12]
 800095a:	021b      	lsls	r3, r3, #8
 800095c:	79ba      	ldrb	r2, [r7, #6]
 800095e:	4313      	orrs	r3, r2
 8000960:	4a0f      	ldr	r2, [pc, #60]	@ (80009a0 <find_cmd+0x84>)
 8000962:	60d3      	str	r3, [r2, #12]
		if(config.cmd_state == CMD_TAIL){
 8000964:	4b0e      	ldr	r3, [pc, #56]	@ (80009a0 <find_cmd+0x84>)
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 800096c:	4293      	cmp	r3, r2
 800096e:	d10a      	bne.n	8000986 <find_cmd+0x6a>
			len = config.cmd_pos;
 8000970:	4b0b      	ldr	r3, [pc, #44]	@ (80009a0 <find_cmd+0x84>)
 8000972:	895b      	ldrh	r3, [r3, #10]
 8000974:	71fb      	strb	r3, [r7, #7]
			config.cmd_state = 0;
 8000976:	4b0a      	ldr	r3, [pc, #40]	@ (80009a0 <find_cmd+0x84>)
 8000978:	2200      	movs	r2, #0
 800097a:	60da      	str	r2, [r3, #12]
			config.cmd_pos = 0;
 800097c:	4b08      	ldr	r3, [pc, #32]	@ (80009a0 <find_cmd+0x84>)
 800097e:	2200      	movs	r2, #0
 8000980:	815a      	strh	r2, [r3, #10]
 8000982:	e000      	b.n	8000986 <find_cmd+0x6a>
			continue;
 8000984:	bf00      	nop
	while(pop_buf(&data)){
 8000986:	1dbb      	adds	r3, r7, #6
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff ff9d 	bl	80008c8 <pop_buf>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d1cb      	bne.n	800092c <find_cmd+0x10>
		}
	}
	return len;
 8000994:	79fb      	ldrb	r3, [r7, #7]
}
 8000996:	4618      	mov	r0, r3
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000298 	.word	0x20000298

080009a4 <uart_task>:

//static void SerialTask(void const * argument)
void uart_task(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
	uint16_t cmd_size;
	while(1){
		cmd_size = find_cmd();
 80009aa:	f7ff ffb7 	bl	800091c <find_cmd>
 80009ae:	4603      	mov	r3, r0
 80009b0:	80fb      	strh	r3, [r7, #6]
		if(cmd_size){
 80009b2:	88fb      	ldrh	r3, [r7, #6]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d008      	beq.n	80009ca <uart_task+0x26>
			if(config.cmd_buffer[1] == TRIGGER_EVT_CMD){
 80009b8:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <uart_task+0x30>)
 80009ba:	785b      	ldrb	r3, [r3, #1]
 80009bc:	2b33      	cmp	r3, #51	@ 0x33
 80009be:	d104      	bne.n	80009ca <uart_task+0x26>
				trigger_set(config.cmd_buffer[TRIGGER_DATA_IDX]);
 80009c0:	4b04      	ldr	r3, [pc, #16]	@ (80009d4 <uart_task+0x30>)
 80009c2:	789b      	ldrb	r3, [r3, #2]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff ff13 	bl	80007f0 <trigger_set>
			}else if(config.cmd_buffer[1] == RES_ERROR){
				// todo : error 처리
			}
		}
		osDelay(10);
 80009ca:	200a      	movs	r0, #10
 80009cc:	f004 ff75 	bl	80058ba <osDelay>
		cmd_size = find_cmd();
 80009d0:	e7eb      	b.n	80009aa <uart_task+0x6>
 80009d2:	bf00      	nop
 80009d4:	20000298 	.word	0x20000298

080009d8 <HAL_UART_RxCpltCallback>:
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	/* Console */
	if ( huart->Instance == USART1 ){
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a08      	ldr	r2, [pc, #32]	@ (8000a08 <HAL_UART_RxCpltCallback+0x30>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d109      	bne.n	80009fe <HAL_UART_RxCpltCallback+0x26>
		push_buf(Front_rx_buf[0]);
 80009ea:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <HAL_UART_RxCpltCallback+0x34>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff ff40 	bl	8000874 <push_buf>
		HAL_UART_Receive_IT(FRONT_UART, &Front_rx_buf[0], 1 );
 80009f4:	2201      	movs	r2, #1
 80009f6:	4905      	ldr	r1, [pc, #20]	@ (8000a0c <HAL_UART_RxCpltCallback+0x34>)
 80009f8:	4805      	ldr	r0, [pc, #20]	@ (8000a10 <HAL_UART_RxCpltCallback+0x38>)
 80009fa:	f004 f954 	bl	8004ca6 <HAL_UART_Receive_IT>
	}
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40013800 	.word	0x40013800
 8000a0c:	20000210 	.word	0x20000210
 8000a10:	20000ae8 	.word	0x20000ae8

08000a14 <uart_SendFront>:

int uart_SendFront(uint8_t cmd, uint8_t ch, uint32_t data)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	603a      	str	r2, [r7, #0]
 8000a1e:	71fb      	strb	r3, [r7, #7]
 8000a20:	460b      	mov	r3, r1
 8000a22:	71bb      	strb	r3, [r7, #6]
	int error;
	uint8_t send_data[CMD_MAX_SIZE]={0xEF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF};
 8000a24:	4a16      	ldr	r2, [pc, #88]	@ (8000a80 <uart_SendFront+0x6c>)
 8000a26:	f107 0308 	add.w	r3, r7, #8
 8000a2a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a2c:	c303      	stmia	r3!, {r0, r1}
 8000a2e:	801a      	strh	r2, [r3, #0]

	send_data[2] = cmd;
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	72bb      	strb	r3, [r7, #10]
	send_data[3] = ch;
 8000a34:	79bb      	ldrb	r3, [r7, #6]
 8000a36:	72fb      	strb	r3, [r7, #11]
	send_data[4] = ((data & 0xFF00) >> 24);
 8000a38:	2300      	movs	r3, #0
 8000a3a:	733b      	strb	r3, [r7, #12]
	send_data[5] = ((data & 0xFF00) >> 16);
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	737b      	strb	r3, [r7, #13]
	send_data[6] = ((data & 0xFF00) >> 8);
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	0a1b      	lsrs	r3, r3, #8
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	73bb      	strb	r3, [r7, #14]
	send_data[7] = (data & 0x00FF);
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	73fb      	strb	r3, [r7, #15]

	error  = HAL_UART_Transmit(FRONT_UART, send_data, CMD_MAX_SIZE, 1000);
 8000a4e:	f107 0108 	add.w	r1, r7, #8
 8000a52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a56:	220a      	movs	r2, #10
 8000a58:	480a      	ldr	r0, [pc, #40]	@ (8000a84 <uart_SendFront+0x70>)
 8000a5a:	f004 f899 	bl	8004b90 <HAL_UART_Transmit>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	617b      	str	r3, [r7, #20]
	if(error != HAL_OK){
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d005      	beq.n	8000a74 <uart_SendFront+0x60>
		LOG_ERR("Send Command Error");
 8000a68:	4807      	ldr	r0, [pc, #28]	@ (8000a88 <uart_SendFront+0x74>)
 8000a6a:	f000 f84f 	bl	8000b0c <Printf>
		return -EIO;
 8000a6e:	f06f 0304 	mvn.w	r3, #4
 8000a72:	e000      	b.n	8000a76 <uart_SendFront+0x62>
	}

	return 0;
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3718      	adds	r7, #24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	08008fac 	.word	0x08008fac
 8000a84:	20000ae8 	.word	0x20000ae8
 8000a88:	08008f90 	.word	0x08008f90

08000a8c <uart_init>:

int uart_init(void)
{	
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(FRONT_UART, &Front_rx_buf[0], 1);
 8000a90:	2201      	movs	r2, #1
 8000a92:	4903      	ldr	r1, [pc, #12]	@ (8000aa0 <uart_init+0x14>)
 8000a94:	4803      	ldr	r0, [pc, #12]	@ (8000aa4 <uart_init+0x18>)
 8000a96:	f004 f906 	bl	8004ca6 <HAL_UART_Receive_IT>
//	serialTaskHandle = osThreadCreate(osThread(serialTask), NULL);
//	if(serialTaskHandle == NULL){
//		LOG_ERR("Front Serial Task Create Error");
//		return -1;
//	}
	return 0;
 8000a9a:	2300      	movs	r3, #0
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000210 	.word	0x20000210
 8000aa4:	20000ae8 	.word	0x20000ae8

08000aa8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	4a06      	ldr	r2, [pc, #24]	@ (8000ad0 <vApplicationGetIdleTaskMemory+0x28>)
 8000ab8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	4a05      	ldr	r2, [pc, #20]	@ (8000ad4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000abe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2280      	movs	r2, #128	@ 0x80
 8000ac4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ac6:	bf00      	nop
 8000ac8:	3714      	adds	r7, #20
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr
 8000ad0:	200002a8 	.word	0x200002a8
 8000ad4:	20000348 	.word	0x20000348

08000ad8 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	4a07      	ldr	r2, [pc, #28]	@ (8000b04 <vApplicationGetTimerTaskMemory+0x2c>)
 8000ae8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	4a06      	ldr	r2, [pc, #24]	@ (8000b08 <vApplicationGetTimerTaskMemory+0x30>)
 8000aee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000af6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000af8:	bf00      	nop
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	20000548 	.word	0x20000548
 8000b08:	200005e8 	.word	0x200005e8

08000b0c <Printf>:
/* Private variables ---------------------------------------------------------*/
char debug_buf[MAX_PRINT_BUF];
/* Private function prototypes -----------------------------------------------*/

void Printf(const char *fmt, ...)
{
 8000b0c:	b40f      	push	{r0, r1, r2, r3}
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
	va_list args = {0};
 8000b14:	2300      	movs	r3, #0
 8000b16:	607b      	str	r3, [r7, #4]

	va_start(args, fmt);
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	607b      	str	r3, [r7, #4]
	vsnprintf(debug_buf, MAX_PRINT_BUF, fmt, args);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	21ff      	movs	r1, #255	@ 0xff
 8000b24:	480a      	ldr	r0, [pc, #40]	@ (8000b50 <Printf+0x44>)
 8000b26:	f007 fc4f 	bl	80083c8 <vsniprintf>
	va_end(args);

	HAL_UART_Transmit(DBG_UART, (uint8_t *)debug_buf, strlen(debug_buf), 0xFFFFFF);
 8000b2a:	4809      	ldr	r0, [pc, #36]	@ (8000b50 <Printf+0x44>)
 8000b2c:	f7ff fb10 	bl	8000150 <strlen>
 8000b30:	4603      	mov	r3, r0
 8000b32:	b29a      	uxth	r2, r3
 8000b34:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8000b38:	4905      	ldr	r1, [pc, #20]	@ (8000b50 <Printf+0x44>)
 8000b3a:	4806      	ldr	r0, [pc, #24]	@ (8000b54 <Printf+0x48>)
 8000b3c:	f004 f828 	bl	8004b90 <HAL_UART_Transmit>
}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b4a:	b004      	add	sp, #16
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	200009e8 	.word	0x200009e8
 8000b54:	20000b30 	.word	0x20000b30

08000b58 <hex_dump_line_print>:

static void hex_dump_line_print(const char *data, int length)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
	for (int i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	e012      	b.n	8000b8e <hex_dump_line_print+0x36>
		if (i < length) {
 8000b68:	68fa      	ldr	r2, [r7, #12]
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	da08      	bge.n	8000b82 <hex_dump_line_print+0x2a>
			Printf("%02x ", (unsigned char)data[i] & 0xFFu);
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	4619      	mov	r1, r3
 8000b7a:	480a      	ldr	r0, [pc, #40]	@ (8000ba4 <hex_dump_line_print+0x4c>)
 8000b7c:	f7ff ffc6 	bl	8000b0c <Printf>
 8000b80:	e002      	b.n	8000b88 <hex_dump_line_print+0x30>
		} else {
			Printf("   ");
 8000b82:	4809      	ldr	r0, [pc, #36]	@ (8000ba8 <hex_dump_line_print+0x50>)
 8000b84:	f7ff ffc2 	bl	8000b0c <Printf>
	for (int i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	2b07      	cmp	r3, #7
 8000b92:	d9e9      	bls.n	8000b68 <hex_dump_line_print+0x10>
		}
	}
	Printf("\r\n");
 8000b94:	4805      	ldr	r0, [pc, #20]	@ (8000bac <hex_dump_line_print+0x54>)
 8000b96:	f7ff ffb9 	bl	8000b0c <Printf>
}
 8000b9a:	bf00      	nop
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	08008fb8 	.word	0x08008fb8
 8000ba8:	08008fc0 	.word	0x08008fc0
 8000bac:	08008fc4 	.word	0x08008fc4

08000bb0 <dump_printf>:

void dump_printf(const void *data, int size, const char* str)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
	const char *data_buf = (const char *)data;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	617b      	str	r3, [r7, #20]

	Printf(str);
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f7ff ffa3 	bl	8000b0c <Printf>
	Printf("\r\n");
 8000bc6:	480d      	ldr	r0, [pc, #52]	@ (8000bfc <dump_printf+0x4c>)
 8000bc8:	f7ff ffa0 	bl	8000b0c <Printf>

	while(size > 0){
 8000bcc:	e00c      	b.n	8000be8 <dump_printf+0x38>
		hex_dump_line_print(data_buf, size);
 8000bce:	68b9      	ldr	r1, [r7, #8]
 8000bd0:	6978      	ldr	r0, [r7, #20]
 8000bd2:	f7ff ffc1 	bl	8000b58 <hex_dump_line_print>
		if(size < HEXDUMP_BYTES_IN_LINE){
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	2b07      	cmp	r3, #7
 8000bda:	d909      	bls.n	8000bf0 <dump_printf+0x40>
			break;
		}
		size -= HEXDUMP_BYTES_IN_LINE;
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	3b08      	subs	r3, #8
 8000be0:	60bb      	str	r3, [r7, #8]
		data_buf += HEXDUMP_BYTES_IN_LINE;
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	3308      	adds	r3, #8
 8000be6:	617b      	str	r3, [r7, #20]
	while(size > 0){
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	dcef      	bgt.n	8000bce <dump_printf+0x1e>
	}
}
 8000bee:	e000      	b.n	8000bf2 <dump_printf+0x42>
			break;
 8000bf0:	bf00      	nop
}
 8000bf2:	bf00      	nop
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	08008fc4 	.word	0x08008fc4

08000c00 <screen_id_2_str>:

const char *screen_id_2_str(int screen_id)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	switch(screen_id)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2b0e      	cmp	r3, #14
 8000c0c:	d83c      	bhi.n	8000c88 <screen_id_2_str+0x88>
 8000c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8000c14 <screen_id_2_str+0x14>)
 8000c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c14:	08000c51 	.word	0x08000c51
 8000c18:	08000c55 	.word	0x08000c55
 8000c1c:	08000c59 	.word	0x08000c59
 8000c20:	08000c5d 	.word	0x08000c5d
 8000c24:	08000c61 	.word	0x08000c61
 8000c28:	08000c65 	.word	0x08000c65
 8000c2c:	08000c69 	.word	0x08000c69
 8000c30:	08000c6d 	.word	0x08000c6d
 8000c34:	08000c71 	.word	0x08000c71
 8000c38:	08000c75 	.word	0x08000c75
 8000c3c:	08000c89 	.word	0x08000c89
 8000c40:	08000c79 	.word	0x08000c79
 8000c44:	08000c7d 	.word	0x08000c7d
 8000c48:	08000c81 	.word	0x08000c81
 8000c4c:	08000c85 	.word	0x08000c85
	{
		case_str(eMAIN_SC)
 8000c50:	4b11      	ldr	r3, [pc, #68]	@ (8000c98 <screen_id_2_str+0x98>)
 8000c52:	e01b      	b.n	8000c8c <screen_id_2_str+0x8c>
		case_str(eCHANNEL_SC)
 8000c54:	4b11      	ldr	r3, [pc, #68]	@ (8000c9c <screen_id_2_str+0x9c>)
 8000c56:	e019      	b.n	8000c8c <screen_id_2_str+0x8c>
		case_str(eSET_ON_TIME_SC)
 8000c58:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <screen_id_2_str+0xa0>)
 8000c5a:	e017      	b.n	8000c8c <screen_id_2_str+0x8c>
		case_str(eSET_DELAY_TIME_SC)
 8000c5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ca4 <screen_id_2_str+0xa4>)
 8000c5e:	e015      	b.n	8000c8c <screen_id_2_str+0x8c>
		case_str(eSET_TRIGGER_SC)
 8000c60:	4b11      	ldr	r3, [pc, #68]	@ (8000ca8 <screen_id_2_str+0xa8>)
 8000c62:	e013      	b.n	8000c8c <screen_id_2_str+0x8c>
		case_str(eOPMODE_SC)
 8000c64:	4b11      	ldr	r3, [pc, #68]	@ (8000cac <screen_id_2_str+0xac>)
 8000c66:	e011      	b.n	8000c8c <screen_id_2_str+0x8c>
		case_str(eUARTMODE_SC)
 8000c68:	4b11      	ldr	r3, [pc, #68]	@ (8000cb0 <screen_id_2_str+0xb0>)
 8000c6a:	e00f      	b.n	8000c8c <screen_id_2_str+0x8c>
		case_str(eETH_IP_SC)
 8000c6c:	4b11      	ldr	r3, [pc, #68]	@ (8000cb4 <screen_id_2_str+0xb4>)
 8000c6e:	e00d      	b.n	8000c8c <screen_id_2_str+0x8c>
		case_str(eETH_PORT_SC)
 8000c70:	4b11      	ldr	r3, [pc, #68]	@ (8000cb8 <screen_id_2_str+0xb8>)
 8000c72:	e00b      	b.n	8000c8c <screen_id_2_str+0x8c>
		case_str(eTESTMODE_SC)
 8000c74:	4b11      	ldr	r3, [pc, #68]	@ (8000cbc <screen_id_2_str+0xbc>)
 8000c76:	e009      	b.n	8000c8c <screen_id_2_str+0x8c>
		case_str(eUSERMODE_SC)
 8000c78:	4b11      	ldr	r3, [pc, #68]	@ (8000cc0 <screen_id_2_str+0xc0>)
 8000c7a:	e007      	b.n	8000c8c <screen_id_2_str+0x8c>
		case_str(eFACTORY_SC)
 8000c7c:	4b11      	ldr	r3, [pc, #68]	@ (8000cc4 <screen_id_2_str+0xc4>)
 8000c7e:	e005      	b.n	8000c8c <screen_id_2_str+0x8c>
		case_str(eCHSELECT_SC)
 8000c80:	4b11      	ldr	r3, [pc, #68]	@ (8000cc8 <screen_id_2_str+0xc8>)
 8000c82:	e003      	b.n	8000c8c <screen_id_2_str+0x8c>
		case_str(eVERSION_SC)
 8000c84:	4b11      	ldr	r3, [pc, #68]	@ (8000ccc <screen_id_2_str+0xcc>)
 8000c86:	e001      	b.n	8000c8c <screen_id_2_str+0x8c>
		default:
			break;
 8000c88:	bf00      	nop
	}
	return "Unknown Screen";
 8000c8a:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <screen_id_2_str+0xd0>)
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	08008fc8 	.word	0x08008fc8
 8000c9c:	08008fd4 	.word	0x08008fd4
 8000ca0:	08008fe0 	.word	0x08008fe0
 8000ca4:	08008ff0 	.word	0x08008ff0
 8000ca8:	08009004 	.word	0x08009004
 8000cac:	08009014 	.word	0x08009014
 8000cb0:	08009020 	.word	0x08009020
 8000cb4:	08009030 	.word	0x08009030
 8000cb8:	0800903c 	.word	0x0800903c
 8000cbc:	0800904c 	.word	0x0800904c
 8000cc0:	0800905c 	.word	0x0800905c
 8000cc4:	0800906c 	.word	0x0800906c
 8000cc8:	08009078 	.word	0x08009078
 8000ccc:	08009088 	.word	0x08009088
 8000cd0:	08009094 	.word	0x08009094

08000cd4 <key_id_2_str>:

const char *key_id_2_str(int key_id)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
	switch(key_id)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2b20      	cmp	r3, #32
 8000ce0:	d85e      	bhi.n	8000da0 <key_id_2_str+0xcc>
 8000ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ce8 <key_id_2_str+0x14>)
 8000ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ce8:	08000d6d 	.word	0x08000d6d
 8000cec:	08000d71 	.word	0x08000d71
 8000cf0:	08000d75 	.word	0x08000d75
 8000cf4:	08000d79 	.word	0x08000d79
 8000cf8:	08000d7d 	.word	0x08000d7d
 8000cfc:	08000d81 	.word	0x08000d81
 8000d00:	08000d85 	.word	0x08000d85
 8000d04:	08000da1 	.word	0x08000da1
 8000d08:	08000d89 	.word	0x08000d89
 8000d0c:	08000d8d 	.word	0x08000d8d
 8000d10:	08000d91 	.word	0x08000d91
 8000d14:	08000da1 	.word	0x08000da1
 8000d18:	08000d95 	.word	0x08000d95
 8000d1c:	08000da1 	.word	0x08000da1
 8000d20:	08000da1 	.word	0x08000da1
 8000d24:	08000da1 	.word	0x08000da1
 8000d28:	08000d99 	.word	0x08000d99
 8000d2c:	08000da1 	.word	0x08000da1
 8000d30:	08000da1 	.word	0x08000da1
 8000d34:	08000da1 	.word	0x08000da1
 8000d38:	08000da1 	.word	0x08000da1
 8000d3c:	08000da1 	.word	0x08000da1
 8000d40:	08000da1 	.word	0x08000da1
 8000d44:	08000da1 	.word	0x08000da1
 8000d48:	08000da1 	.word	0x08000da1
 8000d4c:	08000da1 	.word	0x08000da1
 8000d50:	08000da1 	.word	0x08000da1
 8000d54:	08000da1 	.word	0x08000da1
 8000d58:	08000da1 	.word	0x08000da1
 8000d5c:	08000da1 	.word	0x08000da1
 8000d60:	08000da1 	.word	0x08000da1
 8000d64:	08000da1 	.word	0x08000da1
 8000d68:	08000d9d 	.word	0x08000d9d
	{
		case_str(eKey_Idle)
 8000d6c:	4b10      	ldr	r3, [pc, #64]	@ (8000db0 <key_id_2_str+0xdc>)
 8000d6e:	e019      	b.n	8000da4 <key_id_2_str+0xd0>
		case_str(eKey_Enter)
 8000d70:	4b10      	ldr	r3, [pc, #64]	@ (8000db4 <key_id_2_str+0xe0>)
 8000d72:	e017      	b.n	8000da4 <key_id_2_str+0xd0>
		case_str(eKey_Up)
 8000d74:	4b10      	ldr	r3, [pc, #64]	@ (8000db8 <key_id_2_str+0xe4>)
 8000d76:	e015      	b.n	8000da4 <key_id_2_str+0xd0>
		case_str(eKey_User)
 8000d78:	4b10      	ldr	r3, [pc, #64]	@ (8000dbc <key_id_2_str+0xe8>)
 8000d7a:	e013      	b.n	8000da4 <key_id_2_str+0xd0>
		case_str(eKey_Down)
 8000d7c:	4b10      	ldr	r3, [pc, #64]	@ (8000dc0 <key_id_2_str+0xec>)
 8000d7e:	e011      	b.n	8000da4 <key_id_2_str+0xd0>
		case_str(eKey_Version)
 8000d80:	4b10      	ldr	r3, [pc, #64]	@ (8000dc4 <key_id_2_str+0xf0>)
 8000d82:	e00f      	b.n	8000da4 <key_id_2_str+0xd0>
		case_str(eKey_ChSel)
 8000d84:	4b10      	ldr	r3, [pc, #64]	@ (8000dc8 <key_id_2_str+0xf4>)
 8000d86:	e00d      	b.n	8000da4 <key_id_2_str+0xd0>
		case_str(eKey_Mode)
 8000d88:	4b10      	ldr	r3, [pc, #64]	@ (8000dcc <key_id_2_str+0xf8>)
 8000d8a:	e00b      	b.n	8000da4 <key_id_2_str+0xd0>
		case_str(eKey_Factory)
 8000d8c:	4b10      	ldr	r3, [pc, #64]	@ (8000dd0 <key_id_2_str+0xfc>)
 8000d8e:	e009      	b.n	8000da4 <key_id_2_str+0xd0>
		case_str(eKey_CursorUp)
 8000d90:	4b10      	ldr	r3, [pc, #64]	@ (8000dd4 <key_id_2_str+0x100>)
 8000d92:	e007      	b.n	8000da4 <key_id_2_str+0xd0>
		case_str(eKey_CursorDown)
 8000d94:	4b10      	ldr	r3, [pc, #64]	@ (8000dd8 <key_id_2_str+0x104>)
 8000d96:	e005      	b.n	8000da4 <key_id_2_str+0xd0>
		case_str(eKey_SetMode)
 8000d98:	4b10      	ldr	r3, [pc, #64]	@ (8000ddc <key_id_2_str+0x108>)
 8000d9a:	e003      	b.n	8000da4 <key_id_2_str+0xd0>
		case_str(eKey_ExitRemote)
 8000d9c:	4b10      	ldr	r3, [pc, #64]	@ (8000de0 <key_id_2_str+0x10c>)
 8000d9e:	e001      	b.n	8000da4 <key_id_2_str+0xd0>
		default:
			break;
 8000da0:	bf00      	nop
	}
	return "Unknown key";
 8000da2:	4b10      	ldr	r3, [pc, #64]	@ (8000de4 <key_id_2_str+0x110>)
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	080090a4 	.word	0x080090a4
 8000db4:	080090b0 	.word	0x080090b0
 8000db8:	080090bc 	.word	0x080090bc
 8000dbc:	080090c4 	.word	0x080090c4
 8000dc0:	080090d0 	.word	0x080090d0
 8000dc4:	080090dc 	.word	0x080090dc
 8000dc8:	080090ec 	.word	0x080090ec
 8000dcc:	080090f8 	.word	0x080090f8
 8000dd0:	08009104 	.word	0x08009104
 8000dd4:	08009114 	.word	0x08009114
 8000dd8:	08009124 	.word	0x08009124
 8000ddc:	08009134 	.word	0x08009134
 8000de0:	08009144 	.word	0x08009144
 8000de4:	08009154 	.word	0x08009154

08000de8 <get_model>:
    __set_MSP(*(__IO uint32_t *)SYSTEMBOOT_ADDR);
    Jump_To_Application();
}

const char* get_model(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
	return "MSV2008_Front panel";
 8000dec:	4b02      	ldr	r3, [pc, #8]	@ (8000df8 <get_model+0x10>)
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bc80      	pop	{r7}
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	08009160 	.word	0x08009160

08000dfc <banner>:

static void banner(void)
{
 8000dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af04      	add	r7, sp, #16
	LOG_INF("======================================================");
 8000e02:	4877      	ldr	r0, [pc, #476]	@ (8000fe0 <banner+0x1e4>)
 8000e04:	f7ff fe82 	bl	8000b0c <Printf>
	LOG_INF("\t YNS Vision LED Controller");
 8000e08:	4876      	ldr	r0, [pc, #472]	@ (8000fe4 <banner+0x1e8>)
 8000e0a:	f7ff fe7f 	bl	8000b0c <Printf>
	LOG_INF("\t Build Data	: %04d-%02d-%02d %02d:%02d:%02d", BUILD_YEAR, BUILD_MONTH, BUILD_DAY,
 8000e0e:	234d      	movs	r3, #77	@ 0x4d
 8000e10:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e12:	d017      	beq.n	8000e44 <banner+0x48>
 8000e14:	2332      	movs	r3, #50	@ 0x32
 8000e16:	3b30      	subs	r3, #48	@ 0x30
 8000e18:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e1c:	fb03 f202 	mul.w	r2, r3, r2
 8000e20:	2330      	movs	r3, #48	@ 0x30
 8000e22:	3b30      	subs	r3, #48	@ 0x30
 8000e24:	2164      	movs	r1, #100	@ 0x64
 8000e26:	fb01 f303 	mul.w	r3, r1, r3
 8000e2a:	18d1      	adds	r1, r2, r3
 8000e2c:	2332      	movs	r3, #50	@ 0x32
 8000e2e:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8000e32:	4613      	mov	r3, r2
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	4413      	add	r3, r2
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	18ca      	adds	r2, r1, r3
 8000e3c:	2335      	movs	r3, #53	@ 0x35
 8000e3e:	3b30      	subs	r3, #48	@ 0x30
 8000e40:	18d4      	adds	r4, r2, r3
 8000e42:	e000      	b.n	8000e46 <banner+0x4a>
 8000e44:	2463      	movs	r4, #99	@ 0x63
 8000e46:	234d      	movs	r3, #77	@ 0x4d
 8000e48:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e4a:	d067      	beq.n	8000f1c <banner+0x120>
 8000e4c:	234d      	movs	r3, #77	@ 0x4d
 8000e4e:	2b4a      	cmp	r3, #74	@ 0x4a
 8000e50:	d105      	bne.n	8000e5e <banner+0x62>
 8000e52:	2361      	movs	r3, #97	@ 0x61
 8000e54:	2b61      	cmp	r3, #97	@ 0x61
 8000e56:	d102      	bne.n	8000e5e <banner+0x62>
 8000e58:	2372      	movs	r3, #114	@ 0x72
 8000e5a:	2b6e      	cmp	r3, #110	@ 0x6e
 8000e5c:	d05c      	beq.n	8000f18 <banner+0x11c>
 8000e5e:	234d      	movs	r3, #77	@ 0x4d
 8000e60:	2b46      	cmp	r3, #70	@ 0x46
 8000e62:	d056      	beq.n	8000f12 <banner+0x116>
 8000e64:	234d      	movs	r3, #77	@ 0x4d
 8000e66:	2b4d      	cmp	r3, #77	@ 0x4d
 8000e68:	d105      	bne.n	8000e76 <banner+0x7a>
 8000e6a:	2361      	movs	r3, #97	@ 0x61
 8000e6c:	2b61      	cmp	r3, #97	@ 0x61
 8000e6e:	d102      	bne.n	8000e76 <banner+0x7a>
 8000e70:	2372      	movs	r3, #114	@ 0x72
 8000e72:	2b72      	cmp	r3, #114	@ 0x72
 8000e74:	d04b      	beq.n	8000f0e <banner+0x112>
 8000e76:	234d      	movs	r3, #77	@ 0x4d
 8000e78:	2b41      	cmp	r3, #65	@ 0x41
 8000e7a:	d102      	bne.n	8000e82 <banner+0x86>
 8000e7c:	2361      	movs	r3, #97	@ 0x61
 8000e7e:	2b70      	cmp	r3, #112	@ 0x70
 8000e80:	d042      	beq.n	8000f08 <banner+0x10c>
 8000e82:	234d      	movs	r3, #77	@ 0x4d
 8000e84:	2b4d      	cmp	r3, #77	@ 0x4d
 8000e86:	d105      	bne.n	8000e94 <banner+0x98>
 8000e88:	2361      	movs	r3, #97	@ 0x61
 8000e8a:	2b61      	cmp	r3, #97	@ 0x61
 8000e8c:	d102      	bne.n	8000e94 <banner+0x98>
 8000e8e:	2372      	movs	r3, #114	@ 0x72
 8000e90:	2b79      	cmp	r3, #121	@ 0x79
 8000e92:	d036      	beq.n	8000f02 <banner+0x106>
 8000e94:	234d      	movs	r3, #77	@ 0x4d
 8000e96:	2b4a      	cmp	r3, #74	@ 0x4a
 8000e98:	d105      	bne.n	8000ea6 <banner+0xaa>
 8000e9a:	2361      	movs	r3, #97	@ 0x61
 8000e9c:	2b75      	cmp	r3, #117	@ 0x75
 8000e9e:	d102      	bne.n	8000ea6 <banner+0xaa>
 8000ea0:	2372      	movs	r3, #114	@ 0x72
 8000ea2:	2b6e      	cmp	r3, #110	@ 0x6e
 8000ea4:	d02a      	beq.n	8000efc <banner+0x100>
 8000ea6:	234d      	movs	r3, #77	@ 0x4d
 8000ea8:	2b4a      	cmp	r3, #74	@ 0x4a
 8000eaa:	d105      	bne.n	8000eb8 <banner+0xbc>
 8000eac:	2361      	movs	r3, #97	@ 0x61
 8000eae:	2b75      	cmp	r3, #117	@ 0x75
 8000eb0:	d102      	bne.n	8000eb8 <banner+0xbc>
 8000eb2:	2372      	movs	r3, #114	@ 0x72
 8000eb4:	2b6c      	cmp	r3, #108	@ 0x6c
 8000eb6:	d01e      	beq.n	8000ef6 <banner+0xfa>
 8000eb8:	234d      	movs	r3, #77	@ 0x4d
 8000eba:	2b41      	cmp	r3, #65	@ 0x41
 8000ebc:	d102      	bne.n	8000ec4 <banner+0xc8>
 8000ebe:	2361      	movs	r3, #97	@ 0x61
 8000ec0:	2b75      	cmp	r3, #117	@ 0x75
 8000ec2:	d015      	beq.n	8000ef0 <banner+0xf4>
 8000ec4:	234d      	movs	r3, #77	@ 0x4d
 8000ec6:	2b53      	cmp	r3, #83	@ 0x53
 8000ec8:	d010      	beq.n	8000eec <banner+0xf0>
 8000eca:	234d      	movs	r3, #77	@ 0x4d
 8000ecc:	2b4f      	cmp	r3, #79	@ 0x4f
 8000ece:	d00b      	beq.n	8000ee8 <banner+0xec>
 8000ed0:	234d      	movs	r3, #77	@ 0x4d
 8000ed2:	2b4e      	cmp	r3, #78	@ 0x4e
 8000ed4:	d006      	beq.n	8000ee4 <banner+0xe8>
 8000ed6:	234d      	movs	r3, #77	@ 0x4d
 8000ed8:	2b44      	cmp	r3, #68	@ 0x44
 8000eda:	d101      	bne.n	8000ee0 <banner+0xe4>
 8000edc:	220c      	movs	r2, #12
 8000ede:	e009      	b.n	8000ef4 <banner+0xf8>
 8000ee0:	2263      	movs	r2, #99	@ 0x63
 8000ee2:	e007      	b.n	8000ef4 <banner+0xf8>
 8000ee4:	220b      	movs	r2, #11
 8000ee6:	e005      	b.n	8000ef4 <banner+0xf8>
 8000ee8:	220a      	movs	r2, #10
 8000eea:	e003      	b.n	8000ef4 <banner+0xf8>
 8000eec:	2209      	movs	r2, #9
 8000eee:	e001      	b.n	8000ef4 <banner+0xf8>
 8000ef0:	2208      	movs	r2, #8
 8000ef2:	e002      	b.n	8000efa <banner+0xfe>
 8000ef4:	e001      	b.n	8000efa <banner+0xfe>
 8000ef6:	2207      	movs	r2, #7
 8000ef8:	e002      	b.n	8000f00 <banner+0x104>
 8000efa:	e001      	b.n	8000f00 <banner+0x104>
 8000efc:	2206      	movs	r2, #6
 8000efe:	e002      	b.n	8000f06 <banner+0x10a>
 8000f00:	e001      	b.n	8000f06 <banner+0x10a>
 8000f02:	2205      	movs	r2, #5
 8000f04:	e002      	b.n	8000f0c <banner+0x110>
 8000f06:	e001      	b.n	8000f0c <banner+0x110>
 8000f08:	2204      	movs	r2, #4
 8000f0a:	e004      	b.n	8000f16 <banner+0x11a>
 8000f0c:	e003      	b.n	8000f16 <banner+0x11a>
 8000f0e:	2203      	movs	r2, #3
 8000f10:	e005      	b.n	8000f1e <banner+0x122>
 8000f12:	2202      	movs	r2, #2
 8000f14:	e003      	b.n	8000f1e <banner+0x122>
 8000f16:	e002      	b.n	8000f1e <banner+0x122>
 8000f18:	2201      	movs	r2, #1
 8000f1a:	e000      	b.n	8000f1e <banner+0x122>
 8000f1c:	2263      	movs	r2, #99	@ 0x63
 8000f1e:	234d      	movs	r3, #77	@ 0x4d
 8000f20:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f22:	d010      	beq.n	8000f46 <banner+0x14a>
 8000f24:	2331      	movs	r3, #49	@ 0x31
 8000f26:	2b2f      	cmp	r3, #47	@ 0x2f
 8000f28:	d908      	bls.n	8000f3c <banner+0x140>
 8000f2a:	2331      	movs	r3, #49	@ 0x31
 8000f2c:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8000f30:	460b      	mov	r3, r1
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	440b      	add	r3, r1
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	4619      	mov	r1, r3
 8000f3a:	e000      	b.n	8000f3e <banner+0x142>
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	2337      	movs	r3, #55	@ 0x37
 8000f40:	3b30      	subs	r3, #48	@ 0x30
 8000f42:	18cd      	adds	r5, r1, r3
 8000f44:	e000      	b.n	8000f48 <banner+0x14c>
 8000f46:	2563      	movs	r5, #99	@ 0x63
 8000f48:	2331      	movs	r3, #49	@ 0x31
 8000f4a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f4c:	d00c      	beq.n	8000f68 <banner+0x16c>
 8000f4e:	2331      	movs	r3, #49	@ 0x31
 8000f50:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8000f54:	460b      	mov	r3, r1
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	440b      	add	r3, r1
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	2336      	movs	r3, #54	@ 0x36
 8000f60:	440b      	add	r3, r1
 8000f62:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8000f66:	e000      	b.n	8000f6a <banner+0x16e>
 8000f68:	2163      	movs	r1, #99	@ 0x63
 8000f6a:	2331      	movs	r3, #49	@ 0x31
 8000f6c:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f6e:	d00c      	beq.n	8000f8a <banner+0x18e>
 8000f70:	2330      	movs	r3, #48	@ 0x30
 8000f72:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 8000f76:	4603      	mov	r3, r0
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	4403      	add	r3, r0
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	4618      	mov	r0, r3
 8000f80:	2339      	movs	r3, #57	@ 0x39
 8000f82:	4403      	add	r3, r0
 8000f84:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 8000f88:	e000      	b.n	8000f8c <banner+0x190>
 8000f8a:	2063      	movs	r0, #99	@ 0x63
 8000f8c:	2331      	movs	r3, #49	@ 0x31
 8000f8e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f90:	d00b      	beq.n	8000faa <banner+0x1ae>
 8000f92:	2335      	movs	r3, #53	@ 0x35
 8000f94:	f1a3 0630 	sub.w	r6, r3, #48	@ 0x30
 8000f98:	4633      	mov	r3, r6
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4433      	add	r3, r6
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	461e      	mov	r6, r3
 8000fa2:	2336      	movs	r3, #54	@ 0x36
 8000fa4:	4433      	add	r3, r6
 8000fa6:	3b30      	subs	r3, #48	@ 0x30
 8000fa8:	e000      	b.n	8000fac <banner+0x1b0>
 8000faa:	2363      	movs	r3, #99	@ 0x63
 8000fac:	9302      	str	r3, [sp, #8]
 8000fae:	9001      	str	r0, [sp, #4]
 8000fb0:	9100      	str	r1, [sp, #0]
 8000fb2:	462b      	mov	r3, r5
 8000fb4:	4621      	mov	r1, r4
 8000fb6:	480c      	ldr	r0, [pc, #48]	@ (8000fe8 <banner+0x1ec>)
 8000fb8:	f7ff fda8 	bl	8000b0c <Printf>
			BUILD_HOUR, BUILD_MIN, BUILD_SEC);
	LOG_INF("\tModel		: %s", get_model());
 8000fbc:	f7ff ff14 	bl	8000de8 <get_model>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4809      	ldr	r0, [pc, #36]	@ (8000fec <banner+0x1f0>)
 8000fc6:	f7ff fda1 	bl	8000b0c <Printf>
	LOG_INF("\tVersion		: %s", _VERSION_);
 8000fca:	4909      	ldr	r1, [pc, #36]	@ (8000ff0 <banner+0x1f4>)
 8000fcc:	4809      	ldr	r0, [pc, #36]	@ (8000ff4 <banner+0x1f8>)
 8000fce:	f7ff fd9d 	bl	8000b0c <Printf>
	LOG_INF("======================================================");
 8000fd2:	4803      	ldr	r0, [pc, #12]	@ (8000fe0 <banner+0x1e4>)
 8000fd4:	f7ff fd9a 	bl	8000b0c <Printf>
}
 8000fd8:	bf00      	nop
 8000fda:	3704      	adds	r7, #4
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fe0:	08009174 	.word	0x08009174
 8000fe4:	080091b4 	.word	0x080091b4
 8000fe8:	080091d8 	.word	0x080091d8
 8000fec:	0800920c 	.word	0x0800920c
 8000ff0:	08009220 	.word	0x08009220
 8000ff4:	08009228 	.word	0x08009228

08000ff8 <Init_device>:

static int Init_device(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	do{
		if(uart_init()){
 8000ffc:	f7ff fd46 	bl	8000a8c <uart_init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d002      	beq.n	800100c <Init_device+0x14>
			return -1;
 8001006:	f04f 33ff 	mov.w	r3, #4294967295
 800100a:	e00a      	b.n	8001022 <Init_device+0x2a>
		}
		app_config_init();
 800100c:	f7ff fb14 	bl	8000638 <app_config_init>

		if(apps_init()){
 8001010:	f7ff fad6 	bl	80005c0 <apps_init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d002      	beq.n	8001020 <Init_device+0x28>
			return -1;
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	e000      	b.n	8001022 <Init_device+0x2a>
		}
	}while(0);

	return 0;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001028:	b5b0      	push	{r4, r5, r7, lr}
 800102a:	b090      	sub	sp, #64	@ 0x40
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800102e:	f002 f947 	bl	80032c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001032:	f000 f85f 	bl	80010f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001036:	f000 f8f9 	bl	800122c <MX_GPIO_Init>
#if ENABLE_WATCHDOG
  MX_IWDG_Init();
#endif
  MX_USART1_UART_Init();
 800103a:	f000 f8a3 	bl	8001184 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800103e:	f000 f8cb 	bl	80011d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  banner();
 8001042:	f7ff fedb 	bl	8000dfc <banner>
  Init_device();
 8001046:	f7ff ffd7 	bl	8000ff8 <Init_device>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of opLedTimer */
  osTimerDef(opLedTimer, opLedCb);
 800104a:	4b22      	ldr	r3, [pc, #136]	@ (80010d4 <main+0xac>)
 800104c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800104e:	2300      	movs	r3, #0
 8001050:	63fb      	str	r3, [r7, #60]	@ 0x3c
  opLedTimerHandle = osTimerCreate(osTimer(opLedTimer), osTimerPeriodic, NULL);
 8001052:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001056:	2200      	movs	r2, #0
 8001058:	2101      	movs	r1, #1
 800105a:	4618      	mov	r0, r3
 800105c:	f004 fc42 	bl	80058e4 <osTimerCreate>
 8001060:	4603      	mov	r3, r0
 8001062:	4a1d      	ldr	r2, [pc, #116]	@ (80010d8 <main+0xb0>)
 8001064:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of EventTask */
  osThreadDef(EventTask, eventTask, osPriorityNormal, 0, 512);
 8001066:	4b1d      	ldr	r3, [pc, #116]	@ (80010dc <main+0xb4>)
 8001068:	f107 041c 	add.w	r4, r7, #28
 800106c:	461d      	mov	r5, r3
 800106e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001070:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001072:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001076:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EventTaskHandle = osThreadCreate(osThread(EventTask), NULL);
 800107a:	f107 031c 	add.w	r3, r7, #28
 800107e:	2100      	movs	r1, #0
 8001080:	4618      	mov	r0, r3
 8001082:	f004 fbce 	bl	8005822 <osThreadCreate>
 8001086:	4603      	mov	r3, r0
 8001088:	4a15      	ldr	r2, [pc, #84]	@ (80010e0 <main+0xb8>)
 800108a:	6013      	str	r3, [r2, #0]

  /* definition and creation of seriaTask */
  osThreadDef(seriaTask, SerialTask, osPriorityIdle, 0, 128);
 800108c:	4b15      	ldr	r3, [pc, #84]	@ (80010e4 <main+0xbc>)
 800108e:	463c      	mov	r4, r7
 8001090:	461d      	mov	r5, r3
 8001092:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001094:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001096:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800109a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  seriaTaskHandle = osThreadCreate(osThread(seriaTask), NULL);
 800109e:	463b      	mov	r3, r7
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f004 fbbd 	bl	8005822 <osThreadCreate>
 80010a8:	4603      	mov	r3, r0
 80010aa:	4a0f      	ldr	r2, [pc, #60]	@ (80010e8 <main+0xc0>)
 80010ac:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  if(EventTaskHandle == NULL){
 80010ae:	4b0c      	ldr	r3, [pc, #48]	@ (80010e0 <main+0xb8>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d102      	bne.n	80010bc <main+0x94>
	  LOG_ERR("Event Task Create Error!!");
 80010b6:	480d      	ldr	r0, [pc, #52]	@ (80010ec <main+0xc4>)
 80010b8:	f7ff fd28 	bl	8000b0c <Printf>
  }
  if(seriaTaskHandle == NULL){
 80010bc:	4b0a      	ldr	r3, [pc, #40]	@ (80010e8 <main+0xc0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d102      	bne.n	80010ca <main+0xa2>
	  LOG_ERR("Serial Task Create Error!!");
 80010c4:	480a      	ldr	r0, [pc, #40]	@ (80010f0 <main+0xc8>)
 80010c6:	f7ff fd21 	bl	8000b0c <Printf>
  }
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80010ca:	f004 fba3 	bl	8005814 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010ce:	bf00      	nop
 80010d0:	e7fd      	b.n	80010ce <main+0xa6>
 80010d2:	bf00      	nop
 80010d4:	080013b1 	.word	0x080013b1
 80010d8:	20000b80 	.word	0x20000b80
 80010dc:	08009294 	.word	0x08009294
 80010e0:	20000b78 	.word	0x20000b78
 80010e4:	080092bc 	.word	0x080092bc
 80010e8:	20000b7c 	.word	0x20000b7c
 80010ec:	08009240 	.word	0x08009240
 80010f0:	08009264 	.word	0x08009264

080010f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b090      	sub	sp, #64	@ 0x40
 80010f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fa:	f107 0318 	add.w	r3, r7, #24
 80010fe:	2228      	movs	r2, #40	@ 0x28
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f007 f96e 	bl	80083e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001108:	1d3b      	adds	r3, r7, #4
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
 8001114:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001116:	2309      	movs	r3, #9
 8001118:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800111a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800111e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001120:	2300      	movs	r3, #0
 8001122:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001124:	2301      	movs	r3, #1
 8001126:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001128:	2301      	movs	r3, #1
 800112a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800112c:	2302      	movs	r3, #2
 800112e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001130:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001134:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001136:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800113a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800113c:	f107 0318 	add.w	r3, r7, #24
 8001140:	4618      	mov	r0, r3
 8001142:	f002 fe57 	bl	8003df4 <HAL_RCC_OscConfig>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800114c:	f000 f952 	bl	80013f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001150:	230f      	movs	r3, #15
 8001152:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001154:	2302      	movs	r3, #2
 8001156:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001158:	2300      	movs	r3, #0
 800115a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800115c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001160:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001166:	1d3b      	adds	r3, r7, #4
 8001168:	2102      	movs	r1, #2
 800116a:	4618      	mov	r0, r3
 800116c:	f003 f8c4 	bl	80042f8 <HAL_RCC_ClockConfig>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001176:	f000 f93d 	bl	80013f4 <Error_Handler>
  }
}
 800117a:	bf00      	nop
 800117c:	3740      	adds	r7, #64	@ 0x40
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001188:	4b11      	ldr	r3, [pc, #68]	@ (80011d0 <MX_USART1_UART_Init+0x4c>)
 800118a:	4a12      	ldr	r2, [pc, #72]	@ (80011d4 <MX_USART1_UART_Init+0x50>)
 800118c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800118e:	4b10      	ldr	r3, [pc, #64]	@ (80011d0 <MX_USART1_UART_Init+0x4c>)
 8001190:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001194:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001196:	4b0e      	ldr	r3, [pc, #56]	@ (80011d0 <MX_USART1_UART_Init+0x4c>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800119c:	4b0c      	ldr	r3, [pc, #48]	@ (80011d0 <MX_USART1_UART_Init+0x4c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011a2:	4b0b      	ldr	r3, [pc, #44]	@ (80011d0 <MX_USART1_UART_Init+0x4c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011a8:	4b09      	ldr	r3, [pc, #36]	@ (80011d0 <MX_USART1_UART_Init+0x4c>)
 80011aa:	220c      	movs	r2, #12
 80011ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ae:	4b08      	ldr	r3, [pc, #32]	@ (80011d0 <MX_USART1_UART_Init+0x4c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b4:	4b06      	ldr	r3, [pc, #24]	@ (80011d0 <MX_USART1_UART_Init+0x4c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011ba:	4805      	ldr	r0, [pc, #20]	@ (80011d0 <MX_USART1_UART_Init+0x4c>)
 80011bc:	f003 fc98 	bl	8004af0 <HAL_UART_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011c6:	f000 f915 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000ae8 	.word	0x20000ae8
 80011d4:	40013800 	.word	0x40013800

080011d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011dc:	4b11      	ldr	r3, [pc, #68]	@ (8001224 <MX_USART2_UART_Init+0x4c>)
 80011de:	4a12      	ldr	r2, [pc, #72]	@ (8001228 <MX_USART2_UART_Init+0x50>)
 80011e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011e2:	4b10      	ldr	r3, [pc, #64]	@ (8001224 <MX_USART2_UART_Init+0x4c>)
 80011e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001224 <MX_USART2_UART_Init+0x4c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001224 <MX_USART2_UART_Init+0x4c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001224 <MX_USART2_UART_Init+0x4c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011fc:	4b09      	ldr	r3, [pc, #36]	@ (8001224 <MX_USART2_UART_Init+0x4c>)
 80011fe:	220c      	movs	r2, #12
 8001200:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001202:	4b08      	ldr	r3, [pc, #32]	@ (8001224 <MX_USART2_UART_Init+0x4c>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001208:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <MX_USART2_UART_Init+0x4c>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800120e:	4805      	ldr	r0, [pc, #20]	@ (8001224 <MX_USART2_UART_Init+0x4c>)
 8001210:	f003 fc6e 	bl	8004af0 <HAL_UART_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800121a:	f000 f8eb 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000b30 	.word	0x20000b30
 8001228:	40004400 	.word	0x40004400

0800122c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b088      	sub	sp, #32
 8001230:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001232:	f107 0310 	add.w	r3, r7, #16
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001240:	4b45      	ldr	r3, [pc, #276]	@ (8001358 <MX_GPIO_Init+0x12c>)
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	4a44      	ldr	r2, [pc, #272]	@ (8001358 <MX_GPIO_Init+0x12c>)
 8001246:	f043 0310 	orr.w	r3, r3, #16
 800124a:	6193      	str	r3, [r2, #24]
 800124c:	4b42      	ldr	r3, [pc, #264]	@ (8001358 <MX_GPIO_Init+0x12c>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	f003 0310 	and.w	r3, r3, #16
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001258:	4b3f      	ldr	r3, [pc, #252]	@ (8001358 <MX_GPIO_Init+0x12c>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4a3e      	ldr	r2, [pc, #248]	@ (8001358 <MX_GPIO_Init+0x12c>)
 800125e:	f043 0320 	orr.w	r3, r3, #32
 8001262:	6193      	str	r3, [r2, #24]
 8001264:	4b3c      	ldr	r3, [pc, #240]	@ (8001358 <MX_GPIO_Init+0x12c>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	f003 0320 	and.w	r3, r3, #32
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001270:	4b39      	ldr	r3, [pc, #228]	@ (8001358 <MX_GPIO_Init+0x12c>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	4a38      	ldr	r2, [pc, #224]	@ (8001358 <MX_GPIO_Init+0x12c>)
 8001276:	f043 0304 	orr.w	r3, r3, #4
 800127a:	6193      	str	r3, [r2, #24]
 800127c:	4b36      	ldr	r3, [pc, #216]	@ (8001358 <MX_GPIO_Init+0x12c>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	f003 0304 	and.w	r3, r3, #4
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001288:	4b33      	ldr	r3, [pc, #204]	@ (8001358 <MX_GPIO_Init+0x12c>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	4a32      	ldr	r2, [pc, #200]	@ (8001358 <MX_GPIO_Init+0x12c>)
 800128e:	f043 0308 	orr.w	r3, r3, #8
 8001292:	6193      	str	r3, [r2, #24]
 8001294:	4b30      	ldr	r3, [pc, #192]	@ (8001358 <MX_GPIO_Init+0x12c>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	f003 0308 	and.w	r3, r3, #8
 800129c:	603b      	str	r3, [r7, #0]
 800129e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, GPIO_PIN_RESET);
 80012a0:	2200      	movs	r2, #0
 80012a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012a6:	482d      	ldr	r0, [pc, #180]	@ (800135c <MX_GPIO_Init+0x130>)
 80012a8:	f002 fd73 	bl	8003d92 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin
 80012ac:	2200      	movs	r2, #0
 80012ae:	f24f 31f8 	movw	r1, #62456	@ 0xf3f8
 80012b2:	482b      	ldr	r0, [pc, #172]	@ (8001360 <MX_GPIO_Init+0x134>)
 80012b4:	f002 fd6d 	bl	8003d92 <HAL_GPIO_WritePin>
                          |TRG2_Pin|TRG3_Pin|TRG4_Pin|TRG5_Pin
                          |TRG6_Pin|TRG7_Pin|TRG8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_EN_Pin|LCD_RW_Pin|LCD_RS_Pin|TRG1_Pin, GPIO_PIN_RESET);
 80012b8:	2200      	movs	r2, #0
 80012ba:	f44f 4119 	mov.w	r1, #39168	@ 0x9900
 80012be:	4829      	ldr	r0, [pc, #164]	@ (8001364 <MX_GPIO_Init+0x138>)
 80012c0:	f002 fd67 	bl	8003d92 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : STATUS_LED_Pin */
  GPIO_InitStruct.Pin = STATUS_LED_Pin;
 80012c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ca:	2301      	movs	r3, #1
 80012cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d2:	2302      	movs	r3, #2
 80012d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(STATUS_LED_GPIO_Port, &GPIO_InitStruct);
 80012d6:	f107 0310 	add.w	r3, r7, #16
 80012da:	4619      	mov	r1, r3
 80012dc:	481f      	ldr	r0, [pc, #124]	@ (800135c <MX_GPIO_Init+0x130>)
 80012de:	f002 fbbd 	bl	8003a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : DOWN_SW_Pin UP_SW_Pin */
  GPIO_InitStruct.Pin = DOWN_SW_Pin|UP_SW_Pin;
 80012e2:	23c0      	movs	r3, #192	@ 0xc0
 80012e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e6:	2300      	movs	r3, #0
 80012e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ee:	f107 0310 	add.w	r3, r7, #16
 80012f2:	4619      	mov	r1, r3
 80012f4:	481b      	ldr	r0, [pc, #108]	@ (8001364 <MX_GPIO_Init+0x138>)
 80012f6:	f002 fbb1 	bl	8003a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : ENTER_SW_Pin MODE_SW_Pin */
  GPIO_InitStruct.Pin = ENTER_SW_Pin|MODE_SW_Pin;
 80012fa:	2303      	movs	r3, #3
 80012fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001306:	f107 0310 	add.w	r3, r7, #16
 800130a:	4619      	mov	r1, r3
 800130c:	4814      	ldr	r0, [pc, #80]	@ (8001360 <MX_GPIO_Init+0x134>)
 800130e:	f002 fba5 	bl	8003a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D7_Pin LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin
                           TRG2_Pin TRG3_Pin TRG4_Pin TRG5_Pin
                           TRG6_Pin TRG7_Pin TRG8_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin
 8001312:	f24f 33f8 	movw	r3, #62456	@ 0xf3f8
 8001316:	613b      	str	r3, [r7, #16]
                          |TRG2_Pin|TRG3_Pin|TRG4_Pin|TRG5_Pin
                          |TRG6_Pin|TRG7_Pin|TRG8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001318:	2301      	movs	r3, #1
 800131a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001320:	2302      	movs	r3, #2
 8001322:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001324:	f107 0310 	add.w	r3, r7, #16
 8001328:	4619      	mov	r1, r3
 800132a:	480d      	ldr	r0, [pc, #52]	@ (8001360 <MX_GPIO_Init+0x134>)
 800132c:	f002 fb96 	bl	8003a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_EN_Pin LCD_RW_Pin LCD_RS_Pin TRG1_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin|LCD_RW_Pin|LCD_RS_Pin|TRG1_Pin;
 8001330:	f44f 4319 	mov.w	r3, #39168	@ 0x9900
 8001334:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001336:	2301      	movs	r3, #1
 8001338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133e:	2302      	movs	r3, #2
 8001340:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001342:	f107 0310 	add.w	r3, r7, #16
 8001346:	4619      	mov	r1, r3
 8001348:	4806      	ldr	r0, [pc, #24]	@ (8001364 <MX_GPIO_Init+0x138>)
 800134a:	f002 fb87 	bl	8003a5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800134e:	bf00      	nop
 8001350:	3720      	adds	r7, #32
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40021000 	.word	0x40021000
 800135c:	40011000 	.word	0x40011000
 8001360:	40010c00 	.word	0x40010c00
 8001364:	40010800 	.word	0x40010800

08001368 <eventTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_eventTask */
void eventTask(void const * argument)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	//event_queue_observer_t main_evt;

	LOG_INF("Run Event Task");
 8001370:	4809      	ldr	r0, [pc, #36]	@ (8001398 <eventTask+0x30>)
 8001372:	f7ff fbcb 	bl	8000b0c <Printf>

	LCD_INIT();  // for osDelay
 8001376:	f000 fafb 	bl	8001970 <LCD_INIT>

	screen_init();
 800137a:	f000 fb35 	bl	80019e8 <screen_init>

	osTimerStart(opLedTimerHandle, OP_LED_TIMER_TICK);
 800137e:	4b07      	ldr	r3, [pc, #28]	@ (800139c <eventTask+0x34>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001386:	4618      	mov	r0, r3
 8001388:	f004 fae0 	bl	800594c <osTimerStart>
  /* Infinite loop */
	AppsTask();
 800138c:	f7ff f8e0 	bl	8000550 <AppsTask>
  /* USER CODE END 5 */
}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	080092d8 	.word	0x080092d8
 800139c:	20000b80 	.word	0x20000b80

080013a0 <SerialTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SerialTask */
void SerialTask(void const * argument)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SerialTask */
  /* Infinite loop */
  for(;;)
  {
	  uart_task();
 80013a8:	f7ff fafc 	bl	80009a4 <uart_task>
 80013ac:	e7fc      	b.n	80013a8 <SerialTask+0x8>
	...

080013b0 <opLedCb>:
  /* USER CODE END SerialTask */
}

/* opLedCb function */
void opLedCb(void const * argument)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN opLedCb */
	HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 80013b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013bc:	4803      	ldr	r0, [pc, #12]	@ (80013cc <opLedCb+0x1c>)
 80013be:	f002 fd00 	bl	8003dc2 <HAL_GPIO_TogglePin>
  /* USER CODE END opLedCb */
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40011000 	.word	0x40011000

080013d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a04      	ldr	r2, [pc, #16]	@ (80013f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d101      	bne.n	80013e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013e2:	f001 ff83 	bl	80032ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40000800 	.word	0x40000800

080013f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f8:	b672      	cpsid	i
}
 80013fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <Error_Handler+0x8>

08001400 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001406:	4b18      	ldr	r3, [pc, #96]	@ (8001468 <HAL_MspInit+0x68>)
 8001408:	699b      	ldr	r3, [r3, #24]
 800140a:	4a17      	ldr	r2, [pc, #92]	@ (8001468 <HAL_MspInit+0x68>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6193      	str	r3, [r2, #24]
 8001412:	4b15      	ldr	r3, [pc, #84]	@ (8001468 <HAL_MspInit+0x68>)
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800141e:	4b12      	ldr	r3, [pc, #72]	@ (8001468 <HAL_MspInit+0x68>)
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	4a11      	ldr	r2, [pc, #68]	@ (8001468 <HAL_MspInit+0x68>)
 8001424:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001428:	61d3      	str	r3, [r2, #28]
 800142a:	4b0f      	ldr	r3, [pc, #60]	@ (8001468 <HAL_MspInit+0x68>)
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001436:	2200      	movs	r2, #0
 8001438:	210f      	movs	r1, #15
 800143a:	f06f 0001 	mvn.w	r0, #1
 800143e:	f002 f826 	bl	800348e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001442:	4b0a      	ldr	r3, [pc, #40]	@ (800146c <HAL_MspInit+0x6c>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	4a04      	ldr	r2, [pc, #16]	@ (800146c <HAL_MspInit+0x6c>)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800145e:	bf00      	nop
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40021000 	.word	0x40021000
 800146c:	40010000 	.word	0x40010000

08001470 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	@ 0x28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 0318 	add.w	r3, r7, #24
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a3b      	ldr	r2, [pc, #236]	@ (8001578 <HAL_UART_MspInit+0x108>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d13a      	bne.n	8001506 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001490:	4b3a      	ldr	r3, [pc, #232]	@ (800157c <HAL_UART_MspInit+0x10c>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	4a39      	ldr	r2, [pc, #228]	@ (800157c <HAL_UART_MspInit+0x10c>)
 8001496:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800149a:	6193      	str	r3, [r2, #24]
 800149c:	4b37      	ldr	r3, [pc, #220]	@ (800157c <HAL_UART_MspInit+0x10c>)
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014a4:	617b      	str	r3, [r7, #20]
 80014a6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a8:	4b34      	ldr	r3, [pc, #208]	@ (800157c <HAL_UART_MspInit+0x10c>)
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	4a33      	ldr	r2, [pc, #204]	@ (800157c <HAL_UART_MspInit+0x10c>)
 80014ae:	f043 0304 	orr.w	r3, r3, #4
 80014b2:	6193      	str	r3, [r2, #24]
 80014b4:	4b31      	ldr	r3, [pc, #196]	@ (800157c <HAL_UART_MspInit+0x10c>)
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	f003 0304 	and.w	r3, r3, #4
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c6:	2302      	movs	r3, #2
 80014c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ca:	2303      	movs	r3, #3
 80014cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ce:	f107 0318 	add.w	r3, r7, #24
 80014d2:	4619      	mov	r1, r3
 80014d4:	482a      	ldr	r0, [pc, #168]	@ (8001580 <HAL_UART_MspInit+0x110>)
 80014d6:	f002 fac1 	bl	8003a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e8:	f107 0318 	add.w	r3, r7, #24
 80014ec:	4619      	mov	r1, r3
 80014ee:	4824      	ldr	r0, [pc, #144]	@ (8001580 <HAL_UART_MspInit+0x110>)
 80014f0:	f002 fab4 	bl	8003a5c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80014f4:	2200      	movs	r2, #0
 80014f6:	2105      	movs	r1, #5
 80014f8:	2025      	movs	r0, #37	@ 0x25
 80014fa:	f001 ffc8 	bl	800348e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80014fe:	2025      	movs	r0, #37	@ 0x25
 8001500:	f001 ffe1 	bl	80034c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001504:	e034      	b.n	8001570 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a1e      	ldr	r2, [pc, #120]	@ (8001584 <HAL_UART_MspInit+0x114>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d12f      	bne.n	8001570 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001510:	4b1a      	ldr	r3, [pc, #104]	@ (800157c <HAL_UART_MspInit+0x10c>)
 8001512:	69db      	ldr	r3, [r3, #28]
 8001514:	4a19      	ldr	r2, [pc, #100]	@ (800157c <HAL_UART_MspInit+0x10c>)
 8001516:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800151a:	61d3      	str	r3, [r2, #28]
 800151c:	4b17      	ldr	r3, [pc, #92]	@ (800157c <HAL_UART_MspInit+0x10c>)
 800151e:	69db      	ldr	r3, [r3, #28]
 8001520:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001528:	4b14      	ldr	r3, [pc, #80]	@ (800157c <HAL_UART_MspInit+0x10c>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	4a13      	ldr	r2, [pc, #76]	@ (800157c <HAL_UART_MspInit+0x10c>)
 800152e:	f043 0304 	orr.w	r3, r3, #4
 8001532:	6193      	str	r3, [r2, #24]
 8001534:	4b11      	ldr	r3, [pc, #68]	@ (800157c <HAL_UART_MspInit+0x10c>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	f003 0304 	and.w	r3, r3, #4
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001540:	2304      	movs	r3, #4
 8001542:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2302      	movs	r3, #2
 8001546:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001548:	2303      	movs	r3, #3
 800154a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154c:	f107 0318 	add.w	r3, r7, #24
 8001550:	4619      	mov	r1, r3
 8001552:	480b      	ldr	r0, [pc, #44]	@ (8001580 <HAL_UART_MspInit+0x110>)
 8001554:	f002 fa82 	bl	8003a5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001558:	2308      	movs	r3, #8
 800155a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800155c:	2300      	movs	r3, #0
 800155e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001564:	f107 0318 	add.w	r3, r7, #24
 8001568:	4619      	mov	r1, r3
 800156a:	4805      	ldr	r0, [pc, #20]	@ (8001580 <HAL_UART_MspInit+0x110>)
 800156c:	f002 fa76 	bl	8003a5c <HAL_GPIO_Init>
}
 8001570:	bf00      	nop
 8001572:	3728      	adds	r7, #40	@ 0x28
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40013800 	.word	0x40013800
 800157c:	40021000 	.word	0x40021000
 8001580:	40010800 	.word	0x40010800
 8001584:	40004400 	.word	0x40004400

08001588 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08e      	sub	sp, #56	@ 0x38
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001590:	2300      	movs	r3, #0
 8001592:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001594:	2300      	movs	r3, #0
 8001596:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001598:	2300      	movs	r3, #0
 800159a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800159e:	4b34      	ldr	r3, [pc, #208]	@ (8001670 <HAL_InitTick+0xe8>)
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	4a33      	ldr	r2, [pc, #204]	@ (8001670 <HAL_InitTick+0xe8>)
 80015a4:	f043 0304 	orr.w	r3, r3, #4
 80015a8:	61d3      	str	r3, [r2, #28]
 80015aa:	4b31      	ldr	r3, [pc, #196]	@ (8001670 <HAL_InitTick+0xe8>)
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	f003 0304 	and.w	r3, r3, #4
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015b6:	f107 0210 	add.w	r2, r7, #16
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	4611      	mov	r1, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f003 f809 	bl	80045d8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80015c6:	6a3b      	ldr	r3, [r7, #32]
 80015c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d103      	bne.n	80015d8 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015d0:	f002 ffda 	bl	8004588 <HAL_RCC_GetPCLK1Freq>
 80015d4:	6378      	str	r0, [r7, #52]	@ 0x34
 80015d6:	e004      	b.n	80015e2 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015d8:	f002 ffd6 	bl	8004588 <HAL_RCC_GetPCLK1Freq>
 80015dc:	4603      	mov	r3, r0
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015e4:	4a23      	ldr	r2, [pc, #140]	@ (8001674 <HAL_InitTick+0xec>)
 80015e6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ea:	0c9b      	lsrs	r3, r3, #18
 80015ec:	3b01      	subs	r3, #1
 80015ee:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80015f0:	4b21      	ldr	r3, [pc, #132]	@ (8001678 <HAL_InitTick+0xf0>)
 80015f2:	4a22      	ldr	r2, [pc, #136]	@ (800167c <HAL_InitTick+0xf4>)
 80015f4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80015f6:	4b20      	ldr	r3, [pc, #128]	@ (8001678 <HAL_InitTick+0xf0>)
 80015f8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015fc:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80015fe:	4a1e      	ldr	r2, [pc, #120]	@ (8001678 <HAL_InitTick+0xf0>)
 8001600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001602:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001604:	4b1c      	ldr	r3, [pc, #112]	@ (8001678 <HAL_InitTick+0xf0>)
 8001606:	2200      	movs	r2, #0
 8001608:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800160a:	4b1b      	ldr	r3, [pc, #108]	@ (8001678 <HAL_InitTick+0xf0>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001610:	4b19      	ldr	r3, [pc, #100]	@ (8001678 <HAL_InitTick+0xf0>)
 8001612:	2200      	movs	r2, #0
 8001614:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001616:	4818      	ldr	r0, [pc, #96]	@ (8001678 <HAL_InitTick+0xf0>)
 8001618:	f003 f82c 	bl	8004674 <HAL_TIM_Base_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001622:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001626:	2b00      	cmp	r3, #0
 8001628:	d11b      	bne.n	8001662 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800162a:	4813      	ldr	r0, [pc, #76]	@ (8001678 <HAL_InitTick+0xf0>)
 800162c:	f003 f87a 	bl	8004724 <HAL_TIM_Base_Start_IT>
 8001630:	4603      	mov	r3, r0
 8001632:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001636:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800163a:	2b00      	cmp	r3, #0
 800163c:	d111      	bne.n	8001662 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800163e:	201e      	movs	r0, #30
 8001640:	f001 ff41 	bl	80034c6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b0f      	cmp	r3, #15
 8001648:	d808      	bhi.n	800165c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800164a:	2200      	movs	r2, #0
 800164c:	6879      	ldr	r1, [r7, #4]
 800164e:	201e      	movs	r0, #30
 8001650:	f001 ff1d 	bl	800348e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001654:	4a0a      	ldr	r2, [pc, #40]	@ (8001680 <HAL_InitTick+0xf8>)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6013      	str	r3, [r2, #0]
 800165a:	e002      	b.n	8001662 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001662:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001666:	4618      	mov	r0, r3
 8001668:	3738      	adds	r7, #56	@ 0x38
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40021000 	.word	0x40021000
 8001674:	431bde83 	.word	0x431bde83
 8001678:	20000b84 	.word	0x20000b84
 800167c:	40000800 	.word	0x40000800
 8001680:	20000144 	.word	0x20000144

08001684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001688:	bf00      	nop
 800168a:	e7fd      	b.n	8001688 <NMI_Handler+0x4>

0800168c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001690:	bf00      	nop
 8001692:	e7fd      	b.n	8001690 <HardFault_Handler+0x4>

08001694 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001698:	bf00      	nop
 800169a:	e7fd      	b.n	8001698 <MemManage_Handler+0x4>

0800169c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016a0:	bf00      	nop
 80016a2:	e7fd      	b.n	80016a0 <BusFault_Handler+0x4>

080016a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a8:	bf00      	nop
 80016aa:	e7fd      	b.n	80016a8 <UsageFault_Handler+0x4>

080016ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr

080016b8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80016bc:	4802      	ldr	r0, [pc, #8]	@ (80016c8 <TIM4_IRQHandler+0x10>)
 80016be:	f003 f883 	bl	80047c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000b84 	.word	0x20000b84

080016cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80016d0:	4802      	ldr	r0, [pc, #8]	@ (80016dc <USART1_IRQHandler+0x10>)
 80016d2:	f003 fb0d 	bl	8004cf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000ae8 	.word	0x20000ae8

080016e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016e8:	4a14      	ldr	r2, [pc, #80]	@ (800173c <_sbrk+0x5c>)
 80016ea:	4b15      	ldr	r3, [pc, #84]	@ (8001740 <_sbrk+0x60>)
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016f4:	4b13      	ldr	r3, [pc, #76]	@ (8001744 <_sbrk+0x64>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d102      	bne.n	8001702 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016fc:	4b11      	ldr	r3, [pc, #68]	@ (8001744 <_sbrk+0x64>)
 80016fe:	4a12      	ldr	r2, [pc, #72]	@ (8001748 <_sbrk+0x68>)
 8001700:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001702:	4b10      	ldr	r3, [pc, #64]	@ (8001744 <_sbrk+0x64>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4413      	add	r3, r2
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	429a      	cmp	r2, r3
 800170e:	d207      	bcs.n	8001720 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001710:	f006 fece 	bl	80084b0 <__errno>
 8001714:	4603      	mov	r3, r0
 8001716:	220c      	movs	r2, #12
 8001718:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800171a:	f04f 33ff 	mov.w	r3, #4294967295
 800171e:	e009      	b.n	8001734 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001720:	4b08      	ldr	r3, [pc, #32]	@ (8001744 <_sbrk+0x64>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001726:	4b07      	ldr	r3, [pc, #28]	@ (8001744 <_sbrk+0x64>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	4a05      	ldr	r2, [pc, #20]	@ (8001744 <_sbrk+0x64>)
 8001730:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001732:	68fb      	ldr	r3, [r7, #12]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20005000 	.word	0x20005000
 8001740:	00000400 	.word	0x00000400
 8001744:	20000bcc 	.word	0x20000bcc
 8001748:	20002060 	.word	0x20002060

0800174c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr

08001758 <LCD_LOAD_CGRAM>:
	0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, // 4columns ||||
	0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, // 5columns |||||
};
/* Private function prototypes -----------------------------------------------*/
void LCD_LOAD_CGRAM(char tab[], uint8_t charnum)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	460b      	mov	r3, r1
 8001762:	70fb      	strb	r3, [r7, #3]
	uint8_t index;
	/* Each character contains 8 definition values*/
	charnum = (uint8_t)(charnum * 8);
 8001764:	78fb      	ldrb	r3, [r7, #3]
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	70fb      	strb	r3, [r7, #3]
	for (index = 0;index < charnum;index++)
 800176a:	2300      	movs	r3, #0
 800176c:	73fb      	strb	r3, [r7, #15]
 800176e:	e00c      	b.n	800178a <LCD_LOAD_CGRAM+0x32>
	{
		/* Store values in LCD*/
		LCD_printchar(tab[index]);
 8001770:	7bfb      	ldrb	r3, [r7, #15]
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	4413      	add	r3, r2
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f000 f883 	bl	8001884 <LCD_printchar>
		osDelay(1);
 800177e:	2001      	movs	r0, #1
 8001780:	f004 f89b 	bl	80058ba <osDelay>
	for (index = 0;index < charnum;index++)
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	3301      	adds	r3, #1
 8001788:	73fb      	strb	r3, [r7, #15]
 800178a:	7bfa      	ldrb	r2, [r7, #15]
 800178c:	78fb      	ldrb	r3, [r7, #3]
 800178e:	429a      	cmp	r2, r3
 8001790:	d3ee      	bcc.n	8001770 <LCD_LOAD_CGRAM+0x18>
	}
}
 8001792:	bf00      	nop
 8001794:	bf00      	nop
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <LCD_ENABLE>:

void LCD_ENABLE (void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 80017a0:	2201      	movs	r2, #1
 80017a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017a6:	4807      	ldr	r0, [pc, #28]	@ (80017c4 <LCD_ENABLE+0x28>)
 80017a8:	f002 faf3 	bl	8003d92 <HAL_GPIO_WritePin>
	osDelay(2);
 80017ac:	2002      	movs	r0, #2
 80017ae:	f004 f884 	bl	80058ba <osDelay>
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 80017b2:	2200      	movs	r2, #0
 80017b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017b8:	4802      	ldr	r0, [pc, #8]	@ (80017c4 <LCD_ENABLE+0x28>)
 80017ba:	f002 faea 	bl	8003d92 <HAL_GPIO_WritePin>
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40010800 	.word	0x40010800

080017c8 <Send4Bit>:

static void Send4Bit(uint8_t data)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_Data_Port, LCD_D4_Pin, (data & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	461a      	mov	r2, r3
 80017dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017e0:	4816      	ldr	r0, [pc, #88]	@ (800183c <Send4Bit+0x74>)
 80017e2:	f002 fad6 	bl	8003d92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_Data_Port, LCD_D5_Pin, (data & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	105b      	asrs	r3, r3, #1
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	461a      	mov	r2, r3
 80017f4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80017f8:	4810      	ldr	r0, [pc, #64]	@ (800183c <Send4Bit+0x74>)
 80017fa:	f002 faca 	bl	8003d92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_Data_Port, LCD_D6_Pin, (data & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	109b      	asrs	r3, r3, #2
 8001802:	b2db      	uxtb	r3, r3
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	b2db      	uxtb	r3, r3
 800180a:	461a      	mov	r2, r3
 800180c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001810:	480a      	ldr	r0, [pc, #40]	@ (800183c <Send4Bit+0x74>)
 8001812:	f002 fabe 	bl	8003d92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_Data_Port, LCD_D7_Pin, (data & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	10db      	asrs	r3, r3, #3
 800181a:	b2db      	uxtb	r3, r3
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	b2db      	uxtb	r3, r3
 8001822:	461a      	mov	r2, r3
 8001824:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001828:	4804      	ldr	r0, [pc, #16]	@ (800183c <Send4Bit+0x74>)
 800182a:	f002 fab2 	bl	8003d92 <HAL_GPIO_WritePin>
    LCD_ENABLE();
 800182e:	f7ff ffb5 	bl	800179c <LCD_ENABLE>
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40010c00 	.word	0x40010c00

08001840 <LCD_CMD>:

void LCD_CMD(unsigned char cmd_data)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 800184a:	2200      	movs	r2, #0
 800184c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001850:	480b      	ldr	r0, [pc, #44]	@ (8001880 <LCD_CMD+0x40>)
 8001852:	f002 fa9e 	bl	8003d92 <HAL_GPIO_WritePin>

	Send4Bit((cmd_data>>4)&0x0F);
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	091b      	lsrs	r3, r3, #4
 800185a:	b2db      	uxtb	r3, r3
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ffb3 	bl	80017c8 <Send4Bit>
	Send4Bit(cmd_data & 0x0F);
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	f003 030f 	and.w	r3, r3, #15
 8001868:	b2db      	uxtb	r3, r3
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff ffac 	bl	80017c8 <Send4Bit>

	osDelay(2);
 8001870:	2002      	movs	r0, #2
 8001872:	f004 f822 	bl	80058ba <osDelay>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40010800 	.word	0x40010800

08001884 <LCD_printchar>:

void LCD_printchar(unsigned char ascode)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 800188e:	2201      	movs	r2, #1
 8001890:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001894:	480b      	ldr	r0, [pc, #44]	@ (80018c4 <LCD_printchar+0x40>)
 8001896:	f002 fa7c 	bl	8003d92 <HAL_GPIO_WritePin>

	Send4Bit((ascode>>4)&0x0F);
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	091b      	lsrs	r3, r3, #4
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff ff91 	bl	80017c8 <Send4Bit>
	Send4Bit(ascode & 0x0F);
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	f003 030f 	and.w	r3, r3, #15
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff ff8a 	bl	80017c8 <Send4Bit>

	osDelay(2);
 80018b4:	2002      	movs	r0, #2
 80018b6:	f004 f800 	bl	80058ba <osDelay>
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40010800 	.word	0x40010800

080018c8 <LCD_printstring>:

void LCD_printstring(char *text)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
	do
	{
		LCD_printchar(*text++);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	1c5a      	adds	r2, r3, #1
 80018d4:	607a      	str	r2, [r7, #4]
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ffd3 	bl	8001884 <LCD_printchar>
	}while (*text != '\n');
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b0a      	cmp	r3, #10
 80018e4:	d1f4      	bne.n	80018d0 <LCD_printstring+0x8>
}
 80018e6:	bf00      	nop
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <LCD_CLEAR_DISPLAY>:

void LCD_CLEAR_DISPLAY(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
	LCD_CMD(0x01);
 80018f4:	2001      	movs	r0, #1
 80018f6:	f7ff ffa3 	bl	8001840 <LCD_CMD>
	osDelay(2);
 80018fa:	2002      	movs	r0, #2
 80018fc:	f003 ffdd 	bl	80058ba <osDelay>
}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}

08001904 <LCD_DISP_ON>:
{
	LCD_CMD(0x1C);
}

void LCD_DISP_ON(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
	LCD_CMD(0x0C);
 8001908:	200c      	movs	r0, #12
 800190a:	f7ff ff99 	bl	8001840 <LCD_CMD>
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}

08001912 <LCD_DISP_CURSOR>:
{
	LCD_CMD(0x08);
}

void LCD_DISP_CURSOR(void)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	af00      	add	r7, sp, #0
	LCD_CMD(0x0E); // Cursor ON / Blink ON
 8001916:	200e      	movs	r0, #14
 8001918:	f7ff ff92 	bl	8001840 <LCD_CMD>
}
 800191c:	bf00      	nop
 800191e:	bd80      	pop	{r7, pc}

08001920 <LCD_LOCATE>:

void LCD_LOCATE(uint8_t row, uint8_t column)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	460a      	mov	r2, r1
 800192a:	71fb      	strb	r3, [r7, #7]
 800192c:	4613      	mov	r3, r2
 800192e:	71bb      	strb	r3, [r7, #6]
	column--;
 8001930:	79bb      	ldrb	r3, [r7, #6]
 8001932:	3b01      	subs	r3, #1
 8001934:	71bb      	strb	r3, [r7, #6]
	switch (row)
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d002      	beq.n	8001942 <LCD_LOCATE+0x22>
 800193c:	2b02      	cmp	r3, #2
 800193e:	d009      	beq.n	8001954 <LCD_LOCATE+0x34>
		case 2:
			/* Set cursor to 2nd row address and add index*/
			LCD_CMD(column |= 0x40 | 0x80);
			break;
		default:
			break;
 8001940:	e011      	b.n	8001966 <LCD_LOCATE+0x46>
			LCD_CMD(column |= 0x80);
 8001942:	79bb      	ldrb	r3, [r7, #6]
 8001944:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001948:	71bb      	strb	r3, [r7, #6]
 800194a:	79bb      	ldrb	r3, [r7, #6]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ff77 	bl	8001840 <LCD_CMD>
			break;
 8001952:	e008      	b.n	8001966 <LCD_LOCATE+0x46>
			LCD_CMD(column |= 0x40 | 0x80);
 8001954:	79bb      	ldrb	r3, [r7, #6]
 8001956:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 800195a:	71bb      	strb	r3, [r7, #6]
 800195c:	79bb      	ldrb	r3, [r7, #6]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff ff6e 	bl	8001840 <LCD_CMD>
			break;
 8001964:	bf00      	nop
	}
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <LCD_INIT>:
		}
	}
}

void LCD_INIT(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 8001974:	2201      	movs	r2, #1
 8001976:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800197a:	4819      	ldr	r0, [pc, #100]	@ (80019e0 <LCD_INIT+0x70>)
 800197c:	f002 fa09 	bl	8003d92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8001980:	2200      	movs	r2, #0
 8001982:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001986:	4816      	ldr	r0, [pc, #88]	@ (80019e0 <LCD_INIT+0x70>)
 8001988:	f002 fa03 	bl	8003d92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 800198c:	2200      	movs	r2, #0
 800198e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001992:	4813      	ldr	r0, [pc, #76]	@ (80019e0 <LCD_INIT+0x70>)
 8001994:	f002 f9fd 	bl	8003d92 <HAL_GPIO_WritePin>

	//Initialization of HD44780-based LCD (4-bit HW)
	LCD_CMD(0x33);
 8001998:	2033      	movs	r0, #51	@ 0x33
 800199a:	f7ff ff51 	bl	8001840 <LCD_CMD>
	osDelay(4);
 800199e:	2004      	movs	r0, #4
 80019a0:	f003 ff8b 	bl	80058ba <osDelay>
	LCD_CMD(0x32);
 80019a4:	2032      	movs	r0, #50	@ 0x32
 80019a6:	f7ff ff4b 	bl	8001840 <LCD_CMD>
	osDelay(4);
 80019aa:	2004      	movs	r0, #4
 80019ac:	f003 ff85 	bl	80058ba <osDelay>
	//Function Set 4-bit mode DL=0 N=1(2Lie 5*8 dots) F=0(Don't care)
	LCD_CMD(0x28);
 80019b0:	2028      	movs	r0, #40	@ 0x28
 80019b2:	f7ff ff45 	bl	8001840 <LCD_CMD>
	//Display On/Off Control curso x, blink x
	LCD_CMD(0x0C);
 80019b6:	200c      	movs	r0, #12
 80019b8:	f7ff ff42 	bl	8001840 <LCD_CMD>

	//Entry mode set, Increment, display not shift
	LCD_CMD(0x06);
 80019bc:	2006      	movs	r0, #6
 80019be:	f7ff ff3f 	bl	8001840 <LCD_CMD>

	LCD_CLEAR_DISPLAY();
 80019c2:	f7ff ff95 	bl	80018f0 <LCD_CLEAR_DISPLAY>
	//Minimum delay to wait before driving LCD module
	osDelay(200);
 80019c6:	20c8      	movs	r0, #200	@ 0xc8
 80019c8:	f003 ff77 	bl	80058ba <osDelay>

	LCD_CMD(CGRAM_address_start);
 80019cc:	2040      	movs	r0, #64	@ 0x40
 80019ce:	f7ff ff37 	bl	8001840 <LCD_CMD>
	LCD_LOAD_CGRAM(Custom, 6);
 80019d2:	2106      	movs	r1, #6
 80019d4:	4803      	ldr	r0, [pc, #12]	@ (80019e4 <LCD_INIT+0x74>)
 80019d6:	f7ff febf 	bl	8001758 <LCD_LOAD_CGRAM>
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40010800 	.word	0x40010800
 80019e4:	200000a4 	.word	0x200000a4

080019e8 <screen_init>:
};

config_t load_cfg;
/* Private functions ---------------------------------------------------------*/
void screen_init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
	char line_buf[LCD_PRINT_MAX];

	memset(&m_cfg, 0, sizeof(m_cfg));
 80019ee:	224a      	movs	r2, #74	@ 0x4a
 80019f0:	2100      	movs	r1, #0
 80019f2:	4815      	ldr	r0, [pc, #84]	@ (8001a48 <screen_init+0x60>)
 80019f4:	f006 fcf6 	bl	80083e4 <memset>
	memcpy(&load_cfg, m_app_config, sizeof(config_t));
 80019f8:	4b14      	ldr	r3, [pc, #80]	@ (8001a4c <screen_init+0x64>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a14      	ldr	r2, [pc, #80]	@ (8001a50 <screen_init+0x68>)
 80019fe:	4610      	mov	r0, r2
 8001a00:	4619      	mov	r1, r3
 8001a02:	2347      	movs	r3, #71	@ 0x47
 8001a04:	461a      	mov	r2, r3
 8001a06:	f006 fd7f 	bl	8008508 <memcpy>

	sprintf(line_buf,"%s\n", load_cfg.company);
 8001a0a:	1d3b      	adds	r3, r7, #4
 8001a0c:	4a11      	ldr	r2, [pc, #68]	@ (8001a54 <screen_init+0x6c>)
 8001a0e:	4912      	ldr	r1, [pc, #72]	@ (8001a58 <screen_init+0x70>)
 8001a10:	4618      	mov	r0, r3
 8001a12:	f006 fc89 	bl	8008328 <siprintf>
	LOG_DBG("Model : %s", line_buf);
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4810      	ldr	r0, [pc, #64]	@ (8001a5c <screen_init+0x74>)
 8001a1c:	f7ff f876 	bl	8000b0c <Printf>
	LCD_LOCATE(1,2);
 8001a20:	2102      	movs	r1, #2
 8001a22:	2001      	movs	r0, #1
 8001a24:	f7ff ff7c 	bl	8001920 <LCD_LOCATE>
	LCD_printstring(line_buf);
 8001a28:	1d3b      	adds	r3, r7, #4
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff ff4c 	bl	80018c8 <LCD_printstring>
	LCD_LOCATE(2,1);
 8001a30:	2101      	movs	r1, #1
 8001a32:	2002      	movs	r0, #2
 8001a34:	f7ff ff74 	bl	8001920 <LCD_LOCATE>
	LCD_printstring("StrobeController\n");
 8001a38:	4809      	ldr	r0, [pc, #36]	@ (8001a60 <screen_init+0x78>)
 8001a3a:	f7ff ff45 	bl	80018c8 <LCD_printstring>
}
 8001a3e:	bf00      	nop
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000bd0 	.word	0x20000bd0
 8001a4c:	2000020c 	.word	0x2000020c
 8001a50:	20000c1c 	.word	0x20000c1c
 8001a54:	20000c51 	.word	0x20000c51
 8001a58:	080092f0 	.word	0x080092f0
 8001a5c:	080092f4 	.word	0x080092f4
 8001a60:	08009308 	.word	0x08009308

08001a64 <screen_blink>:

void screen_blink(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
	if(m_cfg.enable_blink){
 8001a68:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa4 <screen_blink+0x40>)
 8001a6a:	7a9b      	ldrb	r3, [r3, #10]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d016      	beq.n	8001a9e <screen_blink+0x3a>
		LCD_LOCATE(m_cfg.blink_row,1);
 8001a70:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa4 <screen_blink+0x40>)
 8001a72:	7b1b      	ldrb	r3, [r3, #12]
 8001a74:	2101      	movs	r1, #1
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff ff52 	bl	8001920 <LCD_LOCATE>
		m_cfg.blink = ~m_cfg.blink;
 8001a7c:	4b09      	ldr	r3, [pc, #36]	@ (8001aa4 <screen_blink+0x40>)
 8001a7e:	7adb      	ldrb	r3, [r3, #11]
 8001a80:	43db      	mvns	r3, r3
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	4b07      	ldr	r3, [pc, #28]	@ (8001aa4 <screen_blink+0x40>)
 8001a86:	72da      	strb	r2, [r3, #11]
		if(m_cfg.blink){
 8001a88:	4b06      	ldr	r3, [pc, #24]	@ (8001aa4 <screen_blink+0x40>)
 8001a8a:	7adb      	ldrb	r3, [r3, #11]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d003      	beq.n	8001a98 <screen_blink+0x34>
			LCD_printstring(m_cfg.blink_text[0]);
 8001a90:	4805      	ldr	r0, [pc, #20]	@ (8001aa8 <screen_blink+0x44>)
 8001a92:	f7ff ff19 	bl	80018c8 <LCD_printstring>
		}else{
			LCD_printstring(m_cfg.blink_text[1]);
		}
	}
}
 8001a96:	e002      	b.n	8001a9e <screen_blink+0x3a>
			LCD_printstring(m_cfg.blink_text[1]);
 8001a98:	4804      	ldr	r0, [pc, #16]	@ (8001aac <screen_blink+0x48>)
 8001a9a:	f7ff ff15 	bl	80018c8 <LCD_printstring>
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000bd0 	.word	0x20000bd0
 8001aa8:	20000bdd 	.word	0x20000bdd
 8001aac:	20000bf1 	.word	0x20000bf1

08001ab0 <send_cmd_2_backend>:

static void send_cmd_2_backend(BackEnd_Cmd_t cmd, uint8_t ch, uint16_t value)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
 8001aba:	460b      	mov	r3, r1
 8001abc:	71bb      	strb	r3, [r7, #6]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	80bb      	strh	r3, [r7, #4]
	// Todo : Send Cmd
	uart_SendFront(cmd, ch, (uint32_t)value);
 8001ac2:	88ba      	ldrh	r2, [r7, #4]
 8001ac4:	79b9      	ldrb	r1, [r7, #6]
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7fe ffa3 	bl	8000a14 <uart_SendFront>
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <screen_process>:

ScreenID_t screen_process(ScreenID_t screen_id, Key_t key)
{
 8001ad8:	b590      	push	{r4, r7, lr}
 8001ada:	b087      	sub	sp, #28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	460a      	mov	r2, r1
 8001ae2:	71fb      	strb	r3, [r7, #7]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	71bb      	strb	r3, [r7, #6]
	int menu_list_size = MAX_SC_LIST_NUM;
 8001ae8:	230d      	movs	r3, #13
 8001aea:	613b      	str	r3, [r7, #16]
	int i;	
	Screen_param_t sc_param;

	LOG_INF("%s : key[%s]", screen_id_2_str(screen_id), key_id_2_str(key));
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff f886 	bl	8000c00 <screen_id_2_str>
 8001af4:	4604      	mov	r4, r0
 8001af6:	79bb      	ldrb	r3, [r7, #6]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff f8eb 	bl	8000cd4 <key_id_2_str>
 8001afe:	4603      	mov	r3, r0
 8001b00:	461a      	mov	r2, r3
 8001b02:	4621      	mov	r1, r4
 8001b04:	4814      	ldr	r0, [pc, #80]	@ (8001b58 <screen_process+0x80>)
 8001b06:	f7ff f801 	bl	8000b0c <Printf>
	sc_param.sc_id = screen_id;
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	723b      	strb	r3, [r7, #8]
	sc_param.key = key;
 8001b0e:	79bb      	ldrb	r3, [r7, #6]
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	817b      	strh	r3, [r7, #10]
	for(i = 0; menu_list_size; i++){
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
 8001b18:	e015      	b.n	8001b46 <screen_process+0x6e>
		if(screen_id == screen_func_list[i].id){
 8001b1a:	4a10      	ldr	r2, [pc, #64]	@ (8001b5c <screen_process+0x84>)
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8001b22:	79fa      	ldrb	r2, [r7, #7]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d10b      	bne.n	8001b40 <screen_process+0x68>
			return screen_func_list[i].func(sc_param);			
 8001b28:	4a0c      	ldr	r2, [pc, #48]	@ (8001b5c <screen_process+0x84>)
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	4413      	add	r3, r2
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f107 0208 	add.w	r2, r7, #8
 8001b36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b3a:	4798      	blx	r3
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	e006      	b.n	8001b4e <screen_process+0x76>
	for(i = 0; menu_list_size; i++){
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	3301      	adds	r3, #1
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1e6      	bne.n	8001b1a <screen_process+0x42>
		}
	}
	return eMAX_SCREEN_ID;
 8001b4c:	230f      	movs	r3, #15
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	371c      	adds	r7, #28
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd90      	pop	{r4, r7, pc}
 8001b56:	bf00      	nop
 8001b58:	0800931c 	.word	0x0800931c
 8001b5c:	200000d4 	.word	0x200000d4

08001b60 <draw_title>:

static void draw_title(uint8_t step)
{
 8001b60:	b590      	push	{r4, r7, lr}
 8001b62:	b091      	sub	sp, #68	@ 0x44
 8001b64:	af02      	add	r7, sp, #8
 8001b66:	4603      	mov	r3, r0
 8001b68:	71fb      	strb	r3, [r7, #7]
	char line_1_buf[LCD_PRINT_MAX], line_2_buf[LCD_PRINT_MAX];
	uint8_t ch = m_cfg.cur_ch;
 8001b6a:	4bad      	ldr	r3, [pc, #692]	@ (8001e20 <draw_title+0x2c0>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t disp_ch = m_cfg.cur_ch+1;
 8001b72:	4bab      	ldr	r3, [pc, #684]	@ (8001e20 <draw_title+0x2c0>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	3301      	adds	r3, #1
 8001b78:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	LOG_INF("start Draw title [%d] ch[%d]\r\n", step, ch);
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001b82:	4619      	mov	r1, r3
 8001b84:	48a7      	ldr	r0, [pc, #668]	@ (8001e24 <draw_title+0x2c4>)
 8001b86:	f7fe ffc1 	bl	8000b0c <Printf>

	switch(step){
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	2b0e      	cmp	r3, #14
 8001b8e:	f200 81ca 	bhi.w	8001f26 <draw_title+0x3c6>
 8001b92:	a201      	add	r2, pc, #4	@ (adr r2, 8001b98 <draw_title+0x38>)
 8001b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b98:	08001bd5 	.word	0x08001bd5
 8001b9c:	08001c05 	.word	0x08001c05
 8001ba0:	08001c35 	.word	0x08001c35
 8001ba4:	08001c67 	.word	0x08001c67
 8001ba8:	08001cb1 	.word	0x08001cb1
 8001bac:	08001cd9 	.word	0x08001cd9
 8001bb0:	08001d01 	.word	0x08001d01
 8001bb4:	08001d21 	.word	0x08001d21
 8001bb8:	08001d5f 	.word	0x08001d5f
 8001bbc:	08001db5 	.word	0x08001db5
 8001bc0:	08001d83 	.word	0x08001d83
 8001bc4:	08001dcf 	.word	0x08001dcf
 8001bc8:	08001deb 	.word	0x08001deb
 8001bcc:	08001e05 	.word	0x08001e05
 8001bd0:	08001eb5 	.word	0x08001eb5
		case eCH_CHSelect:
			sprintf(line_1_buf, "CH%d   Operation\n", disp_ch);
 8001bd4:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8001bd8:	f107 0320 	add.w	r3, r7, #32
 8001bdc:	4992      	ldr	r1, [pc, #584]	@ (8001e28 <draw_title+0x2c8>)
 8001bde:	4618      	mov	r0, r3
 8001be0:	f006 fba2 	bl	8008328 <siprintf>
			sprintf(line_2_buf, "OnTime : %5dus", load_cfg.on_time[ch]);
 8001be4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001be8:	4a90      	ldr	r2, [pc, #576]	@ (8001e2c <draw_title+0x2cc>)
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	4413      	add	r3, r2
 8001bee:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	f107 030c 	add.w	r3, r7, #12
 8001bfa:	498d      	ldr	r1, [pc, #564]	@ (8001e30 <draw_title+0x2d0>)
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f006 fb93 	bl	8008328 <siprintf>
			break;
 8001c02:	e190      	b.n	8001f26 <draw_title+0x3c6>
		case eCH_OnTIME:
			sprintf(line_1_buf, "CH%d On-Time     \n", disp_ch);
 8001c04:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8001c08:	f107 0320 	add.w	r3, r7, #32
 8001c0c:	4989      	ldr	r1, [pc, #548]	@ (8001e34 <draw_title+0x2d4>)
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f006 fb8a 	bl	8008328 <siprintf>
			sprintf(line_2_buf, "Value : %5d us", load_cfg.on_time[ch]);
 8001c14:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001c18:	4a84      	ldr	r2, [pc, #528]	@ (8001e2c <draw_title+0x2cc>)
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	4413      	add	r3, r2
 8001c1e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	461a      	mov	r2, r3
 8001c26:	f107 030c 	add.w	r3, r7, #12
 8001c2a:	4983      	ldr	r1, [pc, #524]	@ (8001e38 <draw_title+0x2d8>)
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f006 fb7b 	bl	8008328 <siprintf>
			break;
 8001c32:	e178      	b.n	8001f26 <draw_title+0x3c6>
		case eCH_DelayTIME:
			sprintf(line_1_buf, "CH%d Delay-Time  \n", disp_ch);
 8001c34:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8001c38:	f107 0320 	add.w	r3, r7, #32
 8001c3c:	497f      	ldr	r1, [pc, #508]	@ (8001e3c <draw_title+0x2dc>)
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f006 fb72 	bl	8008328 <siprintf>
			sprintf(line_2_buf, "Value : %5d us", load_cfg.delay_time[ch]);
 8001c44:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001c48:	4a78      	ldr	r2, [pc, #480]	@ (8001e2c <draw_title+0x2cc>)
 8001c4a:	3308      	adds	r3, #8
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	4413      	add	r3, r2
 8001c50:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	461a      	mov	r2, r3
 8001c58:	f107 030c 	add.w	r3, r7, #12
 8001c5c:	4976      	ldr	r1, [pc, #472]	@ (8001e38 <draw_title+0x2d8>)
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f006 fb62 	bl	8008328 <siprintf>
			break;
 8001c64:	e15f      	b.n	8001f26 <draw_title+0x3c6>
		case eCH_TriggerSet:
			sprintf(line_1_buf, "CH%d Trigger Set \n", disp_ch);
 8001c66:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8001c6a:	f107 0320 	add.w	r3, r7, #32
 8001c6e:	4974      	ldr	r1, [pc, #464]	@ (8001e40 <draw_title+0x2e0>)
 8001c70:	4618      	mov	r0, r3
 8001c72:	f006 fb59 	bl	8008328 <siprintf>
			sprintf(line_2_buf, "Value : %s \n", load_cfg.edge[ch]?"Rising":"Falling");
 8001c76:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001c7a:	4a6c      	ldr	r2, [pc, #432]	@ (8001e2c <draw_title+0x2cc>)
 8001c7c:	4413      	add	r3, r2
 8001c7e:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <draw_title+0x12a>
 8001c86:	4a6f      	ldr	r2, [pc, #444]	@ (8001e44 <draw_title+0x2e4>)
 8001c88:	e000      	b.n	8001c8c <draw_title+0x12c>
 8001c8a:	4a6f      	ldr	r2, [pc, #444]	@ (8001e48 <draw_title+0x2e8>)
 8001c8c:	f107 030c 	add.w	r3, r7, #12
 8001c90:	496e      	ldr	r1, [pc, #440]	@ (8001e4c <draw_title+0x2ec>)
 8001c92:	4618      	mov	r0, r3
 8001c94:	f006 fb48 	bl	8008328 <siprintf>
			memcpy(m_cfg.blink_text[0], line_2_buf, 17);
 8001c98:	f107 030c 	add.w	r3, r7, #12
 8001c9c:	2211      	movs	r2, #17
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	486b      	ldr	r0, [pc, #428]	@ (8001e50 <draw_title+0x2f0>)
 8001ca2:	f006 fc31 	bl	8008508 <memcpy>
			sprintf(m_cfg.blink_text[1],"Value :         ");
 8001ca6:	496b      	ldr	r1, [pc, #428]	@ (8001e54 <draw_title+0x2f4>)
 8001ca8:	486b      	ldr	r0, [pc, #428]	@ (8001e58 <draw_title+0x2f8>)
 8001caa:	f006 fb3d 	bl	8008328 <siprintf>
			break;
 8001cae:	e13a      	b.n	8001f26 <draw_title+0x3c6>
		case eSEL_OPMODE:
			sprintf(line_1_buf, "Mode Select     \n");
 8001cb0:	f107 0320 	add.w	r3, r7, #32
 8001cb4:	4969      	ldr	r1, [pc, #420]	@ (8001e5c <draw_title+0x2fc>)
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f006 fb36 	bl	8008328 <siprintf>
			sprintf(line_2_buf, "      %s     \n", load_cfg.mode?"1 : N":"1 : 1");
 8001cbc:	4b5b      	ldr	r3, [pc, #364]	@ (8001e2c <draw_title+0x2cc>)
 8001cbe:	791b      	ldrb	r3, [r3, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <draw_title+0x168>
 8001cc4:	4a66      	ldr	r2, [pc, #408]	@ (8001e60 <draw_title+0x300>)
 8001cc6:	e000      	b.n	8001cca <draw_title+0x16a>
 8001cc8:	4a66      	ldr	r2, [pc, #408]	@ (8001e64 <draw_title+0x304>)
 8001cca:	f107 030c 	add.w	r3, r7, #12
 8001cce:	4966      	ldr	r1, [pc, #408]	@ (8001e68 <draw_title+0x308>)
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f006 fb29 	bl	8008328 <siprintf>
			break;
 8001cd6:	e126      	b.n	8001f26 <draw_title+0x3c6>
		case eSET_OPMODE:
			sprintf(line_1_buf, "Mode Selection  \n");
 8001cd8:	f107 0320 	add.w	r3, r7, #32
 8001cdc:	4963      	ldr	r1, [pc, #396]	@ (8001e6c <draw_title+0x30c>)
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f006 fb22 	bl	8008328 <siprintf>
			sprintf(line_2_buf, "      %s     ", load_cfg.mode?"1 : N":"1 : 1");
 8001ce4:	4b51      	ldr	r3, [pc, #324]	@ (8001e2c <draw_title+0x2cc>)
 8001ce6:	791b      	ldrb	r3, [r3, #4]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <draw_title+0x190>
 8001cec:	4a5c      	ldr	r2, [pc, #368]	@ (8001e60 <draw_title+0x300>)
 8001cee:	e000      	b.n	8001cf2 <draw_title+0x192>
 8001cf0:	4a5c      	ldr	r2, [pc, #368]	@ (8001e64 <draw_title+0x304>)
 8001cf2:	f107 030c 	add.w	r3, r7, #12
 8001cf6:	495e      	ldr	r1, [pc, #376]	@ (8001e70 <draw_title+0x310>)
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f006 fb15 	bl	8008328 <siprintf>
			break;
 8001cfe:	e112      	b.n	8001f26 <draw_title+0x3c6>
		case eRS_DevID:
			sprintf(line_1_buf, "RS232 Operation  \n");
 8001d00:	f107 0320 	add.w	r3, r7, #32
 8001d04:	495b      	ldr	r1, [pc, #364]	@ (8001e74 <draw_title+0x314>)
 8001d06:	4618      	mov	r0, r3
 8001d08:	f006 fb0e 	bl	8008328 <siprintf>
			sprintf(line_2_buf, "Device ID : %02d", load_cfg.dev_id);
 8001d0c:	4b47      	ldr	r3, [pc, #284]	@ (8001e2c <draw_title+0x2cc>)
 8001d0e:	795b      	ldrb	r3, [r3, #5]
 8001d10:	461a      	mov	r2, r3
 8001d12:	f107 030c 	add.w	r3, r7, #12
 8001d16:	4958      	ldr	r1, [pc, #352]	@ (8001e78 <draw_title+0x318>)
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f006 fb05 	bl	8008328 <siprintf>
			break;
 8001d1e:	e102      	b.n	8001f26 <draw_title+0x3c6>
		case eIP_Set:
			sprintf(line_1_buf, "Communication  \n");
 8001d20:	f107 0320 	add.w	r3, r7, #32
 8001d24:	4955      	ldr	r1, [pc, #340]	@ (8001e7c <draw_title+0x31c>)
 8001d26:	4618      	mov	r0, r3
 8001d28:	f006 fafe 	bl	8008328 <siprintf>
			sprintf(line_2_buf, "%03d.%03d.%03d.%03d ", load_cfg.ether.ipaddr[0], load_cfg.ether.ipaddr[1], load_cfg.ether.ipaddr[2], load_cfg.ether.ipaddr[3]);
 8001d2c:	4b3f      	ldr	r3, [pc, #252]	@ (8001e2c <draw_title+0x2cc>)
 8001d2e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001d32:	4619      	mov	r1, r3
 8001d34:	4b3d      	ldr	r3, [pc, #244]	@ (8001e2c <draw_title+0x2cc>)
 8001d36:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d3a:	461c      	mov	r4, r3
 8001d3c:	4b3b      	ldr	r3, [pc, #236]	@ (8001e2c <draw_title+0x2cc>)
 8001d3e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001d42:	461a      	mov	r2, r3
 8001d44:	4b39      	ldr	r3, [pc, #228]	@ (8001e2c <draw_title+0x2cc>)
 8001d46:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001d4a:	f107 000c 	add.w	r0, r7, #12
 8001d4e:	9301      	str	r3, [sp, #4]
 8001d50:	9200      	str	r2, [sp, #0]
 8001d52:	4623      	mov	r3, r4
 8001d54:	460a      	mov	r2, r1
 8001d56:	494a      	ldr	r1, [pc, #296]	@ (8001e80 <draw_title+0x320>)
 8001d58:	f006 fae6 	bl	8008328 <siprintf>
			break;
 8001d5c:	e0e3      	b.n	8001f26 <draw_title+0x3c6>
		case ePORT_Set:
			sprintf(line_1_buf, "Communication  \n");
 8001d5e:	f107 0320 	add.w	r3, r7, #32
 8001d62:	4946      	ldr	r1, [pc, #280]	@ (8001e7c <draw_title+0x31c>)
 8001d64:	4618      	mov	r0, r3
 8001d66:	f006 fadf 	bl	8008328 <siprintf>
			sprintf(line_2_buf, "Port : %d    \n", load_cfg.ether.port);
 8001d6a:	4b30      	ldr	r3, [pc, #192]	@ (8001e2c <draw_title+0x2cc>)
 8001d6c:	f8b3 3033 	ldrh.w	r3, [r3, #51]	@ 0x33
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	461a      	mov	r2, r3
 8001d74:	f107 030c 	add.w	r3, r7, #12
 8001d78:	4942      	ldr	r1, [pc, #264]	@ (8001e84 <draw_title+0x324>)
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f006 fad4 	bl	8008328 <siprintf>
			break;
 8001d80:	e0d1      	b.n	8001f26 <draw_title+0x3c6>
		case eRemote_Mode:
			sprintf(line_1_buf, "Communication  \n");
 8001d82:	f107 0320 	add.w	r3, r7, #32
 8001d86:	493d      	ldr	r1, [pc, #244]	@ (8001e7c <draw_title+0x31c>)
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f006 facd 	bl	8008328 <siprintf>
			if(m_cfg.remote_mode == eREMOTE_RS232){
 8001d8e:	4b24      	ldr	r3, [pc, #144]	@ (8001e20 <draw_title+0x2c0>)
 8001d90:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d106      	bne.n	8001da6 <draw_title+0x246>
				sprintf(line_2_buf, "RS232...       \n");
 8001d98:	f107 030c 	add.w	r3, r7, #12
 8001d9c:	493a      	ldr	r1, [pc, #232]	@ (8001e88 <draw_title+0x328>)
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f006 fac2 	bl	8008328 <siprintf>
			}else{
				sprintf(line_2_buf, "Ethernet...    \n");
			}
			break;
 8001da4:	e0bf      	b.n	8001f26 <draw_title+0x3c6>
				sprintf(line_2_buf, "Ethernet...    \n");
 8001da6:	f107 030c 	add.w	r3, r7, #12
 8001daa:	4938      	ldr	r1, [pc, #224]	@ (8001e8c <draw_title+0x32c>)
 8001dac:	4618      	mov	r0, r3
 8001dae:	f006 fabb 	bl	8008328 <siprintf>
			break;
 8001db2:	e0b8      	b.n	8001f26 <draw_title+0x3c6>
		case eSelf_Test:
			sprintf(line_1_buf, "Test Operation  \n");
 8001db4:	f107 0320 	add.w	r3, r7, #32
 8001db8:	4935      	ldr	r1, [pc, #212]	@ (8001e90 <draw_title+0x330>)
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f006 fab4 	bl	8008328 <siprintf>
			sprintf(line_2_buf, "Testing...      \n");
 8001dc0:	f107 030c 	add.w	r3, r7, #12
 8001dc4:	4933      	ldr	r1, [pc, #204]	@ (8001e94 <draw_title+0x334>)
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f006 faae 	bl	8008328 <siprintf>
			break;
 8001dcc:	e0ab      	b.n	8001f26 <draw_title+0x3c6>
		case eUSER_Mode:
			sprintf(line_1_buf, " %s\n", load_cfg.company);
 8001dce:	f107 0320 	add.w	r3, r7, #32
 8001dd2:	4a31      	ldr	r2, [pc, #196]	@ (8001e98 <draw_title+0x338>)
 8001dd4:	4931      	ldr	r1, [pc, #196]	@ (8001e9c <draw_title+0x33c>)
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f006 faa6 	bl	8008328 <siprintf>
			sprintf(line_2_buf, "StrobeController\n");
 8001ddc:	f107 030c 	add.w	r3, r7, #12
 8001de0:	492f      	ldr	r1, [pc, #188]	@ (8001ea0 <draw_title+0x340>)
 8001de2:	4618      	mov	r0, r3
 8001de4:	f006 faa0 	bl	8008328 <siprintf>
			break;
 8001de8:	e09d      	b.n	8001f26 <draw_title+0x3c6>
		case eFactor_Mode:
			sprintf(line_1_buf, "Factory mode    \n");
 8001dea:	f107 0320 	add.w	r3, r7, #32
 8001dee:	492d      	ldr	r1, [pc, #180]	@ (8001ea4 <draw_title+0x344>)
 8001df0:	4618      	mov	r0, r3
 8001df2:	f006 fa99 	bl	8008328 <siprintf>
			sprintf(line_2_buf, "Reset...        \n");
 8001df6:	f107 030c 	add.w	r3, r7, #12
 8001dfa:	492b      	ldr	r1, [pc, #172]	@ (8001ea8 <draw_title+0x348>)
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f006 fa93 	bl	8008328 <siprintf>
			break;
 8001e02:	e090      	b.n	8001f26 <draw_title+0x3c6>
		case eSEL_OP_Ch:
			sprintf(line_1_buf, "CH1 CH2 CH4 CH6 \n");
 8001e04:	f107 0320 	add.w	r3, r7, #32
 8001e08:	4928      	ldr	r1, [pc, #160]	@ (8001eac <draw_title+0x34c>)
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f006 fa8c 	bl	8008328 <siprintf>
			sprintf(line_2_buf, "CH8             \n");
 8001e10:	f107 030c 	add.w	r3, r7, #12
 8001e14:	4926      	ldr	r1, [pc, #152]	@ (8001eb0 <draw_title+0x350>)
 8001e16:	4618      	mov	r0, r3
 8001e18:	f006 fa86 	bl	8008328 <siprintf>
			break;
 8001e1c:	e083      	b.n	8001f26 <draw_title+0x3c6>
 8001e1e:	bf00      	nop
 8001e20:	20000bd0 	.word	0x20000bd0
 8001e24:	08009330 	.word	0x08009330
 8001e28:	08009358 	.word	0x08009358
 8001e2c:	20000c1c 	.word	0x20000c1c
 8001e30:	0800936c 	.word	0x0800936c
 8001e34:	0800937c 	.word	0x0800937c
 8001e38:	08009390 	.word	0x08009390
 8001e3c:	080093a0 	.word	0x080093a0
 8001e40:	080093b4 	.word	0x080093b4
 8001e44:	080093c8 	.word	0x080093c8
 8001e48:	080093d0 	.word	0x080093d0
 8001e4c:	080093d8 	.word	0x080093d8
 8001e50:	20000bdd 	.word	0x20000bdd
 8001e54:	080093e8 	.word	0x080093e8
 8001e58:	20000bf1 	.word	0x20000bf1
 8001e5c:	080093fc 	.word	0x080093fc
 8001e60:	08009410 	.word	0x08009410
 8001e64:	08009418 	.word	0x08009418
 8001e68:	08009420 	.word	0x08009420
 8001e6c:	08009430 	.word	0x08009430
 8001e70:	08009444 	.word	0x08009444
 8001e74:	08009454 	.word	0x08009454
 8001e78:	08009468 	.word	0x08009468
 8001e7c:	0800947c 	.word	0x0800947c
 8001e80:	08009490 	.word	0x08009490
 8001e84:	080094a8 	.word	0x080094a8
 8001e88:	080094b8 	.word	0x080094b8
 8001e8c:	080094cc 	.word	0x080094cc
 8001e90:	080094e0 	.word	0x080094e0
 8001e94:	080094f4 	.word	0x080094f4
 8001e98:	20000c51 	.word	0x20000c51
 8001e9c:	08009508 	.word	0x08009508
 8001ea0:	08009308 	.word	0x08009308
 8001ea4:	08009510 	.word	0x08009510
 8001ea8:	08009524 	.word	0x08009524
 8001eac:	08009538 	.word	0x08009538
 8001eb0:	0800954c 	.word	0x0800954c
		case eVer_Disp:
			sprintf(line_1_buf, "F - FW : Ver %1d.%1d\n", load_cfg.frontVer/10, load_cfg.frontVer%10);
 8001eb4:	4b2e      	ldr	r3, [pc, #184]	@ (8001f70 <draw_title+0x410>)
 8001eb6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001eba:	4a2e      	ldr	r2, [pc, #184]	@ (8001f74 <draw_title+0x414>)
 8001ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec0:	08db      	lsrs	r3, r3, #3
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	461c      	mov	r4, r3
 8001ec6:	4b2a      	ldr	r3, [pc, #168]	@ (8001f70 <draw_title+0x410>)
 8001ec8:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8001ecc:	4b29      	ldr	r3, [pc, #164]	@ (8001f74 <draw_title+0x414>)
 8001ece:	fba3 1302 	umull	r1, r3, r3, r2
 8001ed2:	08d9      	lsrs	r1, r3, #3
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	440b      	add	r3, r1
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	f107 0020 	add.w	r0, r7, #32
 8001ee4:	4622      	mov	r2, r4
 8001ee6:	4924      	ldr	r1, [pc, #144]	@ (8001f78 <draw_title+0x418>)
 8001ee8:	f006 fa1e 	bl	8008328 <siprintf>
			sprintf(line_2_buf, "M - FW : Ver %1d.%1d\n", load_cfg.backendVer/10, load_cfg.backendVer%10);
 8001eec:	4b20      	ldr	r3, [pc, #128]	@ (8001f70 <draw_title+0x410>)
 8001eee:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8001ef2:	4a20      	ldr	r2, [pc, #128]	@ (8001f74 <draw_title+0x414>)
 8001ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef8:	08db      	lsrs	r3, r3, #3
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	461c      	mov	r4, r3
 8001efe:	4b1c      	ldr	r3, [pc, #112]	@ (8001f70 <draw_title+0x410>)
 8001f00:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8001f04:	4b1b      	ldr	r3, [pc, #108]	@ (8001f74 <draw_title+0x414>)
 8001f06:	fba3 1302 	umull	r1, r3, r3, r2
 8001f0a:	08d9      	lsrs	r1, r3, #3
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	440b      	add	r3, r1
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	f107 000c 	add.w	r0, r7, #12
 8001f1c:	4622      	mov	r2, r4
 8001f1e:	4917      	ldr	r1, [pc, #92]	@ (8001f7c <draw_title+0x41c>)
 8001f20:	f006 fa02 	bl	8008328 <siprintf>
			break;
 8001f24:	bf00      	nop
	}
	LOG_DBG("Line 1 [%s]", line_1_buf);
 8001f26:	f107 0320 	add.w	r3, r7, #32
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4814      	ldr	r0, [pc, #80]	@ (8001f80 <draw_title+0x420>)
 8001f2e:	f7fe fded 	bl	8000b0c <Printf>
	LOG_DBG("Line 2 [%s]", line_2_buf);
 8001f32:	f107 030c 	add.w	r3, r7, #12
 8001f36:	4619      	mov	r1, r3
 8001f38:	4812      	ldr	r0, [pc, #72]	@ (8001f84 <draw_title+0x424>)
 8001f3a:	f7fe fde7 	bl	8000b0c <Printf>
	LCD_LOCATE(1,1);
 8001f3e:	2101      	movs	r1, #1
 8001f40:	2001      	movs	r0, #1
 8001f42:	f7ff fced 	bl	8001920 <LCD_LOCATE>
	LCD_printstring(line_1_buf);
 8001f46:	f107 0320 	add.w	r3, r7, #32
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff fcbc 	bl	80018c8 <LCD_printstring>
	LCD_LOCATE(2,1);
 8001f50:	2101      	movs	r1, #1
 8001f52:	2002      	movs	r0, #2
 8001f54:	f7ff fce4 	bl	8001920 <LCD_LOCATE>
	LCD_printstring(line_2_buf);
 8001f58:	f107 030c 	add.w	r3, r7, #12
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff fcb3 	bl	80018c8 <LCD_printstring>
	LOG_INF("End Draw title\r\n");
 8001f62:	4809      	ldr	r0, [pc, #36]	@ (8001f88 <draw_title+0x428>)
 8001f64:	f7fe fdd2 	bl	8000b0c <Printf>
}
 8001f68:	bf00      	nop
 8001f6a:	373c      	adds	r7, #60	@ 0x3c
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd90      	pop	{r4, r7, pc}
 8001f70:	20000c1c 	.word	0x20000c1c
 8001f74:	cccccccd 	.word	0xcccccccd
 8001f78:	08009560 	.word	0x08009560
 8001f7c:	08009578 	.word	0x08009578
 8001f80:	08009590 	.word	0x08009590
 8001f84:	080095a4 	.word	0x080095a4
 8001f88:	080095b8 	.word	0x080095b8

08001f8c <split_num>:

static void split_num(uint16_t value, int8_t *array)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	6039      	str	r1, [r7, #0]
 8001f96:	80fb      	strh	r3, [r7, #6]
	int num = value, i;
 8001f98:	88fb      	ldrh	r3, [r7, #6]
 8001f9a:	60fb      	str	r3, [r7, #12]

	LOG_DBG("Value : %d", value);
 8001f9c:	88fb      	ldrh	r3, [r7, #6]
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	481e      	ldr	r0, [pc, #120]	@ (800201c <split_num+0x90>)
 8001fa2:	f7fe fdb3 	bl	8000b0c <Printf>
	for(i = m_cfg.digit_num; i >= 0; i--){
 8001fa6:	4b1e      	ldr	r3, [pc, #120]	@ (8002020 <split_num+0x94>)
 8001fa8:	79db      	ldrb	r3, [r3, #7]
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	e02d      	b.n	800200a <split_num+0x7e>
		array[i] = -1;  // init value
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	22ff      	movs	r2, #255	@ 0xff
 8001fb6:	701a      	strb	r2, [r3, #0]
		if(num){
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d022      	beq.n	8002004 <split_num+0x78>
			array[i] = num%10;
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	4b18      	ldr	r3, [pc, #96]	@ (8002024 <split_num+0x98>)
 8001fc2:	fb83 1302 	smull	r1, r3, r3, r2
 8001fc6:	1099      	asrs	r1, r3, #2
 8001fc8:	17d3      	asrs	r3, r2, #31
 8001fca:	1ac9      	subs	r1, r1, r3
 8001fcc:	460b      	mov	r3, r1
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	1ad1      	subs	r1, r2, r3
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	4413      	add	r3, r2
 8001fdc:	b24a      	sxtb	r2, r1
 8001fde:	701a      	strb	r2, [r3, #0]
			LOG_DBG("Split num[%d] => %d", i, array[i]);
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f993 3000 	ldrsb.w	r3, [r3]
 8001fea:	461a      	mov	r2, r3
 8001fec:	68b9      	ldr	r1, [r7, #8]
 8001fee:	480e      	ldr	r0, [pc, #56]	@ (8002028 <split_num+0x9c>)
 8001ff0:	f7fe fd8c 	bl	8000b0c <Printf>
			num/=10;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	4a0b      	ldr	r2, [pc, #44]	@ (8002024 <split_num+0x98>)
 8001ff8:	fb82 1203 	smull	r1, r2, r2, r3
 8001ffc:	1092      	asrs	r2, r2, #2
 8001ffe:	17db      	asrs	r3, r3, #31
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	60fb      	str	r3, [r7, #12]
	for(i = m_cfg.digit_num; i >= 0; i--){
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	3b01      	subs	r3, #1
 8002008:	60bb      	str	r3, [r7, #8]
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	2b00      	cmp	r3, #0
 800200e:	dace      	bge.n	8001fae <split_num+0x22>
		}
	}
}
 8002010:	bf00      	nop
 8002012:	bf00      	nop
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	080095d0 	.word	0x080095d0
 8002020:	20000bd0 	.word	0x20000bd0
 8002024:	66666667 	.word	0x66666667
 8002028:	080095e4 	.word	0x080095e4

0800202c <combine_array>:

static uint16_t combine_array(int8_t *array)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
	int i;
	uint16_t value = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	817b      	strh	r3, [r7, #10]
	
	for(i = 0; i <= m_cfg.digit_num; i++){
 8002038:	2300      	movs	r3, #0
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	e017      	b.n	800206e <combine_array+0x42>
		if(array[i] >= 0){
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	4413      	add	r3, r2
 8002044:	f993 3000 	ldrsb.w	r3, [r3]
 8002048:	2b00      	cmp	r3, #0
 800204a:	db0d      	blt.n	8002068 <combine_array+0x3c>
			value = (value*10)+array[i];
 800204c:	897b      	ldrh	r3, [r7, #10]
 800204e:	461a      	mov	r2, r3
 8002050:	0092      	lsls	r2, r2, #2
 8002052:	4413      	add	r3, r2
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	b29a      	uxth	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	440b      	add	r3, r1
 800205e:	f993 3000 	ldrsb.w	r3, [r3]
 8002062:	b29b      	uxth	r3, r3
 8002064:	4413      	add	r3, r2
 8002066:	817b      	strh	r3, [r7, #10]
	for(i = 0; i <= m_cfg.digit_num; i++){
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	3301      	adds	r3, #1
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	4b06      	ldr	r3, [pc, #24]	@ (8002088 <combine_array+0x5c>)
 8002070:	79db      	ldrb	r3, [r3, #7]
 8002072:	461a      	mov	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4293      	cmp	r3, r2
 8002078:	dde1      	ble.n	800203e <combine_array+0x12>
		}
	}
	
	return value;
 800207a:	897b      	ldrh	r3, [r7, #10]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	bc80      	pop	{r7}
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	20000bd0 	.word	0x20000bd0

0800208c <channel_screen_func>:

ScreenID_t channel_screen_func(Screen_param_t param)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	463b      	mov	r3, r7
 8002094:	e883 0003 	stmia.w	r3, {r0, r1}
	LOG_INF("Enter ch screen\r\n");
 8002098:	483e      	ldr	r0, [pc, #248]	@ (8002194 <channel_screen_func+0x108>)
 800209a:	f7fe fd37 	bl	8000b0c <Printf>
	m_cfg.cursor = 0;
 800209e:	4b3e      	ldr	r3, [pc, #248]	@ (8002198 <channel_screen_func+0x10c>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	705a      	strb	r2, [r3, #1]
	switch(param.key){
 80020a4:	887b      	ldrh	r3, [r7, #2]
 80020a6:	2b10      	cmp	r3, #16
 80020a8:	d867      	bhi.n	800217a <channel_screen_func+0xee>
 80020aa:	a201      	add	r2, pc, #4	@ (adr r2, 80020b0 <channel_screen_func+0x24>)
 80020ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b0:	080020f5 	.word	0x080020f5
 80020b4:	0800217b 	.word	0x0800217b
 80020b8:	080020fd 	.word	0x080020fd
 80020bc:	0800217b 	.word	0x0800217b
 80020c0:	08002119 	.word	0x08002119
 80020c4:	0800217b 	.word	0x0800217b
 80020c8:	0800217b 	.word	0x0800217b
 80020cc:	0800217b 	.word	0x0800217b
 80020d0:	0800217b 	.word	0x0800217b
 80020d4:	0800217b 	.word	0x0800217b
 80020d8:	0800217b 	.word	0x0800217b
 80020dc:	0800217b 	.word	0x0800217b
 80020e0:	0800217b 	.word	0x0800217b
 80020e4:	0800217b 	.word	0x0800217b
 80020e8:	0800217b 	.word	0x0800217b
 80020ec:	0800217b 	.word	0x0800217b
 80020f0:	08002135 	.word	0x08002135
		case eKey_Idle:
			m_cfg.cur_ch = eCH1;
 80020f4:	4b28      	ldr	r3, [pc, #160]	@ (8002198 <channel_screen_func+0x10c>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	701a      	strb	r2, [r3, #0]
			break;
 80020fa:	e03f      	b.n	800217c <channel_screen_func+0xf0>
		case eKey_Up:
			m_cfg.cur_ch = (m_cfg.cur_ch + 1) % eCH_MAX;
 80020fc:	4b26      	ldr	r3, [pc, #152]	@ (8002198 <channel_screen_func+0x10c>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	3301      	adds	r3, #1
 8002102:	425a      	negs	r2, r3
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	f002 0207 	and.w	r2, r2, #7
 800210c:	bf58      	it	pl
 800210e:	4253      	negpl	r3, r2
 8002110:	b2da      	uxtb	r2, r3
 8002112:	4b21      	ldr	r3, [pc, #132]	@ (8002198 <channel_screen_func+0x10c>)
 8002114:	701a      	strb	r2, [r3, #0]
			break;
 8002116:	e031      	b.n	800217c <channel_screen_func+0xf0>
		case eKey_Down:
			m_cfg.cur_ch = (m_cfg.cur_ch - 1 + eCH_MAX) % eCH_MAX;
 8002118:	4b1f      	ldr	r3, [pc, #124]	@ (8002198 <channel_screen_func+0x10c>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	3307      	adds	r3, #7
 800211e:	425a      	negs	r2, r3
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	f002 0207 	and.w	r2, r2, #7
 8002128:	bf58      	it	pl
 800212a:	4253      	negpl	r3, r2
 800212c:	b2da      	uxtb	r2, r3
 800212e:	4b1a      	ldr	r3, [pc, #104]	@ (8002198 <channel_screen_func+0x10c>)
 8002130:	701a      	strb	r2, [r3, #0]
			break;
 8002132:	e023      	b.n	800217c <channel_screen_func+0xf0>
		case eKey_SetMode:
			draw_title(eCH_OnTIME);
 8002134:	2001      	movs	r0, #1
 8002136:	f7ff fd13 	bl	8001b60 <draw_title>
			m_cfg.set_time = load_cfg.on_time[m_cfg.cur_ch];
 800213a:	4b17      	ldr	r3, [pc, #92]	@ (8002198 <channel_screen_func+0x10c>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	4a17      	ldr	r2, [pc, #92]	@ (800219c <channel_screen_func+0x110>)
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	4413      	add	r3, r2
 8002144:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8002148:	b29a      	uxth	r2, r3
 800214a:	4b13      	ldr	r3, [pc, #76]	@ (8002198 <channel_screen_func+0x10c>)
 800214c:	811a      	strh	r2, [r3, #8]
			m_cfg.cursor = 13;
 800214e:	4b12      	ldr	r3, [pc, #72]	@ (8002198 <channel_screen_func+0x10c>)
 8002150:	220d      	movs	r2, #13
 8002152:	705a      	strb	r2, [r3, #1]
			m_cfg.digit_num = 4;  // 0 ~ 4
 8002154:	4b10      	ldr	r3, [pc, #64]	@ (8002198 <channel_screen_func+0x10c>)
 8002156:	2204      	movs	r2, #4
 8002158:	71da      	strb	r2, [r3, #7]
			split_num(m_cfg.set_time, m_cfg.input_num);			
 800215a:	4b0f      	ldr	r3, [pc, #60]	@ (8002198 <channel_screen_func+0x10c>)
 800215c:	891b      	ldrh	r3, [r3, #8]
 800215e:	4910      	ldr	r1, [pc, #64]	@ (80021a0 <channel_screen_func+0x114>)
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff ff13 	bl	8001f8c <split_num>
			LCD_LOCATE(2, m_cfg.cursor);
 8002166:	4b0c      	ldr	r3, [pc, #48]	@ (8002198 <channel_screen_func+0x10c>)
 8002168:	785b      	ldrb	r3, [r3, #1]
 800216a:	4619      	mov	r1, r3
 800216c:	2002      	movs	r0, #2
 800216e:	f7ff fbd7 	bl	8001920 <LCD_LOCATE>
			LCD_DISP_CURSOR();
 8002172:	f7ff fbce 	bl	8001912 <LCD_DISP_CURSOR>
			return eSET_ON_TIME_SC;
 8002176:	2302      	movs	r3, #2
 8002178:	e007      	b.n	800218a <channel_screen_func+0xfe>
		default:
			break;
 800217a:	bf00      	nop
	}
	
	draw_title(eCH_CHSelect);	
 800217c:	2000      	movs	r0, #0
 800217e:	f7ff fcef 	bl	8001b60 <draw_title>
	LOG_INF("Return ch scree function\r\n");
 8002182:	4808      	ldr	r0, [pc, #32]	@ (80021a4 <channel_screen_func+0x118>)
 8002184:	f7fe fcc2 	bl	8000b0c <Printf>
	return eMAX_SCREEN_ID;
 8002188:	230f      	movs	r3, #15
}
 800218a:	4618      	mov	r0, r3
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	08009600 	.word	0x08009600
 8002198:	20000bd0 	.word	0x20000bd0
 800219c:	20000c1c 	.word	0x20000c1c
 80021a0:	20000bd2 	.word	0x20000bd2
 80021a4:	0800961c 	.word	0x0800961c

080021a8 <set_changetime_func>:

ScreenID_t set_changetime_func(Screen_param_t param)
{
 80021a8:	b590      	push	{r4, r7, lr}
 80021aa:	b091      	sub	sp, #68	@ 0x44
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	463b      	mov	r3, r7
 80021b0:	e883 0003 	stmia.w	r3, {r0, r1}
	char line_1_buf[LCD_PRINT_MAX], line_2_buf[LCD_PRINT_MAX];
	ScreenID_t ret_sc = param.sc_id;
 80021b4:	783b      	ldrb	r3, [r7, #0]
 80021b6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t old_cursor = m_cfg.cursor;
 80021ba:	4baa      	ldr	r3, [pc, #680]	@ (8002464 <set_changetime_func+0x2bc>)
 80021bc:	785b      	ldrb	r3, [r3, #1]
 80021be:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t digit_idx = (m_cfg.cursor - 9);
 80021c2:	4ba8      	ldr	r3, [pc, #672]	@ (8002464 <set_changetime_func+0x2bc>)
 80021c4:	785b      	ldrb	r3, [r3, #1]
 80021c6:	3b09      	subs	r3, #9
 80021c8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	uint8_t change_value = 0, channel = m_cfg.cur_ch;
 80021cc:	2300      	movs	r3, #0
 80021ce:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 80021d2:	4ba4      	ldr	r3, [pc, #656]	@ (8002464 <set_changetime_func+0x2bc>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	BackEnd_Cmd_t cmd;
	uint32_t set_time;
	
	switch(param.key){
 80021da:	887b      	ldrh	r3, [r7, #2]
 80021dc:	3b01      	subs	r3, #1
 80021de:	2b0b      	cmp	r3, #11
 80021e0:	f200 80f3 	bhi.w	80023ca <set_changetime_func+0x222>
 80021e4:	a201      	add	r2, pc, #4	@ (adr r2, 80021ec <set_changetime_func+0x44>)
 80021e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ea:	bf00      	nop
 80021ec:	080022b9 	.word	0x080022b9
 80021f0:	0800221d 	.word	0x0800221d
 80021f4:	080023cb 	.word	0x080023cb
 80021f8:	08002251 	.word	0x08002251
 80021fc:	080023cb 	.word	0x080023cb
 8002200:	080023cb 	.word	0x080023cb
 8002204:	080023cb 	.word	0x080023cb
 8002208:	08002353 	.word	0x08002353
 800220c:	080023cb 	.word	0x080023cb
 8002210:	08002285 	.word	0x08002285
 8002214:	080023cb 	.word	0x080023cb
 8002218:	0800229f 	.word	0x0800229f
		case eKey_Up:
			if(m_cfg.input_num[digit_idx]++ >= 9){
 800221c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002220:	4a90      	ldr	r2, [pc, #576]	@ (8002464 <set_changetime_func+0x2bc>)
 8002222:	441a      	add	r2, r3
 8002224:	f992 2002 	ldrsb.w	r2, [r2, #2]
 8002228:	b2d1      	uxtb	r1, r2
 800222a:	3101      	adds	r1, #1
 800222c:	b2c9      	uxtb	r1, r1
 800222e:	b248      	sxtb	r0, r1
 8002230:	498c      	ldr	r1, [pc, #560]	@ (8002464 <set_changetime_func+0x2bc>)
 8002232:	440b      	add	r3, r1
 8002234:	4601      	mov	r1, r0
 8002236:	7099      	strb	r1, [r3, #2]
 8002238:	2a08      	cmp	r2, #8
 800223a:	dd05      	ble.n	8002248 <set_changetime_func+0xa0>
				m_cfg.input_num[digit_idx] = 0;
 800223c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002240:	4a88      	ldr	r2, [pc, #544]	@ (8002464 <set_changetime_func+0x2bc>)
 8002242:	4413      	add	r3, r2
 8002244:	2200      	movs	r2, #0
 8002246:	709a      	strb	r2, [r3, #2]
			}
			change_value=1;
 8002248:	2301      	movs	r3, #1
 800224a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
			break;
 800224e:	e0bc      	b.n	80023ca <set_changetime_func+0x222>
		case eKey_Down:			
			if(m_cfg.input_num[digit_idx]-- <= 0){
 8002250:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002254:	4a83      	ldr	r2, [pc, #524]	@ (8002464 <set_changetime_func+0x2bc>)
 8002256:	441a      	add	r2, r3
 8002258:	f992 2002 	ldrsb.w	r2, [r2, #2]
 800225c:	b2d1      	uxtb	r1, r2
 800225e:	3901      	subs	r1, #1
 8002260:	b2c9      	uxtb	r1, r1
 8002262:	b248      	sxtb	r0, r1
 8002264:	497f      	ldr	r1, [pc, #508]	@ (8002464 <set_changetime_func+0x2bc>)
 8002266:	440b      	add	r3, r1
 8002268:	4601      	mov	r1, r0
 800226a:	7099      	strb	r1, [r3, #2]
 800226c:	2a00      	cmp	r2, #0
 800226e:	dc05      	bgt.n	800227c <set_changetime_func+0xd4>
				m_cfg.input_num[digit_idx] = 9;
 8002270:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002274:	4a7b      	ldr	r2, [pc, #492]	@ (8002464 <set_changetime_func+0x2bc>)
 8002276:	4413      	add	r3, r2
 8002278:	2209      	movs	r2, #9
 800227a:	709a      	strb	r2, [r3, #2]
			}
			change_value=1;
 800227c:	2301      	movs	r3, #1
 800227e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
			break;
 8002282:	e0a2      	b.n	80023ca <set_changetime_func+0x222>
		case eKey_CursorUp:
			if(m_cfg.cursor-- <= 9){
 8002284:	4b77      	ldr	r3, [pc, #476]	@ (8002464 <set_changetime_func+0x2bc>)
 8002286:	785b      	ldrb	r3, [r3, #1]
 8002288:	1e5a      	subs	r2, r3, #1
 800228a:	b2d1      	uxtb	r1, r2
 800228c:	4a75      	ldr	r2, [pc, #468]	@ (8002464 <set_changetime_func+0x2bc>)
 800228e:	7051      	strb	r1, [r2, #1]
 8002290:	2b09      	cmp	r3, #9
 8002292:	f200 8097 	bhi.w	80023c4 <set_changetime_func+0x21c>
				m_cfg.cursor = 13;
 8002296:	4b73      	ldr	r3, [pc, #460]	@ (8002464 <set_changetime_func+0x2bc>)
 8002298:	220d      	movs	r2, #13
 800229a:	705a      	strb	r2, [r3, #1]
			}
			break;
 800229c:	e092      	b.n	80023c4 <set_changetime_func+0x21c>
		case eKey_CursorDown:
			if(m_cfg.cursor++ >= 13){
 800229e:	4b71      	ldr	r3, [pc, #452]	@ (8002464 <set_changetime_func+0x2bc>)
 80022a0:	785b      	ldrb	r3, [r3, #1]
 80022a2:	1c5a      	adds	r2, r3, #1
 80022a4:	b2d1      	uxtb	r1, r2
 80022a6:	4a6f      	ldr	r2, [pc, #444]	@ (8002464 <set_changetime_func+0x2bc>)
 80022a8:	7051      	strb	r1, [r2, #1]
 80022aa:	2b0c      	cmp	r3, #12
 80022ac:	f240 808c 	bls.w	80023c8 <set_changetime_func+0x220>
				m_cfg.cursor = 9;
 80022b0:	4b6c      	ldr	r3, [pc, #432]	@ (8002464 <set_changetime_func+0x2bc>)
 80022b2:	2209      	movs	r2, #9
 80022b4:	705a      	strb	r2, [r3, #1]
			}		
			break;
 80022b6:	e087      	b.n	80023c8 <set_changetime_func+0x220>
		case eKey_Enter:
			if(param.sc_id == eSET_ON_TIME_SC){
 80022b8:	783b      	ldrb	r3, [r7, #0]
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d119      	bne.n	80022f2 <set_changetime_func+0x14a>
				load_cfg.on_time[channel] = combine_array(m_cfg.input_num);
 80022be:	f897 4035 	ldrb.w	r4, [r7, #53]	@ 0x35
 80022c2:	4869      	ldr	r0, [pc, #420]	@ (8002468 <set_changetime_func+0x2c0>)
 80022c4:	f7ff feb2 	bl	800202c <combine_array>
 80022c8:	4603      	mov	r3, r0
 80022ca:	4619      	mov	r1, r3
 80022cc:	4a67      	ldr	r2, [pc, #412]	@ (800246c <set_changetime_func+0x2c4>)
 80022ce:	0063      	lsls	r3, r4, #1
 80022d0:	4413      	add	r3, r2
 80022d2:	460a      	mov	r2, r1
 80022d4:	f8a3 2007 	strh.w	r2, [r3, #7]
				cmd = eCMD_Ontime;
 80022d8:	23b2      	movs	r3, #178	@ 0xb2
 80022da:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
				set_time = (uint32_t)load_cfg.on_time[channel];
 80022de:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80022e2:	4a62      	ldr	r2, [pc, #392]	@ (800246c <set_changetime_func+0x2c4>)
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	4413      	add	r3, r2
 80022e8:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80022f0:	e01b      	b.n	800232a <set_changetime_func+0x182>
			}else{
				load_cfg.delay_time[channel] = combine_array(m_cfg.input_num);
 80022f2:	f897 4035 	ldrb.w	r4, [r7, #53]	@ 0x35
 80022f6:	485c      	ldr	r0, [pc, #368]	@ (8002468 <set_changetime_func+0x2c0>)
 80022f8:	f7ff fe98 	bl	800202c <combine_array>
 80022fc:	4603      	mov	r3, r0
 80022fe:	4619      	mov	r1, r3
 8002300:	4a5a      	ldr	r2, [pc, #360]	@ (800246c <set_changetime_func+0x2c4>)
 8002302:	f104 0308 	add.w	r3, r4, #8
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	4413      	add	r3, r2
 800230a:	460a      	mov	r2, r1
 800230c:	f8a3 2007 	strh.w	r2, [r3, #7]
				cmd = eCMD_Delaytime;
 8002310:	23b3      	movs	r3, #179	@ 0xb3
 8002312:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
				set_time = (uint32_t)load_cfg.delay_time[channel];
 8002316:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800231a:	4a54      	ldr	r2, [pc, #336]	@ (800246c <set_changetime_func+0x2c4>)
 800231c:	3308      	adds	r3, #8
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	4413      	add	r3, r2
 8002322:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8002326:	b29b      	uxth	r3, r3
 8002328:	63bb      	str	r3, [r7, #56]	@ 0x38
			}
			if(save_data() != eMAX_SCREEN_ID){
 800232a:	f000 f8a9 	bl	8002480 <save_data>
 800232e:	4603      	mov	r3, r0
 8002330:	2b0f      	cmp	r3, #15
 8002332:	d005      	beq.n	8002340 <set_changetime_func+0x198>
				ret_sc = eERROR_SC;
 8002334:	2310      	movs	r3, #16
 8002336:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				return ret_sc;
 800233a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800233e:	e08c      	b.n	800245a <set_changetime_func+0x2b2>
			}else{
				send_cmd_2_backend(cmd, channel, set_time);
 8002340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002342:	b29a      	uxth	r2, r3
 8002344:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8002348:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff fbaf 	bl	8001ab0 <send_cmd_2_backend>
			}
		case eKey_Mode:
			if(param.sc_id == eSET_ON_TIME_SC){
 8002352:	783b      	ldrb	r3, [r7, #0]
 8002354:	2b02      	cmp	r3, #2
 8002356:	d123      	bne.n	80023a0 <set_changetime_func+0x1f8>
				draw_title(eCH_DelayTIME);
 8002358:	2002      	movs	r0, #2
 800235a:	f7ff fc01 	bl	8001b60 <draw_title>
				ret_sc = eSET_DELAY_TIME_SC;
 800235e:	2303      	movs	r3, #3
 8002360:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				m_cfg.set_time = load_cfg.delay_time[channel];
 8002364:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002368:	4a40      	ldr	r2, [pc, #256]	@ (800246c <set_changetime_func+0x2c4>)
 800236a:	3308      	adds	r3, #8
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	4413      	add	r3, r2
 8002370:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8002374:	b29a      	uxth	r2, r3
 8002376:	4b3b      	ldr	r3, [pc, #236]	@ (8002464 <set_changetime_func+0x2bc>)
 8002378:	811a      	strh	r2, [r3, #8]
				m_cfg.cursor = 13;
 800237a:	4b3a      	ldr	r3, [pc, #232]	@ (8002464 <set_changetime_func+0x2bc>)
 800237c:	220d      	movs	r2, #13
 800237e:	705a      	strb	r2, [r3, #1]
				m_cfg.digit_num = 4;  // 0 ~ 4
 8002380:	4b38      	ldr	r3, [pc, #224]	@ (8002464 <set_changetime_func+0x2bc>)
 8002382:	2204      	movs	r2, #4
 8002384:	71da      	strb	r2, [r3, #7]
				split_num(m_cfg.set_time, m_cfg.input_num);			
 8002386:	4b37      	ldr	r3, [pc, #220]	@ (8002464 <set_changetime_func+0x2bc>)
 8002388:	891b      	ldrh	r3, [r3, #8]
 800238a:	4937      	ldr	r1, [pc, #220]	@ (8002468 <set_changetime_func+0x2c0>)
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff fdfd 	bl	8001f8c <split_num>
				LCD_LOCATE(2, m_cfg.cursor);
 8002392:	4b34      	ldr	r3, [pc, #208]	@ (8002464 <set_changetime_func+0x2bc>)
 8002394:	785b      	ldrb	r3, [r3, #1]
 8002396:	4619      	mov	r1, r3
 8002398:	2002      	movs	r0, #2
 800239a:	f7ff fac1 	bl	8001920 <LCD_LOCATE>
				m_cfg.blink_row = 2;
				m_cfg.blink = 0;
				ret_sc = eSET_TRIGGER_SC;
				LCD_DISP_ON(); // Cursor off
			}
			break;
 800239e:	e014      	b.n	80023ca <set_changetime_func+0x222>
				draw_title(eCH_TriggerSet);
 80023a0:	2003      	movs	r0, #3
 80023a2:	f7ff fbdd 	bl	8001b60 <draw_title>
				m_cfg.enable_blink = 1;
 80023a6:	4b2f      	ldr	r3, [pc, #188]	@ (8002464 <set_changetime_func+0x2bc>)
 80023a8:	2201      	movs	r2, #1
 80023aa:	729a      	strb	r2, [r3, #10]
				m_cfg.blink_row = 2;
 80023ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002464 <set_changetime_func+0x2bc>)
 80023ae:	2202      	movs	r2, #2
 80023b0:	731a      	strb	r2, [r3, #12]
				m_cfg.blink = 0;
 80023b2:	4b2c      	ldr	r3, [pc, #176]	@ (8002464 <set_changetime_func+0x2bc>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	72da      	strb	r2, [r3, #11]
				ret_sc = eSET_TRIGGER_SC;
 80023b8:	2304      	movs	r3, #4
 80023ba:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				LCD_DISP_ON(); // Cursor off
 80023be:	f7ff faa1 	bl	8001904 <LCD_DISP_ON>
			break;
 80023c2:	e002      	b.n	80023ca <set_changetime_func+0x222>
			break;
 80023c4:	bf00      	nop
 80023c6:	e000      	b.n	80023ca <set_changetime_func+0x222>
			break;
 80023c8:	bf00      	nop
	}

	if(change_value){
 80023ca:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d035      	beq.n	800243e <set_changetime_func+0x296>
		LOG_DBG("Change Value Ch[%d] time[%d]", channel+1, combine_array(m_cfg.input_num));
 80023d2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80023d6:	1c5c      	adds	r4, r3, #1
 80023d8:	4823      	ldr	r0, [pc, #140]	@ (8002468 <set_changetime_func+0x2c0>)
 80023da:	f7ff fe27 	bl	800202c <combine_array>
 80023de:	4603      	mov	r3, r0
 80023e0:	461a      	mov	r2, r3
 80023e2:	4621      	mov	r1, r4
 80023e4:	4822      	ldr	r0, [pc, #136]	@ (8002470 <set_changetime_func+0x2c8>)
 80023e6:	f7fe fb91 	bl	8000b0c <Printf>
		if(param.sc_id == eSET_ON_TIME_SC){
 80023ea:	783b      	ldrb	r3, [r7, #0]
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d109      	bne.n	8002404 <set_changetime_func+0x25c>
			sprintf(line_1_buf, "CH%d On-Time     \n", channel+1);
 80023f0:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80023f4:	1c5a      	adds	r2, r3, #1
 80023f6:	f107 0320 	add.w	r3, r7, #32
 80023fa:	491e      	ldr	r1, [pc, #120]	@ (8002474 <set_changetime_func+0x2cc>)
 80023fc:	4618      	mov	r0, r3
 80023fe:	f005 ff93 	bl	8008328 <siprintf>
 8002402:	e008      	b.n	8002416 <set_changetime_func+0x26e>
		}else{
			sprintf(line_1_buf, "CH%d Delay-Time  \n", channel+1);
 8002404:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002408:	1c5a      	adds	r2, r3, #1
 800240a:	f107 0320 	add.w	r3, r7, #32
 800240e:	491a      	ldr	r1, [pc, #104]	@ (8002478 <set_changetime_func+0x2d0>)
 8002410:	4618      	mov	r0, r3
 8002412:	f005 ff89 	bl	8008328 <siprintf>
		}
		sprintf(line_2_buf, "Value : %05d us", combine_array(m_cfg.input_num));
 8002416:	4814      	ldr	r0, [pc, #80]	@ (8002468 <set_changetime_func+0x2c0>)
 8002418:	f7ff fe08 	bl	800202c <combine_array>
 800241c:	4603      	mov	r3, r0
 800241e:	461a      	mov	r2, r3
 8002420:	f107 030c 	add.w	r3, r7, #12
 8002424:	4915      	ldr	r1, [pc, #84]	@ (800247c <set_changetime_func+0x2d4>)
 8002426:	4618      	mov	r0, r3
 8002428:	f005 ff7e 	bl	8008328 <siprintf>
		LCD_LOCATE(2,1);
 800242c:	2101      	movs	r1, #1
 800242e:	2002      	movs	r0, #2
 8002430:	f7ff fa76 	bl	8001920 <LCD_LOCATE>
		LCD_printstring(line_2_buf);
 8002434:	f107 030c 	add.w	r3, r7, #12
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff fa45 	bl	80018c8 <LCD_printstring>
	}
	if(m_cfg.cursor != old_cursor){
 800243e:	4b09      	ldr	r3, [pc, #36]	@ (8002464 <set_changetime_func+0x2bc>)
 8002440:	785b      	ldrb	r3, [r3, #1]
 8002442:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8002446:	429a      	cmp	r2, r3
 8002448:	d005      	beq.n	8002456 <set_changetime_func+0x2ae>
		LCD_LOCATE(2, m_cfg.cursor);
 800244a:	4b06      	ldr	r3, [pc, #24]	@ (8002464 <set_changetime_func+0x2bc>)
 800244c:	785b      	ldrb	r3, [r3, #1]
 800244e:	4619      	mov	r1, r3
 8002450:	2002      	movs	r0, #2
 8002452:	f7ff fa65 	bl	8001920 <LCD_LOCATE>
	}
	return ret_sc;
 8002456:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800245a:	4618      	mov	r0, r3
 800245c:	3744      	adds	r7, #68	@ 0x44
 800245e:	46bd      	mov	sp, r7
 8002460:	bd90      	pop	{r4, r7, pc}
 8002462:	bf00      	nop
 8002464:	20000bd0 	.word	0x20000bd0
 8002468:	20000bd2 	.word	0x20000bd2
 800246c:	20000c1c 	.word	0x20000c1c
 8002470:	08009640 	.word	0x08009640
 8002474:	0800937c 	.word	0x0800937c
 8002478:	080093a0 	.word	0x080093a0
 800247c:	08009664 	.word	0x08009664

08002480 <save_data>:

static ScreenID_t save_data(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
	memcpy(m_app_config, &load_cfg, sizeof(config_t));
 8002484:	4b09      	ldr	r3, [pc, #36]	@ (80024ac <save_data+0x2c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a09      	ldr	r2, [pc, #36]	@ (80024b0 <save_data+0x30>)
 800248a:	4618      	mov	r0, r3
 800248c:	4611      	mov	r1, r2
 800248e:	2347      	movs	r3, #71	@ 0x47
 8002490:	461a      	mov	r2, r3
 8002492:	f006 f839 	bl	8008508 <memcpy>
	if(app_save_config() < 0){
 8002496:	f7fe f8e9 	bl	800066c <app_save_config>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	da01      	bge.n	80024a4 <save_data+0x24>
		return eERROR_SC;
 80024a0:	2310      	movs	r3, #16
 80024a2:	e000      	b.n	80024a6 <save_data+0x26>
	}else{
		//draw_title(eCH_CHSelect);
		return eMAX_SCREEN_ID;
 80024a4:	230f      	movs	r3, #15
	}
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	2000020c 	.word	0x2000020c
 80024b0:	20000c1c 	.word	0x20000c1c

080024b4 <run_remote_mode>:

static void run_remote_mode(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
	send_cmd_2_backend(eCMD_FR_SetRemote, 0, m_cfg.remote_mode);
 80024b8:	4b04      	ldr	r3, [pc, #16]	@ (80024cc <run_remote_mode+0x18>)
 80024ba:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80024be:	461a      	mov	r2, r3
 80024c0:	2100      	movs	r1, #0
 80024c2:	20c0      	movs	r0, #192	@ 0xc0
 80024c4:	f7ff faf4 	bl	8001ab0 <send_cmd_2_backend>
}
 80024c8:	bf00      	nop
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	20000bd0 	.word	0x20000bd0

080024d0 <blink_text_screen_func>:

ScreenID_t blink_text_screen_func(Screen_param_t param)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	463b      	mov	r3, r7
 80024d8:	e883 0003 	stmia.w	r3, {r0, r1}
	ScreenID_t ret_sc = param.sc_id;
 80024dc:	783b      	ldrb	r3, [r7, #0]
 80024de:	73fb      	strb	r3, [r7, #15]
	uint8_t old_value;
	BackEnd_Cmd_t cmd = 0;
 80024e0:	2300      	movs	r3, #0
 80024e2:	737b      	strb	r3, [r7, #13]
	
	if(ret_sc == eSET_TRIGGER_SC){
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	d108      	bne.n	80024fc <blink_text_screen_func+0x2c>
		old_value = load_cfg.edge[m_cfg.cur_ch];
 80024ea:	4b61      	ldr	r3, [pc, #388]	@ (8002670 <blink_text_screen_func+0x1a0>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	461a      	mov	r2, r3
 80024f0:	4b60      	ldr	r3, [pc, #384]	@ (8002674 <blink_text_screen_func+0x1a4>)
 80024f2:	4413      	add	r3, r2
 80024f4:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 80024f8:	73bb      	strb	r3, [r7, #14]
 80024fa:	e002      	b.n	8002502 <blink_text_screen_func+0x32>
	}else{
		old_value = load_cfg.mode;
 80024fc:	4b5d      	ldr	r3, [pc, #372]	@ (8002674 <blink_text_screen_func+0x1a4>)
 80024fe:	791b      	ldrb	r3, [r3, #4]
 8002500:	73bb      	strb	r3, [r7, #14]
	}

	switch(param.key){
 8002502:	887b      	ldrh	r3, [r7, #2]
 8002504:	3b01      	subs	r3, #1
 8002506:	2b0f      	cmp	r3, #15
 8002508:	f200 80aa 	bhi.w	8002660 <blink_text_screen_func+0x190>
 800250c:	a201      	add	r2, pc, #4	@ (adr r2, 8002514 <blink_text_screen_func+0x44>)
 800250e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002512:	bf00      	nop
 8002514:	080025c7 	.word	0x080025c7
 8002518:	08002555 	.word	0x08002555
 800251c:	08002661 	.word	0x08002661
 8002520:	08002555 	.word	0x08002555
 8002524:	08002661 	.word	0x08002661
 8002528:	08002661 	.word	0x08002661
 800252c:	08002661 	.word	0x08002661
 8002530:	08002645 	.word	0x08002645
 8002534:	08002661 	.word	0x08002661
 8002538:	08002661 	.word	0x08002661
 800253c:	08002661 	.word	0x08002661
 8002540:	08002661 	.word	0x08002661
 8002544:	08002661 	.word	0x08002661
 8002548:	08002661 	.word	0x08002661
 800254c:	08002661 	.word	0x08002661
 8002550:	080025e7 	.word	0x080025e7
		case eKey_Up:
		case eKey_Down:
			old_value = ~old_value;
 8002554:	7bbb      	ldrb	r3, [r7, #14]
 8002556:	43db      	mvns	r3, r3
 8002558:	73bb      	strb	r3, [r7, #14]
			if(ret_sc == eSET_TRIGGER_SC){
 800255a:	7bfb      	ldrb	r3, [r7, #15]
 800255c:	2b04      	cmp	r3, #4
 800255e:	d11b      	bne.n	8002598 <blink_text_screen_func+0xc8>
				sprintf(m_cfg.blink_text[0], "Value : %s \n", old_value?"Falling":"Rising");
 8002560:	7bbb      	ldrb	r3, [r7, #14]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <blink_text_screen_func+0x9a>
 8002566:	4b44      	ldr	r3, [pc, #272]	@ (8002678 <blink_text_screen_func+0x1a8>)
 8002568:	e000      	b.n	800256c <blink_text_screen_func+0x9c>
 800256a:	4b44      	ldr	r3, [pc, #272]	@ (800267c <blink_text_screen_func+0x1ac>)
 800256c:	461a      	mov	r2, r3
 800256e:	4944      	ldr	r1, [pc, #272]	@ (8002680 <blink_text_screen_func+0x1b0>)
 8002570:	4844      	ldr	r0, [pc, #272]	@ (8002684 <blink_text_screen_func+0x1b4>)
 8002572:	f005 fed9 	bl	8008328 <siprintf>
				load_cfg.edge[m_cfg.cur_ch] = (old_value)?eFALLING:eRISING;
 8002576:	7bbb      	ldrb	r3, [r7, #14]
 8002578:	2b00      	cmp	r3, #0
 800257a:	bf0c      	ite	eq
 800257c:	2301      	moveq	r3, #1
 800257e:	2300      	movne	r3, #0
 8002580:	b2d9      	uxtb	r1, r3
 8002582:	4b3b      	ldr	r3, [pc, #236]	@ (8002670 <blink_text_screen_func+0x1a0>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	461a      	mov	r2, r3
 8002588:	4b3a      	ldr	r3, [pc, #232]	@ (8002674 <blink_text_screen_func+0x1a4>)
 800258a:	4413      	add	r3, r2
 800258c:	460a      	mov	r2, r1
 800258e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
				cmd = eCMD_InputEdge;
 8002592:	23b8      	movs	r3, #184	@ 0xb8
 8002594:	737b      	strb	r3, [r7, #13]
			}else{
				sprintf(m_cfg.blink_text[0], "      %s     \n", (old_value)?"1 : 1" : "1 : N");
				load_cfg.mode = (old_value)?eONE_ONE:eONE_N;
				cmd = eCMD_OutMode;
			}
			break;			
 8002596:	e066      	b.n	8002666 <blink_text_screen_func+0x196>
				sprintf(m_cfg.blink_text[0], "      %s     \n", (old_value)?"1 : 1" : "1 : N");
 8002598:	7bbb      	ldrb	r3, [r7, #14]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <blink_text_screen_func+0xd2>
 800259e:	4b3a      	ldr	r3, [pc, #232]	@ (8002688 <blink_text_screen_func+0x1b8>)
 80025a0:	e000      	b.n	80025a4 <blink_text_screen_func+0xd4>
 80025a2:	4b3a      	ldr	r3, [pc, #232]	@ (800268c <blink_text_screen_func+0x1bc>)
 80025a4:	461a      	mov	r2, r3
 80025a6:	493a      	ldr	r1, [pc, #232]	@ (8002690 <blink_text_screen_func+0x1c0>)
 80025a8:	4836      	ldr	r0, [pc, #216]	@ (8002684 <blink_text_screen_func+0x1b4>)
 80025aa:	f005 febd 	bl	8008328 <siprintf>
				load_cfg.mode = (old_value)?eONE_ONE:eONE_N;
 80025ae:	7bbb      	ldrb	r3, [r7, #14]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	bf0c      	ite	eq
 80025b4:	2301      	moveq	r3, #1
 80025b6:	2300      	movne	r3, #0
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	461a      	mov	r2, r3
 80025bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002674 <blink_text_screen_func+0x1a4>)
 80025be:	711a      	strb	r2, [r3, #4]
				cmd = eCMD_OutMode;
 80025c0:	23b1      	movs	r3, #177	@ 0xb1
 80025c2:	737b      	strb	r3, [r7, #13]
			break;			
 80025c4:	e04f      	b.n	8002666 <blink_text_screen_func+0x196>
		case eKey_Enter:
			m_cfg.enable_blink = 0;
 80025c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002670 <blink_text_screen_func+0x1a0>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	729a      	strb	r2, [r3, #10]
			send_cmd_2_backend(cmd, m_cfg.cur_ch, old_value);
 80025cc:	4b28      	ldr	r3, [pc, #160]	@ (8002670 <blink_text_screen_func+0x1a0>)
 80025ce:	7819      	ldrb	r1, [r3, #0]
 80025d0:	7bbb      	ldrb	r3, [r7, #14]
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	7b7b      	ldrb	r3, [r7, #13]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff fa6a 	bl	8001ab0 <send_cmd_2_backend>
			ret_sc = save_data();
 80025dc:	f7ff ff50 	bl	8002480 <save_data>
 80025e0:	4603      	mov	r3, r0
 80025e2:	73fb      	strb	r3, [r7, #15]
			break;
 80025e4:	e03f      	b.n	8002666 <blink_text_screen_func+0x196>
		case eKey_SetMode:
			if(ret_sc == eSET_TRIGGER_SC){
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d10f      	bne.n	800260c <blink_text_screen_func+0x13c>
				sprintf(m_cfg.blink_text[0], "Value : %s \n", (old_value)?"Rising":"Falling");
 80025ec:	7bbb      	ldrb	r3, [r7, #14]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <blink_text_screen_func+0x126>
 80025f2:	4b22      	ldr	r3, [pc, #136]	@ (800267c <blink_text_screen_func+0x1ac>)
 80025f4:	e000      	b.n	80025f8 <blink_text_screen_func+0x128>
 80025f6:	4b20      	ldr	r3, [pc, #128]	@ (8002678 <blink_text_screen_func+0x1a8>)
 80025f8:	461a      	mov	r2, r3
 80025fa:	4921      	ldr	r1, [pc, #132]	@ (8002680 <blink_text_screen_func+0x1b0>)
 80025fc:	4821      	ldr	r0, [pc, #132]	@ (8002684 <blink_text_screen_func+0x1b4>)
 80025fe:	f005 fe93 	bl	8008328 <siprintf>
				sprintf(m_cfg.blink_text[1], "Value :         \n");
 8002602:	4924      	ldr	r1, [pc, #144]	@ (8002694 <blink_text_screen_func+0x1c4>)
 8002604:	4824      	ldr	r0, [pc, #144]	@ (8002698 <blink_text_screen_func+0x1c8>)
 8002606:	f005 fe8f 	bl	8008328 <siprintf>
 800260a:	e011      	b.n	8002630 <blink_text_screen_func+0x160>
			}else{
				sprintf(m_cfg.blink_text[0], "      %s     \n", (old_value)?"1 : N" : "1 : 1");
 800260c:	7bbb      	ldrb	r3, [r7, #14]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <blink_text_screen_func+0x146>
 8002612:	4b1e      	ldr	r3, [pc, #120]	@ (800268c <blink_text_screen_func+0x1bc>)
 8002614:	e000      	b.n	8002618 <blink_text_screen_func+0x148>
 8002616:	4b1c      	ldr	r3, [pc, #112]	@ (8002688 <blink_text_screen_func+0x1b8>)
 8002618:	461a      	mov	r2, r3
 800261a:	491d      	ldr	r1, [pc, #116]	@ (8002690 <blink_text_screen_func+0x1c0>)
 800261c:	4819      	ldr	r0, [pc, #100]	@ (8002684 <blink_text_screen_func+0x1b4>)
 800261e:	f005 fe83 	bl	8008328 <siprintf>
				sprintf(m_cfg.blink_text[1], "                \n");
 8002622:	491e      	ldr	r1, [pc, #120]	@ (800269c <blink_text_screen_func+0x1cc>)
 8002624:	481c      	ldr	r0, [pc, #112]	@ (8002698 <blink_text_screen_func+0x1c8>)
 8002626:	f005 fe7f 	bl	8008328 <siprintf>
				draw_title(eSET_OPMODE);
 800262a:	2005      	movs	r0, #5
 800262c:	f7ff fa98 	bl	8001b60 <draw_title>
			}
			m_cfg.blink = 0;
 8002630:	4b0f      	ldr	r3, [pc, #60]	@ (8002670 <blink_text_screen_func+0x1a0>)
 8002632:	2200      	movs	r2, #0
 8002634:	72da      	strb	r2, [r3, #11]
			m_cfg.blink_row = 2;
 8002636:	4b0e      	ldr	r3, [pc, #56]	@ (8002670 <blink_text_screen_func+0x1a0>)
 8002638:	2202      	movs	r2, #2
 800263a:	731a      	strb	r2, [r3, #12]
			m_cfg.enable_blink = 1;
 800263c:	4b0c      	ldr	r3, [pc, #48]	@ (8002670 <blink_text_screen_func+0x1a0>)
 800263e:	2201      	movs	r2, #1
 8002640:	729a      	strb	r2, [r3, #10]
			break;
 8002642:	e010      	b.n	8002666 <blink_text_screen_func+0x196>
		case eKey_Mode:
			if(ret_sc == eSET_TRIGGER_SC){
 8002644:	7bfb      	ldrb	r3, [r7, #15]
 8002646:	2b04      	cmp	r3, #4
 8002648:	d103      	bne.n	8002652 <blink_text_screen_func+0x182>
				draw_title(eCH_TriggerSet);
 800264a:	2003      	movs	r0, #3
 800264c:	f7ff fa88 	bl	8001b60 <draw_title>
			}else if(ret_sc == eOPMODE_SC){
				draw_title(eSEL_OPMODE);
			}
			break;
 8002650:	e008      	b.n	8002664 <blink_text_screen_func+0x194>
			}else if(ret_sc == eOPMODE_SC){
 8002652:	7bfb      	ldrb	r3, [r7, #15]
 8002654:	2b05      	cmp	r3, #5
 8002656:	d105      	bne.n	8002664 <blink_text_screen_func+0x194>
				draw_title(eSEL_OPMODE);
 8002658:	2004      	movs	r0, #4
 800265a:	f7ff fa81 	bl	8001b60 <draw_title>
			break;
 800265e:	e001      	b.n	8002664 <blink_text_screen_func+0x194>
		default:
			break;
 8002660:	bf00      	nop
 8002662:	e000      	b.n	8002666 <blink_text_screen_func+0x196>
			break;
 8002664:	bf00      	nop
	}	
	
	return ret_sc;
 8002666:	7bfb      	ldrb	r3, [r7, #15]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	20000bd0 	.word	0x20000bd0
 8002674:	20000c1c 	.word	0x20000c1c
 8002678:	080093d0 	.word	0x080093d0
 800267c:	080093c8 	.word	0x080093c8
 8002680:	080093d8 	.word	0x080093d8
 8002684:	20000bdd 	.word	0x20000bdd
 8002688:	08009418 	.word	0x08009418
 800268c:	08009410 	.word	0x08009410
 8002690:	08009420 	.word	0x08009420
 8002694:	08009674 	.word	0x08009674
 8002698:	20000bf1 	.word	0x20000bf1
 800269c:	08009688 	.word	0x08009688

080026a0 <uart_screen_func>:

ScreenID_t uart_screen_func(Screen_param_t param)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	463b      	mov	r3, r7
 80026a8:	e883 0003 	stmia.w	r3, {r0, r1}
	ScreenID_t ret_sc = param.sc_id;
 80026ac:	783b      	ldrb	r3, [r7, #0]
 80026ae:	73fb      	strb	r3, [r7, #15]
	uint8_t old_value = load_cfg.dev_id;
 80026b0:	4b49      	ldr	r3, [pc, #292]	@ (80027d8 <uart_screen_func+0x138>)
 80026b2:	795b      	ldrb	r3, [r3, #5]
 80026b4:	73bb      	strb	r3, [r7, #14]

	switch(param.key){
 80026b6:	887b      	ldrh	r3, [r7, #2]
 80026b8:	3b01      	subs	r3, #1
 80026ba:	2b0f      	cmp	r3, #15
 80026bc:	d877      	bhi.n	80027ae <uart_screen_func+0x10e>
 80026be:	a201      	add	r2, pc, #4	@ (adr r2, 80026c4 <uart_screen_func+0x24>)
 80026c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c4:	08002735 	.word	0x08002735
 80026c8:	08002705 	.word	0x08002705
 80026cc:	080027af 	.word	0x080027af
 80026d0:	0800271d 	.word	0x0800271d
 80026d4:	080027af 	.word	0x080027af
 80026d8:	080027af 	.word	0x080027af
 80026dc:	080027af 	.word	0x080027af
 80026e0:	0800279d 	.word	0x0800279d
 80026e4:	080027af 	.word	0x080027af
 80026e8:	080027af 	.word	0x080027af
 80026ec:	080027af 	.word	0x080027af
 80026f0:	080027af 	.word	0x080027af
 80026f4:	080027af 	.word	0x080027af
 80026f8:	080027af 	.word	0x080027af
 80026fc:	080027af 	.word	0x080027af
 8002700:	08002777 	.word	0x08002777
		case eKey_Up:
			if(load_cfg.dev_id++ > MAX_DEV_ID){
 8002704:	4b34      	ldr	r3, [pc, #208]	@ (80027d8 <uart_screen_func+0x138>)
 8002706:	795b      	ldrb	r3, [r3, #5]
 8002708:	1c5a      	adds	r2, r3, #1
 800270a:	b2d1      	uxtb	r1, r2
 800270c:	4a32      	ldr	r2, [pc, #200]	@ (80027d8 <uart_screen_func+0x138>)
 800270e:	7151      	strb	r1, [r2, #5]
 8002710:	2b0a      	cmp	r3, #10
 8002712:	d94e      	bls.n	80027b2 <uart_screen_func+0x112>
				load_cfg.dev_id = 1;
 8002714:	4b30      	ldr	r3, [pc, #192]	@ (80027d8 <uart_screen_func+0x138>)
 8002716:	2201      	movs	r2, #1
 8002718:	715a      	strb	r2, [r3, #5]
			}			
			break;
 800271a:	e04a      	b.n	80027b2 <uart_screen_func+0x112>
		case eKey_Down:
			if(load_cfg.dev_id-- <= 1){
 800271c:	4b2e      	ldr	r3, [pc, #184]	@ (80027d8 <uart_screen_func+0x138>)
 800271e:	795b      	ldrb	r3, [r3, #5]
 8002720:	1e5a      	subs	r2, r3, #1
 8002722:	b2d1      	uxtb	r1, r2
 8002724:	4a2c      	ldr	r2, [pc, #176]	@ (80027d8 <uart_screen_func+0x138>)
 8002726:	7151      	strb	r1, [r2, #5]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d844      	bhi.n	80027b6 <uart_screen_func+0x116>
				load_cfg.dev_id = MAX_DEV_ID;
 800272c:	4b2a      	ldr	r3, [pc, #168]	@ (80027d8 <uart_screen_func+0x138>)
 800272e:	220a      	movs	r2, #10
 8002730:	715a      	strb	r2, [r3, #5]
			}			
			break;
 8002732:	e040      	b.n	80027b6 <uart_screen_func+0x116>
		case eKey_Enter:
			if(m_cfg.set_mode){
 8002734:	4b29      	ldr	r3, [pc, #164]	@ (80027dc <uart_screen_func+0x13c>)
 8002736:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800273a:	2b00      	cmp	r3, #0
 800273c:	d012      	beq.n	8002764 <uart_screen_func+0xc4>
				LCD_DISP_ON();	// Cursor off
 800273e:	f7ff f8e1 	bl	8001904 <LCD_DISP_ON>
				send_cmd_2_backend(eCMD_FR_SetDevID, 0, m_cfg.remote_mode);
 8002742:	4b26      	ldr	r3, [pc, #152]	@ (80027dc <uart_screen_func+0x13c>)
 8002744:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8002748:	461a      	mov	r2, r3
 800274a:	2100      	movs	r1, #0
 800274c:	20c2      	movs	r0, #194	@ 0xc2
 800274e:	f7ff f9af 	bl	8001ab0 <send_cmd_2_backend>
				ret_sc = save_data();
 8002752:	f7ff fe95 	bl	8002480 <save_data>
 8002756:	4603      	mov	r3, r0
 8002758:	73fb      	strb	r3, [r7, #15]
				m_cfg.set_mode = 0;
 800275a:	4b20      	ldr	r3, [pc, #128]	@ (80027dc <uart_screen_func+0x13c>)
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
			}else{
				m_cfg.remote_mode = eREMOTE_RS232;
				ret_sc = eREMOTE_SC;
				run_remote_mode();
			}
			break;			
 8002762:	e02b      	b.n	80027bc <uart_screen_func+0x11c>
				m_cfg.remote_mode = eREMOTE_RS232;
 8002764:	4b1d      	ldr	r3, [pc, #116]	@ (80027dc <uart_screen_func+0x13c>)
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
				ret_sc = eREMOTE_SC;
 800276c:	230a      	movs	r3, #10
 800276e:	73fb      	strb	r3, [r7, #15]
				run_remote_mode();
 8002770:	f7ff fea0 	bl	80024b4 <run_remote_mode>
			break;			
 8002774:	e022      	b.n	80027bc <uart_screen_func+0x11c>
		case eKey_SetMode:
			m_cfg.set_mode = 1;
 8002776:	4b19      	ldr	r3, [pc, #100]	@ (80027dc <uart_screen_func+0x13c>)
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
			m_cfg.cursor = 14;
 800277e:	4b17      	ldr	r3, [pc, #92]	@ (80027dc <uart_screen_func+0x13c>)
 8002780:	220e      	movs	r2, #14
 8002782:	705a      	strb	r2, [r3, #1]
			draw_title(eRS_DevID);
 8002784:	2006      	movs	r0, #6
 8002786:	f7ff f9eb 	bl	8001b60 <draw_title>
			LCD_LOCATE(2, m_cfg.cursor);
 800278a:	4b14      	ldr	r3, [pc, #80]	@ (80027dc <uart_screen_func+0x13c>)
 800278c:	785b      	ldrb	r3, [r3, #1]
 800278e:	4619      	mov	r1, r3
 8002790:	2002      	movs	r0, #2
 8002792:	f7ff f8c5 	bl	8001920 <LCD_LOCATE>
			LCD_DISP_CURSOR();  // Cursor on		
 8002796:	f7ff f8bc 	bl	8001912 <LCD_DISP_CURSOR>
			break;
 800279a:	e00f      	b.n	80027bc <uart_screen_func+0x11c>
		case eKey_Mode:
			if(m_cfg.set_mode == 0){
 800279c:	4b0f      	ldr	r3, [pc, #60]	@ (80027dc <uart_screen_func+0x13c>)
 800279e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d109      	bne.n	80027ba <uart_screen_func+0x11a>
				draw_title(eRS_DevID);
 80027a6:	2006      	movs	r0, #6
 80027a8:	f7ff f9da 	bl	8001b60 <draw_title>
			}
			break;
 80027ac:	e005      	b.n	80027ba <uart_screen_func+0x11a>
		default:
			break;
 80027ae:	bf00      	nop
 80027b0:	e004      	b.n	80027bc <uart_screen_func+0x11c>
			break;
 80027b2:	bf00      	nop
 80027b4:	e002      	b.n	80027bc <uart_screen_func+0x11c>
			break;
 80027b6:	bf00      	nop
 80027b8:	e000      	b.n	80027bc <uart_screen_func+0x11c>
			break;
 80027ba:	bf00      	nop
	}
	if(old_value != load_cfg.dev_id){
 80027bc:	4b06      	ldr	r3, [pc, #24]	@ (80027d8 <uart_screen_func+0x138>)
 80027be:	795b      	ldrb	r3, [r3, #5]
 80027c0:	7bba      	ldrb	r2, [r7, #14]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d002      	beq.n	80027cc <uart_screen_func+0x12c>
		draw_title(eRS_DevID);
 80027c6:	2006      	movs	r0, #6
 80027c8:	f7ff f9ca 	bl	8001b60 <draw_title>
	}
	return ret_sc;
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	20000c1c 	.word	0x20000c1c
 80027dc:	20000bd0 	.word	0x20000bd0

080027e0 <check_octet>:

static void check_octet(uint8_t *check_value, uint8_t isUp)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	460b      	mov	r3, r1
 80027ea:	70fb      	strb	r3, [r7, #3]
	uint16_t addr = combine_array((int8_t *)check_value);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7ff fc1d 	bl	800202c <combine_array>
 80027f2:	4603      	mov	r3, r0
 80027f4:	81fb      	strh	r3, [r7, #14]
	uint8_t cur_digit = m_cfg.ip_digit;
 80027f6:	4b13      	ldr	r3, [pc, #76]	@ (8002844 <check_octet+0x64>)
 80027f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80027fc:	737b      	strb	r3, [r7, #13]

	LOG_DBG("isup[%d] Addr[%x] cur_dig[%d]", isUp, addr, cur_digit);
 80027fe:	78f9      	ldrb	r1, [r7, #3]
 8002800:	89fa      	ldrh	r2, [r7, #14]
 8002802:	7b7b      	ldrb	r3, [r7, #13]
 8002804:	4810      	ldr	r0, [pc, #64]	@ (8002848 <check_octet+0x68>)
 8002806:	f7fe f981 	bl	8000b0c <Printf>

	if(addr > 255){
 800280a:	89fb      	ldrh	r3, [r7, #14]
 800280c:	2bff      	cmp	r3, #255	@ 0xff
 800280e:	d914      	bls.n	800283a <check_octet+0x5a>
		if(cur_digit == 0){
 8002810:	7b7b      	ldrb	r3, [r7, #13]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d103      	bne.n	800281e <check_octet+0x3e>
			check_value[0] = 0;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	701a      	strb	r2, [r3, #0]
			}else{ // 29x or 259
				check_value[cur_digit] = 5;
			}
		}
	}	
}
 800281c:	e00d      	b.n	800283a <check_octet+0x5a>
			if(isUp){
 800281e:	78fb      	ldrb	r3, [r7, #3]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d005      	beq.n	8002830 <check_octet+0x50>
				check_value[cur_digit] = 0;
 8002824:	7b7b      	ldrb	r3, [r7, #13]
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	4413      	add	r3, r2
 800282a:	2200      	movs	r2, #0
 800282c:	701a      	strb	r2, [r3, #0]
}
 800282e:	e004      	b.n	800283a <check_octet+0x5a>
				check_value[cur_digit] = 5;
 8002830:	7b7b      	ldrb	r3, [r7, #13]
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	4413      	add	r3, r2
 8002836:	2205      	movs	r2, #5
 8002838:	701a      	strb	r2, [r3, #0]
}
 800283a:	bf00      	nop
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	20000bd0 	.word	0x20000bd0
 8002848:	0800969c 	.word	0x0800969c

0800284c <ip_screen_func>:

ScreenID_t ip_screen_func(Screen_param_t param)
{
 800284c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800284e:	b08f      	sub	sp, #60	@ 0x3c
 8002850:	af02      	add	r7, sp, #8
 8002852:	463b      	mov	r3, r7
 8002854:	e883 0003 	stmia.w	r3, {r0, r1}
	ScreenID_t ret_sc = param.sc_id;	
 8002858:	783b      	ldrb	r3, [r7, #0]
 800285a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t temp_addr[3];
	char line_buf[LCD_PRINT_MAX];
	int i;
	uint8_t is_up = 0;
 800285e:	2300      	movs	r3, #0
 8002860:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t old_cursor = m_cfg.cursor;
 8002864:	4baf      	ldr	r3, [pc, #700]	@ (8002b24 <ip_screen_func+0x2d8>)
 8002866:	785b      	ldrb	r3, [r3, #1]
 8002868:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	
	switch(param.key){
 800286c:	887b      	ldrh	r3, [r7, #2]
 800286e:	3b01      	subs	r3, #1
 8002870:	2b0f      	cmp	r3, #15
 8002872:	f200 81a0 	bhi.w	8002bb6 <ip_screen_func+0x36a>
 8002876:	a201      	add	r2, pc, #4	@ (adr r2, 800287c <ip_screen_func+0x30>)
 8002878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800287c:	08002aa9 	.word	0x08002aa9
 8002880:	080028bd 	.word	0x080028bd
 8002884:	08002bb7 	.word	0x08002bb7
 8002888:	080028bd 	.word	0x080028bd
 800288c:	08002bb7 	.word	0x08002bb7
 8002890:	08002bb7 	.word	0x08002bb7
 8002894:	08002bb7 	.word	0x08002bb7
 8002898:	08002ba5 	.word	0x08002ba5
 800289c:	08002bb7 	.word	0x08002bb7
 80028a0:	080029d1 	.word	0x080029d1
 80028a4:	08002bb7 	.word	0x08002bb7
 80028a8:	08002a3d 	.word	0x08002a3d
 80028ac:	08002bb7 	.word	0x08002bb7
 80028b0:	08002bb7 	.word	0x08002bb7
 80028b4:	08002bb7 	.word	0x08002bb7
 80028b8:	08002b17 	.word	0x08002b17
		case eKey_Up:
		case eKey_Down:
			memcpy(temp_addr, m_cfg.ipaddr[m_cfg.ip_idx],3);
 80028bc:	4b99      	ldr	r3, [pc, #612]	@ (8002b24 <ip_screen_func+0x2d8>)
 80028be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028c2:	461a      	mov	r2, r3
 80028c4:	4613      	mov	r3, r2
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	4413      	add	r3, r2
 80028ca:	3330      	adds	r3, #48	@ 0x30
 80028cc:	4a95      	ldr	r2, [pc, #596]	@ (8002b24 <ip_screen_func+0x2d8>)
 80028ce:	4413      	add	r3, r2
 80028d0:	1d5a      	adds	r2, r3, #5
 80028d2:	f107 0320 	add.w	r3, r7, #32
 80028d6:	8811      	ldrh	r1, [r2, #0]
 80028d8:	7892      	ldrb	r2, [r2, #2]
 80028da:	8019      	strh	r1, [r3, #0]
 80028dc:	709a      	strb	r2, [r3, #2]
			if(param.key == eKey_Up){
 80028de:	887b      	ldrh	r3, [r7, #2]
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d111      	bne.n	8002908 <ip_screen_func+0xbc>
				temp_addr[m_cfg.ip_digit]++;
 80028e4:	4b8f      	ldr	r3, [pc, #572]	@ (8002b24 <ip_screen_func+0x2d8>)
 80028e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80028ea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80028ee:	443a      	add	r2, r7
 80028f0:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80028f4:	3201      	adds	r2, #1
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	3330      	adds	r3, #48	@ 0x30
 80028fa:	443b      	add	r3, r7
 80028fc:	f803 2c10 	strb.w	r2, [r3, #-16]
				is_up = 1;
 8002900:	2301      	movs	r3, #1
 8002902:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002906:	e01f      	b.n	8002948 <ip_screen_func+0xfc>
			}else{
				if(temp_addr[m_cfg.ip_digit] == 0){
 8002908:	4b86      	ldr	r3, [pc, #536]	@ (8002b24 <ip_screen_func+0x2d8>)
 800290a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800290e:	3330      	adds	r3, #48	@ 0x30
 8002910:	443b      	add	r3, r7
 8002912:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d108      	bne.n	800292c <ip_screen_func+0xe0>
					temp_addr[m_cfg.ip_digit] = 9;
 800291a:	4b82      	ldr	r3, [pc, #520]	@ (8002b24 <ip_screen_func+0x2d8>)
 800291c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002920:	3330      	adds	r3, #48	@ 0x30
 8002922:	443b      	add	r3, r7
 8002924:	2209      	movs	r2, #9
 8002926:	f803 2c10 	strb.w	r2, [r3, #-16]
 800292a:	e00d      	b.n	8002948 <ip_screen_func+0xfc>
				}else{
					temp_addr[m_cfg.ip_digit]--;
 800292c:	4b7d      	ldr	r3, [pc, #500]	@ (8002b24 <ip_screen_func+0x2d8>)
 800292e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002932:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8002936:	443a      	add	r2, r7
 8002938:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800293c:	3a01      	subs	r2, #1
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	3330      	adds	r3, #48	@ 0x30
 8002942:	443b      	add	r3, r7
 8002944:	f803 2c10 	strb.w	r2, [r3, #-16]
				}
			}
			check_octet(temp_addr, is_up);
 8002948:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800294c:	f107 0320 	add.w	r3, r7, #32
 8002950:	4611      	mov	r1, r2
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff ff44 	bl	80027e0 <check_octet>
			memcpy(m_cfg.ipaddr[m_cfg.ip_idx], temp_addr, 3);
 8002958:	4b72      	ldr	r3, [pc, #456]	@ (8002b24 <ip_screen_func+0x2d8>)
 800295a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800295e:	461a      	mov	r2, r3
 8002960:	4613      	mov	r3, r2
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	4413      	add	r3, r2
 8002966:	3330      	adds	r3, #48	@ 0x30
 8002968:	4a6e      	ldr	r2, [pc, #440]	@ (8002b24 <ip_screen_func+0x2d8>)
 800296a:	4413      	add	r3, r2
 800296c:	3305      	adds	r3, #5
 800296e:	461a      	mov	r2, r3
 8002970:	f107 0320 	add.w	r3, r7, #32
 8002974:	8819      	ldrh	r1, [r3, #0]
 8002976:	789b      	ldrb	r3, [r3, #2]
 8002978:	8011      	strh	r1, [r2, #0]
 800297a:	7093      	strb	r3, [r2, #2]
			sprintf(line_buf, "%03d.%03d.%03d.%03d ",	(uint8_t)combine_array(m_cfg.ipaddr[0]),
 800297c:	486a      	ldr	r0, [pc, #424]	@ (8002b28 <ip_screen_func+0x2dc>)
 800297e:	f7ff fb55 	bl	800202c <combine_array>
 8002982:	4603      	mov	r3, r0
 8002984:	b2db      	uxtb	r3, r3
 8002986:	461d      	mov	r5, r3
														(uint8_t)combine_array(m_cfg.ipaddr[1]),
 8002988:	4868      	ldr	r0, [pc, #416]	@ (8002b2c <ip_screen_func+0x2e0>)
 800298a:	f7ff fb4f 	bl	800202c <combine_array>
 800298e:	4603      	mov	r3, r0
 8002990:	b2db      	uxtb	r3, r3
			sprintf(line_buf, "%03d.%03d.%03d.%03d ",	(uint8_t)combine_array(m_cfg.ipaddr[0]),
 8002992:	461e      	mov	r6, r3
														(uint8_t)combine_array(m_cfg.ipaddr[2]),
 8002994:	4866      	ldr	r0, [pc, #408]	@ (8002b30 <ip_screen_func+0x2e4>)
 8002996:	f7ff fb49 	bl	800202c <combine_array>
 800299a:	4603      	mov	r3, r0
 800299c:	b2db      	uxtb	r3, r3
			sprintf(line_buf, "%03d.%03d.%03d.%03d ",	(uint8_t)combine_array(m_cfg.ipaddr[0]),
 800299e:	461c      	mov	r4, r3
														(uint8_t)combine_array(m_cfg.ipaddr[3]));
 80029a0:	4864      	ldr	r0, [pc, #400]	@ (8002b34 <ip_screen_func+0x2e8>)
 80029a2:	f7ff fb43 	bl	800202c <combine_array>
 80029a6:	4603      	mov	r3, r0
 80029a8:	b2db      	uxtb	r3, r3
			sprintf(line_buf, "%03d.%03d.%03d.%03d ",	(uint8_t)combine_array(m_cfg.ipaddr[0]),
 80029aa:	f107 000c 	add.w	r0, r7, #12
 80029ae:	9301      	str	r3, [sp, #4]
 80029b0:	9400      	str	r4, [sp, #0]
 80029b2:	4633      	mov	r3, r6
 80029b4:	462a      	mov	r2, r5
 80029b6:	4960      	ldr	r1, [pc, #384]	@ (8002b38 <ip_screen_func+0x2ec>)
 80029b8:	f005 fcb6 	bl	8008328 <siprintf>
			LCD_LOCATE(2,1);
 80029bc:	2101      	movs	r1, #1
 80029be:	2002      	movs	r0, #2
 80029c0:	f7fe ffae 	bl	8001920 <LCD_LOCATE>
			LCD_printstring(line_buf);
 80029c4:	f107 030c 	add.w	r3, r7, #12
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7fe ff7d 	bl	80018c8 <LCD_printstring>
			break;
 80029ce:	e0f9      	b.n	8002bc4 <ip_screen_func+0x378>
		case eKey_CursorUp:
			if(m_cfg.cursor--<=0){
 80029d0:	4b54      	ldr	r3, [pc, #336]	@ (8002b24 <ip_screen_func+0x2d8>)
 80029d2:	785b      	ldrb	r3, [r3, #1]
 80029d4:	1e5a      	subs	r2, r3, #1
 80029d6:	b2d1      	uxtb	r1, r2
 80029d8:	4a52      	ldr	r2, [pc, #328]	@ (8002b24 <ip_screen_func+0x2d8>)
 80029da:	7051      	strb	r1, [r2, #1]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10a      	bne.n	80029f6 <ip_screen_func+0x1aa>
				m_cfg.cursor = 15;
 80029e0:	4b50      	ldr	r3, [pc, #320]	@ (8002b24 <ip_screen_func+0x2d8>)
 80029e2:	220f      	movs	r2, #15
 80029e4:	705a      	strb	r2, [r3, #1]
				m_cfg.ip_idx = 3;
 80029e6:	4b4f      	ldr	r3, [pc, #316]	@ (8002b24 <ip_screen_func+0x2d8>)
 80029e8:	2203      	movs	r2, #3
 80029ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
				m_cfg.ip_digit=2;
 80029ee:	4b4d      	ldr	r3, [pc, #308]	@ (8002b24 <ip_screen_func+0x2d8>)
 80029f0:	2202      	movs	r2, #2
 80029f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
			}
			m_cfg.ip_digit--;
 80029f6:	4b4b      	ldr	r3, [pc, #300]	@ (8002b24 <ip_screen_func+0x2d8>)
 80029f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80029fc:	3b01      	subs	r3, #1
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	4b48      	ldr	r3, [pc, #288]	@ (8002b24 <ip_screen_func+0x2d8>)
 8002a02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
			if(m_cfg.cursor%4 == 0){
 8002a06:	4b47      	ldr	r3, [pc, #284]	@ (8002b24 <ip_screen_func+0x2d8>)
 8002a08:	785b      	ldrb	r3, [r3, #1]
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f040 80d2 	bne.w	8002bba <ip_screen_func+0x36e>
				m_cfg.cursor--;
 8002a16:	4b43      	ldr	r3, [pc, #268]	@ (8002b24 <ip_screen_func+0x2d8>)
 8002a18:	785b      	ldrb	r3, [r3, #1]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	4b41      	ldr	r3, [pc, #260]	@ (8002b24 <ip_screen_func+0x2d8>)
 8002a20:	705a      	strb	r2, [r3, #1]
				m_cfg.ip_idx--;
 8002a22:	4b40      	ldr	r3, [pc, #256]	@ (8002b24 <ip_screen_func+0x2d8>)
 8002a24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	4b3d      	ldr	r3, [pc, #244]	@ (8002b24 <ip_screen_func+0x2d8>)
 8002a2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
				m_cfg.ip_digit=2;
 8002a32:	4b3c      	ldr	r3, [pc, #240]	@ (8002b24 <ip_screen_func+0x2d8>)
 8002a34:	2202      	movs	r2, #2
 8002a36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
			}
			break;
 8002a3a:	e0be      	b.n	8002bba <ip_screen_func+0x36e>
		case eKey_CursorDown:
			if(m_cfg.cursor++>=15){
 8002a3c:	4b39      	ldr	r3, [pc, #228]	@ (8002b24 <ip_screen_func+0x2d8>)
 8002a3e:	785b      	ldrb	r3, [r3, #1]
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	b2d1      	uxtb	r1, r2
 8002a44:	4a37      	ldr	r2, [pc, #220]	@ (8002b24 <ip_screen_func+0x2d8>)
 8002a46:	7051      	strb	r1, [r2, #1]
 8002a48:	2b0e      	cmp	r3, #14
 8002a4a:	d90a      	bls.n	8002a62 <ip_screen_func+0x216>
				m_cfg.cursor = 1;
 8002a4c:	4b35      	ldr	r3, [pc, #212]	@ (8002b24 <ip_screen_func+0x2d8>)
 8002a4e:	2201      	movs	r2, #1
 8002a50:	705a      	strb	r2, [r3, #1]
				m_cfg.ip_idx = 0;
 8002a52:	4b34      	ldr	r3, [pc, #208]	@ (8002b24 <ip_screen_func+0x2d8>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
				m_cfg.ip_digit =0;
 8002a5a:	4b32      	ldr	r3, [pc, #200]	@ (8002b24 <ip_screen_func+0x2d8>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
			}
			m_cfg.ip_digit++;
 8002a62:	4b30      	ldr	r3, [pc, #192]	@ (8002b24 <ip_screen_func+0x2d8>)
 8002a64:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a68:	3301      	adds	r3, #1
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	4b2d      	ldr	r3, [pc, #180]	@ (8002b24 <ip_screen_func+0x2d8>)
 8002a6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
			if(m_cfg.cursor%4 == 0){
 8002a72:	4b2c      	ldr	r3, [pc, #176]	@ (8002b24 <ip_screen_func+0x2d8>)
 8002a74:	785b      	ldrb	r3, [r3, #1]
 8002a76:	f003 0303 	and.w	r3, r3, #3
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f040 809e 	bne.w	8002bbe <ip_screen_func+0x372>
				m_cfg.cursor++;
 8002a82:	4b28      	ldr	r3, [pc, #160]	@ (8002b24 <ip_screen_func+0x2d8>)
 8002a84:	785b      	ldrb	r3, [r3, #1]
 8002a86:	3301      	adds	r3, #1
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	4b26      	ldr	r3, [pc, #152]	@ (8002b24 <ip_screen_func+0x2d8>)
 8002a8c:	705a      	strb	r2, [r3, #1]
				m_cfg.ip_idx++;
 8002a8e:	4b25      	ldr	r3, [pc, #148]	@ (8002b24 <ip_screen_func+0x2d8>)
 8002a90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a94:	3301      	adds	r3, #1
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	4b22      	ldr	r3, [pc, #136]	@ (8002b24 <ip_screen_func+0x2d8>)
 8002a9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
				m_cfg.ip_digit = 0;
 8002a9e:	4b21      	ldr	r3, [pc, #132]	@ (8002b24 <ip_screen_func+0x2d8>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
			}
			break;
 8002aa6:	e08a      	b.n	8002bbe <ip_screen_func+0x372>
		case eKey_Enter:
			if(m_cfg.set_mode){
 8002aa8:	4b1e      	ldr	r3, [pc, #120]	@ (8002b24 <ip_screen_func+0x2d8>)
 8002aaa:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d027      	beq.n	8002b02 <ip_screen_func+0x2b6>
				LCD_DISP_ON();	// Cursor off
 8002ab2:	f7fe ff27 	bl	8001904 <LCD_DISP_ON>
				for(i = 0; i < 4; i++){
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002aba:	e015      	b.n	8002ae8 <ip_screen_func+0x29c>
					load_cfg.ether.ipaddr[i] = combine_array(m_cfg.ipaddr[i]);
 8002abc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002abe:	4613      	mov	r3, r2
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	4413      	add	r3, r2
 8002ac4:	3330      	adds	r3, #48	@ 0x30
 8002ac6:	4a17      	ldr	r2, [pc, #92]	@ (8002b24 <ip_screen_func+0x2d8>)
 8002ac8:	4413      	add	r3, r2
 8002aca:	3305      	adds	r3, #5
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff faad 	bl	800202c <combine_array>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	b2d9      	uxtb	r1, r3
 8002ad6:	4a19      	ldr	r2, [pc, #100]	@ (8002b3c <ip_screen_func+0x2f0>)
 8002ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ada:	4413      	add	r3, r2
 8002adc:	332f      	adds	r3, #47	@ 0x2f
 8002ade:	460a      	mov	r2, r1
 8002ae0:	701a      	strb	r2, [r3, #0]
				for(i = 0; i < 4; i++){
 8002ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aea:	2b03      	cmp	r3, #3
 8002aec:	dde6      	ble.n	8002abc <ip_screen_func+0x270>
				}
				ret_sc = save_data();
 8002aee:	f7ff fcc7 	bl	8002480 <save_data>
 8002af2:	4603      	mov	r3, r0
 8002af4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				m_cfg.set_mode = 0;
 8002af8:	4b0a      	ldr	r3, [pc, #40]	@ (8002b24 <ip_screen_func+0x2d8>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
				//push_event0(EVT_Remote_Ether);
				m_cfg.remote_mode = eREMOTE_ETHER;
				ret_sc = eREMOTE_SC;
				run_remote_mode();
			}
			break;			
 8002b00:	e060      	b.n	8002bc4 <ip_screen_func+0x378>
				m_cfg.remote_mode = eREMOTE_ETHER;
 8002b02:	4b08      	ldr	r3, [pc, #32]	@ (8002b24 <ip_screen_func+0x2d8>)
 8002b04:	2202      	movs	r2, #2
 8002b06:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
				ret_sc = eREMOTE_SC;
 8002b0a:	230a      	movs	r3, #10
 8002b0c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				run_remote_mode();
 8002b10:	f7ff fcd0 	bl	80024b4 <run_remote_mode>
			break;			
 8002b14:	e056      	b.n	8002bc4 <ip_screen_func+0x378>
		case eKey_SetMode:
			m_cfg.digit_num = 2;
 8002b16:	4b03      	ldr	r3, [pc, #12]	@ (8002b24 <ip_screen_func+0x2d8>)
 8002b18:	2202      	movs	r2, #2
 8002b1a:	71da      	strb	r2, [r3, #7]
			for(i = 0; i < 4; i++){
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b20:	e022      	b.n	8002b68 <ip_screen_func+0x31c>
 8002b22:	bf00      	nop
 8002b24:	20000bd0 	.word	0x20000bd0
 8002b28:	20000c05 	.word	0x20000c05
 8002b2c:	20000c08 	.word	0x20000c08
 8002b30:	20000c0b 	.word	0x20000c0b
 8002b34:	20000c0e 	.word	0x20000c0e
 8002b38:	08009490 	.word	0x08009490
 8002b3c:	20000c1c 	.word	0x20000c1c
				split_num(load_cfg.ether.ipaddr[i], m_cfg.ipaddr[i]);
 8002b40:	4a29      	ldr	r2, [pc, #164]	@ (8002be8 <ip_screen_func+0x39c>)
 8002b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b44:	4413      	add	r3, r2
 8002b46:	332f      	adds	r3, #47	@ 0x2f
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b4e:	4613      	mov	r3, r2
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	4413      	add	r3, r2
 8002b54:	3330      	adds	r3, #48	@ 0x30
 8002b56:	4a25      	ldr	r2, [pc, #148]	@ (8002bec <ip_screen_func+0x3a0>)
 8002b58:	4413      	add	r3, r2
 8002b5a:	3305      	adds	r3, #5
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	f7ff fa15 	bl	8001f8c <split_num>
			for(i = 0; i < 4; i++){
 8002b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b64:	3301      	adds	r3, #1
 8002b66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b6a:	2b03      	cmp	r3, #3
 8002b6c:	dde8      	ble.n	8002b40 <ip_screen_func+0x2f4>
			}
			m_cfg.cursor = 15;
 8002b6e:	4b1f      	ldr	r3, [pc, #124]	@ (8002bec <ip_screen_func+0x3a0>)
 8002b70:	220f      	movs	r2, #15
 8002b72:	705a      	strb	r2, [r3, #1]
			m_cfg.ip_idx = 3;
 8002b74:	4b1d      	ldr	r3, [pc, #116]	@ (8002bec <ip_screen_func+0x3a0>)
 8002b76:	2203      	movs	r2, #3
 8002b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			m_cfg.ip_digit = 2;
 8002b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bec <ip_screen_func+0x3a0>)
 8002b7e:	2202      	movs	r2, #2
 8002b80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
			m_cfg.set_mode = 1;
 8002b84:	4b19      	ldr	r3, [pc, #100]	@ (8002bec <ip_screen_func+0x3a0>)
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
			LCD_LOCATE(2, m_cfg.cursor);
 8002b8c:	4b17      	ldr	r3, [pc, #92]	@ (8002bec <ip_screen_func+0x3a0>)
 8002b8e:	785b      	ldrb	r3, [r3, #1]
 8002b90:	4619      	mov	r1, r3
 8002b92:	2002      	movs	r0, #2
 8002b94:	f7fe fec4 	bl	8001920 <LCD_LOCATE>
			LCD_DISP_CURSOR();  // Cursor on		
 8002b98:	f7fe febb 	bl	8001912 <LCD_DISP_CURSOR>
			draw_title(eIP_Set);			
 8002b9c:	2007      	movs	r0, #7
 8002b9e:	f7fe ffdf 	bl	8001b60 <draw_title>
			break;
 8002ba2:	e00f      	b.n	8002bc4 <ip_screen_func+0x378>
		case eKey_Mode:
			if(m_cfg.set_mode == 0){
 8002ba4:	4b11      	ldr	r3, [pc, #68]	@ (8002bec <ip_screen_func+0x3a0>)
 8002ba6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d109      	bne.n	8002bc2 <ip_screen_func+0x376>
				draw_title(eIP_Set);
 8002bae:	2007      	movs	r0, #7
 8002bb0:	f7fe ffd6 	bl	8001b60 <draw_title>
			}
			break;
 8002bb4:	e005      	b.n	8002bc2 <ip_screen_func+0x376>
		default:
			break;
 8002bb6:	bf00      	nop
 8002bb8:	e004      	b.n	8002bc4 <ip_screen_func+0x378>
			break;
 8002bba:	bf00      	nop
 8002bbc:	e002      	b.n	8002bc4 <ip_screen_func+0x378>
			break;
 8002bbe:	bf00      	nop
 8002bc0:	e000      	b.n	8002bc4 <ip_screen_func+0x378>
			break;
 8002bc2:	bf00      	nop
	}

	if(m_cfg.cursor != old_cursor){
 8002bc4:	4b09      	ldr	r3, [pc, #36]	@ (8002bec <ip_screen_func+0x3a0>)
 8002bc6:	785b      	ldrb	r3, [r3, #1]
 8002bc8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d005      	beq.n	8002bdc <ip_screen_func+0x390>
		LCD_LOCATE(2, m_cfg.cursor);
 8002bd0:	4b06      	ldr	r3, [pc, #24]	@ (8002bec <ip_screen_func+0x3a0>)
 8002bd2:	785b      	ldrb	r3, [r3, #1]
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	2002      	movs	r0, #2
 8002bd8:	f7fe fea2 	bl	8001920 <LCD_LOCATE>
	}
	return ret_sc;
 8002bdc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3734      	adds	r7, #52	@ 0x34
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002be8:	20000c1c 	.word	0x20000c1c
 8002bec:	20000bd0 	.word	0x20000bd0

08002bf0 <port_screen_func>:
ScreenID_t port_screen_func(Screen_param_t param)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b08a      	sub	sp, #40	@ 0x28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	463b      	mov	r3, r7
 8002bf8:	e883 0003 	stmia.w	r3, {r0, r1}
	ScreenID_t ret_sc = eMAX_SCREEN_ID;
 8002bfc:	230f      	movs	r3, #15
 8002bfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t old_cursor = m_cfg.cursor;
 8002c02:	4b97      	ldr	r3, [pc, #604]	@ (8002e60 <port_screen_func+0x270>)
 8002c04:	785b      	ldrb	r3, [r3, #1]
 8002c06:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	uint8_t temp_port[5];
	char line_buf[LCD_PRINT_MAX];
	
	switch(param.key){
 8002c0a:	887b      	ldrh	r3, [r7, #2]
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	2b0f      	cmp	r3, #15
 8002c10:	f200 8113 	bhi.w	8002e3a <port_screen_func+0x24a>
 8002c14:	a201      	add	r2, pc, #4	@ (adr r2, 8002c1c <port_screen_func+0x2c>)
 8002c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c1a:	bf00      	nop
 8002c1c:	08002d9f 	.word	0x08002d9f
 8002c20:	08002c5d 	.word	0x08002c5d
 8002c24:	08002e3b 	.word	0x08002e3b
 8002c28:	08002c5d 	.word	0x08002c5d
 8002c2c:	08002e3b 	.word	0x08002e3b
 8002c30:	08002e3b 	.word	0x08002e3b
 8002c34:	08002e3b 	.word	0x08002e3b
 8002c38:	08002e29 	.word	0x08002e29
 8002c3c:	08002e3b 	.word	0x08002e3b
 8002c40:	08002d3b 	.word	0x08002d3b
 8002c44:	08002e3b 	.word	0x08002e3b
 8002c48:	08002d6d 	.word	0x08002d6d
 8002c4c:	08002e3b 	.word	0x08002e3b
 8002c50:	08002e3b 	.word	0x08002e3b
 8002c54:	08002e3b 	.word	0x08002e3b
 8002c58:	08002de5 	.word	0x08002de5
		case eKey_Up:
		case eKey_Down:
			memcpy(temp_port, m_cfg.port, 5);
 8002c5c:	4a80      	ldr	r2, [pc, #512]	@ (8002e60 <port_screen_func+0x270>)
 8002c5e:	f107 0320 	add.w	r3, r7, #32
 8002c62:	3243      	adds	r2, #67	@ 0x43
 8002c64:	6810      	ldr	r0, [r2, #0]
 8002c66:	6018      	str	r0, [r3, #0]
 8002c68:	7912      	ldrb	r2, [r2, #4]
 8002c6a:	711a      	strb	r2, [r3, #4]
			if(param.key == eKey_Up){
 8002c6c:	887b      	ldrh	r3, [r7, #2]
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d120      	bne.n	8002cb4 <port_screen_func+0xc4>
				if(temp_port[m_cfg.ip_digit] == 9){
 8002c72:	4b7b      	ldr	r3, [pc, #492]	@ (8002e60 <port_screen_func+0x270>)
 8002c74:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c78:	3328      	adds	r3, #40	@ 0x28
 8002c7a:	443b      	add	r3, r7
 8002c7c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8002c80:	2b09      	cmp	r3, #9
 8002c82:	d108      	bne.n	8002c96 <port_screen_func+0xa6>
					temp_port[m_cfg.ip_digit] = 0;
 8002c84:	4b76      	ldr	r3, [pc, #472]	@ (8002e60 <port_screen_func+0x270>)
 8002c86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c8a:	3328      	adds	r3, #40	@ 0x28
 8002c8c:	443b      	add	r3, r7
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002c94:	e02e      	b.n	8002cf4 <port_screen_func+0x104>
				}else{
					temp_port[m_cfg.ip_digit]++;
 8002c96:	4b72      	ldr	r3, [pc, #456]	@ (8002e60 <port_screen_func+0x270>)
 8002c98:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c9c:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8002ca0:	443a      	add	r2, r7
 8002ca2:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8002ca6:	3201      	adds	r2, #1
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	3328      	adds	r3, #40	@ 0x28
 8002cac:	443b      	add	r3, r7
 8002cae:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002cb2:	e01f      	b.n	8002cf4 <port_screen_func+0x104>
				}
			}else{
				if(temp_port[m_cfg.ip_digit] == 0){
 8002cb4:	4b6a      	ldr	r3, [pc, #424]	@ (8002e60 <port_screen_func+0x270>)
 8002cb6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002cba:	3328      	adds	r3, #40	@ 0x28
 8002cbc:	443b      	add	r3, r7
 8002cbe:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d108      	bne.n	8002cd8 <port_screen_func+0xe8>
					temp_port[m_cfg.ip_digit] = 9;
 8002cc6:	4b66      	ldr	r3, [pc, #408]	@ (8002e60 <port_screen_func+0x270>)
 8002cc8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ccc:	3328      	adds	r3, #40	@ 0x28
 8002cce:	443b      	add	r3, r7
 8002cd0:	2209      	movs	r2, #9
 8002cd2:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002cd6:	e00d      	b.n	8002cf4 <port_screen_func+0x104>
				}else{
					temp_port[m_cfg.ip_digit]--;
 8002cd8:	4b61      	ldr	r3, [pc, #388]	@ (8002e60 <port_screen_func+0x270>)
 8002cda:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002cde:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8002ce2:	443a      	add	r2, r7
 8002ce4:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8002ce8:	3a01      	subs	r2, #1
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	3328      	adds	r3, #40	@ 0x28
 8002cee:	443b      	add	r3, r7
 8002cf0:	f803 2c08 	strb.w	r2, [r3, #-8]
				}
			}
			memcpy(m_cfg.port, temp_port, 5);
 8002cf4:	4b5a      	ldr	r3, [pc, #360]	@ (8002e60 <port_screen_func+0x270>)
 8002cf6:	3343      	adds	r3, #67	@ 0x43
 8002cf8:	f107 0220 	add.w	r2, r7, #32
 8002cfc:	6810      	ldr	r0, [r2, #0]
 8002cfe:	6018      	str	r0, [r3, #0]
 8002d00:	7912      	ldrb	r2, [r2, #4]
 8002d02:	711a      	strb	r2, [r3, #4]
			sprintf(line_buf, "Port : %05d    ", combine_array(m_cfg.port));
 8002d04:	4857      	ldr	r0, [pc, #348]	@ (8002e64 <port_screen_func+0x274>)
 8002d06:	f7ff f991 	bl	800202c <combine_array>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	f107 030c 	add.w	r3, r7, #12
 8002d12:	4955      	ldr	r1, [pc, #340]	@ (8002e68 <port_screen_func+0x278>)
 8002d14:	4618      	mov	r0, r3
 8002d16:	f005 fb07 	bl	8008328 <siprintf>
			LCD_LOCATE(2,1);
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	2002      	movs	r0, #2
 8002d1e:	f7fe fdff 	bl	8001920 <LCD_LOCATE>
			LCD_printstring(line_buf);
 8002d22:	f107 030c 	add.w	r3, r7, #12
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fe fdce 	bl	80018c8 <LCD_printstring>
			LCD_LOCATE(2,m_cfg.cursor);
 8002d2c:	4b4c      	ldr	r3, [pc, #304]	@ (8002e60 <port_screen_func+0x270>)
 8002d2e:	785b      	ldrb	r3, [r3, #1]
 8002d30:	4619      	mov	r1, r3
 8002d32:	2002      	movs	r0, #2
 8002d34:	f7fe fdf4 	bl	8001920 <LCD_LOCATE>
			break;
 8002d38:	e07f      	b.n	8002e3a <port_screen_func+0x24a>
		case eKey_CursorUp:
			if(m_cfg.cursor--<=7){
 8002d3a:	4b49      	ldr	r3, [pc, #292]	@ (8002e60 <port_screen_func+0x270>)
 8002d3c:	785b      	ldrb	r3, [r3, #1]
 8002d3e:	1e5a      	subs	r2, r3, #1
 8002d40:	b2d1      	uxtb	r1, r2
 8002d42:	4a47      	ldr	r2, [pc, #284]	@ (8002e60 <port_screen_func+0x270>)
 8002d44:	7051      	strb	r1, [r2, #1]
 8002d46:	2b07      	cmp	r3, #7
 8002d48:	d807      	bhi.n	8002d5a <port_screen_func+0x16a>
				m_cfg.cursor = 11;
 8002d4a:	4b45      	ldr	r3, [pc, #276]	@ (8002e60 <port_screen_func+0x270>)
 8002d4c:	220b      	movs	r2, #11
 8002d4e:	705a      	strb	r2, [r3, #1]
				m_cfg.ip_digit=4;
 8002d50:	4b43      	ldr	r3, [pc, #268]	@ (8002e60 <port_screen_func+0x270>)
 8002d52:	2204      	movs	r2, #4
 8002d54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
			}else{
				m_cfg.ip_digit--;
			}
			break;
 8002d58:	e06f      	b.n	8002e3a <port_screen_func+0x24a>
				m_cfg.ip_digit--;
 8002d5a:	4b41      	ldr	r3, [pc, #260]	@ (8002e60 <port_screen_func+0x270>)
 8002d5c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d60:	3b01      	subs	r3, #1
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	4b3e      	ldr	r3, [pc, #248]	@ (8002e60 <port_screen_func+0x270>)
 8002d66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
			break;
 8002d6a:	e066      	b.n	8002e3a <port_screen_func+0x24a>
		case eKey_CursorDown:
			if(m_cfg.cursor++>=11){
 8002d6c:	4b3c      	ldr	r3, [pc, #240]	@ (8002e60 <port_screen_func+0x270>)
 8002d6e:	785b      	ldrb	r3, [r3, #1]
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	b2d1      	uxtb	r1, r2
 8002d74:	4a3a      	ldr	r2, [pc, #232]	@ (8002e60 <port_screen_func+0x270>)
 8002d76:	7051      	strb	r1, [r2, #1]
 8002d78:	2b0a      	cmp	r3, #10
 8002d7a:	d907      	bls.n	8002d8c <port_screen_func+0x19c>
				m_cfg.cursor = 7;
 8002d7c:	4b38      	ldr	r3, [pc, #224]	@ (8002e60 <port_screen_func+0x270>)
 8002d7e:	2207      	movs	r2, #7
 8002d80:	705a      	strb	r2, [r3, #1]
				m_cfg.ip_digit =0;
 8002d82:	4b37      	ldr	r3, [pc, #220]	@ (8002e60 <port_screen_func+0x270>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
			}else{
				m_cfg.ip_digit++;
			}
			break;
 8002d8a:	e056      	b.n	8002e3a <port_screen_func+0x24a>
				m_cfg.ip_digit++;
 8002d8c:	4b34      	ldr	r3, [pc, #208]	@ (8002e60 <port_screen_func+0x270>)
 8002d8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d92:	3301      	adds	r3, #1
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	4b32      	ldr	r3, [pc, #200]	@ (8002e60 <port_screen_func+0x270>)
 8002d98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
			break;
 8002d9c:	e04d      	b.n	8002e3a <port_screen_func+0x24a>
		case eKey_Enter:
			if(m_cfg.set_mode){
 8002d9e:	4b30      	ldr	r3, [pc, #192]	@ (8002e60 <port_screen_func+0x270>)
 8002da0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d013      	beq.n	8002dd0 <port_screen_func+0x1e0>
				LCD_DISP_ON();	// Cursor off
 8002da8:	f7fe fdac 	bl	8001904 <LCD_DISP_ON>
				load_cfg.ether.port = combine_array(m_cfg.port);
 8002dac:	482d      	ldr	r0, [pc, #180]	@ (8002e64 <port_screen_func+0x274>)
 8002dae:	f7ff f93d 	bl	800202c <combine_array>
 8002db2:	4603      	mov	r3, r0
 8002db4:	461a      	mov	r2, r3
 8002db6:	4b2d      	ldr	r3, [pc, #180]	@ (8002e6c <port_screen_func+0x27c>)
 8002db8:	f8a3 2033 	strh.w	r2, [r3, #51]	@ 0x33
				ret_sc = save_data();
 8002dbc:	f7ff fb60 	bl	8002480 <save_data>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				m_cfg.set_mode = 0;
 8002dc6:	4b26      	ldr	r3, [pc, #152]	@ (8002e60 <port_screen_func+0x270>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
			}else{
				m_cfg.remote_mode = eREMOTE_ETHER;
				ret_sc = eREMOTE_SC;
				run_remote_mode();
			}
			break;
 8002dce:	e034      	b.n	8002e3a <port_screen_func+0x24a>
				m_cfg.remote_mode = eREMOTE_ETHER;
 8002dd0:	4b23      	ldr	r3, [pc, #140]	@ (8002e60 <port_screen_func+0x270>)
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
				ret_sc = eREMOTE_SC;
 8002dd8:	230a      	movs	r3, #10
 8002dda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				run_remote_mode();
 8002dde:	f7ff fb69 	bl	80024b4 <run_remote_mode>
			break;
 8002de2:	e02a      	b.n	8002e3a <port_screen_func+0x24a>
		case eKey_SetMode:
			m_cfg.set_mode = 1;
 8002de4:	4b1e      	ldr	r3, [pc, #120]	@ (8002e60 <port_screen_func+0x270>)
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
			m_cfg.cursor = 11;
 8002dec:	4b1c      	ldr	r3, [pc, #112]	@ (8002e60 <port_screen_func+0x270>)
 8002dee:	220b      	movs	r2, #11
 8002df0:	705a      	strb	r2, [r3, #1]
			m_cfg.digit_num = 5;
 8002df2:	4b1b      	ldr	r3, [pc, #108]	@ (8002e60 <port_screen_func+0x270>)
 8002df4:	2205      	movs	r2, #5
 8002df6:	71da      	strb	r2, [r3, #7]
			m_cfg.ip_digit = 4;
 8002df8:	4b19      	ldr	r3, [pc, #100]	@ (8002e60 <port_screen_func+0x270>)
 8002dfa:	2204      	movs	r2, #4
 8002dfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
			split_num(load_cfg.ether.port, m_cfg.port);
 8002e00:	4b1a      	ldr	r3, [pc, #104]	@ (8002e6c <port_screen_func+0x27c>)
 8002e02:	f8b3 3033 	ldrh.w	r3, [r3, #51]	@ 0x33
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	4916      	ldr	r1, [pc, #88]	@ (8002e64 <port_screen_func+0x274>)
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff f8be 	bl	8001f8c <split_num>
			LCD_LOCATE(2, m_cfg.cursor);
 8002e10:	4b13      	ldr	r3, [pc, #76]	@ (8002e60 <port_screen_func+0x270>)
 8002e12:	785b      	ldrb	r3, [r3, #1]
 8002e14:	4619      	mov	r1, r3
 8002e16:	2002      	movs	r0, #2
 8002e18:	f7fe fd82 	bl	8001920 <LCD_LOCATE>
			LCD_DISP_CURSOR();  // Cursor on		
 8002e1c:	f7fe fd79 	bl	8001912 <LCD_DISP_CURSOR>
			draw_title(ePORT_Set);					
 8002e20:	2008      	movs	r0, #8
 8002e22:	f7fe fe9d 	bl	8001b60 <draw_title>
			break;
 8002e26:	e008      	b.n	8002e3a <port_screen_func+0x24a>
		case eKey_Mode:
			if(m_cfg.set_mode == 0){
 8002e28:	4b0d      	ldr	r3, [pc, #52]	@ (8002e60 <port_screen_func+0x270>)
 8002e2a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d102      	bne.n	8002e38 <port_screen_func+0x248>
				draw_title(ePORT_Set);
 8002e32:	2008      	movs	r0, #8
 8002e34:	f7fe fe94 	bl	8001b60 <draw_title>
			}
			break;
 8002e38:	bf00      	nop
	}
	
	if(m_cfg.cursor != old_cursor){
 8002e3a:	4b09      	ldr	r3, [pc, #36]	@ (8002e60 <port_screen_func+0x270>)
 8002e3c:	785b      	ldrb	r3, [r3, #1]
 8002e3e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d005      	beq.n	8002e52 <port_screen_func+0x262>
		LCD_LOCATE(2, m_cfg.cursor);
 8002e46:	4b06      	ldr	r3, [pc, #24]	@ (8002e60 <port_screen_func+0x270>)
 8002e48:	785b      	ldrb	r3, [r3, #1]
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	2002      	movs	r0, #2
 8002e4e:	f7fe fd67 	bl	8001920 <LCD_LOCATE>
	}	
	return ret_sc;
 8002e52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3728      	adds	r7, #40	@ 0x28
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000bd0 	.word	0x20000bd0
 8002e64:	20000c13 	.word	0x20000c13
 8002e68:	080096c4 	.word	0x080096c4
 8002e6c:	20000c1c 	.word	0x20000c1c

08002e70 <self_test_screen_func>:

ScreenID_t self_test_screen_func(Screen_param_t param)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	463b      	mov	r3, r7
 8002e78:	e883 0003 	stmia.w	r3, {r0, r1}
	ScreenID_t ret_sc = eMAX_SCREEN_ID;
 8002e7c:	230f      	movs	r3, #15
 8002e7e:	73fb      	strb	r3, [r7, #15]

	switch(param.key){
 8002e80:	887b      	ldrh	r3, [r7, #2]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d005      	beq.n	8002e92 <self_test_screen_func+0x22>
 8002e86:	2b08      	cmp	r3, #8
 8002e88:	d109      	bne.n	8002e9e <self_test_screen_func+0x2e>
		case eKey_Mode:
			draw_title(eSelf_Test);
 8002e8a:	2009      	movs	r0, #9
 8002e8c:	f7fe fe68 	bl	8001b60 <draw_title>
			break;
 8002e90:	e005      	b.n	8002e9e <self_test_screen_func+0x2e>
		case eKey_Enter:
			send_cmd_2_backend(eCMD_FR_SelfTest, 0, 0);
 8002e92:	2200      	movs	r2, #0
 8002e94:	2100      	movs	r1, #0
 8002e96:	20c1      	movs	r0, #193	@ 0xc1
 8002e98:	f7fe fe0a 	bl	8001ab0 <send_cmd_2_backend>
			break;
 8002e9c:	bf00      	nop
	}
	return ret_sc;
 8002e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <remote_screen_func>:

ScreenID_t remote_screen_func(Screen_param_t param)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	463b      	mov	r3, r7
 8002eb0:	e883 0003 	stmia.w	r3, {r0, r1}
	ScreenID_t ret_sc = eMAX_SCREEN_ID;
 8002eb4:	230f      	movs	r3, #15
 8002eb6:	73fb      	strb	r3, [r7, #15]

	switch(param.key){
 8002eb8:	887b      	ldrh	r3, [r7, #2]
 8002eba:	2b08      	cmp	r3, #8
 8002ebc:	d009      	beq.n	8002ed2 <remote_screen_func+0x2a>
 8002ebe:	2b20      	cmp	r3, #32
 8002ec0:	d10b      	bne.n	8002eda <remote_screen_func+0x32>
		case eKey_ExitRemote:
			send_cmd_2_backend(eCMD_CloseRemote, 0, 0);
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	20bb      	movs	r0, #187	@ 0xbb
 8002ec8:	f7fe fdf2 	bl	8001ab0 <send_cmd_2_backend>
			ret_sc = eCHANNEL_SC;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	73fb      	strb	r3, [r7, #15]
			break;
 8002ed0:	e003      	b.n	8002eda <remote_screen_func+0x32>
		case eKey_Mode:
			draw_title(eRemote_Mode);
 8002ed2:	200a      	movs	r0, #10
 8002ed4:	f7fe fe44 	bl	8001b60 <draw_title>
			break;
 8002ed8:	bf00      	nop
	}
	
	return ret_sc;
 8002eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <findCharIndex>:

static int findCharIndex(char c) {
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < CHARSET_LENGTH; i++) {
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60fb      	str	r3, [r7, #12]
 8002ef2:	e00b      	b.n	8002f0c <findCharIndex+0x28>
        if (charSet[i] == c) return i;
 8002ef4:	4a0a      	ldr	r2, [pc, #40]	@ (8002f20 <findCharIndex+0x3c>)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	4413      	add	r3, r2
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	79fa      	ldrb	r2, [r7, #7]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d101      	bne.n	8002f06 <findCharIndex+0x22>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	e006      	b.n	8002f14 <findCharIndex+0x30>
    for (int i = 0; i < CHARSET_LENGTH; i++) {
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2b40      	cmp	r3, #64	@ 0x40
 8002f10:	d9f0      	bls.n	8002ef4 <findCharIndex+0x10>
    }
    return 0;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3714      	adds	r7, #20
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bc80      	pop	{r7}
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	0800975c 	.word	0x0800975c

08002f24 <increaseChar>:

static void increaseChar(char *ch) {
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
    int idx = findCharIndex(*ch);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff ffd7 	bl	8002ee4 <findCharIndex>
 8002f36:	60f8      	str	r0, [r7, #12]

    *ch = charSet[(idx + 1) % CHARSET_LENGTH];
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4b08      	ldr	r3, [pc, #32]	@ (8002f60 <increaseChar+0x3c>)
 8002f40:	fba3 2301 	umull	r2, r3, r3, r1
 8002f44:	099a      	lsrs	r2, r3, #6
 8002f46:	4613      	mov	r3, r2
 8002f48:	019b      	lsls	r3, r3, #6
 8002f4a:	4413      	add	r3, r2
 8002f4c:	1aca      	subs	r2, r1, r3
 8002f4e:	4b05      	ldr	r3, [pc, #20]	@ (8002f64 <increaseChar+0x40>)
 8002f50:	5c9a      	ldrb	r2, [r3, r2]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	701a      	strb	r2, [r3, #0]
}
 8002f56:	bf00      	nop
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	fc0fc0fd 	.word	0xfc0fc0fd
 8002f64:	0800975c 	.word	0x0800975c

08002f68 <user_screen_func>:
    int idx = findCharIndex(*ch);
    *ch = charSet[(idx - 1 + CHARSET_LENGTH) % CHARSET_LENGTH];
}

ScreenID_t user_screen_func(Screen_param_t param)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b088      	sub	sp, #32
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	463b      	mov	r3, r7
 8002f70:	e883 0003 	stmia.w	r3, {r0, r1}
	ScreenID_t ret_sc = eMAX_SCREEN_ID;
 8002f74:	230f      	movs	r3, #15
 8002f76:	77fb      	strb	r3, [r7, #31]
	uint8_t old_cursor = m_cfg.cursor;
 8002f78:	4b45      	ldr	r3, [pc, #276]	@ (8003090 <user_screen_func+0x128>)
 8002f7a:	785b      	ldrb	r3, [r3, #1]
 8002f7c:	77bb      	strb	r3, [r7, #30]
	char line_buf[LCD_PRINT_MAX];

	switch(param.key){
 8002f7e:	887b      	ldrh	r3, [r7, #2]
 8002f80:	3b01      	subs	r3, #1
 8002f82:	2b0b      	cmp	r3, #11
 8002f84:	d874      	bhi.n	8003070 <user_screen_func+0x108>
 8002f86:	a201      	add	r2, pc, #4	@ (adr r2, 8002f8c <user_screen_func+0x24>)
 8002f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f8c:	08003035 	.word	0x08003035
 8002f90:	08002fbd 	.word	0x08002fbd
 8002f94:	0800304b 	.word	0x0800304b
 8002f98:	08002fbd 	.word	0x08002fbd
 8002f9c:	08003071 	.word	0x08003071
 8002fa0:	08003071 	.word	0x08003071
 8002fa4:	08003071 	.word	0x08003071
 8002fa8:	08003071 	.word	0x08003071
 8002fac:	08003071 	.word	0x08003071
 8002fb0:	08002ffd 	.word	0x08002ffd
 8002fb4:	08003071 	.word	0x08003071
 8002fb8:	08003019 	.word	0x08003019
		case eKey_Up:
		case eKey_Down:
			if(eKey_Up){
				increaseChar((char *)&load_cfg.company[m_cfg.cursor]);
 8002fbc:	4b34      	ldr	r3, [pc, #208]	@ (8003090 <user_screen_func+0x128>)
 8002fbe:	785b      	ldrb	r3, [r3, #1]
 8002fc0:	3330      	adds	r3, #48	@ 0x30
 8002fc2:	4a34      	ldr	r2, [pc, #208]	@ (8003094 <user_screen_func+0x12c>)
 8002fc4:	4413      	add	r3, r2
 8002fc6:	3305      	adds	r3, #5
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff ffab 	bl	8002f24 <increaseChar>
			}else{
				decreaseChar((char *)&load_cfg.company[m_cfg.cursor]);
			}
			sprintf(line_buf, "%s", load_cfg.company);
 8002fce:	f107 0308 	add.w	r3, r7, #8
 8002fd2:	4a31      	ldr	r2, [pc, #196]	@ (8003098 <user_screen_func+0x130>)
 8002fd4:	4931      	ldr	r1, [pc, #196]	@ (800309c <user_screen_func+0x134>)
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f005 f9a6 	bl	8008328 <siprintf>
			LCD_LOCATE(1,1);
 8002fdc:	2101      	movs	r1, #1
 8002fde:	2001      	movs	r0, #1
 8002fe0:	f7fe fc9e 	bl	8001920 <LCD_LOCATE>
			LCD_printstring(line_buf);
 8002fe4:	f107 0308 	add.w	r3, r7, #8
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fe fc6d 	bl	80018c8 <LCD_printstring>
			LCD_LOCATE(1,m_cfg.cursor);
 8002fee:	4b28      	ldr	r3, [pc, #160]	@ (8003090 <user_screen_func+0x128>)
 8002ff0:	785b      	ldrb	r3, [r3, #1]
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	2001      	movs	r0, #1
 8002ff6:	f7fe fc93 	bl	8001920 <LCD_LOCATE>
			break;
 8002ffa:	e039      	b.n	8003070 <user_screen_func+0x108>
		case eKey_CursorUp:
			m_cfg.cursor = (m_cfg.cursor - 1 + LINE_CHARACTER_MAX) % LINE_CHARACTER_MAX;
 8002ffc:	4b24      	ldr	r3, [pc, #144]	@ (8003090 <user_screen_func+0x128>)
 8002ffe:	785b      	ldrb	r3, [r3, #1]
 8003000:	330f      	adds	r3, #15
 8003002:	425a      	negs	r2, r3
 8003004:	f003 030f 	and.w	r3, r3, #15
 8003008:	f002 020f 	and.w	r2, r2, #15
 800300c:	bf58      	it	pl
 800300e:	4253      	negpl	r3, r2
 8003010:	b2da      	uxtb	r2, r3
 8003012:	4b1f      	ldr	r3, [pc, #124]	@ (8003090 <user_screen_func+0x128>)
 8003014:	705a      	strb	r2, [r3, #1]
			break;
 8003016:	e02b      	b.n	8003070 <user_screen_func+0x108>
		case eKey_CursorDown:
			m_cfg.cursor = (m_cfg.cursor + 1 ) % LINE_CHARACTER_MAX;
 8003018:	4b1d      	ldr	r3, [pc, #116]	@ (8003090 <user_screen_func+0x128>)
 800301a:	785b      	ldrb	r3, [r3, #1]
 800301c:	3301      	adds	r3, #1
 800301e:	425a      	negs	r2, r3
 8003020:	f003 030f 	and.w	r3, r3, #15
 8003024:	f002 020f 	and.w	r2, r2, #15
 8003028:	bf58      	it	pl
 800302a:	4253      	negpl	r3, r2
 800302c:	b2da      	uxtb	r2, r3
 800302e:	4b18      	ldr	r3, [pc, #96]	@ (8003090 <user_screen_func+0x128>)
 8003030:	705a      	strb	r2, [r3, #1]
			break;
 8003032:	e01d      	b.n	8003070 <user_screen_func+0x108>
		case eKey_Enter:
			LCD_DISP_ON();	// Cursor off
 8003034:	f7fe fc66 	bl	8001904 <LCD_DISP_ON>
			ret_sc = save_data();
 8003038:	f7ff fa22 	bl	8002480 <save_data>
 800303c:	4603      	mov	r3, r0
 800303e:	77fb      	strb	r3, [r7, #31]
			m_cfg.set_mode = 0;
 8003040:	4b13      	ldr	r3, [pc, #76]	@ (8003090 <user_screen_func+0x128>)
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
			break;
 8003048:	e012      	b.n	8003070 <user_screen_func+0x108>
		case eKey_User:
			m_cfg.set_mode = 1;
 800304a:	4b11      	ldr	r3, [pc, #68]	@ (8003090 <user_screen_func+0x128>)
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
			m_cfg.cursor = 2;
 8003052:	4b0f      	ldr	r3, [pc, #60]	@ (8003090 <user_screen_func+0x128>)
 8003054:	2202      	movs	r2, #2
 8003056:	705a      	strb	r2, [r3, #1]
			LCD_LOCATE(1, m_cfg.cursor);
 8003058:	4b0d      	ldr	r3, [pc, #52]	@ (8003090 <user_screen_func+0x128>)
 800305a:	785b      	ldrb	r3, [r3, #1]
 800305c:	4619      	mov	r1, r3
 800305e:	2001      	movs	r0, #1
 8003060:	f7fe fc5e 	bl	8001920 <LCD_LOCATE>
			LCD_DISP_CURSOR();  // Cursor on
 8003064:	f7fe fc55 	bl	8001912 <LCD_DISP_CURSOR>
			draw_title(eUSER_Mode);
 8003068:	200b      	movs	r0, #11
 800306a:	f7fe fd79 	bl	8001b60 <draw_title>
			break;
 800306e:	bf00      	nop
	}
	if(m_cfg.cursor != old_cursor){
 8003070:	4b07      	ldr	r3, [pc, #28]	@ (8003090 <user_screen_func+0x128>)
 8003072:	785b      	ldrb	r3, [r3, #1]
 8003074:	7fba      	ldrb	r2, [r7, #30]
 8003076:	429a      	cmp	r2, r3
 8003078:	d005      	beq.n	8003086 <user_screen_func+0x11e>
		LCD_LOCATE(1, m_cfg.cursor);
 800307a:	4b05      	ldr	r3, [pc, #20]	@ (8003090 <user_screen_func+0x128>)
 800307c:	785b      	ldrb	r3, [r3, #1]
 800307e:	4619      	mov	r1, r3
 8003080:	2001      	movs	r0, #1
 8003082:	f7fe fc4d 	bl	8001920 <LCD_LOCATE>
	}
	return ret_sc;
 8003086:	7ffb      	ldrb	r3, [r7, #31]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3720      	adds	r7, #32
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	20000bd0 	.word	0x20000bd0
 8003094:	20000c1c 	.word	0x20000c1c
 8003098:	20000c51 	.word	0x20000c51
 800309c:	080096d4 	.word	0x080096d4

080030a0 <factory_screen_func>:

ScreenID_t factory_screen_func(Screen_param_t param)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	463b      	mov	r3, r7
 80030a8:	e883 0003 	stmia.w	r3, {r0, r1}
	ScreenID_t ret_sc = eMAX_SCREEN_ID;
 80030ac:	230f      	movs	r3, #15
 80030ae:	73fb      	strb	r3, [r7, #15]
	
	switch(param.key){
 80030b0:	887b      	ldrh	r3, [r7, #2]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d002      	beq.n	80030bc <factory_screen_func+0x1c>
 80030b6:	2b09      	cmp	r3, #9
 80030b8:	d004      	beq.n	80030c4 <factory_screen_func+0x24>
 80030ba:	e00c      	b.n	80030d6 <factory_screen_func+0x36>
		case eKey_Enter:
			draw_title(eCH_CHSelect);
 80030bc:	2000      	movs	r0, #0
 80030be:	f7fe fd4f 	bl	8001b60 <draw_title>
			break;
 80030c2:	e008      	b.n	80030d6 <factory_screen_func+0x36>
		case eKey_Factory:
			draw_title(eFactor_Mode);
 80030c4:	200c      	movs	r0, #12
 80030c6:	f7fe fd4b 	bl	8001b60 <draw_title>
			send_cmd_2_backend(eCMD_Factory, 0, 0);
 80030ca:	2200      	movs	r2, #0
 80030cc:	2100      	movs	r1, #0
 80030ce:	20b9      	movs	r0, #185	@ 0xb9
 80030d0:	f7fe fcee 	bl	8001ab0 <send_cmd_2_backend>
			break;
 80030d4:	bf00      	nop
	}
	return ret_sc;
 80030d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <select_ch_set_blink>:

static void select_ch_set_blink(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b094      	sub	sp, #80	@ 0x50
 80030e4:	af00      	add	r7, sp, #0
	uint8_t ch_disp[4][LCD_PRINT_MAX] = {{"    CH2 CH4 CH6 \n"}, {"CH1     CH4 CH6 \n"},
 80030e6:	4a18      	ldr	r2, [pc, #96]	@ (8003148 <select_ch_set_blink+0x68>)
 80030e8:	463b      	mov	r3, r7
 80030ea:	4611      	mov	r1, r2
 80030ec:	2250      	movs	r2, #80	@ 0x50
 80030ee:	4618      	mov	r0, r3
 80030f0:	f005 fa0a 	bl	8008508 <memcpy>
										 {"CH1 CH2     CH6 \n"}, {"CH1 CH2 CH4     \n"}};

	if(m_cfg.cursor == 4){
 80030f4:	4b15      	ldr	r3, [pc, #84]	@ (800314c <select_ch_set_blink+0x6c>)
 80030f6:	785b      	ldrb	r3, [r3, #1]
 80030f8:	2b04      	cmp	r3, #4
 80030fa:	d10b      	bne.n	8003114 <select_ch_set_blink+0x34>
		sprintf(m_cfg.blink_text[0], "CH8             \n");
 80030fc:	4914      	ldr	r1, [pc, #80]	@ (8003150 <select_ch_set_blink+0x70>)
 80030fe:	4815      	ldr	r0, [pc, #84]	@ (8003154 <select_ch_set_blink+0x74>)
 8003100:	f005 f912 	bl	8008328 <siprintf>
		sprintf(m_cfg.blink_text[1], "                \n");
 8003104:	4914      	ldr	r1, [pc, #80]	@ (8003158 <select_ch_set_blink+0x78>)
 8003106:	4815      	ldr	r0, [pc, #84]	@ (800315c <select_ch_set_blink+0x7c>)
 8003108:	f005 f90e 	bl	8008328 <siprintf>
		m_cfg.blink_row = 2;
 800310c:	4b0f      	ldr	r3, [pc, #60]	@ (800314c <select_ch_set_blink+0x6c>)
 800310e:	2202      	movs	r2, #2
 8003110:	731a      	strb	r2, [r3, #12]
	}else{
		sprintf(m_cfg.blink_text[0], "CH1 CH2 CH4 CH6 \n");
		sprintf(m_cfg.blink_text[1], "%s", ch_disp[m_cfg.cursor]);
		m_cfg.blink_row = 1;
	}
}
 8003112:	e014      	b.n	800313e <select_ch_set_blink+0x5e>
		sprintf(m_cfg.blink_text[0], "CH1 CH2 CH4 CH6 \n");
 8003114:	4912      	ldr	r1, [pc, #72]	@ (8003160 <select_ch_set_blink+0x80>)
 8003116:	480f      	ldr	r0, [pc, #60]	@ (8003154 <select_ch_set_blink+0x74>)
 8003118:	f005 f906 	bl	8008328 <siprintf>
		sprintf(m_cfg.blink_text[1], "%s", ch_disp[m_cfg.cursor]);
 800311c:	4b0b      	ldr	r3, [pc, #44]	@ (800314c <select_ch_set_blink+0x6c>)
 800311e:	785b      	ldrb	r3, [r3, #1]
 8003120:	4619      	mov	r1, r3
 8003122:	463a      	mov	r2, r7
 8003124:	460b      	mov	r3, r1
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	461a      	mov	r2, r3
 8003130:	490c      	ldr	r1, [pc, #48]	@ (8003164 <select_ch_set_blink+0x84>)
 8003132:	480a      	ldr	r0, [pc, #40]	@ (800315c <select_ch_set_blink+0x7c>)
 8003134:	f005 f8f8 	bl	8008328 <siprintf>
		m_cfg.blink_row = 1;
 8003138:	4b04      	ldr	r3, [pc, #16]	@ (800314c <select_ch_set_blink+0x6c>)
 800313a:	2201      	movs	r2, #1
 800313c:	731a      	strb	r2, [r3, #12]
}
 800313e:	bf00      	nop
 8003140:	3750      	adds	r7, #80	@ 0x50
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	080096d8 	.word	0x080096d8
 800314c:	20000bd0 	.word	0x20000bd0
 8003150:	0800954c 	.word	0x0800954c
 8003154:	20000bdd 	.word	0x20000bdd
 8003158:	08009688 	.word	0x08009688
 800315c:	20000bf1 	.word	0x20000bf1
 8003160:	08009538 	.word	0x08009538
 8003164:	080096d4 	.word	0x080096d4

08003168 <select_ch_screen_func>:

ScreenID_t select_ch_screen_func(Screen_param_t param)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	463b      	mov	r3, r7
 8003170:	e883 0003 	stmia.w	r3, {r0, r1}
	ScreenID_t ret_sc = eMAX_SCREEN_ID;
 8003174:	230f      	movs	r3, #15
 8003176:	73fb      	strb	r3, [r7, #15]

	switch(param.key){
 8003178:	887b      	ldrh	r3, [r7, #2]
 800317a:	3b01      	subs	r3, #1
 800317c:	2b05      	cmp	r3, #5
 800317e:	d851      	bhi.n	8003224 <select_ch_screen_func+0xbc>
 8003180:	a201      	add	r2, pc, #4	@ (adr r2, 8003188 <select_ch_screen_func+0x20>)
 8003182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003186:	bf00      	nop
 8003188:	080031e5 	.word	0x080031e5
 800318c:	080031a1 	.word	0x080031a1
 8003190:	08003225 	.word	0x08003225
 8003194:	080031c3 	.word	0x080031c3
 8003198:	08003225 	.word	0x08003225
 800319c:	08003205 	.word	0x08003205
		case eKey_Up:
			m_cfg.cursor = (m_cfg.cursor - 1 + SEL_MAX_CH) % SEL_MAX_CH;
 80031a0:	4b23      	ldr	r3, [pc, #140]	@ (8003230 <select_ch_screen_func+0xc8>)
 80031a2:	785b      	ldrb	r3, [r3, #1]
 80031a4:	1d1a      	adds	r2, r3, #4
 80031a6:	4b23      	ldr	r3, [pc, #140]	@ (8003234 <select_ch_screen_func+0xcc>)
 80031a8:	fb83 1302 	smull	r1, r3, r3, r2
 80031ac:	1059      	asrs	r1, r3, #1
 80031ae:	17d3      	asrs	r3, r2, #31
 80031b0:	1ac9      	subs	r1, r1, r3
 80031b2:	460b      	mov	r3, r1
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	440b      	add	r3, r1
 80031b8:	1ad1      	subs	r1, r2, r3
 80031ba:	b2ca      	uxtb	r2, r1
 80031bc:	4b1c      	ldr	r3, [pc, #112]	@ (8003230 <select_ch_screen_func+0xc8>)
 80031be:	705a      	strb	r2, [r3, #1]
			break;
 80031c0:	e030      	b.n	8003224 <select_ch_screen_func+0xbc>
		case eKey_Down:
			m_cfg.cursor = (m_cfg.cursor + 1 ) % SEL_MAX_CH;
 80031c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003230 <select_ch_screen_func+0xc8>)
 80031c4:	785b      	ldrb	r3, [r3, #1]
 80031c6:	1c5a      	adds	r2, r3, #1
 80031c8:	4b1a      	ldr	r3, [pc, #104]	@ (8003234 <select_ch_screen_func+0xcc>)
 80031ca:	fb83 1302 	smull	r1, r3, r3, r2
 80031ce:	1059      	asrs	r1, r3, #1
 80031d0:	17d3      	asrs	r3, r2, #31
 80031d2:	1ac9      	subs	r1, r1, r3
 80031d4:	460b      	mov	r3, r1
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	1ad1      	subs	r1, r2, r3
 80031dc:	b2ca      	uxtb	r2, r1
 80031de:	4b14      	ldr	r3, [pc, #80]	@ (8003230 <select_ch_screen_func+0xc8>)
 80031e0:	705a      	strb	r2, [r3, #1]
			break;
 80031e2:	e01f      	b.n	8003224 <select_ch_screen_func+0xbc>
		case eKey_Enter:
			m_cfg.enable_blink = 0;
 80031e4:	4b12      	ldr	r3, [pc, #72]	@ (8003230 <select_ch_screen_func+0xc8>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	729a      	strb	r2, [r3, #10]
			load_cfg.ch_num = m_cfg.cursor ;
 80031ea:	4b11      	ldr	r3, [pc, #68]	@ (8003230 <select_ch_screen_func+0xc8>)
 80031ec:	785a      	ldrb	r2, [r3, #1]
 80031ee:	4b12      	ldr	r3, [pc, #72]	@ (8003238 <select_ch_screen_func+0xd0>)
 80031f0:	719a      	strb	r2, [r3, #6]
			ret_sc = save_data();
 80031f2:	f7ff f945 	bl	8002480 <save_data>
 80031f6:	4603      	mov	r3, r0
 80031f8:	73fb      	strb	r3, [r7, #15]
			m_cfg.set_mode = 0;
 80031fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003230 <select_ch_screen_func+0xc8>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
			break;
 8003202:	e00f      	b.n	8003224 <select_ch_screen_func+0xbc>
		case eKey_ChSel:
			m_cfg.cursor = load_cfg.ch_num;
 8003204:	4b0c      	ldr	r3, [pc, #48]	@ (8003238 <select_ch_screen_func+0xd0>)
 8003206:	799a      	ldrb	r2, [r3, #6]
 8003208:	4b09      	ldr	r3, [pc, #36]	@ (8003230 <select_ch_screen_func+0xc8>)
 800320a:	705a      	strb	r2, [r3, #1]
			m_cfg.blink = 0;
 800320c:	4b08      	ldr	r3, [pc, #32]	@ (8003230 <select_ch_screen_func+0xc8>)
 800320e:	2200      	movs	r2, #0
 8003210:	72da      	strb	r2, [r3, #11]
			m_cfg.enable_blink = 1;
 8003212:	4b07      	ldr	r3, [pc, #28]	@ (8003230 <select_ch_screen_func+0xc8>)
 8003214:	2201      	movs	r2, #1
 8003216:	729a      	strb	r2, [r3, #10]
			select_ch_set_blink();
 8003218:	f7ff ff62 	bl	80030e0 <select_ch_set_blink>
			draw_title(eSEL_OP_Ch);
 800321c:	200d      	movs	r0, #13
 800321e:	f7fe fc9f 	bl	8001b60 <draw_title>
			break;
 8003222:	bf00      	nop
	}

	return ret_sc;
 8003224:	7bfb      	ldrb	r3, [r7, #15]
}
 8003226:	4618      	mov	r0, r3
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	20000bd0 	.word	0x20000bd0
 8003234:	66666667 	.word	0x66666667
 8003238:	20000c1c 	.word	0x20000c1c

0800323c <version_screen_func>:

ScreenID_t version_screen_func(Screen_param_t param)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	463b      	mov	r3, r7
 8003244:	e883 0003 	stmia.w	r3, {r0, r1}
	ScreenID_t ret_sc = eMAX_SCREEN_ID;
 8003248:	230f      	movs	r3, #15
 800324a:	73fb      	strb	r3, [r7, #15]
	
	switch(param.key){
 800324c:	887b      	ldrh	r3, [r7, #2]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d002      	beq.n	8003258 <version_screen_func+0x1c>
 8003252:	2b05      	cmp	r3, #5
 8003254:	d004      	beq.n	8003260 <version_screen_func+0x24>
 8003256:	e007      	b.n	8003268 <version_screen_func+0x2c>
		case eKey_Enter:
			draw_title(eCH_CHSelect);
 8003258:	2000      	movs	r0, #0
 800325a:	f7fe fc81 	bl	8001b60 <draw_title>
			break;
 800325e:	e003      	b.n	8003268 <version_screen_func+0x2c>
		case eKey_Version:
			draw_title(eKey_Version);
 8003260:	2005      	movs	r0, #5
 8003262:	f7fe fc7d 	bl	8001b60 <draw_title>
			break;
 8003266:	bf00      	nop
	}
	return ret_sc;
 8003268:	7bfb      	ldrb	r3, [r7, #15]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003274:	f7fe fa6a 	bl	800174c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003278:	480b      	ldr	r0, [pc, #44]	@ (80032a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800327a:	490c      	ldr	r1, [pc, #48]	@ (80032ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800327c:	4a0c      	ldr	r2, [pc, #48]	@ (80032b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800327e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003280:	e002      	b.n	8003288 <LoopCopyDataInit>

08003282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003286:	3304      	adds	r3, #4

08003288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800328a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800328c:	d3f9      	bcc.n	8003282 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800328e:	4a09      	ldr	r2, [pc, #36]	@ (80032b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003290:	4c09      	ldr	r4, [pc, #36]	@ (80032b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003294:	e001      	b.n	800329a <LoopFillZerobss>

08003296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003298:	3204      	adds	r2, #4

0800329a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800329a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800329c:	d3fb      	bcc.n	8003296 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800329e:	f005 f90d 	bl	80084bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80032a2:	f7fd fec1 	bl	8001028 <main>
  bx lr
 80032a6:	4770      	bx	lr
  ldr r0, =_sdata
 80032a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032ac:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 80032b0:	080097f8 	.word	0x080097f8
  ldr r2, =_sbss
 80032b4:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 80032b8:	20002060 	.word	0x20002060

080032bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80032bc:	e7fe      	b.n	80032bc <ADC1_2_IRQHandler>
	...

080032c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032c4:	4b08      	ldr	r3, [pc, #32]	@ (80032e8 <HAL_Init+0x28>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a07      	ldr	r2, [pc, #28]	@ (80032e8 <HAL_Init+0x28>)
 80032ca:	f043 0310 	orr.w	r3, r3, #16
 80032ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032d0:	2003      	movs	r0, #3
 80032d2:	f000 f8d1 	bl	8003478 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032d6:	200f      	movs	r0, #15
 80032d8:	f7fe f956 	bl	8001588 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032dc:	f7fe f890 	bl	8001400 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	40022000 	.word	0x40022000

080032ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032f0:	4b05      	ldr	r3, [pc, #20]	@ (8003308 <HAL_IncTick+0x1c>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	461a      	mov	r2, r3
 80032f6:	4b05      	ldr	r3, [pc, #20]	@ (800330c <HAL_IncTick+0x20>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4413      	add	r3, r2
 80032fc:	4a03      	ldr	r2, [pc, #12]	@ (800330c <HAL_IncTick+0x20>)
 80032fe:	6013      	str	r3, [r2, #0]
}
 8003300:	bf00      	nop
 8003302:	46bd      	mov	sp, r7
 8003304:	bc80      	pop	{r7}
 8003306:	4770      	bx	lr
 8003308:	20000148 	.word	0x20000148
 800330c:	20000c64 	.word	0x20000c64

08003310 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  return uwTick;
 8003314:	4b02      	ldr	r3, [pc, #8]	@ (8003320 <HAL_GetTick+0x10>)
 8003316:	681b      	ldr	r3, [r3, #0]
}
 8003318:	4618      	mov	r0, r3
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr
 8003320:	20000c64 	.word	0x20000c64

08003324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003334:	4b0c      	ldr	r3, [pc, #48]	@ (8003368 <__NVIC_SetPriorityGrouping+0x44>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003340:	4013      	ands	r3, r2
 8003342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800334c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003350:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003356:	4a04      	ldr	r2, [pc, #16]	@ (8003368 <__NVIC_SetPriorityGrouping+0x44>)
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	60d3      	str	r3, [r2, #12]
}
 800335c:	bf00      	nop
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	e000ed00 	.word	0xe000ed00

0800336c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003370:	4b04      	ldr	r3, [pc, #16]	@ (8003384 <__NVIC_GetPriorityGrouping+0x18>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	0a1b      	lsrs	r3, r3, #8
 8003376:	f003 0307 	and.w	r3, r3, #7
}
 800337a:	4618      	mov	r0, r3
 800337c:	46bd      	mov	sp, r7
 800337e:	bc80      	pop	{r7}
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	e000ed00 	.word	0xe000ed00

08003388 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	4603      	mov	r3, r0
 8003390:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003396:	2b00      	cmp	r3, #0
 8003398:	db0b      	blt.n	80033b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800339a:	79fb      	ldrb	r3, [r7, #7]
 800339c:	f003 021f 	and.w	r2, r3, #31
 80033a0:	4906      	ldr	r1, [pc, #24]	@ (80033bc <__NVIC_EnableIRQ+0x34>)
 80033a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a6:	095b      	lsrs	r3, r3, #5
 80033a8:	2001      	movs	r0, #1
 80033aa:	fa00 f202 	lsl.w	r2, r0, r2
 80033ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bc80      	pop	{r7}
 80033ba:	4770      	bx	lr
 80033bc:	e000e100 	.word	0xe000e100

080033c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	4603      	mov	r3, r0
 80033c8:	6039      	str	r1, [r7, #0]
 80033ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	db0a      	blt.n	80033ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	490c      	ldr	r1, [pc, #48]	@ (800340c <__NVIC_SetPriority+0x4c>)
 80033da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033de:	0112      	lsls	r2, r2, #4
 80033e0:	b2d2      	uxtb	r2, r2
 80033e2:	440b      	add	r3, r1
 80033e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033e8:	e00a      	b.n	8003400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	4908      	ldr	r1, [pc, #32]	@ (8003410 <__NVIC_SetPriority+0x50>)
 80033f0:	79fb      	ldrb	r3, [r7, #7]
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	3b04      	subs	r3, #4
 80033f8:	0112      	lsls	r2, r2, #4
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	440b      	add	r3, r1
 80033fe:	761a      	strb	r2, [r3, #24]
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	bc80      	pop	{r7}
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	e000e100 	.word	0xe000e100
 8003410:	e000ed00 	.word	0xe000ed00

08003414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003414:	b480      	push	{r7}
 8003416:	b089      	sub	sp, #36	@ 0x24
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	f1c3 0307 	rsb	r3, r3, #7
 800342e:	2b04      	cmp	r3, #4
 8003430:	bf28      	it	cs
 8003432:	2304      	movcs	r3, #4
 8003434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	3304      	adds	r3, #4
 800343a:	2b06      	cmp	r3, #6
 800343c:	d902      	bls.n	8003444 <NVIC_EncodePriority+0x30>
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	3b03      	subs	r3, #3
 8003442:	e000      	b.n	8003446 <NVIC_EncodePriority+0x32>
 8003444:	2300      	movs	r3, #0
 8003446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003448:	f04f 32ff 	mov.w	r2, #4294967295
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	43da      	mvns	r2, r3
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	401a      	ands	r2, r3
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800345c:	f04f 31ff 	mov.w	r1, #4294967295
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	fa01 f303 	lsl.w	r3, r1, r3
 8003466:	43d9      	mvns	r1, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800346c:	4313      	orrs	r3, r2
         );
}
 800346e:	4618      	mov	r0, r3
 8003470:	3724      	adds	r7, #36	@ 0x24
 8003472:	46bd      	mov	sp, r7
 8003474:	bc80      	pop	{r7}
 8003476:	4770      	bx	lr

08003478 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f7ff ff4f 	bl	8003324 <__NVIC_SetPriorityGrouping>
}
 8003486:	bf00      	nop
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800348e:	b580      	push	{r7, lr}
 8003490:	b086      	sub	sp, #24
 8003492:	af00      	add	r7, sp, #0
 8003494:	4603      	mov	r3, r0
 8003496:	60b9      	str	r1, [r7, #8]
 8003498:	607a      	str	r2, [r7, #4]
 800349a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800349c:	2300      	movs	r3, #0
 800349e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034a0:	f7ff ff64 	bl	800336c <__NVIC_GetPriorityGrouping>
 80034a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	68b9      	ldr	r1, [r7, #8]
 80034aa:	6978      	ldr	r0, [r7, #20]
 80034ac:	f7ff ffb2 	bl	8003414 <NVIC_EncodePriority>
 80034b0:	4602      	mov	r2, r0
 80034b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034b6:	4611      	mov	r1, r2
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff ff81 	bl	80033c0 <__NVIC_SetPriority>
}
 80034be:	bf00      	nop
 80034c0:	3718      	adds	r7, #24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b082      	sub	sp, #8
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	4603      	mov	r3, r0
 80034ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff ff57 	bl	8003388 <__NVIC_EnableIRQ>
}
 80034da:	bf00      	nop
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b085      	sub	sp, #20
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034ea:	2300      	movs	r3, #0
 80034ec:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d008      	beq.n	800350c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2204      	movs	r2, #4
 80034fe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e020      	b.n	800354e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 020e 	bic.w	r2, r2, #14
 800351a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0201 	bic.w	r2, r2, #1
 800352a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003534:	2101      	movs	r1, #1
 8003536:	fa01 f202 	lsl.w	r2, r1, r2
 800353a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800354c:	7bfb      	ldrb	r3, [r7, #15]
}
 800354e:	4618      	mov	r0, r3
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	bc80      	pop	{r7}
 8003556:	4770      	bx	lr

08003558 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003560:	2300      	movs	r3, #0
 8003562:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d005      	beq.n	800357c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2204      	movs	r2, #4
 8003574:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	73fb      	strb	r3, [r7, #15]
 800357a:	e051      	b.n	8003620 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 020e 	bic.w	r2, r2, #14
 800358a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0201 	bic.w	r2, r2, #1
 800359a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a22      	ldr	r2, [pc, #136]	@ (800362c <HAL_DMA_Abort_IT+0xd4>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d029      	beq.n	80035fa <HAL_DMA_Abort_IT+0xa2>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a21      	ldr	r2, [pc, #132]	@ (8003630 <HAL_DMA_Abort_IT+0xd8>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d022      	beq.n	80035f6 <HAL_DMA_Abort_IT+0x9e>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a1f      	ldr	r2, [pc, #124]	@ (8003634 <HAL_DMA_Abort_IT+0xdc>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d01a      	beq.n	80035f0 <HAL_DMA_Abort_IT+0x98>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a1e      	ldr	r2, [pc, #120]	@ (8003638 <HAL_DMA_Abort_IT+0xe0>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d012      	beq.n	80035ea <HAL_DMA_Abort_IT+0x92>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a1c      	ldr	r2, [pc, #112]	@ (800363c <HAL_DMA_Abort_IT+0xe4>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d00a      	beq.n	80035e4 <HAL_DMA_Abort_IT+0x8c>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a1b      	ldr	r2, [pc, #108]	@ (8003640 <HAL_DMA_Abort_IT+0xe8>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d102      	bne.n	80035de <HAL_DMA_Abort_IT+0x86>
 80035d8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80035dc:	e00e      	b.n	80035fc <HAL_DMA_Abort_IT+0xa4>
 80035de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80035e2:	e00b      	b.n	80035fc <HAL_DMA_Abort_IT+0xa4>
 80035e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80035e8:	e008      	b.n	80035fc <HAL_DMA_Abort_IT+0xa4>
 80035ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80035ee:	e005      	b.n	80035fc <HAL_DMA_Abort_IT+0xa4>
 80035f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80035f4:	e002      	b.n	80035fc <HAL_DMA_Abort_IT+0xa4>
 80035f6:	2310      	movs	r3, #16
 80035f8:	e000      	b.n	80035fc <HAL_DMA_Abort_IT+0xa4>
 80035fa:	2301      	movs	r3, #1
 80035fc:	4a11      	ldr	r2, [pc, #68]	@ (8003644 <HAL_DMA_Abort_IT+0xec>)
 80035fe:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003614:	2b00      	cmp	r3, #0
 8003616:	d003      	beq.n	8003620 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	4798      	blx	r3
    } 
  }
  return status;
 8003620:	7bfb      	ldrb	r3, [r7, #15]
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40020008 	.word	0x40020008
 8003630:	4002001c 	.word	0x4002001c
 8003634:	40020030 	.word	0x40020030
 8003638:	40020044 	.word	0x40020044
 800363c:	40020058 	.word	0x40020058
 8003640:	4002006c 	.word	0x4002006c
 8003644:	40020000 	.word	0x40020000

08003648 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800364a:	b087      	sub	sp, #28
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800365a:	2300      	movs	r3, #0
 800365c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800365e:	2300      	movs	r3, #0
 8003660:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003662:	4b2f      	ldr	r3, [pc, #188]	@ (8003720 <HAL_FLASH_Program+0xd8>)
 8003664:	7e1b      	ldrb	r3, [r3, #24]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d101      	bne.n	800366e <HAL_FLASH_Program+0x26>
 800366a:	2302      	movs	r3, #2
 800366c:	e054      	b.n	8003718 <HAL_FLASH_Program+0xd0>
 800366e:	4b2c      	ldr	r3, [pc, #176]	@ (8003720 <HAL_FLASH_Program+0xd8>)
 8003670:	2201      	movs	r2, #1
 8003672:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003674:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003678:	f000 f8b2 	bl	80037e0 <FLASH_WaitForLastOperation>
 800367c:	4603      	mov	r3, r0
 800367e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8003680:	7dfb      	ldrb	r3, [r7, #23]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d144      	bne.n	8003710 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d102      	bne.n	8003692 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800368c:	2301      	movs	r3, #1
 800368e:	757b      	strb	r3, [r7, #21]
 8003690:	e007      	b.n	80036a2 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2b02      	cmp	r3, #2
 8003696:	d102      	bne.n	800369e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003698:	2302      	movs	r3, #2
 800369a:	757b      	strb	r3, [r7, #21]
 800369c:	e001      	b.n	80036a2 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800369e:	2304      	movs	r3, #4
 80036a0:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80036a2:	2300      	movs	r3, #0
 80036a4:	75bb      	strb	r3, [r7, #22]
 80036a6:	e02d      	b.n	8003704 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80036a8:	7dbb      	ldrb	r3, [r7, #22]
 80036aa:	005a      	lsls	r2, r3, #1
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	eb02 0c03 	add.w	ip, r2, r3
 80036b2:	7dbb      	ldrb	r3, [r7, #22]
 80036b4:	0119      	lsls	r1, r3, #4
 80036b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036ba:	f1c1 0620 	rsb	r6, r1, #32
 80036be:	f1a1 0020 	sub.w	r0, r1, #32
 80036c2:	fa22 f401 	lsr.w	r4, r2, r1
 80036c6:	fa03 f606 	lsl.w	r6, r3, r6
 80036ca:	4334      	orrs	r4, r6
 80036cc:	fa23 f000 	lsr.w	r0, r3, r0
 80036d0:	4304      	orrs	r4, r0
 80036d2:	fa23 f501 	lsr.w	r5, r3, r1
 80036d6:	b2a3      	uxth	r3, r4
 80036d8:	4619      	mov	r1, r3
 80036da:	4660      	mov	r0, ip
 80036dc:	f000 f864 	bl	80037a8 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80036e0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80036e4:	f000 f87c 	bl	80037e0 <FLASH_WaitForLastOperation>
 80036e8:	4603      	mov	r3, r0
 80036ea:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80036ec:	4b0d      	ldr	r3, [pc, #52]	@ (8003724 <HAL_FLASH_Program+0xdc>)
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	4a0c      	ldr	r2, [pc, #48]	@ (8003724 <HAL_FLASH_Program+0xdc>)
 80036f2:	f023 0301 	bic.w	r3, r3, #1
 80036f6:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80036f8:	7dfb      	ldrb	r3, [r7, #23]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d107      	bne.n	800370e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80036fe:	7dbb      	ldrb	r3, [r7, #22]
 8003700:	3301      	adds	r3, #1
 8003702:	75bb      	strb	r3, [r7, #22]
 8003704:	7dba      	ldrb	r2, [r7, #22]
 8003706:	7d7b      	ldrb	r3, [r7, #21]
 8003708:	429a      	cmp	r2, r3
 800370a:	d3cd      	bcc.n	80036a8 <HAL_FLASH_Program+0x60>
 800370c:	e000      	b.n	8003710 <HAL_FLASH_Program+0xc8>
      {
        break;
 800370e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003710:	4b03      	ldr	r3, [pc, #12]	@ (8003720 <HAL_FLASH_Program+0xd8>)
 8003712:	2200      	movs	r2, #0
 8003714:	761a      	strb	r2, [r3, #24]

  return status;
 8003716:	7dfb      	ldrb	r3, [r7, #23]
}
 8003718:	4618      	mov	r0, r3
 800371a:	371c      	adds	r7, #28
 800371c:	46bd      	mov	sp, r7
 800371e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003720:	20000c68 	.word	0x20000c68
 8003724:	40022000 	.word	0x40022000

08003728 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800372e:	2300      	movs	r3, #0
 8003730:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003732:	4b0d      	ldr	r3, [pc, #52]	@ (8003768 <HAL_FLASH_Unlock+0x40>)
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00d      	beq.n	800375a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800373e:	4b0a      	ldr	r3, [pc, #40]	@ (8003768 <HAL_FLASH_Unlock+0x40>)
 8003740:	4a0a      	ldr	r2, [pc, #40]	@ (800376c <HAL_FLASH_Unlock+0x44>)
 8003742:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003744:	4b08      	ldr	r3, [pc, #32]	@ (8003768 <HAL_FLASH_Unlock+0x40>)
 8003746:	4a0a      	ldr	r2, [pc, #40]	@ (8003770 <HAL_FLASH_Unlock+0x48>)
 8003748:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800374a:	4b07      	ldr	r3, [pc, #28]	@ (8003768 <HAL_FLASH_Unlock+0x40>)
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800375a:	79fb      	ldrb	r3, [r7, #7]
}
 800375c:	4618      	mov	r0, r3
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	bc80      	pop	{r7}
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	40022000 	.word	0x40022000
 800376c:	45670123 	.word	0x45670123
 8003770:	cdef89ab 	.word	0xcdef89ab

08003774 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003778:	4b05      	ldr	r3, [pc, #20]	@ (8003790 <HAL_FLASH_Lock+0x1c>)
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	4a04      	ldr	r2, [pc, #16]	@ (8003790 <HAL_FLASH_Lock+0x1c>)
 800377e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003782:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	46bd      	mov	sp, r7
 800378a:	bc80      	pop	{r7}
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	40022000 	.word	0x40022000

08003794 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8003798:	4b02      	ldr	r3, [pc, #8]	@ (80037a4 <HAL_FLASH_GetError+0x10>)
 800379a:	69db      	ldr	r3, [r3, #28]
}
 800379c:	4618      	mov	r0, r3
 800379e:	46bd      	mov	sp, r7
 80037a0:	bc80      	pop	{r7}
 80037a2:	4770      	bx	lr
 80037a4:	20000c68 	.word	0x20000c68

080037a8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	460b      	mov	r3, r1
 80037b2:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80037b4:	4b08      	ldr	r3, [pc, #32]	@ (80037d8 <FLASH_Program_HalfWord+0x30>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80037ba:	4b08      	ldr	r3, [pc, #32]	@ (80037dc <FLASH_Program_HalfWord+0x34>)
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	4a07      	ldr	r2, [pc, #28]	@ (80037dc <FLASH_Program_HalfWord+0x34>)
 80037c0:	f043 0301 	orr.w	r3, r3, #1
 80037c4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	887a      	ldrh	r2, [r7, #2]
 80037ca:	801a      	strh	r2, [r3, #0]
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bc80      	pop	{r7}
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	20000c68 	.word	0x20000c68
 80037dc:	40022000 	.word	0x40022000

080037e0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80037e8:	f7ff fd92 	bl	8003310 <HAL_GetTick>
 80037ec:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80037ee:	e010      	b.n	8003812 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f6:	d00c      	beq.n	8003812 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d007      	beq.n	800380e <FLASH_WaitForLastOperation+0x2e>
 80037fe:	f7ff fd87 	bl	8003310 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	429a      	cmp	r2, r3
 800380c:	d201      	bcs.n	8003812 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e025      	b.n	800385e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003812:	4b15      	ldr	r3, [pc, #84]	@ (8003868 <FLASH_WaitForLastOperation+0x88>)
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1e8      	bne.n	80037f0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800381e:	4b12      	ldr	r3, [pc, #72]	@ (8003868 <FLASH_WaitForLastOperation+0x88>)
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	f003 0320 	and.w	r3, r3, #32
 8003826:	2b00      	cmp	r3, #0
 8003828:	d002      	beq.n	8003830 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800382a:	4b0f      	ldr	r3, [pc, #60]	@ (8003868 <FLASH_WaitForLastOperation+0x88>)
 800382c:	2220      	movs	r2, #32
 800382e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003830:	4b0d      	ldr	r3, [pc, #52]	@ (8003868 <FLASH_WaitForLastOperation+0x88>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f003 0310 	and.w	r3, r3, #16
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10b      	bne.n	8003854 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800383c:	4b0a      	ldr	r3, [pc, #40]	@ (8003868 <FLASH_WaitForLastOperation+0x88>)
 800383e:	69db      	ldr	r3, [r3, #28]
 8003840:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003844:	2b00      	cmp	r3, #0
 8003846:	d105      	bne.n	8003854 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003848:	4b07      	ldr	r3, [pc, #28]	@ (8003868 <FLASH_WaitForLastOperation+0x88>)
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003850:	2b00      	cmp	r3, #0
 8003852:	d003      	beq.n	800385c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003854:	f000 f80a 	bl	800386c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e000      	b.n	800385e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	40022000 	.word	0x40022000

0800386c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003872:	2300      	movs	r3, #0
 8003874:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003876:	4b23      	ldr	r3, [pc, #140]	@ (8003904 <FLASH_SetErrorCode+0x98>)
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	f003 0310 	and.w	r3, r3, #16
 800387e:	2b00      	cmp	r3, #0
 8003880:	d009      	beq.n	8003896 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003882:	4b21      	ldr	r3, [pc, #132]	@ (8003908 <FLASH_SetErrorCode+0x9c>)
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	f043 0302 	orr.w	r3, r3, #2
 800388a:	4a1f      	ldr	r2, [pc, #124]	@ (8003908 <FLASH_SetErrorCode+0x9c>)
 800388c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f043 0310 	orr.w	r3, r3, #16
 8003894:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003896:	4b1b      	ldr	r3, [pc, #108]	@ (8003904 <FLASH_SetErrorCode+0x98>)
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f003 0304 	and.w	r3, r3, #4
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d009      	beq.n	80038b6 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80038a2:	4b19      	ldr	r3, [pc, #100]	@ (8003908 <FLASH_SetErrorCode+0x9c>)
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	f043 0301 	orr.w	r3, r3, #1
 80038aa:	4a17      	ldr	r2, [pc, #92]	@ (8003908 <FLASH_SetErrorCode+0x9c>)
 80038ac:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f043 0304 	orr.w	r3, r3, #4
 80038b4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80038b6:	4b13      	ldr	r3, [pc, #76]	@ (8003904 <FLASH_SetErrorCode+0x98>)
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00b      	beq.n	80038da <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80038c2:	4b11      	ldr	r3, [pc, #68]	@ (8003908 <FLASH_SetErrorCode+0x9c>)
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	f043 0304 	orr.w	r3, r3, #4
 80038ca:	4a0f      	ldr	r2, [pc, #60]	@ (8003908 <FLASH_SetErrorCode+0x9c>)
 80038cc:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80038ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003904 <FLASH_SetErrorCode+0x98>)
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	4a0c      	ldr	r2, [pc, #48]	@ (8003904 <FLASH_SetErrorCode+0x98>)
 80038d4:	f023 0301 	bic.w	r3, r3, #1
 80038d8:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f240 1201 	movw	r2, #257	@ 0x101
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d106      	bne.n	80038f2 <FLASH_SetErrorCode+0x86>
 80038e4:	4b07      	ldr	r3, [pc, #28]	@ (8003904 <FLASH_SetErrorCode+0x98>)
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	4a06      	ldr	r2, [pc, #24]	@ (8003904 <FLASH_SetErrorCode+0x98>)
 80038ea:	f023 0301 	bic.w	r3, r3, #1
 80038ee:	61d3      	str	r3, [r2, #28]
}  
 80038f0:	e002      	b.n	80038f8 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80038f2:	4a04      	ldr	r2, [pc, #16]	@ (8003904 <FLASH_SetErrorCode+0x98>)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	60d3      	str	r3, [r2, #12]
}  
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bc80      	pop	{r7}
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	40022000 	.word	0x40022000
 8003908:	20000c68 	.word	0x20000c68

0800390c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800391a:	2300      	movs	r3, #0
 800391c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800391e:	4b2f      	ldr	r3, [pc, #188]	@ (80039dc <HAL_FLASHEx_Erase+0xd0>)
 8003920:	7e1b      	ldrb	r3, [r3, #24]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d101      	bne.n	800392a <HAL_FLASHEx_Erase+0x1e>
 8003926:	2302      	movs	r3, #2
 8003928:	e053      	b.n	80039d2 <HAL_FLASHEx_Erase+0xc6>
 800392a:	4b2c      	ldr	r3, [pc, #176]	@ (80039dc <HAL_FLASHEx_Erase+0xd0>)
 800392c:	2201      	movs	r2, #1
 800392e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b02      	cmp	r3, #2
 8003936:	d116      	bne.n	8003966 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003938:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800393c:	f7ff ff50 	bl	80037e0 <FLASH_WaitForLastOperation>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d141      	bne.n	80039ca <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8003946:	2001      	movs	r0, #1
 8003948:	f000 f84c 	bl	80039e4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800394c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003950:	f7ff ff46 	bl	80037e0 <FLASH_WaitForLastOperation>
 8003954:	4603      	mov	r3, r0
 8003956:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003958:	4b21      	ldr	r3, [pc, #132]	@ (80039e0 <HAL_FLASHEx_Erase+0xd4>)
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	4a20      	ldr	r2, [pc, #128]	@ (80039e0 <HAL_FLASHEx_Erase+0xd4>)
 800395e:	f023 0304 	bic.w	r3, r3, #4
 8003962:	6113      	str	r3, [r2, #16]
 8003964:	e031      	b.n	80039ca <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003966:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800396a:	f7ff ff39 	bl	80037e0 <FLASH_WaitForLastOperation>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d12a      	bne.n	80039ca <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	f04f 32ff 	mov.w	r2, #4294967295
 800397a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	60bb      	str	r3, [r7, #8]
 8003982:	e019      	b.n	80039b8 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003984:	68b8      	ldr	r0, [r7, #8]
 8003986:	f000 f849 	bl	8003a1c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800398a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800398e:	f7ff ff27 	bl	80037e0 <FLASH_WaitForLastOperation>
 8003992:	4603      	mov	r3, r0
 8003994:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003996:	4b12      	ldr	r3, [pc, #72]	@ (80039e0 <HAL_FLASHEx_Erase+0xd4>)
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	4a11      	ldr	r2, [pc, #68]	@ (80039e0 <HAL_FLASHEx_Erase+0xd4>)
 800399c:	f023 0302 	bic.w	r3, r3, #2
 80039a0:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80039a2:	7bfb      	ldrb	r3, [r7, #15]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	601a      	str	r2, [r3, #0]
            break;
 80039ae:	e00c      	b.n	80039ca <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80039b6:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	029a      	lsls	r2, r3, #10
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	4413      	add	r3, r2
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d3dc      	bcc.n	8003984 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80039ca:	4b04      	ldr	r3, [pc, #16]	@ (80039dc <HAL_FLASHEx_Erase+0xd0>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	761a      	strb	r2, [r3, #24]

  return status;
 80039d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	20000c68 	.word	0x20000c68
 80039e0:	40022000 	.word	0x40022000

080039e4 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80039ec:	4b09      	ldr	r3, [pc, #36]	@ (8003a14 <FLASH_MassErase+0x30>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80039f2:	4b09      	ldr	r3, [pc, #36]	@ (8003a18 <FLASH_MassErase+0x34>)
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	4a08      	ldr	r2, [pc, #32]	@ (8003a18 <FLASH_MassErase+0x34>)
 80039f8:	f043 0304 	orr.w	r3, r3, #4
 80039fc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80039fe:	4b06      	ldr	r3, [pc, #24]	@ (8003a18 <FLASH_MassErase+0x34>)
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	4a05      	ldr	r2, [pc, #20]	@ (8003a18 <FLASH_MassErase+0x34>)
 8003a04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a08:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bc80      	pop	{r7}
 8003a12:	4770      	bx	lr
 8003a14:	20000c68 	.word	0x20000c68
 8003a18:	40022000 	.word	0x40022000

08003a1c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003a24:	4b0b      	ldr	r3, [pc, #44]	@ (8003a54 <FLASH_PageErase+0x38>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a58 <FLASH_PageErase+0x3c>)
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	4a0a      	ldr	r2, [pc, #40]	@ (8003a58 <FLASH_PageErase+0x3c>)
 8003a30:	f043 0302 	orr.w	r3, r3, #2
 8003a34:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003a36:	4a08      	ldr	r2, [pc, #32]	@ (8003a58 <FLASH_PageErase+0x3c>)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003a3c:	4b06      	ldr	r3, [pc, #24]	@ (8003a58 <FLASH_PageErase+0x3c>)
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	4a05      	ldr	r2, [pc, #20]	@ (8003a58 <FLASH_PageErase+0x3c>)
 8003a42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a46:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bc80      	pop	{r7}
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	20000c68 	.word	0x20000c68
 8003a58:	40022000 	.word	0x40022000

08003a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b08b      	sub	sp, #44	@ 0x2c
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a66:	2300      	movs	r3, #0
 8003a68:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a6e:	e169      	b.n	8003d44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003a70:	2201      	movs	r2, #1
 8003a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	69fa      	ldr	r2, [r7, #28]
 8003a80:	4013      	ands	r3, r2
 8003a82:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	f040 8158 	bne.w	8003d3e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	4a9a      	ldr	r2, [pc, #616]	@ (8003cfc <HAL_GPIO_Init+0x2a0>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d05e      	beq.n	8003b56 <HAL_GPIO_Init+0xfa>
 8003a98:	4a98      	ldr	r2, [pc, #608]	@ (8003cfc <HAL_GPIO_Init+0x2a0>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d875      	bhi.n	8003b8a <HAL_GPIO_Init+0x12e>
 8003a9e:	4a98      	ldr	r2, [pc, #608]	@ (8003d00 <HAL_GPIO_Init+0x2a4>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d058      	beq.n	8003b56 <HAL_GPIO_Init+0xfa>
 8003aa4:	4a96      	ldr	r2, [pc, #600]	@ (8003d00 <HAL_GPIO_Init+0x2a4>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d86f      	bhi.n	8003b8a <HAL_GPIO_Init+0x12e>
 8003aaa:	4a96      	ldr	r2, [pc, #600]	@ (8003d04 <HAL_GPIO_Init+0x2a8>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d052      	beq.n	8003b56 <HAL_GPIO_Init+0xfa>
 8003ab0:	4a94      	ldr	r2, [pc, #592]	@ (8003d04 <HAL_GPIO_Init+0x2a8>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d869      	bhi.n	8003b8a <HAL_GPIO_Init+0x12e>
 8003ab6:	4a94      	ldr	r2, [pc, #592]	@ (8003d08 <HAL_GPIO_Init+0x2ac>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d04c      	beq.n	8003b56 <HAL_GPIO_Init+0xfa>
 8003abc:	4a92      	ldr	r2, [pc, #584]	@ (8003d08 <HAL_GPIO_Init+0x2ac>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d863      	bhi.n	8003b8a <HAL_GPIO_Init+0x12e>
 8003ac2:	4a92      	ldr	r2, [pc, #584]	@ (8003d0c <HAL_GPIO_Init+0x2b0>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d046      	beq.n	8003b56 <HAL_GPIO_Init+0xfa>
 8003ac8:	4a90      	ldr	r2, [pc, #576]	@ (8003d0c <HAL_GPIO_Init+0x2b0>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d85d      	bhi.n	8003b8a <HAL_GPIO_Init+0x12e>
 8003ace:	2b12      	cmp	r3, #18
 8003ad0:	d82a      	bhi.n	8003b28 <HAL_GPIO_Init+0xcc>
 8003ad2:	2b12      	cmp	r3, #18
 8003ad4:	d859      	bhi.n	8003b8a <HAL_GPIO_Init+0x12e>
 8003ad6:	a201      	add	r2, pc, #4	@ (adr r2, 8003adc <HAL_GPIO_Init+0x80>)
 8003ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003adc:	08003b57 	.word	0x08003b57
 8003ae0:	08003b31 	.word	0x08003b31
 8003ae4:	08003b43 	.word	0x08003b43
 8003ae8:	08003b85 	.word	0x08003b85
 8003aec:	08003b8b 	.word	0x08003b8b
 8003af0:	08003b8b 	.word	0x08003b8b
 8003af4:	08003b8b 	.word	0x08003b8b
 8003af8:	08003b8b 	.word	0x08003b8b
 8003afc:	08003b8b 	.word	0x08003b8b
 8003b00:	08003b8b 	.word	0x08003b8b
 8003b04:	08003b8b 	.word	0x08003b8b
 8003b08:	08003b8b 	.word	0x08003b8b
 8003b0c:	08003b8b 	.word	0x08003b8b
 8003b10:	08003b8b 	.word	0x08003b8b
 8003b14:	08003b8b 	.word	0x08003b8b
 8003b18:	08003b8b 	.word	0x08003b8b
 8003b1c:	08003b8b 	.word	0x08003b8b
 8003b20:	08003b39 	.word	0x08003b39
 8003b24:	08003b4d 	.word	0x08003b4d
 8003b28:	4a79      	ldr	r2, [pc, #484]	@ (8003d10 <HAL_GPIO_Init+0x2b4>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d013      	beq.n	8003b56 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003b2e:	e02c      	b.n	8003b8a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	623b      	str	r3, [r7, #32]
          break;
 8003b36:	e029      	b.n	8003b8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	3304      	adds	r3, #4
 8003b3e:	623b      	str	r3, [r7, #32]
          break;
 8003b40:	e024      	b.n	8003b8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	3308      	adds	r3, #8
 8003b48:	623b      	str	r3, [r7, #32]
          break;
 8003b4a:	e01f      	b.n	8003b8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	330c      	adds	r3, #12
 8003b52:	623b      	str	r3, [r7, #32]
          break;
 8003b54:	e01a      	b.n	8003b8c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d102      	bne.n	8003b64 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003b5e:	2304      	movs	r3, #4
 8003b60:	623b      	str	r3, [r7, #32]
          break;
 8003b62:	e013      	b.n	8003b8c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d105      	bne.n	8003b78 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b6c:	2308      	movs	r3, #8
 8003b6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	69fa      	ldr	r2, [r7, #28]
 8003b74:	611a      	str	r2, [r3, #16]
          break;
 8003b76:	e009      	b.n	8003b8c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b78:	2308      	movs	r3, #8
 8003b7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	69fa      	ldr	r2, [r7, #28]
 8003b80:	615a      	str	r2, [r3, #20]
          break;
 8003b82:	e003      	b.n	8003b8c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003b84:	2300      	movs	r3, #0
 8003b86:	623b      	str	r3, [r7, #32]
          break;
 8003b88:	e000      	b.n	8003b8c <HAL_GPIO_Init+0x130>
          break;
 8003b8a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	2bff      	cmp	r3, #255	@ 0xff
 8003b90:	d801      	bhi.n	8003b96 <HAL_GPIO_Init+0x13a>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	e001      	b.n	8003b9a <HAL_GPIO_Init+0x13e>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	3304      	adds	r3, #4
 8003b9a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	2bff      	cmp	r3, #255	@ 0xff
 8003ba0:	d802      	bhi.n	8003ba8 <HAL_GPIO_Init+0x14c>
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	e002      	b.n	8003bae <HAL_GPIO_Init+0x152>
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003baa:	3b08      	subs	r3, #8
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	210f      	movs	r1, #15
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bbc:	43db      	mvns	r3, r3
 8003bbe:	401a      	ands	r2, r3
 8003bc0:	6a39      	ldr	r1, [r7, #32]
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 80b1 	beq.w	8003d3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003bdc:	4b4d      	ldr	r3, [pc, #308]	@ (8003d14 <HAL_GPIO_Init+0x2b8>)
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	4a4c      	ldr	r2, [pc, #304]	@ (8003d14 <HAL_GPIO_Init+0x2b8>)
 8003be2:	f043 0301 	orr.w	r3, r3, #1
 8003be6:	6193      	str	r3, [r2, #24]
 8003be8:	4b4a      	ldr	r3, [pc, #296]	@ (8003d14 <HAL_GPIO_Init+0x2b8>)
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	60bb      	str	r3, [r7, #8]
 8003bf2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003bf4:	4a48      	ldr	r2, [pc, #288]	@ (8003d18 <HAL_GPIO_Init+0x2bc>)
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf8:	089b      	lsrs	r3, r3, #2
 8003bfa:	3302      	adds	r3, #2
 8003bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c04:	f003 0303 	and.w	r3, r3, #3
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	220f      	movs	r2, #15
 8003c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c10:	43db      	mvns	r3, r3
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	4013      	ands	r3, r2
 8003c16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a40      	ldr	r2, [pc, #256]	@ (8003d1c <HAL_GPIO_Init+0x2c0>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d013      	beq.n	8003c48 <HAL_GPIO_Init+0x1ec>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a3f      	ldr	r2, [pc, #252]	@ (8003d20 <HAL_GPIO_Init+0x2c4>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d00d      	beq.n	8003c44 <HAL_GPIO_Init+0x1e8>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a3e      	ldr	r2, [pc, #248]	@ (8003d24 <HAL_GPIO_Init+0x2c8>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d007      	beq.n	8003c40 <HAL_GPIO_Init+0x1e4>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a3d      	ldr	r2, [pc, #244]	@ (8003d28 <HAL_GPIO_Init+0x2cc>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d101      	bne.n	8003c3c <HAL_GPIO_Init+0x1e0>
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e006      	b.n	8003c4a <HAL_GPIO_Init+0x1ee>
 8003c3c:	2304      	movs	r3, #4
 8003c3e:	e004      	b.n	8003c4a <HAL_GPIO_Init+0x1ee>
 8003c40:	2302      	movs	r3, #2
 8003c42:	e002      	b.n	8003c4a <HAL_GPIO_Init+0x1ee>
 8003c44:	2301      	movs	r3, #1
 8003c46:	e000      	b.n	8003c4a <HAL_GPIO_Init+0x1ee>
 8003c48:	2300      	movs	r3, #0
 8003c4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c4c:	f002 0203 	and.w	r2, r2, #3
 8003c50:	0092      	lsls	r2, r2, #2
 8003c52:	4093      	lsls	r3, r2
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003c5a:	492f      	ldr	r1, [pc, #188]	@ (8003d18 <HAL_GPIO_Init+0x2bc>)
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5e:	089b      	lsrs	r3, r3, #2
 8003c60:	3302      	adds	r3, #2
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d006      	beq.n	8003c82 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003c74:	4b2d      	ldr	r3, [pc, #180]	@ (8003d2c <HAL_GPIO_Init+0x2d0>)
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	492c      	ldr	r1, [pc, #176]	@ (8003d2c <HAL_GPIO_Init+0x2d0>)
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	608b      	str	r3, [r1, #8]
 8003c80:	e006      	b.n	8003c90 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003c82:	4b2a      	ldr	r3, [pc, #168]	@ (8003d2c <HAL_GPIO_Init+0x2d0>)
 8003c84:	689a      	ldr	r2, [r3, #8]
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	43db      	mvns	r3, r3
 8003c8a:	4928      	ldr	r1, [pc, #160]	@ (8003d2c <HAL_GPIO_Init+0x2d0>)
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d006      	beq.n	8003caa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003c9c:	4b23      	ldr	r3, [pc, #140]	@ (8003d2c <HAL_GPIO_Init+0x2d0>)
 8003c9e:	68da      	ldr	r2, [r3, #12]
 8003ca0:	4922      	ldr	r1, [pc, #136]	@ (8003d2c <HAL_GPIO_Init+0x2d0>)
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	60cb      	str	r3, [r1, #12]
 8003ca8:	e006      	b.n	8003cb8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003caa:	4b20      	ldr	r3, [pc, #128]	@ (8003d2c <HAL_GPIO_Init+0x2d0>)
 8003cac:	68da      	ldr	r2, [r3, #12]
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	43db      	mvns	r3, r3
 8003cb2:	491e      	ldr	r1, [pc, #120]	@ (8003d2c <HAL_GPIO_Init+0x2d0>)
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d006      	beq.n	8003cd2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003cc4:	4b19      	ldr	r3, [pc, #100]	@ (8003d2c <HAL_GPIO_Init+0x2d0>)
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	4918      	ldr	r1, [pc, #96]	@ (8003d2c <HAL_GPIO_Init+0x2d0>)
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	604b      	str	r3, [r1, #4]
 8003cd0:	e006      	b.n	8003ce0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003cd2:	4b16      	ldr	r3, [pc, #88]	@ (8003d2c <HAL_GPIO_Init+0x2d0>)
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	43db      	mvns	r3, r3
 8003cda:	4914      	ldr	r1, [pc, #80]	@ (8003d2c <HAL_GPIO_Init+0x2d0>)
 8003cdc:	4013      	ands	r3, r2
 8003cde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d021      	beq.n	8003d30 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003cec:	4b0f      	ldr	r3, [pc, #60]	@ (8003d2c <HAL_GPIO_Init+0x2d0>)
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	490e      	ldr	r1, [pc, #56]	@ (8003d2c <HAL_GPIO_Init+0x2d0>)
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	600b      	str	r3, [r1, #0]
 8003cf8:	e021      	b.n	8003d3e <HAL_GPIO_Init+0x2e2>
 8003cfa:	bf00      	nop
 8003cfc:	10320000 	.word	0x10320000
 8003d00:	10310000 	.word	0x10310000
 8003d04:	10220000 	.word	0x10220000
 8003d08:	10210000 	.word	0x10210000
 8003d0c:	10120000 	.word	0x10120000
 8003d10:	10110000 	.word	0x10110000
 8003d14:	40021000 	.word	0x40021000
 8003d18:	40010000 	.word	0x40010000
 8003d1c:	40010800 	.word	0x40010800
 8003d20:	40010c00 	.word	0x40010c00
 8003d24:	40011000 	.word	0x40011000
 8003d28:	40011400 	.word	0x40011400
 8003d2c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003d30:	4b0b      	ldr	r3, [pc, #44]	@ (8003d60 <HAL_GPIO_Init+0x304>)
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	43db      	mvns	r3, r3
 8003d38:	4909      	ldr	r1, [pc, #36]	@ (8003d60 <HAL_GPIO_Init+0x304>)
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d40:	3301      	adds	r3, #1
 8003d42:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f47f ae8e 	bne.w	8003a70 <HAL_GPIO_Init+0x14>
  }
}
 8003d54:	bf00      	nop
 8003d56:	bf00      	nop
 8003d58:	372c      	adds	r7, #44	@ 0x2c
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bc80      	pop	{r7}
 8003d5e:	4770      	bx	lr
 8003d60:	40010400 	.word	0x40010400

08003d64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	887b      	ldrh	r3, [r7, #2]
 8003d76:	4013      	ands	r3, r2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d002      	beq.n	8003d82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	73fb      	strb	r3, [r7, #15]
 8003d80:	e001      	b.n	8003d86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d82:	2300      	movs	r3, #0
 8003d84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3714      	adds	r7, #20
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bc80      	pop	{r7}
 8003d90:	4770      	bx	lr

08003d92 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b083      	sub	sp, #12
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	807b      	strh	r3, [r7, #2]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003da2:	787b      	ldrb	r3, [r7, #1]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003da8:	887a      	ldrh	r2, [r7, #2]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003dae:	e003      	b.n	8003db8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003db0:	887b      	ldrh	r3, [r7, #2]
 8003db2:	041a      	lsls	r2, r3, #16
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	611a      	str	r2, [r3, #16]
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bc80      	pop	{r7}
 8003dc0:	4770      	bx	lr

08003dc2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b085      	sub	sp, #20
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
 8003dca:	460b      	mov	r3, r1
 8003dcc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003dd4:	887a      	ldrh	r2, [r7, #2]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	041a      	lsls	r2, r3, #16
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	43d9      	mvns	r1, r3
 8003de0:	887b      	ldrh	r3, [r7, #2]
 8003de2:	400b      	ands	r3, r1
 8003de4:	431a      	orrs	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	611a      	str	r2, [r3, #16]
}
 8003dea:	bf00      	nop
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bc80      	pop	{r7}
 8003df2:	4770      	bx	lr

08003df4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e272      	b.n	80042ec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f000 8087 	beq.w	8003f22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e14:	4b92      	ldr	r3, [pc, #584]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f003 030c 	and.w	r3, r3, #12
 8003e1c:	2b04      	cmp	r3, #4
 8003e1e:	d00c      	beq.n	8003e3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e20:	4b8f      	ldr	r3, [pc, #572]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f003 030c 	and.w	r3, r3, #12
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d112      	bne.n	8003e52 <HAL_RCC_OscConfig+0x5e>
 8003e2c:	4b8c      	ldr	r3, [pc, #560]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e38:	d10b      	bne.n	8003e52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e3a:	4b89      	ldr	r3, [pc, #548]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d06c      	beq.n	8003f20 <HAL_RCC_OscConfig+0x12c>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d168      	bne.n	8003f20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e24c      	b.n	80042ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e5a:	d106      	bne.n	8003e6a <HAL_RCC_OscConfig+0x76>
 8003e5c:	4b80      	ldr	r3, [pc, #512]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a7f      	ldr	r2, [pc, #508]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003e62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e66:	6013      	str	r3, [r2, #0]
 8003e68:	e02e      	b.n	8003ec8 <HAL_RCC_OscConfig+0xd4>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10c      	bne.n	8003e8c <HAL_RCC_OscConfig+0x98>
 8003e72:	4b7b      	ldr	r3, [pc, #492]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a7a      	ldr	r2, [pc, #488]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003e78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e7c:	6013      	str	r3, [r2, #0]
 8003e7e:	4b78      	ldr	r3, [pc, #480]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a77      	ldr	r2, [pc, #476]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003e84:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e88:	6013      	str	r3, [r2, #0]
 8003e8a:	e01d      	b.n	8003ec8 <HAL_RCC_OscConfig+0xd4>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e94:	d10c      	bne.n	8003eb0 <HAL_RCC_OscConfig+0xbc>
 8003e96:	4b72      	ldr	r3, [pc, #456]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a71      	ldr	r2, [pc, #452]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003e9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ea0:	6013      	str	r3, [r2, #0]
 8003ea2:	4b6f      	ldr	r3, [pc, #444]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a6e      	ldr	r2, [pc, #440]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003ea8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eac:	6013      	str	r3, [r2, #0]
 8003eae:	e00b      	b.n	8003ec8 <HAL_RCC_OscConfig+0xd4>
 8003eb0:	4b6b      	ldr	r3, [pc, #428]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a6a      	ldr	r2, [pc, #424]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003eb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003eba:	6013      	str	r3, [r2, #0]
 8003ebc:	4b68      	ldr	r3, [pc, #416]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a67      	ldr	r2, [pc, #412]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003ec2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ec6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d013      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed0:	f7ff fa1e 	bl	8003310 <HAL_GetTick>
 8003ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ed8:	f7ff fa1a 	bl	8003310 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b64      	cmp	r3, #100	@ 0x64
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e200      	b.n	80042ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eea:	4b5d      	ldr	r3, [pc, #372]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d0f0      	beq.n	8003ed8 <HAL_RCC_OscConfig+0xe4>
 8003ef6:	e014      	b.n	8003f22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef8:	f7ff fa0a 	bl	8003310 <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f00:	f7ff fa06 	bl	8003310 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b64      	cmp	r3, #100	@ 0x64
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e1ec      	b.n	80042ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f12:	4b53      	ldr	r3, [pc, #332]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1f0      	bne.n	8003f00 <HAL_RCC_OscConfig+0x10c>
 8003f1e:	e000      	b.n	8003f22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d063      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f2e:	4b4c      	ldr	r3, [pc, #304]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f003 030c 	and.w	r3, r3, #12
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00b      	beq.n	8003f52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003f3a:	4b49      	ldr	r3, [pc, #292]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f003 030c 	and.w	r3, r3, #12
 8003f42:	2b08      	cmp	r3, #8
 8003f44:	d11c      	bne.n	8003f80 <HAL_RCC_OscConfig+0x18c>
 8003f46:	4b46      	ldr	r3, [pc, #280]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d116      	bne.n	8003f80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f52:	4b43      	ldr	r3, [pc, #268]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d005      	beq.n	8003f6a <HAL_RCC_OscConfig+0x176>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d001      	beq.n	8003f6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e1c0      	b.n	80042ec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f6a:	4b3d      	ldr	r3, [pc, #244]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	4939      	ldr	r1, [pc, #228]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f7e:	e03a      	b.n	8003ff6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d020      	beq.n	8003fca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f88:	4b36      	ldr	r3, [pc, #216]	@ (8004064 <HAL_RCC_OscConfig+0x270>)
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f8e:	f7ff f9bf 	bl	8003310 <HAL_GetTick>
 8003f92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f94:	e008      	b.n	8003fa8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f96:	f7ff f9bb 	bl	8003310 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d901      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e1a1      	b.n	80042ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa8:	4b2d      	ldr	r3, [pc, #180]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d0f0      	beq.n	8003f96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb4:	4b2a      	ldr	r3, [pc, #168]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	00db      	lsls	r3, r3, #3
 8003fc2:	4927      	ldr	r1, [pc, #156]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	600b      	str	r3, [r1, #0]
 8003fc8:	e015      	b.n	8003ff6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fca:	4b26      	ldr	r3, [pc, #152]	@ (8004064 <HAL_RCC_OscConfig+0x270>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd0:	f7ff f99e 	bl	8003310 <HAL_GetTick>
 8003fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fd8:	f7ff f99a 	bl	8003310 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e180      	b.n	80042ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fea:	4b1d      	ldr	r3, [pc, #116]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1f0      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0308 	and.w	r3, r3, #8
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d03a      	beq.n	8004078 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d019      	beq.n	800403e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800400a:	4b17      	ldr	r3, [pc, #92]	@ (8004068 <HAL_RCC_OscConfig+0x274>)
 800400c:	2201      	movs	r2, #1
 800400e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004010:	f7ff f97e 	bl	8003310 <HAL_GetTick>
 8004014:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004018:	f7ff f97a 	bl	8003310 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e160      	b.n	80042ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800402a:	4b0d      	ldr	r3, [pc, #52]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 800402c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d0f0      	beq.n	8004018 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004036:	2001      	movs	r0, #1
 8004038:	f000 fafe 	bl	8004638 <RCC_Delay>
 800403c:	e01c      	b.n	8004078 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800403e:	4b0a      	ldr	r3, [pc, #40]	@ (8004068 <HAL_RCC_OscConfig+0x274>)
 8004040:	2200      	movs	r2, #0
 8004042:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004044:	f7ff f964 	bl	8003310 <HAL_GetTick>
 8004048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800404a:	e00f      	b.n	800406c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800404c:	f7ff f960 	bl	8003310 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d908      	bls.n	800406c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e146      	b.n	80042ec <HAL_RCC_OscConfig+0x4f8>
 800405e:	bf00      	nop
 8004060:	40021000 	.word	0x40021000
 8004064:	42420000 	.word	0x42420000
 8004068:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800406c:	4b92      	ldr	r3, [pc, #584]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 800406e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1e9      	bne.n	800404c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0304 	and.w	r3, r3, #4
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 80a6 	beq.w	80041d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004086:	2300      	movs	r3, #0
 8004088:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800408a:	4b8b      	ldr	r3, [pc, #556]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 800408c:	69db      	ldr	r3, [r3, #28]
 800408e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10d      	bne.n	80040b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004096:	4b88      	ldr	r3, [pc, #544]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	4a87      	ldr	r2, [pc, #540]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 800409c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040a0:	61d3      	str	r3, [r2, #28]
 80040a2:	4b85      	ldr	r3, [pc, #532]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040aa:	60bb      	str	r3, [r7, #8]
 80040ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040ae:	2301      	movs	r3, #1
 80040b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040b2:	4b82      	ldr	r3, [pc, #520]	@ (80042bc <HAL_RCC_OscConfig+0x4c8>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d118      	bne.n	80040f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040be:	4b7f      	ldr	r3, [pc, #508]	@ (80042bc <HAL_RCC_OscConfig+0x4c8>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a7e      	ldr	r2, [pc, #504]	@ (80042bc <HAL_RCC_OscConfig+0x4c8>)
 80040c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040ca:	f7ff f921 	bl	8003310 <HAL_GetTick>
 80040ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d0:	e008      	b.n	80040e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040d2:	f7ff f91d 	bl	8003310 <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	2b64      	cmp	r3, #100	@ 0x64
 80040de:	d901      	bls.n	80040e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e103      	b.n	80042ec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e4:	4b75      	ldr	r3, [pc, #468]	@ (80042bc <HAL_RCC_OscConfig+0x4c8>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d0f0      	beq.n	80040d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d106      	bne.n	8004106 <HAL_RCC_OscConfig+0x312>
 80040f8:	4b6f      	ldr	r3, [pc, #444]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	4a6e      	ldr	r2, [pc, #440]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 80040fe:	f043 0301 	orr.w	r3, r3, #1
 8004102:	6213      	str	r3, [r2, #32]
 8004104:	e02d      	b.n	8004162 <HAL_RCC_OscConfig+0x36e>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10c      	bne.n	8004128 <HAL_RCC_OscConfig+0x334>
 800410e:	4b6a      	ldr	r3, [pc, #424]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	4a69      	ldr	r2, [pc, #420]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 8004114:	f023 0301 	bic.w	r3, r3, #1
 8004118:	6213      	str	r3, [r2, #32]
 800411a:	4b67      	ldr	r3, [pc, #412]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	4a66      	ldr	r2, [pc, #408]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 8004120:	f023 0304 	bic.w	r3, r3, #4
 8004124:	6213      	str	r3, [r2, #32]
 8004126:	e01c      	b.n	8004162 <HAL_RCC_OscConfig+0x36e>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	2b05      	cmp	r3, #5
 800412e:	d10c      	bne.n	800414a <HAL_RCC_OscConfig+0x356>
 8004130:	4b61      	ldr	r3, [pc, #388]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 8004132:	6a1b      	ldr	r3, [r3, #32]
 8004134:	4a60      	ldr	r2, [pc, #384]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 8004136:	f043 0304 	orr.w	r3, r3, #4
 800413a:	6213      	str	r3, [r2, #32]
 800413c:	4b5e      	ldr	r3, [pc, #376]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	4a5d      	ldr	r2, [pc, #372]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 8004142:	f043 0301 	orr.w	r3, r3, #1
 8004146:	6213      	str	r3, [r2, #32]
 8004148:	e00b      	b.n	8004162 <HAL_RCC_OscConfig+0x36e>
 800414a:	4b5b      	ldr	r3, [pc, #364]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	4a5a      	ldr	r2, [pc, #360]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 8004150:	f023 0301 	bic.w	r3, r3, #1
 8004154:	6213      	str	r3, [r2, #32]
 8004156:	4b58      	ldr	r3, [pc, #352]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	4a57      	ldr	r2, [pc, #348]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 800415c:	f023 0304 	bic.w	r3, r3, #4
 8004160:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d015      	beq.n	8004196 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800416a:	f7ff f8d1 	bl	8003310 <HAL_GetTick>
 800416e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004170:	e00a      	b.n	8004188 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004172:	f7ff f8cd 	bl	8003310 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004180:	4293      	cmp	r3, r2
 8004182:	d901      	bls.n	8004188 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e0b1      	b.n	80042ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004188:	4b4b      	ldr	r3, [pc, #300]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	f003 0302 	and.w	r3, r3, #2
 8004190:	2b00      	cmp	r3, #0
 8004192:	d0ee      	beq.n	8004172 <HAL_RCC_OscConfig+0x37e>
 8004194:	e014      	b.n	80041c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004196:	f7ff f8bb 	bl	8003310 <HAL_GetTick>
 800419a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800419c:	e00a      	b.n	80041b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800419e:	f7ff f8b7 	bl	8003310 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d901      	bls.n	80041b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e09b      	b.n	80042ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041b4:	4b40      	ldr	r3, [pc, #256]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1ee      	bne.n	800419e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80041c0:	7dfb      	ldrb	r3, [r7, #23]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d105      	bne.n	80041d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041c6:	4b3c      	ldr	r3, [pc, #240]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	4a3b      	ldr	r2, [pc, #236]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 80041cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f000 8087 	beq.w	80042ea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041dc:	4b36      	ldr	r3, [pc, #216]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f003 030c 	and.w	r3, r3, #12
 80041e4:	2b08      	cmp	r3, #8
 80041e6:	d061      	beq.n	80042ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	69db      	ldr	r3, [r3, #28]
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d146      	bne.n	800427e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041f0:	4b33      	ldr	r3, [pc, #204]	@ (80042c0 <HAL_RCC_OscConfig+0x4cc>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f6:	f7ff f88b 	bl	8003310 <HAL_GetTick>
 80041fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041fc:	e008      	b.n	8004210 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041fe:	f7ff f887 	bl	8003310 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d901      	bls.n	8004210 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e06d      	b.n	80042ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004210:	4b29      	ldr	r3, [pc, #164]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1f0      	bne.n	80041fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004224:	d108      	bne.n	8004238 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004226:	4b24      	ldr	r3, [pc, #144]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	4921      	ldr	r1, [pc, #132]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 8004234:	4313      	orrs	r3, r2
 8004236:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004238:	4b1f      	ldr	r3, [pc, #124]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a19      	ldr	r1, [r3, #32]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004248:	430b      	orrs	r3, r1
 800424a:	491b      	ldr	r1, [pc, #108]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 800424c:	4313      	orrs	r3, r2
 800424e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004250:	4b1b      	ldr	r3, [pc, #108]	@ (80042c0 <HAL_RCC_OscConfig+0x4cc>)
 8004252:	2201      	movs	r2, #1
 8004254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004256:	f7ff f85b 	bl	8003310 <HAL_GetTick>
 800425a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800425c:	e008      	b.n	8004270 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800425e:	f7ff f857 	bl	8003310 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	2b02      	cmp	r3, #2
 800426a:	d901      	bls.n	8004270 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e03d      	b.n	80042ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004270:	4b11      	ldr	r3, [pc, #68]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d0f0      	beq.n	800425e <HAL_RCC_OscConfig+0x46a>
 800427c:	e035      	b.n	80042ea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800427e:	4b10      	ldr	r3, [pc, #64]	@ (80042c0 <HAL_RCC_OscConfig+0x4cc>)
 8004280:	2200      	movs	r2, #0
 8004282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004284:	f7ff f844 	bl	8003310 <HAL_GetTick>
 8004288:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800428a:	e008      	b.n	800429e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800428c:	f7ff f840 	bl	8003310 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b02      	cmp	r3, #2
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e026      	b.n	80042ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800429e:	4b06      	ldr	r3, [pc, #24]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1f0      	bne.n	800428c <HAL_RCC_OscConfig+0x498>
 80042aa:	e01e      	b.n	80042ea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	69db      	ldr	r3, [r3, #28]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d107      	bne.n	80042c4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e019      	b.n	80042ec <HAL_RCC_OscConfig+0x4f8>
 80042b8:	40021000 	.word	0x40021000
 80042bc:	40007000 	.word	0x40007000
 80042c0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80042c4:	4b0b      	ldr	r3, [pc, #44]	@ (80042f4 <HAL_RCC_OscConfig+0x500>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d106      	bne.n	80042e6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d001      	beq.n	80042ea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e000      	b.n	80042ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3718      	adds	r7, #24
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	40021000 	.word	0x40021000

080042f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e0d0      	b.n	80044ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800430c:	4b6a      	ldr	r3, [pc, #424]	@ (80044b8 <HAL_RCC_ClockConfig+0x1c0>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	429a      	cmp	r2, r3
 8004318:	d910      	bls.n	800433c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800431a:	4b67      	ldr	r3, [pc, #412]	@ (80044b8 <HAL_RCC_ClockConfig+0x1c0>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f023 0207 	bic.w	r2, r3, #7
 8004322:	4965      	ldr	r1, [pc, #404]	@ (80044b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	4313      	orrs	r3, r2
 8004328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800432a:	4b63      	ldr	r3, [pc, #396]	@ (80044b8 <HAL_RCC_ClockConfig+0x1c0>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	683a      	ldr	r2, [r7, #0]
 8004334:	429a      	cmp	r2, r3
 8004336:	d001      	beq.n	800433c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e0b8      	b.n	80044ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d020      	beq.n	800438a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0304 	and.w	r3, r3, #4
 8004350:	2b00      	cmp	r3, #0
 8004352:	d005      	beq.n	8004360 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004354:	4b59      	ldr	r3, [pc, #356]	@ (80044bc <HAL_RCC_ClockConfig+0x1c4>)
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	4a58      	ldr	r2, [pc, #352]	@ (80044bc <HAL_RCC_ClockConfig+0x1c4>)
 800435a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800435e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0308 	and.w	r3, r3, #8
 8004368:	2b00      	cmp	r3, #0
 800436a:	d005      	beq.n	8004378 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800436c:	4b53      	ldr	r3, [pc, #332]	@ (80044bc <HAL_RCC_ClockConfig+0x1c4>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	4a52      	ldr	r2, [pc, #328]	@ (80044bc <HAL_RCC_ClockConfig+0x1c4>)
 8004372:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004376:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004378:	4b50      	ldr	r3, [pc, #320]	@ (80044bc <HAL_RCC_ClockConfig+0x1c4>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	494d      	ldr	r1, [pc, #308]	@ (80044bc <HAL_RCC_ClockConfig+0x1c4>)
 8004386:	4313      	orrs	r3, r2
 8004388:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d040      	beq.n	8004418 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d107      	bne.n	80043ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800439e:	4b47      	ldr	r3, [pc, #284]	@ (80044bc <HAL_RCC_ClockConfig+0x1c4>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d115      	bne.n	80043d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e07f      	b.n	80044ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d107      	bne.n	80043c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043b6:	4b41      	ldr	r3, [pc, #260]	@ (80044bc <HAL_RCC_ClockConfig+0x1c4>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d109      	bne.n	80043d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e073      	b.n	80044ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c6:	4b3d      	ldr	r3, [pc, #244]	@ (80044bc <HAL_RCC_ClockConfig+0x1c4>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e06b      	b.n	80044ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043d6:	4b39      	ldr	r3, [pc, #228]	@ (80044bc <HAL_RCC_ClockConfig+0x1c4>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f023 0203 	bic.w	r2, r3, #3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	4936      	ldr	r1, [pc, #216]	@ (80044bc <HAL_RCC_ClockConfig+0x1c4>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043e8:	f7fe ff92 	bl	8003310 <HAL_GetTick>
 80043ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ee:	e00a      	b.n	8004406 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043f0:	f7fe ff8e 	bl	8003310 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043fe:	4293      	cmp	r3, r2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e053      	b.n	80044ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004406:	4b2d      	ldr	r3, [pc, #180]	@ (80044bc <HAL_RCC_ClockConfig+0x1c4>)
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f003 020c 	and.w	r2, r3, #12
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	429a      	cmp	r2, r3
 8004416:	d1eb      	bne.n	80043f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004418:	4b27      	ldr	r3, [pc, #156]	@ (80044b8 <HAL_RCC_ClockConfig+0x1c0>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0307 	and.w	r3, r3, #7
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	429a      	cmp	r2, r3
 8004424:	d210      	bcs.n	8004448 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004426:	4b24      	ldr	r3, [pc, #144]	@ (80044b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f023 0207 	bic.w	r2, r3, #7
 800442e:	4922      	ldr	r1, [pc, #136]	@ (80044b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	4313      	orrs	r3, r2
 8004434:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004436:	4b20      	ldr	r3, [pc, #128]	@ (80044b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0307 	and.w	r3, r3, #7
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	429a      	cmp	r2, r3
 8004442:	d001      	beq.n	8004448 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e032      	b.n	80044ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0304 	and.w	r3, r3, #4
 8004450:	2b00      	cmp	r3, #0
 8004452:	d008      	beq.n	8004466 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004454:	4b19      	ldr	r3, [pc, #100]	@ (80044bc <HAL_RCC_ClockConfig+0x1c4>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	4916      	ldr	r1, [pc, #88]	@ (80044bc <HAL_RCC_ClockConfig+0x1c4>)
 8004462:	4313      	orrs	r3, r2
 8004464:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0308 	and.w	r3, r3, #8
 800446e:	2b00      	cmp	r3, #0
 8004470:	d009      	beq.n	8004486 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004472:	4b12      	ldr	r3, [pc, #72]	@ (80044bc <HAL_RCC_ClockConfig+0x1c4>)
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	490e      	ldr	r1, [pc, #56]	@ (80044bc <HAL_RCC_ClockConfig+0x1c4>)
 8004482:	4313      	orrs	r3, r2
 8004484:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004486:	f000 f821 	bl	80044cc <HAL_RCC_GetSysClockFreq>
 800448a:	4602      	mov	r2, r0
 800448c:	4b0b      	ldr	r3, [pc, #44]	@ (80044bc <HAL_RCC_ClockConfig+0x1c4>)
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	091b      	lsrs	r3, r3, #4
 8004492:	f003 030f 	and.w	r3, r3, #15
 8004496:	490a      	ldr	r1, [pc, #40]	@ (80044c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004498:	5ccb      	ldrb	r3, [r1, r3]
 800449a:	fa22 f303 	lsr.w	r3, r2, r3
 800449e:	4a09      	ldr	r2, [pc, #36]	@ (80044c4 <HAL_RCC_ClockConfig+0x1cc>)
 80044a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80044a2:	4b09      	ldr	r3, [pc, #36]	@ (80044c8 <HAL_RCC_ClockConfig+0x1d0>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7fd f86e 	bl	8001588 <HAL_InitTick>

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	40022000 	.word	0x40022000
 80044bc:	40021000 	.word	0x40021000
 80044c0:	08009744 	.word	0x08009744
 80044c4:	200000a0 	.word	0x200000a0
 80044c8:	20000144 	.word	0x20000144

080044cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	60fb      	str	r3, [r7, #12]
 80044d6:	2300      	movs	r3, #0
 80044d8:	60bb      	str	r3, [r7, #8]
 80044da:	2300      	movs	r3, #0
 80044dc:	617b      	str	r3, [r7, #20]
 80044de:	2300      	movs	r3, #0
 80044e0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80044e2:	2300      	movs	r3, #0
 80044e4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80044e6:	4b1e      	ldr	r3, [pc, #120]	@ (8004560 <HAL_RCC_GetSysClockFreq+0x94>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f003 030c 	and.w	r3, r3, #12
 80044f2:	2b04      	cmp	r3, #4
 80044f4:	d002      	beq.n	80044fc <HAL_RCC_GetSysClockFreq+0x30>
 80044f6:	2b08      	cmp	r3, #8
 80044f8:	d003      	beq.n	8004502 <HAL_RCC_GetSysClockFreq+0x36>
 80044fa:	e027      	b.n	800454c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044fc:	4b19      	ldr	r3, [pc, #100]	@ (8004564 <HAL_RCC_GetSysClockFreq+0x98>)
 80044fe:	613b      	str	r3, [r7, #16]
      break;
 8004500:	e027      	b.n	8004552 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	0c9b      	lsrs	r3, r3, #18
 8004506:	f003 030f 	and.w	r3, r3, #15
 800450a:	4a17      	ldr	r2, [pc, #92]	@ (8004568 <HAL_RCC_GetSysClockFreq+0x9c>)
 800450c:	5cd3      	ldrb	r3, [r2, r3]
 800450e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d010      	beq.n	800453c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800451a:	4b11      	ldr	r3, [pc, #68]	@ (8004560 <HAL_RCC_GetSysClockFreq+0x94>)
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	0c5b      	lsrs	r3, r3, #17
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	4a11      	ldr	r2, [pc, #68]	@ (800456c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004526:	5cd3      	ldrb	r3, [r2, r3]
 8004528:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a0d      	ldr	r2, [pc, #52]	@ (8004564 <HAL_RCC_GetSysClockFreq+0x98>)
 800452e:	fb03 f202 	mul.w	r2, r3, r2
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	fbb2 f3f3 	udiv	r3, r2, r3
 8004538:	617b      	str	r3, [r7, #20]
 800453a:	e004      	b.n	8004546 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a0c      	ldr	r2, [pc, #48]	@ (8004570 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004540:	fb02 f303 	mul.w	r3, r2, r3
 8004544:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	613b      	str	r3, [r7, #16]
      break;
 800454a:	e002      	b.n	8004552 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800454c:	4b05      	ldr	r3, [pc, #20]	@ (8004564 <HAL_RCC_GetSysClockFreq+0x98>)
 800454e:	613b      	str	r3, [r7, #16]
      break;
 8004550:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004552:	693b      	ldr	r3, [r7, #16]
}
 8004554:	4618      	mov	r0, r3
 8004556:	371c      	adds	r7, #28
 8004558:	46bd      	mov	sp, r7
 800455a:	bc80      	pop	{r7}
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	40021000 	.word	0x40021000
 8004564:	007a1200 	.word	0x007a1200
 8004568:	080097a0 	.word	0x080097a0
 800456c:	080097b0 	.word	0x080097b0
 8004570:	003d0900 	.word	0x003d0900

08004574 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004574:	b480      	push	{r7}
 8004576:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004578:	4b02      	ldr	r3, [pc, #8]	@ (8004584 <HAL_RCC_GetHCLKFreq+0x10>)
 800457a:	681b      	ldr	r3, [r3, #0]
}
 800457c:	4618      	mov	r0, r3
 800457e:	46bd      	mov	sp, r7
 8004580:	bc80      	pop	{r7}
 8004582:	4770      	bx	lr
 8004584:	200000a0 	.word	0x200000a0

08004588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800458c:	f7ff fff2 	bl	8004574 <HAL_RCC_GetHCLKFreq>
 8004590:	4602      	mov	r2, r0
 8004592:	4b05      	ldr	r3, [pc, #20]	@ (80045a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	0a1b      	lsrs	r3, r3, #8
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	4903      	ldr	r1, [pc, #12]	@ (80045ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800459e:	5ccb      	ldrb	r3, [r1, r3]
 80045a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	40021000 	.word	0x40021000
 80045ac:	08009754 	.word	0x08009754

080045b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045b4:	f7ff ffde 	bl	8004574 <HAL_RCC_GetHCLKFreq>
 80045b8:	4602      	mov	r2, r0
 80045ba:	4b05      	ldr	r3, [pc, #20]	@ (80045d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	0adb      	lsrs	r3, r3, #11
 80045c0:	f003 0307 	and.w	r3, r3, #7
 80045c4:	4903      	ldr	r1, [pc, #12]	@ (80045d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045c6:	5ccb      	ldrb	r3, [r1, r3]
 80045c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	40021000 	.word	0x40021000
 80045d4:	08009754 	.word	0x08009754

080045d8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	220f      	movs	r2, #15
 80045e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80045e8:	4b11      	ldr	r3, [pc, #68]	@ (8004630 <HAL_RCC_GetClockConfig+0x58>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f003 0203 	and.w	r2, r3, #3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80045f4:	4b0e      	ldr	r3, [pc, #56]	@ (8004630 <HAL_RCC_GetClockConfig+0x58>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004600:	4b0b      	ldr	r3, [pc, #44]	@ (8004630 <HAL_RCC_GetClockConfig+0x58>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800460c:	4b08      	ldr	r3, [pc, #32]	@ (8004630 <HAL_RCC_GetClockConfig+0x58>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	08db      	lsrs	r3, r3, #3
 8004612:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800461a:	4b06      	ldr	r3, [pc, #24]	@ (8004634 <HAL_RCC_GetClockConfig+0x5c>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0207 	and.w	r2, r3, #7
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004626:	bf00      	nop
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	bc80      	pop	{r7}
 800462e:	4770      	bx	lr
 8004630:	40021000 	.word	0x40021000
 8004634:	40022000 	.word	0x40022000

08004638 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004640:	4b0a      	ldr	r3, [pc, #40]	@ (800466c <RCC_Delay+0x34>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a0a      	ldr	r2, [pc, #40]	@ (8004670 <RCC_Delay+0x38>)
 8004646:	fba2 2303 	umull	r2, r3, r2, r3
 800464a:	0a5b      	lsrs	r3, r3, #9
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	fb02 f303 	mul.w	r3, r2, r3
 8004652:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004654:	bf00      	nop
  }
  while (Delay --);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	1e5a      	subs	r2, r3, #1
 800465a:	60fa      	str	r2, [r7, #12]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1f9      	bne.n	8004654 <RCC_Delay+0x1c>
}
 8004660:	bf00      	nop
 8004662:	bf00      	nop
 8004664:	3714      	adds	r7, #20
 8004666:	46bd      	mov	sp, r7
 8004668:	bc80      	pop	{r7}
 800466a:	4770      	bx	lr
 800466c:	200000a0 	.word	0x200000a0
 8004670:	10624dd3 	.word	0x10624dd3

08004674 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e041      	b.n	800470a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d106      	bne.n	80046a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f839 	bl	8004712 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2202      	movs	r2, #2
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	3304      	adds	r3, #4
 80046b0:	4619      	mov	r1, r3
 80046b2:	4610      	mov	r0, r2
 80046b4:	f000 f99c 	bl	80049f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004712:	b480      	push	{r7}
 8004714:	b083      	sub	sp, #12
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800471a:	bf00      	nop
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	bc80      	pop	{r7}
 8004722:	4770      	bx	lr

08004724 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b01      	cmp	r3, #1
 8004736:	d001      	beq.n	800473c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e03a      	b.n	80047b2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2202      	movs	r2, #2
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68da      	ldr	r2, [r3, #12]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f042 0201 	orr.w	r2, r2, #1
 8004752:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a18      	ldr	r2, [pc, #96]	@ (80047bc <HAL_TIM_Base_Start_IT+0x98>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d00e      	beq.n	800477c <HAL_TIM_Base_Start_IT+0x58>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004766:	d009      	beq.n	800477c <HAL_TIM_Base_Start_IT+0x58>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a14      	ldr	r2, [pc, #80]	@ (80047c0 <HAL_TIM_Base_Start_IT+0x9c>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d004      	beq.n	800477c <HAL_TIM_Base_Start_IT+0x58>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a13      	ldr	r2, [pc, #76]	@ (80047c4 <HAL_TIM_Base_Start_IT+0xa0>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d111      	bne.n	80047a0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f003 0307 	and.w	r3, r3, #7
 8004786:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2b06      	cmp	r3, #6
 800478c:	d010      	beq.n	80047b0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f042 0201 	orr.w	r2, r2, #1
 800479c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800479e:	e007      	b.n	80047b0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f042 0201 	orr.w	r2, r2, #1
 80047ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3714      	adds	r7, #20
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bc80      	pop	{r7}
 80047ba:	4770      	bx	lr
 80047bc:	40012c00 	.word	0x40012c00
 80047c0:	40000400 	.word	0x40000400
 80047c4:	40000800 	.word	0x40000800

080047c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d020      	beq.n	800482c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d01b      	beq.n	800482c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f06f 0202 	mvn.w	r2, #2
 80047fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	f003 0303 	and.w	r3, r3, #3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d003      	beq.n	800481a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f8d1 	bl	80049ba <HAL_TIM_IC_CaptureCallback>
 8004818:	e005      	b.n	8004826 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f8c4 	bl	80049a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 f8d3 	bl	80049cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	f003 0304 	and.w	r3, r3, #4
 8004832:	2b00      	cmp	r3, #0
 8004834:	d020      	beq.n	8004878 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f003 0304 	and.w	r3, r3, #4
 800483c:	2b00      	cmp	r3, #0
 800483e:	d01b      	beq.n	8004878 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f06f 0204 	mvn.w	r2, #4
 8004848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2202      	movs	r2, #2
 800484e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800485a:	2b00      	cmp	r3, #0
 800485c:	d003      	beq.n	8004866 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f8ab 	bl	80049ba <HAL_TIM_IC_CaptureCallback>
 8004864:	e005      	b.n	8004872 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f89e 	bl	80049a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 f8ad 	bl	80049cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	f003 0308 	and.w	r3, r3, #8
 800487e:	2b00      	cmp	r3, #0
 8004880:	d020      	beq.n	80048c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f003 0308 	and.w	r3, r3, #8
 8004888:	2b00      	cmp	r3, #0
 800488a:	d01b      	beq.n	80048c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f06f 0208 	mvn.w	r2, #8
 8004894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2204      	movs	r2, #4
 800489a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	f003 0303 	and.w	r3, r3, #3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f885 	bl	80049ba <HAL_TIM_IC_CaptureCallback>
 80048b0:	e005      	b.n	80048be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 f878 	bl	80049a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 f887 	bl	80049cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	f003 0310 	and.w	r3, r3, #16
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d020      	beq.n	8004910 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f003 0310 	and.w	r3, r3, #16
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d01b      	beq.n	8004910 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f06f 0210 	mvn.w	r2, #16
 80048e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2208      	movs	r2, #8
 80048e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f85f 	bl	80049ba <HAL_TIM_IC_CaptureCallback>
 80048fc:	e005      	b.n	800490a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f852 	bl	80049a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 f861 	bl	80049cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00c      	beq.n	8004934 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	2b00      	cmp	r3, #0
 8004922:	d007      	beq.n	8004934 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f06f 0201 	mvn.w	r2, #1
 800492c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f7fc fd4e 	bl	80013d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00c      	beq.n	8004958 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004944:	2b00      	cmp	r3, #0
 8004946:	d007      	beq.n	8004958 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f8c3 	bl	8004ade <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00c      	beq.n	800497c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004968:	2b00      	cmp	r3, #0
 800496a:	d007      	beq.n	800497c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f831 	bl	80049de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	f003 0320 	and.w	r3, r3, #32
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00c      	beq.n	80049a0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f003 0320 	and.w	r3, r3, #32
 800498c:	2b00      	cmp	r3, #0
 800498e:	d007      	beq.n	80049a0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f06f 0220 	mvn.w	r2, #32
 8004998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f896 	bl	8004acc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049a0:	bf00      	nop
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bc80      	pop	{r7}
 80049b8:	4770      	bx	lr

080049ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b083      	sub	sp, #12
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049c2:	bf00      	nop
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bc80      	pop	{r7}
 80049ca:	4770      	bx	lr

080049cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	bc80      	pop	{r7}
 80049dc:	4770      	bx	lr

080049de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049de:	b480      	push	{r7}
 80049e0:	b083      	sub	sp, #12
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bc80      	pop	{r7}
 80049ee:	4770      	bx	lr

080049f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a2f      	ldr	r2, [pc, #188]	@ (8004ac0 <TIM_Base_SetConfig+0xd0>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d00b      	beq.n	8004a20 <TIM_Base_SetConfig+0x30>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a0e:	d007      	beq.n	8004a20 <TIM_Base_SetConfig+0x30>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a2c      	ldr	r2, [pc, #176]	@ (8004ac4 <TIM_Base_SetConfig+0xd4>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d003      	beq.n	8004a20 <TIM_Base_SetConfig+0x30>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a2b      	ldr	r2, [pc, #172]	@ (8004ac8 <TIM_Base_SetConfig+0xd8>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d108      	bne.n	8004a32 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a22      	ldr	r2, [pc, #136]	@ (8004ac0 <TIM_Base_SetConfig+0xd0>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d00b      	beq.n	8004a52 <TIM_Base_SetConfig+0x62>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a40:	d007      	beq.n	8004a52 <TIM_Base_SetConfig+0x62>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a1f      	ldr	r2, [pc, #124]	@ (8004ac4 <TIM_Base_SetConfig+0xd4>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d003      	beq.n	8004a52 <TIM_Base_SetConfig+0x62>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a1e      	ldr	r2, [pc, #120]	@ (8004ac8 <TIM_Base_SetConfig+0xd8>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d108      	bne.n	8004a64 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a0d      	ldr	r2, [pc, #52]	@ (8004ac0 <TIM_Base_SetConfig+0xd0>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d103      	bne.n	8004a98 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	691a      	ldr	r2, [r3, #16]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d005      	beq.n	8004ab6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	f023 0201 	bic.w	r2, r3, #1
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	611a      	str	r2, [r3, #16]
  }
}
 8004ab6:	bf00      	nop
 8004ab8:	3714      	adds	r7, #20
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bc80      	pop	{r7}
 8004abe:	4770      	bx	lr
 8004ac0:	40012c00 	.word	0x40012c00
 8004ac4:	40000400 	.word	0x40000400
 8004ac8:	40000800 	.word	0x40000800

08004acc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bc80      	pop	{r7}
 8004adc:	4770      	bx	lr

08004ade <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b083      	sub	sp, #12
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ae6:	bf00      	nop
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bc80      	pop	{r7}
 8004aee:	4770      	bx	lr

08004af0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e042      	b.n	8004b88 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d106      	bne.n	8004b1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7fc fcaa 	bl	8001470 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2224      	movs	r2, #36	@ 0x24
 8004b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68da      	ldr	r2, [r3, #12]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 fdb7 	bl	80056a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	691a      	ldr	r2, [r3, #16]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	695a      	ldr	r2, [r3, #20]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68da      	ldr	r2, [r3, #12]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2220      	movs	r2, #32
 8004b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2220      	movs	r2, #32
 8004b7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b08a      	sub	sp, #40	@ 0x28
 8004b94:	af02      	add	r7, sp, #8
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	603b      	str	r3, [r7, #0]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b20      	cmp	r3, #32
 8004bae:	d175      	bne.n	8004c9c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d002      	beq.n	8004bbc <HAL_UART_Transmit+0x2c>
 8004bb6:	88fb      	ldrh	r3, [r7, #6]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e06e      	b.n	8004c9e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2221      	movs	r2, #33	@ 0x21
 8004bca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bce:	f7fe fb9f 	bl	8003310 <HAL_GetTick>
 8004bd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	88fa      	ldrh	r2, [r7, #6]
 8004bd8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	88fa      	ldrh	r2, [r7, #6]
 8004bde:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004be8:	d108      	bne.n	8004bfc <HAL_UART_Transmit+0x6c>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d104      	bne.n	8004bfc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	61bb      	str	r3, [r7, #24]
 8004bfa:	e003      	b.n	8004c04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c00:	2300      	movs	r3, #0
 8004c02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c04:	e02e      	b.n	8004c64 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	2180      	movs	r1, #128	@ 0x80
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 fb1c 	bl	800524e <UART_WaitOnFlagUntilTimeout>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d005      	beq.n	8004c28 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e03a      	b.n	8004c9e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10b      	bne.n	8004c46 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	881b      	ldrh	r3, [r3, #0]
 8004c32:	461a      	mov	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	3302      	adds	r3, #2
 8004c42:	61bb      	str	r3, [r7, #24]
 8004c44:	e007      	b.n	8004c56 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	781a      	ldrb	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	3301      	adds	r3, #1
 8004c54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1cb      	bne.n	8004c06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	9300      	str	r3, [sp, #0]
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2200      	movs	r2, #0
 8004c76:	2140      	movs	r1, #64	@ 0x40
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 fae8 	bl	800524e <UART_WaitOnFlagUntilTimeout>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d005      	beq.n	8004c90 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2220      	movs	r2, #32
 8004c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e006      	b.n	8004c9e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2220      	movs	r2, #32
 8004c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	e000      	b.n	8004c9e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004c9c:	2302      	movs	r3, #2
  }
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3720      	adds	r7, #32
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b084      	sub	sp, #16
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	60f8      	str	r0, [r7, #12]
 8004cae:	60b9      	str	r1, [r7, #8]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b20      	cmp	r3, #32
 8004cbe:	d112      	bne.n	8004ce6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d002      	beq.n	8004ccc <HAL_UART_Receive_IT+0x26>
 8004cc6:	88fb      	ldrh	r3, [r7, #6]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d101      	bne.n	8004cd0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e00b      	b.n	8004ce8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004cd6:	88fb      	ldrh	r3, [r7, #6]
 8004cd8:	461a      	mov	r2, r3
 8004cda:	68b9      	ldr	r1, [r7, #8]
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f000 fb0f 	bl	8005300 <UART_Start_Receive_IT>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	e000      	b.n	8004ce8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004ce6:	2302      	movs	r3, #2
  }
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3710      	adds	r7, #16
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b0ba      	sub	sp, #232	@ 0xe8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004d16:	2300      	movs	r3, #0
 8004d18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d26:	f003 030f 	and.w	r3, r3, #15
 8004d2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004d2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10f      	bne.n	8004d56 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d3a:	f003 0320 	and.w	r3, r3, #32
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d009      	beq.n	8004d56 <HAL_UART_IRQHandler+0x66>
 8004d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d46:	f003 0320 	and.w	r3, r3, #32
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 fbec 	bl	800552c <UART_Receive_IT>
      return;
 8004d54:	e25b      	b.n	800520e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004d56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f000 80de 	beq.w	8004f1c <HAL_UART_IRQHandler+0x22c>
 8004d60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d106      	bne.n	8004d7a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d70:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f000 80d1 	beq.w	8004f1c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00b      	beq.n	8004d9e <HAL_UART_IRQHandler+0xae>
 8004d86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d005      	beq.n	8004d9e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d96:	f043 0201 	orr.w	r2, r3, #1
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004da2:	f003 0304 	and.w	r3, r3, #4
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00b      	beq.n	8004dc2 <HAL_UART_IRQHandler+0xd2>
 8004daa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d005      	beq.n	8004dc2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dba:	f043 0202 	orr.w	r2, r3, #2
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00b      	beq.n	8004de6 <HAL_UART_IRQHandler+0xf6>
 8004dce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d005      	beq.n	8004de6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dde:	f043 0204 	orr.w	r2, r3, #4
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dea:	f003 0308 	and.w	r3, r3, #8
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d011      	beq.n	8004e16 <HAL_UART_IRQHandler+0x126>
 8004df2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004df6:	f003 0320 	and.w	r3, r3, #32
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d105      	bne.n	8004e0a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004dfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d005      	beq.n	8004e16 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e0e:	f043 0208 	orr.w	r2, r3, #8
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f000 81f2 	beq.w	8005204 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e24:	f003 0320 	and.w	r3, r3, #32
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d008      	beq.n	8004e3e <HAL_UART_IRQHandler+0x14e>
 8004e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e30:	f003 0320 	and.w	r3, r3, #32
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d002      	beq.n	8004e3e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 fb77 	bl	800552c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	695b      	ldr	r3, [r3, #20]
 8004e44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	bf14      	ite	ne
 8004e4c:	2301      	movne	r3, #1
 8004e4e:	2300      	moveq	r3, #0
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e5a:	f003 0308 	and.w	r3, r3, #8
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d103      	bne.n	8004e6a <HAL_UART_IRQHandler+0x17a>
 8004e62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d04f      	beq.n	8004f0a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 fa81 	bl	8005372 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d041      	beq.n	8004f02 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	3314      	adds	r3, #20
 8004e84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004e8c:	e853 3f00 	ldrex	r3, [r3]
 8004e90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004e94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	3314      	adds	r3, #20
 8004ea6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004eaa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004eae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004eb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004eba:	e841 2300 	strex	r3, r2, [r1]
 8004ebe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004ec2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1d9      	bne.n	8004e7e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d013      	beq.n	8004efa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ed6:	4a7e      	ldr	r2, [pc, #504]	@ (80050d0 <HAL_UART_IRQHandler+0x3e0>)
 8004ed8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7fe fb3a 	bl	8003558 <HAL_DMA_Abort_IT>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d016      	beq.n	8004f18 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004ef4:	4610      	mov	r0, r2
 8004ef6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ef8:	e00e      	b.n	8004f18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f993 	bl	8005226 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f00:	e00a      	b.n	8004f18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f98f 	bl	8005226 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f08:	e006      	b.n	8004f18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f98b 	bl	8005226 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004f16:	e175      	b.n	8005204 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f18:	bf00      	nop
    return;
 8004f1a:	e173      	b.n	8005204 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	f040 814f 	bne.w	80051c4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f2a:	f003 0310 	and.w	r3, r3, #16
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f000 8148 	beq.w	80051c4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f38:	f003 0310 	and.w	r3, r3, #16
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f000 8141 	beq.w	80051c4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f42:	2300      	movs	r3, #0
 8004f44:	60bb      	str	r3, [r7, #8]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	60bb      	str	r3, [r7, #8]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	60bb      	str	r3, [r7, #8]
 8004f56:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f000 80b6 	beq.w	80050d4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f000 8145 	beq.w	8005208 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004f82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f86:	429a      	cmp	r2, r3
 8004f88:	f080 813e 	bcs.w	8005208 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f92:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	2b20      	cmp	r3, #32
 8004f9c:	f000 8088 	beq.w	80050b0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	330c      	adds	r3, #12
 8004fa6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004faa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004fae:	e853 3f00 	ldrex	r3, [r3]
 8004fb2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004fb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004fba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fbe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	330c      	adds	r3, #12
 8004fc8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004fcc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004fd0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004fd8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004fdc:	e841 2300 	strex	r3, r2, [r1]
 8004fe0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004fe4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1d9      	bne.n	8004fa0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	3314      	adds	r3, #20
 8004ff2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ff6:	e853 3f00 	ldrex	r3, [r3]
 8004ffa:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004ffc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ffe:	f023 0301 	bic.w	r3, r3, #1
 8005002:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	3314      	adds	r3, #20
 800500c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005010:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005014:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005016:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005018:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800501c:	e841 2300 	strex	r3, r2, [r1]
 8005020:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005022:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1e1      	bne.n	8004fec <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	3314      	adds	r3, #20
 800502e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005030:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005032:	e853 3f00 	ldrex	r3, [r3]
 8005036:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005038:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800503a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800503e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	3314      	adds	r3, #20
 8005048:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800504c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800504e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005050:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005052:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005054:	e841 2300 	strex	r3, r2, [r1]
 8005058:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800505a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1e3      	bne.n	8005028 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2220      	movs	r2, #32
 8005064:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	330c      	adds	r3, #12
 8005074:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005076:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005078:	e853 3f00 	ldrex	r3, [r3]
 800507c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800507e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005080:	f023 0310 	bic.w	r3, r3, #16
 8005084:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	330c      	adds	r3, #12
 800508e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005092:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005094:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005096:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005098:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800509a:	e841 2300 	strex	r3, r2, [r1]
 800509e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80050a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1e3      	bne.n	800506e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7fe fa19 	bl	80034e2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2202      	movs	r2, #2
 80050b4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80050be:	b29b      	uxth	r3, r3
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	4619      	mov	r1, r3
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f8b6 	bl	8005238 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050cc:	e09c      	b.n	8005208 <HAL_UART_IRQHandler+0x518>
 80050ce:	bf00      	nop
 80050d0:	08005437 	.word	0x08005437
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80050dc:	b29b      	uxth	r3, r3
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	f000 808e 	beq.w	800520c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80050f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f000 8089 	beq.w	800520c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	330c      	adds	r3, #12
 8005100:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005104:	e853 3f00 	ldrex	r3, [r3]
 8005108:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800510a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800510c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005110:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	330c      	adds	r3, #12
 800511a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800511e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005120:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005122:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005124:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005126:	e841 2300 	strex	r3, r2, [r1]
 800512a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800512c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1e3      	bne.n	80050fa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	3314      	adds	r3, #20
 8005138:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800513a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513c:	e853 3f00 	ldrex	r3, [r3]
 8005140:	623b      	str	r3, [r7, #32]
   return(result);
 8005142:	6a3b      	ldr	r3, [r7, #32]
 8005144:	f023 0301 	bic.w	r3, r3, #1
 8005148:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	3314      	adds	r3, #20
 8005152:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005156:	633a      	str	r2, [r7, #48]	@ 0x30
 8005158:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800515c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800515e:	e841 2300 	strex	r3, r2, [r1]
 8005162:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1e3      	bne.n	8005132 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2220      	movs	r2, #32
 800516e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	330c      	adds	r3, #12
 800517e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	e853 3f00 	ldrex	r3, [r3]
 8005186:	60fb      	str	r3, [r7, #12]
   return(result);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f023 0310 	bic.w	r3, r3, #16
 800518e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	330c      	adds	r3, #12
 8005198:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800519c:	61fa      	str	r2, [r7, #28]
 800519e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a0:	69b9      	ldr	r1, [r7, #24]
 80051a2:	69fa      	ldr	r2, [r7, #28]
 80051a4:	e841 2300 	strex	r3, r2, [r1]
 80051a8:	617b      	str	r3, [r7, #20]
   return(result);
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d1e3      	bne.n	8005178 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2202      	movs	r2, #2
 80051b4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80051b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80051ba:	4619      	mov	r1, r3
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 f83b 	bl	8005238 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80051c2:	e023      	b.n	800520c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80051c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d009      	beq.n	80051e4 <HAL_UART_IRQHandler+0x4f4>
 80051d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d003      	beq.n	80051e4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 f93e 	bl	800545e <UART_Transmit_IT>
    return;
 80051e2:	e014      	b.n	800520e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80051e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00e      	beq.n	800520e <HAL_UART_IRQHandler+0x51e>
 80051f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d008      	beq.n	800520e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f000 f97d 	bl	80054fc <UART_EndTransmit_IT>
    return;
 8005202:	e004      	b.n	800520e <HAL_UART_IRQHandler+0x51e>
    return;
 8005204:	bf00      	nop
 8005206:	e002      	b.n	800520e <HAL_UART_IRQHandler+0x51e>
      return;
 8005208:	bf00      	nop
 800520a:	e000      	b.n	800520e <HAL_UART_IRQHandler+0x51e>
      return;
 800520c:	bf00      	nop
  }
}
 800520e:	37e8      	adds	r7, #232	@ 0xe8
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	bc80      	pop	{r7}
 8005224:	4770      	bx	lr

08005226 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005226:	b480      	push	{r7}
 8005228:	b083      	sub	sp, #12
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800522e:	bf00      	nop
 8005230:	370c      	adds	r7, #12
 8005232:	46bd      	mov	sp, r7
 8005234:	bc80      	pop	{r7}
 8005236:	4770      	bx	lr

08005238 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	460b      	mov	r3, r1
 8005242:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	bc80      	pop	{r7}
 800524c:	4770      	bx	lr

0800524e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b086      	sub	sp, #24
 8005252:	af00      	add	r7, sp, #0
 8005254:	60f8      	str	r0, [r7, #12]
 8005256:	60b9      	str	r1, [r7, #8]
 8005258:	603b      	str	r3, [r7, #0]
 800525a:	4613      	mov	r3, r2
 800525c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800525e:	e03b      	b.n	80052d8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005260:	6a3b      	ldr	r3, [r7, #32]
 8005262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005266:	d037      	beq.n	80052d8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005268:	f7fe f852 	bl	8003310 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	6a3a      	ldr	r2, [r7, #32]
 8005274:	429a      	cmp	r2, r3
 8005276:	d302      	bcc.n	800527e <UART_WaitOnFlagUntilTimeout+0x30>
 8005278:	6a3b      	ldr	r3, [r7, #32]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e03a      	b.n	80052f8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f003 0304 	and.w	r3, r3, #4
 800528c:	2b00      	cmp	r3, #0
 800528e:	d023      	beq.n	80052d8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	2b80      	cmp	r3, #128	@ 0x80
 8005294:	d020      	beq.n	80052d8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	2b40      	cmp	r3, #64	@ 0x40
 800529a:	d01d      	beq.n	80052d8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0308 	and.w	r3, r3, #8
 80052a6:	2b08      	cmp	r3, #8
 80052a8:	d116      	bne.n	80052d8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80052aa:	2300      	movs	r3, #0
 80052ac:	617b      	str	r3, [r7, #20]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	617b      	str	r3, [r7, #20]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	617b      	str	r3, [r7, #20]
 80052be:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f000 f856 	bl	8005372 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2208      	movs	r2, #8
 80052ca:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e00f      	b.n	80052f8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	4013      	ands	r3, r2
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	bf0c      	ite	eq
 80052e8:	2301      	moveq	r3, #1
 80052ea:	2300      	movne	r3, #0
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	461a      	mov	r2, r3
 80052f0:	79fb      	ldrb	r3, [r7, #7]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d0b4      	beq.n	8005260 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3718      	adds	r7, #24
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	4613      	mov	r3, r2
 800530c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	88fa      	ldrh	r2, [r7, #6]
 8005318:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	88fa      	ldrh	r2, [r7, #6]
 800531e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2222      	movs	r2, #34	@ 0x22
 800532a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d007      	beq.n	8005346 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68da      	ldr	r2, [r3, #12]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005344:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	695a      	ldr	r2, [r3, #20]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f042 0201 	orr.w	r2, r2, #1
 8005354:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68da      	ldr	r2, [r3, #12]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f042 0220 	orr.w	r2, r2, #32
 8005364:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3714      	adds	r7, #20
 800536c:	46bd      	mov	sp, r7
 800536e:	bc80      	pop	{r7}
 8005370:	4770      	bx	lr

08005372 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005372:	b480      	push	{r7}
 8005374:	b095      	sub	sp, #84	@ 0x54
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	330c      	adds	r3, #12
 8005380:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005384:	e853 3f00 	ldrex	r3, [r3]
 8005388:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800538a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800538c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005390:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	330c      	adds	r3, #12
 8005398:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800539a:	643a      	str	r2, [r7, #64]	@ 0x40
 800539c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80053a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80053a2:	e841 2300 	strex	r3, r2, [r1]
 80053a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80053a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1e5      	bne.n	800537a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	3314      	adds	r3, #20
 80053b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b6:	6a3b      	ldr	r3, [r7, #32]
 80053b8:	e853 3f00 	ldrex	r3, [r3]
 80053bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	f023 0301 	bic.w	r3, r3, #1
 80053c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	3314      	adds	r3, #20
 80053cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053d6:	e841 2300 	strex	r3, r2, [r1]
 80053da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1e5      	bne.n	80053ae <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d119      	bne.n	800541e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	330c      	adds	r3, #12
 80053f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	e853 3f00 	ldrex	r3, [r3]
 80053f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	f023 0310 	bic.w	r3, r3, #16
 8005400:	647b      	str	r3, [r7, #68]	@ 0x44
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	330c      	adds	r3, #12
 8005408:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800540a:	61ba      	str	r2, [r7, #24]
 800540c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540e:	6979      	ldr	r1, [r7, #20]
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	e841 2300 	strex	r3, r2, [r1]
 8005416:	613b      	str	r3, [r7, #16]
   return(result);
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1e5      	bne.n	80053ea <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2220      	movs	r2, #32
 8005422:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800542c:	bf00      	nop
 800542e:	3754      	adds	r7, #84	@ 0x54
 8005430:	46bd      	mov	sp, r7
 8005432:	bc80      	pop	{r7}
 8005434:	4770      	bx	lr

08005436 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005436:	b580      	push	{r7, lr}
 8005438:	b084      	sub	sp, #16
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005442:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	f7ff fee8 	bl	8005226 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005456:	bf00      	nop
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800545e:	b480      	push	{r7}
 8005460:	b085      	sub	sp, #20
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b21      	cmp	r3, #33	@ 0x21
 8005470:	d13e      	bne.n	80054f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800547a:	d114      	bne.n	80054a6 <UART_Transmit_IT+0x48>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d110      	bne.n	80054a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a1b      	ldr	r3, [r3, #32]
 8005488:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	881b      	ldrh	r3, [r3, #0]
 800548e:	461a      	mov	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005498:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	1c9a      	adds	r2, r3, #2
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	621a      	str	r2, [r3, #32]
 80054a4:	e008      	b.n	80054b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	1c59      	adds	r1, r3, #1
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	6211      	str	r1, [r2, #32]
 80054b0:	781a      	ldrb	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80054bc:	b29b      	uxth	r3, r3
 80054be:	3b01      	subs	r3, #1
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	4619      	mov	r1, r3
 80054c6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d10f      	bne.n	80054ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68da      	ldr	r2, [r3, #12]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80054da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68da      	ldr	r2, [r3, #12]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80054ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80054ec:	2300      	movs	r3, #0
 80054ee:	e000      	b.n	80054f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80054f0:	2302      	movs	r3, #2
  }
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3714      	adds	r7, #20
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bc80      	pop	{r7}
 80054fa:	4770      	bx	lr

080054fc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68da      	ldr	r2, [r3, #12]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005512:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2220      	movs	r2, #32
 8005518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f7ff fe79 	bl	8005214 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3708      	adds	r7, #8
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b08c      	sub	sp, #48	@ 0x30
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b22      	cmp	r3, #34	@ 0x22
 800553e:	f040 80ae 	bne.w	800569e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800554a:	d117      	bne.n	800557c <UART_Receive_IT+0x50>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d113      	bne.n	800557c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005554:	2300      	movs	r3, #0
 8005556:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800555c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	b29b      	uxth	r3, r3
 8005566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800556a:	b29a      	uxth	r2, r3
 800556c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800556e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005574:	1c9a      	adds	r2, r3, #2
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	629a      	str	r2, [r3, #40]	@ 0x28
 800557a:	e026      	b.n	80055ca <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005580:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005582:	2300      	movs	r3, #0
 8005584:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800558e:	d007      	beq.n	80055a0 <UART_Receive_IT+0x74>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d10a      	bne.n	80055ae <UART_Receive_IT+0x82>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d106      	bne.n	80055ae <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055aa:	701a      	strb	r2, [r3, #0]
 80055ac:	e008      	b.n	80055c0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055ba:	b2da      	uxtb	r2, r3
 80055bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055be:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c4:	1c5a      	adds	r2, r3, #1
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	3b01      	subs	r3, #1
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	4619      	mov	r1, r3
 80055d8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d15d      	bne.n	800569a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68da      	ldr	r2, [r3, #12]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f022 0220 	bic.w	r2, r2, #32
 80055ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68da      	ldr	r2, [r3, #12]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80055fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	695a      	ldr	r2, [r3, #20]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f022 0201 	bic.w	r2, r2, #1
 800560c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2220      	movs	r2, #32
 8005612:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005620:	2b01      	cmp	r3, #1
 8005622:	d135      	bne.n	8005690 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	330c      	adds	r3, #12
 8005630:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	e853 3f00 	ldrex	r3, [r3]
 8005638:	613b      	str	r3, [r7, #16]
   return(result);
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	f023 0310 	bic.w	r3, r3, #16
 8005640:	627b      	str	r3, [r7, #36]	@ 0x24
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	330c      	adds	r3, #12
 8005648:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800564a:	623a      	str	r2, [r7, #32]
 800564c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564e:	69f9      	ldr	r1, [r7, #28]
 8005650:	6a3a      	ldr	r2, [r7, #32]
 8005652:	e841 2300 	strex	r3, r2, [r1]
 8005656:	61bb      	str	r3, [r7, #24]
   return(result);
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1e5      	bne.n	800562a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0310 	and.w	r3, r3, #16
 8005668:	2b10      	cmp	r3, #16
 800566a:	d10a      	bne.n	8005682 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800566c:	2300      	movs	r3, #0
 800566e:	60fb      	str	r3, [r7, #12]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	60fb      	str	r3, [r7, #12]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	60fb      	str	r3, [r7, #12]
 8005680:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005686:	4619      	mov	r1, r3
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f7ff fdd5 	bl	8005238 <HAL_UARTEx_RxEventCallback>
 800568e:	e002      	b.n	8005696 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f7fb f9a1 	bl	80009d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005696:	2300      	movs	r3, #0
 8005698:	e002      	b.n	80056a0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800569a:	2300      	movs	r3, #0
 800569c:	e000      	b.n	80056a0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800569e:	2302      	movs	r3, #2
  }
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3730      	adds	r7, #48	@ 0x30
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	68da      	ldr	r2, [r3, #12]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	430a      	orrs	r2, r1
 80056c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	689a      	ldr	r2, [r3, #8]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	431a      	orrs	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80056e2:	f023 030c 	bic.w	r3, r3, #12
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	6812      	ldr	r2, [r2, #0]
 80056ea:	68b9      	ldr	r1, [r7, #8]
 80056ec:	430b      	orrs	r3, r1
 80056ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	699a      	ldr	r2, [r3, #24]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	430a      	orrs	r2, r1
 8005704:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a2c      	ldr	r2, [pc, #176]	@ (80057bc <UART_SetConfig+0x114>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d103      	bne.n	8005718 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005710:	f7fe ff4e 	bl	80045b0 <HAL_RCC_GetPCLK2Freq>
 8005714:	60f8      	str	r0, [r7, #12]
 8005716:	e002      	b.n	800571e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005718:	f7fe ff36 	bl	8004588 <HAL_RCC_GetPCLK1Freq>
 800571c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	4613      	mov	r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4413      	add	r3, r2
 8005726:	009a      	lsls	r2, r3, #2
 8005728:	441a      	add	r2, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	fbb2 f3f3 	udiv	r3, r2, r3
 8005734:	4a22      	ldr	r2, [pc, #136]	@ (80057c0 <UART_SetConfig+0x118>)
 8005736:	fba2 2303 	umull	r2, r3, r2, r3
 800573a:	095b      	lsrs	r3, r3, #5
 800573c:	0119      	lsls	r1, r3, #4
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	4613      	mov	r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4413      	add	r3, r2
 8005746:	009a      	lsls	r2, r3, #2
 8005748:	441a      	add	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	fbb2 f2f3 	udiv	r2, r2, r3
 8005754:	4b1a      	ldr	r3, [pc, #104]	@ (80057c0 <UART_SetConfig+0x118>)
 8005756:	fba3 0302 	umull	r0, r3, r3, r2
 800575a:	095b      	lsrs	r3, r3, #5
 800575c:	2064      	movs	r0, #100	@ 0x64
 800575e:	fb00 f303 	mul.w	r3, r0, r3
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	011b      	lsls	r3, r3, #4
 8005766:	3332      	adds	r3, #50	@ 0x32
 8005768:	4a15      	ldr	r2, [pc, #84]	@ (80057c0 <UART_SetConfig+0x118>)
 800576a:	fba2 2303 	umull	r2, r3, r2, r3
 800576e:	095b      	lsrs	r3, r3, #5
 8005770:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005774:	4419      	add	r1, r3
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	4613      	mov	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4413      	add	r3, r2
 800577e:	009a      	lsls	r2, r3, #2
 8005780:	441a      	add	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	fbb2 f2f3 	udiv	r2, r2, r3
 800578c:	4b0c      	ldr	r3, [pc, #48]	@ (80057c0 <UART_SetConfig+0x118>)
 800578e:	fba3 0302 	umull	r0, r3, r3, r2
 8005792:	095b      	lsrs	r3, r3, #5
 8005794:	2064      	movs	r0, #100	@ 0x64
 8005796:	fb00 f303 	mul.w	r3, r0, r3
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	011b      	lsls	r3, r3, #4
 800579e:	3332      	adds	r3, #50	@ 0x32
 80057a0:	4a07      	ldr	r2, [pc, #28]	@ (80057c0 <UART_SetConfig+0x118>)
 80057a2:	fba2 2303 	umull	r2, r3, r2, r3
 80057a6:	095b      	lsrs	r3, r3, #5
 80057a8:	f003 020f 	and.w	r2, r3, #15
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	440a      	add	r2, r1
 80057b2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80057b4:	bf00      	nop
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	40013800 	.word	0x40013800
 80057c0:	51eb851f 	.word	0x51eb851f

080057c4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	4603      	mov	r3, r0
 80057cc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80057ce:	2300      	movs	r3, #0
 80057d0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80057d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057d6:	2b84      	cmp	r3, #132	@ 0x84
 80057d8:	d005      	beq.n	80057e6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80057da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	4413      	add	r3, r2
 80057e2:	3303      	adds	r3, #3
 80057e4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80057e6:	68fb      	ldr	r3, [r7, #12]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bc80      	pop	{r7}
 80057f0:	4770      	bx	lr

080057f2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80057f2:	b480      	push	{r7}
 80057f4:	b083      	sub	sp, #12
 80057f6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057f8:	f3ef 8305 	mrs	r3, IPSR
 80057fc:	607b      	str	r3, [r7, #4]
  return(result);
 80057fe:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005800:	2b00      	cmp	r3, #0
 8005802:	bf14      	ite	ne
 8005804:	2301      	movne	r3, #1
 8005806:	2300      	moveq	r3, #0
 8005808:	b2db      	uxtb	r3, r3
}
 800580a:	4618      	mov	r0, r3
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	bc80      	pop	{r7}
 8005812:	4770      	bx	lr

08005814 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005818:	f001 f866 	bl	80068e8 <vTaskStartScheduler>
  
  return osOK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	bd80      	pop	{r7, pc}

08005822 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005822:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005824:	b089      	sub	sp, #36	@ 0x24
 8005826:	af04      	add	r7, sp, #16
 8005828:	6078      	str	r0, [r7, #4]
 800582a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	695b      	ldr	r3, [r3, #20]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d020      	beq.n	8005876 <osThreadCreate+0x54>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	699b      	ldr	r3, [r3, #24]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d01c      	beq.n	8005876 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685c      	ldr	r4, [r3, #4]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	691e      	ldr	r6, [r3, #16]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800584e:	4618      	mov	r0, r3
 8005850:	f7ff ffb8 	bl	80057c4 <makeFreeRtosPriority>
 8005854:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800585e:	9202      	str	r2, [sp, #8]
 8005860:	9301      	str	r3, [sp, #4]
 8005862:	9100      	str	r1, [sp, #0]
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	4632      	mov	r2, r6
 8005868:	4629      	mov	r1, r5
 800586a:	4620      	mov	r0, r4
 800586c:	f000 fe56 	bl	800651c <xTaskCreateStatic>
 8005870:	4603      	mov	r3, r0
 8005872:	60fb      	str	r3, [r7, #12]
 8005874:	e01c      	b.n	80058b0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685c      	ldr	r4, [r3, #4]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005882:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800588a:	4618      	mov	r0, r3
 800588c:	f7ff ff9a 	bl	80057c4 <makeFreeRtosPriority>
 8005890:	4602      	mov	r2, r0
 8005892:	f107 030c 	add.w	r3, r7, #12
 8005896:	9301      	str	r3, [sp, #4]
 8005898:	9200      	str	r2, [sp, #0]
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	4632      	mov	r2, r6
 800589e:	4629      	mov	r1, r5
 80058a0:	4620      	mov	r0, r4
 80058a2:	f000 fe9b 	bl	80065dc <xTaskCreate>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d001      	beq.n	80058b0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80058ac:	2300      	movs	r3, #0
 80058ae:	e000      	b.n	80058b2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80058b0:	68fb      	ldr	r3, [r7, #12]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3714      	adds	r7, #20
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080058ba <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b084      	sub	sp, #16
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d001      	beq.n	80058d0 <osDelay+0x16>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	e000      	b.n	80058d2 <osDelay+0x18>
 80058d0:	2301      	movs	r3, #1
 80058d2:	4618      	mov	r0, r3
 80058d4:	f000 ffd2 	bl	800687c <vTaskDelay>
  
  return osOK;
 80058d8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
	...

080058e4 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b086      	sub	sp, #24
 80058e8:	af02      	add	r7, sp, #8
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	460b      	mov	r3, r1
 80058ee:	607a      	str	r2, [r7, #4]
 80058f0:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d013      	beq.n	8005922 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 80058fa:	7afb      	ldrb	r3, [r7, #11]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d101      	bne.n	8005904 <osTimerCreate+0x20>
 8005900:	2101      	movs	r1, #1
 8005902:	e000      	b.n	8005906 <osTimerCreate+0x22>
 8005904:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 800590e:	9201      	str	r2, [sp, #4]
 8005910:	9300      	str	r3, [sp, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	460a      	mov	r2, r1
 8005916:	2101      	movs	r1, #1
 8005918:	480b      	ldr	r0, [pc, #44]	@ (8005948 <osTimerCreate+0x64>)
 800591a:	f001 fdba 	bl	8007492 <xTimerCreateStatic>
 800591e:	4603      	mov	r3, r0
 8005920:	e00e      	b.n	8005940 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8005922:	7afb      	ldrb	r3, [r7, #11]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d101      	bne.n	800592c <osTimerCreate+0x48>
 8005928:	2201      	movs	r2, #1
 800592a:	e000      	b.n	800592e <osTimerCreate+0x4a>
 800592c:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8005932:	9300      	str	r3, [sp, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2101      	movs	r1, #1
 8005938:	4803      	ldr	r0, [pc, #12]	@ (8005948 <osTimerCreate+0x64>)
 800593a:	f001 fd89 	bl	8007450 <xTimerCreate>
 800593e:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8005940:	4618      	mov	r0, r3
 8005942:	3710      	adds	r7, #16
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	08009728 	.word	0x08009728

0800594c <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b088      	sub	sp, #32
 8005950:	af02      	add	r7, sp, #8
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8005956:	2300      	movs	r3, #0
 8005958:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800595a:	2300      	movs	r3, #0
 800595c:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d101      	bne.n	800596c <osTimerStart+0x20>
    ticks = 1;
 8005968:	2301      	movs	r3, #1
 800596a:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 800596c:	f7ff ff41 	bl	80057f2 <inHandlerMode>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d01a      	beq.n	80059ac <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8005976:	f107 030c 	add.w	r3, r7, #12
 800597a:	2200      	movs	r2, #0
 800597c:	9200      	str	r2, [sp, #0]
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	2109      	movs	r1, #9
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f001 fe02 	bl	800758c <xTimerGenericCommand>
 8005988:	4603      	mov	r3, r0
 800598a:	2b01      	cmp	r3, #1
 800598c:	d002      	beq.n	8005994 <osTimerStart+0x48>
    {
      result = osErrorOS;
 800598e:	23ff      	movs	r3, #255	@ 0xff
 8005990:	617b      	str	r3, [r7, #20]
 8005992:	e018      	b.n	80059c6 <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d015      	beq.n	80059c6 <osTimerStart+0x7a>
 800599a:	4b0d      	ldr	r3, [pc, #52]	@ (80059d0 <osTimerStart+0x84>)
 800599c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059a0:	601a      	str	r2, [r3, #0]
 80059a2:	f3bf 8f4f 	dsb	sy
 80059a6:	f3bf 8f6f 	isb	sy
 80059aa:	e00c      	b.n	80059c6 <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 80059ac:	2300      	movs	r3, #0
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	2300      	movs	r3, #0
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	2104      	movs	r1, #4
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f001 fde8 	bl	800758c <xTimerGenericCommand>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d001      	beq.n	80059c6 <osTimerStart+0x7a>
      result = osErrorOS;
 80059c2:	23ff      	movs	r3, #255	@ 0xff
 80059c4:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 80059c6:	697b      	ldr	r3, [r7, #20]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3718      	adds	r7, #24
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	e000ed04 	.word	0xe000ed04

080059d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f103 0208 	add.w	r2, r3, #8
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f04f 32ff 	mov.w	r2, #4294967295
 80059ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f103 0208 	add.w	r2, r3, #8
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f103 0208 	add.w	r2, r3, #8
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005a08:	bf00      	nop
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bc80      	pop	{r7}
 8005a10:	4770      	bx	lr

08005a12 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005a12:	b480      	push	{r7}
 8005a14:	b083      	sub	sp, #12
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bc80      	pop	{r7}
 8005a28:	4770      	bx	lr

08005a2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a2a:	b480      	push	{r7}
 8005a2c:	b085      	sub	sp, #20
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
 8005a32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	689a      	ldr	r2, [r3, #8]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	683a      	ldr	r2, [r7, #0]
 8005a4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	683a      	ldr	r2, [r7, #0]
 8005a54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	1c5a      	adds	r2, r3, #1
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	601a      	str	r2, [r3, #0]
}
 8005a66:	bf00      	nop
 8005a68:	3714      	adds	r7, #20
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bc80      	pop	{r7}
 8005a6e:	4770      	bx	lr

08005a70 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a86:	d103      	bne.n	8005a90 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	60fb      	str	r3, [r7, #12]
 8005a8e:	e00c      	b.n	8005aaa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	3308      	adds	r3, #8
 8005a94:	60fb      	str	r3, [r7, #12]
 8005a96:	e002      	b.n	8005a9e <vListInsert+0x2e>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	60fb      	str	r3, [r7, #12]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68ba      	ldr	r2, [r7, #8]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d2f6      	bcs.n	8005a98 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	685a      	ldr	r2, [r3, #4]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	683a      	ldr	r2, [r7, #0]
 8005ab8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	683a      	ldr	r2, [r7, #0]
 8005ac4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	1c5a      	adds	r2, r3, #1
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	601a      	str	r2, [r3, #0]
}
 8005ad6:	bf00      	nop
 8005ad8:	3714      	adds	r7, #20
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bc80      	pop	{r7}
 8005ade:	4770      	bx	lr

08005ae0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	6892      	ldr	r2, [r2, #8]
 8005af6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	6852      	ldr	r2, [r2, #4]
 8005b00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d103      	bne.n	8005b14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	689a      	ldr	r2, [r3, #8]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	1e5a      	subs	r2, r3, #1
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3714      	adds	r7, #20
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bc80      	pop	{r7}
 8005b30:	4770      	bx	lr
	...

08005b34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10b      	bne.n	8005b60 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b4c:	f383 8811 	msr	BASEPRI, r3
 8005b50:	f3bf 8f6f 	isb	sy
 8005b54:	f3bf 8f4f 	dsb	sy
 8005b58:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005b5a:	bf00      	nop
 8005b5c:	bf00      	nop
 8005b5e:	e7fd      	b.n	8005b5c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005b60:	f002 f8f4 	bl	8007d4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b6c:	68f9      	ldr	r1, [r7, #12]
 8005b6e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005b70:	fb01 f303 	mul.w	r3, r1, r3
 8005b74:	441a      	add	r2, r3
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b90:	3b01      	subs	r3, #1
 8005b92:	68f9      	ldr	r1, [r7, #12]
 8005b94:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005b96:	fb01 f303 	mul.w	r3, r1, r3
 8005b9a:	441a      	add	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	22ff      	movs	r2, #255	@ 0xff
 8005ba4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	22ff      	movs	r2, #255	@ 0xff
 8005bac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d114      	bne.n	8005be0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d01a      	beq.n	8005bf4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	3310      	adds	r3, #16
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f001 f928 	bl	8006e18 <xTaskRemoveFromEventList>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d012      	beq.n	8005bf4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005bce:	4b0d      	ldr	r3, [pc, #52]	@ (8005c04 <xQueueGenericReset+0xd0>)
 8005bd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bd4:	601a      	str	r2, [r3, #0]
 8005bd6:	f3bf 8f4f 	dsb	sy
 8005bda:	f3bf 8f6f 	isb	sy
 8005bde:	e009      	b.n	8005bf4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	3310      	adds	r3, #16
 8005be4:	4618      	mov	r0, r3
 8005be6:	f7ff fef5 	bl	80059d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	3324      	adds	r3, #36	@ 0x24
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7ff fef0 	bl	80059d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005bf4:	f002 f8da 	bl	8007dac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005bf8:	2301      	movs	r3, #1
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	e000ed04 	.word	0xe000ed04

08005c08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b08e      	sub	sp, #56	@ 0x38
 8005c0c:	af02      	add	r7, sp, #8
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
 8005c14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10b      	bne.n	8005c34 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c20:	f383 8811 	msr	BASEPRI, r3
 8005c24:	f3bf 8f6f 	isb	sy
 8005c28:	f3bf 8f4f 	dsb	sy
 8005c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005c2e:	bf00      	nop
 8005c30:	bf00      	nop
 8005c32:	e7fd      	b.n	8005c30 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d10b      	bne.n	8005c52 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c3e:	f383 8811 	msr	BASEPRI, r3
 8005c42:	f3bf 8f6f 	isb	sy
 8005c46:	f3bf 8f4f 	dsb	sy
 8005c4a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005c4c:	bf00      	nop
 8005c4e:	bf00      	nop
 8005c50:	e7fd      	b.n	8005c4e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d002      	beq.n	8005c5e <xQueueGenericCreateStatic+0x56>
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d001      	beq.n	8005c62 <xQueueGenericCreateStatic+0x5a>
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e000      	b.n	8005c64 <xQueueGenericCreateStatic+0x5c>
 8005c62:	2300      	movs	r3, #0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d10b      	bne.n	8005c80 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c6c:	f383 8811 	msr	BASEPRI, r3
 8005c70:	f3bf 8f6f 	isb	sy
 8005c74:	f3bf 8f4f 	dsb	sy
 8005c78:	623b      	str	r3, [r7, #32]
}
 8005c7a:	bf00      	nop
 8005c7c:	bf00      	nop
 8005c7e:	e7fd      	b.n	8005c7c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d102      	bne.n	8005c8c <xQueueGenericCreateStatic+0x84>
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d101      	bne.n	8005c90 <xQueueGenericCreateStatic+0x88>
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e000      	b.n	8005c92 <xQueueGenericCreateStatic+0x8a>
 8005c90:	2300      	movs	r3, #0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10b      	bne.n	8005cae <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c9a:	f383 8811 	msr	BASEPRI, r3
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	61fb      	str	r3, [r7, #28]
}
 8005ca8:	bf00      	nop
 8005caa:	bf00      	nop
 8005cac:	e7fd      	b.n	8005caa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005cae:	2348      	movs	r3, #72	@ 0x48
 8005cb0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	2b48      	cmp	r3, #72	@ 0x48
 8005cb6:	d00b      	beq.n	8005cd0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cbc:	f383 8811 	msr	BASEPRI, r3
 8005cc0:	f3bf 8f6f 	isb	sy
 8005cc4:	f3bf 8f4f 	dsb	sy
 8005cc8:	61bb      	str	r3, [r7, #24]
}
 8005cca:	bf00      	nop
 8005ccc:	bf00      	nop
 8005cce:	e7fd      	b.n	8005ccc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005cd0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00d      	beq.n	8005cf8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ce4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cea:	9300      	str	r3, [sp, #0]
 8005cec:	4613      	mov	r3, r2
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	68b9      	ldr	r1, [r7, #8]
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f000 f805 	bl	8005d02 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3730      	adds	r7, #48	@ 0x30
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b084      	sub	sp, #16
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	60f8      	str	r0, [r7, #12]
 8005d0a:	60b9      	str	r1, [r7, #8]
 8005d0c:	607a      	str	r2, [r7, #4]
 8005d0e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d103      	bne.n	8005d1e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	69ba      	ldr	r2, [r7, #24]
 8005d1a:	601a      	str	r2, [r3, #0]
 8005d1c:	e002      	b.n	8005d24 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	68ba      	ldr	r2, [r7, #8]
 8005d2e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005d30:	2101      	movs	r1, #1
 8005d32:	69b8      	ldr	r0, [r7, #24]
 8005d34:	f7ff fefe 	bl	8005b34 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005d38:	bf00      	nop
 8005d3a:	3710      	adds	r7, #16
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b08e      	sub	sp, #56	@ 0x38
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
 8005d4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d10b      	bne.n	8005d74 <xQueueGenericSend+0x34>
	__asm volatile
 8005d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d60:	f383 8811 	msr	BASEPRI, r3
 8005d64:	f3bf 8f6f 	isb	sy
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005d6e:	bf00      	nop
 8005d70:	bf00      	nop
 8005d72:	e7fd      	b.n	8005d70 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d103      	bne.n	8005d82 <xQueueGenericSend+0x42>
 8005d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d101      	bne.n	8005d86 <xQueueGenericSend+0x46>
 8005d82:	2301      	movs	r3, #1
 8005d84:	e000      	b.n	8005d88 <xQueueGenericSend+0x48>
 8005d86:	2300      	movs	r3, #0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10b      	bne.n	8005da4 <xQueueGenericSend+0x64>
	__asm volatile
 8005d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d90:	f383 8811 	msr	BASEPRI, r3
 8005d94:	f3bf 8f6f 	isb	sy
 8005d98:	f3bf 8f4f 	dsb	sy
 8005d9c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005d9e:	bf00      	nop
 8005da0:	bf00      	nop
 8005da2:	e7fd      	b.n	8005da0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d103      	bne.n	8005db2 <xQueueGenericSend+0x72>
 8005daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d101      	bne.n	8005db6 <xQueueGenericSend+0x76>
 8005db2:	2301      	movs	r3, #1
 8005db4:	e000      	b.n	8005db8 <xQueueGenericSend+0x78>
 8005db6:	2300      	movs	r3, #0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10b      	bne.n	8005dd4 <xQueueGenericSend+0x94>
	__asm volatile
 8005dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc0:	f383 8811 	msr	BASEPRI, r3
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	623b      	str	r3, [r7, #32]
}
 8005dce:	bf00      	nop
 8005dd0:	bf00      	nop
 8005dd2:	e7fd      	b.n	8005dd0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005dd4:	f001 f9e6 	bl	80071a4 <xTaskGetSchedulerState>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d102      	bne.n	8005de4 <xQueueGenericSend+0xa4>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d101      	bne.n	8005de8 <xQueueGenericSend+0xa8>
 8005de4:	2301      	movs	r3, #1
 8005de6:	e000      	b.n	8005dea <xQueueGenericSend+0xaa>
 8005de8:	2300      	movs	r3, #0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10b      	bne.n	8005e06 <xQueueGenericSend+0xc6>
	__asm volatile
 8005dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005df2:	f383 8811 	msr	BASEPRI, r3
 8005df6:	f3bf 8f6f 	isb	sy
 8005dfa:	f3bf 8f4f 	dsb	sy
 8005dfe:	61fb      	str	r3, [r7, #28]
}
 8005e00:	bf00      	nop
 8005e02:	bf00      	nop
 8005e04:	e7fd      	b.n	8005e02 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e06:	f001 ffa1 	bl	8007d4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d302      	bcc.n	8005e1c <xQueueGenericSend+0xdc>
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d129      	bne.n	8005e70 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e1c:	683a      	ldr	r2, [r7, #0]
 8005e1e:	68b9      	ldr	r1, [r7, #8]
 8005e20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e22:	f000 fa0f 	bl	8006244 <prvCopyDataToQueue>
 8005e26:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d010      	beq.n	8005e52 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e32:	3324      	adds	r3, #36	@ 0x24
 8005e34:	4618      	mov	r0, r3
 8005e36:	f000 ffef 	bl	8006e18 <xTaskRemoveFromEventList>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d013      	beq.n	8005e68 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005e40:	4b3f      	ldr	r3, [pc, #252]	@ (8005f40 <xQueueGenericSend+0x200>)
 8005e42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e46:	601a      	str	r2, [r3, #0]
 8005e48:	f3bf 8f4f 	dsb	sy
 8005e4c:	f3bf 8f6f 	isb	sy
 8005e50:	e00a      	b.n	8005e68 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d007      	beq.n	8005e68 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005e58:	4b39      	ldr	r3, [pc, #228]	@ (8005f40 <xQueueGenericSend+0x200>)
 8005e5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e5e:	601a      	str	r2, [r3, #0]
 8005e60:	f3bf 8f4f 	dsb	sy
 8005e64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005e68:	f001 ffa0 	bl	8007dac <vPortExitCritical>
				return pdPASS;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e063      	b.n	8005f38 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d103      	bne.n	8005e7e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e76:	f001 ff99 	bl	8007dac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	e05c      	b.n	8005f38 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d106      	bne.n	8005e92 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e84:	f107 0314 	add.w	r3, r7, #20
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f001 f829 	bl	8006ee0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e92:	f001 ff8b 	bl	8007dac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e96:	f000 fd97 	bl	80069c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e9a:	f001 ff57 	bl	8007d4c <vPortEnterCritical>
 8005e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ea4:	b25b      	sxtb	r3, r3
 8005ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eaa:	d103      	bne.n	8005eb4 <xQueueGenericSend+0x174>
 8005eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005eba:	b25b      	sxtb	r3, r3
 8005ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec0:	d103      	bne.n	8005eca <xQueueGenericSend+0x18a>
 8005ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005eca:	f001 ff6f 	bl	8007dac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ece:	1d3a      	adds	r2, r7, #4
 8005ed0:	f107 0314 	add.w	r3, r7, #20
 8005ed4:	4611      	mov	r1, r2
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f001 f818 	bl	8006f0c <xTaskCheckForTimeOut>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d124      	bne.n	8005f2c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005ee2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ee4:	f000 faa6 	bl	8006434 <prvIsQueueFull>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d018      	beq.n	8005f20 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef0:	3310      	adds	r3, #16
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	4611      	mov	r1, r2
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 ff3c 	bl	8006d74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005efc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005efe:	f000 fa31 	bl	8006364 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005f02:	f000 fd6f 	bl	80069e4 <xTaskResumeAll>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f47f af7c 	bne.w	8005e06 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8005f40 <xQueueGenericSend+0x200>)
 8005f10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f14:	601a      	str	r2, [r3, #0]
 8005f16:	f3bf 8f4f 	dsb	sy
 8005f1a:	f3bf 8f6f 	isb	sy
 8005f1e:	e772      	b.n	8005e06 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005f20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005f22:	f000 fa1f 	bl	8006364 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f26:	f000 fd5d 	bl	80069e4 <xTaskResumeAll>
 8005f2a:	e76c      	b.n	8005e06 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005f2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005f2e:	f000 fa19 	bl	8006364 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f32:	f000 fd57 	bl	80069e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005f36:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3738      	adds	r7, #56	@ 0x38
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	e000ed04 	.word	0xe000ed04

08005f44 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b090      	sub	sp, #64	@ 0x40
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]
 8005f50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d10b      	bne.n	8005f74 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f60:	f383 8811 	msr	BASEPRI, r3
 8005f64:	f3bf 8f6f 	isb	sy
 8005f68:	f3bf 8f4f 	dsb	sy
 8005f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005f6e:	bf00      	nop
 8005f70:	bf00      	nop
 8005f72:	e7fd      	b.n	8005f70 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d103      	bne.n	8005f82 <xQueueGenericSendFromISR+0x3e>
 8005f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d101      	bne.n	8005f86 <xQueueGenericSendFromISR+0x42>
 8005f82:	2301      	movs	r3, #1
 8005f84:	e000      	b.n	8005f88 <xQueueGenericSendFromISR+0x44>
 8005f86:	2300      	movs	r3, #0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d10b      	bne.n	8005fa4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f90:	f383 8811 	msr	BASEPRI, r3
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005f9e:	bf00      	nop
 8005fa0:	bf00      	nop
 8005fa2:	e7fd      	b.n	8005fa0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d103      	bne.n	8005fb2 <xQueueGenericSendFromISR+0x6e>
 8005faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d101      	bne.n	8005fb6 <xQueueGenericSendFromISR+0x72>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e000      	b.n	8005fb8 <xQueueGenericSendFromISR+0x74>
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d10b      	bne.n	8005fd4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc0:	f383 8811 	msr	BASEPRI, r3
 8005fc4:	f3bf 8f6f 	isb	sy
 8005fc8:	f3bf 8f4f 	dsb	sy
 8005fcc:	623b      	str	r3, [r7, #32]
}
 8005fce:	bf00      	nop
 8005fd0:	bf00      	nop
 8005fd2:	e7fd      	b.n	8005fd0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005fd4:	f001 ff7c 	bl	8007ed0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005fd8:	f3ef 8211 	mrs	r2, BASEPRI
 8005fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fe0:	f383 8811 	msr	BASEPRI, r3
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	f3bf 8f4f 	dsb	sy
 8005fec:	61fa      	str	r2, [r7, #28]
 8005fee:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005ff0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ff2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ff6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d302      	bcc.n	8006006 <xQueueGenericSendFromISR+0xc2>
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	2b02      	cmp	r3, #2
 8006004:	d12f      	bne.n	8006066 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006008:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800600c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006014:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006016:	683a      	ldr	r2, [r7, #0]
 8006018:	68b9      	ldr	r1, [r7, #8]
 800601a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800601c:	f000 f912 	bl	8006244 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006020:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006028:	d112      	bne.n	8006050 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800602a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800602c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800602e:	2b00      	cmp	r3, #0
 8006030:	d016      	beq.n	8006060 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006034:	3324      	adds	r3, #36	@ 0x24
 8006036:	4618      	mov	r0, r3
 8006038:	f000 feee 	bl	8006e18 <xTaskRemoveFromEventList>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00e      	beq.n	8006060 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00b      	beq.n	8006060 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	601a      	str	r2, [r3, #0]
 800604e:	e007      	b.n	8006060 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006050:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006054:	3301      	adds	r3, #1
 8006056:	b2db      	uxtb	r3, r3
 8006058:	b25a      	sxtb	r2, r3
 800605a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800605c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006060:	2301      	movs	r3, #1
 8006062:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006064:	e001      	b.n	800606a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006066:	2300      	movs	r3, #0
 8006068:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800606a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800606c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006074:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006078:	4618      	mov	r0, r3
 800607a:	3740      	adds	r7, #64	@ 0x40
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b08c      	sub	sp, #48	@ 0x30
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800608c:	2300      	movs	r3, #0
 800608e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10b      	bne.n	80060b2 <xQueueReceive+0x32>
	__asm volatile
 800609a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800609e:	f383 8811 	msr	BASEPRI, r3
 80060a2:	f3bf 8f6f 	isb	sy
 80060a6:	f3bf 8f4f 	dsb	sy
 80060aa:	623b      	str	r3, [r7, #32]
}
 80060ac:	bf00      	nop
 80060ae:	bf00      	nop
 80060b0:	e7fd      	b.n	80060ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d103      	bne.n	80060c0 <xQueueReceive+0x40>
 80060b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d101      	bne.n	80060c4 <xQueueReceive+0x44>
 80060c0:	2301      	movs	r3, #1
 80060c2:	e000      	b.n	80060c6 <xQueueReceive+0x46>
 80060c4:	2300      	movs	r3, #0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d10b      	bne.n	80060e2 <xQueueReceive+0x62>
	__asm volatile
 80060ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ce:	f383 8811 	msr	BASEPRI, r3
 80060d2:	f3bf 8f6f 	isb	sy
 80060d6:	f3bf 8f4f 	dsb	sy
 80060da:	61fb      	str	r3, [r7, #28]
}
 80060dc:	bf00      	nop
 80060de:	bf00      	nop
 80060e0:	e7fd      	b.n	80060de <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060e2:	f001 f85f 	bl	80071a4 <xTaskGetSchedulerState>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d102      	bne.n	80060f2 <xQueueReceive+0x72>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d101      	bne.n	80060f6 <xQueueReceive+0x76>
 80060f2:	2301      	movs	r3, #1
 80060f4:	e000      	b.n	80060f8 <xQueueReceive+0x78>
 80060f6:	2300      	movs	r3, #0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d10b      	bne.n	8006114 <xQueueReceive+0x94>
	__asm volatile
 80060fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006100:	f383 8811 	msr	BASEPRI, r3
 8006104:	f3bf 8f6f 	isb	sy
 8006108:	f3bf 8f4f 	dsb	sy
 800610c:	61bb      	str	r3, [r7, #24]
}
 800610e:	bf00      	nop
 8006110:	bf00      	nop
 8006112:	e7fd      	b.n	8006110 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006114:	f001 fe1a 	bl	8007d4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800611a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800611c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800611e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006120:	2b00      	cmp	r3, #0
 8006122:	d01f      	beq.n	8006164 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006124:	68b9      	ldr	r1, [r7, #8]
 8006126:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006128:	f000 f8f6 	bl	8006318 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800612c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800612e:	1e5a      	subs	r2, r3, #1
 8006130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006132:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00f      	beq.n	800615c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800613c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800613e:	3310      	adds	r3, #16
 8006140:	4618      	mov	r0, r3
 8006142:	f000 fe69 	bl	8006e18 <xTaskRemoveFromEventList>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d007      	beq.n	800615c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800614c:	4b3c      	ldr	r3, [pc, #240]	@ (8006240 <xQueueReceive+0x1c0>)
 800614e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006152:	601a      	str	r2, [r3, #0]
 8006154:	f3bf 8f4f 	dsb	sy
 8006158:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800615c:	f001 fe26 	bl	8007dac <vPortExitCritical>
				return pdPASS;
 8006160:	2301      	movs	r3, #1
 8006162:	e069      	b.n	8006238 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d103      	bne.n	8006172 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800616a:	f001 fe1f 	bl	8007dac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800616e:	2300      	movs	r3, #0
 8006170:	e062      	b.n	8006238 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006174:	2b00      	cmp	r3, #0
 8006176:	d106      	bne.n	8006186 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006178:	f107 0310 	add.w	r3, r7, #16
 800617c:	4618      	mov	r0, r3
 800617e:	f000 feaf 	bl	8006ee0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006182:	2301      	movs	r3, #1
 8006184:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006186:	f001 fe11 	bl	8007dac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800618a:	f000 fc1d 	bl	80069c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800618e:	f001 fddd 	bl	8007d4c <vPortEnterCritical>
 8006192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006194:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006198:	b25b      	sxtb	r3, r3
 800619a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800619e:	d103      	bne.n	80061a8 <xQueueReceive+0x128>
 80061a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80061ae:	b25b      	sxtb	r3, r3
 80061b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b4:	d103      	bne.n	80061be <xQueueReceive+0x13e>
 80061b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80061be:	f001 fdf5 	bl	8007dac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061c2:	1d3a      	adds	r2, r7, #4
 80061c4:	f107 0310 	add.w	r3, r7, #16
 80061c8:	4611      	mov	r1, r2
 80061ca:	4618      	mov	r0, r3
 80061cc:	f000 fe9e 	bl	8006f0c <xTaskCheckForTimeOut>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d123      	bne.n	800621e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80061d8:	f000 f916 	bl	8006408 <prvIsQueueEmpty>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d017      	beq.n	8006212 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80061e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e4:	3324      	adds	r3, #36	@ 0x24
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	4611      	mov	r1, r2
 80061ea:	4618      	mov	r0, r3
 80061ec:	f000 fdc2 	bl	8006d74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80061f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80061f2:	f000 f8b7 	bl	8006364 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80061f6:	f000 fbf5 	bl	80069e4 <xTaskResumeAll>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d189      	bne.n	8006114 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006200:	4b0f      	ldr	r3, [pc, #60]	@ (8006240 <xQueueReceive+0x1c0>)
 8006202:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006206:	601a      	str	r2, [r3, #0]
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	f3bf 8f6f 	isb	sy
 8006210:	e780      	b.n	8006114 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006212:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006214:	f000 f8a6 	bl	8006364 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006218:	f000 fbe4 	bl	80069e4 <xTaskResumeAll>
 800621c:	e77a      	b.n	8006114 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800621e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006220:	f000 f8a0 	bl	8006364 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006224:	f000 fbde 	bl	80069e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006228:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800622a:	f000 f8ed 	bl	8006408 <prvIsQueueEmpty>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	f43f af6f 	beq.w	8006114 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006236:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006238:	4618      	mov	r0, r3
 800623a:	3730      	adds	r7, #48	@ 0x30
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	e000ed04 	.word	0xe000ed04

08006244 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b086      	sub	sp, #24
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006250:	2300      	movs	r3, #0
 8006252:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006258:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10d      	bne.n	800627e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d14d      	bne.n	8006306 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	4618      	mov	r0, r3
 8006270:	f000 ffb6 	bl	80071e0 <xTaskPriorityDisinherit>
 8006274:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	609a      	str	r2, [r3, #8]
 800627c:	e043      	b.n	8006306 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d119      	bne.n	80062b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6858      	ldr	r0, [r3, #4]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800628c:	461a      	mov	r2, r3
 800628e:	68b9      	ldr	r1, [r7, #8]
 8006290:	f002 f93a 	bl	8008508 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	685a      	ldr	r2, [r3, #4]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800629c:	441a      	add	r2, r3
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	685a      	ldr	r2, [r3, #4]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d32b      	bcc.n	8006306 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	605a      	str	r2, [r3, #4]
 80062b6:	e026      	b.n	8006306 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	68d8      	ldr	r0, [r3, #12]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062c0:	461a      	mov	r2, r3
 80062c2:	68b9      	ldr	r1, [r7, #8]
 80062c4:	f002 f920 	bl	8008508 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	68da      	ldr	r2, [r3, #12]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062d0:	425b      	negs	r3, r3
 80062d2:	441a      	add	r2, r3
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	68da      	ldr	r2, [r3, #12]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d207      	bcs.n	80062f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	689a      	ldr	r2, [r3, #8]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ec:	425b      	negs	r3, r3
 80062ee:	441a      	add	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d105      	bne.n	8006306 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d002      	beq.n	8006306 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	3b01      	subs	r3, #1
 8006304:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	1c5a      	adds	r2, r3, #1
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800630e:	697b      	ldr	r3, [r7, #20]
}
 8006310:	4618      	mov	r0, r3
 8006312:	3718      	adds	r7, #24
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006326:	2b00      	cmp	r3, #0
 8006328:	d018      	beq.n	800635c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	68da      	ldr	r2, [r3, #12]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006332:	441a      	add	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68da      	ldr	r2, [r3, #12]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	429a      	cmp	r2, r3
 8006342:	d303      	bcc.n	800634c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	68d9      	ldr	r1, [r3, #12]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006354:	461a      	mov	r2, r3
 8006356:	6838      	ldr	r0, [r7, #0]
 8006358:	f002 f8d6 	bl	8008508 <memcpy>
	}
}
 800635c:	bf00      	nop
 800635e:	3708      	adds	r7, #8
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800636c:	f001 fcee 	bl	8007d4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006376:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006378:	e011      	b.n	800639e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800637e:	2b00      	cmp	r3, #0
 8006380:	d012      	beq.n	80063a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	3324      	adds	r3, #36	@ 0x24
 8006386:	4618      	mov	r0, r3
 8006388:	f000 fd46 	bl	8006e18 <xTaskRemoveFromEventList>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d001      	beq.n	8006396 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006392:	f000 fe1f 	bl	8006fd4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006396:	7bfb      	ldrb	r3, [r7, #15]
 8006398:	3b01      	subs	r3, #1
 800639a:	b2db      	uxtb	r3, r3
 800639c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800639e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	dce9      	bgt.n	800637a <prvUnlockQueue+0x16>
 80063a6:	e000      	b.n	80063aa <prvUnlockQueue+0x46>
					break;
 80063a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	22ff      	movs	r2, #255	@ 0xff
 80063ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80063b2:	f001 fcfb 	bl	8007dac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80063b6:	f001 fcc9 	bl	8007d4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80063c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80063c2:	e011      	b.n	80063e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d012      	beq.n	80063f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	3310      	adds	r3, #16
 80063d0:	4618      	mov	r0, r3
 80063d2:	f000 fd21 	bl	8006e18 <xTaskRemoveFromEventList>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d001      	beq.n	80063e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80063dc:	f000 fdfa 	bl	8006fd4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80063e0:	7bbb      	ldrb	r3, [r7, #14]
 80063e2:	3b01      	subs	r3, #1
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80063e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	dce9      	bgt.n	80063c4 <prvUnlockQueue+0x60>
 80063f0:	e000      	b.n	80063f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80063f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	22ff      	movs	r2, #255	@ 0xff
 80063f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80063fc:	f001 fcd6 	bl	8007dac <vPortExitCritical>
}
 8006400:	bf00      	nop
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006410:	f001 fc9c 	bl	8007d4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006418:	2b00      	cmp	r3, #0
 800641a:	d102      	bne.n	8006422 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800641c:	2301      	movs	r3, #1
 800641e:	60fb      	str	r3, [r7, #12]
 8006420:	e001      	b.n	8006426 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006422:	2300      	movs	r3, #0
 8006424:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006426:	f001 fcc1 	bl	8007dac <vPortExitCritical>

	return xReturn;
 800642a:	68fb      	ldr	r3, [r7, #12]
}
 800642c:	4618      	mov	r0, r3
 800642e:	3710      	adds	r7, #16
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800643c:	f001 fc86 	bl	8007d4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006448:	429a      	cmp	r2, r3
 800644a:	d102      	bne.n	8006452 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800644c:	2301      	movs	r3, #1
 800644e:	60fb      	str	r3, [r7, #12]
 8006450:	e001      	b.n	8006456 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006452:	2300      	movs	r3, #0
 8006454:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006456:	f001 fca9 	bl	8007dac <vPortExitCritical>

	return xReturn;
 800645a:	68fb      	ldr	r3, [r7, #12]
}
 800645c:	4618      	mov	r0, r3
 800645e:	3710      	adds	r7, #16
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800646e:	2300      	movs	r3, #0
 8006470:	60fb      	str	r3, [r7, #12]
 8006472:	e014      	b.n	800649e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006474:	4a0e      	ldr	r2, [pc, #56]	@ (80064b0 <vQueueAddToRegistry+0x4c>)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d10b      	bne.n	8006498 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006480:	490b      	ldr	r1, [pc, #44]	@ (80064b0 <vQueueAddToRegistry+0x4c>)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	683a      	ldr	r2, [r7, #0]
 8006486:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800648a:	4a09      	ldr	r2, [pc, #36]	@ (80064b0 <vQueueAddToRegistry+0x4c>)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	00db      	lsls	r3, r3, #3
 8006490:	4413      	add	r3, r2
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006496:	e006      	b.n	80064a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	3301      	adds	r3, #1
 800649c:	60fb      	str	r3, [r7, #12]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2b07      	cmp	r3, #7
 80064a2:	d9e7      	bls.n	8006474 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80064a4:	bf00      	nop
 80064a6:	bf00      	nop
 80064a8:	3714      	adds	r7, #20
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bc80      	pop	{r7}
 80064ae:	4770      	bx	lr
 80064b0:	20000c88 	.word	0x20000c88

080064b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80064c4:	f001 fc42 	bl	8007d4c <vPortEnterCritical>
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80064ce:	b25b      	sxtb	r3, r3
 80064d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d4:	d103      	bne.n	80064de <vQueueWaitForMessageRestricted+0x2a>
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80064e4:	b25b      	sxtb	r3, r3
 80064e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ea:	d103      	bne.n	80064f4 <vQueueWaitForMessageRestricted+0x40>
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80064f4:	f001 fc5a 	bl	8007dac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d106      	bne.n	800650e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	3324      	adds	r3, #36	@ 0x24
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	68b9      	ldr	r1, [r7, #8]
 8006508:	4618      	mov	r0, r3
 800650a:	f000 fc59 	bl	8006dc0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800650e:	6978      	ldr	r0, [r7, #20]
 8006510:	f7ff ff28 	bl	8006364 <prvUnlockQueue>
	}
 8006514:	bf00      	nop
 8006516:	3718      	adds	r7, #24
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800651c:	b580      	push	{r7, lr}
 800651e:	b08e      	sub	sp, #56	@ 0x38
 8006520:	af04      	add	r7, sp, #16
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	607a      	str	r2, [r7, #4]
 8006528:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800652a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10b      	bne.n	8006548 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	623b      	str	r3, [r7, #32]
}
 8006542:	bf00      	nop
 8006544:	bf00      	nop
 8006546:	e7fd      	b.n	8006544 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800654a:	2b00      	cmp	r3, #0
 800654c:	d10b      	bne.n	8006566 <xTaskCreateStatic+0x4a>
	__asm volatile
 800654e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006552:	f383 8811 	msr	BASEPRI, r3
 8006556:	f3bf 8f6f 	isb	sy
 800655a:	f3bf 8f4f 	dsb	sy
 800655e:	61fb      	str	r3, [r7, #28]
}
 8006560:	bf00      	nop
 8006562:	bf00      	nop
 8006564:	e7fd      	b.n	8006562 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006566:	23a0      	movs	r3, #160	@ 0xa0
 8006568:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	2ba0      	cmp	r3, #160	@ 0xa0
 800656e:	d00b      	beq.n	8006588 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006574:	f383 8811 	msr	BASEPRI, r3
 8006578:	f3bf 8f6f 	isb	sy
 800657c:	f3bf 8f4f 	dsb	sy
 8006580:	61bb      	str	r3, [r7, #24]
}
 8006582:	bf00      	nop
 8006584:	bf00      	nop
 8006586:	e7fd      	b.n	8006584 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006588:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800658a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800658c:	2b00      	cmp	r3, #0
 800658e:	d01e      	beq.n	80065ce <xTaskCreateStatic+0xb2>
 8006590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006592:	2b00      	cmp	r3, #0
 8006594:	d01b      	beq.n	80065ce <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006598:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800659a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800659c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800659e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80065a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a2:	2202      	movs	r2, #2
 80065a4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80065a8:	2300      	movs	r3, #0
 80065aa:	9303      	str	r3, [sp, #12]
 80065ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ae:	9302      	str	r3, [sp, #8]
 80065b0:	f107 0314 	add.w	r3, r7, #20
 80065b4:	9301      	str	r3, [sp, #4]
 80065b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b8:	9300      	str	r3, [sp, #0]
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	68b9      	ldr	r1, [r7, #8]
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f000 f851 	bl	8006668 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80065c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80065c8:	f000 f8ee 	bl	80067a8 <prvAddNewTaskToReadyList>
 80065cc:	e001      	b.n	80065d2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80065ce:	2300      	movs	r3, #0
 80065d0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80065d2:	697b      	ldr	r3, [r7, #20]
	}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3728      	adds	r7, #40	@ 0x28
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b08c      	sub	sp, #48	@ 0x30
 80065e0:	af04      	add	r7, sp, #16
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	603b      	str	r3, [r7, #0]
 80065e8:	4613      	mov	r3, r2
 80065ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80065ec:	88fb      	ldrh	r3, [r7, #6]
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	4618      	mov	r0, r3
 80065f2:	f001 fcad 	bl	8007f50 <pvPortMalloc>
 80065f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00e      	beq.n	800661c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80065fe:	20a0      	movs	r0, #160	@ 0xa0
 8006600:	f001 fca6 	bl	8007f50 <pvPortMalloc>
 8006604:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d003      	beq.n	8006614 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	631a      	str	r2, [r3, #48]	@ 0x30
 8006612:	e005      	b.n	8006620 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006614:	6978      	ldr	r0, [r7, #20]
 8006616:	f001 fd69 	bl	80080ec <vPortFree>
 800661a:	e001      	b.n	8006620 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800661c:	2300      	movs	r3, #0
 800661e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d017      	beq.n	8006656 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800662e:	88fa      	ldrh	r2, [r7, #6]
 8006630:	2300      	movs	r3, #0
 8006632:	9303      	str	r3, [sp, #12]
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	9302      	str	r3, [sp, #8]
 8006638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800663a:	9301      	str	r3, [sp, #4]
 800663c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800663e:	9300      	str	r3, [sp, #0]
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	68b9      	ldr	r1, [r7, #8]
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	f000 f80f 	bl	8006668 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800664a:	69f8      	ldr	r0, [r7, #28]
 800664c:	f000 f8ac 	bl	80067a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006650:	2301      	movs	r3, #1
 8006652:	61bb      	str	r3, [r7, #24]
 8006654:	e002      	b.n	800665c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006656:	f04f 33ff 	mov.w	r3, #4294967295
 800665a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800665c:	69bb      	ldr	r3, [r7, #24]
	}
 800665e:	4618      	mov	r0, r3
 8006660:	3720      	adds	r7, #32
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
	...

08006668 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b088      	sub	sp, #32
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
 8006674:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006678:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006680:	3b01      	subs	r3, #1
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	4413      	add	r3, r2
 8006686:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	f023 0307 	bic.w	r3, r3, #7
 800668e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	f003 0307 	and.w	r3, r3, #7
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00b      	beq.n	80066b2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800669a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800669e:	f383 8811 	msr	BASEPRI, r3
 80066a2:	f3bf 8f6f 	isb	sy
 80066a6:	f3bf 8f4f 	dsb	sy
 80066aa:	617b      	str	r3, [r7, #20]
}
 80066ac:	bf00      	nop
 80066ae:	bf00      	nop
 80066b0:	e7fd      	b.n	80066ae <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d01f      	beq.n	80066f8 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066b8:	2300      	movs	r3, #0
 80066ba:	61fb      	str	r3, [r7, #28]
 80066bc:	e012      	b.n	80066e4 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80066be:	68ba      	ldr	r2, [r7, #8]
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	4413      	add	r3, r2
 80066c4:	7819      	ldrb	r1, [r3, #0]
 80066c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	4413      	add	r3, r2
 80066cc:	3334      	adds	r3, #52	@ 0x34
 80066ce:	460a      	mov	r2, r1
 80066d0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80066d2:	68ba      	ldr	r2, [r7, #8]
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	4413      	add	r3, r2
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d006      	beq.n	80066ec <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	3301      	adds	r3, #1
 80066e2:	61fb      	str	r3, [r7, #28]
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	2b0f      	cmp	r3, #15
 80066e8:	d9e9      	bls.n	80066be <prvInitialiseNewTask+0x56>
 80066ea:	e000      	b.n	80066ee <prvInitialiseNewTask+0x86>
			{
				break;
 80066ec:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80066ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80066f6:	e003      	b.n	8006700 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80066f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006702:	2b06      	cmp	r3, #6
 8006704:	d901      	bls.n	800670a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006706:	2306      	movs	r3, #6
 8006708:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800670a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800670c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800670e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006712:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006714:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006718:	2200      	movs	r2, #0
 800671a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800671c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800671e:	3304      	adds	r3, #4
 8006720:	4618      	mov	r0, r3
 8006722:	f7ff f976 	bl	8005a12 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006728:	3318      	adds	r3, #24
 800672a:	4618      	mov	r0, r3
 800672c:	f7ff f971 	bl	8005a12 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006732:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006734:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006738:	f1c3 0207 	rsb	r2, r3, #7
 800673c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800673e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006742:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006744:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006748:	2200      	movs	r2, #0
 800674a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800674e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006750:	2200      	movs	r2, #0
 8006752:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006758:	334c      	adds	r3, #76	@ 0x4c
 800675a:	224c      	movs	r2, #76	@ 0x4c
 800675c:	2100      	movs	r1, #0
 800675e:	4618      	mov	r0, r3
 8006760:	f001 fe40 	bl	80083e4 <memset>
 8006764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006766:	4a0d      	ldr	r2, [pc, #52]	@ (800679c <prvInitialiseNewTask+0x134>)
 8006768:	651a      	str	r2, [r3, #80]	@ 0x50
 800676a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800676c:	4a0c      	ldr	r2, [pc, #48]	@ (80067a0 <prvInitialiseNewTask+0x138>)
 800676e:	655a      	str	r2, [r3, #84]	@ 0x54
 8006770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006772:	4a0c      	ldr	r2, [pc, #48]	@ (80067a4 <prvInitialiseNewTask+0x13c>)
 8006774:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006776:	683a      	ldr	r2, [r7, #0]
 8006778:	68f9      	ldr	r1, [r7, #12]
 800677a:	69b8      	ldr	r0, [r7, #24]
 800677c:	f001 f9f8 	bl	8007b70 <pxPortInitialiseStack>
 8006780:	4602      	mov	r2, r0
 8006782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006784:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006788:	2b00      	cmp	r3, #0
 800678a:	d002      	beq.n	8006792 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800678c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800678e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006790:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006792:	bf00      	nop
 8006794:	3720      	adds	r7, #32
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	20001f18 	.word	0x20001f18
 80067a0:	20001f80 	.word	0x20001f80
 80067a4:	20001fe8 	.word	0x20001fe8

080067a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80067b0:	f001 facc 	bl	8007d4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80067b4:	4b2a      	ldr	r3, [pc, #168]	@ (8006860 <prvAddNewTaskToReadyList+0xb8>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	3301      	adds	r3, #1
 80067ba:	4a29      	ldr	r2, [pc, #164]	@ (8006860 <prvAddNewTaskToReadyList+0xb8>)
 80067bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80067be:	4b29      	ldr	r3, [pc, #164]	@ (8006864 <prvAddNewTaskToReadyList+0xbc>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d109      	bne.n	80067da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80067c6:	4a27      	ldr	r2, [pc, #156]	@ (8006864 <prvAddNewTaskToReadyList+0xbc>)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80067cc:	4b24      	ldr	r3, [pc, #144]	@ (8006860 <prvAddNewTaskToReadyList+0xb8>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d110      	bne.n	80067f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80067d4:	f000 fc22 	bl	800701c <prvInitialiseTaskLists>
 80067d8:	e00d      	b.n	80067f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80067da:	4b23      	ldr	r3, [pc, #140]	@ (8006868 <prvAddNewTaskToReadyList+0xc0>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d109      	bne.n	80067f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80067e2:	4b20      	ldr	r3, [pc, #128]	@ (8006864 <prvAddNewTaskToReadyList+0xbc>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d802      	bhi.n	80067f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80067f0:	4a1c      	ldr	r2, [pc, #112]	@ (8006864 <prvAddNewTaskToReadyList+0xbc>)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80067f6:	4b1d      	ldr	r3, [pc, #116]	@ (800686c <prvAddNewTaskToReadyList+0xc4>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	3301      	adds	r3, #1
 80067fc:	4a1b      	ldr	r2, [pc, #108]	@ (800686c <prvAddNewTaskToReadyList+0xc4>)
 80067fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006804:	2201      	movs	r2, #1
 8006806:	409a      	lsls	r2, r3
 8006808:	4b19      	ldr	r3, [pc, #100]	@ (8006870 <prvAddNewTaskToReadyList+0xc8>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4313      	orrs	r3, r2
 800680e:	4a18      	ldr	r2, [pc, #96]	@ (8006870 <prvAddNewTaskToReadyList+0xc8>)
 8006810:	6013      	str	r3, [r2, #0]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006816:	4613      	mov	r3, r2
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	4413      	add	r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	4a15      	ldr	r2, [pc, #84]	@ (8006874 <prvAddNewTaskToReadyList+0xcc>)
 8006820:	441a      	add	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	3304      	adds	r3, #4
 8006826:	4619      	mov	r1, r3
 8006828:	4610      	mov	r0, r2
 800682a:	f7ff f8fe 	bl	8005a2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800682e:	f001 fabd 	bl	8007dac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006832:	4b0d      	ldr	r3, [pc, #52]	@ (8006868 <prvAddNewTaskToReadyList+0xc0>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00e      	beq.n	8006858 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800683a:	4b0a      	ldr	r3, [pc, #40]	@ (8006864 <prvAddNewTaskToReadyList+0xbc>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006844:	429a      	cmp	r2, r3
 8006846:	d207      	bcs.n	8006858 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006848:	4b0b      	ldr	r3, [pc, #44]	@ (8006878 <prvAddNewTaskToReadyList+0xd0>)
 800684a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800684e:	601a      	str	r2, [r3, #0]
 8006850:	f3bf 8f4f 	dsb	sy
 8006854:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006858:	bf00      	nop
 800685a:	3708      	adds	r7, #8
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	20000dc8 	.word	0x20000dc8
 8006864:	20000cc8 	.word	0x20000cc8
 8006868:	20000dd4 	.word	0x20000dd4
 800686c:	20000de4 	.word	0x20000de4
 8006870:	20000dd0 	.word	0x20000dd0
 8006874:	20000ccc 	.word	0x20000ccc
 8006878:	e000ed04 	.word	0xe000ed04

0800687c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006884:	2300      	movs	r3, #0
 8006886:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d018      	beq.n	80068c0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800688e:	4b14      	ldr	r3, [pc, #80]	@ (80068e0 <vTaskDelay+0x64>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00b      	beq.n	80068ae <vTaskDelay+0x32>
	__asm volatile
 8006896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800689a:	f383 8811 	msr	BASEPRI, r3
 800689e:	f3bf 8f6f 	isb	sy
 80068a2:	f3bf 8f4f 	dsb	sy
 80068a6:	60bb      	str	r3, [r7, #8]
}
 80068a8:	bf00      	nop
 80068aa:	bf00      	nop
 80068ac:	e7fd      	b.n	80068aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80068ae:	f000 f88b 	bl	80069c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80068b2:	2100      	movs	r1, #0
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 fd1b 	bl	80072f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80068ba:	f000 f893 	bl	80069e4 <xTaskResumeAll>
 80068be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d107      	bne.n	80068d6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80068c6:	4b07      	ldr	r3, [pc, #28]	@ (80068e4 <vTaskDelay+0x68>)
 80068c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068cc:	601a      	str	r2, [r3, #0]
 80068ce:	f3bf 8f4f 	dsb	sy
 80068d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80068d6:	bf00      	nop
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	20000df0 	.word	0x20000df0
 80068e4:	e000ed04 	.word	0xe000ed04

080068e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b08a      	sub	sp, #40	@ 0x28
 80068ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80068ee:	2300      	movs	r3, #0
 80068f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80068f2:	2300      	movs	r3, #0
 80068f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80068f6:	463a      	mov	r2, r7
 80068f8:	1d39      	adds	r1, r7, #4
 80068fa:	f107 0308 	add.w	r3, r7, #8
 80068fe:	4618      	mov	r0, r3
 8006900:	f7fa f8d2 	bl	8000aa8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006904:	6839      	ldr	r1, [r7, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	68ba      	ldr	r2, [r7, #8]
 800690a:	9202      	str	r2, [sp, #8]
 800690c:	9301      	str	r3, [sp, #4]
 800690e:	2300      	movs	r3, #0
 8006910:	9300      	str	r3, [sp, #0]
 8006912:	2300      	movs	r3, #0
 8006914:	460a      	mov	r2, r1
 8006916:	4924      	ldr	r1, [pc, #144]	@ (80069a8 <vTaskStartScheduler+0xc0>)
 8006918:	4824      	ldr	r0, [pc, #144]	@ (80069ac <vTaskStartScheduler+0xc4>)
 800691a:	f7ff fdff 	bl	800651c <xTaskCreateStatic>
 800691e:	4603      	mov	r3, r0
 8006920:	4a23      	ldr	r2, [pc, #140]	@ (80069b0 <vTaskStartScheduler+0xc8>)
 8006922:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006924:	4b22      	ldr	r3, [pc, #136]	@ (80069b0 <vTaskStartScheduler+0xc8>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d002      	beq.n	8006932 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800692c:	2301      	movs	r3, #1
 800692e:	617b      	str	r3, [r7, #20]
 8006930:	e001      	b.n	8006936 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006932:	2300      	movs	r3, #0
 8006934:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	2b01      	cmp	r3, #1
 800693a:	d102      	bne.n	8006942 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800693c:	f000 fd3e 	bl	80073bc <xTimerCreateTimerTask>
 8006940:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d11b      	bne.n	8006980 <vTaskStartScheduler+0x98>
	__asm volatile
 8006948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800694c:	f383 8811 	msr	BASEPRI, r3
 8006950:	f3bf 8f6f 	isb	sy
 8006954:	f3bf 8f4f 	dsb	sy
 8006958:	613b      	str	r3, [r7, #16]
}
 800695a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800695c:	4b15      	ldr	r3, [pc, #84]	@ (80069b4 <vTaskStartScheduler+0xcc>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	334c      	adds	r3, #76	@ 0x4c
 8006962:	4a15      	ldr	r2, [pc, #84]	@ (80069b8 <vTaskStartScheduler+0xd0>)
 8006964:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006966:	4b15      	ldr	r3, [pc, #84]	@ (80069bc <vTaskStartScheduler+0xd4>)
 8006968:	f04f 32ff 	mov.w	r2, #4294967295
 800696c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800696e:	4b14      	ldr	r3, [pc, #80]	@ (80069c0 <vTaskStartScheduler+0xd8>)
 8006970:	2201      	movs	r2, #1
 8006972:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006974:	4b13      	ldr	r3, [pc, #76]	@ (80069c4 <vTaskStartScheduler+0xdc>)
 8006976:	2200      	movs	r2, #0
 8006978:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800697a:	f001 f975 	bl	8007c68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800697e:	e00f      	b.n	80069a0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006986:	d10b      	bne.n	80069a0 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800698c:	f383 8811 	msr	BASEPRI, r3
 8006990:	f3bf 8f6f 	isb	sy
 8006994:	f3bf 8f4f 	dsb	sy
 8006998:	60fb      	str	r3, [r7, #12]
}
 800699a:	bf00      	nop
 800699c:	bf00      	nop
 800699e:	e7fd      	b.n	800699c <vTaskStartScheduler+0xb4>
}
 80069a0:	bf00      	nop
 80069a2:	3718      	adds	r7, #24
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	0800972c 	.word	0x0800972c
 80069ac:	08006fed 	.word	0x08006fed
 80069b0:	20000dec 	.word	0x20000dec
 80069b4:	20000cc8 	.word	0x20000cc8
 80069b8:	20000150 	.word	0x20000150
 80069bc:	20000de8 	.word	0x20000de8
 80069c0:	20000dd4 	.word	0x20000dd4
 80069c4:	20000dcc 	.word	0x20000dcc

080069c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80069c8:	b480      	push	{r7}
 80069ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80069cc:	4b04      	ldr	r3, [pc, #16]	@ (80069e0 <vTaskSuspendAll+0x18>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	3301      	adds	r3, #1
 80069d2:	4a03      	ldr	r2, [pc, #12]	@ (80069e0 <vTaskSuspendAll+0x18>)
 80069d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80069d6:	bf00      	nop
 80069d8:	46bd      	mov	sp, r7
 80069da:	bc80      	pop	{r7}
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	20000df0 	.word	0x20000df0

080069e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80069ea:	2300      	movs	r3, #0
 80069ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80069ee:	2300      	movs	r3, #0
 80069f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80069f2:	4b42      	ldr	r3, [pc, #264]	@ (8006afc <xTaskResumeAll+0x118>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10b      	bne.n	8006a12 <xTaskResumeAll+0x2e>
	__asm volatile
 80069fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069fe:	f383 8811 	msr	BASEPRI, r3
 8006a02:	f3bf 8f6f 	isb	sy
 8006a06:	f3bf 8f4f 	dsb	sy
 8006a0a:	603b      	str	r3, [r7, #0]
}
 8006a0c:	bf00      	nop
 8006a0e:	bf00      	nop
 8006a10:	e7fd      	b.n	8006a0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006a12:	f001 f99b 	bl	8007d4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006a16:	4b39      	ldr	r3, [pc, #228]	@ (8006afc <xTaskResumeAll+0x118>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	3b01      	subs	r3, #1
 8006a1c:	4a37      	ldr	r2, [pc, #220]	@ (8006afc <xTaskResumeAll+0x118>)
 8006a1e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a20:	4b36      	ldr	r3, [pc, #216]	@ (8006afc <xTaskResumeAll+0x118>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d161      	bne.n	8006aec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006a28:	4b35      	ldr	r3, [pc, #212]	@ (8006b00 <xTaskResumeAll+0x11c>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d05d      	beq.n	8006aec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a30:	e02e      	b.n	8006a90 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a32:	4b34      	ldr	r3, [pc, #208]	@ (8006b04 <xTaskResumeAll+0x120>)
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	3318      	adds	r3, #24
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7ff f84e 	bl	8005ae0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	3304      	adds	r3, #4
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7ff f849 	bl	8005ae0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a52:	2201      	movs	r2, #1
 8006a54:	409a      	lsls	r2, r3
 8006a56:	4b2c      	ldr	r3, [pc, #176]	@ (8006b08 <xTaskResumeAll+0x124>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	4a2a      	ldr	r2, [pc, #168]	@ (8006b08 <xTaskResumeAll+0x124>)
 8006a5e:	6013      	str	r3, [r2, #0]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a64:	4613      	mov	r3, r2
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	4413      	add	r3, r2
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	4a27      	ldr	r2, [pc, #156]	@ (8006b0c <xTaskResumeAll+0x128>)
 8006a6e:	441a      	add	r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	3304      	adds	r3, #4
 8006a74:	4619      	mov	r1, r3
 8006a76:	4610      	mov	r0, r2
 8006a78:	f7fe ffd7 	bl	8005a2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a80:	4b23      	ldr	r3, [pc, #140]	@ (8006b10 <xTaskResumeAll+0x12c>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d302      	bcc.n	8006a90 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006a8a:	4b22      	ldr	r3, [pc, #136]	@ (8006b14 <xTaskResumeAll+0x130>)
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a90:	4b1c      	ldr	r3, [pc, #112]	@ (8006b04 <xTaskResumeAll+0x120>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d1cc      	bne.n	8006a32 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d001      	beq.n	8006aa2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006a9e:	f000 fb61 	bl	8007164 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006aa2:	4b1d      	ldr	r3, [pc, #116]	@ (8006b18 <xTaskResumeAll+0x134>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d010      	beq.n	8006ad0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006aae:	f000 f845 	bl	8006b3c <xTaskIncrementTick>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d002      	beq.n	8006abe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006ab8:	4b16      	ldr	r3, [pc, #88]	@ (8006b14 <xTaskResumeAll+0x130>)
 8006aba:	2201      	movs	r2, #1
 8006abc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1f1      	bne.n	8006aae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006aca:	4b13      	ldr	r3, [pc, #76]	@ (8006b18 <xTaskResumeAll+0x134>)
 8006acc:	2200      	movs	r2, #0
 8006ace:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006ad0:	4b10      	ldr	r3, [pc, #64]	@ (8006b14 <xTaskResumeAll+0x130>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d009      	beq.n	8006aec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006adc:	4b0f      	ldr	r3, [pc, #60]	@ (8006b1c <xTaskResumeAll+0x138>)
 8006ade:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	f3bf 8f4f 	dsb	sy
 8006ae8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006aec:	f001 f95e 	bl	8007dac <vPortExitCritical>

	return xAlreadyYielded;
 8006af0:	68bb      	ldr	r3, [r7, #8]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	20000df0 	.word	0x20000df0
 8006b00:	20000dc8 	.word	0x20000dc8
 8006b04:	20000d88 	.word	0x20000d88
 8006b08:	20000dd0 	.word	0x20000dd0
 8006b0c:	20000ccc 	.word	0x20000ccc
 8006b10:	20000cc8 	.word	0x20000cc8
 8006b14:	20000ddc 	.word	0x20000ddc
 8006b18:	20000dd8 	.word	0x20000dd8
 8006b1c:	e000ed04 	.word	0xe000ed04

08006b20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006b26:	4b04      	ldr	r3, [pc, #16]	@ (8006b38 <xTaskGetTickCount+0x18>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006b2c:	687b      	ldr	r3, [r7, #4]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	370c      	adds	r7, #12
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bc80      	pop	{r7}
 8006b36:	4770      	bx	lr
 8006b38:	20000dcc 	.word	0x20000dcc

08006b3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b086      	sub	sp, #24
 8006b40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006b42:	2300      	movs	r3, #0
 8006b44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b46:	4b4f      	ldr	r3, [pc, #316]	@ (8006c84 <xTaskIncrementTick+0x148>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	f040 808f 	bne.w	8006c6e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006b50:	4b4d      	ldr	r3, [pc, #308]	@ (8006c88 <xTaskIncrementTick+0x14c>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	3301      	adds	r3, #1
 8006b56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006b58:	4a4b      	ldr	r2, [pc, #300]	@ (8006c88 <xTaskIncrementTick+0x14c>)
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d121      	bne.n	8006ba8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006b64:	4b49      	ldr	r3, [pc, #292]	@ (8006c8c <xTaskIncrementTick+0x150>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00b      	beq.n	8006b86 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b72:	f383 8811 	msr	BASEPRI, r3
 8006b76:	f3bf 8f6f 	isb	sy
 8006b7a:	f3bf 8f4f 	dsb	sy
 8006b7e:	603b      	str	r3, [r7, #0]
}
 8006b80:	bf00      	nop
 8006b82:	bf00      	nop
 8006b84:	e7fd      	b.n	8006b82 <xTaskIncrementTick+0x46>
 8006b86:	4b41      	ldr	r3, [pc, #260]	@ (8006c8c <xTaskIncrementTick+0x150>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	60fb      	str	r3, [r7, #12]
 8006b8c:	4b40      	ldr	r3, [pc, #256]	@ (8006c90 <xTaskIncrementTick+0x154>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a3e      	ldr	r2, [pc, #248]	@ (8006c8c <xTaskIncrementTick+0x150>)
 8006b92:	6013      	str	r3, [r2, #0]
 8006b94:	4a3e      	ldr	r2, [pc, #248]	@ (8006c90 <xTaskIncrementTick+0x154>)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6013      	str	r3, [r2, #0]
 8006b9a:	4b3e      	ldr	r3, [pc, #248]	@ (8006c94 <xTaskIncrementTick+0x158>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	4a3c      	ldr	r2, [pc, #240]	@ (8006c94 <xTaskIncrementTick+0x158>)
 8006ba2:	6013      	str	r3, [r2, #0]
 8006ba4:	f000 fade 	bl	8007164 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006ba8:	4b3b      	ldr	r3, [pc, #236]	@ (8006c98 <xTaskIncrementTick+0x15c>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d348      	bcc.n	8006c44 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bb2:	4b36      	ldr	r3, [pc, #216]	@ (8006c8c <xTaskIncrementTick+0x150>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d104      	bne.n	8006bc6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bbc:	4b36      	ldr	r3, [pc, #216]	@ (8006c98 <xTaskIncrementTick+0x15c>)
 8006bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8006bc2:	601a      	str	r2, [r3, #0]
					break;
 8006bc4:	e03e      	b.n	8006c44 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bc6:	4b31      	ldr	r3, [pc, #196]	@ (8006c8c <xTaskIncrementTick+0x150>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006bd6:	693a      	ldr	r2, [r7, #16]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d203      	bcs.n	8006be6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006bde:	4a2e      	ldr	r2, [pc, #184]	@ (8006c98 <xTaskIncrementTick+0x15c>)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006be4:	e02e      	b.n	8006c44 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	3304      	adds	r3, #4
 8006bea:	4618      	mov	r0, r3
 8006bec:	f7fe ff78 	bl	8005ae0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d004      	beq.n	8006c02 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	3318      	adds	r3, #24
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f7fe ff6f 	bl	8005ae0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c06:	2201      	movs	r2, #1
 8006c08:	409a      	lsls	r2, r3
 8006c0a:	4b24      	ldr	r3, [pc, #144]	@ (8006c9c <xTaskIncrementTick+0x160>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	4a22      	ldr	r2, [pc, #136]	@ (8006c9c <xTaskIncrementTick+0x160>)
 8006c12:	6013      	str	r3, [r2, #0]
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c18:	4613      	mov	r3, r2
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	4413      	add	r3, r2
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	4a1f      	ldr	r2, [pc, #124]	@ (8006ca0 <xTaskIncrementTick+0x164>)
 8006c22:	441a      	add	r2, r3
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	3304      	adds	r3, #4
 8006c28:	4619      	mov	r1, r3
 8006c2a:	4610      	mov	r0, r2
 8006c2c:	f7fe fefd 	bl	8005a2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c34:	4b1b      	ldr	r3, [pc, #108]	@ (8006ca4 <xTaskIncrementTick+0x168>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d3b9      	bcc.n	8006bb2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c42:	e7b6      	b.n	8006bb2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006c44:	4b17      	ldr	r3, [pc, #92]	@ (8006ca4 <xTaskIncrementTick+0x168>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c4a:	4915      	ldr	r1, [pc, #84]	@ (8006ca0 <xTaskIncrementTick+0x164>)
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	4413      	add	r3, r2
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	440b      	add	r3, r1
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d901      	bls.n	8006c60 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006c60:	4b11      	ldr	r3, [pc, #68]	@ (8006ca8 <xTaskIncrementTick+0x16c>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d007      	beq.n	8006c78 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	617b      	str	r3, [r7, #20]
 8006c6c:	e004      	b.n	8006c78 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8006cac <xTaskIncrementTick+0x170>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	3301      	adds	r3, #1
 8006c74:	4a0d      	ldr	r2, [pc, #52]	@ (8006cac <xTaskIncrementTick+0x170>)
 8006c76:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006c78:	697b      	ldr	r3, [r7, #20]
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3718      	adds	r7, #24
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	20000df0 	.word	0x20000df0
 8006c88:	20000dcc 	.word	0x20000dcc
 8006c8c:	20000d80 	.word	0x20000d80
 8006c90:	20000d84 	.word	0x20000d84
 8006c94:	20000de0 	.word	0x20000de0
 8006c98:	20000de8 	.word	0x20000de8
 8006c9c:	20000dd0 	.word	0x20000dd0
 8006ca0:	20000ccc 	.word	0x20000ccc
 8006ca4:	20000cc8 	.word	0x20000cc8
 8006ca8:	20000ddc 	.word	0x20000ddc
 8006cac:	20000dd8 	.word	0x20000dd8

08006cb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b087      	sub	sp, #28
 8006cb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006cb6:	4b29      	ldr	r3, [pc, #164]	@ (8006d5c <vTaskSwitchContext+0xac>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d003      	beq.n	8006cc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006cbe:	4b28      	ldr	r3, [pc, #160]	@ (8006d60 <vTaskSwitchContext+0xb0>)
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006cc4:	e045      	b.n	8006d52 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8006cc6:	4b26      	ldr	r3, [pc, #152]	@ (8006d60 <vTaskSwitchContext+0xb0>)
 8006cc8:	2200      	movs	r2, #0
 8006cca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ccc:	4b25      	ldr	r3, [pc, #148]	@ (8006d64 <vTaskSwitchContext+0xb4>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	fab3 f383 	clz	r3, r3
 8006cd8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006cda:	7afb      	ldrb	r3, [r7, #11]
 8006cdc:	f1c3 031f 	rsb	r3, r3, #31
 8006ce0:	617b      	str	r3, [r7, #20]
 8006ce2:	4921      	ldr	r1, [pc, #132]	@ (8006d68 <vTaskSwitchContext+0xb8>)
 8006ce4:	697a      	ldr	r2, [r7, #20]
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	4413      	add	r3, r2
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	440b      	add	r3, r1
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10b      	bne.n	8006d0e <vTaskSwitchContext+0x5e>
	__asm volatile
 8006cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cfa:	f383 8811 	msr	BASEPRI, r3
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f3bf 8f4f 	dsb	sy
 8006d06:	607b      	str	r3, [r7, #4]
}
 8006d08:	bf00      	nop
 8006d0a:	bf00      	nop
 8006d0c:	e7fd      	b.n	8006d0a <vTaskSwitchContext+0x5a>
 8006d0e:	697a      	ldr	r2, [r7, #20]
 8006d10:	4613      	mov	r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4413      	add	r3, r2
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	4a13      	ldr	r2, [pc, #76]	@ (8006d68 <vTaskSwitchContext+0xb8>)
 8006d1a:	4413      	add	r3, r2
 8006d1c:	613b      	str	r3, [r7, #16]
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	685a      	ldr	r2, [r3, #4]
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	605a      	str	r2, [r3, #4]
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	685a      	ldr	r2, [r3, #4]
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	3308      	adds	r3, #8
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d104      	bne.n	8006d3e <vTaskSwitchContext+0x8e>
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	685a      	ldr	r2, [r3, #4]
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	605a      	str	r2, [r3, #4]
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	4a09      	ldr	r2, [pc, #36]	@ (8006d6c <vTaskSwitchContext+0xbc>)
 8006d46:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006d48:	4b08      	ldr	r3, [pc, #32]	@ (8006d6c <vTaskSwitchContext+0xbc>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	334c      	adds	r3, #76	@ 0x4c
 8006d4e:	4a08      	ldr	r2, [pc, #32]	@ (8006d70 <vTaskSwitchContext+0xc0>)
 8006d50:	6013      	str	r3, [r2, #0]
}
 8006d52:	bf00      	nop
 8006d54:	371c      	adds	r7, #28
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bc80      	pop	{r7}
 8006d5a:	4770      	bx	lr
 8006d5c:	20000df0 	.word	0x20000df0
 8006d60:	20000ddc 	.word	0x20000ddc
 8006d64:	20000dd0 	.word	0x20000dd0
 8006d68:	20000ccc 	.word	0x20000ccc
 8006d6c:	20000cc8 	.word	0x20000cc8
 8006d70:	20000150 	.word	0x20000150

08006d74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d10b      	bne.n	8006d9c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d88:	f383 8811 	msr	BASEPRI, r3
 8006d8c:	f3bf 8f6f 	isb	sy
 8006d90:	f3bf 8f4f 	dsb	sy
 8006d94:	60fb      	str	r3, [r7, #12]
}
 8006d96:	bf00      	nop
 8006d98:	bf00      	nop
 8006d9a:	e7fd      	b.n	8006d98 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d9c:	4b07      	ldr	r3, [pc, #28]	@ (8006dbc <vTaskPlaceOnEventList+0x48>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	3318      	adds	r3, #24
 8006da2:	4619      	mov	r1, r3
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f7fe fe63 	bl	8005a70 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006daa:	2101      	movs	r1, #1
 8006dac:	6838      	ldr	r0, [r7, #0]
 8006dae:	f000 fa9f 	bl	80072f0 <prvAddCurrentTaskToDelayedList>
}
 8006db2:	bf00      	nop
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	20000cc8 	.word	0x20000cc8

08006dc0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b086      	sub	sp, #24
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d10b      	bne.n	8006dea <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dd6:	f383 8811 	msr	BASEPRI, r3
 8006dda:	f3bf 8f6f 	isb	sy
 8006dde:	f3bf 8f4f 	dsb	sy
 8006de2:	617b      	str	r3, [r7, #20]
}
 8006de4:	bf00      	nop
 8006de6:	bf00      	nop
 8006de8:	e7fd      	b.n	8006de6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006dea:	4b0a      	ldr	r3, [pc, #40]	@ (8006e14 <vTaskPlaceOnEventListRestricted+0x54>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	3318      	adds	r3, #24
 8006df0:	4619      	mov	r1, r3
 8006df2:	68f8      	ldr	r0, [r7, #12]
 8006df4:	f7fe fe19 	bl	8005a2a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d002      	beq.n	8006e04 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8006e02:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006e04:	6879      	ldr	r1, [r7, #4]
 8006e06:	68b8      	ldr	r0, [r7, #8]
 8006e08:	f000 fa72 	bl	80072f0 <prvAddCurrentTaskToDelayedList>
	}
 8006e0c:	bf00      	nop
 8006e0e:	3718      	adds	r7, #24
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	20000cc8 	.word	0x20000cc8

08006e18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b086      	sub	sp, #24
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10b      	bne.n	8006e46 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e32:	f383 8811 	msr	BASEPRI, r3
 8006e36:	f3bf 8f6f 	isb	sy
 8006e3a:	f3bf 8f4f 	dsb	sy
 8006e3e:	60fb      	str	r3, [r7, #12]
}
 8006e40:	bf00      	nop
 8006e42:	bf00      	nop
 8006e44:	e7fd      	b.n	8006e42 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	3318      	adds	r3, #24
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7fe fe48 	bl	8005ae0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e50:	4b1d      	ldr	r3, [pc, #116]	@ (8006ec8 <xTaskRemoveFromEventList+0xb0>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d11c      	bne.n	8006e92 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	3304      	adds	r3, #4
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f7fe fe3f 	bl	8005ae0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e66:	2201      	movs	r2, #1
 8006e68:	409a      	lsls	r2, r3
 8006e6a:	4b18      	ldr	r3, [pc, #96]	@ (8006ecc <xTaskRemoveFromEventList+0xb4>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	4a16      	ldr	r2, [pc, #88]	@ (8006ecc <xTaskRemoveFromEventList+0xb4>)
 8006e72:	6013      	str	r3, [r2, #0]
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e78:	4613      	mov	r3, r2
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	4413      	add	r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4a13      	ldr	r2, [pc, #76]	@ (8006ed0 <xTaskRemoveFromEventList+0xb8>)
 8006e82:	441a      	add	r2, r3
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	3304      	adds	r3, #4
 8006e88:	4619      	mov	r1, r3
 8006e8a:	4610      	mov	r0, r2
 8006e8c:	f7fe fdcd 	bl	8005a2a <vListInsertEnd>
 8006e90:	e005      	b.n	8006e9e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	3318      	adds	r3, #24
 8006e96:	4619      	mov	r1, r3
 8006e98:	480e      	ldr	r0, [pc, #56]	@ (8006ed4 <xTaskRemoveFromEventList+0xbc>)
 8006e9a:	f7fe fdc6 	bl	8005a2a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ed8 <xTaskRemoveFromEventList+0xc0>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d905      	bls.n	8006eb8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006eac:	2301      	movs	r3, #1
 8006eae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8006edc <xTaskRemoveFromEventList+0xc4>)
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	601a      	str	r2, [r3, #0]
 8006eb6:	e001      	b.n	8006ebc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006ebc:	697b      	ldr	r3, [r7, #20]
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3718      	adds	r7, #24
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	20000df0 	.word	0x20000df0
 8006ecc:	20000dd0 	.word	0x20000dd0
 8006ed0:	20000ccc 	.word	0x20000ccc
 8006ed4:	20000d88 	.word	0x20000d88
 8006ed8:	20000cc8 	.word	0x20000cc8
 8006edc:	20000ddc 	.word	0x20000ddc

08006ee0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ee8:	4b06      	ldr	r3, [pc, #24]	@ (8006f04 <vTaskInternalSetTimeOutState+0x24>)
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006ef0:	4b05      	ldr	r3, [pc, #20]	@ (8006f08 <vTaskInternalSetTimeOutState+0x28>)
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	605a      	str	r2, [r3, #4]
}
 8006ef8:	bf00      	nop
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bc80      	pop	{r7}
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	20000de0 	.word	0x20000de0
 8006f08:	20000dcc 	.word	0x20000dcc

08006f0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b088      	sub	sp, #32
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d10b      	bne.n	8006f34 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f20:	f383 8811 	msr	BASEPRI, r3
 8006f24:	f3bf 8f6f 	isb	sy
 8006f28:	f3bf 8f4f 	dsb	sy
 8006f2c:	613b      	str	r3, [r7, #16]
}
 8006f2e:	bf00      	nop
 8006f30:	bf00      	nop
 8006f32:	e7fd      	b.n	8006f30 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10b      	bne.n	8006f52 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f3e:	f383 8811 	msr	BASEPRI, r3
 8006f42:	f3bf 8f6f 	isb	sy
 8006f46:	f3bf 8f4f 	dsb	sy
 8006f4a:	60fb      	str	r3, [r7, #12]
}
 8006f4c:	bf00      	nop
 8006f4e:	bf00      	nop
 8006f50:	e7fd      	b.n	8006f4e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006f52:	f000 fefb 	bl	8007d4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006f56:	4b1d      	ldr	r3, [pc, #116]	@ (8006fcc <xTaskCheckForTimeOut+0xc0>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	69ba      	ldr	r2, [r7, #24]
 8006f62:	1ad3      	subs	r3, r2, r3
 8006f64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f6e:	d102      	bne.n	8006f76 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006f70:	2300      	movs	r3, #0
 8006f72:	61fb      	str	r3, [r7, #28]
 8006f74:	e023      	b.n	8006fbe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	4b15      	ldr	r3, [pc, #84]	@ (8006fd0 <xTaskCheckForTimeOut+0xc4>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d007      	beq.n	8006f92 <xTaskCheckForTimeOut+0x86>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	69ba      	ldr	r2, [r7, #24]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d302      	bcc.n	8006f92 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	61fb      	str	r3, [r7, #28]
 8006f90:	e015      	b.n	8006fbe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	697a      	ldr	r2, [r7, #20]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d20b      	bcs.n	8006fb4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	1ad2      	subs	r2, r2, r3
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f7ff ff99 	bl	8006ee0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	61fb      	str	r3, [r7, #28]
 8006fb2:	e004      	b.n	8006fbe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006fbe:	f000 fef5 	bl	8007dac <vPortExitCritical>

	return xReturn;
 8006fc2:	69fb      	ldr	r3, [r7, #28]
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3720      	adds	r7, #32
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	20000dcc 	.word	0x20000dcc
 8006fd0:	20000de0 	.word	0x20000de0

08006fd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006fd8:	4b03      	ldr	r3, [pc, #12]	@ (8006fe8 <vTaskMissedYield+0x14>)
 8006fda:	2201      	movs	r2, #1
 8006fdc:	601a      	str	r2, [r3, #0]
}
 8006fde:	bf00      	nop
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bc80      	pop	{r7}
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	20000ddc 	.word	0x20000ddc

08006fec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ff4:	f000 f852 	bl	800709c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ff8:	4b06      	ldr	r3, [pc, #24]	@ (8007014 <prvIdleTask+0x28>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d9f9      	bls.n	8006ff4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007000:	4b05      	ldr	r3, [pc, #20]	@ (8007018 <prvIdleTask+0x2c>)
 8007002:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007006:	601a      	str	r2, [r3, #0]
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007010:	e7f0      	b.n	8006ff4 <prvIdleTask+0x8>
 8007012:	bf00      	nop
 8007014:	20000ccc 	.word	0x20000ccc
 8007018:	e000ed04 	.word	0xe000ed04

0800701c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007022:	2300      	movs	r3, #0
 8007024:	607b      	str	r3, [r7, #4]
 8007026:	e00c      	b.n	8007042 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	4613      	mov	r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	4413      	add	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4a12      	ldr	r2, [pc, #72]	@ (800707c <prvInitialiseTaskLists+0x60>)
 8007034:	4413      	add	r3, r2
 8007036:	4618      	mov	r0, r3
 8007038:	f7fe fccc 	bl	80059d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	3301      	adds	r3, #1
 8007040:	607b      	str	r3, [r7, #4]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2b06      	cmp	r3, #6
 8007046:	d9ef      	bls.n	8007028 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007048:	480d      	ldr	r0, [pc, #52]	@ (8007080 <prvInitialiseTaskLists+0x64>)
 800704a:	f7fe fcc3 	bl	80059d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800704e:	480d      	ldr	r0, [pc, #52]	@ (8007084 <prvInitialiseTaskLists+0x68>)
 8007050:	f7fe fcc0 	bl	80059d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007054:	480c      	ldr	r0, [pc, #48]	@ (8007088 <prvInitialiseTaskLists+0x6c>)
 8007056:	f7fe fcbd 	bl	80059d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800705a:	480c      	ldr	r0, [pc, #48]	@ (800708c <prvInitialiseTaskLists+0x70>)
 800705c:	f7fe fcba 	bl	80059d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007060:	480b      	ldr	r0, [pc, #44]	@ (8007090 <prvInitialiseTaskLists+0x74>)
 8007062:	f7fe fcb7 	bl	80059d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007066:	4b0b      	ldr	r3, [pc, #44]	@ (8007094 <prvInitialiseTaskLists+0x78>)
 8007068:	4a05      	ldr	r2, [pc, #20]	@ (8007080 <prvInitialiseTaskLists+0x64>)
 800706a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800706c:	4b0a      	ldr	r3, [pc, #40]	@ (8007098 <prvInitialiseTaskLists+0x7c>)
 800706e:	4a05      	ldr	r2, [pc, #20]	@ (8007084 <prvInitialiseTaskLists+0x68>)
 8007070:	601a      	str	r2, [r3, #0]
}
 8007072:	bf00      	nop
 8007074:	3708      	adds	r7, #8
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	20000ccc 	.word	0x20000ccc
 8007080:	20000d58 	.word	0x20000d58
 8007084:	20000d6c 	.word	0x20000d6c
 8007088:	20000d88 	.word	0x20000d88
 800708c:	20000d9c 	.word	0x20000d9c
 8007090:	20000db4 	.word	0x20000db4
 8007094:	20000d80 	.word	0x20000d80
 8007098:	20000d84 	.word	0x20000d84

0800709c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80070a2:	e019      	b.n	80070d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80070a4:	f000 fe52 	bl	8007d4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070a8:	4b10      	ldr	r3, [pc, #64]	@ (80070ec <prvCheckTasksWaitingTermination+0x50>)
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	3304      	adds	r3, #4
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7fe fd13 	bl	8005ae0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80070ba:	4b0d      	ldr	r3, [pc, #52]	@ (80070f0 <prvCheckTasksWaitingTermination+0x54>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	3b01      	subs	r3, #1
 80070c0:	4a0b      	ldr	r2, [pc, #44]	@ (80070f0 <prvCheckTasksWaitingTermination+0x54>)
 80070c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80070c4:	4b0b      	ldr	r3, [pc, #44]	@ (80070f4 <prvCheckTasksWaitingTermination+0x58>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	3b01      	subs	r3, #1
 80070ca:	4a0a      	ldr	r2, [pc, #40]	@ (80070f4 <prvCheckTasksWaitingTermination+0x58>)
 80070cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80070ce:	f000 fe6d 	bl	8007dac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 f810 	bl	80070f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80070d8:	4b06      	ldr	r3, [pc, #24]	@ (80070f4 <prvCheckTasksWaitingTermination+0x58>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d1e1      	bne.n	80070a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80070e0:	bf00      	nop
 80070e2:	bf00      	nop
 80070e4:	3708      	adds	r7, #8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	20000d9c 	.word	0x20000d9c
 80070f0:	20000dc8 	.word	0x20000dc8
 80070f4:	20000db0 	.word	0x20000db0

080070f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	334c      	adds	r3, #76	@ 0x4c
 8007104:	4618      	mov	r0, r3
 8007106:	f001 f975 	bl	80083f4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007110:	2b00      	cmp	r3, #0
 8007112:	d108      	bne.n	8007126 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007118:	4618      	mov	r0, r3
 800711a:	f000 ffe7 	bl	80080ec <vPortFree>
				vPortFree( pxTCB );
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 ffe4 	bl	80080ec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007124:	e019      	b.n	800715a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800712c:	2b01      	cmp	r3, #1
 800712e:	d103      	bne.n	8007138 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 ffdb 	bl	80080ec <vPortFree>
	}
 8007136:	e010      	b.n	800715a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800713e:	2b02      	cmp	r3, #2
 8007140:	d00b      	beq.n	800715a <prvDeleteTCB+0x62>
	__asm volatile
 8007142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007146:	f383 8811 	msr	BASEPRI, r3
 800714a:	f3bf 8f6f 	isb	sy
 800714e:	f3bf 8f4f 	dsb	sy
 8007152:	60fb      	str	r3, [r7, #12]
}
 8007154:	bf00      	nop
 8007156:	bf00      	nop
 8007158:	e7fd      	b.n	8007156 <prvDeleteTCB+0x5e>
	}
 800715a:	bf00      	nop
 800715c:	3710      	adds	r7, #16
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
	...

08007164 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800716a:	4b0c      	ldr	r3, [pc, #48]	@ (800719c <prvResetNextTaskUnblockTime+0x38>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d104      	bne.n	800717e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007174:	4b0a      	ldr	r3, [pc, #40]	@ (80071a0 <prvResetNextTaskUnblockTime+0x3c>)
 8007176:	f04f 32ff 	mov.w	r2, #4294967295
 800717a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800717c:	e008      	b.n	8007190 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800717e:	4b07      	ldr	r3, [pc, #28]	@ (800719c <prvResetNextTaskUnblockTime+0x38>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	4a04      	ldr	r2, [pc, #16]	@ (80071a0 <prvResetNextTaskUnblockTime+0x3c>)
 800718e:	6013      	str	r3, [r2, #0]
}
 8007190:	bf00      	nop
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	bc80      	pop	{r7}
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	20000d80 	.word	0x20000d80
 80071a0:	20000de8 	.word	0x20000de8

080071a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80071aa:	4b0b      	ldr	r3, [pc, #44]	@ (80071d8 <xTaskGetSchedulerState+0x34>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d102      	bne.n	80071b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80071b2:	2301      	movs	r3, #1
 80071b4:	607b      	str	r3, [r7, #4]
 80071b6:	e008      	b.n	80071ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071b8:	4b08      	ldr	r3, [pc, #32]	@ (80071dc <xTaskGetSchedulerState+0x38>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d102      	bne.n	80071c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80071c0:	2302      	movs	r3, #2
 80071c2:	607b      	str	r3, [r7, #4]
 80071c4:	e001      	b.n	80071ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80071c6:	2300      	movs	r3, #0
 80071c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80071ca:	687b      	ldr	r3, [r7, #4]
	}
 80071cc:	4618      	mov	r0, r3
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bc80      	pop	{r7}
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	20000dd4 	.word	0x20000dd4
 80071dc:	20000df0 	.word	0x20000df0

080071e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b086      	sub	sp, #24
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80071ec:	2300      	movs	r3, #0
 80071ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d070      	beq.n	80072d8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80071f6:	4b3b      	ldr	r3, [pc, #236]	@ (80072e4 <xTaskPriorityDisinherit+0x104>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	693a      	ldr	r2, [r7, #16]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d00b      	beq.n	8007218 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007204:	f383 8811 	msr	BASEPRI, r3
 8007208:	f3bf 8f6f 	isb	sy
 800720c:	f3bf 8f4f 	dsb	sy
 8007210:	60fb      	str	r3, [r7, #12]
}
 8007212:	bf00      	nop
 8007214:	bf00      	nop
 8007216:	e7fd      	b.n	8007214 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800721c:	2b00      	cmp	r3, #0
 800721e:	d10b      	bne.n	8007238 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007224:	f383 8811 	msr	BASEPRI, r3
 8007228:	f3bf 8f6f 	isb	sy
 800722c:	f3bf 8f4f 	dsb	sy
 8007230:	60bb      	str	r3, [r7, #8]
}
 8007232:	bf00      	nop
 8007234:	bf00      	nop
 8007236:	e7fd      	b.n	8007234 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800723c:	1e5a      	subs	r2, r3, #1
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800724a:	429a      	cmp	r2, r3
 800724c:	d044      	beq.n	80072d8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007252:	2b00      	cmp	r3, #0
 8007254:	d140      	bne.n	80072d8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	3304      	adds	r3, #4
 800725a:	4618      	mov	r0, r3
 800725c:	f7fe fc40 	bl	8005ae0 <uxListRemove>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d115      	bne.n	8007292 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800726a:	491f      	ldr	r1, [pc, #124]	@ (80072e8 <xTaskPriorityDisinherit+0x108>)
 800726c:	4613      	mov	r3, r2
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	4413      	add	r3, r2
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	440b      	add	r3, r1
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10a      	bne.n	8007292 <xTaskPriorityDisinherit+0xb2>
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007280:	2201      	movs	r2, #1
 8007282:	fa02 f303 	lsl.w	r3, r2, r3
 8007286:	43da      	mvns	r2, r3
 8007288:	4b18      	ldr	r3, [pc, #96]	@ (80072ec <xTaskPriorityDisinherit+0x10c>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4013      	ands	r3, r2
 800728e:	4a17      	ldr	r2, [pc, #92]	@ (80072ec <xTaskPriorityDisinherit+0x10c>)
 8007290:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800729e:	f1c3 0207 	rsb	r2, r3, #7
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072aa:	2201      	movs	r2, #1
 80072ac:	409a      	lsls	r2, r3
 80072ae:	4b0f      	ldr	r3, [pc, #60]	@ (80072ec <xTaskPriorityDisinherit+0x10c>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	4a0d      	ldr	r2, [pc, #52]	@ (80072ec <xTaskPriorityDisinherit+0x10c>)
 80072b6:	6013      	str	r3, [r2, #0]
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072bc:	4613      	mov	r3, r2
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	4413      	add	r3, r2
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	4a08      	ldr	r2, [pc, #32]	@ (80072e8 <xTaskPriorityDisinherit+0x108>)
 80072c6:	441a      	add	r2, r3
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	3304      	adds	r3, #4
 80072cc:	4619      	mov	r1, r3
 80072ce:	4610      	mov	r0, r2
 80072d0:	f7fe fbab 	bl	8005a2a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80072d4:	2301      	movs	r3, #1
 80072d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80072d8:	697b      	ldr	r3, [r7, #20]
	}
 80072da:	4618      	mov	r0, r3
 80072dc:	3718      	adds	r7, #24
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	20000cc8 	.word	0x20000cc8
 80072e8:	20000ccc 	.word	0x20000ccc
 80072ec:	20000dd0 	.word	0x20000dd0

080072f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80072fa:	4b29      	ldr	r3, [pc, #164]	@ (80073a0 <prvAddCurrentTaskToDelayedList+0xb0>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007300:	4b28      	ldr	r3, [pc, #160]	@ (80073a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	3304      	adds	r3, #4
 8007306:	4618      	mov	r0, r3
 8007308:	f7fe fbea 	bl	8005ae0 <uxListRemove>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d10b      	bne.n	800732a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007312:	4b24      	ldr	r3, [pc, #144]	@ (80073a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007318:	2201      	movs	r2, #1
 800731a:	fa02 f303 	lsl.w	r3, r2, r3
 800731e:	43da      	mvns	r2, r3
 8007320:	4b21      	ldr	r3, [pc, #132]	@ (80073a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4013      	ands	r3, r2
 8007326:	4a20      	ldr	r2, [pc, #128]	@ (80073a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007328:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007330:	d10a      	bne.n	8007348 <prvAddCurrentTaskToDelayedList+0x58>
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d007      	beq.n	8007348 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007338:	4b1a      	ldr	r3, [pc, #104]	@ (80073a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	3304      	adds	r3, #4
 800733e:	4619      	mov	r1, r3
 8007340:	481a      	ldr	r0, [pc, #104]	@ (80073ac <prvAddCurrentTaskToDelayedList+0xbc>)
 8007342:	f7fe fb72 	bl	8005a2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007346:	e026      	b.n	8007396 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4413      	add	r3, r2
 800734e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007350:	4b14      	ldr	r3, [pc, #80]	@ (80073a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68ba      	ldr	r2, [r7, #8]
 8007356:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007358:	68ba      	ldr	r2, [r7, #8]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	429a      	cmp	r2, r3
 800735e:	d209      	bcs.n	8007374 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007360:	4b13      	ldr	r3, [pc, #76]	@ (80073b0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	4b0f      	ldr	r3, [pc, #60]	@ (80073a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	3304      	adds	r3, #4
 800736a:	4619      	mov	r1, r3
 800736c:	4610      	mov	r0, r2
 800736e:	f7fe fb7f 	bl	8005a70 <vListInsert>
}
 8007372:	e010      	b.n	8007396 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007374:	4b0f      	ldr	r3, [pc, #60]	@ (80073b4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	4b0a      	ldr	r3, [pc, #40]	@ (80073a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	3304      	adds	r3, #4
 800737e:	4619      	mov	r1, r3
 8007380:	4610      	mov	r0, r2
 8007382:	f7fe fb75 	bl	8005a70 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007386:	4b0c      	ldr	r3, [pc, #48]	@ (80073b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68ba      	ldr	r2, [r7, #8]
 800738c:	429a      	cmp	r2, r3
 800738e:	d202      	bcs.n	8007396 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007390:	4a09      	ldr	r2, [pc, #36]	@ (80073b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	6013      	str	r3, [r2, #0]
}
 8007396:	bf00      	nop
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	20000dcc 	.word	0x20000dcc
 80073a4:	20000cc8 	.word	0x20000cc8
 80073a8:	20000dd0 	.word	0x20000dd0
 80073ac:	20000db4 	.word	0x20000db4
 80073b0:	20000d84 	.word	0x20000d84
 80073b4:	20000d80 	.word	0x20000d80
 80073b8:	20000de8 	.word	0x20000de8

080073bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b08a      	sub	sp, #40	@ 0x28
 80073c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80073c2:	2300      	movs	r3, #0
 80073c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80073c6:	f000 fb93 	bl	8007af0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80073ca:	4b1d      	ldr	r3, [pc, #116]	@ (8007440 <xTimerCreateTimerTask+0x84>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d021      	beq.n	8007416 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80073d2:	2300      	movs	r3, #0
 80073d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80073d6:	2300      	movs	r3, #0
 80073d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80073da:	1d3a      	adds	r2, r7, #4
 80073dc:	f107 0108 	add.w	r1, r7, #8
 80073e0:	f107 030c 	add.w	r3, r7, #12
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7f9 fb77 	bl	8000ad8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80073ea:	6879      	ldr	r1, [r7, #4]
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	68fa      	ldr	r2, [r7, #12]
 80073f0:	9202      	str	r2, [sp, #8]
 80073f2:	9301      	str	r3, [sp, #4]
 80073f4:	2302      	movs	r3, #2
 80073f6:	9300      	str	r3, [sp, #0]
 80073f8:	2300      	movs	r3, #0
 80073fa:	460a      	mov	r2, r1
 80073fc:	4911      	ldr	r1, [pc, #68]	@ (8007444 <xTimerCreateTimerTask+0x88>)
 80073fe:	4812      	ldr	r0, [pc, #72]	@ (8007448 <xTimerCreateTimerTask+0x8c>)
 8007400:	f7ff f88c 	bl	800651c <xTaskCreateStatic>
 8007404:	4603      	mov	r3, r0
 8007406:	4a11      	ldr	r2, [pc, #68]	@ (800744c <xTimerCreateTimerTask+0x90>)
 8007408:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800740a:	4b10      	ldr	r3, [pc, #64]	@ (800744c <xTimerCreateTimerTask+0x90>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d001      	beq.n	8007416 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007412:	2301      	movs	r3, #1
 8007414:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d10b      	bne.n	8007434 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800741c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007420:	f383 8811 	msr	BASEPRI, r3
 8007424:	f3bf 8f6f 	isb	sy
 8007428:	f3bf 8f4f 	dsb	sy
 800742c:	613b      	str	r3, [r7, #16]
}
 800742e:	bf00      	nop
 8007430:	bf00      	nop
 8007432:	e7fd      	b.n	8007430 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007434:	697b      	ldr	r3, [r7, #20]
}
 8007436:	4618      	mov	r0, r3
 8007438:	3718      	adds	r7, #24
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	20000e24 	.word	0x20000e24
 8007444:	08009734 	.word	0x08009734
 8007448:	080076c5 	.word	0x080076c5
 800744c:	20000e28 	.word	0x20000e28

08007450 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007450:	b580      	push	{r7, lr}
 8007452:	b088      	sub	sp, #32
 8007454:	af02      	add	r7, sp, #8
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	607a      	str	r2, [r7, #4]
 800745c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800745e:	2028      	movs	r0, #40	@ 0x28
 8007460:	f000 fd76 	bl	8007f50 <pvPortMalloc>
 8007464:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00d      	beq.n	8007488 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	9301      	str	r3, [sp, #4]
 8007478:	6a3b      	ldr	r3, [r7, #32]
 800747a:	9300      	str	r3, [sp, #0]
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	68b9      	ldr	r1, [r7, #8]
 8007482:	68f8      	ldr	r0, [r7, #12]
 8007484:	f000 f845 	bl	8007512 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007488:	697b      	ldr	r3, [r7, #20]
	}
 800748a:	4618      	mov	r0, r3
 800748c:	3718      	adds	r7, #24
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}

08007492 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8007492:	b580      	push	{r7, lr}
 8007494:	b08a      	sub	sp, #40	@ 0x28
 8007496:	af02      	add	r7, sp, #8
 8007498:	60f8      	str	r0, [r7, #12]
 800749a:	60b9      	str	r1, [r7, #8]
 800749c:	607a      	str	r2, [r7, #4]
 800749e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80074a0:	2328      	movs	r3, #40	@ 0x28
 80074a2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	2b28      	cmp	r3, #40	@ 0x28
 80074a8:	d00b      	beq.n	80074c2 <xTimerCreateStatic+0x30>
	__asm volatile
 80074aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ae:	f383 8811 	msr	BASEPRI, r3
 80074b2:	f3bf 8f6f 	isb	sy
 80074b6:	f3bf 8f4f 	dsb	sy
 80074ba:	61bb      	str	r3, [r7, #24]
}
 80074bc:	bf00      	nop
 80074be:	bf00      	nop
 80074c0:	e7fd      	b.n	80074be <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80074c2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80074c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10b      	bne.n	80074e2 <xTimerCreateStatic+0x50>
	__asm volatile
 80074ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ce:	f383 8811 	msr	BASEPRI, r3
 80074d2:	f3bf 8f6f 	isb	sy
 80074d6:	f3bf 8f4f 	dsb	sy
 80074da:	617b      	str	r3, [r7, #20]
}
 80074dc:	bf00      	nop
 80074de:	bf00      	nop
 80074e0:	e7fd      	b.n	80074de <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80074e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074e4:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00d      	beq.n	8007508 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	2202      	movs	r2, #2
 80074f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	9301      	str	r3, [sp, #4]
 80074f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074fa:	9300      	str	r3, [sp, #0]
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	68b9      	ldr	r1, [r7, #8]
 8007502:	68f8      	ldr	r0, [r7, #12]
 8007504:	f000 f805 	bl	8007512 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007508:	69fb      	ldr	r3, [r7, #28]
	}
 800750a:	4618      	mov	r0, r3
 800750c:	3720      	adds	r7, #32
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}

08007512 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b086      	sub	sp, #24
 8007516:	af00      	add	r7, sp, #0
 8007518:	60f8      	str	r0, [r7, #12]
 800751a:	60b9      	str	r1, [r7, #8]
 800751c:	607a      	str	r2, [r7, #4]
 800751e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d10b      	bne.n	800753e <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8007526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800752a:	f383 8811 	msr	BASEPRI, r3
 800752e:	f3bf 8f6f 	isb	sy
 8007532:	f3bf 8f4f 	dsb	sy
 8007536:	617b      	str	r3, [r7, #20]
}
 8007538:	bf00      	nop
 800753a:	bf00      	nop
 800753c:	e7fd      	b.n	800753a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800753e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007540:	2b00      	cmp	r3, #0
 8007542:	d01e      	beq.n	8007582 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007544:	f000 fad4 	bl	8007af0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800754e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007550:	68ba      	ldr	r2, [r7, #8]
 8007552:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8007554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007556:	683a      	ldr	r2, [r7, #0]
 8007558:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800755a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800755c:	6a3a      	ldr	r2, [r7, #32]
 800755e:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007562:	3304      	adds	r3, #4
 8007564:	4618      	mov	r0, r3
 8007566:	f7fe fa54 	bl	8005a12 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d008      	beq.n	8007582 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8007570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007572:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007576:	f043 0304 	orr.w	r3, r3, #4
 800757a:	b2da      	uxtb	r2, r3
 800757c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800757e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8007582:	bf00      	nop
 8007584:	3718      	adds	r7, #24
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
	...

0800758c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b08a      	sub	sp, #40	@ 0x28
 8007590:	af00      	add	r7, sp, #0
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	607a      	str	r2, [r7, #4]
 8007598:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800759a:	2300      	movs	r3, #0
 800759c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d10b      	bne.n	80075bc <xTimerGenericCommand+0x30>
	__asm volatile
 80075a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a8:	f383 8811 	msr	BASEPRI, r3
 80075ac:	f3bf 8f6f 	isb	sy
 80075b0:	f3bf 8f4f 	dsb	sy
 80075b4:	623b      	str	r3, [r7, #32]
}
 80075b6:	bf00      	nop
 80075b8:	bf00      	nop
 80075ba:	e7fd      	b.n	80075b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80075bc:	4b19      	ldr	r3, [pc, #100]	@ (8007624 <xTimerGenericCommand+0x98>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d02a      	beq.n	800761a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	2b05      	cmp	r3, #5
 80075d4:	dc18      	bgt.n	8007608 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80075d6:	f7ff fde5 	bl	80071a4 <xTaskGetSchedulerState>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b02      	cmp	r3, #2
 80075de:	d109      	bne.n	80075f4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80075e0:	4b10      	ldr	r3, [pc, #64]	@ (8007624 <xTimerGenericCommand+0x98>)
 80075e2:	6818      	ldr	r0, [r3, #0]
 80075e4:	f107 0114 	add.w	r1, r7, #20
 80075e8:	2300      	movs	r3, #0
 80075ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075ec:	f7fe fba8 	bl	8005d40 <xQueueGenericSend>
 80075f0:	6278      	str	r0, [r7, #36]	@ 0x24
 80075f2:	e012      	b.n	800761a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80075f4:	4b0b      	ldr	r3, [pc, #44]	@ (8007624 <xTimerGenericCommand+0x98>)
 80075f6:	6818      	ldr	r0, [r3, #0]
 80075f8:	f107 0114 	add.w	r1, r7, #20
 80075fc:	2300      	movs	r3, #0
 80075fe:	2200      	movs	r2, #0
 8007600:	f7fe fb9e 	bl	8005d40 <xQueueGenericSend>
 8007604:	6278      	str	r0, [r7, #36]	@ 0x24
 8007606:	e008      	b.n	800761a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007608:	4b06      	ldr	r3, [pc, #24]	@ (8007624 <xTimerGenericCommand+0x98>)
 800760a:	6818      	ldr	r0, [r3, #0]
 800760c:	f107 0114 	add.w	r1, r7, #20
 8007610:	2300      	movs	r3, #0
 8007612:	683a      	ldr	r2, [r7, #0]
 8007614:	f7fe fc96 	bl	8005f44 <xQueueGenericSendFromISR>
 8007618:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800761a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800761c:	4618      	mov	r0, r3
 800761e:	3728      	adds	r7, #40	@ 0x28
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	20000e24 	.word	0x20000e24

08007628 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b088      	sub	sp, #32
 800762c:	af02      	add	r7, sp, #8
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007632:	4b23      	ldr	r3, [pc, #140]	@ (80076c0 <prvProcessExpiredTimer+0x98>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	3304      	adds	r3, #4
 8007640:	4618      	mov	r0, r3
 8007642:	f7fe fa4d 	bl	8005ae0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800764c:	f003 0304 	and.w	r3, r3, #4
 8007650:	2b00      	cmp	r3, #0
 8007652:	d023      	beq.n	800769c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	699a      	ldr	r2, [r3, #24]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	18d1      	adds	r1, r2, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	683a      	ldr	r2, [r7, #0]
 8007660:	6978      	ldr	r0, [r7, #20]
 8007662:	f000 f8d3 	bl	800780c <prvInsertTimerInActiveList>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d020      	beq.n	80076ae <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800766c:	2300      	movs	r3, #0
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	2300      	movs	r3, #0
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	2100      	movs	r1, #0
 8007676:	6978      	ldr	r0, [r7, #20]
 8007678:	f7ff ff88 	bl	800758c <xTimerGenericCommand>
 800767c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d114      	bne.n	80076ae <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007688:	f383 8811 	msr	BASEPRI, r3
 800768c:	f3bf 8f6f 	isb	sy
 8007690:	f3bf 8f4f 	dsb	sy
 8007694:	60fb      	str	r3, [r7, #12]
}
 8007696:	bf00      	nop
 8007698:	bf00      	nop
 800769a:	e7fd      	b.n	8007698 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80076a2:	f023 0301 	bic.w	r3, r3, #1
 80076a6:	b2da      	uxtb	r2, r3
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	6a1b      	ldr	r3, [r3, #32]
 80076b2:	6978      	ldr	r0, [r7, #20]
 80076b4:	4798      	blx	r3
}
 80076b6:	bf00      	nop
 80076b8:	3718      	adds	r7, #24
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	20000e1c 	.word	0x20000e1c

080076c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80076cc:	f107 0308 	add.w	r3, r7, #8
 80076d0:	4618      	mov	r0, r3
 80076d2:	f000 f859 	bl	8007788 <prvGetNextExpireTime>
 80076d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	4619      	mov	r1, r3
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	f000 f805 	bl	80076ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80076e2:	f000 f8d5 	bl	8007890 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80076e6:	bf00      	nop
 80076e8:	e7f0      	b.n	80076cc <prvTimerTask+0x8>
	...

080076ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80076f6:	f7ff f967 	bl	80069c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80076fa:	f107 0308 	add.w	r3, r7, #8
 80076fe:	4618      	mov	r0, r3
 8007700:	f000 f864 	bl	80077cc <prvSampleTimeNow>
 8007704:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d130      	bne.n	800776e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d10a      	bne.n	8007728 <prvProcessTimerOrBlockTask+0x3c>
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	429a      	cmp	r2, r3
 8007718:	d806      	bhi.n	8007728 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800771a:	f7ff f963 	bl	80069e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800771e:	68f9      	ldr	r1, [r7, #12]
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f7ff ff81 	bl	8007628 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007726:	e024      	b.n	8007772 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d008      	beq.n	8007740 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800772e:	4b13      	ldr	r3, [pc, #76]	@ (800777c <prvProcessTimerOrBlockTask+0x90>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d101      	bne.n	800773c <prvProcessTimerOrBlockTask+0x50>
 8007738:	2301      	movs	r3, #1
 800773a:	e000      	b.n	800773e <prvProcessTimerOrBlockTask+0x52>
 800773c:	2300      	movs	r3, #0
 800773e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007740:	4b0f      	ldr	r3, [pc, #60]	@ (8007780 <prvProcessTimerOrBlockTask+0x94>)
 8007742:	6818      	ldr	r0, [r3, #0]
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	1ad3      	subs	r3, r2, r3
 800774a:	683a      	ldr	r2, [r7, #0]
 800774c:	4619      	mov	r1, r3
 800774e:	f7fe feb1 	bl	80064b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007752:	f7ff f947 	bl	80069e4 <xTaskResumeAll>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d10a      	bne.n	8007772 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800775c:	4b09      	ldr	r3, [pc, #36]	@ (8007784 <prvProcessTimerOrBlockTask+0x98>)
 800775e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007762:	601a      	str	r2, [r3, #0]
 8007764:	f3bf 8f4f 	dsb	sy
 8007768:	f3bf 8f6f 	isb	sy
}
 800776c:	e001      	b.n	8007772 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800776e:	f7ff f939 	bl	80069e4 <xTaskResumeAll>
}
 8007772:	bf00      	nop
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	20000e20 	.word	0x20000e20
 8007780:	20000e24 	.word	0x20000e24
 8007784:	e000ed04 	.word	0xe000ed04

08007788 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007790:	4b0d      	ldr	r3, [pc, #52]	@ (80077c8 <prvGetNextExpireTime+0x40>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d101      	bne.n	800779e <prvGetNextExpireTime+0x16>
 800779a:	2201      	movs	r2, #1
 800779c:	e000      	b.n	80077a0 <prvGetNextExpireTime+0x18>
 800779e:	2200      	movs	r2, #0
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d105      	bne.n	80077b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80077ac:	4b06      	ldr	r3, [pc, #24]	@ (80077c8 <prvGetNextExpireTime+0x40>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	60fb      	str	r3, [r7, #12]
 80077b6:	e001      	b.n	80077bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80077b8:	2300      	movs	r3, #0
 80077ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80077bc:	68fb      	ldr	r3, [r7, #12]
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3714      	adds	r7, #20
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bc80      	pop	{r7}
 80077c6:	4770      	bx	lr
 80077c8:	20000e1c 	.word	0x20000e1c

080077cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80077d4:	f7ff f9a4 	bl	8006b20 <xTaskGetTickCount>
 80077d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80077da:	4b0b      	ldr	r3, [pc, #44]	@ (8007808 <prvSampleTimeNow+0x3c>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d205      	bcs.n	80077f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80077e4:	f000 f91e 	bl	8007a24 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	601a      	str	r2, [r3, #0]
 80077ee:	e002      	b.n	80077f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80077f6:	4a04      	ldr	r2, [pc, #16]	@ (8007808 <prvSampleTimeNow+0x3c>)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80077fc:	68fb      	ldr	r3, [r7, #12]
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	20000e2c 	.word	0x20000e2c

0800780c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b086      	sub	sp, #24
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	607a      	str	r2, [r7, #4]
 8007818:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800781a:	2300      	movs	r3, #0
 800781c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	68ba      	ldr	r2, [r7, #8]
 8007822:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	68fa      	ldr	r2, [r7, #12]
 8007828:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800782a:	68ba      	ldr	r2, [r7, #8]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	429a      	cmp	r2, r3
 8007830:	d812      	bhi.n	8007858 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	1ad2      	subs	r2, r2, r3
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	699b      	ldr	r3, [r3, #24]
 800783c:	429a      	cmp	r2, r3
 800783e:	d302      	bcc.n	8007846 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007840:	2301      	movs	r3, #1
 8007842:	617b      	str	r3, [r7, #20]
 8007844:	e01b      	b.n	800787e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007846:	4b10      	ldr	r3, [pc, #64]	@ (8007888 <prvInsertTimerInActiveList+0x7c>)
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	3304      	adds	r3, #4
 800784e:	4619      	mov	r1, r3
 8007850:	4610      	mov	r0, r2
 8007852:	f7fe f90d 	bl	8005a70 <vListInsert>
 8007856:	e012      	b.n	800787e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	429a      	cmp	r2, r3
 800785e:	d206      	bcs.n	800786e <prvInsertTimerInActiveList+0x62>
 8007860:	68ba      	ldr	r2, [r7, #8]
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	429a      	cmp	r2, r3
 8007866:	d302      	bcc.n	800786e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007868:	2301      	movs	r3, #1
 800786a:	617b      	str	r3, [r7, #20]
 800786c:	e007      	b.n	800787e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800786e:	4b07      	ldr	r3, [pc, #28]	@ (800788c <prvInsertTimerInActiveList+0x80>)
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	3304      	adds	r3, #4
 8007876:	4619      	mov	r1, r3
 8007878:	4610      	mov	r0, r2
 800787a:	f7fe f8f9 	bl	8005a70 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800787e:	697b      	ldr	r3, [r7, #20]
}
 8007880:	4618      	mov	r0, r3
 8007882:	3718      	adds	r7, #24
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
 8007888:	20000e20 	.word	0x20000e20
 800788c:	20000e1c 	.word	0x20000e1c

08007890 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b08c      	sub	sp, #48	@ 0x30
 8007894:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007896:	e0b2      	b.n	80079fe <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	2b00      	cmp	r3, #0
 800789c:	f2c0 80af 	blt.w	80079fe <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80078a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a6:	695b      	ldr	r3, [r3, #20]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d004      	beq.n	80078b6 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80078ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ae:	3304      	adds	r3, #4
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7fe f915 	bl	8005ae0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80078b6:	1d3b      	adds	r3, r7, #4
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7ff ff87 	bl	80077cc <prvSampleTimeNow>
 80078be:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	2b09      	cmp	r3, #9
 80078c4:	f200 8098 	bhi.w	80079f8 <prvProcessReceivedCommands+0x168>
 80078c8:	a201      	add	r2, pc, #4	@ (adr r2, 80078d0 <prvProcessReceivedCommands+0x40>)
 80078ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ce:	bf00      	nop
 80078d0:	080078f9 	.word	0x080078f9
 80078d4:	080078f9 	.word	0x080078f9
 80078d8:	080078f9 	.word	0x080078f9
 80078dc:	0800796f 	.word	0x0800796f
 80078e0:	08007983 	.word	0x08007983
 80078e4:	080079cf 	.word	0x080079cf
 80078e8:	080078f9 	.word	0x080078f9
 80078ec:	080078f9 	.word	0x080078f9
 80078f0:	0800796f 	.word	0x0800796f
 80078f4:	08007983 	.word	0x08007983
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80078f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078fa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80078fe:	f043 0301 	orr.w	r3, r3, #1
 8007902:	b2da      	uxtb	r2, r3
 8007904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007906:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800790a:	68fa      	ldr	r2, [r7, #12]
 800790c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800790e:	699b      	ldr	r3, [r3, #24]
 8007910:	18d1      	adds	r1, r2, r3
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6a3a      	ldr	r2, [r7, #32]
 8007916:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007918:	f7ff ff78 	bl	800780c <prvInsertTimerInActiveList>
 800791c:	4603      	mov	r3, r0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d06c      	beq.n	80079fc <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007924:	6a1b      	ldr	r3, [r3, #32]
 8007926:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007928:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800792a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800792c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007930:	f003 0304 	and.w	r3, r3, #4
 8007934:	2b00      	cmp	r3, #0
 8007936:	d061      	beq.n	80079fc <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007938:	68fa      	ldr	r2, [r7, #12]
 800793a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800793c:	699b      	ldr	r3, [r3, #24]
 800793e:	441a      	add	r2, r3
 8007940:	2300      	movs	r3, #0
 8007942:	9300      	str	r3, [sp, #0]
 8007944:	2300      	movs	r3, #0
 8007946:	2100      	movs	r1, #0
 8007948:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800794a:	f7ff fe1f 	bl	800758c <xTimerGenericCommand>
 800794e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8007950:	69fb      	ldr	r3, [r7, #28]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d152      	bne.n	80079fc <prvProcessReceivedCommands+0x16c>
	__asm volatile
 8007956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800795a:	f383 8811 	msr	BASEPRI, r3
 800795e:	f3bf 8f6f 	isb	sy
 8007962:	f3bf 8f4f 	dsb	sy
 8007966:	61bb      	str	r3, [r7, #24]
}
 8007968:	bf00      	nop
 800796a:	bf00      	nop
 800796c:	e7fd      	b.n	800796a <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800796e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007970:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007974:	f023 0301 	bic.w	r3, r3, #1
 8007978:	b2da      	uxtb	r2, r3
 800797a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800797c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8007980:	e03d      	b.n	80079fe <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007984:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007988:	f043 0301 	orr.w	r3, r3, #1
 800798c:	b2da      	uxtb	r2, r3
 800798e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007990:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007998:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800799a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800799c:	699b      	ldr	r3, [r3, #24]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d10b      	bne.n	80079ba <prvProcessReceivedCommands+0x12a>
	__asm volatile
 80079a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079a6:	f383 8811 	msr	BASEPRI, r3
 80079aa:	f3bf 8f6f 	isb	sy
 80079ae:	f3bf 8f4f 	dsb	sy
 80079b2:	617b      	str	r3, [r7, #20]
}
 80079b4:	bf00      	nop
 80079b6:	bf00      	nop
 80079b8:	e7fd      	b.n	80079b6 <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80079ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079bc:	699a      	ldr	r2, [r3, #24]
 80079be:	6a3b      	ldr	r3, [r7, #32]
 80079c0:	18d1      	adds	r1, r2, r3
 80079c2:	6a3b      	ldr	r3, [r7, #32]
 80079c4:	6a3a      	ldr	r2, [r7, #32]
 80079c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80079c8:	f7ff ff20 	bl	800780c <prvInsertTimerInActiveList>
					break;
 80079cc:	e017      	b.n	80079fe <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80079ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80079d4:	f003 0302 	and.w	r3, r3, #2
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d103      	bne.n	80079e4 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 80079dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80079de:	f000 fb85 	bl	80080ec <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80079e2:	e00c      	b.n	80079fe <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80079e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80079ea:	f023 0301 	bic.w	r3, r3, #1
 80079ee:	b2da      	uxtb	r2, r3
 80079f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 80079f6:	e002      	b.n	80079fe <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 80079f8:	bf00      	nop
 80079fa:	e000      	b.n	80079fe <prvProcessReceivedCommands+0x16e>
					break;
 80079fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80079fe:	4b08      	ldr	r3, [pc, #32]	@ (8007a20 <prvProcessReceivedCommands+0x190>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f107 0108 	add.w	r1, r7, #8
 8007a06:	2200      	movs	r2, #0
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f7fe fb39 	bl	8006080 <xQueueReceive>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	f47f af41 	bne.w	8007898 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007a16:	bf00      	nop
 8007a18:	bf00      	nop
 8007a1a:	3728      	adds	r7, #40	@ 0x28
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	20000e24 	.word	0x20000e24

08007a24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b088      	sub	sp, #32
 8007a28:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a2a:	e049      	b.n	8007ac0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a2c:	4b2e      	ldr	r3, [pc, #184]	@ (8007ae8 <prvSwitchTimerLists+0xc4>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a36:	4b2c      	ldr	r3, [pc, #176]	@ (8007ae8 <prvSwitchTimerLists+0xc4>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	68db      	ldr	r3, [r3, #12]
 8007a3e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	3304      	adds	r3, #4
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7fe f84b 	bl	8005ae0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6a1b      	ldr	r3, [r3, #32]
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007a58:	f003 0304 	and.w	r3, r3, #4
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d02f      	beq.n	8007ac0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	699b      	ldr	r3, [r3, #24]
 8007a64:	693a      	ldr	r2, [r7, #16]
 8007a66:	4413      	add	r3, r2
 8007a68:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007a6a:	68ba      	ldr	r2, [r7, #8]
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d90e      	bls.n	8007a90 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	68ba      	ldr	r2, [r7, #8]
 8007a76:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a7e:	4b1a      	ldr	r3, [pc, #104]	@ (8007ae8 <prvSwitchTimerLists+0xc4>)
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	3304      	adds	r3, #4
 8007a86:	4619      	mov	r1, r3
 8007a88:	4610      	mov	r0, r2
 8007a8a:	f7fd fff1 	bl	8005a70 <vListInsert>
 8007a8e:	e017      	b.n	8007ac0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a90:	2300      	movs	r3, #0
 8007a92:	9300      	str	r3, [sp, #0]
 8007a94:	2300      	movs	r3, #0
 8007a96:	693a      	ldr	r2, [r7, #16]
 8007a98:	2100      	movs	r1, #0
 8007a9a:	68f8      	ldr	r0, [r7, #12]
 8007a9c:	f7ff fd76 	bl	800758c <xTimerGenericCommand>
 8007aa0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d10b      	bne.n	8007ac0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aac:	f383 8811 	msr	BASEPRI, r3
 8007ab0:	f3bf 8f6f 	isb	sy
 8007ab4:	f3bf 8f4f 	dsb	sy
 8007ab8:	603b      	str	r3, [r7, #0]
}
 8007aba:	bf00      	nop
 8007abc:	bf00      	nop
 8007abe:	e7fd      	b.n	8007abc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007ac0:	4b09      	ldr	r3, [pc, #36]	@ (8007ae8 <prvSwitchTimerLists+0xc4>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d1b0      	bne.n	8007a2c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007aca:	4b07      	ldr	r3, [pc, #28]	@ (8007ae8 <prvSwitchTimerLists+0xc4>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007ad0:	4b06      	ldr	r3, [pc, #24]	@ (8007aec <prvSwitchTimerLists+0xc8>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a04      	ldr	r2, [pc, #16]	@ (8007ae8 <prvSwitchTimerLists+0xc4>)
 8007ad6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007ad8:	4a04      	ldr	r2, [pc, #16]	@ (8007aec <prvSwitchTimerLists+0xc8>)
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	6013      	str	r3, [r2, #0]
}
 8007ade:	bf00      	nop
 8007ae0:	3718      	adds	r7, #24
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	20000e1c 	.word	0x20000e1c
 8007aec:	20000e20 	.word	0x20000e20

08007af0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007af6:	f000 f929 	bl	8007d4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007afa:	4b15      	ldr	r3, [pc, #84]	@ (8007b50 <prvCheckForValidListAndQueue+0x60>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d120      	bne.n	8007b44 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007b02:	4814      	ldr	r0, [pc, #80]	@ (8007b54 <prvCheckForValidListAndQueue+0x64>)
 8007b04:	f7fd ff66 	bl	80059d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007b08:	4813      	ldr	r0, [pc, #76]	@ (8007b58 <prvCheckForValidListAndQueue+0x68>)
 8007b0a:	f7fd ff63 	bl	80059d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007b0e:	4b13      	ldr	r3, [pc, #76]	@ (8007b5c <prvCheckForValidListAndQueue+0x6c>)
 8007b10:	4a10      	ldr	r2, [pc, #64]	@ (8007b54 <prvCheckForValidListAndQueue+0x64>)
 8007b12:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007b14:	4b12      	ldr	r3, [pc, #72]	@ (8007b60 <prvCheckForValidListAndQueue+0x70>)
 8007b16:	4a10      	ldr	r2, [pc, #64]	@ (8007b58 <prvCheckForValidListAndQueue+0x68>)
 8007b18:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	9300      	str	r3, [sp, #0]
 8007b1e:	4b11      	ldr	r3, [pc, #68]	@ (8007b64 <prvCheckForValidListAndQueue+0x74>)
 8007b20:	4a11      	ldr	r2, [pc, #68]	@ (8007b68 <prvCheckForValidListAndQueue+0x78>)
 8007b22:	210c      	movs	r1, #12
 8007b24:	200a      	movs	r0, #10
 8007b26:	f7fe f86f 	bl	8005c08 <xQueueGenericCreateStatic>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	4a08      	ldr	r2, [pc, #32]	@ (8007b50 <prvCheckForValidListAndQueue+0x60>)
 8007b2e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007b30:	4b07      	ldr	r3, [pc, #28]	@ (8007b50 <prvCheckForValidListAndQueue+0x60>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d005      	beq.n	8007b44 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007b38:	4b05      	ldr	r3, [pc, #20]	@ (8007b50 <prvCheckForValidListAndQueue+0x60>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	490b      	ldr	r1, [pc, #44]	@ (8007b6c <prvCheckForValidListAndQueue+0x7c>)
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7fe fc90 	bl	8006464 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007b44:	f000 f932 	bl	8007dac <vPortExitCritical>
}
 8007b48:	bf00      	nop
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	20000e24 	.word	0x20000e24
 8007b54:	20000df4 	.word	0x20000df4
 8007b58:	20000e08 	.word	0x20000e08
 8007b5c:	20000e1c 	.word	0x20000e1c
 8007b60:	20000e20 	.word	0x20000e20
 8007b64:	20000ea8 	.word	0x20000ea8
 8007b68:	20000e30 	.word	0x20000e30
 8007b6c:	0800973c 	.word	0x0800973c

08007b70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	60b9      	str	r1, [r7, #8]
 8007b7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	3b04      	subs	r3, #4
 8007b80:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007b88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	3b04      	subs	r3, #4
 8007b8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	f023 0201 	bic.w	r2, r3, #1
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	3b04      	subs	r3, #4
 8007b9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ba0:	4a08      	ldr	r2, [pc, #32]	@ (8007bc4 <pxPortInitialiseStack+0x54>)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	3b14      	subs	r3, #20
 8007baa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	3b20      	subs	r3, #32
 8007bb6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3714      	adds	r7, #20
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bc80      	pop	{r7}
 8007bc2:	4770      	bx	lr
 8007bc4:	08007bc9 	.word	0x08007bc9

08007bc8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007bd2:	4b12      	ldr	r3, [pc, #72]	@ (8007c1c <prvTaskExitError+0x54>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bda:	d00b      	beq.n	8007bf4 <prvTaskExitError+0x2c>
	__asm volatile
 8007bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007be0:	f383 8811 	msr	BASEPRI, r3
 8007be4:	f3bf 8f6f 	isb	sy
 8007be8:	f3bf 8f4f 	dsb	sy
 8007bec:	60fb      	str	r3, [r7, #12]
}
 8007bee:	bf00      	nop
 8007bf0:	bf00      	nop
 8007bf2:	e7fd      	b.n	8007bf0 <prvTaskExitError+0x28>
	__asm volatile
 8007bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf8:	f383 8811 	msr	BASEPRI, r3
 8007bfc:	f3bf 8f6f 	isb	sy
 8007c00:	f3bf 8f4f 	dsb	sy
 8007c04:	60bb      	str	r3, [r7, #8]
}
 8007c06:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007c08:	bf00      	nop
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d0fc      	beq.n	8007c0a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007c10:	bf00      	nop
 8007c12:	bf00      	nop
 8007c14:	3714      	adds	r7, #20
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bc80      	pop	{r7}
 8007c1a:	4770      	bx	lr
 8007c1c:	2000014c 	.word	0x2000014c

08007c20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007c20:	4b07      	ldr	r3, [pc, #28]	@ (8007c40 <pxCurrentTCBConst2>)
 8007c22:	6819      	ldr	r1, [r3, #0]
 8007c24:	6808      	ldr	r0, [r1, #0]
 8007c26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007c2a:	f380 8809 	msr	PSP, r0
 8007c2e:	f3bf 8f6f 	isb	sy
 8007c32:	f04f 0000 	mov.w	r0, #0
 8007c36:	f380 8811 	msr	BASEPRI, r0
 8007c3a:	f04e 0e0d 	orr.w	lr, lr, #13
 8007c3e:	4770      	bx	lr

08007c40 <pxCurrentTCBConst2>:
 8007c40:	20000cc8 	.word	0x20000cc8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007c44:	bf00      	nop
 8007c46:	bf00      	nop

08007c48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007c48:	4806      	ldr	r0, [pc, #24]	@ (8007c64 <prvPortStartFirstTask+0x1c>)
 8007c4a:	6800      	ldr	r0, [r0, #0]
 8007c4c:	6800      	ldr	r0, [r0, #0]
 8007c4e:	f380 8808 	msr	MSP, r0
 8007c52:	b662      	cpsie	i
 8007c54:	b661      	cpsie	f
 8007c56:	f3bf 8f4f 	dsb	sy
 8007c5a:	f3bf 8f6f 	isb	sy
 8007c5e:	df00      	svc	0
 8007c60:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c62:	bf00      	nop
 8007c64:	e000ed08 	.word	0xe000ed08

08007c68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c6e:	4b32      	ldr	r3, [pc, #200]	@ (8007d38 <xPortStartScheduler+0xd0>)
 8007c70:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	22ff      	movs	r2, #255	@ 0xff
 8007c7e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007c88:	78fb      	ldrb	r3, [r7, #3]
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007c90:	b2da      	uxtb	r2, r3
 8007c92:	4b2a      	ldr	r3, [pc, #168]	@ (8007d3c <xPortStartScheduler+0xd4>)
 8007c94:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007c96:	4b2a      	ldr	r3, [pc, #168]	@ (8007d40 <xPortStartScheduler+0xd8>)
 8007c98:	2207      	movs	r2, #7
 8007c9a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c9c:	e009      	b.n	8007cb2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007c9e:	4b28      	ldr	r3, [pc, #160]	@ (8007d40 <xPortStartScheduler+0xd8>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	3b01      	subs	r3, #1
 8007ca4:	4a26      	ldr	r2, [pc, #152]	@ (8007d40 <xPortStartScheduler+0xd8>)
 8007ca6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ca8:	78fb      	ldrb	r3, [r7, #3]
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	005b      	lsls	r3, r3, #1
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cb2:	78fb      	ldrb	r3, [r7, #3]
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cba:	2b80      	cmp	r3, #128	@ 0x80
 8007cbc:	d0ef      	beq.n	8007c9e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007cbe:	4b20      	ldr	r3, [pc, #128]	@ (8007d40 <xPortStartScheduler+0xd8>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f1c3 0307 	rsb	r3, r3, #7
 8007cc6:	2b04      	cmp	r3, #4
 8007cc8:	d00b      	beq.n	8007ce2 <xPortStartScheduler+0x7a>
	__asm volatile
 8007cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cce:	f383 8811 	msr	BASEPRI, r3
 8007cd2:	f3bf 8f6f 	isb	sy
 8007cd6:	f3bf 8f4f 	dsb	sy
 8007cda:	60bb      	str	r3, [r7, #8]
}
 8007cdc:	bf00      	nop
 8007cde:	bf00      	nop
 8007ce0:	e7fd      	b.n	8007cde <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ce2:	4b17      	ldr	r3, [pc, #92]	@ (8007d40 <xPortStartScheduler+0xd8>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	021b      	lsls	r3, r3, #8
 8007ce8:	4a15      	ldr	r2, [pc, #84]	@ (8007d40 <xPortStartScheduler+0xd8>)
 8007cea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007cec:	4b14      	ldr	r3, [pc, #80]	@ (8007d40 <xPortStartScheduler+0xd8>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007cf4:	4a12      	ldr	r2, [pc, #72]	@ (8007d40 <xPortStartScheduler+0xd8>)
 8007cf6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	b2da      	uxtb	r2, r3
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007d00:	4b10      	ldr	r3, [pc, #64]	@ (8007d44 <xPortStartScheduler+0xdc>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a0f      	ldr	r2, [pc, #60]	@ (8007d44 <xPortStartScheduler+0xdc>)
 8007d06:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007d0a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d0c:	4b0d      	ldr	r3, [pc, #52]	@ (8007d44 <xPortStartScheduler+0xdc>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a0c      	ldr	r2, [pc, #48]	@ (8007d44 <xPortStartScheduler+0xdc>)
 8007d12:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007d16:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007d18:	f000 f8b8 	bl	8007e8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8007d48 <xPortStartScheduler+0xe0>)
 8007d1e:	2200      	movs	r2, #0
 8007d20:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007d22:	f7ff ff91 	bl	8007c48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007d26:	f7fe ffc3 	bl	8006cb0 <vTaskSwitchContext>
	prvTaskExitError();
 8007d2a:	f7ff ff4d 	bl	8007bc8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3710      	adds	r7, #16
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}
 8007d38:	e000e400 	.word	0xe000e400
 8007d3c:	20000ef0 	.word	0x20000ef0
 8007d40:	20000ef4 	.word	0x20000ef4
 8007d44:	e000ed20 	.word	0xe000ed20
 8007d48:	2000014c 	.word	0x2000014c

08007d4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b083      	sub	sp, #12
 8007d50:	af00      	add	r7, sp, #0
	__asm volatile
 8007d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d56:	f383 8811 	msr	BASEPRI, r3
 8007d5a:	f3bf 8f6f 	isb	sy
 8007d5e:	f3bf 8f4f 	dsb	sy
 8007d62:	607b      	str	r3, [r7, #4]
}
 8007d64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007d66:	4b0f      	ldr	r3, [pc, #60]	@ (8007da4 <vPortEnterCritical+0x58>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	4a0d      	ldr	r2, [pc, #52]	@ (8007da4 <vPortEnterCritical+0x58>)
 8007d6e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007d70:	4b0c      	ldr	r3, [pc, #48]	@ (8007da4 <vPortEnterCritical+0x58>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d110      	bne.n	8007d9a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d78:	4b0b      	ldr	r3, [pc, #44]	@ (8007da8 <vPortEnterCritical+0x5c>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00b      	beq.n	8007d9a <vPortEnterCritical+0x4e>
	__asm volatile
 8007d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d86:	f383 8811 	msr	BASEPRI, r3
 8007d8a:	f3bf 8f6f 	isb	sy
 8007d8e:	f3bf 8f4f 	dsb	sy
 8007d92:	603b      	str	r3, [r7, #0]
}
 8007d94:	bf00      	nop
 8007d96:	bf00      	nop
 8007d98:	e7fd      	b.n	8007d96 <vPortEnterCritical+0x4a>
	}
}
 8007d9a:	bf00      	nop
 8007d9c:	370c      	adds	r7, #12
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bc80      	pop	{r7}
 8007da2:	4770      	bx	lr
 8007da4:	2000014c 	.word	0x2000014c
 8007da8:	e000ed04 	.word	0xe000ed04

08007dac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007db2:	4b12      	ldr	r3, [pc, #72]	@ (8007dfc <vPortExitCritical+0x50>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d10b      	bne.n	8007dd2 <vPortExitCritical+0x26>
	__asm volatile
 8007dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dbe:	f383 8811 	msr	BASEPRI, r3
 8007dc2:	f3bf 8f6f 	isb	sy
 8007dc6:	f3bf 8f4f 	dsb	sy
 8007dca:	607b      	str	r3, [r7, #4]
}
 8007dcc:	bf00      	nop
 8007dce:	bf00      	nop
 8007dd0:	e7fd      	b.n	8007dce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8007dfc <vPortExitCritical+0x50>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	3b01      	subs	r3, #1
 8007dd8:	4a08      	ldr	r2, [pc, #32]	@ (8007dfc <vPortExitCritical+0x50>)
 8007dda:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007ddc:	4b07      	ldr	r3, [pc, #28]	@ (8007dfc <vPortExitCritical+0x50>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d105      	bne.n	8007df0 <vPortExitCritical+0x44>
 8007de4:	2300      	movs	r3, #0
 8007de6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	f383 8811 	msr	BASEPRI, r3
}
 8007dee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007df0:	bf00      	nop
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bc80      	pop	{r7}
 8007df8:	4770      	bx	lr
 8007dfa:	bf00      	nop
 8007dfc:	2000014c 	.word	0x2000014c

08007e00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007e00:	f3ef 8009 	mrs	r0, PSP
 8007e04:	f3bf 8f6f 	isb	sy
 8007e08:	4b0d      	ldr	r3, [pc, #52]	@ (8007e40 <pxCurrentTCBConst>)
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007e10:	6010      	str	r0, [r2, #0]
 8007e12:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007e16:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007e1a:	f380 8811 	msr	BASEPRI, r0
 8007e1e:	f7fe ff47 	bl	8006cb0 <vTaskSwitchContext>
 8007e22:	f04f 0000 	mov.w	r0, #0
 8007e26:	f380 8811 	msr	BASEPRI, r0
 8007e2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007e2e:	6819      	ldr	r1, [r3, #0]
 8007e30:	6808      	ldr	r0, [r1, #0]
 8007e32:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007e36:	f380 8809 	msr	PSP, r0
 8007e3a:	f3bf 8f6f 	isb	sy
 8007e3e:	4770      	bx	lr

08007e40 <pxCurrentTCBConst>:
 8007e40:	20000cc8 	.word	0x20000cc8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007e44:	bf00      	nop
 8007e46:	bf00      	nop

08007e48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
	__asm volatile
 8007e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e52:	f383 8811 	msr	BASEPRI, r3
 8007e56:	f3bf 8f6f 	isb	sy
 8007e5a:	f3bf 8f4f 	dsb	sy
 8007e5e:	607b      	str	r3, [r7, #4]
}
 8007e60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007e62:	f7fe fe6b 	bl	8006b3c <xTaskIncrementTick>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d003      	beq.n	8007e74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e6c:	4b06      	ldr	r3, [pc, #24]	@ (8007e88 <SysTick_Handler+0x40>)
 8007e6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e72:	601a      	str	r2, [r3, #0]
 8007e74:	2300      	movs	r3, #0
 8007e76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	f383 8811 	msr	BASEPRI, r3
}
 8007e7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007e80:	bf00      	nop
 8007e82:	3708      	adds	r7, #8
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	e000ed04 	.word	0xe000ed04

08007e8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e90:	4b0a      	ldr	r3, [pc, #40]	@ (8007ebc <vPortSetupTimerInterrupt+0x30>)
 8007e92:	2200      	movs	r2, #0
 8007e94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e96:	4b0a      	ldr	r3, [pc, #40]	@ (8007ec0 <vPortSetupTimerInterrupt+0x34>)
 8007e98:	2200      	movs	r2, #0
 8007e9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e9c:	4b09      	ldr	r3, [pc, #36]	@ (8007ec4 <vPortSetupTimerInterrupt+0x38>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a09      	ldr	r2, [pc, #36]	@ (8007ec8 <vPortSetupTimerInterrupt+0x3c>)
 8007ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ea6:	099b      	lsrs	r3, r3, #6
 8007ea8:	4a08      	ldr	r2, [pc, #32]	@ (8007ecc <vPortSetupTimerInterrupt+0x40>)
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007eae:	4b03      	ldr	r3, [pc, #12]	@ (8007ebc <vPortSetupTimerInterrupt+0x30>)
 8007eb0:	2207      	movs	r2, #7
 8007eb2:	601a      	str	r2, [r3, #0]
}
 8007eb4:	bf00      	nop
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bc80      	pop	{r7}
 8007eba:	4770      	bx	lr
 8007ebc:	e000e010 	.word	0xe000e010
 8007ec0:	e000e018 	.word	0xe000e018
 8007ec4:	200000a0 	.word	0x200000a0
 8007ec8:	10624dd3 	.word	0x10624dd3
 8007ecc:	e000e014 	.word	0xe000e014

08007ed0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007ed6:	f3ef 8305 	mrs	r3, IPSR
 8007eda:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2b0f      	cmp	r3, #15
 8007ee0:	d915      	bls.n	8007f0e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007ee2:	4a17      	ldr	r2, [pc, #92]	@ (8007f40 <vPortValidateInterruptPriority+0x70>)
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	4413      	add	r3, r2
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007eec:	4b15      	ldr	r3, [pc, #84]	@ (8007f44 <vPortValidateInterruptPriority+0x74>)
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	7afa      	ldrb	r2, [r7, #11]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d20b      	bcs.n	8007f0e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007efa:	f383 8811 	msr	BASEPRI, r3
 8007efe:	f3bf 8f6f 	isb	sy
 8007f02:	f3bf 8f4f 	dsb	sy
 8007f06:	607b      	str	r3, [r7, #4]
}
 8007f08:	bf00      	nop
 8007f0a:	bf00      	nop
 8007f0c:	e7fd      	b.n	8007f0a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8007f48 <vPortValidateInterruptPriority+0x78>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007f16:	4b0d      	ldr	r3, [pc, #52]	@ (8007f4c <vPortValidateInterruptPriority+0x7c>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d90b      	bls.n	8007f36 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f22:	f383 8811 	msr	BASEPRI, r3
 8007f26:	f3bf 8f6f 	isb	sy
 8007f2a:	f3bf 8f4f 	dsb	sy
 8007f2e:	603b      	str	r3, [r7, #0]
}
 8007f30:	bf00      	nop
 8007f32:	bf00      	nop
 8007f34:	e7fd      	b.n	8007f32 <vPortValidateInterruptPriority+0x62>
	}
 8007f36:	bf00      	nop
 8007f38:	3714      	adds	r7, #20
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bc80      	pop	{r7}
 8007f3e:	4770      	bx	lr
 8007f40:	e000e3f0 	.word	0xe000e3f0
 8007f44:	20000ef0 	.word	0x20000ef0
 8007f48:	e000ed0c 	.word	0xe000ed0c
 8007f4c:	20000ef4 	.word	0x20000ef4

08007f50 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b08a      	sub	sp, #40	@ 0x28
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007f5c:	f7fe fd34 	bl	80069c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007f60:	4b5c      	ldr	r3, [pc, #368]	@ (80080d4 <pvPortMalloc+0x184>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d101      	bne.n	8007f6c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007f68:	f000 f924 	bl	80081b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007f6c:	4b5a      	ldr	r3, [pc, #360]	@ (80080d8 <pvPortMalloc+0x188>)
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	4013      	ands	r3, r2
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f040 8095 	bne.w	80080a4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d01e      	beq.n	8007fbe <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007f80:	2208      	movs	r2, #8
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4413      	add	r3, r2
 8007f86:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f003 0307 	and.w	r3, r3, #7
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d015      	beq.n	8007fbe <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f023 0307 	bic.w	r3, r3, #7
 8007f98:	3308      	adds	r3, #8
 8007f9a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f003 0307 	and.w	r3, r3, #7
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d00b      	beq.n	8007fbe <pvPortMalloc+0x6e>
	__asm volatile
 8007fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007faa:	f383 8811 	msr	BASEPRI, r3
 8007fae:	f3bf 8f6f 	isb	sy
 8007fb2:	f3bf 8f4f 	dsb	sy
 8007fb6:	617b      	str	r3, [r7, #20]
}
 8007fb8:	bf00      	nop
 8007fba:	bf00      	nop
 8007fbc:	e7fd      	b.n	8007fba <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d06f      	beq.n	80080a4 <pvPortMalloc+0x154>
 8007fc4:	4b45      	ldr	r3, [pc, #276]	@ (80080dc <pvPortMalloc+0x18c>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d86a      	bhi.n	80080a4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007fce:	4b44      	ldr	r3, [pc, #272]	@ (80080e0 <pvPortMalloc+0x190>)
 8007fd0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007fd2:	4b43      	ldr	r3, [pc, #268]	@ (80080e0 <pvPortMalloc+0x190>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007fd8:	e004      	b.n	8007fe4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fdc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d903      	bls.n	8007ff6 <pvPortMalloc+0xa6>
 8007fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d1f1      	bne.n	8007fda <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007ff6:	4b37      	ldr	r3, [pc, #220]	@ (80080d4 <pvPortMalloc+0x184>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d051      	beq.n	80080a4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008000:	6a3b      	ldr	r3, [r7, #32]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2208      	movs	r2, #8
 8008006:	4413      	add	r3, r2
 8008008:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800800a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	6a3b      	ldr	r3, [r7, #32]
 8008010:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008014:	685a      	ldr	r2, [r3, #4]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	1ad2      	subs	r2, r2, r3
 800801a:	2308      	movs	r3, #8
 800801c:	005b      	lsls	r3, r3, #1
 800801e:	429a      	cmp	r2, r3
 8008020:	d920      	bls.n	8008064 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008022:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	4413      	add	r3, r2
 8008028:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	f003 0307 	and.w	r3, r3, #7
 8008030:	2b00      	cmp	r3, #0
 8008032:	d00b      	beq.n	800804c <pvPortMalloc+0xfc>
	__asm volatile
 8008034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008038:	f383 8811 	msr	BASEPRI, r3
 800803c:	f3bf 8f6f 	isb	sy
 8008040:	f3bf 8f4f 	dsb	sy
 8008044:	613b      	str	r3, [r7, #16]
}
 8008046:	bf00      	nop
 8008048:	bf00      	nop
 800804a:	e7fd      	b.n	8008048 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800804c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800804e:	685a      	ldr	r2, [r3, #4]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	1ad2      	subs	r2, r2, r3
 8008054:	69bb      	ldr	r3, [r7, #24]
 8008056:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800805e:	69b8      	ldr	r0, [r7, #24]
 8008060:	f000 f90a 	bl	8008278 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008064:	4b1d      	ldr	r3, [pc, #116]	@ (80080dc <pvPortMalloc+0x18c>)
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	4a1b      	ldr	r2, [pc, #108]	@ (80080dc <pvPortMalloc+0x18c>)
 8008070:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008072:	4b1a      	ldr	r3, [pc, #104]	@ (80080dc <pvPortMalloc+0x18c>)
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	4b1b      	ldr	r3, [pc, #108]	@ (80080e4 <pvPortMalloc+0x194>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	429a      	cmp	r2, r3
 800807c:	d203      	bcs.n	8008086 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800807e:	4b17      	ldr	r3, [pc, #92]	@ (80080dc <pvPortMalloc+0x18c>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a18      	ldr	r2, [pc, #96]	@ (80080e4 <pvPortMalloc+0x194>)
 8008084:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008088:	685a      	ldr	r2, [r3, #4]
 800808a:	4b13      	ldr	r3, [pc, #76]	@ (80080d8 <pvPortMalloc+0x188>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	431a      	orrs	r2, r3
 8008090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008092:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008096:	2200      	movs	r2, #0
 8008098:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800809a:	4b13      	ldr	r3, [pc, #76]	@ (80080e8 <pvPortMalloc+0x198>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	3301      	adds	r3, #1
 80080a0:	4a11      	ldr	r2, [pc, #68]	@ (80080e8 <pvPortMalloc+0x198>)
 80080a2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80080a4:	f7fe fc9e 	bl	80069e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80080a8:	69fb      	ldr	r3, [r7, #28]
 80080aa:	f003 0307 	and.w	r3, r3, #7
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00b      	beq.n	80080ca <pvPortMalloc+0x17a>
	__asm volatile
 80080b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080b6:	f383 8811 	msr	BASEPRI, r3
 80080ba:	f3bf 8f6f 	isb	sy
 80080be:	f3bf 8f4f 	dsb	sy
 80080c2:	60fb      	str	r3, [r7, #12]
}
 80080c4:	bf00      	nop
 80080c6:	bf00      	nop
 80080c8:	e7fd      	b.n	80080c6 <pvPortMalloc+0x176>
	return pvReturn;
 80080ca:	69fb      	ldr	r3, [r7, #28]
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3728      	adds	r7, #40	@ 0x28
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	20001f00 	.word	0x20001f00
 80080d8:	20001f14 	.word	0x20001f14
 80080dc:	20001f04 	.word	0x20001f04
 80080e0:	20001ef8 	.word	0x20001ef8
 80080e4:	20001f08 	.word	0x20001f08
 80080e8:	20001f0c 	.word	0x20001f0c

080080ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b086      	sub	sp, #24
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d04f      	beq.n	800819e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80080fe:	2308      	movs	r3, #8
 8008100:	425b      	negs	r3, r3
 8008102:	697a      	ldr	r2, [r7, #20]
 8008104:	4413      	add	r3, r2
 8008106:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	685a      	ldr	r2, [r3, #4]
 8008110:	4b25      	ldr	r3, [pc, #148]	@ (80081a8 <vPortFree+0xbc>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4013      	ands	r3, r2
 8008116:	2b00      	cmp	r3, #0
 8008118:	d10b      	bne.n	8008132 <vPortFree+0x46>
	__asm volatile
 800811a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800811e:	f383 8811 	msr	BASEPRI, r3
 8008122:	f3bf 8f6f 	isb	sy
 8008126:	f3bf 8f4f 	dsb	sy
 800812a:	60fb      	str	r3, [r7, #12]
}
 800812c:	bf00      	nop
 800812e:	bf00      	nop
 8008130:	e7fd      	b.n	800812e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00b      	beq.n	8008152 <vPortFree+0x66>
	__asm volatile
 800813a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800813e:	f383 8811 	msr	BASEPRI, r3
 8008142:	f3bf 8f6f 	isb	sy
 8008146:	f3bf 8f4f 	dsb	sy
 800814a:	60bb      	str	r3, [r7, #8]
}
 800814c:	bf00      	nop
 800814e:	bf00      	nop
 8008150:	e7fd      	b.n	800814e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	685a      	ldr	r2, [r3, #4]
 8008156:	4b14      	ldr	r3, [pc, #80]	@ (80081a8 <vPortFree+0xbc>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4013      	ands	r3, r2
 800815c:	2b00      	cmp	r3, #0
 800815e:	d01e      	beq.n	800819e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d11a      	bne.n	800819e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	685a      	ldr	r2, [r3, #4]
 800816c:	4b0e      	ldr	r3, [pc, #56]	@ (80081a8 <vPortFree+0xbc>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	43db      	mvns	r3, r3
 8008172:	401a      	ands	r2, r3
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008178:	f7fe fc26 	bl	80069c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	685a      	ldr	r2, [r3, #4]
 8008180:	4b0a      	ldr	r3, [pc, #40]	@ (80081ac <vPortFree+0xc0>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4413      	add	r3, r2
 8008186:	4a09      	ldr	r2, [pc, #36]	@ (80081ac <vPortFree+0xc0>)
 8008188:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800818a:	6938      	ldr	r0, [r7, #16]
 800818c:	f000 f874 	bl	8008278 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008190:	4b07      	ldr	r3, [pc, #28]	@ (80081b0 <vPortFree+0xc4>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	3301      	adds	r3, #1
 8008196:	4a06      	ldr	r2, [pc, #24]	@ (80081b0 <vPortFree+0xc4>)
 8008198:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800819a:	f7fe fc23 	bl	80069e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800819e:	bf00      	nop
 80081a0:	3718      	adds	r7, #24
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	20001f14 	.word	0x20001f14
 80081ac:	20001f04 	.word	0x20001f04
 80081b0:	20001f10 	.word	0x20001f10

080081b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80081b4:	b480      	push	{r7}
 80081b6:	b085      	sub	sp, #20
 80081b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80081ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80081be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80081c0:	4b27      	ldr	r3, [pc, #156]	@ (8008260 <prvHeapInit+0xac>)
 80081c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f003 0307 	and.w	r3, r3, #7
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00c      	beq.n	80081e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	3307      	adds	r3, #7
 80081d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f023 0307 	bic.w	r3, r3, #7
 80081da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80081dc:	68ba      	ldr	r2, [r7, #8]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	1ad3      	subs	r3, r2, r3
 80081e2:	4a1f      	ldr	r2, [pc, #124]	@ (8008260 <prvHeapInit+0xac>)
 80081e4:	4413      	add	r3, r2
 80081e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80081ec:	4a1d      	ldr	r2, [pc, #116]	@ (8008264 <prvHeapInit+0xb0>)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80081f2:	4b1c      	ldr	r3, [pc, #112]	@ (8008264 <prvHeapInit+0xb0>)
 80081f4:	2200      	movs	r2, #0
 80081f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	68ba      	ldr	r2, [r7, #8]
 80081fc:	4413      	add	r3, r2
 80081fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008200:	2208      	movs	r2, #8
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	1a9b      	subs	r3, r3, r2
 8008206:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f023 0307 	bic.w	r3, r3, #7
 800820e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	4a15      	ldr	r2, [pc, #84]	@ (8008268 <prvHeapInit+0xb4>)
 8008214:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008216:	4b14      	ldr	r3, [pc, #80]	@ (8008268 <prvHeapInit+0xb4>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	2200      	movs	r2, #0
 800821c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800821e:	4b12      	ldr	r3, [pc, #72]	@ (8008268 <prvHeapInit+0xb4>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	2200      	movs	r2, #0
 8008224:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	68fa      	ldr	r2, [r7, #12]
 800822e:	1ad2      	subs	r2, r2, r3
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008234:	4b0c      	ldr	r3, [pc, #48]	@ (8008268 <prvHeapInit+0xb4>)
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	4a0a      	ldr	r2, [pc, #40]	@ (800826c <prvHeapInit+0xb8>)
 8008242:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	4a09      	ldr	r2, [pc, #36]	@ (8008270 <prvHeapInit+0xbc>)
 800824a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800824c:	4b09      	ldr	r3, [pc, #36]	@ (8008274 <prvHeapInit+0xc0>)
 800824e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008252:	601a      	str	r2, [r3, #0]
}
 8008254:	bf00      	nop
 8008256:	3714      	adds	r7, #20
 8008258:	46bd      	mov	sp, r7
 800825a:	bc80      	pop	{r7}
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	20000ef8 	.word	0x20000ef8
 8008264:	20001ef8 	.word	0x20001ef8
 8008268:	20001f00 	.word	0x20001f00
 800826c:	20001f08 	.word	0x20001f08
 8008270:	20001f04 	.word	0x20001f04
 8008274:	20001f14 	.word	0x20001f14

08008278 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008278:	b480      	push	{r7}
 800827a:	b085      	sub	sp, #20
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008280:	4b27      	ldr	r3, [pc, #156]	@ (8008320 <prvInsertBlockIntoFreeList+0xa8>)
 8008282:	60fb      	str	r3, [r7, #12]
 8008284:	e002      	b.n	800828c <prvInsertBlockIntoFreeList+0x14>
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	60fb      	str	r3, [r7, #12]
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	429a      	cmp	r2, r3
 8008294:	d8f7      	bhi.n	8008286 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	68ba      	ldr	r2, [r7, #8]
 80082a0:	4413      	add	r3, r2
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d108      	bne.n	80082ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	685a      	ldr	r2, [r3, #4]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	441a      	add	r2, r3
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	68ba      	ldr	r2, [r7, #8]
 80082c4:	441a      	add	r2, r3
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d118      	bne.n	8008300 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681a      	ldr	r2, [r3, #0]
 80082d2:	4b14      	ldr	r3, [pc, #80]	@ (8008324 <prvInsertBlockIntoFreeList+0xac>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d00d      	beq.n	80082f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	685a      	ldr	r2, [r3, #4]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	441a      	add	r2, r3
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	601a      	str	r2, [r3, #0]
 80082f4:	e008      	b.n	8008308 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80082f6:	4b0b      	ldr	r3, [pc, #44]	@ (8008324 <prvInsertBlockIntoFreeList+0xac>)
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	601a      	str	r2, [r3, #0]
 80082fe:	e003      	b.n	8008308 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008308:	68fa      	ldr	r2, [r7, #12]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	429a      	cmp	r2, r3
 800830e:	d002      	beq.n	8008316 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008316:	bf00      	nop
 8008318:	3714      	adds	r7, #20
 800831a:	46bd      	mov	sp, r7
 800831c:	bc80      	pop	{r7}
 800831e:	4770      	bx	lr
 8008320:	20001ef8 	.word	0x20001ef8
 8008324:	20001f00 	.word	0x20001f00

08008328 <siprintf>:
 8008328:	b40e      	push	{r1, r2, r3}
 800832a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800832e:	b510      	push	{r4, lr}
 8008330:	2400      	movs	r4, #0
 8008332:	b09d      	sub	sp, #116	@ 0x74
 8008334:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008336:	9002      	str	r0, [sp, #8]
 8008338:	9006      	str	r0, [sp, #24]
 800833a:	9107      	str	r1, [sp, #28]
 800833c:	9104      	str	r1, [sp, #16]
 800833e:	4809      	ldr	r0, [pc, #36]	@ (8008364 <siprintf+0x3c>)
 8008340:	4909      	ldr	r1, [pc, #36]	@ (8008368 <siprintf+0x40>)
 8008342:	f853 2b04 	ldr.w	r2, [r3], #4
 8008346:	9105      	str	r1, [sp, #20]
 8008348:	6800      	ldr	r0, [r0, #0]
 800834a:	a902      	add	r1, sp, #8
 800834c:	9301      	str	r3, [sp, #4]
 800834e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008350:	f000 fa3a 	bl	80087c8 <_svfiprintf_r>
 8008354:	9b02      	ldr	r3, [sp, #8]
 8008356:	701c      	strb	r4, [r3, #0]
 8008358:	b01d      	add	sp, #116	@ 0x74
 800835a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800835e:	b003      	add	sp, #12
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	20000150 	.word	0x20000150
 8008368:	ffff0208 	.word	0xffff0208

0800836c <_vsniprintf_r>:
 800836c:	b530      	push	{r4, r5, lr}
 800836e:	4614      	mov	r4, r2
 8008370:	2c00      	cmp	r4, #0
 8008372:	4605      	mov	r5, r0
 8008374:	461a      	mov	r2, r3
 8008376:	b09b      	sub	sp, #108	@ 0x6c
 8008378:	da05      	bge.n	8008386 <_vsniprintf_r+0x1a>
 800837a:	238b      	movs	r3, #139	@ 0x8b
 800837c:	6003      	str	r3, [r0, #0]
 800837e:	f04f 30ff 	mov.w	r0, #4294967295
 8008382:	b01b      	add	sp, #108	@ 0x6c
 8008384:	bd30      	pop	{r4, r5, pc}
 8008386:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800838a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800838e:	f04f 0300 	mov.w	r3, #0
 8008392:	9319      	str	r3, [sp, #100]	@ 0x64
 8008394:	bf0c      	ite	eq
 8008396:	4623      	moveq	r3, r4
 8008398:	f104 33ff 	addne.w	r3, r4, #4294967295
 800839c:	9302      	str	r3, [sp, #8]
 800839e:	9305      	str	r3, [sp, #20]
 80083a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80083a4:	9100      	str	r1, [sp, #0]
 80083a6:	9104      	str	r1, [sp, #16]
 80083a8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80083ac:	4669      	mov	r1, sp
 80083ae:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80083b0:	f000 fa0a 	bl	80087c8 <_svfiprintf_r>
 80083b4:	1c43      	adds	r3, r0, #1
 80083b6:	bfbc      	itt	lt
 80083b8:	238b      	movlt	r3, #139	@ 0x8b
 80083ba:	602b      	strlt	r3, [r5, #0]
 80083bc:	2c00      	cmp	r4, #0
 80083be:	d0e0      	beq.n	8008382 <_vsniprintf_r+0x16>
 80083c0:	2200      	movs	r2, #0
 80083c2:	9b00      	ldr	r3, [sp, #0]
 80083c4:	701a      	strb	r2, [r3, #0]
 80083c6:	e7dc      	b.n	8008382 <_vsniprintf_r+0x16>

080083c8 <vsniprintf>:
 80083c8:	b507      	push	{r0, r1, r2, lr}
 80083ca:	9300      	str	r3, [sp, #0]
 80083cc:	4613      	mov	r3, r2
 80083ce:	460a      	mov	r2, r1
 80083d0:	4601      	mov	r1, r0
 80083d2:	4803      	ldr	r0, [pc, #12]	@ (80083e0 <vsniprintf+0x18>)
 80083d4:	6800      	ldr	r0, [r0, #0]
 80083d6:	f7ff ffc9 	bl	800836c <_vsniprintf_r>
 80083da:	b003      	add	sp, #12
 80083dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80083e0:	20000150 	.word	0x20000150

080083e4 <memset>:
 80083e4:	4603      	mov	r3, r0
 80083e6:	4402      	add	r2, r0
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d100      	bne.n	80083ee <memset+0xa>
 80083ec:	4770      	bx	lr
 80083ee:	f803 1b01 	strb.w	r1, [r3], #1
 80083f2:	e7f9      	b.n	80083e8 <memset+0x4>

080083f4 <_reclaim_reent>:
 80083f4:	4b2d      	ldr	r3, [pc, #180]	@ (80084ac <_reclaim_reent+0xb8>)
 80083f6:	b570      	push	{r4, r5, r6, lr}
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4604      	mov	r4, r0
 80083fc:	4283      	cmp	r3, r0
 80083fe:	d053      	beq.n	80084a8 <_reclaim_reent+0xb4>
 8008400:	69c3      	ldr	r3, [r0, #28]
 8008402:	b31b      	cbz	r3, 800844c <_reclaim_reent+0x58>
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	b163      	cbz	r3, 8008422 <_reclaim_reent+0x2e>
 8008408:	2500      	movs	r5, #0
 800840a:	69e3      	ldr	r3, [r4, #28]
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	5959      	ldr	r1, [r3, r5]
 8008410:	b9b1      	cbnz	r1, 8008440 <_reclaim_reent+0x4c>
 8008412:	3504      	adds	r5, #4
 8008414:	2d80      	cmp	r5, #128	@ 0x80
 8008416:	d1f8      	bne.n	800840a <_reclaim_reent+0x16>
 8008418:	69e3      	ldr	r3, [r4, #28]
 800841a:	4620      	mov	r0, r4
 800841c:	68d9      	ldr	r1, [r3, #12]
 800841e:	f000 f881 	bl	8008524 <_free_r>
 8008422:	69e3      	ldr	r3, [r4, #28]
 8008424:	6819      	ldr	r1, [r3, #0]
 8008426:	b111      	cbz	r1, 800842e <_reclaim_reent+0x3a>
 8008428:	4620      	mov	r0, r4
 800842a:	f000 f87b 	bl	8008524 <_free_r>
 800842e:	69e3      	ldr	r3, [r4, #28]
 8008430:	689d      	ldr	r5, [r3, #8]
 8008432:	b15d      	cbz	r5, 800844c <_reclaim_reent+0x58>
 8008434:	4629      	mov	r1, r5
 8008436:	4620      	mov	r0, r4
 8008438:	682d      	ldr	r5, [r5, #0]
 800843a:	f000 f873 	bl	8008524 <_free_r>
 800843e:	e7f8      	b.n	8008432 <_reclaim_reent+0x3e>
 8008440:	680e      	ldr	r6, [r1, #0]
 8008442:	4620      	mov	r0, r4
 8008444:	f000 f86e 	bl	8008524 <_free_r>
 8008448:	4631      	mov	r1, r6
 800844a:	e7e1      	b.n	8008410 <_reclaim_reent+0x1c>
 800844c:	6961      	ldr	r1, [r4, #20]
 800844e:	b111      	cbz	r1, 8008456 <_reclaim_reent+0x62>
 8008450:	4620      	mov	r0, r4
 8008452:	f000 f867 	bl	8008524 <_free_r>
 8008456:	69e1      	ldr	r1, [r4, #28]
 8008458:	b111      	cbz	r1, 8008460 <_reclaim_reent+0x6c>
 800845a:	4620      	mov	r0, r4
 800845c:	f000 f862 	bl	8008524 <_free_r>
 8008460:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008462:	b111      	cbz	r1, 800846a <_reclaim_reent+0x76>
 8008464:	4620      	mov	r0, r4
 8008466:	f000 f85d 	bl	8008524 <_free_r>
 800846a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800846c:	b111      	cbz	r1, 8008474 <_reclaim_reent+0x80>
 800846e:	4620      	mov	r0, r4
 8008470:	f000 f858 	bl	8008524 <_free_r>
 8008474:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008476:	b111      	cbz	r1, 800847e <_reclaim_reent+0x8a>
 8008478:	4620      	mov	r0, r4
 800847a:	f000 f853 	bl	8008524 <_free_r>
 800847e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008480:	b111      	cbz	r1, 8008488 <_reclaim_reent+0x94>
 8008482:	4620      	mov	r0, r4
 8008484:	f000 f84e 	bl	8008524 <_free_r>
 8008488:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800848a:	b111      	cbz	r1, 8008492 <_reclaim_reent+0x9e>
 800848c:	4620      	mov	r0, r4
 800848e:	f000 f849 	bl	8008524 <_free_r>
 8008492:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008494:	b111      	cbz	r1, 800849c <_reclaim_reent+0xa8>
 8008496:	4620      	mov	r0, r4
 8008498:	f000 f844 	bl	8008524 <_free_r>
 800849c:	6a23      	ldr	r3, [r4, #32]
 800849e:	b11b      	cbz	r3, 80084a8 <_reclaim_reent+0xb4>
 80084a0:	4620      	mov	r0, r4
 80084a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80084a6:	4718      	bx	r3
 80084a8:	bd70      	pop	{r4, r5, r6, pc}
 80084aa:	bf00      	nop
 80084ac:	20000150 	.word	0x20000150

080084b0 <__errno>:
 80084b0:	4b01      	ldr	r3, [pc, #4]	@ (80084b8 <__errno+0x8>)
 80084b2:	6818      	ldr	r0, [r3, #0]
 80084b4:	4770      	bx	lr
 80084b6:	bf00      	nop
 80084b8:	20000150 	.word	0x20000150

080084bc <__libc_init_array>:
 80084bc:	b570      	push	{r4, r5, r6, lr}
 80084be:	2600      	movs	r6, #0
 80084c0:	4d0c      	ldr	r5, [pc, #48]	@ (80084f4 <__libc_init_array+0x38>)
 80084c2:	4c0d      	ldr	r4, [pc, #52]	@ (80084f8 <__libc_init_array+0x3c>)
 80084c4:	1b64      	subs	r4, r4, r5
 80084c6:	10a4      	asrs	r4, r4, #2
 80084c8:	42a6      	cmp	r6, r4
 80084ca:	d109      	bne.n	80084e0 <__libc_init_array+0x24>
 80084cc:	f000 fc76 	bl	8008dbc <_init>
 80084d0:	2600      	movs	r6, #0
 80084d2:	4d0a      	ldr	r5, [pc, #40]	@ (80084fc <__libc_init_array+0x40>)
 80084d4:	4c0a      	ldr	r4, [pc, #40]	@ (8008500 <__libc_init_array+0x44>)
 80084d6:	1b64      	subs	r4, r4, r5
 80084d8:	10a4      	asrs	r4, r4, #2
 80084da:	42a6      	cmp	r6, r4
 80084dc:	d105      	bne.n	80084ea <__libc_init_array+0x2e>
 80084de:	bd70      	pop	{r4, r5, r6, pc}
 80084e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80084e4:	4798      	blx	r3
 80084e6:	3601      	adds	r6, #1
 80084e8:	e7ee      	b.n	80084c8 <__libc_init_array+0xc>
 80084ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80084ee:	4798      	blx	r3
 80084f0:	3601      	adds	r6, #1
 80084f2:	e7f2      	b.n	80084da <__libc_init_array+0x1e>
 80084f4:	080097f0 	.word	0x080097f0
 80084f8:	080097f0 	.word	0x080097f0
 80084fc:	080097f0 	.word	0x080097f0
 8008500:	080097f4 	.word	0x080097f4

08008504 <__retarget_lock_acquire_recursive>:
 8008504:	4770      	bx	lr

08008506 <__retarget_lock_release_recursive>:
 8008506:	4770      	bx	lr

08008508 <memcpy>:
 8008508:	440a      	add	r2, r1
 800850a:	4291      	cmp	r1, r2
 800850c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008510:	d100      	bne.n	8008514 <memcpy+0xc>
 8008512:	4770      	bx	lr
 8008514:	b510      	push	{r4, lr}
 8008516:	f811 4b01 	ldrb.w	r4, [r1], #1
 800851a:	4291      	cmp	r1, r2
 800851c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008520:	d1f9      	bne.n	8008516 <memcpy+0xe>
 8008522:	bd10      	pop	{r4, pc}

08008524 <_free_r>:
 8008524:	b538      	push	{r3, r4, r5, lr}
 8008526:	4605      	mov	r5, r0
 8008528:	2900      	cmp	r1, #0
 800852a:	d040      	beq.n	80085ae <_free_r+0x8a>
 800852c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008530:	1f0c      	subs	r4, r1, #4
 8008532:	2b00      	cmp	r3, #0
 8008534:	bfb8      	it	lt
 8008536:	18e4      	addlt	r4, r4, r3
 8008538:	f000 f8de 	bl	80086f8 <__malloc_lock>
 800853c:	4a1c      	ldr	r2, [pc, #112]	@ (80085b0 <_free_r+0x8c>)
 800853e:	6813      	ldr	r3, [r2, #0]
 8008540:	b933      	cbnz	r3, 8008550 <_free_r+0x2c>
 8008542:	6063      	str	r3, [r4, #4]
 8008544:	6014      	str	r4, [r2, #0]
 8008546:	4628      	mov	r0, r5
 8008548:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800854c:	f000 b8da 	b.w	8008704 <__malloc_unlock>
 8008550:	42a3      	cmp	r3, r4
 8008552:	d908      	bls.n	8008566 <_free_r+0x42>
 8008554:	6820      	ldr	r0, [r4, #0]
 8008556:	1821      	adds	r1, r4, r0
 8008558:	428b      	cmp	r3, r1
 800855a:	bf01      	itttt	eq
 800855c:	6819      	ldreq	r1, [r3, #0]
 800855e:	685b      	ldreq	r3, [r3, #4]
 8008560:	1809      	addeq	r1, r1, r0
 8008562:	6021      	streq	r1, [r4, #0]
 8008564:	e7ed      	b.n	8008542 <_free_r+0x1e>
 8008566:	461a      	mov	r2, r3
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	b10b      	cbz	r3, 8008570 <_free_r+0x4c>
 800856c:	42a3      	cmp	r3, r4
 800856e:	d9fa      	bls.n	8008566 <_free_r+0x42>
 8008570:	6811      	ldr	r1, [r2, #0]
 8008572:	1850      	adds	r0, r2, r1
 8008574:	42a0      	cmp	r0, r4
 8008576:	d10b      	bne.n	8008590 <_free_r+0x6c>
 8008578:	6820      	ldr	r0, [r4, #0]
 800857a:	4401      	add	r1, r0
 800857c:	1850      	adds	r0, r2, r1
 800857e:	4283      	cmp	r3, r0
 8008580:	6011      	str	r1, [r2, #0]
 8008582:	d1e0      	bne.n	8008546 <_free_r+0x22>
 8008584:	6818      	ldr	r0, [r3, #0]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	4408      	add	r0, r1
 800858a:	6010      	str	r0, [r2, #0]
 800858c:	6053      	str	r3, [r2, #4]
 800858e:	e7da      	b.n	8008546 <_free_r+0x22>
 8008590:	d902      	bls.n	8008598 <_free_r+0x74>
 8008592:	230c      	movs	r3, #12
 8008594:	602b      	str	r3, [r5, #0]
 8008596:	e7d6      	b.n	8008546 <_free_r+0x22>
 8008598:	6820      	ldr	r0, [r4, #0]
 800859a:	1821      	adds	r1, r4, r0
 800859c:	428b      	cmp	r3, r1
 800859e:	bf01      	itttt	eq
 80085a0:	6819      	ldreq	r1, [r3, #0]
 80085a2:	685b      	ldreq	r3, [r3, #4]
 80085a4:	1809      	addeq	r1, r1, r0
 80085a6:	6021      	streq	r1, [r4, #0]
 80085a8:	6063      	str	r3, [r4, #4]
 80085aa:	6054      	str	r4, [r2, #4]
 80085ac:	e7cb      	b.n	8008546 <_free_r+0x22>
 80085ae:	bd38      	pop	{r3, r4, r5, pc}
 80085b0:	2000205c 	.word	0x2000205c

080085b4 <sbrk_aligned>:
 80085b4:	b570      	push	{r4, r5, r6, lr}
 80085b6:	4e0f      	ldr	r6, [pc, #60]	@ (80085f4 <sbrk_aligned+0x40>)
 80085b8:	460c      	mov	r4, r1
 80085ba:	6831      	ldr	r1, [r6, #0]
 80085bc:	4605      	mov	r5, r0
 80085be:	b911      	cbnz	r1, 80085c6 <sbrk_aligned+0x12>
 80085c0:	f000 fba8 	bl	8008d14 <_sbrk_r>
 80085c4:	6030      	str	r0, [r6, #0]
 80085c6:	4621      	mov	r1, r4
 80085c8:	4628      	mov	r0, r5
 80085ca:	f000 fba3 	bl	8008d14 <_sbrk_r>
 80085ce:	1c43      	adds	r3, r0, #1
 80085d0:	d103      	bne.n	80085da <sbrk_aligned+0x26>
 80085d2:	f04f 34ff 	mov.w	r4, #4294967295
 80085d6:	4620      	mov	r0, r4
 80085d8:	bd70      	pop	{r4, r5, r6, pc}
 80085da:	1cc4      	adds	r4, r0, #3
 80085dc:	f024 0403 	bic.w	r4, r4, #3
 80085e0:	42a0      	cmp	r0, r4
 80085e2:	d0f8      	beq.n	80085d6 <sbrk_aligned+0x22>
 80085e4:	1a21      	subs	r1, r4, r0
 80085e6:	4628      	mov	r0, r5
 80085e8:	f000 fb94 	bl	8008d14 <_sbrk_r>
 80085ec:	3001      	adds	r0, #1
 80085ee:	d1f2      	bne.n	80085d6 <sbrk_aligned+0x22>
 80085f0:	e7ef      	b.n	80085d2 <sbrk_aligned+0x1e>
 80085f2:	bf00      	nop
 80085f4:	20002058 	.word	0x20002058

080085f8 <_malloc_r>:
 80085f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085fc:	1ccd      	adds	r5, r1, #3
 80085fe:	f025 0503 	bic.w	r5, r5, #3
 8008602:	3508      	adds	r5, #8
 8008604:	2d0c      	cmp	r5, #12
 8008606:	bf38      	it	cc
 8008608:	250c      	movcc	r5, #12
 800860a:	2d00      	cmp	r5, #0
 800860c:	4606      	mov	r6, r0
 800860e:	db01      	blt.n	8008614 <_malloc_r+0x1c>
 8008610:	42a9      	cmp	r1, r5
 8008612:	d904      	bls.n	800861e <_malloc_r+0x26>
 8008614:	230c      	movs	r3, #12
 8008616:	6033      	str	r3, [r6, #0]
 8008618:	2000      	movs	r0, #0
 800861a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800861e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80086f4 <_malloc_r+0xfc>
 8008622:	f000 f869 	bl	80086f8 <__malloc_lock>
 8008626:	f8d8 3000 	ldr.w	r3, [r8]
 800862a:	461c      	mov	r4, r3
 800862c:	bb44      	cbnz	r4, 8008680 <_malloc_r+0x88>
 800862e:	4629      	mov	r1, r5
 8008630:	4630      	mov	r0, r6
 8008632:	f7ff ffbf 	bl	80085b4 <sbrk_aligned>
 8008636:	1c43      	adds	r3, r0, #1
 8008638:	4604      	mov	r4, r0
 800863a:	d158      	bne.n	80086ee <_malloc_r+0xf6>
 800863c:	f8d8 4000 	ldr.w	r4, [r8]
 8008640:	4627      	mov	r7, r4
 8008642:	2f00      	cmp	r7, #0
 8008644:	d143      	bne.n	80086ce <_malloc_r+0xd6>
 8008646:	2c00      	cmp	r4, #0
 8008648:	d04b      	beq.n	80086e2 <_malloc_r+0xea>
 800864a:	6823      	ldr	r3, [r4, #0]
 800864c:	4639      	mov	r1, r7
 800864e:	4630      	mov	r0, r6
 8008650:	eb04 0903 	add.w	r9, r4, r3
 8008654:	f000 fb5e 	bl	8008d14 <_sbrk_r>
 8008658:	4581      	cmp	r9, r0
 800865a:	d142      	bne.n	80086e2 <_malloc_r+0xea>
 800865c:	6821      	ldr	r1, [r4, #0]
 800865e:	4630      	mov	r0, r6
 8008660:	1a6d      	subs	r5, r5, r1
 8008662:	4629      	mov	r1, r5
 8008664:	f7ff ffa6 	bl	80085b4 <sbrk_aligned>
 8008668:	3001      	adds	r0, #1
 800866a:	d03a      	beq.n	80086e2 <_malloc_r+0xea>
 800866c:	6823      	ldr	r3, [r4, #0]
 800866e:	442b      	add	r3, r5
 8008670:	6023      	str	r3, [r4, #0]
 8008672:	f8d8 3000 	ldr.w	r3, [r8]
 8008676:	685a      	ldr	r2, [r3, #4]
 8008678:	bb62      	cbnz	r2, 80086d4 <_malloc_r+0xdc>
 800867a:	f8c8 7000 	str.w	r7, [r8]
 800867e:	e00f      	b.n	80086a0 <_malloc_r+0xa8>
 8008680:	6822      	ldr	r2, [r4, #0]
 8008682:	1b52      	subs	r2, r2, r5
 8008684:	d420      	bmi.n	80086c8 <_malloc_r+0xd0>
 8008686:	2a0b      	cmp	r2, #11
 8008688:	d917      	bls.n	80086ba <_malloc_r+0xc2>
 800868a:	1961      	adds	r1, r4, r5
 800868c:	42a3      	cmp	r3, r4
 800868e:	6025      	str	r5, [r4, #0]
 8008690:	bf18      	it	ne
 8008692:	6059      	strne	r1, [r3, #4]
 8008694:	6863      	ldr	r3, [r4, #4]
 8008696:	bf08      	it	eq
 8008698:	f8c8 1000 	streq.w	r1, [r8]
 800869c:	5162      	str	r2, [r4, r5]
 800869e:	604b      	str	r3, [r1, #4]
 80086a0:	4630      	mov	r0, r6
 80086a2:	f000 f82f 	bl	8008704 <__malloc_unlock>
 80086a6:	f104 000b 	add.w	r0, r4, #11
 80086aa:	1d23      	adds	r3, r4, #4
 80086ac:	f020 0007 	bic.w	r0, r0, #7
 80086b0:	1ac2      	subs	r2, r0, r3
 80086b2:	bf1c      	itt	ne
 80086b4:	1a1b      	subne	r3, r3, r0
 80086b6:	50a3      	strne	r3, [r4, r2]
 80086b8:	e7af      	b.n	800861a <_malloc_r+0x22>
 80086ba:	6862      	ldr	r2, [r4, #4]
 80086bc:	42a3      	cmp	r3, r4
 80086be:	bf0c      	ite	eq
 80086c0:	f8c8 2000 	streq.w	r2, [r8]
 80086c4:	605a      	strne	r2, [r3, #4]
 80086c6:	e7eb      	b.n	80086a0 <_malloc_r+0xa8>
 80086c8:	4623      	mov	r3, r4
 80086ca:	6864      	ldr	r4, [r4, #4]
 80086cc:	e7ae      	b.n	800862c <_malloc_r+0x34>
 80086ce:	463c      	mov	r4, r7
 80086d0:	687f      	ldr	r7, [r7, #4]
 80086d2:	e7b6      	b.n	8008642 <_malloc_r+0x4a>
 80086d4:	461a      	mov	r2, r3
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	42a3      	cmp	r3, r4
 80086da:	d1fb      	bne.n	80086d4 <_malloc_r+0xdc>
 80086dc:	2300      	movs	r3, #0
 80086de:	6053      	str	r3, [r2, #4]
 80086e0:	e7de      	b.n	80086a0 <_malloc_r+0xa8>
 80086e2:	230c      	movs	r3, #12
 80086e4:	4630      	mov	r0, r6
 80086e6:	6033      	str	r3, [r6, #0]
 80086e8:	f000 f80c 	bl	8008704 <__malloc_unlock>
 80086ec:	e794      	b.n	8008618 <_malloc_r+0x20>
 80086ee:	6005      	str	r5, [r0, #0]
 80086f0:	e7d6      	b.n	80086a0 <_malloc_r+0xa8>
 80086f2:	bf00      	nop
 80086f4:	2000205c 	.word	0x2000205c

080086f8 <__malloc_lock>:
 80086f8:	4801      	ldr	r0, [pc, #4]	@ (8008700 <__malloc_lock+0x8>)
 80086fa:	f7ff bf03 	b.w	8008504 <__retarget_lock_acquire_recursive>
 80086fe:	bf00      	nop
 8008700:	20002054 	.word	0x20002054

08008704 <__malloc_unlock>:
 8008704:	4801      	ldr	r0, [pc, #4]	@ (800870c <__malloc_unlock+0x8>)
 8008706:	f7ff befe 	b.w	8008506 <__retarget_lock_release_recursive>
 800870a:	bf00      	nop
 800870c:	20002054 	.word	0x20002054

08008710 <__ssputs_r>:
 8008710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008714:	461f      	mov	r7, r3
 8008716:	688e      	ldr	r6, [r1, #8]
 8008718:	4682      	mov	sl, r0
 800871a:	42be      	cmp	r6, r7
 800871c:	460c      	mov	r4, r1
 800871e:	4690      	mov	r8, r2
 8008720:	680b      	ldr	r3, [r1, #0]
 8008722:	d82d      	bhi.n	8008780 <__ssputs_r+0x70>
 8008724:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008728:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800872c:	d026      	beq.n	800877c <__ssputs_r+0x6c>
 800872e:	6965      	ldr	r5, [r4, #20]
 8008730:	6909      	ldr	r1, [r1, #16]
 8008732:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008736:	eba3 0901 	sub.w	r9, r3, r1
 800873a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800873e:	1c7b      	adds	r3, r7, #1
 8008740:	444b      	add	r3, r9
 8008742:	106d      	asrs	r5, r5, #1
 8008744:	429d      	cmp	r5, r3
 8008746:	bf38      	it	cc
 8008748:	461d      	movcc	r5, r3
 800874a:	0553      	lsls	r3, r2, #21
 800874c:	d527      	bpl.n	800879e <__ssputs_r+0x8e>
 800874e:	4629      	mov	r1, r5
 8008750:	f7ff ff52 	bl	80085f8 <_malloc_r>
 8008754:	4606      	mov	r6, r0
 8008756:	b360      	cbz	r0, 80087b2 <__ssputs_r+0xa2>
 8008758:	464a      	mov	r2, r9
 800875a:	6921      	ldr	r1, [r4, #16]
 800875c:	f7ff fed4 	bl	8008508 <memcpy>
 8008760:	89a3      	ldrh	r3, [r4, #12]
 8008762:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008766:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800876a:	81a3      	strh	r3, [r4, #12]
 800876c:	6126      	str	r6, [r4, #16]
 800876e:	444e      	add	r6, r9
 8008770:	6026      	str	r6, [r4, #0]
 8008772:	463e      	mov	r6, r7
 8008774:	6165      	str	r5, [r4, #20]
 8008776:	eba5 0509 	sub.w	r5, r5, r9
 800877a:	60a5      	str	r5, [r4, #8]
 800877c:	42be      	cmp	r6, r7
 800877e:	d900      	bls.n	8008782 <__ssputs_r+0x72>
 8008780:	463e      	mov	r6, r7
 8008782:	4632      	mov	r2, r6
 8008784:	4641      	mov	r1, r8
 8008786:	6820      	ldr	r0, [r4, #0]
 8008788:	f000 faaa 	bl	8008ce0 <memmove>
 800878c:	2000      	movs	r0, #0
 800878e:	68a3      	ldr	r3, [r4, #8]
 8008790:	1b9b      	subs	r3, r3, r6
 8008792:	60a3      	str	r3, [r4, #8]
 8008794:	6823      	ldr	r3, [r4, #0]
 8008796:	4433      	add	r3, r6
 8008798:	6023      	str	r3, [r4, #0]
 800879a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800879e:	462a      	mov	r2, r5
 80087a0:	f000 fad6 	bl	8008d50 <_realloc_r>
 80087a4:	4606      	mov	r6, r0
 80087a6:	2800      	cmp	r0, #0
 80087a8:	d1e0      	bne.n	800876c <__ssputs_r+0x5c>
 80087aa:	4650      	mov	r0, sl
 80087ac:	6921      	ldr	r1, [r4, #16]
 80087ae:	f7ff feb9 	bl	8008524 <_free_r>
 80087b2:	230c      	movs	r3, #12
 80087b4:	f8ca 3000 	str.w	r3, [sl]
 80087b8:	89a3      	ldrh	r3, [r4, #12]
 80087ba:	f04f 30ff 	mov.w	r0, #4294967295
 80087be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087c2:	81a3      	strh	r3, [r4, #12]
 80087c4:	e7e9      	b.n	800879a <__ssputs_r+0x8a>
	...

080087c8 <_svfiprintf_r>:
 80087c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087cc:	4698      	mov	r8, r3
 80087ce:	898b      	ldrh	r3, [r1, #12]
 80087d0:	4607      	mov	r7, r0
 80087d2:	061b      	lsls	r3, r3, #24
 80087d4:	460d      	mov	r5, r1
 80087d6:	4614      	mov	r4, r2
 80087d8:	b09d      	sub	sp, #116	@ 0x74
 80087da:	d510      	bpl.n	80087fe <_svfiprintf_r+0x36>
 80087dc:	690b      	ldr	r3, [r1, #16]
 80087de:	b973      	cbnz	r3, 80087fe <_svfiprintf_r+0x36>
 80087e0:	2140      	movs	r1, #64	@ 0x40
 80087e2:	f7ff ff09 	bl	80085f8 <_malloc_r>
 80087e6:	6028      	str	r0, [r5, #0]
 80087e8:	6128      	str	r0, [r5, #16]
 80087ea:	b930      	cbnz	r0, 80087fa <_svfiprintf_r+0x32>
 80087ec:	230c      	movs	r3, #12
 80087ee:	603b      	str	r3, [r7, #0]
 80087f0:	f04f 30ff 	mov.w	r0, #4294967295
 80087f4:	b01d      	add	sp, #116	@ 0x74
 80087f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087fa:	2340      	movs	r3, #64	@ 0x40
 80087fc:	616b      	str	r3, [r5, #20]
 80087fe:	2300      	movs	r3, #0
 8008800:	9309      	str	r3, [sp, #36]	@ 0x24
 8008802:	2320      	movs	r3, #32
 8008804:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008808:	2330      	movs	r3, #48	@ 0x30
 800880a:	f04f 0901 	mov.w	r9, #1
 800880e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008812:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80089ac <_svfiprintf_r+0x1e4>
 8008816:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800881a:	4623      	mov	r3, r4
 800881c:	469a      	mov	sl, r3
 800881e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008822:	b10a      	cbz	r2, 8008828 <_svfiprintf_r+0x60>
 8008824:	2a25      	cmp	r2, #37	@ 0x25
 8008826:	d1f9      	bne.n	800881c <_svfiprintf_r+0x54>
 8008828:	ebba 0b04 	subs.w	fp, sl, r4
 800882c:	d00b      	beq.n	8008846 <_svfiprintf_r+0x7e>
 800882e:	465b      	mov	r3, fp
 8008830:	4622      	mov	r2, r4
 8008832:	4629      	mov	r1, r5
 8008834:	4638      	mov	r0, r7
 8008836:	f7ff ff6b 	bl	8008710 <__ssputs_r>
 800883a:	3001      	adds	r0, #1
 800883c:	f000 80a7 	beq.w	800898e <_svfiprintf_r+0x1c6>
 8008840:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008842:	445a      	add	r2, fp
 8008844:	9209      	str	r2, [sp, #36]	@ 0x24
 8008846:	f89a 3000 	ldrb.w	r3, [sl]
 800884a:	2b00      	cmp	r3, #0
 800884c:	f000 809f 	beq.w	800898e <_svfiprintf_r+0x1c6>
 8008850:	2300      	movs	r3, #0
 8008852:	f04f 32ff 	mov.w	r2, #4294967295
 8008856:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800885a:	f10a 0a01 	add.w	sl, sl, #1
 800885e:	9304      	str	r3, [sp, #16]
 8008860:	9307      	str	r3, [sp, #28]
 8008862:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008866:	931a      	str	r3, [sp, #104]	@ 0x68
 8008868:	4654      	mov	r4, sl
 800886a:	2205      	movs	r2, #5
 800886c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008870:	484e      	ldr	r0, [pc, #312]	@ (80089ac <_svfiprintf_r+0x1e4>)
 8008872:	f000 fa5f 	bl	8008d34 <memchr>
 8008876:	9a04      	ldr	r2, [sp, #16]
 8008878:	b9d8      	cbnz	r0, 80088b2 <_svfiprintf_r+0xea>
 800887a:	06d0      	lsls	r0, r2, #27
 800887c:	bf44      	itt	mi
 800887e:	2320      	movmi	r3, #32
 8008880:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008884:	0711      	lsls	r1, r2, #28
 8008886:	bf44      	itt	mi
 8008888:	232b      	movmi	r3, #43	@ 0x2b
 800888a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800888e:	f89a 3000 	ldrb.w	r3, [sl]
 8008892:	2b2a      	cmp	r3, #42	@ 0x2a
 8008894:	d015      	beq.n	80088c2 <_svfiprintf_r+0xfa>
 8008896:	4654      	mov	r4, sl
 8008898:	2000      	movs	r0, #0
 800889a:	f04f 0c0a 	mov.w	ip, #10
 800889e:	9a07      	ldr	r2, [sp, #28]
 80088a0:	4621      	mov	r1, r4
 80088a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088a6:	3b30      	subs	r3, #48	@ 0x30
 80088a8:	2b09      	cmp	r3, #9
 80088aa:	d94b      	bls.n	8008944 <_svfiprintf_r+0x17c>
 80088ac:	b1b0      	cbz	r0, 80088dc <_svfiprintf_r+0x114>
 80088ae:	9207      	str	r2, [sp, #28]
 80088b0:	e014      	b.n	80088dc <_svfiprintf_r+0x114>
 80088b2:	eba0 0308 	sub.w	r3, r0, r8
 80088b6:	fa09 f303 	lsl.w	r3, r9, r3
 80088ba:	4313      	orrs	r3, r2
 80088bc:	46a2      	mov	sl, r4
 80088be:	9304      	str	r3, [sp, #16]
 80088c0:	e7d2      	b.n	8008868 <_svfiprintf_r+0xa0>
 80088c2:	9b03      	ldr	r3, [sp, #12]
 80088c4:	1d19      	adds	r1, r3, #4
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	9103      	str	r1, [sp, #12]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	bfbb      	ittet	lt
 80088ce:	425b      	neglt	r3, r3
 80088d0:	f042 0202 	orrlt.w	r2, r2, #2
 80088d4:	9307      	strge	r3, [sp, #28]
 80088d6:	9307      	strlt	r3, [sp, #28]
 80088d8:	bfb8      	it	lt
 80088da:	9204      	strlt	r2, [sp, #16]
 80088dc:	7823      	ldrb	r3, [r4, #0]
 80088de:	2b2e      	cmp	r3, #46	@ 0x2e
 80088e0:	d10a      	bne.n	80088f8 <_svfiprintf_r+0x130>
 80088e2:	7863      	ldrb	r3, [r4, #1]
 80088e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80088e6:	d132      	bne.n	800894e <_svfiprintf_r+0x186>
 80088e8:	9b03      	ldr	r3, [sp, #12]
 80088ea:	3402      	adds	r4, #2
 80088ec:	1d1a      	adds	r2, r3, #4
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	9203      	str	r2, [sp, #12]
 80088f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80088f6:	9305      	str	r3, [sp, #20]
 80088f8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80089b0 <_svfiprintf_r+0x1e8>
 80088fc:	2203      	movs	r2, #3
 80088fe:	4650      	mov	r0, sl
 8008900:	7821      	ldrb	r1, [r4, #0]
 8008902:	f000 fa17 	bl	8008d34 <memchr>
 8008906:	b138      	cbz	r0, 8008918 <_svfiprintf_r+0x150>
 8008908:	2240      	movs	r2, #64	@ 0x40
 800890a:	9b04      	ldr	r3, [sp, #16]
 800890c:	eba0 000a 	sub.w	r0, r0, sl
 8008910:	4082      	lsls	r2, r0
 8008912:	4313      	orrs	r3, r2
 8008914:	3401      	adds	r4, #1
 8008916:	9304      	str	r3, [sp, #16]
 8008918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800891c:	2206      	movs	r2, #6
 800891e:	4825      	ldr	r0, [pc, #148]	@ (80089b4 <_svfiprintf_r+0x1ec>)
 8008920:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008924:	f000 fa06 	bl	8008d34 <memchr>
 8008928:	2800      	cmp	r0, #0
 800892a:	d036      	beq.n	800899a <_svfiprintf_r+0x1d2>
 800892c:	4b22      	ldr	r3, [pc, #136]	@ (80089b8 <_svfiprintf_r+0x1f0>)
 800892e:	bb1b      	cbnz	r3, 8008978 <_svfiprintf_r+0x1b0>
 8008930:	9b03      	ldr	r3, [sp, #12]
 8008932:	3307      	adds	r3, #7
 8008934:	f023 0307 	bic.w	r3, r3, #7
 8008938:	3308      	adds	r3, #8
 800893a:	9303      	str	r3, [sp, #12]
 800893c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800893e:	4433      	add	r3, r6
 8008940:	9309      	str	r3, [sp, #36]	@ 0x24
 8008942:	e76a      	b.n	800881a <_svfiprintf_r+0x52>
 8008944:	460c      	mov	r4, r1
 8008946:	2001      	movs	r0, #1
 8008948:	fb0c 3202 	mla	r2, ip, r2, r3
 800894c:	e7a8      	b.n	80088a0 <_svfiprintf_r+0xd8>
 800894e:	2300      	movs	r3, #0
 8008950:	f04f 0c0a 	mov.w	ip, #10
 8008954:	4619      	mov	r1, r3
 8008956:	3401      	adds	r4, #1
 8008958:	9305      	str	r3, [sp, #20]
 800895a:	4620      	mov	r0, r4
 800895c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008960:	3a30      	subs	r2, #48	@ 0x30
 8008962:	2a09      	cmp	r2, #9
 8008964:	d903      	bls.n	800896e <_svfiprintf_r+0x1a6>
 8008966:	2b00      	cmp	r3, #0
 8008968:	d0c6      	beq.n	80088f8 <_svfiprintf_r+0x130>
 800896a:	9105      	str	r1, [sp, #20]
 800896c:	e7c4      	b.n	80088f8 <_svfiprintf_r+0x130>
 800896e:	4604      	mov	r4, r0
 8008970:	2301      	movs	r3, #1
 8008972:	fb0c 2101 	mla	r1, ip, r1, r2
 8008976:	e7f0      	b.n	800895a <_svfiprintf_r+0x192>
 8008978:	ab03      	add	r3, sp, #12
 800897a:	9300      	str	r3, [sp, #0]
 800897c:	462a      	mov	r2, r5
 800897e:	4638      	mov	r0, r7
 8008980:	4b0e      	ldr	r3, [pc, #56]	@ (80089bc <_svfiprintf_r+0x1f4>)
 8008982:	a904      	add	r1, sp, #16
 8008984:	f3af 8000 	nop.w
 8008988:	1c42      	adds	r2, r0, #1
 800898a:	4606      	mov	r6, r0
 800898c:	d1d6      	bne.n	800893c <_svfiprintf_r+0x174>
 800898e:	89ab      	ldrh	r3, [r5, #12]
 8008990:	065b      	lsls	r3, r3, #25
 8008992:	f53f af2d 	bmi.w	80087f0 <_svfiprintf_r+0x28>
 8008996:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008998:	e72c      	b.n	80087f4 <_svfiprintf_r+0x2c>
 800899a:	ab03      	add	r3, sp, #12
 800899c:	9300      	str	r3, [sp, #0]
 800899e:	462a      	mov	r2, r5
 80089a0:	4638      	mov	r0, r7
 80089a2:	4b06      	ldr	r3, [pc, #24]	@ (80089bc <_svfiprintf_r+0x1f4>)
 80089a4:	a904      	add	r1, sp, #16
 80089a6:	f000 f87d 	bl	8008aa4 <_printf_i>
 80089aa:	e7ed      	b.n	8008988 <_svfiprintf_r+0x1c0>
 80089ac:	080097b2 	.word	0x080097b2
 80089b0:	080097b8 	.word	0x080097b8
 80089b4:	080097bc 	.word	0x080097bc
 80089b8:	00000000 	.word	0x00000000
 80089bc:	08008711 	.word	0x08008711

080089c0 <_printf_common>:
 80089c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089c4:	4616      	mov	r6, r2
 80089c6:	4698      	mov	r8, r3
 80089c8:	688a      	ldr	r2, [r1, #8]
 80089ca:	690b      	ldr	r3, [r1, #16]
 80089cc:	4607      	mov	r7, r0
 80089ce:	4293      	cmp	r3, r2
 80089d0:	bfb8      	it	lt
 80089d2:	4613      	movlt	r3, r2
 80089d4:	6033      	str	r3, [r6, #0]
 80089d6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80089da:	460c      	mov	r4, r1
 80089dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80089e0:	b10a      	cbz	r2, 80089e6 <_printf_common+0x26>
 80089e2:	3301      	adds	r3, #1
 80089e4:	6033      	str	r3, [r6, #0]
 80089e6:	6823      	ldr	r3, [r4, #0]
 80089e8:	0699      	lsls	r1, r3, #26
 80089ea:	bf42      	ittt	mi
 80089ec:	6833      	ldrmi	r3, [r6, #0]
 80089ee:	3302      	addmi	r3, #2
 80089f0:	6033      	strmi	r3, [r6, #0]
 80089f2:	6825      	ldr	r5, [r4, #0]
 80089f4:	f015 0506 	ands.w	r5, r5, #6
 80089f8:	d106      	bne.n	8008a08 <_printf_common+0x48>
 80089fa:	f104 0a19 	add.w	sl, r4, #25
 80089fe:	68e3      	ldr	r3, [r4, #12]
 8008a00:	6832      	ldr	r2, [r6, #0]
 8008a02:	1a9b      	subs	r3, r3, r2
 8008a04:	42ab      	cmp	r3, r5
 8008a06:	dc2b      	bgt.n	8008a60 <_printf_common+0xa0>
 8008a08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008a0c:	6822      	ldr	r2, [r4, #0]
 8008a0e:	3b00      	subs	r3, #0
 8008a10:	bf18      	it	ne
 8008a12:	2301      	movne	r3, #1
 8008a14:	0692      	lsls	r2, r2, #26
 8008a16:	d430      	bmi.n	8008a7a <_printf_common+0xba>
 8008a18:	4641      	mov	r1, r8
 8008a1a:	4638      	mov	r0, r7
 8008a1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008a20:	47c8      	blx	r9
 8008a22:	3001      	adds	r0, #1
 8008a24:	d023      	beq.n	8008a6e <_printf_common+0xae>
 8008a26:	6823      	ldr	r3, [r4, #0]
 8008a28:	6922      	ldr	r2, [r4, #16]
 8008a2a:	f003 0306 	and.w	r3, r3, #6
 8008a2e:	2b04      	cmp	r3, #4
 8008a30:	bf14      	ite	ne
 8008a32:	2500      	movne	r5, #0
 8008a34:	6833      	ldreq	r3, [r6, #0]
 8008a36:	f04f 0600 	mov.w	r6, #0
 8008a3a:	bf08      	it	eq
 8008a3c:	68e5      	ldreq	r5, [r4, #12]
 8008a3e:	f104 041a 	add.w	r4, r4, #26
 8008a42:	bf08      	it	eq
 8008a44:	1aed      	subeq	r5, r5, r3
 8008a46:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008a4a:	bf08      	it	eq
 8008a4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a50:	4293      	cmp	r3, r2
 8008a52:	bfc4      	itt	gt
 8008a54:	1a9b      	subgt	r3, r3, r2
 8008a56:	18ed      	addgt	r5, r5, r3
 8008a58:	42b5      	cmp	r5, r6
 8008a5a:	d11a      	bne.n	8008a92 <_printf_common+0xd2>
 8008a5c:	2000      	movs	r0, #0
 8008a5e:	e008      	b.n	8008a72 <_printf_common+0xb2>
 8008a60:	2301      	movs	r3, #1
 8008a62:	4652      	mov	r2, sl
 8008a64:	4641      	mov	r1, r8
 8008a66:	4638      	mov	r0, r7
 8008a68:	47c8      	blx	r9
 8008a6a:	3001      	adds	r0, #1
 8008a6c:	d103      	bne.n	8008a76 <_printf_common+0xb6>
 8008a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a76:	3501      	adds	r5, #1
 8008a78:	e7c1      	b.n	80089fe <_printf_common+0x3e>
 8008a7a:	2030      	movs	r0, #48	@ 0x30
 8008a7c:	18e1      	adds	r1, r4, r3
 8008a7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008a82:	1c5a      	adds	r2, r3, #1
 8008a84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008a88:	4422      	add	r2, r4
 8008a8a:	3302      	adds	r3, #2
 8008a8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008a90:	e7c2      	b.n	8008a18 <_printf_common+0x58>
 8008a92:	2301      	movs	r3, #1
 8008a94:	4622      	mov	r2, r4
 8008a96:	4641      	mov	r1, r8
 8008a98:	4638      	mov	r0, r7
 8008a9a:	47c8      	blx	r9
 8008a9c:	3001      	adds	r0, #1
 8008a9e:	d0e6      	beq.n	8008a6e <_printf_common+0xae>
 8008aa0:	3601      	adds	r6, #1
 8008aa2:	e7d9      	b.n	8008a58 <_printf_common+0x98>

08008aa4 <_printf_i>:
 8008aa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008aa8:	7e0f      	ldrb	r7, [r1, #24]
 8008aaa:	4691      	mov	r9, r2
 8008aac:	2f78      	cmp	r7, #120	@ 0x78
 8008aae:	4680      	mov	r8, r0
 8008ab0:	460c      	mov	r4, r1
 8008ab2:	469a      	mov	sl, r3
 8008ab4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008ab6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008aba:	d807      	bhi.n	8008acc <_printf_i+0x28>
 8008abc:	2f62      	cmp	r7, #98	@ 0x62
 8008abe:	d80a      	bhi.n	8008ad6 <_printf_i+0x32>
 8008ac0:	2f00      	cmp	r7, #0
 8008ac2:	f000 80d1 	beq.w	8008c68 <_printf_i+0x1c4>
 8008ac6:	2f58      	cmp	r7, #88	@ 0x58
 8008ac8:	f000 80b8 	beq.w	8008c3c <_printf_i+0x198>
 8008acc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ad0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008ad4:	e03a      	b.n	8008b4c <_printf_i+0xa8>
 8008ad6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008ada:	2b15      	cmp	r3, #21
 8008adc:	d8f6      	bhi.n	8008acc <_printf_i+0x28>
 8008ade:	a101      	add	r1, pc, #4	@ (adr r1, 8008ae4 <_printf_i+0x40>)
 8008ae0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ae4:	08008b3d 	.word	0x08008b3d
 8008ae8:	08008b51 	.word	0x08008b51
 8008aec:	08008acd 	.word	0x08008acd
 8008af0:	08008acd 	.word	0x08008acd
 8008af4:	08008acd 	.word	0x08008acd
 8008af8:	08008acd 	.word	0x08008acd
 8008afc:	08008b51 	.word	0x08008b51
 8008b00:	08008acd 	.word	0x08008acd
 8008b04:	08008acd 	.word	0x08008acd
 8008b08:	08008acd 	.word	0x08008acd
 8008b0c:	08008acd 	.word	0x08008acd
 8008b10:	08008c4f 	.word	0x08008c4f
 8008b14:	08008b7b 	.word	0x08008b7b
 8008b18:	08008c09 	.word	0x08008c09
 8008b1c:	08008acd 	.word	0x08008acd
 8008b20:	08008acd 	.word	0x08008acd
 8008b24:	08008c71 	.word	0x08008c71
 8008b28:	08008acd 	.word	0x08008acd
 8008b2c:	08008b7b 	.word	0x08008b7b
 8008b30:	08008acd 	.word	0x08008acd
 8008b34:	08008acd 	.word	0x08008acd
 8008b38:	08008c11 	.word	0x08008c11
 8008b3c:	6833      	ldr	r3, [r6, #0]
 8008b3e:	1d1a      	adds	r2, r3, #4
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	6032      	str	r2, [r6, #0]
 8008b44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e09c      	b.n	8008c8a <_printf_i+0x1e6>
 8008b50:	6833      	ldr	r3, [r6, #0]
 8008b52:	6820      	ldr	r0, [r4, #0]
 8008b54:	1d19      	adds	r1, r3, #4
 8008b56:	6031      	str	r1, [r6, #0]
 8008b58:	0606      	lsls	r6, r0, #24
 8008b5a:	d501      	bpl.n	8008b60 <_printf_i+0xbc>
 8008b5c:	681d      	ldr	r5, [r3, #0]
 8008b5e:	e003      	b.n	8008b68 <_printf_i+0xc4>
 8008b60:	0645      	lsls	r5, r0, #25
 8008b62:	d5fb      	bpl.n	8008b5c <_printf_i+0xb8>
 8008b64:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008b68:	2d00      	cmp	r5, #0
 8008b6a:	da03      	bge.n	8008b74 <_printf_i+0xd0>
 8008b6c:	232d      	movs	r3, #45	@ 0x2d
 8008b6e:	426d      	negs	r5, r5
 8008b70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b74:	230a      	movs	r3, #10
 8008b76:	4858      	ldr	r0, [pc, #352]	@ (8008cd8 <_printf_i+0x234>)
 8008b78:	e011      	b.n	8008b9e <_printf_i+0xfa>
 8008b7a:	6821      	ldr	r1, [r4, #0]
 8008b7c:	6833      	ldr	r3, [r6, #0]
 8008b7e:	0608      	lsls	r0, r1, #24
 8008b80:	f853 5b04 	ldr.w	r5, [r3], #4
 8008b84:	d402      	bmi.n	8008b8c <_printf_i+0xe8>
 8008b86:	0649      	lsls	r1, r1, #25
 8008b88:	bf48      	it	mi
 8008b8a:	b2ad      	uxthmi	r5, r5
 8008b8c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008b8e:	6033      	str	r3, [r6, #0]
 8008b90:	bf14      	ite	ne
 8008b92:	230a      	movne	r3, #10
 8008b94:	2308      	moveq	r3, #8
 8008b96:	4850      	ldr	r0, [pc, #320]	@ (8008cd8 <_printf_i+0x234>)
 8008b98:	2100      	movs	r1, #0
 8008b9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008b9e:	6866      	ldr	r6, [r4, #4]
 8008ba0:	2e00      	cmp	r6, #0
 8008ba2:	60a6      	str	r6, [r4, #8]
 8008ba4:	db05      	blt.n	8008bb2 <_printf_i+0x10e>
 8008ba6:	6821      	ldr	r1, [r4, #0]
 8008ba8:	432e      	orrs	r6, r5
 8008baa:	f021 0104 	bic.w	r1, r1, #4
 8008bae:	6021      	str	r1, [r4, #0]
 8008bb0:	d04b      	beq.n	8008c4a <_printf_i+0x1a6>
 8008bb2:	4616      	mov	r6, r2
 8008bb4:	fbb5 f1f3 	udiv	r1, r5, r3
 8008bb8:	fb03 5711 	mls	r7, r3, r1, r5
 8008bbc:	5dc7      	ldrb	r7, [r0, r7]
 8008bbe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008bc2:	462f      	mov	r7, r5
 8008bc4:	42bb      	cmp	r3, r7
 8008bc6:	460d      	mov	r5, r1
 8008bc8:	d9f4      	bls.n	8008bb4 <_printf_i+0x110>
 8008bca:	2b08      	cmp	r3, #8
 8008bcc:	d10b      	bne.n	8008be6 <_printf_i+0x142>
 8008bce:	6823      	ldr	r3, [r4, #0]
 8008bd0:	07df      	lsls	r7, r3, #31
 8008bd2:	d508      	bpl.n	8008be6 <_printf_i+0x142>
 8008bd4:	6923      	ldr	r3, [r4, #16]
 8008bd6:	6861      	ldr	r1, [r4, #4]
 8008bd8:	4299      	cmp	r1, r3
 8008bda:	bfde      	ittt	le
 8008bdc:	2330      	movle	r3, #48	@ 0x30
 8008bde:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008be2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008be6:	1b92      	subs	r2, r2, r6
 8008be8:	6122      	str	r2, [r4, #16]
 8008bea:	464b      	mov	r3, r9
 8008bec:	4621      	mov	r1, r4
 8008bee:	4640      	mov	r0, r8
 8008bf0:	f8cd a000 	str.w	sl, [sp]
 8008bf4:	aa03      	add	r2, sp, #12
 8008bf6:	f7ff fee3 	bl	80089c0 <_printf_common>
 8008bfa:	3001      	adds	r0, #1
 8008bfc:	d14a      	bne.n	8008c94 <_printf_i+0x1f0>
 8008bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8008c02:	b004      	add	sp, #16
 8008c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c08:	6823      	ldr	r3, [r4, #0]
 8008c0a:	f043 0320 	orr.w	r3, r3, #32
 8008c0e:	6023      	str	r3, [r4, #0]
 8008c10:	2778      	movs	r7, #120	@ 0x78
 8008c12:	4832      	ldr	r0, [pc, #200]	@ (8008cdc <_printf_i+0x238>)
 8008c14:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008c18:	6823      	ldr	r3, [r4, #0]
 8008c1a:	6831      	ldr	r1, [r6, #0]
 8008c1c:	061f      	lsls	r7, r3, #24
 8008c1e:	f851 5b04 	ldr.w	r5, [r1], #4
 8008c22:	d402      	bmi.n	8008c2a <_printf_i+0x186>
 8008c24:	065f      	lsls	r7, r3, #25
 8008c26:	bf48      	it	mi
 8008c28:	b2ad      	uxthmi	r5, r5
 8008c2a:	6031      	str	r1, [r6, #0]
 8008c2c:	07d9      	lsls	r1, r3, #31
 8008c2e:	bf44      	itt	mi
 8008c30:	f043 0320 	orrmi.w	r3, r3, #32
 8008c34:	6023      	strmi	r3, [r4, #0]
 8008c36:	b11d      	cbz	r5, 8008c40 <_printf_i+0x19c>
 8008c38:	2310      	movs	r3, #16
 8008c3a:	e7ad      	b.n	8008b98 <_printf_i+0xf4>
 8008c3c:	4826      	ldr	r0, [pc, #152]	@ (8008cd8 <_printf_i+0x234>)
 8008c3e:	e7e9      	b.n	8008c14 <_printf_i+0x170>
 8008c40:	6823      	ldr	r3, [r4, #0]
 8008c42:	f023 0320 	bic.w	r3, r3, #32
 8008c46:	6023      	str	r3, [r4, #0]
 8008c48:	e7f6      	b.n	8008c38 <_printf_i+0x194>
 8008c4a:	4616      	mov	r6, r2
 8008c4c:	e7bd      	b.n	8008bca <_printf_i+0x126>
 8008c4e:	6833      	ldr	r3, [r6, #0]
 8008c50:	6825      	ldr	r5, [r4, #0]
 8008c52:	1d18      	adds	r0, r3, #4
 8008c54:	6961      	ldr	r1, [r4, #20]
 8008c56:	6030      	str	r0, [r6, #0]
 8008c58:	062e      	lsls	r6, r5, #24
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	d501      	bpl.n	8008c62 <_printf_i+0x1be>
 8008c5e:	6019      	str	r1, [r3, #0]
 8008c60:	e002      	b.n	8008c68 <_printf_i+0x1c4>
 8008c62:	0668      	lsls	r0, r5, #25
 8008c64:	d5fb      	bpl.n	8008c5e <_printf_i+0x1ba>
 8008c66:	8019      	strh	r1, [r3, #0]
 8008c68:	2300      	movs	r3, #0
 8008c6a:	4616      	mov	r6, r2
 8008c6c:	6123      	str	r3, [r4, #16]
 8008c6e:	e7bc      	b.n	8008bea <_printf_i+0x146>
 8008c70:	6833      	ldr	r3, [r6, #0]
 8008c72:	2100      	movs	r1, #0
 8008c74:	1d1a      	adds	r2, r3, #4
 8008c76:	6032      	str	r2, [r6, #0]
 8008c78:	681e      	ldr	r6, [r3, #0]
 8008c7a:	6862      	ldr	r2, [r4, #4]
 8008c7c:	4630      	mov	r0, r6
 8008c7e:	f000 f859 	bl	8008d34 <memchr>
 8008c82:	b108      	cbz	r0, 8008c88 <_printf_i+0x1e4>
 8008c84:	1b80      	subs	r0, r0, r6
 8008c86:	6060      	str	r0, [r4, #4]
 8008c88:	6863      	ldr	r3, [r4, #4]
 8008c8a:	6123      	str	r3, [r4, #16]
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c92:	e7aa      	b.n	8008bea <_printf_i+0x146>
 8008c94:	4632      	mov	r2, r6
 8008c96:	4649      	mov	r1, r9
 8008c98:	4640      	mov	r0, r8
 8008c9a:	6923      	ldr	r3, [r4, #16]
 8008c9c:	47d0      	blx	sl
 8008c9e:	3001      	adds	r0, #1
 8008ca0:	d0ad      	beq.n	8008bfe <_printf_i+0x15a>
 8008ca2:	6823      	ldr	r3, [r4, #0]
 8008ca4:	079b      	lsls	r3, r3, #30
 8008ca6:	d413      	bmi.n	8008cd0 <_printf_i+0x22c>
 8008ca8:	68e0      	ldr	r0, [r4, #12]
 8008caa:	9b03      	ldr	r3, [sp, #12]
 8008cac:	4298      	cmp	r0, r3
 8008cae:	bfb8      	it	lt
 8008cb0:	4618      	movlt	r0, r3
 8008cb2:	e7a6      	b.n	8008c02 <_printf_i+0x15e>
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	4632      	mov	r2, r6
 8008cb8:	4649      	mov	r1, r9
 8008cba:	4640      	mov	r0, r8
 8008cbc:	47d0      	blx	sl
 8008cbe:	3001      	adds	r0, #1
 8008cc0:	d09d      	beq.n	8008bfe <_printf_i+0x15a>
 8008cc2:	3501      	adds	r5, #1
 8008cc4:	68e3      	ldr	r3, [r4, #12]
 8008cc6:	9903      	ldr	r1, [sp, #12]
 8008cc8:	1a5b      	subs	r3, r3, r1
 8008cca:	42ab      	cmp	r3, r5
 8008ccc:	dcf2      	bgt.n	8008cb4 <_printf_i+0x210>
 8008cce:	e7eb      	b.n	8008ca8 <_printf_i+0x204>
 8008cd0:	2500      	movs	r5, #0
 8008cd2:	f104 0619 	add.w	r6, r4, #25
 8008cd6:	e7f5      	b.n	8008cc4 <_printf_i+0x220>
 8008cd8:	080097c3 	.word	0x080097c3
 8008cdc:	080097d4 	.word	0x080097d4

08008ce0 <memmove>:
 8008ce0:	4288      	cmp	r0, r1
 8008ce2:	b510      	push	{r4, lr}
 8008ce4:	eb01 0402 	add.w	r4, r1, r2
 8008ce8:	d902      	bls.n	8008cf0 <memmove+0x10>
 8008cea:	4284      	cmp	r4, r0
 8008cec:	4623      	mov	r3, r4
 8008cee:	d807      	bhi.n	8008d00 <memmove+0x20>
 8008cf0:	1e43      	subs	r3, r0, #1
 8008cf2:	42a1      	cmp	r1, r4
 8008cf4:	d008      	beq.n	8008d08 <memmove+0x28>
 8008cf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008cfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008cfe:	e7f8      	b.n	8008cf2 <memmove+0x12>
 8008d00:	4601      	mov	r1, r0
 8008d02:	4402      	add	r2, r0
 8008d04:	428a      	cmp	r2, r1
 8008d06:	d100      	bne.n	8008d0a <memmove+0x2a>
 8008d08:	bd10      	pop	{r4, pc}
 8008d0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d12:	e7f7      	b.n	8008d04 <memmove+0x24>

08008d14 <_sbrk_r>:
 8008d14:	b538      	push	{r3, r4, r5, lr}
 8008d16:	2300      	movs	r3, #0
 8008d18:	4d05      	ldr	r5, [pc, #20]	@ (8008d30 <_sbrk_r+0x1c>)
 8008d1a:	4604      	mov	r4, r0
 8008d1c:	4608      	mov	r0, r1
 8008d1e:	602b      	str	r3, [r5, #0]
 8008d20:	f7f8 fcde 	bl	80016e0 <_sbrk>
 8008d24:	1c43      	adds	r3, r0, #1
 8008d26:	d102      	bne.n	8008d2e <_sbrk_r+0x1a>
 8008d28:	682b      	ldr	r3, [r5, #0]
 8008d2a:	b103      	cbz	r3, 8008d2e <_sbrk_r+0x1a>
 8008d2c:	6023      	str	r3, [r4, #0]
 8008d2e:	bd38      	pop	{r3, r4, r5, pc}
 8008d30:	20002050 	.word	0x20002050

08008d34 <memchr>:
 8008d34:	4603      	mov	r3, r0
 8008d36:	b510      	push	{r4, lr}
 8008d38:	b2c9      	uxtb	r1, r1
 8008d3a:	4402      	add	r2, r0
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	4618      	mov	r0, r3
 8008d40:	d101      	bne.n	8008d46 <memchr+0x12>
 8008d42:	2000      	movs	r0, #0
 8008d44:	e003      	b.n	8008d4e <memchr+0x1a>
 8008d46:	7804      	ldrb	r4, [r0, #0]
 8008d48:	3301      	adds	r3, #1
 8008d4a:	428c      	cmp	r4, r1
 8008d4c:	d1f6      	bne.n	8008d3c <memchr+0x8>
 8008d4e:	bd10      	pop	{r4, pc}

08008d50 <_realloc_r>:
 8008d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d54:	4607      	mov	r7, r0
 8008d56:	4614      	mov	r4, r2
 8008d58:	460d      	mov	r5, r1
 8008d5a:	b921      	cbnz	r1, 8008d66 <_realloc_r+0x16>
 8008d5c:	4611      	mov	r1, r2
 8008d5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d62:	f7ff bc49 	b.w	80085f8 <_malloc_r>
 8008d66:	b92a      	cbnz	r2, 8008d74 <_realloc_r+0x24>
 8008d68:	f7ff fbdc 	bl	8008524 <_free_r>
 8008d6c:	4625      	mov	r5, r4
 8008d6e:	4628      	mov	r0, r5
 8008d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d74:	f000 f81a 	bl	8008dac <_malloc_usable_size_r>
 8008d78:	4284      	cmp	r4, r0
 8008d7a:	4606      	mov	r6, r0
 8008d7c:	d802      	bhi.n	8008d84 <_realloc_r+0x34>
 8008d7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008d82:	d8f4      	bhi.n	8008d6e <_realloc_r+0x1e>
 8008d84:	4621      	mov	r1, r4
 8008d86:	4638      	mov	r0, r7
 8008d88:	f7ff fc36 	bl	80085f8 <_malloc_r>
 8008d8c:	4680      	mov	r8, r0
 8008d8e:	b908      	cbnz	r0, 8008d94 <_realloc_r+0x44>
 8008d90:	4645      	mov	r5, r8
 8008d92:	e7ec      	b.n	8008d6e <_realloc_r+0x1e>
 8008d94:	42b4      	cmp	r4, r6
 8008d96:	4622      	mov	r2, r4
 8008d98:	4629      	mov	r1, r5
 8008d9a:	bf28      	it	cs
 8008d9c:	4632      	movcs	r2, r6
 8008d9e:	f7ff fbb3 	bl	8008508 <memcpy>
 8008da2:	4629      	mov	r1, r5
 8008da4:	4638      	mov	r0, r7
 8008da6:	f7ff fbbd 	bl	8008524 <_free_r>
 8008daa:	e7f1      	b.n	8008d90 <_realloc_r+0x40>

08008dac <_malloc_usable_size_r>:
 8008dac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008db0:	1f18      	subs	r0, r3, #4
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	bfbc      	itt	lt
 8008db6:	580b      	ldrlt	r3, [r1, r0]
 8008db8:	18c0      	addlt	r0, r0, r3
 8008dba:	4770      	bx	lr

08008dbc <_init>:
 8008dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dbe:	bf00      	nop
 8008dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dc2:	bc08      	pop	{r3}
 8008dc4:	469e      	mov	lr, r3
 8008dc6:	4770      	bx	lr

08008dc8 <_fini>:
 8008dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dca:	bf00      	nop
 8008dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dce:	bc08      	pop	{r3}
 8008dd0:	469e      	mov	lr, r3
 8008dd2:	4770      	bx	lr
