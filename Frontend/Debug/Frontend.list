
Frontend.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008990  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000930  08008aa0  08008aa0  00009aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093d0  080093d0  0000b1a0  2**0
                  CONTENTS
  4 .ARM          00000008  080093d0  080093d0  0000a3d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093d8  080093d8  0000b1a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093d8  080093d8  0000a3d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080093dc  080093dc  0000a3dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001a0  20000000  080093e0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ec0  200001a0  08009580  0000b1a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002060  08009580  0000c060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019431  00000000  00000000  0000b1c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004770  00000000  00000000  000245fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001668  00000000  00000000  00028d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000113a  00000000  00000000  0002a3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c9cb  00000000  00000000  0002b512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c7c0  00000000  00000000  00047edd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009677d  00000000  00000000  0006469d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fae1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006028  00000000  00000000  000fae60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  00100e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001a0 	.word	0x200001a0
 800012c:	00000000 	.word	0x00000000
 8000130:	08008a88 	.word	0x08008a88

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001a4 	.word	0x200001a4
 800014c:	08008a88 	.word	0x08008a88

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <key_check>:

/* Private function prototypes -----------------------------------------------*/
//static void AppsTask(void const * argument);
/* Private functions ---------------------------------------------------------*/
uint8_t key_check(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
	uint8_t read_key = 0;
 8000166:	2300      	movs	r3, #0
 8000168:	71fb      	strb	r3, [r7, #7]

	if(HAL_GPIO_ReadPin(ENTER_SW_GPIO_Port, ENTER_SW_Pin) == GPIO_PIN_RESET){
 800016a:	2101      	movs	r1, #1
 800016c:	4817      	ldr	r0, [pc, #92]	@ (80001cc <key_check+0x6c>)
 800016e:	f003 fc69 	bl	8003a44 <HAL_GPIO_ReadPin>
 8000172:	4603      	mov	r3, r0
 8000174:	2b00      	cmp	r3, #0
 8000176:	d103      	bne.n	8000180 <key_check+0x20>
		//LOG_INF("Enter\r\n");
		read_key |= KEY_ENTER_PIN;
 8000178:	79fb      	ldrb	r3, [r7, #7]
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	71fb      	strb	r3, [r7, #7]
	}
	if(HAL_GPIO_ReadPin(UP_SW_GPIO_Port, UP_SW_Pin) == GPIO_PIN_RESET){
 8000180:	2180      	movs	r1, #128	@ 0x80
 8000182:	4813      	ldr	r0, [pc, #76]	@ (80001d0 <key_check+0x70>)
 8000184:	f003 fc5e 	bl	8003a44 <HAL_GPIO_ReadPin>
 8000188:	4603      	mov	r3, r0
 800018a:	2b00      	cmp	r3, #0
 800018c:	d103      	bne.n	8000196 <key_check+0x36>
		//LOG_INF("UP\r\n");
		read_key |= KEY_UP_PIN;
 800018e:	79fb      	ldrb	r3, [r7, #7]
 8000190:	f043 0302 	orr.w	r3, r3, #2
 8000194:	71fb      	strb	r3, [r7, #7]
	}
	if(HAL_GPIO_ReadPin(DOWN_SW_GPIO_Port, DOWN_SW_Pin) == GPIO_PIN_RESET){
 8000196:	2140      	movs	r1, #64	@ 0x40
 8000198:	480d      	ldr	r0, [pc, #52]	@ (80001d0 <key_check+0x70>)
 800019a:	f003 fc53 	bl	8003a44 <HAL_GPIO_ReadPin>
 800019e:	4603      	mov	r3, r0
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d103      	bne.n	80001ac <key_check+0x4c>
		//LOG_INF("DOWN\r\n");
		read_key |= KEY_DOWN_PIN;
 80001a4:	79fb      	ldrb	r3, [r7, #7]
 80001a6:	f043 0304 	orr.w	r3, r3, #4
 80001aa:	71fb      	strb	r3, [r7, #7]
	}
	if(HAL_GPIO_ReadPin(MODE_SW_GPIO_Port, MODE_SW_Pin) == GPIO_PIN_RESET){
 80001ac:	2102      	movs	r1, #2
 80001ae:	4807      	ldr	r0, [pc, #28]	@ (80001cc <key_check+0x6c>)
 80001b0:	f003 fc48 	bl	8003a44 <HAL_GPIO_ReadPin>
 80001b4:	4603      	mov	r3, r0
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d103      	bne.n	80001c2 <key_check+0x62>
		//LOG_INF("MODE\r\n");
		read_key |= KEY_MODE_PIN;
 80001ba:	79fb      	ldrb	r3, [r7, #7]
 80001bc:	f043 0308 	orr.w	r3, r3, #8
 80001c0:	71fb      	strb	r3, [r7, #7]
	}
	return read_key;
 80001c2:	79fb      	ldrb	r3, [r7, #7]
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	40010c00 	.word	0x40010c00
 80001d0:	40010800 	.word	0x40010800

080001d4 <btn_tmr_callback>:

void btn_tmr_callback(void const *argument)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	if(m_cfg.btn_status == eBTN_PRESS){
 80001dc:	4b12      	ldr	r3, [pc, #72]	@ (8000228 <btn_tmr_callback+0x54>)
 80001de:	789b      	ldrb	r3, [r3, #2]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d104      	bne.n	80001ee <btn_tmr_callback+0x1a>
		m_cfg.key_tick++;
 80001e4:	4b10      	ldr	r3, [pc, #64]	@ (8000228 <btn_tmr_callback+0x54>)
 80001e6:	689b      	ldr	r3, [r3, #8]
 80001e8:	3301      	adds	r3, #1
 80001ea:	4a0f      	ldr	r2, [pc, #60]	@ (8000228 <btn_tmr_callback+0x54>)
 80001ec:	6093      	str	r3, [r2, #8]
	}

	if((m_cfg.setting_mode) &&((m_cfg.sc_id == eSET_TRIGGER_SC) || (m_cfg.sc_id == eOPMODE_SC))){
 80001ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000228 <btn_tmr_callback+0x54>)
 80001f0:	78db      	ldrb	r3, [r3, #3]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d014      	beq.n	8000220 <btn_tmr_callback+0x4c>
 80001f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000228 <btn_tmr_callback+0x54>)
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	2b04      	cmp	r3, #4
 80001fc:	d003      	beq.n	8000206 <btn_tmr_callback+0x32>
 80001fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000228 <btn_tmr_callback+0x54>)
 8000200:	781b      	ldrb	r3, [r3, #0]
 8000202:	2b05      	cmp	r3, #5
 8000204:	d10c      	bne.n	8000220 <btn_tmr_callback+0x4c>
		if(m_cfg.blink_tick++ >= TIMER_50_MSEC){
 8000206:	4b08      	ldr	r3, [pc, #32]	@ (8000228 <btn_tmr_callback+0x54>)
 8000208:	899b      	ldrh	r3, [r3, #12]
 800020a:	1c5a      	adds	r2, r3, #1
 800020c:	b291      	uxth	r1, r2
 800020e:	4a06      	ldr	r2, [pc, #24]	@ (8000228 <btn_tmr_callback+0x54>)
 8000210:	8191      	strh	r1, [r2, #12]
 8000212:	2b31      	cmp	r3, #49	@ 0x31
 8000214:	d904      	bls.n	8000220 <btn_tmr_callback+0x4c>
			screen_blink();
 8000216:	f001 fb6f 	bl	80018f8 <screen_blink>
			m_cfg.blink_tick = 0;
 800021a:	4b03      	ldr	r3, [pc, #12]	@ (8000228 <btn_tmr_callback+0x54>)
 800021c:	2200      	movs	r2, #0
 800021e:	819a      	strh	r2, [r3, #12]
		}
	}
}
 8000220:	bf00      	nop
 8000222:	3708      	adds	r7, #8
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	20000000 	.word	0x20000000

0800022c <set_skip_key>:

void set_skip_key(void)
{
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
	m_cfg.key_tick = 0;
 8000230:	4b06      	ldr	r3, [pc, #24]	@ (800024c <set_skip_key+0x20>)
 8000232:	2200      	movs	r2, #0
 8000234:	609a      	str	r2, [r3, #8]
	m_cfg.btn_status = eBTN_RELEASE;
 8000236:	4b05      	ldr	r3, [pc, #20]	@ (800024c <set_skip_key+0x20>)
 8000238:	2201      	movs	r2, #1
 800023a:	709a      	strb	r2, [r3, #2]
	m_cfg.skip_press = 1;
 800023c:	4b03      	ldr	r3, [pc, #12]	@ (800024c <set_skip_key+0x20>)
 800023e:	2201      	movs	r2, #1
 8000240:	715a      	strb	r2, [r3, #5]
}
 8000242:	bf00      	nop
 8000244:	46bd      	mov	sp, r7
 8000246:	bc80      	pop	{r7}
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	20000000 	.word	0x20000000

08000250 <key_process>:

Key_t key_process(void)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
	uint8_t read_key;
	static Key_t multi_key=eKey_Idle, get_key = eKey_Idle,  old_key = eKey_Idle, release_old = eKey_Idle;
	Key_t press_key = eKey_Idle;
 8000256:	2300      	movs	r3, #0
 8000258:	71fb      	strb	r3, [r7, #7]

	read_key = key_check();
 800025a:	f7ff ff81 	bl	8000160 <key_check>
 800025e:	4603      	mov	r3, r0
 8000260:	71bb      	strb	r3, [r7, #6]
	if(read_key & 0x0F){ // down key
 8000262:	79bb      	ldrb	r3, [r7, #6]
 8000264:	f003 030f 	and.w	r3, r3, #15
 8000268:	2b00      	cmp	r3, #0
 800026a:	f000 808b 	beq.w	8000384 <key_process+0x134>
		if(m_cfg.skip_press){
 800026e:	4b64      	ldr	r3, [pc, #400]	@ (8000400 <key_process+0x1b0>)
 8000270:	795b      	ldrb	r3, [r3, #5]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <key_process+0x2a>
			return press_key;
 8000276:	79fb      	ldrb	r3, [r7, #7]
 8000278:	e0bd      	b.n	80003f6 <key_process+0x1a6>
		}
		m_cfg.btn_status = eBTN_PRESS;
 800027a:	4b61      	ldr	r3, [pc, #388]	@ (8000400 <key_process+0x1b0>)
 800027c:	2200      	movs	r2, #0
 800027e:	709a      	strb	r2, [r3, #2]
		switch(read_key){
 8000280:	79bb      	ldrb	r3, [r7, #6]
 8000282:	3b03      	subs	r3, #3
 8000284:	2b09      	cmp	r3, #9
 8000286:	bf8c      	ite	hi
 8000288:	2201      	movhi	r2, #1
 800028a:	2200      	movls	r2, #0
 800028c:	b2d2      	uxtb	r2, r2
 800028e:	2a00      	cmp	r2, #0
 8000290:	d110      	bne.n	80002b4 <key_process+0x64>
 8000292:	f240 22cd 	movw	r2, #717	@ 0x2cd
 8000296:	fa22 f303 	lsr.w	r3, r2, r3
 800029a:	f003 0301 	and.w	r3, r3, #1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	bf14      	ite	ne
 80002a2:	2301      	movne	r3, #1
 80002a4:	2300      	moveq	r3, #0
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d003      	beq.n	80002b4 <key_process+0x64>
			case KEY_CUR_DOWN_PIN:
			case KEY_FACTORY_PIN:
			case KEY_USER_PIN:
			case KEY_VERSION_PIN:
			case KEY_CHSEL_PIN:
				multi_key = read_key;
 80002ac:	4a55      	ldr	r2, [pc, #340]	@ (8000404 <key_process+0x1b4>)
 80002ae:	79bb      	ldrb	r3, [r7, #6]
 80002b0:	7013      	strb	r3, [r2, #0]
				break;
 80002b2:	e003      	b.n	80002bc <key_process+0x6c>
			default:
				get_key = read_key;
 80002b4:	4a54      	ldr	r2, [pc, #336]	@ (8000408 <key_process+0x1b8>)
 80002b6:	79bb      	ldrb	r3, [r7, #6]
 80002b8:	7013      	strb	r3, [r2, #0]
				break;
 80002ba:	bf00      	nop
		}
		if(old_key != read_key){
 80002bc:	4b53      	ldr	r3, [pc, #332]	@ (800040c <key_process+0x1bc>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	79ba      	ldrb	r2, [r7, #6]
 80002c2:	429a      	cmp	r2, r3
 80002c4:	d00e      	beq.n	80002e4 <key_process+0x94>
			LOG_DBG("tick[%d] %s", m_cfg.key_tick, key_id_2_str(read_key));
 80002c6:	4b4e      	ldr	r3, [pc, #312]	@ (8000400 <key_process+0x1b0>)
 80002c8:	689c      	ldr	r4, [r3, #8]
 80002ca:	79bb      	ldrb	r3, [r7, #6]
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 fc4b 	bl	8000b68 <key_id_2_str>
 80002d2:	4603      	mov	r3, r0
 80002d4:	461a      	mov	r2, r3
 80002d6:	4621      	mov	r1, r4
 80002d8:	484d      	ldr	r0, [pc, #308]	@ (8000410 <key_process+0x1c0>)
 80002da:	f000 fbb5 	bl	8000a48 <Printf>
			old_key = read_key;
 80002de:	4a4b      	ldr	r2, [pc, #300]	@ (800040c <key_process+0x1bc>)
 80002e0:	79bb      	ldrb	r3, [r7, #6]
 80002e2:	7013      	strb	r3, [r2, #0]
		}
		if(get_key == eKey_Mode){
 80002e4:	4b48      	ldr	r3, [pc, #288]	@ (8000408 <key_process+0x1b8>)
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2b08      	cmp	r3, #8
 80002ea:	d139      	bne.n	8000360 <key_process+0x110>
			if((m_cfg.setting_mode) && (m_cfg.key_tick > TIMER_50_MSEC)){
 80002ec:	4b44      	ldr	r3, [pc, #272]	@ (8000400 <key_process+0x1b0>)
 80002ee:	78db      	ldrb	r3, [r3, #3]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d014      	beq.n	800031e <key_process+0xce>
 80002f4:	4b42      	ldr	r3, [pc, #264]	@ (8000400 <key_process+0x1b0>)
 80002f6:	689b      	ldr	r3, [r3, #8]
 80002f8:	2b32      	cmp	r3, #50	@ 0x32
 80002fa:	d910      	bls.n	800031e <key_process+0xce>
				if(multi_key != eKey_Idle){
 80002fc:	4b41      	ldr	r3, [pc, #260]	@ (8000404 <key_process+0x1b4>)
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d002      	beq.n	800030a <key_process+0xba>
					m_cfg.mul_press = 1;
 8000304:	4b3e      	ldr	r3, [pc, #248]	@ (8000400 <key_process+0x1b0>)
 8000306:	2201      	movs	r2, #1
 8000308:	711a      	strb	r2, [r3, #4]
				}
				press_key = multi_key;
 800030a:	4b3e      	ldr	r3, [pc, #248]	@ (8000404 <key_process+0x1b4>)
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	71fb      	strb	r3, [r7, #7]
				multi_key = eKey_Idle;
 8000310:	4b3c      	ldr	r3, [pc, #240]	@ (8000404 <key_process+0x1b4>)
 8000312:	2200      	movs	r2, #0
 8000314:	701a      	strb	r2, [r3, #0]
				m_cfg.key_tick = 0;
 8000316:	4b3a      	ldr	r3, [pc, #232]	@ (8000400 <key_process+0x1b0>)
 8000318:	2200      	movs	r2, #0
 800031a:	609a      	str	r2, [r3, #8]
 800031c:	e01e      	b.n	800035c <key_process+0x10c>
			}else if(m_cfg.key_tick >= TIMER_2_SEC){
 800031e:	4b38      	ldr	r3, [pc, #224]	@ (8000400 <key_process+0x1b0>)
 8000320:	689b      	ldr	r3, [r3, #8]
 8000322:	2bc7      	cmp	r3, #199	@ 0xc7
 8000324:	d918      	bls.n	8000358 <key_process+0x108>
				if(m_cfg.setting_mode == 0){
 8000326:	4b36      	ldr	r3, [pc, #216]	@ (8000400 <key_process+0x1b0>)
 8000328:	78db      	ldrb	r3, [r3, #3]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d108      	bne.n	8000340 <key_process+0xf0>
					press_key = eKey_SetMode;
 800032e:	2310      	movs	r3, #16
 8000330:	71fb      	strb	r3, [r7, #7]
					m_cfg.setting_mode = 1;
 8000332:	4b33      	ldr	r3, [pc, #204]	@ (8000400 <key_process+0x1b0>)
 8000334:	2201      	movs	r2, #1
 8000336:	70da      	strb	r2, [r3, #3]
					m_cfg.blink_tick = 0;
 8000338:	4b31      	ldr	r3, [pc, #196]	@ (8000400 <key_process+0x1b0>)
 800033a:	2200      	movs	r2, #0
 800033c:	819a      	strh	r2, [r3, #12]
 800033e:	e008      	b.n	8000352 <key_process+0x102>
				}else if(m_cfg.remote_ctrl){
 8000340:	4b2f      	ldr	r3, [pc, #188]	@ (8000400 <key_process+0x1b0>)
 8000342:	7b9b      	ldrb	r3, [r3, #14]
 8000344:	2b00      	cmp	r3, #0
 8000346:	d004      	beq.n	8000352 <key_process+0x102>
					m_cfg.remote_ctrl = 0;
 8000348:	4b2d      	ldr	r3, [pc, #180]	@ (8000400 <key_process+0x1b0>)
 800034a:	2200      	movs	r2, #0
 800034c:	739a      	strb	r2, [r3, #14]
					press_key = eKey_ExitRemote;
 800034e:	2320      	movs	r3, #32
 8000350:	71fb      	strb	r3, [r7, #7]
				}
				set_skip_key();
 8000352:	f7ff ff6b 	bl	800022c <set_skip_key>
 8000356:	e001      	b.n	800035c <key_process+0x10c>
			}else{
				return eKey_Idle;
 8000358:	2300      	movs	r3, #0
 800035a:	e04c      	b.n	80003f6 <key_process+0x1a6>
			}

			return press_key;
 800035c:	79fb      	ldrb	r3, [r7, #7]
 800035e:	e04a      	b.n	80003f6 <key_process+0x1a6>
		}

		if((multi_key!=eKey_Idle) && (m_cfg.key_tick > TIMER_5_SEC)){
 8000360:	4b28      	ldr	r3, [pc, #160]	@ (8000404 <key_process+0x1b4>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d045      	beq.n	80003f4 <key_process+0x1a4>
 8000368:	4b25      	ldr	r3, [pc, #148]	@ (8000400 <key_process+0x1b0>)
 800036a:	689b      	ldr	r3, [r3, #8]
 800036c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000370:	d940      	bls.n	80003f4 <key_process+0x1a4>
			press_key = multi_key;
 8000372:	4b24      	ldr	r3, [pc, #144]	@ (8000404 <key_process+0x1b4>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	71fb      	strb	r3, [r7, #7]
			multi_key = eKey_Idle;
 8000378:	4b22      	ldr	r3, [pc, #136]	@ (8000404 <key_process+0x1b4>)
 800037a:	2200      	movs	r2, #0
 800037c:	701a      	strb	r2, [r3, #0]
			set_skip_key();
 800037e:	f7ff ff55 	bl	800022c <set_skip_key>
 8000382:	e037      	b.n	80003f4 <key_process+0x1a4>
		}
	}else{  // up key
		if((get_key != eKey_Idle)&& (release_old != get_key)){
 8000384:	4b20      	ldr	r3, [pc, #128]	@ (8000408 <key_process+0x1b8>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d015      	beq.n	80003b8 <key_process+0x168>
 800038c:	4b21      	ldr	r3, [pc, #132]	@ (8000414 <key_process+0x1c4>)
 800038e:	781a      	ldrb	r2, [r3, #0]
 8000390:	4b1d      	ldr	r3, [pc, #116]	@ (8000408 <key_process+0x1b8>)
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	429a      	cmp	r2, r3
 8000396:	d00f      	beq.n	80003b8 <key_process+0x168>
			LOG_DBG("Release[%s] tick[%d]", key_id_2_str(get_key), m_cfg.key_tick);
 8000398:	4b1b      	ldr	r3, [pc, #108]	@ (8000408 <key_process+0x1b8>)
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	4618      	mov	r0, r3
 800039e:	f000 fbe3 	bl	8000b68 <key_id_2_str>
 80003a2:	4601      	mov	r1, r0
 80003a4:	4b16      	ldr	r3, [pc, #88]	@ (8000400 <key_process+0x1b0>)
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	461a      	mov	r2, r3
 80003aa:	481b      	ldr	r0, [pc, #108]	@ (8000418 <key_process+0x1c8>)
 80003ac:	f000 fb4c 	bl	8000a48 <Printf>
			release_old = get_key;
 80003b0:	4b15      	ldr	r3, [pc, #84]	@ (8000408 <key_process+0x1b8>)
 80003b2:	781a      	ldrb	r2, [r3, #0]
 80003b4:	4b17      	ldr	r3, [pc, #92]	@ (8000414 <key_process+0x1c4>)
 80003b6:	701a      	strb	r2, [r3, #0]
		}
		m_cfg.btn_status = eBTN_RELEASE;
 80003b8:	4b11      	ldr	r3, [pc, #68]	@ (8000400 <key_process+0x1b0>)
 80003ba:	2201      	movs	r2, #1
 80003bc:	709a      	strb	r2, [r3, #2]
		if((m_cfg.key_tick > TIMER_10_MSEC) && (m_cfg.key_tick < TIMER_50_MSEC)){
 80003be:	4b10      	ldr	r3, [pc, #64]	@ (8000400 <key_process+0x1b0>)
 80003c0:	689b      	ldr	r3, [r3, #8]
 80003c2:	2b0a      	cmp	r3, #10
 80003c4:	d90d      	bls.n	80003e2 <key_process+0x192>
 80003c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000400 <key_process+0x1b0>)
 80003c8:	689b      	ldr	r3, [r3, #8]
 80003ca:	2b31      	cmp	r3, #49	@ 0x31
 80003cc:	d809      	bhi.n	80003e2 <key_process+0x192>
			if(m_cfg.mul_press == 0){
 80003ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000400 <key_process+0x1b0>)
 80003d0:	791b      	ldrb	r3, [r3, #4]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d105      	bne.n	80003e2 <key_process+0x192>
				press_key = get_key;
 80003d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000408 <key_process+0x1b8>)
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	71fb      	strb	r3, [r7, #7]
				get_key = eKey_Idle;
 80003dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000408 <key_process+0x1b8>)
 80003de:	2200      	movs	r2, #0
 80003e0:	701a      	strb	r2, [r3, #0]
			}
		}
		m_cfg.skip_press = 0;
 80003e2:	4b07      	ldr	r3, [pc, #28]	@ (8000400 <key_process+0x1b0>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	715a      	strb	r2, [r3, #5]
		m_cfg.key_tick = 0;
 80003e8:	4b05      	ldr	r3, [pc, #20]	@ (8000400 <key_process+0x1b0>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	609a      	str	r2, [r3, #8]
		m_cfg.mul_press = 0;
 80003ee:	4b04      	ldr	r3, [pc, #16]	@ (8000400 <key_process+0x1b0>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	711a      	strb	r2, [r3, #4]
	}

	return press_key;
 80003f4:	79fb      	ldrb	r3, [r7, #7]
}
 80003f6:	4618      	mov	r0, r3
 80003f8:	370c      	adds	r7, #12
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd90      	pop	{r4, r7, pc}
 80003fe:	bf00      	nop
 8000400:	20000000 	.word	0x20000000
 8000404:	200001c0 	.word	0x200001c0
 8000408:	200001c1 	.word	0x200001c1
 800040c:	200001c2 	.word	0x200001c2
 8000410:	08008aa0 	.word	0x08008aa0
 8000414:	200001c3 	.word	0x200001c3
 8000418:	08008ab4 	.word	0x08008ab4

0800041c <run_menu>:

void run_menu(Key_t input_key)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b084      	sub	sp, #16
 8000420:	af00      	add	r7, sp, #0
 8000422:	4603      	mov	r3, r0
 8000424:	71fb      	strb	r3, [r7, #7]
	ScreenID_t next_sc = eMAX_SCREEN_ID;
 8000426:	230f      	movs	r3, #15
 8000428:	73fb      	strb	r3, [r7, #15]

	LOG_DBG("Old SC[%d] Key[%x]", m_cfg.sc_id, input_key);
 800042a:	4b3d      	ldr	r3, [pc, #244]	@ (8000520 <run_menu+0x104>)
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	4619      	mov	r1, r3
 8000430:	79fb      	ldrb	r3, [r7, #7]
 8000432:	461a      	mov	r2, r3
 8000434:	483b      	ldr	r0, [pc, #236]	@ (8000524 <run_menu+0x108>)
 8000436:	f000 fb07 	bl	8000a48 <Printf>
	if(m_cfg.setting_mode == 0){
 800043a:	4b39      	ldr	r3, [pc, #228]	@ (8000520 <run_menu+0x104>)
 800043c:	78db      	ldrb	r3, [r3, #3]
 800043e:	2b00      	cmp	r3, #0
 8000440:	d13e      	bne.n	80004c0 <run_menu+0xa4>
		switch(input_key){
 8000442:	79fb      	ldrb	r3, [r7, #7]
 8000444:	3b01      	subs	r3, #1
 8000446:	2b08      	cmp	r3, #8
 8000448:	d839      	bhi.n	80004be <run_menu+0xa2>
 800044a:	a201      	add	r2, pc, #4	@ (adr r2, 8000450 <run_menu+0x34>)
 800044c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000450:	080004bf 	.word	0x080004bf
 8000454:	080004bf 	.word	0x080004bf
 8000458:	080004af 	.word	0x080004af
 800045c:	080004bf 	.word	0x080004bf
 8000460:	080004b7 	.word	0x080004b7
 8000464:	0800049f 	.word	0x0800049f
 8000468:	080004bf 	.word	0x080004bf
 800046c:	08000475 	.word	0x08000475
 8000470:	080004a7 	.word	0x080004a7
			case eKey_Enter:
				break;
			case eKey_Mode:
				if(++m_cfg.list_idx >= MAX_SCREEN_STEP){
 8000474:	4b2a      	ldr	r3, [pc, #168]	@ (8000520 <run_menu+0x104>)
 8000476:	785b      	ldrb	r3, [r3, #1]
 8000478:	3301      	adds	r3, #1
 800047a:	b2da      	uxtb	r2, r3
 800047c:	4b28      	ldr	r3, [pc, #160]	@ (8000520 <run_menu+0x104>)
 800047e:	705a      	strb	r2, [r3, #1]
 8000480:	4b27      	ldr	r3, [pc, #156]	@ (8000520 <run_menu+0x104>)
 8000482:	785b      	ldrb	r3, [r3, #1]
 8000484:	2b05      	cmp	r3, #5
 8000486:	d902      	bls.n	800048e <run_menu+0x72>
					m_cfg.list_idx = 0;
 8000488:	4b25      	ldr	r3, [pc, #148]	@ (8000520 <run_menu+0x104>)
 800048a:	2200      	movs	r2, #0
 800048c:	705a      	strb	r2, [r3, #1]
				}
				m_cfg.sc_id = screen_list[m_cfg.list_idx];
 800048e:	4b24      	ldr	r3, [pc, #144]	@ (8000520 <run_menu+0x104>)
 8000490:	785b      	ldrb	r3, [r3, #1]
 8000492:	461a      	mov	r2, r3
 8000494:	4b24      	ldr	r3, [pc, #144]	@ (8000528 <run_menu+0x10c>)
 8000496:	5c9a      	ldrb	r2, [r3, r2]
 8000498:	4b21      	ldr	r3, [pc, #132]	@ (8000520 <run_menu+0x104>)
 800049a:	701a      	strb	r2, [r3, #0]
				break;
 800049c:	e010      	b.n	80004c0 <run_menu+0xa4>
			case eKey_ChSel:
				m_cfg.sc_id = eCHSELECT_SC;
 800049e:	4b20      	ldr	r3, [pc, #128]	@ (8000520 <run_menu+0x104>)
 80004a0:	220d      	movs	r2, #13
 80004a2:	701a      	strb	r2, [r3, #0]
				break;
 80004a4:	e00c      	b.n	80004c0 <run_menu+0xa4>
			case eKey_Factory:
				m_cfg.sc_id = eFACTORY_SC;
 80004a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000520 <run_menu+0x104>)
 80004a8:	220c      	movs	r2, #12
 80004aa:	701a      	strb	r2, [r3, #0]
				break;
 80004ac:	e008      	b.n	80004c0 <run_menu+0xa4>
			case eKey_User:
				m_cfg.sc_id = eUSERMODE_SC;
 80004ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000520 <run_menu+0x104>)
 80004b0:	220b      	movs	r2, #11
 80004b2:	701a      	strb	r2, [r3, #0]
				break;
 80004b4:	e004      	b.n	80004c0 <run_menu+0xa4>
			case eKey_Version:
				m_cfg.sc_id = eVERSION_SC;
 80004b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000520 <run_menu+0x104>)
 80004b8:	220e      	movs	r2, #14
 80004ba:	701a      	strb	r2, [r3, #0]
				break;
 80004bc:	e000      	b.n	80004c0 <run_menu+0xa4>
			default:
				break;
 80004be:	bf00      	nop
		}
	}
	LOG_DBG("Change SC[%d]", m_cfg.sc_id);
 80004c0:	4b17      	ldr	r3, [pc, #92]	@ (8000520 <run_menu+0x104>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	4619      	mov	r1, r3
 80004c6:	4819      	ldr	r0, [pc, #100]	@ (800052c <run_menu+0x110>)
 80004c8:	f000 fabe 	bl	8000a48 <Printf>
	next_sc = screen_process(m_cfg.sc_id, input_key);
 80004cc:	4b14      	ldr	r3, [pc, #80]	@ (8000520 <run_menu+0x104>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	79fa      	ldrb	r2, [r7, #7]
 80004d2:	4611      	mov	r1, r2
 80004d4:	4618      	mov	r0, r3
 80004d6:	f001 fa49 	bl	800196c <screen_process>
 80004da:	4603      	mov	r3, r0
 80004dc:	73fb      	strb	r3, [r7, #15]
	if(next_sc < eMAX_SCREEN_ID ){
 80004de:	7bfb      	ldrb	r3, [r7, #15]
 80004e0:	2b0e      	cmp	r3, #14
 80004e2:	d80c      	bhi.n	80004fe <run_menu+0xe2>
		m_cfg.sc_id = next_sc;
 80004e4:	4a0e      	ldr	r2, [pc, #56]	@ (8000520 <run_menu+0x104>)
 80004e6:	7bfb      	ldrb	r3, [r7, #15]
 80004e8:	7013      	strb	r3, [r2, #0]
		next_sc = screen_process(m_cfg.sc_id, input_key);
 80004ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000520 <run_menu+0x104>)
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	79fa      	ldrb	r2, [r7, #7]
 80004f0:	4611      	mov	r1, r2
 80004f2:	4618      	mov	r0, r3
 80004f4:	f001 fa3a 	bl	800196c <screen_process>
 80004f8:	4603      	mov	r3, r0
 80004fa:	73fb      	strb	r3, [r7, #15]
			m_cfg.setting_mode = 0;
			m_cfg.sc_id = eCHANNEL_SC;
			m_cfg.list_idx = 0;
		}
	}
}
 80004fc:	e00c      	b.n	8000518 <run_menu+0xfc>
		if(m_cfg.setting_mode){
 80004fe:	4b08      	ldr	r3, [pc, #32]	@ (8000520 <run_menu+0x104>)
 8000500:	78db      	ldrb	r3, [r3, #3]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d008      	beq.n	8000518 <run_menu+0xfc>
			m_cfg.setting_mode = 0;
 8000506:	4b06      	ldr	r3, [pc, #24]	@ (8000520 <run_menu+0x104>)
 8000508:	2200      	movs	r2, #0
 800050a:	70da      	strb	r2, [r3, #3]
			m_cfg.sc_id = eCHANNEL_SC;
 800050c:	4b04      	ldr	r3, [pc, #16]	@ (8000520 <run_menu+0x104>)
 800050e:	2201      	movs	r2, #1
 8000510:	701a      	strb	r2, [r3, #0]
			m_cfg.list_idx = 0;
 8000512:	4b03      	ldr	r3, [pc, #12]	@ (8000520 <run_menu+0x104>)
 8000514:	2200      	movs	r2, #0
 8000516:	705a      	strb	r2, [r3, #1]
}
 8000518:	bf00      	nop
 800051a:	3710      	adds	r7, #16
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	20000000 	.word	0x20000000
 8000524:	08008ad0 	.word	0x08008ad0
 8000528:	20000010 	.word	0x20000010
 800052c:	08008aec 	.word	0x08008aec

08000530 <AppsTask>:

//void AppsTask(void const * argument)
void AppsTask(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
	Key_t read_key;

	osTimerStart(btn_TimerHandle, (TIMER_10_MSEC));
 8000536:	4b18      	ldr	r3, [pc, #96]	@ (8000598 <AppsTask+0x68>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	210a      	movs	r1, #10
 800053c:	4618      	mov	r0, r3
 800053e:	f005 f875 	bl	800562c <osTimerStart>
	m_cfg.btn_status = eBTN_PRESS;
 8000542:	4b16      	ldr	r3, [pc, #88]	@ (800059c <AppsTask+0x6c>)
 8000544:	2200      	movs	r2, #0
 8000546:	709a      	strb	r2, [r3, #2]
	while(1){
		if(m_cfg.key_tick >= TIMER_3_SEC){
 8000548:	4b14      	ldr	r3, [pc, #80]	@ (800059c <AppsTask+0x6c>)
 800054a:	689b      	ldr	r3, [r3, #8]
 800054c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000550:	d30f      	bcc.n	8000572 <AppsTask+0x42>
			m_cfg.sc_id = eCHANNEL_SC;
 8000552:	4b12      	ldr	r3, [pc, #72]	@ (800059c <AppsTask+0x6c>)
 8000554:	2201      	movs	r2, #1
 8000556:	701a      	strb	r2, [r3, #0]
			screen_process(m_cfg.sc_id, eKey_Idle);
 8000558:	4b10      	ldr	r3, [pc, #64]	@ (800059c <AppsTask+0x6c>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f001 fa04 	bl	800196c <screen_process>
			m_cfg.btn_status = eBTN_RELEASE;
 8000564:	4b0d      	ldr	r3, [pc, #52]	@ (800059c <AppsTask+0x6c>)
 8000566:	2201      	movs	r2, #1
 8000568:	709a      	strb	r2, [r3, #2]
			m_cfg.key_tick = 0;
 800056a:	4b0c      	ldr	r3, [pc, #48]	@ (800059c <AppsTask+0x6c>)
 800056c:	2200      	movs	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
			break;
 8000570:	e003      	b.n	800057a <AppsTask+0x4a>
		}
		osDelay(10);
 8000572:	200a      	movs	r0, #10
 8000574:	f005 f811 	bl	800559a <osDelay>
		if(m_cfg.key_tick >= TIMER_3_SEC){
 8000578:	e7e6      	b.n	8000548 <AppsTask+0x18>
	}

	while(1){
		read_key = key_process();
 800057a:	f7ff fe69 	bl	8000250 <key_process>
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
		if(read_key != eKey_Idle){
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d003      	beq.n	8000590 <AppsTask+0x60>
			run_menu(read_key);
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	4618      	mov	r0, r3
 800058c:	f7ff ff46 	bl	800041c <run_menu>
		}
		osDelay(10);
 8000590:	200a      	movs	r0, #10
 8000592:	f005 f802 	bl	800559a <osDelay>
		read_key = key_process();
 8000596:	e7f0      	b.n	800057a <AppsTask+0x4a>
 8000598:	200001bc 	.word	0x200001bc
 800059c:	20000000 	.word	0x20000000

080005a0 <apps_init>:
	}
}

int apps_init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
	osTimerDef(btn_Timer, btn_tmr_callback);
 80005a6:	4b0e      	ldr	r3, [pc, #56]	@ (80005e0 <apps_init+0x40>)
 80005a8:	603b      	str	r3, [r7, #0]
 80005aa:	2300      	movs	r3, #0
 80005ac:	607b      	str	r3, [r7, #4]
	btn_TimerHandle = osTimerCreate(osTimer(btn_Timer), osTimerPeriodic, NULL);
 80005ae:	463b      	mov	r3, r7
 80005b0:	2200      	movs	r2, #0
 80005b2:	2101      	movs	r1, #1
 80005b4:	4618      	mov	r0, r3
 80005b6:	f005 f805 	bl	80055c4 <osTimerCreate>
 80005ba:	4603      	mov	r3, r0
 80005bc:	4a09      	ldr	r2, [pc, #36]	@ (80005e4 <apps_init+0x44>)
 80005be:	6013      	str	r3, [r2, #0]
	if(btn_TimerHandle == NULL){
 80005c0:	4b08      	ldr	r3, [pc, #32]	@ (80005e4 <apps_init+0x44>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d105      	bne.n	80005d4 <apps_init+0x34>
		LOG_ERR("Front Key timer Create Error");
 80005c8:	4807      	ldr	r0, [pc, #28]	@ (80005e8 <apps_init+0x48>)
 80005ca:	f000 fa3d 	bl	8000a48 <Printf>
		return -1;
 80005ce:	f04f 33ff 	mov.w	r3, #4294967295
 80005d2:	e000      	b.n	80005d6 <apps_init+0x36>
	if(AppsTaskHandle == NULL){
		LOG_ERR("Front Apps Task Create Error");
		return -1;
	}
#endif
	return 0;
 80005d4:	2300      	movs	r3, #0
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	080001d5 	.word	0x080001d5
 80005e4:	200001bc 	.word	0x200001bc
 80005e8:	08008b04 	.word	0x08008b04

080005ec <set_default_config>:

config_t m_flash_cfg, *m_app_config;
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
static void set_default_config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	LOG_INF("Set Default Configuration...");
 80005f0:	4806      	ldr	r0, [pc, #24]	@ (800060c <set_default_config+0x20>)
 80005f2:	f000 fa29 	bl	8000a48 <Printf>
	memcpy(&m_flash_cfg, &def_config, sizeof(config_t));
 80005f6:	4a06      	ldr	r2, [pc, #24]	@ (8000610 <set_default_config+0x24>)
 80005f8:	4b06      	ldr	r3, [pc, #24]	@ (8000614 <set_default_config+0x28>)
 80005fa:	4610      	mov	r0, r2
 80005fc:	4619      	mov	r1, r3
 80005fe:	2347      	movs	r3, #71	@ 0x47
 8000600:	461a      	mov	r2, r3
 8000602:	f007 fde5 	bl	80081d0 <memcpy>
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	08008b28 	.word	0x08008b28
 8000610:	200001c4 	.word	0x200001c4
 8000614:	20000018 	.word	0x20000018

08000618 <app_config_init>:

void app_config_init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	if(app_read_config(&m_flash_cfg)){
 800061c:	4806      	ldr	r0, [pc, #24]	@ (8000638 <app_config_init+0x20>)
 800061e:	f000 f819 	bl	8000654 <app_read_config>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <app_config_init+0x14>
		set_default_config();
 8000628:	f7ff ffe0 	bl	80005ec <set_default_config>
	}
	m_app_config = &m_flash_cfg;
 800062c:	4b03      	ldr	r3, [pc, #12]	@ (800063c <app_config_init+0x24>)
 800062e:	4a02      	ldr	r2, [pc, #8]	@ (8000638 <app_config_init+0x20>)
 8000630:	601a      	str	r2, [r3, #0]
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	200001c4 	.word	0x200001c4
 800063c:	2000020c 	.word	0x2000020c

08000640 <app_save_config>:

void app_save_config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	m_flash_config_write((void *)&m_flash_cfg, sizeof(config_t));
 8000644:	2147      	movs	r1, #71	@ 0x47
 8000646:	4802      	ldr	r0, [pc, #8]	@ (8000650 <app_save_config+0x10>)
 8000648:	f000 f830 	bl	80006ac <m_flash_config_write>
}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	200001c4 	.word	0x200001c4

08000654 <app_read_config>:

uint8_t app_read_config(config_t *pConfig)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	m_flash_config_read((void *)pConfig, sizeof(config_t));
 800065c:	2147      	movs	r1, #71	@ 0x47
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f000 f810 	bl	8000684 <m_flash_config_read>
	if(pConfig->valid != CONFIG_VALID){
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2b19      	cmp	r3, #25
 800066a:	d004      	beq.n	8000676 <app_read_config+0x22>
		LOG_ERR("Configuration is not valid!!!");
 800066c:	4804      	ldr	r0, [pc, #16]	@ (8000680 <app_read_config+0x2c>)
 800066e:	f000 f9eb 	bl	8000a48 <Printf>
		return 1;
 8000672:	2301      	movs	r3, #1
 8000674:	e000      	b.n	8000678 <app_read_config+0x24>
	}
	return 0;
 8000676:	2300      	movs	r3, #0
}
 8000678:	4618      	mov	r0, r3
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	08008b4c 	.word	0x08008b4c

08000684 <m_flash_config_read>:
	HAL_FLASH_Lock();
	return 0;
}

void m_flash_config_read(void *pBuffer, int size)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
	uint32_t address;

	address = FRONT_CONFIG_ADDRESS;
 800068e:	4b06      	ldr	r3, [pc, #24]	@ (80006a8 <m_flash_config_read+0x24>)
 8000690:	60fb      	str	r3, [r7, #12]

	memcpy(pBuffer, (uint32_t *)address, size);
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	683a      	ldr	r2, [r7, #0]
 8000696:	4619      	mov	r1, r3
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f007 fd99 	bl	80081d0 <memcpy>
	//LOG_HEX_DUMP(pBuffer, size, "Dump DB");
}
 800069e:	bf00      	nop
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	0800f800 	.word	0x0800f800

080006ac <m_flash_config_write>:

int m_flash_config_write(void *Data_p, int size)
{
 80006ac:	b5b0      	push	{r4, r5, r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
	unsigned int write_size =0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
	uint32_t Address, write_data, *pData;

	Address = FRONT_CONFIG_ADDRESS;
 80006ba:	4b1c      	ldr	r3, [pc, #112]	@ (800072c <m_flash_config_write+0x80>)
 80006bc:	613b      	str	r3, [r7, #16]

	pData = (uint32_t *)Data_p;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	60fb      	str	r3, [r7, #12]

	HAL_FLASH_Unlock();
 80006c2:	f002 ff49 	bl	8003558 <HAL_FLASH_Unlock>

	while(write_size < size)
 80006c6:	e025      	b.n	8000714 <m_flash_config_write+0x68>
	{
		write_data = (uint32_t)*pData;
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	60bb      	str	r3, [r7, #8]
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, write_data) != HAL_OK)
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	2200      	movs	r2, #0
 80006d2:	461c      	mov	r4, r3
 80006d4:	4615      	mov	r5, r2
 80006d6:	4622      	mov	r2, r4
 80006d8:	462b      	mov	r3, r5
 80006da:	6939      	ldr	r1, [r7, #16]
 80006dc:	2002      	movs	r0, #2
 80006de:	f002 fecb 	bl	8003478 <HAL_FLASH_Program>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d00c      	beq.n	8000702 <m_flash_config_write+0x56>
		{

			LOG_ERR("Flash Write Error [%lx] TotSize[%d] WriteSize[%d]", HAL_FLASH_GetError(), size, write_size);
 80006e8:	f002 ff6c 	bl	80035c4 <HAL_FLASH_GetError>
 80006ec:	4601      	mov	r1, r0
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	683a      	ldr	r2, [r7, #0]
 80006f2:	480f      	ldr	r0, [pc, #60]	@ (8000730 <m_flash_config_write+0x84>)
 80006f4:	f000 f9a8 	bl	8000a48 <Printf>

			HAL_FLASH_Lock();
 80006f8:	f002 ff54 	bl	80035a4 <HAL_FLASH_Lock>
			return -1;
 80006fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000700:	e00f      	b.n	8000722 <m_flash_config_write+0x76>
		}
		pData++;
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	3304      	adds	r3, #4
 8000706:	60fb      	str	r3, [r7, #12]
		write_size+=4;
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	3304      	adds	r3, #4
 800070c:	617b      	str	r3, [r7, #20]
		Address +=4;
 800070e:	693b      	ldr	r3, [r7, #16]
 8000710:	3304      	adds	r3, #4
 8000712:	613b      	str	r3, [r7, #16]
	while(write_size < size)
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	697a      	ldr	r2, [r7, #20]
 8000718:	429a      	cmp	r2, r3
 800071a:	d3d5      	bcc.n	80006c8 <m_flash_config_write+0x1c>
	}

	HAL_FLASH_Lock();
 800071c:	f002 ff42 	bl	80035a4 <HAL_FLASH_Lock>
	return 0;
 8000720:	2300      	movs	r3, #0
}
 8000722:	4618      	mov	r0, r3
 8000724:	3718      	adds	r7, #24
 8000726:	46bd      	mov	sp, r7
 8000728:	bdb0      	pop	{r4, r5, r7, pc}
 800072a:	bf00      	nop
 800072c:	0800f800 	.word	0x0800f800
 8000730:	08008b9c 	.word	0x08008b9c

08000734 <trigger_set>:
		HAL_GPIO_WritePin(trigger[cnt].Port, trigger[cnt].pin, GPIO_PIN_SET);
	}
}

void trigger_set(uint8_t signal)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
	int cnt;
	
	if(signal == 0){
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d116      	bne.n	8000772 <trigger_set+0x3e>
		for(cnt = 0; cnt < MAX_CHANNEL; cnt++){
 8000744:	2300      	movs	r3, #0
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	e00f      	b.n	800076a <trigger_set+0x36>
			HAL_GPIO_WritePin(trigger[cnt].Port, trigger[cnt].pin, GPIO_PIN_SET);
 800074a:	4a1a      	ldr	r2, [pc, #104]	@ (80007b4 <trigger_set+0x80>)
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000752:	4a18      	ldr	r2, [pc, #96]	@ (80007b4 <trigger_set+0x80>)
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	00db      	lsls	r3, r3, #3
 8000758:	4413      	add	r3, r2
 800075a:	889b      	ldrh	r3, [r3, #4]
 800075c:	2201      	movs	r2, #1
 800075e:	4619      	mov	r1, r3
 8000760:	f003 f987 	bl	8003a72 <HAL_GPIO_WritePin>
		for(cnt = 0; cnt < MAX_CHANNEL; cnt++){
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	3301      	adds	r3, #1
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	2b07      	cmp	r3, #7
 800076e:	ddec      	ble.n	800074a <trigger_set+0x16>
		}
		return ;
 8000770:	e01d      	b.n	80007ae <trigger_set+0x7a>
	}
	
	for(cnt = 0; cnt < MAX_CHANNEL; cnt++){
 8000772:	2300      	movs	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	e017      	b.n	80007a8 <trigger_set+0x74>
		if((signal >> cnt) & 0x01){
 8000778:	79fa      	ldrb	r2, [r7, #7]
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	fa42 f303 	asr.w	r3, r2, r3
 8000780:	f003 0301 	and.w	r3, r3, #1
 8000784:	2b00      	cmp	r3, #0
 8000786:	d00c      	beq.n	80007a2 <trigger_set+0x6e>
			HAL_GPIO_WritePin(trigger[cnt].Port, trigger[cnt].pin, GPIO_PIN_RESET);
 8000788:	4a0a      	ldr	r2, [pc, #40]	@ (80007b4 <trigger_set+0x80>)
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000790:	4a08      	ldr	r2, [pc, #32]	@ (80007b4 <trigger_set+0x80>)
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	00db      	lsls	r3, r3, #3
 8000796:	4413      	add	r3, r2
 8000798:	889b      	ldrh	r3, [r3, #4]
 800079a:	2200      	movs	r2, #0
 800079c:	4619      	mov	r1, r3
 800079e:	f003 f968 	bl	8003a72 <HAL_GPIO_WritePin>
	for(cnt = 0; cnt < MAX_CHANNEL; cnt++){
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	3301      	adds	r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	2b07      	cmp	r3, #7
 80007ac:	dde4      	ble.n	8000778 <trigger_set+0x44>
		}
	}
}
 80007ae:	3710      	adds	r7, #16
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000060 	.word	0x20000060

080007b8 <push_buf>:
static serial_cfg_t config;
/* Private function prototypes -----------------------------------------------*/
//static void SerialTask(void const * argument);
/* Private functions ---------------------------------------------------------*/
static void push_buf(uint8_t ch)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
	int pos = (que._head + 1) % MAX_QUEUE_SIZE;
 80007c2:	4b11      	ldr	r3, [pc, #68]	@ (8000808 <push_buf+0x50>)
 80007c4:	881b      	ldrh	r3, [r3, #0]
 80007c6:	3301      	adds	r3, #1
 80007c8:	425a      	negs	r2, r3
 80007ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80007ce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80007d2:	bf58      	it	pl
 80007d4:	4253      	negpl	r3, r2
 80007d6:	60fb      	str	r3, [r7, #12]

	if(pos == que._tail) return ;
 80007d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000808 <push_buf+0x50>)
 80007da:	885b      	ldrh	r3, [r3, #2]
 80007dc:	461a      	mov	r2, r3
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d00b      	beq.n	80007fc <push_buf+0x44>

	que._data[que._head] = ch;
 80007e4:	4b08      	ldr	r3, [pc, #32]	@ (8000808 <push_buf+0x50>)
 80007e6:	881b      	ldrh	r3, [r3, #0]
 80007e8:	461a      	mov	r2, r3
 80007ea:	4b07      	ldr	r3, [pc, #28]	@ (8000808 <push_buf+0x50>)
 80007ec:	4413      	add	r3, r2
 80007ee:	79fa      	ldrb	r2, [r7, #7]
 80007f0:	711a      	strb	r2, [r3, #4]
	que._head = pos;
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	4b04      	ldr	r3, [pc, #16]	@ (8000808 <push_buf+0x50>)
 80007f8:	801a      	strh	r2, [r3, #0]
 80007fa:	e000      	b.n	80007fe <push_buf+0x46>
	if(pos == que._tail) return ;
 80007fc:	bf00      	nop
}
 80007fe:	3714      	adds	r7, #20
 8000800:	46bd      	mov	sp, r7
 8000802:	bc80      	pop	{r7}
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	20000214 	.word	0x20000214

0800080c <pop_buf>:

static uint8_t pop_buf(uint8_t *ch)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	if(que._head == que._tail) return 0;
 8000814:	4b11      	ldr	r3, [pc, #68]	@ (800085c <pop_buf+0x50>)
 8000816:	881a      	ldrh	r2, [r3, #0]
 8000818:	4b10      	ldr	r3, [pc, #64]	@ (800085c <pop_buf+0x50>)
 800081a:	885b      	ldrh	r3, [r3, #2]
 800081c:	429a      	cmp	r2, r3
 800081e:	d101      	bne.n	8000824 <pop_buf+0x18>
 8000820:	2300      	movs	r3, #0
 8000822:	e015      	b.n	8000850 <pop_buf+0x44>

	*ch = que._data[que._tail];
 8000824:	4b0d      	ldr	r3, [pc, #52]	@ (800085c <pop_buf+0x50>)
 8000826:	885b      	ldrh	r3, [r3, #2]
 8000828:	461a      	mov	r2, r3
 800082a:	4b0c      	ldr	r3, [pc, #48]	@ (800085c <pop_buf+0x50>)
 800082c:	4413      	add	r3, r2
 800082e:	791a      	ldrb	r2, [r3, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	701a      	strb	r2, [r3, #0]
	que._tail = (que._tail + 1)%MAX_QUEUE_SIZE;
 8000834:	4b09      	ldr	r3, [pc, #36]	@ (800085c <pop_buf+0x50>)
 8000836:	885b      	ldrh	r3, [r3, #2]
 8000838:	3301      	adds	r3, #1
 800083a:	425a      	negs	r2, r3
 800083c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000840:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8000844:	bf58      	it	pl
 8000846:	4253      	negpl	r3, r2
 8000848:	b29a      	uxth	r2, r3
 800084a:	4b04      	ldr	r3, [pc, #16]	@ (800085c <pop_buf+0x50>)
 800084c:	805a      	strh	r2, [r3, #2]

	return 1;
 800084e:	2301      	movs	r3, #1
}
 8000850:	4618      	mov	r0, r3
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	20000214 	.word	0x20000214

08000860 <find_cmd>:

static uint8_t find_cmd(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
	uint8_t data = 0, len = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	71bb      	strb	r3, [r7, #6]
 800086a:	2300      	movs	r3, #0
 800086c:	71fb      	strb	r3, [r7, #7]

	while(pop_buf(&data)){
 800086e:	e02c      	b.n	80008ca <find_cmd+0x6a>
		if((config.cmd_pos == 0)&&(data != CMD_HEAD)){
 8000870:	4b1c      	ldr	r3, [pc, #112]	@ (80008e4 <find_cmd+0x84>)
 8000872:	895b      	ldrh	r3, [r3, #10]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d102      	bne.n	800087e <find_cmd+0x1e>
 8000878:	79bb      	ldrb	r3, [r7, #6]
 800087a:	2bcf      	cmp	r3, #207	@ 0xcf
 800087c:	d124      	bne.n	80008c8 <find_cmd+0x68>
			continue;
		}
		if(config.cmd_pos < CMD_MAX_SIZE){
 800087e:	4b19      	ldr	r3, [pc, #100]	@ (80008e4 <find_cmd+0x84>)
 8000880:	895b      	ldrh	r3, [r3, #10]
 8000882:	2b09      	cmp	r3, #9
 8000884:	d809      	bhi.n	800089a <find_cmd+0x3a>
			config.cmd_buffer[config.cmd_pos++] = data;
 8000886:	4b17      	ldr	r3, [pc, #92]	@ (80008e4 <find_cmd+0x84>)
 8000888:	895b      	ldrh	r3, [r3, #10]
 800088a:	1c5a      	adds	r2, r3, #1
 800088c:	b291      	uxth	r1, r2
 800088e:	4a15      	ldr	r2, [pc, #84]	@ (80008e4 <find_cmd+0x84>)
 8000890:	8151      	strh	r1, [r2, #10]
 8000892:	461a      	mov	r2, r3
 8000894:	79b9      	ldrb	r1, [r7, #6]
 8000896:	4b13      	ldr	r3, [pc, #76]	@ (80008e4 <find_cmd+0x84>)
 8000898:	5499      	strb	r1, [r3, r2]
		}
		config.cmd_state = ((config.cmd_state<<8)|data);
 800089a:	4b12      	ldr	r3, [pc, #72]	@ (80008e4 <find_cmd+0x84>)
 800089c:	68db      	ldr	r3, [r3, #12]
 800089e:	021b      	lsls	r3, r3, #8
 80008a0:	79ba      	ldrb	r2, [r7, #6]
 80008a2:	4313      	orrs	r3, r2
 80008a4:	4a0f      	ldr	r2, [pc, #60]	@ (80008e4 <find_cmd+0x84>)
 80008a6:	60d3      	str	r3, [r2, #12]
		if(config.cmd_state == CMD_TAIL){
 80008a8:	4b0e      	ldr	r3, [pc, #56]	@ (80008e4 <find_cmd+0x84>)
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d10a      	bne.n	80008ca <find_cmd+0x6a>
			len = config.cmd_pos;
 80008b4:	4b0b      	ldr	r3, [pc, #44]	@ (80008e4 <find_cmd+0x84>)
 80008b6:	895b      	ldrh	r3, [r3, #10]
 80008b8:	71fb      	strb	r3, [r7, #7]
			config.cmd_state = 0;
 80008ba:	4b0a      	ldr	r3, [pc, #40]	@ (80008e4 <find_cmd+0x84>)
 80008bc:	2200      	movs	r2, #0
 80008be:	60da      	str	r2, [r3, #12]
			config.cmd_pos = 0;
 80008c0:	4b08      	ldr	r3, [pc, #32]	@ (80008e4 <find_cmd+0x84>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	815a      	strh	r2, [r3, #10]
 80008c6:	e000      	b.n	80008ca <find_cmd+0x6a>
			continue;
 80008c8:	bf00      	nop
	while(pop_buf(&data)){
 80008ca:	1dbb      	adds	r3, r7, #6
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff ff9d 	bl	800080c <pop_buf>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d1cb      	bne.n	8000870 <find_cmd+0x10>
		}
	}
	return len;
 80008d8:	79fb      	ldrb	r3, [r7, #7]
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000298 	.word	0x20000298

080008e8 <uart_task>:

//static void SerialTask(void const * argument)
void uart_task(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
	uint16_t cmd_size;
	while(1){
		cmd_size = find_cmd();
 80008ee:	f7ff ffb7 	bl	8000860 <find_cmd>
 80008f2:	4603      	mov	r3, r0
 80008f4:	80fb      	strh	r3, [r7, #6]
		if(cmd_size){
 80008f6:	88fb      	ldrh	r3, [r7, #6]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d004      	beq.n	8000906 <uart_task+0x1e>
			//push_event1(EVT_trigger, (uint32_t)config.cmd_buffer[TRIGGER_DATA_IDX]);
			trigger_set(config.cmd_buffer[TRIGGER_DATA_IDX]);
 80008fc:	4b04      	ldr	r3, [pc, #16]	@ (8000910 <uart_task+0x28>)
 80008fe:	789b      	ldrb	r3, [r3, #2]
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff ff17 	bl	8000734 <trigger_set>
		};
		osDelay(10);
 8000906:	200a      	movs	r0, #10
 8000908:	f004 fe47 	bl	800559a <osDelay>
		cmd_size = find_cmd();
 800090c:	e7ef      	b.n	80008ee <uart_task+0x6>
 800090e:	bf00      	nop
 8000910:	20000298 	.word	0x20000298

08000914 <HAL_UART_RxCpltCallback>:
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	/* Console */
	if ( huart->Instance == USART1 ){
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a08      	ldr	r2, [pc, #32]	@ (8000944 <HAL_UART_RxCpltCallback+0x30>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d109      	bne.n	800093a <HAL_UART_RxCpltCallback+0x26>
		push_buf(Front_rx_buf[0]);
 8000926:	4b08      	ldr	r3, [pc, #32]	@ (8000948 <HAL_UART_RxCpltCallback+0x34>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff ff44 	bl	80007b8 <push_buf>
		HAL_UART_Receive_IT(FRONT_UART, &Front_rx_buf[0], 1 );
 8000930:	2201      	movs	r2, #1
 8000932:	4905      	ldr	r1, [pc, #20]	@ (8000948 <HAL_UART_RxCpltCallback+0x34>)
 8000934:	4805      	ldr	r0, [pc, #20]	@ (800094c <HAL_UART_RxCpltCallback+0x38>)
 8000936:	f004 f826 	bl	8004986 <HAL_UART_Receive_IT>
	}
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40013800 	.word	0x40013800
 8000948:	20000210 	.word	0x20000210
 800094c:	20000ae8 	.word	0x20000ae8

08000950 <uart_SendFront>:

int uart_SendFront(uint8_t cmd, uint8_t ch, uint32_t data)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	603a      	str	r2, [r7, #0]
 800095a:	71fb      	strb	r3, [r7, #7]
 800095c:	460b      	mov	r3, r1
 800095e:	71bb      	strb	r3, [r7, #6]
	int error;
	uint8_t send_data[CMD_MAX_SIZE]={0xEF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF};
 8000960:	4a16      	ldr	r2, [pc, #88]	@ (80009bc <uart_SendFront+0x6c>)
 8000962:	f107 0308 	add.w	r3, r7, #8
 8000966:	ca07      	ldmia	r2, {r0, r1, r2}
 8000968:	c303      	stmia	r3!, {r0, r1}
 800096a:	801a      	strh	r2, [r3, #0]

	send_data[2] = cmd;
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	72bb      	strb	r3, [r7, #10]
	send_data[3] = ch;
 8000970:	79bb      	ldrb	r3, [r7, #6]
 8000972:	72fb      	strb	r3, [r7, #11]
	send_data[4] = ((data & 0xFF00) >> 24);
 8000974:	2300      	movs	r3, #0
 8000976:	733b      	strb	r3, [r7, #12]
	send_data[5] = ((data & 0xFF00) >> 16);
 8000978:	2300      	movs	r3, #0
 800097a:	737b      	strb	r3, [r7, #13]
	send_data[6] = ((data & 0xFF00) >> 8);
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	0a1b      	lsrs	r3, r3, #8
 8000980:	b2db      	uxtb	r3, r3
 8000982:	73bb      	strb	r3, [r7, #14]
	send_data[7] = (data & 0x00FF);
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	b2db      	uxtb	r3, r3
 8000988:	73fb      	strb	r3, [r7, #15]

	error  = HAL_UART_Transmit(FRONT_UART, send_data, CMD_MAX_SIZE, 1000);
 800098a:	f107 0108 	add.w	r1, r7, #8
 800098e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000992:	220a      	movs	r2, #10
 8000994:	480a      	ldr	r0, [pc, #40]	@ (80009c0 <uart_SendFront+0x70>)
 8000996:	f003 ff6b 	bl	8004870 <HAL_UART_Transmit>
 800099a:	4603      	mov	r3, r0
 800099c:	617b      	str	r3, [r7, #20]
	if(error != HAL_OK){
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d005      	beq.n	80009b0 <uart_SendFront+0x60>
		LOG_ERR("Send Command Error");
 80009a4:	4807      	ldr	r0, [pc, #28]	@ (80009c4 <uart_SendFront+0x74>)
 80009a6:	f000 f84f 	bl	8000a48 <Printf>
		return -EIO;
 80009aa:	f06f 0304 	mvn.w	r3, #4
 80009ae:	e000      	b.n	80009b2 <uart_SendFront+0x62>
	}

	return 0;
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3718      	adds	r7, #24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	08008bf4 	.word	0x08008bf4
 80009c0:	20000ae8 	.word	0x20000ae8
 80009c4:	08008bd8 	.word	0x08008bd8

080009c8 <uart_init>:

int uart_init(void)
{	
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(FRONT_UART, &Front_rx_buf[0], 1);
 80009cc:	2201      	movs	r2, #1
 80009ce:	4903      	ldr	r1, [pc, #12]	@ (80009dc <uart_init+0x14>)
 80009d0:	4803      	ldr	r0, [pc, #12]	@ (80009e0 <uart_init+0x18>)
 80009d2:	f003 ffd8 	bl	8004986 <HAL_UART_Receive_IT>
//	serialTaskHandle = osThreadCreate(osThread(serialTask), NULL);
//	if(serialTaskHandle == NULL){
//		LOG_ERR("Front Serial Task Create Error");
//		return -1;
//	}
	return 0;
 80009d6:	2300      	movs	r3, #0
}
 80009d8:	4618      	mov	r0, r3
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000210 	.word	0x20000210
 80009e0:	20000ae8 	.word	0x20000ae8

080009e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	4a06      	ldr	r2, [pc, #24]	@ (8000a0c <vApplicationGetIdleTaskMemory+0x28>)
 80009f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	4a05      	ldr	r2, [pc, #20]	@ (8000a10 <vApplicationGetIdleTaskMemory+0x2c>)
 80009fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2280      	movs	r2, #128	@ 0x80
 8000a00:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000a02:	bf00      	nop
 8000a04:	3714      	adds	r7, #20
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr
 8000a0c:	200002a8 	.word	0x200002a8
 8000a10:	20000348 	.word	0x20000348

08000a14 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	4a07      	ldr	r2, [pc, #28]	@ (8000a40 <vApplicationGetTimerTaskMemory+0x2c>)
 8000a24:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	4a06      	ldr	r2, [pc, #24]	@ (8000a44 <vApplicationGetTimerTaskMemory+0x30>)
 8000a2a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a32:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000a34:	bf00      	nop
 8000a36:	3714      	adds	r7, #20
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc80      	pop	{r7}
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	20000548 	.word	0x20000548
 8000a44:	200005e8 	.word	0x200005e8

08000a48 <Printf>:
/* Private variables ---------------------------------------------------------*/
char debug_buf[MAX_PRINT_BUF];
/* Private function prototypes -----------------------------------------------*/

void Printf(const char *fmt, ...)
{
 8000a48:	b40f      	push	{r0, r1, r2, r3}
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	af00      	add	r7, sp, #0
	va_list args = {0};
 8000a50:	2300      	movs	r3, #0
 8000a52:	607b      	str	r3, [r7, #4]

	va_start(args, fmt);
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	607b      	str	r3, [r7, #4]
	vsnprintf(debug_buf, MAX_PRINT_BUF, fmt, args);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	693a      	ldr	r2, [r7, #16]
 8000a5e:	21ff      	movs	r1, #255	@ 0xff
 8000a60:	480a      	ldr	r0, [pc, #40]	@ (8000a8c <Printf+0x44>)
 8000a62:	f007 fb1d 	bl	80080a0 <vsniprintf>
	va_end(args);

	HAL_UART_Transmit(DBG_UART, (uint8_t *)debug_buf, strlen(debug_buf), 0xFFFFFF);
 8000a66:	4809      	ldr	r0, [pc, #36]	@ (8000a8c <Printf+0x44>)
 8000a68:	f7ff fb72 	bl	8000150 <strlen>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	b29a      	uxth	r2, r3
 8000a70:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8000a74:	4905      	ldr	r1, [pc, #20]	@ (8000a8c <Printf+0x44>)
 8000a76:	4806      	ldr	r0, [pc, #24]	@ (8000a90 <Printf+0x48>)
 8000a78:	f003 fefa 	bl	8004870 <HAL_UART_Transmit>
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a86:	b004      	add	sp, #16
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	200009e8 	.word	0x200009e8
 8000a90:	20000b30 	.word	0x20000b30

08000a94 <screen_id_2_str>:
		data_buf += HEXDUMP_BYTES_IN_LINE;
	}
}

const char *screen_id_2_str(int screen_id)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	switch(screen_id)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2b0e      	cmp	r3, #14
 8000aa0:	d83c      	bhi.n	8000b1c <screen_id_2_str+0x88>
 8000aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8000aa8 <screen_id_2_str+0x14>)
 8000aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aa8:	08000ae5 	.word	0x08000ae5
 8000aac:	08000ae9 	.word	0x08000ae9
 8000ab0:	08000aed 	.word	0x08000aed
 8000ab4:	08000af1 	.word	0x08000af1
 8000ab8:	08000af5 	.word	0x08000af5
 8000abc:	08000af9 	.word	0x08000af9
 8000ac0:	08000afd 	.word	0x08000afd
 8000ac4:	08000b01 	.word	0x08000b01
 8000ac8:	08000b05 	.word	0x08000b05
 8000acc:	08000b09 	.word	0x08000b09
 8000ad0:	08000b1d 	.word	0x08000b1d
 8000ad4:	08000b0d 	.word	0x08000b0d
 8000ad8:	08000b11 	.word	0x08000b11
 8000adc:	08000b15 	.word	0x08000b15
 8000ae0:	08000b19 	.word	0x08000b19
	{
		case_str(eMAIN_SC)
 8000ae4:	4b11      	ldr	r3, [pc, #68]	@ (8000b2c <screen_id_2_str+0x98>)
 8000ae6:	e01b      	b.n	8000b20 <screen_id_2_str+0x8c>
		case_str(eCHANNEL_SC)
 8000ae8:	4b11      	ldr	r3, [pc, #68]	@ (8000b30 <screen_id_2_str+0x9c>)
 8000aea:	e019      	b.n	8000b20 <screen_id_2_str+0x8c>
		case_str(eSET_ON_TIME_SC)
 8000aec:	4b11      	ldr	r3, [pc, #68]	@ (8000b34 <screen_id_2_str+0xa0>)
 8000aee:	e017      	b.n	8000b20 <screen_id_2_str+0x8c>
		case_str(eSET_DELAY_TIME_SC)
 8000af0:	4b11      	ldr	r3, [pc, #68]	@ (8000b38 <screen_id_2_str+0xa4>)
 8000af2:	e015      	b.n	8000b20 <screen_id_2_str+0x8c>
		case_str(eSET_TRIGGER_SC)
 8000af4:	4b11      	ldr	r3, [pc, #68]	@ (8000b3c <screen_id_2_str+0xa8>)
 8000af6:	e013      	b.n	8000b20 <screen_id_2_str+0x8c>
		case_str(eOPMODE_SC)
 8000af8:	4b11      	ldr	r3, [pc, #68]	@ (8000b40 <screen_id_2_str+0xac>)
 8000afa:	e011      	b.n	8000b20 <screen_id_2_str+0x8c>
		case_str(eUARTMODE_SC)
 8000afc:	4b11      	ldr	r3, [pc, #68]	@ (8000b44 <screen_id_2_str+0xb0>)
 8000afe:	e00f      	b.n	8000b20 <screen_id_2_str+0x8c>
		case_str(eETH_IP_SC)
 8000b00:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <screen_id_2_str+0xb4>)
 8000b02:	e00d      	b.n	8000b20 <screen_id_2_str+0x8c>
		case_str(eETH_PORT_SC)
 8000b04:	4b11      	ldr	r3, [pc, #68]	@ (8000b4c <screen_id_2_str+0xb8>)
 8000b06:	e00b      	b.n	8000b20 <screen_id_2_str+0x8c>
		case_str(eTESTMODE_SC)
 8000b08:	4b11      	ldr	r3, [pc, #68]	@ (8000b50 <screen_id_2_str+0xbc>)
 8000b0a:	e009      	b.n	8000b20 <screen_id_2_str+0x8c>
		case_str(eUSERMODE_SC)
 8000b0c:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <screen_id_2_str+0xc0>)
 8000b0e:	e007      	b.n	8000b20 <screen_id_2_str+0x8c>
		case_str(eFACTORY_SC)
 8000b10:	4b11      	ldr	r3, [pc, #68]	@ (8000b58 <screen_id_2_str+0xc4>)
 8000b12:	e005      	b.n	8000b20 <screen_id_2_str+0x8c>
		case_str(eCHSELECT_SC)
 8000b14:	4b11      	ldr	r3, [pc, #68]	@ (8000b5c <screen_id_2_str+0xc8>)
 8000b16:	e003      	b.n	8000b20 <screen_id_2_str+0x8c>
		case_str(eVERSION_SC)
 8000b18:	4b11      	ldr	r3, [pc, #68]	@ (8000b60 <screen_id_2_str+0xcc>)
 8000b1a:	e001      	b.n	8000b20 <screen_id_2_str+0x8c>
		default:
			break;
 8000b1c:	bf00      	nop
	}
	return "Unknown Screen";
 8000b1e:	4b11      	ldr	r3, [pc, #68]	@ (8000b64 <screen_id_2_str+0xd0>)
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	08008c10 	.word	0x08008c10
 8000b30:	08008c1c 	.word	0x08008c1c
 8000b34:	08008c28 	.word	0x08008c28
 8000b38:	08008c38 	.word	0x08008c38
 8000b3c:	08008c4c 	.word	0x08008c4c
 8000b40:	08008c5c 	.word	0x08008c5c
 8000b44:	08008c68 	.word	0x08008c68
 8000b48:	08008c78 	.word	0x08008c78
 8000b4c:	08008c84 	.word	0x08008c84
 8000b50:	08008c94 	.word	0x08008c94
 8000b54:	08008ca4 	.word	0x08008ca4
 8000b58:	08008cb4 	.word	0x08008cb4
 8000b5c:	08008cc0 	.word	0x08008cc0
 8000b60:	08008cd0 	.word	0x08008cd0
 8000b64:	08008cdc 	.word	0x08008cdc

08000b68 <key_id_2_str>:

const char *key_id_2_str(int key_id)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	switch(key_id)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2b20      	cmp	r3, #32
 8000b74:	d85e      	bhi.n	8000c34 <key_id_2_str+0xcc>
 8000b76:	a201      	add	r2, pc, #4	@ (adr r2, 8000b7c <key_id_2_str+0x14>)
 8000b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b7c:	08000c01 	.word	0x08000c01
 8000b80:	08000c05 	.word	0x08000c05
 8000b84:	08000c09 	.word	0x08000c09
 8000b88:	08000c0d 	.word	0x08000c0d
 8000b8c:	08000c11 	.word	0x08000c11
 8000b90:	08000c15 	.word	0x08000c15
 8000b94:	08000c19 	.word	0x08000c19
 8000b98:	08000c35 	.word	0x08000c35
 8000b9c:	08000c1d 	.word	0x08000c1d
 8000ba0:	08000c21 	.word	0x08000c21
 8000ba4:	08000c25 	.word	0x08000c25
 8000ba8:	08000c35 	.word	0x08000c35
 8000bac:	08000c29 	.word	0x08000c29
 8000bb0:	08000c35 	.word	0x08000c35
 8000bb4:	08000c35 	.word	0x08000c35
 8000bb8:	08000c35 	.word	0x08000c35
 8000bbc:	08000c2d 	.word	0x08000c2d
 8000bc0:	08000c35 	.word	0x08000c35
 8000bc4:	08000c35 	.word	0x08000c35
 8000bc8:	08000c35 	.word	0x08000c35
 8000bcc:	08000c35 	.word	0x08000c35
 8000bd0:	08000c35 	.word	0x08000c35
 8000bd4:	08000c35 	.word	0x08000c35
 8000bd8:	08000c35 	.word	0x08000c35
 8000bdc:	08000c35 	.word	0x08000c35
 8000be0:	08000c35 	.word	0x08000c35
 8000be4:	08000c35 	.word	0x08000c35
 8000be8:	08000c35 	.word	0x08000c35
 8000bec:	08000c35 	.word	0x08000c35
 8000bf0:	08000c35 	.word	0x08000c35
 8000bf4:	08000c35 	.word	0x08000c35
 8000bf8:	08000c35 	.word	0x08000c35
 8000bfc:	08000c31 	.word	0x08000c31
	{
		case_str(eKey_Idle)
 8000c00:	4b10      	ldr	r3, [pc, #64]	@ (8000c44 <key_id_2_str+0xdc>)
 8000c02:	e019      	b.n	8000c38 <key_id_2_str+0xd0>
		case_str(eKey_Enter)
 8000c04:	4b10      	ldr	r3, [pc, #64]	@ (8000c48 <key_id_2_str+0xe0>)
 8000c06:	e017      	b.n	8000c38 <key_id_2_str+0xd0>
		case_str(eKey_Up)
 8000c08:	4b10      	ldr	r3, [pc, #64]	@ (8000c4c <key_id_2_str+0xe4>)
 8000c0a:	e015      	b.n	8000c38 <key_id_2_str+0xd0>
		case_str(eKey_User)
 8000c0c:	4b10      	ldr	r3, [pc, #64]	@ (8000c50 <key_id_2_str+0xe8>)
 8000c0e:	e013      	b.n	8000c38 <key_id_2_str+0xd0>
		case_str(eKey_Down)
 8000c10:	4b10      	ldr	r3, [pc, #64]	@ (8000c54 <key_id_2_str+0xec>)
 8000c12:	e011      	b.n	8000c38 <key_id_2_str+0xd0>
		case_str(eKey_Version)
 8000c14:	4b10      	ldr	r3, [pc, #64]	@ (8000c58 <key_id_2_str+0xf0>)
 8000c16:	e00f      	b.n	8000c38 <key_id_2_str+0xd0>
		case_str(eKey_ChSel)
 8000c18:	4b10      	ldr	r3, [pc, #64]	@ (8000c5c <key_id_2_str+0xf4>)
 8000c1a:	e00d      	b.n	8000c38 <key_id_2_str+0xd0>
		case_str(eKey_Mode)
 8000c1c:	4b10      	ldr	r3, [pc, #64]	@ (8000c60 <key_id_2_str+0xf8>)
 8000c1e:	e00b      	b.n	8000c38 <key_id_2_str+0xd0>
		case_str(eKey_Factory)
 8000c20:	4b10      	ldr	r3, [pc, #64]	@ (8000c64 <key_id_2_str+0xfc>)
 8000c22:	e009      	b.n	8000c38 <key_id_2_str+0xd0>
		case_str(eKey_CursorUp)
 8000c24:	4b10      	ldr	r3, [pc, #64]	@ (8000c68 <key_id_2_str+0x100>)
 8000c26:	e007      	b.n	8000c38 <key_id_2_str+0xd0>
		case_str(eKey_CursorDown)
 8000c28:	4b10      	ldr	r3, [pc, #64]	@ (8000c6c <key_id_2_str+0x104>)
 8000c2a:	e005      	b.n	8000c38 <key_id_2_str+0xd0>
		case_str(eKey_SetMode)
 8000c2c:	4b10      	ldr	r3, [pc, #64]	@ (8000c70 <key_id_2_str+0x108>)
 8000c2e:	e003      	b.n	8000c38 <key_id_2_str+0xd0>
		case_str(eKey_ExitRemote)
 8000c30:	4b10      	ldr	r3, [pc, #64]	@ (8000c74 <key_id_2_str+0x10c>)
 8000c32:	e001      	b.n	8000c38 <key_id_2_str+0xd0>
		default:
			break;
 8000c34:	bf00      	nop
	}
	return "Unknown key";
 8000c36:	4b10      	ldr	r3, [pc, #64]	@ (8000c78 <key_id_2_str+0x110>)
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc80      	pop	{r7}
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	08008cec 	.word	0x08008cec
 8000c48:	08008cf8 	.word	0x08008cf8
 8000c4c:	08008d04 	.word	0x08008d04
 8000c50:	08008d0c 	.word	0x08008d0c
 8000c54:	08008d18 	.word	0x08008d18
 8000c58:	08008d24 	.word	0x08008d24
 8000c5c:	08008d34 	.word	0x08008d34
 8000c60:	08008d40 	.word	0x08008d40
 8000c64:	08008d4c 	.word	0x08008d4c
 8000c68:	08008d5c 	.word	0x08008d5c
 8000c6c:	08008d6c 	.word	0x08008d6c
 8000c70:	08008d7c 	.word	0x08008d7c
 8000c74:	08008d8c 	.word	0x08008d8c
 8000c78:	08008d9c 	.word	0x08008d9c

08000c7c <get_model>:
    __set_MSP(*(__IO uint32_t *)SYSTEMBOOT_ADDR);
    Jump_To_Application();
}

const char* get_model(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
	return "MSV2008_Front panel";
 8000c80:	4b02      	ldr	r3, [pc, #8]	@ (8000c8c <get_model+0x10>)
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	08008da8 	.word	0x08008da8

08000c90 <banner>:

static void banner(void)
{
 8000c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af04      	add	r7, sp, #16
	LOG_INF("======================================================");
 8000c96:	4877      	ldr	r0, [pc, #476]	@ (8000e74 <banner+0x1e4>)
 8000c98:	f7ff fed6 	bl	8000a48 <Printf>
	LOG_INF("\t YNS Vision LED Controller");
 8000c9c:	4876      	ldr	r0, [pc, #472]	@ (8000e78 <banner+0x1e8>)
 8000c9e:	f7ff fed3 	bl	8000a48 <Printf>
	LOG_INF("\t Build Data	: %04d-%02d-%02d %02d:%02d:%02d", BUILD_YEAR, BUILD_MONTH, BUILD_DAY,
 8000ca2:	2346      	movs	r3, #70	@ 0x46
 8000ca4:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ca6:	d017      	beq.n	8000cd8 <banner+0x48>
 8000ca8:	2332      	movs	r3, #50	@ 0x32
 8000caa:	3b30      	subs	r3, #48	@ 0x30
 8000cac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000cb0:	fb03 f202 	mul.w	r2, r3, r2
 8000cb4:	2330      	movs	r3, #48	@ 0x30
 8000cb6:	3b30      	subs	r3, #48	@ 0x30
 8000cb8:	2164      	movs	r1, #100	@ 0x64
 8000cba:	fb01 f303 	mul.w	r3, r1, r3
 8000cbe:	18d1      	adds	r1, r2, r3
 8000cc0:	2332      	movs	r3, #50	@ 0x32
 8000cc2:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	4413      	add	r3, r2
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	18ca      	adds	r2, r1, r3
 8000cd0:	2335      	movs	r3, #53	@ 0x35
 8000cd2:	3b30      	subs	r3, #48	@ 0x30
 8000cd4:	18d4      	adds	r4, r2, r3
 8000cd6:	e000      	b.n	8000cda <banner+0x4a>
 8000cd8:	2463      	movs	r4, #99	@ 0x63
 8000cda:	2346      	movs	r3, #70	@ 0x46
 8000cdc:	2b3f      	cmp	r3, #63	@ 0x3f
 8000cde:	d067      	beq.n	8000db0 <banner+0x120>
 8000ce0:	2346      	movs	r3, #70	@ 0x46
 8000ce2:	2b4a      	cmp	r3, #74	@ 0x4a
 8000ce4:	d105      	bne.n	8000cf2 <banner+0x62>
 8000ce6:	2365      	movs	r3, #101	@ 0x65
 8000ce8:	2b61      	cmp	r3, #97	@ 0x61
 8000cea:	d102      	bne.n	8000cf2 <banner+0x62>
 8000cec:	2362      	movs	r3, #98	@ 0x62
 8000cee:	2b6e      	cmp	r3, #110	@ 0x6e
 8000cf0:	d05c      	beq.n	8000dac <banner+0x11c>
 8000cf2:	2346      	movs	r3, #70	@ 0x46
 8000cf4:	2b46      	cmp	r3, #70	@ 0x46
 8000cf6:	d056      	beq.n	8000da6 <banner+0x116>
 8000cf8:	2346      	movs	r3, #70	@ 0x46
 8000cfa:	2b4d      	cmp	r3, #77	@ 0x4d
 8000cfc:	d105      	bne.n	8000d0a <banner+0x7a>
 8000cfe:	2365      	movs	r3, #101	@ 0x65
 8000d00:	2b61      	cmp	r3, #97	@ 0x61
 8000d02:	d102      	bne.n	8000d0a <banner+0x7a>
 8000d04:	2362      	movs	r3, #98	@ 0x62
 8000d06:	2b72      	cmp	r3, #114	@ 0x72
 8000d08:	d04b      	beq.n	8000da2 <banner+0x112>
 8000d0a:	2346      	movs	r3, #70	@ 0x46
 8000d0c:	2b41      	cmp	r3, #65	@ 0x41
 8000d0e:	d102      	bne.n	8000d16 <banner+0x86>
 8000d10:	2365      	movs	r3, #101	@ 0x65
 8000d12:	2b70      	cmp	r3, #112	@ 0x70
 8000d14:	d042      	beq.n	8000d9c <banner+0x10c>
 8000d16:	2346      	movs	r3, #70	@ 0x46
 8000d18:	2b4d      	cmp	r3, #77	@ 0x4d
 8000d1a:	d105      	bne.n	8000d28 <banner+0x98>
 8000d1c:	2365      	movs	r3, #101	@ 0x65
 8000d1e:	2b61      	cmp	r3, #97	@ 0x61
 8000d20:	d102      	bne.n	8000d28 <banner+0x98>
 8000d22:	2362      	movs	r3, #98	@ 0x62
 8000d24:	2b79      	cmp	r3, #121	@ 0x79
 8000d26:	d036      	beq.n	8000d96 <banner+0x106>
 8000d28:	2346      	movs	r3, #70	@ 0x46
 8000d2a:	2b4a      	cmp	r3, #74	@ 0x4a
 8000d2c:	d105      	bne.n	8000d3a <banner+0xaa>
 8000d2e:	2365      	movs	r3, #101	@ 0x65
 8000d30:	2b75      	cmp	r3, #117	@ 0x75
 8000d32:	d102      	bne.n	8000d3a <banner+0xaa>
 8000d34:	2362      	movs	r3, #98	@ 0x62
 8000d36:	2b6e      	cmp	r3, #110	@ 0x6e
 8000d38:	d02a      	beq.n	8000d90 <banner+0x100>
 8000d3a:	2346      	movs	r3, #70	@ 0x46
 8000d3c:	2b4a      	cmp	r3, #74	@ 0x4a
 8000d3e:	d105      	bne.n	8000d4c <banner+0xbc>
 8000d40:	2365      	movs	r3, #101	@ 0x65
 8000d42:	2b75      	cmp	r3, #117	@ 0x75
 8000d44:	d102      	bne.n	8000d4c <banner+0xbc>
 8000d46:	2362      	movs	r3, #98	@ 0x62
 8000d48:	2b6c      	cmp	r3, #108	@ 0x6c
 8000d4a:	d01e      	beq.n	8000d8a <banner+0xfa>
 8000d4c:	2346      	movs	r3, #70	@ 0x46
 8000d4e:	2b41      	cmp	r3, #65	@ 0x41
 8000d50:	d102      	bne.n	8000d58 <banner+0xc8>
 8000d52:	2365      	movs	r3, #101	@ 0x65
 8000d54:	2b75      	cmp	r3, #117	@ 0x75
 8000d56:	d015      	beq.n	8000d84 <banner+0xf4>
 8000d58:	2346      	movs	r3, #70	@ 0x46
 8000d5a:	2b53      	cmp	r3, #83	@ 0x53
 8000d5c:	d010      	beq.n	8000d80 <banner+0xf0>
 8000d5e:	2346      	movs	r3, #70	@ 0x46
 8000d60:	2b4f      	cmp	r3, #79	@ 0x4f
 8000d62:	d00b      	beq.n	8000d7c <banner+0xec>
 8000d64:	2346      	movs	r3, #70	@ 0x46
 8000d66:	2b4e      	cmp	r3, #78	@ 0x4e
 8000d68:	d006      	beq.n	8000d78 <banner+0xe8>
 8000d6a:	2346      	movs	r3, #70	@ 0x46
 8000d6c:	2b44      	cmp	r3, #68	@ 0x44
 8000d6e:	d101      	bne.n	8000d74 <banner+0xe4>
 8000d70:	220c      	movs	r2, #12
 8000d72:	e009      	b.n	8000d88 <banner+0xf8>
 8000d74:	2263      	movs	r2, #99	@ 0x63
 8000d76:	e007      	b.n	8000d88 <banner+0xf8>
 8000d78:	220b      	movs	r2, #11
 8000d7a:	e005      	b.n	8000d88 <banner+0xf8>
 8000d7c:	220a      	movs	r2, #10
 8000d7e:	e003      	b.n	8000d88 <banner+0xf8>
 8000d80:	2209      	movs	r2, #9
 8000d82:	e001      	b.n	8000d88 <banner+0xf8>
 8000d84:	2208      	movs	r2, #8
 8000d86:	e002      	b.n	8000d8e <banner+0xfe>
 8000d88:	e001      	b.n	8000d8e <banner+0xfe>
 8000d8a:	2207      	movs	r2, #7
 8000d8c:	e002      	b.n	8000d94 <banner+0x104>
 8000d8e:	e001      	b.n	8000d94 <banner+0x104>
 8000d90:	2206      	movs	r2, #6
 8000d92:	e002      	b.n	8000d9a <banner+0x10a>
 8000d94:	e001      	b.n	8000d9a <banner+0x10a>
 8000d96:	2205      	movs	r2, #5
 8000d98:	e002      	b.n	8000da0 <banner+0x110>
 8000d9a:	e001      	b.n	8000da0 <banner+0x110>
 8000d9c:	2204      	movs	r2, #4
 8000d9e:	e004      	b.n	8000daa <banner+0x11a>
 8000da0:	e003      	b.n	8000daa <banner+0x11a>
 8000da2:	2203      	movs	r2, #3
 8000da4:	e005      	b.n	8000db2 <banner+0x122>
 8000da6:	2202      	movs	r2, #2
 8000da8:	e003      	b.n	8000db2 <banner+0x122>
 8000daa:	e002      	b.n	8000db2 <banner+0x122>
 8000dac:	2201      	movs	r2, #1
 8000dae:	e000      	b.n	8000db2 <banner+0x122>
 8000db0:	2263      	movs	r2, #99	@ 0x63
 8000db2:	2346      	movs	r3, #70	@ 0x46
 8000db4:	2b3f      	cmp	r3, #63	@ 0x3f
 8000db6:	d010      	beq.n	8000dda <banner+0x14a>
 8000db8:	2332      	movs	r3, #50	@ 0x32
 8000dba:	2b2f      	cmp	r3, #47	@ 0x2f
 8000dbc:	d908      	bls.n	8000dd0 <banner+0x140>
 8000dbe:	2332      	movs	r3, #50	@ 0x32
 8000dc0:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	440b      	add	r3, r1
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	4619      	mov	r1, r3
 8000dce:	e000      	b.n	8000dd2 <banner+0x142>
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2330      	movs	r3, #48	@ 0x30
 8000dd4:	3b30      	subs	r3, #48	@ 0x30
 8000dd6:	18cd      	adds	r5, r1, r3
 8000dd8:	e000      	b.n	8000ddc <banner+0x14c>
 8000dda:	2563      	movs	r5, #99	@ 0x63
 8000ddc:	2331      	movs	r3, #49	@ 0x31
 8000dde:	2b3f      	cmp	r3, #63	@ 0x3f
 8000de0:	d00c      	beq.n	8000dfc <banner+0x16c>
 8000de2:	2331      	movs	r3, #49	@ 0x31
 8000de4:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8000de8:	460b      	mov	r3, r1
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	440b      	add	r3, r1
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	4619      	mov	r1, r3
 8000df2:	2336      	movs	r3, #54	@ 0x36
 8000df4:	440b      	add	r3, r1
 8000df6:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8000dfa:	e000      	b.n	8000dfe <banner+0x16e>
 8000dfc:	2163      	movs	r1, #99	@ 0x63
 8000dfe:	2331      	movs	r3, #49	@ 0x31
 8000e00:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e02:	d00c      	beq.n	8000e1e <banner+0x18e>
 8000e04:	2331      	movs	r3, #49	@ 0x31
 8000e06:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	4403      	add	r3, r0
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	4618      	mov	r0, r3
 8000e14:	2339      	movs	r3, #57	@ 0x39
 8000e16:	4403      	add	r3, r0
 8000e18:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 8000e1c:	e000      	b.n	8000e20 <banner+0x190>
 8000e1e:	2063      	movs	r0, #99	@ 0x63
 8000e20:	2331      	movs	r3, #49	@ 0x31
 8000e22:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e24:	d00b      	beq.n	8000e3e <banner+0x1ae>
 8000e26:	2334      	movs	r3, #52	@ 0x34
 8000e28:	f1a3 0630 	sub.w	r6, r3, #48	@ 0x30
 8000e2c:	4633      	mov	r3, r6
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	4433      	add	r3, r6
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	461e      	mov	r6, r3
 8000e36:	2333      	movs	r3, #51	@ 0x33
 8000e38:	4433      	add	r3, r6
 8000e3a:	3b30      	subs	r3, #48	@ 0x30
 8000e3c:	e000      	b.n	8000e40 <banner+0x1b0>
 8000e3e:	2363      	movs	r3, #99	@ 0x63
 8000e40:	9302      	str	r3, [sp, #8]
 8000e42:	9001      	str	r0, [sp, #4]
 8000e44:	9100      	str	r1, [sp, #0]
 8000e46:	462b      	mov	r3, r5
 8000e48:	4621      	mov	r1, r4
 8000e4a:	480c      	ldr	r0, [pc, #48]	@ (8000e7c <banner+0x1ec>)
 8000e4c:	f7ff fdfc 	bl	8000a48 <Printf>
			BUILD_HOUR, BUILD_MIN, BUILD_SEC);
	LOG_INF("\tModel		: %s", get_model());
 8000e50:	f7ff ff14 	bl	8000c7c <get_model>
 8000e54:	4603      	mov	r3, r0
 8000e56:	4619      	mov	r1, r3
 8000e58:	4809      	ldr	r0, [pc, #36]	@ (8000e80 <banner+0x1f0>)
 8000e5a:	f7ff fdf5 	bl	8000a48 <Printf>
	LOG_INF("\tVersion		: %s", _VERSION_);
 8000e5e:	4909      	ldr	r1, [pc, #36]	@ (8000e84 <banner+0x1f4>)
 8000e60:	4809      	ldr	r0, [pc, #36]	@ (8000e88 <banner+0x1f8>)
 8000e62:	f7ff fdf1 	bl	8000a48 <Printf>
	LOG_INF("======================================================");
 8000e66:	4803      	ldr	r0, [pc, #12]	@ (8000e74 <banner+0x1e4>)
 8000e68:	f7ff fdee 	bl	8000a48 <Printf>
}
 8000e6c:	bf00      	nop
 8000e6e:	3704      	adds	r7, #4
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e74:	08008dbc 	.word	0x08008dbc
 8000e78:	08008dfc 	.word	0x08008dfc
 8000e7c:	08008e20 	.word	0x08008e20
 8000e80:	08008e54 	.word	0x08008e54
 8000e84:	08008e68 	.word	0x08008e68
 8000e88:	08008e70 	.word	0x08008e70

08000e8c <Init_device>:

static int Init_device(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	do{
		if(uart_init()){
 8000e90:	f7ff fd9a 	bl	80009c8 <uart_init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d002      	beq.n	8000ea0 <Init_device+0x14>
			return -1;
 8000e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9e:	e00a      	b.n	8000eb6 <Init_device+0x2a>
		}
		app_config_init();
 8000ea0:	f7ff fbba 	bl	8000618 <app_config_init>

		if(apps_init()){
 8000ea4:	f7ff fb7c 	bl	80005a0 <apps_init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d002      	beq.n	8000eb4 <Init_device+0x28>
			return -1;
 8000eae:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb2:	e000      	b.n	8000eb6 <Init_device+0x2a>
		}
	}while(0);

	return 0;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ebc:	b5b0      	push	{r4, r5, r7, lr}
 8000ebe:	b090      	sub	sp, #64	@ 0x40
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec2:	f002 f915 	bl	80030f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec6:	f000 f85f 	bl	8000f88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eca:	f000 f8f9 	bl	80010c0 <MX_GPIO_Init>
#if ENABLE_WATCHDOG
  MX_IWDG_Init();
#endif
  MX_USART1_UART_Init();
 8000ece:	f000 f8a3 	bl	8001018 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000ed2:	f000 f8cb 	bl	800106c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  banner();
 8000ed6:	f7ff fedb 	bl	8000c90 <banner>
  Init_device();
 8000eda:	f7ff ffd7 	bl	8000e8c <Init_device>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of opLedTimer */
  osTimerDef(opLedTimer, opLedCb);
 8000ede:	4b22      	ldr	r3, [pc, #136]	@ (8000f68 <main+0xac>)
 8000ee0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  opLedTimerHandle = osTimerCreate(osTimer(opLedTimer), osTimerPeriodic, NULL);
 8000ee6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000eea:	2200      	movs	r2, #0
 8000eec:	2101      	movs	r1, #1
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f004 fb68 	bl	80055c4 <osTimerCreate>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	4a1d      	ldr	r2, [pc, #116]	@ (8000f6c <main+0xb0>)
 8000ef8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of EventTask */
  osThreadDef(EventTask, eventTask, osPriorityNormal, 0, 512);
 8000efa:	4b1d      	ldr	r3, [pc, #116]	@ (8000f70 <main+0xb4>)
 8000efc:	f107 041c 	add.w	r4, r7, #28
 8000f00:	461d      	mov	r5, r3
 8000f02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f06:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EventTaskHandle = osThreadCreate(osThread(EventTask), NULL);
 8000f0e:	f107 031c 	add.w	r3, r7, #28
 8000f12:	2100      	movs	r1, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f004 faf4 	bl	8005502 <osThreadCreate>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	4a15      	ldr	r2, [pc, #84]	@ (8000f74 <main+0xb8>)
 8000f1e:	6013      	str	r3, [r2, #0]

  /* definition and creation of seriaTask */
  osThreadDef(seriaTask, SerialTask, osPriorityIdle, 0, 128);
 8000f20:	4b15      	ldr	r3, [pc, #84]	@ (8000f78 <main+0xbc>)
 8000f22:	463c      	mov	r4, r7
 8000f24:	461d      	mov	r5, r3
 8000f26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f2a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  seriaTaskHandle = osThreadCreate(osThread(seriaTask), NULL);
 8000f32:	463b      	mov	r3, r7
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f004 fae3 	bl	8005502 <osThreadCreate>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	4a0f      	ldr	r2, [pc, #60]	@ (8000f7c <main+0xc0>)
 8000f40:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  if(EventTaskHandle == NULL){
 8000f42:	4b0c      	ldr	r3, [pc, #48]	@ (8000f74 <main+0xb8>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d102      	bne.n	8000f50 <main+0x94>
	  LOG_ERR("Event Task Create Error!!");
 8000f4a:	480d      	ldr	r0, [pc, #52]	@ (8000f80 <main+0xc4>)
 8000f4c:	f7ff fd7c 	bl	8000a48 <Printf>
  }
  if(seriaTaskHandle == NULL){
 8000f50:	4b0a      	ldr	r3, [pc, #40]	@ (8000f7c <main+0xc0>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d102      	bne.n	8000f5e <main+0xa2>
	  LOG_ERR("Serial Task Create Error!!");
 8000f58:	480a      	ldr	r0, [pc, #40]	@ (8000f84 <main+0xc8>)
 8000f5a:	f7ff fd75 	bl	8000a48 <Printf>
  }
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f5e:	f004 fac9 	bl	80054f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f62:	bf00      	nop
 8000f64:	e7fd      	b.n	8000f62 <main+0xa6>
 8000f66:	bf00      	nop
 8000f68:	08001245 	.word	0x08001245
 8000f6c:	20000b80 	.word	0x20000b80
 8000f70:	08008edc 	.word	0x08008edc
 8000f74:	20000b78 	.word	0x20000b78
 8000f78:	08008f04 	.word	0x08008f04
 8000f7c:	20000b7c 	.word	0x20000b7c
 8000f80:	08008e88 	.word	0x08008e88
 8000f84:	08008eac 	.word	0x08008eac

08000f88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b090      	sub	sp, #64	@ 0x40
 8000f8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8e:	f107 0318 	add.w	r3, r7, #24
 8000f92:	2228      	movs	r2, #40	@ 0x28
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f007 f890 	bl	80080bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
 8000fa8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000faa:	2309      	movs	r3, #9
 8000fac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fb2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fc4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fc8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fca:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd0:	f107 0318 	add.w	r3, r7, #24
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f002 fd7d 	bl	8003ad4 <HAL_RCC_OscConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000fe0:	f000 f952 	bl	8001288 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe4:	230f      	movs	r3, #15
 8000fe6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ff0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ff4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	2102      	movs	r1, #2
 8000ffe:	4618      	mov	r0, r3
 8001000:	f002 ffea 	bl	8003fd8 <HAL_RCC_ClockConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800100a:	f000 f93d 	bl	8001288 <Error_Handler>
  }
}
 800100e:	bf00      	nop
 8001010:	3740      	adds	r7, #64	@ 0x40
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800101c:	4b11      	ldr	r3, [pc, #68]	@ (8001064 <MX_USART1_UART_Init+0x4c>)
 800101e:	4a12      	ldr	r2, [pc, #72]	@ (8001068 <MX_USART1_UART_Init+0x50>)
 8001020:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001022:	4b10      	ldr	r3, [pc, #64]	@ (8001064 <MX_USART1_UART_Init+0x4c>)
 8001024:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001028:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800102a:	4b0e      	ldr	r3, [pc, #56]	@ (8001064 <MX_USART1_UART_Init+0x4c>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001030:	4b0c      	ldr	r3, [pc, #48]	@ (8001064 <MX_USART1_UART_Init+0x4c>)
 8001032:	2200      	movs	r2, #0
 8001034:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001036:	4b0b      	ldr	r3, [pc, #44]	@ (8001064 <MX_USART1_UART_Init+0x4c>)
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800103c:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <MX_USART1_UART_Init+0x4c>)
 800103e:	220c      	movs	r2, #12
 8001040:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001042:	4b08      	ldr	r3, [pc, #32]	@ (8001064 <MX_USART1_UART_Init+0x4c>)
 8001044:	2200      	movs	r2, #0
 8001046:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001048:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <MX_USART1_UART_Init+0x4c>)
 800104a:	2200      	movs	r2, #0
 800104c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800104e:	4805      	ldr	r0, [pc, #20]	@ (8001064 <MX_USART1_UART_Init+0x4c>)
 8001050:	f003 fbbe 	bl	80047d0 <HAL_UART_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800105a:	f000 f915 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000ae8 	.word	0x20000ae8
 8001068:	40013800 	.word	0x40013800

0800106c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001070:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <MX_USART2_UART_Init+0x4c>)
 8001072:	4a12      	ldr	r2, [pc, #72]	@ (80010bc <MX_USART2_UART_Init+0x50>)
 8001074:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001076:	4b10      	ldr	r3, [pc, #64]	@ (80010b8 <MX_USART2_UART_Init+0x4c>)
 8001078:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800107c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800107e:	4b0e      	ldr	r3, [pc, #56]	@ (80010b8 <MX_USART2_UART_Init+0x4c>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001084:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <MX_USART2_UART_Init+0x4c>)
 8001086:	2200      	movs	r2, #0
 8001088:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800108a:	4b0b      	ldr	r3, [pc, #44]	@ (80010b8 <MX_USART2_UART_Init+0x4c>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001090:	4b09      	ldr	r3, [pc, #36]	@ (80010b8 <MX_USART2_UART_Init+0x4c>)
 8001092:	220c      	movs	r2, #12
 8001094:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001096:	4b08      	ldr	r3, [pc, #32]	@ (80010b8 <MX_USART2_UART_Init+0x4c>)
 8001098:	2200      	movs	r2, #0
 800109a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800109c:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <MX_USART2_UART_Init+0x4c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010a2:	4805      	ldr	r0, [pc, #20]	@ (80010b8 <MX_USART2_UART_Init+0x4c>)
 80010a4:	f003 fb94 	bl	80047d0 <HAL_UART_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010ae:	f000 f8eb 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000b30 	.word	0x20000b30
 80010bc:	40004400 	.word	0x40004400

080010c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b088      	sub	sp, #32
 80010c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c6:	f107 0310 	add.w	r3, r7, #16
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
 80010d2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d4:	4b45      	ldr	r3, [pc, #276]	@ (80011ec <MX_GPIO_Init+0x12c>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	4a44      	ldr	r2, [pc, #272]	@ (80011ec <MX_GPIO_Init+0x12c>)
 80010da:	f043 0310 	orr.w	r3, r3, #16
 80010de:	6193      	str	r3, [r2, #24]
 80010e0:	4b42      	ldr	r3, [pc, #264]	@ (80011ec <MX_GPIO_Init+0x12c>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	f003 0310 	and.w	r3, r3, #16
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ec:	4b3f      	ldr	r3, [pc, #252]	@ (80011ec <MX_GPIO_Init+0x12c>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4a3e      	ldr	r2, [pc, #248]	@ (80011ec <MX_GPIO_Init+0x12c>)
 80010f2:	f043 0320 	orr.w	r3, r3, #32
 80010f6:	6193      	str	r3, [r2, #24]
 80010f8:	4b3c      	ldr	r3, [pc, #240]	@ (80011ec <MX_GPIO_Init+0x12c>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f003 0320 	and.w	r3, r3, #32
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001104:	4b39      	ldr	r3, [pc, #228]	@ (80011ec <MX_GPIO_Init+0x12c>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	4a38      	ldr	r2, [pc, #224]	@ (80011ec <MX_GPIO_Init+0x12c>)
 800110a:	f043 0304 	orr.w	r3, r3, #4
 800110e:	6193      	str	r3, [r2, #24]
 8001110:	4b36      	ldr	r3, [pc, #216]	@ (80011ec <MX_GPIO_Init+0x12c>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	f003 0304 	and.w	r3, r3, #4
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800111c:	4b33      	ldr	r3, [pc, #204]	@ (80011ec <MX_GPIO_Init+0x12c>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	4a32      	ldr	r2, [pc, #200]	@ (80011ec <MX_GPIO_Init+0x12c>)
 8001122:	f043 0308 	orr.w	r3, r3, #8
 8001126:	6193      	str	r3, [r2, #24]
 8001128:	4b30      	ldr	r3, [pc, #192]	@ (80011ec <MX_GPIO_Init+0x12c>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	f003 0308 	and.w	r3, r3, #8
 8001130:	603b      	str	r3, [r7, #0]
 8001132:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, GPIO_PIN_RESET);
 8001134:	2200      	movs	r2, #0
 8001136:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800113a:	482d      	ldr	r0, [pc, #180]	@ (80011f0 <MX_GPIO_Init+0x130>)
 800113c:	f002 fc99 	bl	8003a72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin
 8001140:	2200      	movs	r2, #0
 8001142:	f24f 31f8 	movw	r1, #62456	@ 0xf3f8
 8001146:	482b      	ldr	r0, [pc, #172]	@ (80011f4 <MX_GPIO_Init+0x134>)
 8001148:	f002 fc93 	bl	8003a72 <HAL_GPIO_WritePin>
                          |TRG2_Pin|TRG3_Pin|TRG4_Pin|TRG5_Pin
                          |TRG6_Pin|TRG7_Pin|TRG8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_EN_Pin|LCD_RW_Pin|LCD_RS_Pin|TRG1_Pin, GPIO_PIN_RESET);
 800114c:	2200      	movs	r2, #0
 800114e:	f44f 4119 	mov.w	r1, #39168	@ 0x9900
 8001152:	4829      	ldr	r0, [pc, #164]	@ (80011f8 <MX_GPIO_Init+0x138>)
 8001154:	f002 fc8d 	bl	8003a72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : STATUS_LED_Pin */
  GPIO_InitStruct.Pin = STATUS_LED_Pin;
 8001158:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800115c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115e:	2301      	movs	r3, #1
 8001160:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2302      	movs	r3, #2
 8001168:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(STATUS_LED_GPIO_Port, &GPIO_InitStruct);
 800116a:	f107 0310 	add.w	r3, r7, #16
 800116e:	4619      	mov	r1, r3
 8001170:	481f      	ldr	r0, [pc, #124]	@ (80011f0 <MX_GPIO_Init+0x130>)
 8001172:	f002 fae3 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pins : DOWN_SW_Pin UP_SW_Pin */
  GPIO_InitStruct.Pin = DOWN_SW_Pin|UP_SW_Pin;
 8001176:	23c0      	movs	r3, #192	@ 0xc0
 8001178:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001182:	f107 0310 	add.w	r3, r7, #16
 8001186:	4619      	mov	r1, r3
 8001188:	481b      	ldr	r0, [pc, #108]	@ (80011f8 <MX_GPIO_Init+0x138>)
 800118a:	f002 fad7 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pins : ENTER_SW_Pin MODE_SW_Pin */
  GPIO_InitStruct.Pin = ENTER_SW_Pin|MODE_SW_Pin;
 800118e:	2303      	movs	r3, #3
 8001190:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119a:	f107 0310 	add.w	r3, r7, #16
 800119e:	4619      	mov	r1, r3
 80011a0:	4814      	ldr	r0, [pc, #80]	@ (80011f4 <MX_GPIO_Init+0x134>)
 80011a2:	f002 facb 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D7_Pin LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin
                           TRG2_Pin TRG3_Pin TRG4_Pin TRG5_Pin
                           TRG6_Pin TRG7_Pin TRG8_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin
 80011a6:	f24f 33f8 	movw	r3, #62456	@ 0xf3f8
 80011aa:	613b      	str	r3, [r7, #16]
                          |TRG2_Pin|TRG3_Pin|TRG4_Pin|TRG5_Pin
                          |TRG6_Pin|TRG7_Pin|TRG8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ac:	2301      	movs	r3, #1
 80011ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	2302      	movs	r3, #2
 80011b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b8:	f107 0310 	add.w	r3, r7, #16
 80011bc:	4619      	mov	r1, r3
 80011be:	480d      	ldr	r0, [pc, #52]	@ (80011f4 <MX_GPIO_Init+0x134>)
 80011c0:	f002 fabc 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_EN_Pin LCD_RW_Pin LCD_RS_Pin TRG1_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin|LCD_RW_Pin|LCD_RS_Pin|TRG1_Pin;
 80011c4:	f44f 4319 	mov.w	r3, #39168	@ 0x9900
 80011c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ca:	2301      	movs	r3, #1
 80011cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2302      	movs	r3, #2
 80011d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d6:	f107 0310 	add.w	r3, r7, #16
 80011da:	4619      	mov	r1, r3
 80011dc:	4806      	ldr	r0, [pc, #24]	@ (80011f8 <MX_GPIO_Init+0x138>)
 80011de:	f002 faad 	bl	800373c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011e2:	bf00      	nop
 80011e4:	3720      	adds	r7, #32
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40011000 	.word	0x40011000
 80011f4:	40010c00 	.word	0x40010c00
 80011f8:	40010800 	.word	0x40010800

080011fc <eventTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_eventTask */
void eventTask(void const * argument)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	//event_queue_observer_t main_evt;

	LOG_INF("Run Event Task");
 8001204:	4809      	ldr	r0, [pc, #36]	@ (800122c <eventTask+0x30>)
 8001206:	f7ff fc1f 	bl	8000a48 <Printf>

	LCD_INIT();  // for osDelay
 800120a:	f000 fafb 	bl	8001804 <LCD_INIT>

	screen_init();
 800120e:	f000 fb35 	bl	800187c <screen_init>

	osTimerStart(opLedTimerHandle, OP_LED_TIMER_TICK);
 8001212:	4b07      	ldr	r3, [pc, #28]	@ (8001230 <eventTask+0x34>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800121a:	4618      	mov	r0, r3
 800121c:	f004 fa06 	bl	800562c <osTimerStart>
  /* Infinite loop */
	AppsTask();
 8001220:	f7ff f986 	bl	8000530 <AppsTask>
  /* USER CODE END 5 */
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	08008f20 	.word	0x08008f20
 8001230:	20000b80 	.word	0x20000b80

08001234 <SerialTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SerialTask */
void SerialTask(void const * argument)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SerialTask */
  /* Infinite loop */
  for(;;)
  {
	  uart_task();
 800123c:	f7ff fb54 	bl	80008e8 <uart_task>
 8001240:	e7fc      	b.n	800123c <SerialTask+0x8>
	...

08001244 <opLedCb>:
  /* USER CODE END SerialTask */
}

/* opLedCb function */
void opLedCb(void const * argument)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN opLedCb */
	HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 800124c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001250:	4803      	ldr	r0, [pc, #12]	@ (8001260 <opLedCb+0x1c>)
 8001252:	f002 fc26 	bl	8003aa2 <HAL_GPIO_TogglePin>
  /* USER CODE END opLedCb */
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40011000 	.word	0x40011000

08001264 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a04      	ldr	r2, [pc, #16]	@ (8001284 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d101      	bne.n	800127a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001276:	f001 ff51 	bl	800311c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40000800 	.word	0x40000800

08001288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800128c:	b672      	cpsid	i
}
 800128e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001290:	bf00      	nop
 8001292:	e7fd      	b.n	8001290 <Error_Handler+0x8>

08001294 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800129a:	4b18      	ldr	r3, [pc, #96]	@ (80012fc <HAL_MspInit+0x68>)
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	4a17      	ldr	r2, [pc, #92]	@ (80012fc <HAL_MspInit+0x68>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6193      	str	r3, [r2, #24]
 80012a6:	4b15      	ldr	r3, [pc, #84]	@ (80012fc <HAL_MspInit+0x68>)
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b2:	4b12      	ldr	r3, [pc, #72]	@ (80012fc <HAL_MspInit+0x68>)
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	4a11      	ldr	r2, [pc, #68]	@ (80012fc <HAL_MspInit+0x68>)
 80012b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012bc:	61d3      	str	r3, [r2, #28]
 80012be:	4b0f      	ldr	r3, [pc, #60]	@ (80012fc <HAL_MspInit+0x68>)
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012ca:	2200      	movs	r2, #0
 80012cc:	210f      	movs	r1, #15
 80012ce:	f06f 0001 	mvn.w	r0, #1
 80012d2:	f001 fff4 	bl	80032be <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001300 <HAL_MspInit+0x6c>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	4a04      	ldr	r2, [pc, #16]	@ (8001300 <HAL_MspInit+0x6c>)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40021000 	.word	0x40021000
 8001300:	40010000 	.word	0x40010000

08001304 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08a      	sub	sp, #40	@ 0x28
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130c:	f107 0318 	add.w	r3, r7, #24
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a3b      	ldr	r2, [pc, #236]	@ (800140c <HAL_UART_MspInit+0x108>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d13a      	bne.n	800139a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001324:	4b3a      	ldr	r3, [pc, #232]	@ (8001410 <HAL_UART_MspInit+0x10c>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	4a39      	ldr	r2, [pc, #228]	@ (8001410 <HAL_UART_MspInit+0x10c>)
 800132a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800132e:	6193      	str	r3, [r2, #24]
 8001330:	4b37      	ldr	r3, [pc, #220]	@ (8001410 <HAL_UART_MspInit+0x10c>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001338:	617b      	str	r3, [r7, #20]
 800133a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133c:	4b34      	ldr	r3, [pc, #208]	@ (8001410 <HAL_UART_MspInit+0x10c>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	4a33      	ldr	r2, [pc, #204]	@ (8001410 <HAL_UART_MspInit+0x10c>)
 8001342:	f043 0304 	orr.w	r3, r3, #4
 8001346:	6193      	str	r3, [r2, #24]
 8001348:	4b31      	ldr	r3, [pc, #196]	@ (8001410 <HAL_UART_MspInit+0x10c>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	f003 0304 	and.w	r3, r3, #4
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001354:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135a:	2302      	movs	r3, #2
 800135c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800135e:	2303      	movs	r3, #3
 8001360:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 0318 	add.w	r3, r7, #24
 8001366:	4619      	mov	r1, r3
 8001368:	482a      	ldr	r0, [pc, #168]	@ (8001414 <HAL_UART_MspInit+0x110>)
 800136a:	f002 f9e7 	bl	800373c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800136e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001372:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137c:	f107 0318 	add.w	r3, r7, #24
 8001380:	4619      	mov	r1, r3
 8001382:	4824      	ldr	r0, [pc, #144]	@ (8001414 <HAL_UART_MspInit+0x110>)
 8001384:	f002 f9da 	bl	800373c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001388:	2200      	movs	r2, #0
 800138a:	2105      	movs	r1, #5
 800138c:	2025      	movs	r0, #37	@ 0x25
 800138e:	f001 ff96 	bl	80032be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001392:	2025      	movs	r0, #37	@ 0x25
 8001394:	f001 ffaf 	bl	80032f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001398:	e034      	b.n	8001404 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a1e      	ldr	r2, [pc, #120]	@ (8001418 <HAL_UART_MspInit+0x114>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d12f      	bne.n	8001404 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80013a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001410 <HAL_UART_MspInit+0x10c>)
 80013a6:	69db      	ldr	r3, [r3, #28]
 80013a8:	4a19      	ldr	r2, [pc, #100]	@ (8001410 <HAL_UART_MspInit+0x10c>)
 80013aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013ae:	61d3      	str	r3, [r2, #28]
 80013b0:	4b17      	ldr	r3, [pc, #92]	@ (8001410 <HAL_UART_MspInit+0x10c>)
 80013b2:	69db      	ldr	r3, [r3, #28]
 80013b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013bc:	4b14      	ldr	r3, [pc, #80]	@ (8001410 <HAL_UART_MspInit+0x10c>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	4a13      	ldr	r2, [pc, #76]	@ (8001410 <HAL_UART_MspInit+0x10c>)
 80013c2:	f043 0304 	orr.w	r3, r3, #4
 80013c6:	6193      	str	r3, [r2, #24]
 80013c8:	4b11      	ldr	r3, [pc, #68]	@ (8001410 <HAL_UART_MspInit+0x10c>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013d4:	2304      	movs	r3, #4
 80013d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d8:	2302      	movs	r3, #2
 80013da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013dc:	2303      	movs	r3, #3
 80013de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e0:	f107 0318 	add.w	r3, r7, #24
 80013e4:	4619      	mov	r1, r3
 80013e6:	480b      	ldr	r0, [pc, #44]	@ (8001414 <HAL_UART_MspInit+0x110>)
 80013e8:	f002 f9a8 	bl	800373c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013ec:	2308      	movs	r3, #8
 80013ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f0:	2300      	movs	r3, #0
 80013f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f8:	f107 0318 	add.w	r3, r7, #24
 80013fc:	4619      	mov	r1, r3
 80013fe:	4805      	ldr	r0, [pc, #20]	@ (8001414 <HAL_UART_MspInit+0x110>)
 8001400:	f002 f99c 	bl	800373c <HAL_GPIO_Init>
}
 8001404:	bf00      	nop
 8001406:	3728      	adds	r7, #40	@ 0x28
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40013800 	.word	0x40013800
 8001410:	40021000 	.word	0x40021000
 8001414:	40010800 	.word	0x40010800
 8001418:	40004400 	.word	0x40004400

0800141c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08e      	sub	sp, #56	@ 0x38
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001424:	2300      	movs	r3, #0
 8001426:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001428:	2300      	movs	r3, #0
 800142a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 800142c:	2300      	movs	r3, #0
 800142e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001432:	4b34      	ldr	r3, [pc, #208]	@ (8001504 <HAL_InitTick+0xe8>)
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	4a33      	ldr	r2, [pc, #204]	@ (8001504 <HAL_InitTick+0xe8>)
 8001438:	f043 0304 	orr.w	r3, r3, #4
 800143c:	61d3      	str	r3, [r2, #28]
 800143e:	4b31      	ldr	r3, [pc, #196]	@ (8001504 <HAL_InitTick+0xe8>)
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	f003 0304 	and.w	r3, r3, #4
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800144a:	f107 0210 	add.w	r2, r7, #16
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	4611      	mov	r1, r2
 8001454:	4618      	mov	r0, r3
 8001456:	f002 ff2f 	bl	80042b8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800145a:	6a3b      	ldr	r3, [r7, #32]
 800145c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800145e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001460:	2b00      	cmp	r3, #0
 8001462:	d103      	bne.n	800146c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001464:	f002 ff00 	bl	8004268 <HAL_RCC_GetPCLK1Freq>
 8001468:	6378      	str	r0, [r7, #52]	@ 0x34
 800146a:	e004      	b.n	8001476 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800146c:	f002 fefc 	bl	8004268 <HAL_RCC_GetPCLK1Freq>
 8001470:	4603      	mov	r3, r0
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001476:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001478:	4a23      	ldr	r2, [pc, #140]	@ (8001508 <HAL_InitTick+0xec>)
 800147a:	fba2 2303 	umull	r2, r3, r2, r3
 800147e:	0c9b      	lsrs	r3, r3, #18
 8001480:	3b01      	subs	r3, #1
 8001482:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001484:	4b21      	ldr	r3, [pc, #132]	@ (800150c <HAL_InitTick+0xf0>)
 8001486:	4a22      	ldr	r2, [pc, #136]	@ (8001510 <HAL_InitTick+0xf4>)
 8001488:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800148a:	4b20      	ldr	r3, [pc, #128]	@ (800150c <HAL_InitTick+0xf0>)
 800148c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001490:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001492:	4a1e      	ldr	r2, [pc, #120]	@ (800150c <HAL_InitTick+0xf0>)
 8001494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001496:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001498:	4b1c      	ldr	r3, [pc, #112]	@ (800150c <HAL_InitTick+0xf0>)
 800149a:	2200      	movs	r2, #0
 800149c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149e:	4b1b      	ldr	r3, [pc, #108]	@ (800150c <HAL_InitTick+0xf0>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a4:	4b19      	ldr	r3, [pc, #100]	@ (800150c <HAL_InitTick+0xf0>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80014aa:	4818      	ldr	r0, [pc, #96]	@ (800150c <HAL_InitTick+0xf0>)
 80014ac:	f002 ff52 	bl	8004354 <HAL_TIM_Base_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80014b6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d11b      	bne.n	80014f6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80014be:	4813      	ldr	r0, [pc, #76]	@ (800150c <HAL_InitTick+0xf0>)
 80014c0:	f002 ffa0 	bl	8004404 <HAL_TIM_Base_Start_IT>
 80014c4:	4603      	mov	r3, r0
 80014c6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80014ca:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d111      	bne.n	80014f6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80014d2:	201e      	movs	r0, #30
 80014d4:	f001 ff0f 	bl	80032f6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b0f      	cmp	r3, #15
 80014dc:	d808      	bhi.n	80014f0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80014de:	2200      	movs	r2, #0
 80014e0:	6879      	ldr	r1, [r7, #4]
 80014e2:	201e      	movs	r0, #30
 80014e4:	f001 feeb 	bl	80032be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001514 <HAL_InitTick+0xf8>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	e002      	b.n	80014f6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80014f6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3738      	adds	r7, #56	@ 0x38
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40021000 	.word	0x40021000
 8001508:	431bde83 	.word	0x431bde83
 800150c:	20000b84 	.word	0x20000b84
 8001510:	40000800 	.word	0x40000800
 8001514:	20000144 	.word	0x20000144

08001518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800151c:	bf00      	nop
 800151e:	e7fd      	b.n	800151c <NMI_Handler+0x4>

08001520 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001524:	bf00      	nop
 8001526:	e7fd      	b.n	8001524 <HardFault_Handler+0x4>

08001528 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800152c:	bf00      	nop
 800152e:	e7fd      	b.n	800152c <MemManage_Handler+0x4>

08001530 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001534:	bf00      	nop
 8001536:	e7fd      	b.n	8001534 <BusFault_Handler+0x4>

08001538 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800153c:	bf00      	nop
 800153e:	e7fd      	b.n	800153c <UsageFault_Handler+0x4>

08001540 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr

0800154c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001550:	4802      	ldr	r0, [pc, #8]	@ (800155c <TIM4_IRQHandler+0x10>)
 8001552:	f002 ffa9 	bl	80044a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000b84 	.word	0x20000b84

08001560 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001564:	4802      	ldr	r0, [pc, #8]	@ (8001570 <USART1_IRQHandler+0x10>)
 8001566:	f003 fa33 	bl	80049d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000ae8 	.word	0x20000ae8

08001574 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800157c:	4a14      	ldr	r2, [pc, #80]	@ (80015d0 <_sbrk+0x5c>)
 800157e:	4b15      	ldr	r3, [pc, #84]	@ (80015d4 <_sbrk+0x60>)
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001588:	4b13      	ldr	r3, [pc, #76]	@ (80015d8 <_sbrk+0x64>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d102      	bne.n	8001596 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001590:	4b11      	ldr	r3, [pc, #68]	@ (80015d8 <_sbrk+0x64>)
 8001592:	4a12      	ldr	r2, [pc, #72]	@ (80015dc <_sbrk+0x68>)
 8001594:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001596:	4b10      	ldr	r3, [pc, #64]	@ (80015d8 <_sbrk+0x64>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d207      	bcs.n	80015b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a4:	f006 fde8 	bl	8008178 <__errno>
 80015a8:	4603      	mov	r3, r0
 80015aa:	220c      	movs	r2, #12
 80015ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295
 80015b2:	e009      	b.n	80015c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b4:	4b08      	ldr	r3, [pc, #32]	@ (80015d8 <_sbrk+0x64>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ba:	4b07      	ldr	r3, [pc, #28]	@ (80015d8 <_sbrk+0x64>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	4a05      	ldr	r2, [pc, #20]	@ (80015d8 <_sbrk+0x64>)
 80015c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015c6:	68fb      	ldr	r3, [r7, #12]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20005000 	.word	0x20005000
 80015d4:	00000400 	.word	0x00000400
 80015d8:	20000bcc 	.word	0x20000bcc
 80015dc:	20002060 	.word	0x20002060

080015e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr

080015ec <LCD_LOAD_CGRAM>:
	0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, // 4columns ||||
	0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, // 5columns |||||
};
/* Private function prototypes -----------------------------------------------*/
void LCD_LOAD_CGRAM(char tab[], uint8_t charnum)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	70fb      	strb	r3, [r7, #3]
	uint8_t index;
	/* Each character contains 8 definition values*/
	charnum = (uint8_t)(charnum * 8);
 80015f8:	78fb      	ldrb	r3, [r7, #3]
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	70fb      	strb	r3, [r7, #3]
	for (index = 0;index < charnum;index++)
 80015fe:	2300      	movs	r3, #0
 8001600:	73fb      	strb	r3, [r7, #15]
 8001602:	e00c      	b.n	800161e <LCD_LOAD_CGRAM+0x32>
	{
		/* Store values in LCD*/
		LCD_printchar(tab[index]);
 8001604:	7bfb      	ldrb	r3, [r7, #15]
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f000 f883 	bl	8001718 <LCD_printchar>
		osDelay(1);
 8001612:	2001      	movs	r0, #1
 8001614:	f003 ffc1 	bl	800559a <osDelay>
	for (index = 0;index < charnum;index++)
 8001618:	7bfb      	ldrb	r3, [r7, #15]
 800161a:	3301      	adds	r3, #1
 800161c:	73fb      	strb	r3, [r7, #15]
 800161e:	7bfa      	ldrb	r2, [r7, #15]
 8001620:	78fb      	ldrb	r3, [r7, #3]
 8001622:	429a      	cmp	r2, r3
 8001624:	d3ee      	bcc.n	8001604 <LCD_LOAD_CGRAM+0x18>
	}
}
 8001626:	bf00      	nop
 8001628:	bf00      	nop
 800162a:	3710      	adds	r7, #16
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <LCD_ENABLE>:

void LCD_ENABLE (void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 8001634:	2201      	movs	r2, #1
 8001636:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800163a:	4807      	ldr	r0, [pc, #28]	@ (8001658 <LCD_ENABLE+0x28>)
 800163c:	f002 fa19 	bl	8003a72 <HAL_GPIO_WritePin>
	osDelay(2);
 8001640:	2002      	movs	r0, #2
 8001642:	f003 ffaa 	bl	800559a <osDelay>
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8001646:	2200      	movs	r2, #0
 8001648:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800164c:	4802      	ldr	r0, [pc, #8]	@ (8001658 <LCD_ENABLE+0x28>)
 800164e:	f002 fa10 	bl	8003a72 <HAL_GPIO_WritePin>
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40010800 	.word	0x40010800

0800165c <Send4Bit>:

static void Send4Bit(uint8_t data)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_Data_Port, LCD_D4_Pin, (data & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	b2db      	uxtb	r3, r3
 800166e:	461a      	mov	r2, r3
 8001670:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001674:	4816      	ldr	r0, [pc, #88]	@ (80016d0 <Send4Bit+0x74>)
 8001676:	f002 f9fc 	bl	8003a72 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_Data_Port, LCD_D5_Pin, (data & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	105b      	asrs	r3, r3, #1
 800167e:	b2db      	uxtb	r3, r3
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	b2db      	uxtb	r3, r3
 8001686:	461a      	mov	r2, r3
 8001688:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800168c:	4810      	ldr	r0, [pc, #64]	@ (80016d0 <Send4Bit+0x74>)
 800168e:	f002 f9f0 	bl	8003a72 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_Data_Port, LCD_D6_Pin, (data & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	109b      	asrs	r3, r3, #2
 8001696:	b2db      	uxtb	r3, r3
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	b2db      	uxtb	r3, r3
 800169e:	461a      	mov	r2, r3
 80016a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016a4:	480a      	ldr	r0, [pc, #40]	@ (80016d0 <Send4Bit+0x74>)
 80016a6:	f002 f9e4 	bl	8003a72 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_Data_Port, LCD_D7_Pin, (data & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	10db      	asrs	r3, r3, #3
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	461a      	mov	r2, r3
 80016b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016bc:	4804      	ldr	r0, [pc, #16]	@ (80016d0 <Send4Bit+0x74>)
 80016be:	f002 f9d8 	bl	8003a72 <HAL_GPIO_WritePin>
    LCD_ENABLE();
 80016c2:	f7ff ffb5 	bl	8001630 <LCD_ENABLE>
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40010c00 	.word	0x40010c00

080016d4 <LCD_CMD>:

void LCD_CMD(unsigned char cmd_data)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80016de:	2200      	movs	r2, #0
 80016e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016e4:	480b      	ldr	r0, [pc, #44]	@ (8001714 <LCD_CMD+0x40>)
 80016e6:	f002 f9c4 	bl	8003a72 <HAL_GPIO_WritePin>

	Send4Bit((cmd_data>>4)&0x0F);
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	091b      	lsrs	r3, r3, #4
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff ffb3 	bl	800165c <Send4Bit>
	Send4Bit(cmd_data & 0x0F);
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	f003 030f 	and.w	r3, r3, #15
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff ffac 	bl	800165c <Send4Bit>

	osDelay(2);
 8001704:	2002      	movs	r0, #2
 8001706:	f003 ff48 	bl	800559a <osDelay>
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40010800 	.word	0x40010800

08001718 <LCD_printchar>:

void LCD_printchar(unsigned char ascode)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8001722:	2201      	movs	r2, #1
 8001724:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001728:	480b      	ldr	r0, [pc, #44]	@ (8001758 <LCD_printchar+0x40>)
 800172a:	f002 f9a2 	bl	8003a72 <HAL_GPIO_WritePin>

	Send4Bit((ascode>>4)&0x0F);
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	091b      	lsrs	r3, r3, #4
 8001732:	b2db      	uxtb	r3, r3
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ff91 	bl	800165c <Send4Bit>
	Send4Bit(ascode & 0x0F);
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	f003 030f 	and.w	r3, r3, #15
 8001740:	b2db      	uxtb	r3, r3
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff ff8a 	bl	800165c <Send4Bit>

	osDelay(2);
 8001748:	2002      	movs	r0, #2
 800174a:	f003 ff26 	bl	800559a <osDelay>
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40010800 	.word	0x40010800

0800175c <LCD_printstring>:

void LCD_printstring(char *text)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	do
	{
		LCD_printchar(*text++);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	1c5a      	adds	r2, r3, #1
 8001768:	607a      	str	r2, [r7, #4]
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff ffd3 	bl	8001718 <LCD_printchar>
	}while (*text != '\n');
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b0a      	cmp	r3, #10
 8001778:	d1f4      	bne.n	8001764 <LCD_printstring+0x8>
}
 800177a:	bf00      	nop
 800177c:	bf00      	nop
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <LCD_CLEAR_DISPLAY>:

void LCD_CLEAR_DISPLAY(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
	LCD_CMD(0x01);
 8001788:	2001      	movs	r0, #1
 800178a:	f7ff ffa3 	bl	80016d4 <LCD_CMD>
	osDelay(2);
 800178e:	2002      	movs	r0, #2
 8001790:	f003 ff03 	bl	800559a <osDelay>
}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}

08001798 <LCD_DISP_ON>:
{
	LCD_CMD(0x1C);
}

void LCD_DISP_ON(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
	LCD_CMD(0x0C);
 800179c:	200c      	movs	r0, #12
 800179e:	f7ff ff99 	bl	80016d4 <LCD_CMD>
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <LCD_DISP_CURSOR>:
{
	LCD_CMD(0x08);
}

void LCD_DISP_CURSOR(void)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	af00      	add	r7, sp, #0
	LCD_CMD(0x0E); // Cursor ON / Blink ON
 80017aa:	200e      	movs	r0, #14
 80017ac:	f7ff ff92 	bl	80016d4 <LCD_CMD>
}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <LCD_LOCATE>:

void LCD_LOCATE(uint8_t row, uint8_t column)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	460a      	mov	r2, r1
 80017be:	71fb      	strb	r3, [r7, #7]
 80017c0:	4613      	mov	r3, r2
 80017c2:	71bb      	strb	r3, [r7, #6]
	column--;
 80017c4:	79bb      	ldrb	r3, [r7, #6]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	71bb      	strb	r3, [r7, #6]
	switch (row)
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d002      	beq.n	80017d6 <LCD_LOCATE+0x22>
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d009      	beq.n	80017e8 <LCD_LOCATE+0x34>
		case 2:
			/* Set cursor to 2nd row address and add index*/
			LCD_CMD(column |= 0x40 | 0x80);
			break;
		default:
			break;
 80017d4:	e011      	b.n	80017fa <LCD_LOCATE+0x46>
			LCD_CMD(column |= 0x80);
 80017d6:	79bb      	ldrb	r3, [r7, #6]
 80017d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80017dc:	71bb      	strb	r3, [r7, #6]
 80017de:	79bb      	ldrb	r3, [r7, #6]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ff77 	bl	80016d4 <LCD_CMD>
			break;
 80017e6:	e008      	b.n	80017fa <LCD_LOCATE+0x46>
			LCD_CMD(column |= 0x40 | 0x80);
 80017e8:	79bb      	ldrb	r3, [r7, #6]
 80017ea:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80017ee:	71bb      	strb	r3, [r7, #6]
 80017f0:	79bb      	ldrb	r3, [r7, #6]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff ff6e 	bl	80016d4 <LCD_CMD>
			break;
 80017f8:	bf00      	nop
	}
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
	...

08001804 <LCD_INIT>:
		}
	}
}

void LCD_INIT(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 8001808:	2201      	movs	r2, #1
 800180a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800180e:	4819      	ldr	r0, [pc, #100]	@ (8001874 <LCD_INIT+0x70>)
 8001810:	f002 f92f 	bl	8003a72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8001814:	2200      	movs	r2, #0
 8001816:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800181a:	4816      	ldr	r0, [pc, #88]	@ (8001874 <LCD_INIT+0x70>)
 800181c:	f002 f929 	bl	8003a72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 8001820:	2200      	movs	r2, #0
 8001822:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001826:	4813      	ldr	r0, [pc, #76]	@ (8001874 <LCD_INIT+0x70>)
 8001828:	f002 f923 	bl	8003a72 <HAL_GPIO_WritePin>

	//Initialization of HD44780-based LCD (4-bit HW)
	LCD_CMD(0x33);
 800182c:	2033      	movs	r0, #51	@ 0x33
 800182e:	f7ff ff51 	bl	80016d4 <LCD_CMD>
	osDelay(4);
 8001832:	2004      	movs	r0, #4
 8001834:	f003 feb1 	bl	800559a <osDelay>
	LCD_CMD(0x32);
 8001838:	2032      	movs	r0, #50	@ 0x32
 800183a:	f7ff ff4b 	bl	80016d4 <LCD_CMD>
	osDelay(4);
 800183e:	2004      	movs	r0, #4
 8001840:	f003 feab 	bl	800559a <osDelay>
	//Function Set 4-bit mode DL=0 N=1(2Lie 5*8 dots) F=0(Don't care)
	LCD_CMD(0x28);
 8001844:	2028      	movs	r0, #40	@ 0x28
 8001846:	f7ff ff45 	bl	80016d4 <LCD_CMD>
	//Display On/Off Control curso x, blink x
	LCD_CMD(0x0C);
 800184a:	200c      	movs	r0, #12
 800184c:	f7ff ff42 	bl	80016d4 <LCD_CMD>

	//Entry mode set, Increment, display not shift
	LCD_CMD(0x06);
 8001850:	2006      	movs	r0, #6
 8001852:	f7ff ff3f 	bl	80016d4 <LCD_CMD>

	LCD_CLEAR_DISPLAY();
 8001856:	f7ff ff95 	bl	8001784 <LCD_CLEAR_DISPLAY>
	//Minimum delay to wait before driving LCD module
	osDelay(200);
 800185a:	20c8      	movs	r0, #200	@ 0xc8
 800185c:	f003 fe9d 	bl	800559a <osDelay>

	LCD_CMD(CGRAM_address_start);
 8001860:	2040      	movs	r0, #64	@ 0x40
 8001862:	f7ff ff37 	bl	80016d4 <LCD_CMD>
	LCD_LOAD_CGRAM(Custom, 6);
 8001866:	2106      	movs	r1, #6
 8001868:	4803      	ldr	r0, [pc, #12]	@ (8001878 <LCD_INIT+0x74>)
 800186a:	f7ff febf 	bl	80015ec <LCD_LOAD_CGRAM>
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40010800 	.word	0x40010800
 8001878:	200000a4 	.word	0x200000a4

0800187c <screen_init>:
};

config_t load_cfg;
/* Private functions ---------------------------------------------------------*/
void screen_init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
	char line_buf[LCD_PRINT_MAX];

	memset(&m_cfg, 0, sizeof(m_cfg));
 8001882:	224a      	movs	r2, #74	@ 0x4a
 8001884:	2100      	movs	r1, #0
 8001886:	4815      	ldr	r0, [pc, #84]	@ (80018dc <screen_init+0x60>)
 8001888:	f006 fc18 	bl	80080bc <memset>
	memcpy(&load_cfg, m_app_config, sizeof(config_t));
 800188c:	4b14      	ldr	r3, [pc, #80]	@ (80018e0 <screen_init+0x64>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a14      	ldr	r2, [pc, #80]	@ (80018e4 <screen_init+0x68>)
 8001892:	4610      	mov	r0, r2
 8001894:	4619      	mov	r1, r3
 8001896:	2347      	movs	r3, #71	@ 0x47
 8001898:	461a      	mov	r2, r3
 800189a:	f006 fc99 	bl	80081d0 <memcpy>

	sprintf(line_buf,"%s\n", load_cfg.company);
 800189e:	1d3b      	adds	r3, r7, #4
 80018a0:	4a11      	ldr	r2, [pc, #68]	@ (80018e8 <screen_init+0x6c>)
 80018a2:	4912      	ldr	r1, [pc, #72]	@ (80018ec <screen_init+0x70>)
 80018a4:	4618      	mov	r0, r3
 80018a6:	f006 fbaf 	bl	8008008 <siprintf>
	LOG_DBG("Model : %s", line_buf);
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	4619      	mov	r1, r3
 80018ae:	4810      	ldr	r0, [pc, #64]	@ (80018f0 <screen_init+0x74>)
 80018b0:	f7ff f8ca 	bl	8000a48 <Printf>
	LCD_LOCATE(1,2);
 80018b4:	2102      	movs	r1, #2
 80018b6:	2001      	movs	r0, #1
 80018b8:	f7ff ff7c 	bl	80017b4 <LCD_LOCATE>
	LCD_printstring(line_buf);
 80018bc:	1d3b      	adds	r3, r7, #4
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff ff4c 	bl	800175c <LCD_printstring>
	LCD_LOCATE(2,1);
 80018c4:	2101      	movs	r1, #1
 80018c6:	2002      	movs	r0, #2
 80018c8:	f7ff ff74 	bl	80017b4 <LCD_LOCATE>
	LCD_printstring("StrobeController\n");
 80018cc:	4809      	ldr	r0, [pc, #36]	@ (80018f4 <screen_init+0x78>)
 80018ce:	f7ff ff45 	bl	800175c <LCD_printstring>
}
 80018d2:	bf00      	nop
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000bd0 	.word	0x20000bd0
 80018e0:	2000020c 	.word	0x2000020c
 80018e4:	20000c1c 	.word	0x20000c1c
 80018e8:	20000c51 	.word	0x20000c51
 80018ec:	08008f38 	.word	0x08008f38
 80018f0:	08008f3c 	.word	0x08008f3c
 80018f4:	08008f50 	.word	0x08008f50

080018f8 <screen_blink>:

void screen_blink(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
	if(m_cfg.enable_blink){
 80018fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001938 <screen_blink+0x40>)
 80018fe:	7a9b      	ldrb	r3, [r3, #10]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d016      	beq.n	8001932 <screen_blink+0x3a>
		LCD_LOCATE(m_cfg.blink_row,1);
 8001904:	4b0c      	ldr	r3, [pc, #48]	@ (8001938 <screen_blink+0x40>)
 8001906:	7b1b      	ldrb	r3, [r3, #12]
 8001908:	2101      	movs	r1, #1
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff ff52 	bl	80017b4 <LCD_LOCATE>
		m_cfg.blink = ~m_cfg.blink;
 8001910:	4b09      	ldr	r3, [pc, #36]	@ (8001938 <screen_blink+0x40>)
 8001912:	7adb      	ldrb	r3, [r3, #11]
 8001914:	43db      	mvns	r3, r3
 8001916:	b2da      	uxtb	r2, r3
 8001918:	4b07      	ldr	r3, [pc, #28]	@ (8001938 <screen_blink+0x40>)
 800191a:	72da      	strb	r2, [r3, #11]
		if(m_cfg.blink){
 800191c:	4b06      	ldr	r3, [pc, #24]	@ (8001938 <screen_blink+0x40>)
 800191e:	7adb      	ldrb	r3, [r3, #11]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d003      	beq.n	800192c <screen_blink+0x34>
			LCD_printstring(m_cfg.blink_text[0]);
 8001924:	4805      	ldr	r0, [pc, #20]	@ (800193c <screen_blink+0x44>)
 8001926:	f7ff ff19 	bl	800175c <LCD_printstring>
		}else{
			LCD_printstring(m_cfg.blink_text[1]);
		}
	}
}
 800192a:	e002      	b.n	8001932 <screen_blink+0x3a>
			LCD_printstring(m_cfg.blink_text[1]);
 800192c:	4804      	ldr	r0, [pc, #16]	@ (8001940 <screen_blink+0x48>)
 800192e:	f7ff ff15 	bl	800175c <LCD_printstring>
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000bd0 	.word	0x20000bd0
 800193c:	20000bdd 	.word	0x20000bdd
 8001940:	20000bf1 	.word	0x20000bf1

08001944 <send_cmd_2_backend>:

static void send_cmd_2_backend(BackEnd_Cmd_t cmd, uint8_t ch, uint16_t value)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	71fb      	strb	r3, [r7, #7]
 800194e:	460b      	mov	r3, r1
 8001950:	71bb      	strb	r3, [r7, #6]
 8001952:	4613      	mov	r3, r2
 8001954:	80bb      	strh	r3, [r7, #4]
	// Todo : Send Cmd
	uart_SendFront(cmd, ch, (uint32_t)value);
 8001956:	88ba      	ldrh	r2, [r7, #4]
 8001958:	79b9      	ldrb	r1, [r7, #6]
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	4618      	mov	r0, r3
 800195e:	f7fe fff7 	bl	8000950 <uart_SendFront>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
	...

0800196c <screen_process>:

ScreenID_t screen_process(ScreenID_t screen_id, Key_t key)
{
 800196c:	b590      	push	{r4, r7, lr}
 800196e:	b087      	sub	sp, #28
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	460a      	mov	r2, r1
 8001976:	71fb      	strb	r3, [r7, #7]
 8001978:	4613      	mov	r3, r2
 800197a:	71bb      	strb	r3, [r7, #6]
	int menu_list_size = MAX_SC_LIST_NUM;
 800197c:	230d      	movs	r3, #13
 800197e:	613b      	str	r3, [r7, #16]
	int i;	
	Screen_param_t sc_param;

	LOG_INF("%s : key[%s]", screen_id_2_str(screen_id), key_id_2_str(key));
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff f886 	bl	8000a94 <screen_id_2_str>
 8001988:	4604      	mov	r4, r0
 800198a:	79bb      	ldrb	r3, [r7, #6]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff f8eb 	bl	8000b68 <key_id_2_str>
 8001992:	4603      	mov	r3, r0
 8001994:	461a      	mov	r2, r3
 8001996:	4621      	mov	r1, r4
 8001998:	4814      	ldr	r0, [pc, #80]	@ (80019ec <screen_process+0x80>)
 800199a:	f7ff f855 	bl	8000a48 <Printf>
	sc_param.sc_id = screen_id;
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	723b      	strb	r3, [r7, #8]
	sc_param.key = key;
 80019a2:	79bb      	ldrb	r3, [r7, #6]
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	817b      	strh	r3, [r7, #10]
	for(i = 0; menu_list_size; i++){
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	e015      	b.n	80019da <screen_process+0x6e>
		if(screen_id == screen_func_list[i].id){
 80019ae:	4a10      	ldr	r2, [pc, #64]	@ (80019f0 <screen_process+0x84>)
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80019b6:	79fa      	ldrb	r2, [r7, #7]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d10b      	bne.n	80019d4 <screen_process+0x68>
			return screen_func_list[i].func(sc_param);			
 80019bc:	4a0c      	ldr	r2, [pc, #48]	@ (80019f0 <screen_process+0x84>)
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	4413      	add	r3, r2
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f107 0208 	add.w	r2, r7, #8
 80019ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019ce:	4798      	blx	r3
 80019d0:	4603      	mov	r3, r0
 80019d2:	e006      	b.n	80019e2 <screen_process+0x76>
	for(i = 0; menu_list_size; i++){
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	3301      	adds	r3, #1
 80019d8:	617b      	str	r3, [r7, #20]
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1e6      	bne.n	80019ae <screen_process+0x42>
		}
	}
	return eMAX_SCREEN_ID;
 80019e0:	230f      	movs	r3, #15
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	371c      	adds	r7, #28
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd90      	pop	{r4, r7, pc}
 80019ea:	bf00      	nop
 80019ec:	08008f64 	.word	0x08008f64
 80019f0:	200000d4 	.word	0x200000d4

080019f4 <draw_title>:

static void draw_title(uint8_t step)
{
 80019f4:	b590      	push	{r4, r7, lr}
 80019f6:	b091      	sub	sp, #68	@ 0x44
 80019f8:	af02      	add	r7, sp, #8
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
	char line_1_buf[LCD_PRINT_MAX], line_2_buf[LCD_PRINT_MAX];
	uint8_t ch = m_cfg.cur_ch+1;
 80019fe:	4baa      	ldr	r3, [pc, #680]	@ (8001ca8 <draw_title+0x2b4>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	3301      	adds	r3, #1
 8001a04:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	LOG_INF("start Draw title [%d]\r\n", step);
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	48a7      	ldr	r0, [pc, #668]	@ (8001cac <draw_title+0x2b8>)
 8001a0e:	f7ff f81b 	bl	8000a48 <Printf>

	switch(step){
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	2b0e      	cmp	r3, #14
 8001a16:	f200 81ca 	bhi.w	8001dae <draw_title+0x3ba>
 8001a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8001a20 <draw_title+0x2c>)
 8001a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a20:	08001a5d 	.word	0x08001a5d
 8001a24:	08001a8d 	.word	0x08001a8d
 8001a28:	08001abd 	.word	0x08001abd
 8001a2c:	08001aef 	.word	0x08001aef
 8001a30:	08001b39 	.word	0x08001b39
 8001a34:	08001b61 	.word	0x08001b61
 8001a38:	08001b89 	.word	0x08001b89
 8001a3c:	08001ba9 	.word	0x08001ba9
 8001a40:	08001be7 	.word	0x08001be7
 8001a44:	08001c3d 	.word	0x08001c3d
 8001a48:	08001c0b 	.word	0x08001c0b
 8001a4c:	08001c57 	.word	0x08001c57
 8001a50:	08001c73 	.word	0x08001c73
 8001a54:	08001c8d 	.word	0x08001c8d
 8001a58:	08001d3d 	.word	0x08001d3d
		case eCH_CHSelect:
			sprintf(line_1_buf, "CH%d   Operation\n", ch);
 8001a5c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001a60:	f107 0320 	add.w	r3, r7, #32
 8001a64:	4992      	ldr	r1, [pc, #584]	@ (8001cb0 <draw_title+0x2bc>)
 8001a66:	4618      	mov	r0, r3
 8001a68:	f006 face 	bl	8008008 <siprintf>
			sprintf(line_2_buf, "OnTime : %5dus", load_cfg.on_time[ch]);
 8001a6c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001a70:	4a90      	ldr	r2, [pc, #576]	@ (8001cb4 <draw_title+0x2c0>)
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	4413      	add	r3, r2
 8001a76:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	f107 030c 	add.w	r3, r7, #12
 8001a82:	498d      	ldr	r1, [pc, #564]	@ (8001cb8 <draw_title+0x2c4>)
 8001a84:	4618      	mov	r0, r3
 8001a86:	f006 fabf 	bl	8008008 <siprintf>
			break;
 8001a8a:	e190      	b.n	8001dae <draw_title+0x3ba>
		case eCH_OnTIME:
			sprintf(line_1_buf, "CH%d On-Time     \n", ch);
 8001a8c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001a90:	f107 0320 	add.w	r3, r7, #32
 8001a94:	4989      	ldr	r1, [pc, #548]	@ (8001cbc <draw_title+0x2c8>)
 8001a96:	4618      	mov	r0, r3
 8001a98:	f006 fab6 	bl	8008008 <siprintf>
			sprintf(line_2_buf, "Value : %5d us", load_cfg.on_time[ch]);
 8001a9c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001aa0:	4a84      	ldr	r2, [pc, #528]	@ (8001cb4 <draw_title+0x2c0>)
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	4413      	add	r3, r2
 8001aa6:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	461a      	mov	r2, r3
 8001aae:	f107 030c 	add.w	r3, r7, #12
 8001ab2:	4983      	ldr	r1, [pc, #524]	@ (8001cc0 <draw_title+0x2cc>)
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f006 faa7 	bl	8008008 <siprintf>
			break;
 8001aba:	e178      	b.n	8001dae <draw_title+0x3ba>
		case eCH_DelayTIME:
			sprintf(line_1_buf, "CH%d Delay-Time  \n", ch);
 8001abc:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001ac0:	f107 0320 	add.w	r3, r7, #32
 8001ac4:	497f      	ldr	r1, [pc, #508]	@ (8001cc4 <draw_title+0x2d0>)
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f006 fa9e 	bl	8008008 <siprintf>
			sprintf(line_2_buf, "Value : %5d us", load_cfg.delay_time[ch]);
 8001acc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001ad0:	4a78      	ldr	r2, [pc, #480]	@ (8001cb4 <draw_title+0x2c0>)
 8001ad2:	3308      	adds	r3, #8
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	4413      	add	r3, r2
 8001ad8:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	461a      	mov	r2, r3
 8001ae0:	f107 030c 	add.w	r3, r7, #12
 8001ae4:	4976      	ldr	r1, [pc, #472]	@ (8001cc0 <draw_title+0x2cc>)
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f006 fa8e 	bl	8008008 <siprintf>
			break;
 8001aec:	e15f      	b.n	8001dae <draw_title+0x3ba>
		case eCH_TriggerSet:
			sprintf(line_1_buf, "CH%d Trigger Set \n", ch);
 8001aee:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001af2:	f107 0320 	add.w	r3, r7, #32
 8001af6:	4974      	ldr	r1, [pc, #464]	@ (8001cc8 <draw_title+0x2d4>)
 8001af8:	4618      	mov	r0, r3
 8001afa:	f006 fa85 	bl	8008008 <siprintf>
			sprintf(line_2_buf, "Value : %s \n", load_cfg.edge[ch]?"Rising":"Falling");
 8001afe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001b02:	4a6c      	ldr	r2, [pc, #432]	@ (8001cb4 <draw_title+0x2c0>)
 8001b04:	4413      	add	r3, r2
 8001b06:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <draw_title+0x11e>
 8001b0e:	4a6f      	ldr	r2, [pc, #444]	@ (8001ccc <draw_title+0x2d8>)
 8001b10:	e000      	b.n	8001b14 <draw_title+0x120>
 8001b12:	4a6f      	ldr	r2, [pc, #444]	@ (8001cd0 <draw_title+0x2dc>)
 8001b14:	f107 030c 	add.w	r3, r7, #12
 8001b18:	496e      	ldr	r1, [pc, #440]	@ (8001cd4 <draw_title+0x2e0>)
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f006 fa74 	bl	8008008 <siprintf>
			memcpy(m_cfg.blink_text[0], line_2_buf, 17);
 8001b20:	f107 030c 	add.w	r3, r7, #12
 8001b24:	2211      	movs	r2, #17
 8001b26:	4619      	mov	r1, r3
 8001b28:	486b      	ldr	r0, [pc, #428]	@ (8001cd8 <draw_title+0x2e4>)
 8001b2a:	f006 fb51 	bl	80081d0 <memcpy>
			sprintf(m_cfg.blink_text[1],"Value :         ");
 8001b2e:	496b      	ldr	r1, [pc, #428]	@ (8001cdc <draw_title+0x2e8>)
 8001b30:	486b      	ldr	r0, [pc, #428]	@ (8001ce0 <draw_title+0x2ec>)
 8001b32:	f006 fa69 	bl	8008008 <siprintf>
			break;
 8001b36:	e13a      	b.n	8001dae <draw_title+0x3ba>
		case eSEL_OPMODE:
			sprintf(line_1_buf, "Mode Select     \n");
 8001b38:	f107 0320 	add.w	r3, r7, #32
 8001b3c:	4969      	ldr	r1, [pc, #420]	@ (8001ce4 <draw_title+0x2f0>)
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f006 fa62 	bl	8008008 <siprintf>
			sprintf(line_2_buf, "      %s     \n", load_cfg.mode?"1 : N":"1 : 1");
 8001b44:	4b5b      	ldr	r3, [pc, #364]	@ (8001cb4 <draw_title+0x2c0>)
 8001b46:	791b      	ldrb	r3, [r3, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <draw_title+0x15c>
 8001b4c:	4a66      	ldr	r2, [pc, #408]	@ (8001ce8 <draw_title+0x2f4>)
 8001b4e:	e000      	b.n	8001b52 <draw_title+0x15e>
 8001b50:	4a66      	ldr	r2, [pc, #408]	@ (8001cec <draw_title+0x2f8>)
 8001b52:	f107 030c 	add.w	r3, r7, #12
 8001b56:	4966      	ldr	r1, [pc, #408]	@ (8001cf0 <draw_title+0x2fc>)
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f006 fa55 	bl	8008008 <siprintf>
			break;
 8001b5e:	e126      	b.n	8001dae <draw_title+0x3ba>
		case eSET_OPMODE:
			sprintf(line_1_buf, "Mode Selection  \n");
 8001b60:	f107 0320 	add.w	r3, r7, #32
 8001b64:	4963      	ldr	r1, [pc, #396]	@ (8001cf4 <draw_title+0x300>)
 8001b66:	4618      	mov	r0, r3
 8001b68:	f006 fa4e 	bl	8008008 <siprintf>
			sprintf(line_2_buf, "      %s     ", load_cfg.mode?"1 : N":"1 : 1");
 8001b6c:	4b51      	ldr	r3, [pc, #324]	@ (8001cb4 <draw_title+0x2c0>)
 8001b6e:	791b      	ldrb	r3, [r3, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <draw_title+0x184>
 8001b74:	4a5c      	ldr	r2, [pc, #368]	@ (8001ce8 <draw_title+0x2f4>)
 8001b76:	e000      	b.n	8001b7a <draw_title+0x186>
 8001b78:	4a5c      	ldr	r2, [pc, #368]	@ (8001cec <draw_title+0x2f8>)
 8001b7a:	f107 030c 	add.w	r3, r7, #12
 8001b7e:	495e      	ldr	r1, [pc, #376]	@ (8001cf8 <draw_title+0x304>)
 8001b80:	4618      	mov	r0, r3
 8001b82:	f006 fa41 	bl	8008008 <siprintf>
			break;
 8001b86:	e112      	b.n	8001dae <draw_title+0x3ba>
		case eRS_DevID:
			sprintf(line_1_buf, "RS232 Operation  \n");
 8001b88:	f107 0320 	add.w	r3, r7, #32
 8001b8c:	495b      	ldr	r1, [pc, #364]	@ (8001cfc <draw_title+0x308>)
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f006 fa3a 	bl	8008008 <siprintf>
			sprintf(line_2_buf, "Device ID : %02d", load_cfg.dev_id);
 8001b94:	4b47      	ldr	r3, [pc, #284]	@ (8001cb4 <draw_title+0x2c0>)
 8001b96:	795b      	ldrb	r3, [r3, #5]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	f107 030c 	add.w	r3, r7, #12
 8001b9e:	4958      	ldr	r1, [pc, #352]	@ (8001d00 <draw_title+0x30c>)
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f006 fa31 	bl	8008008 <siprintf>
			break;
 8001ba6:	e102      	b.n	8001dae <draw_title+0x3ba>
		case eIP_Set:
			sprintf(line_1_buf, "Communication  \n");
 8001ba8:	f107 0320 	add.w	r3, r7, #32
 8001bac:	4955      	ldr	r1, [pc, #340]	@ (8001d04 <draw_title+0x310>)
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f006 fa2a 	bl	8008008 <siprintf>
			sprintf(line_2_buf, "%03d.%03d.%03d.%03d ", load_cfg.ether.ipaddr[0], load_cfg.ether.ipaddr[1], load_cfg.ether.ipaddr[2], load_cfg.ether.ipaddr[3]);
 8001bb4:	4b3f      	ldr	r3, [pc, #252]	@ (8001cb4 <draw_title+0x2c0>)
 8001bb6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4b3d      	ldr	r3, [pc, #244]	@ (8001cb4 <draw_title+0x2c0>)
 8001bbe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001bc2:	461c      	mov	r4, r3
 8001bc4:	4b3b      	ldr	r3, [pc, #236]	@ (8001cb4 <draw_title+0x2c0>)
 8001bc6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001bca:	461a      	mov	r2, r3
 8001bcc:	4b39      	ldr	r3, [pc, #228]	@ (8001cb4 <draw_title+0x2c0>)
 8001bce:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001bd2:	f107 000c 	add.w	r0, r7, #12
 8001bd6:	9301      	str	r3, [sp, #4]
 8001bd8:	9200      	str	r2, [sp, #0]
 8001bda:	4623      	mov	r3, r4
 8001bdc:	460a      	mov	r2, r1
 8001bde:	494a      	ldr	r1, [pc, #296]	@ (8001d08 <draw_title+0x314>)
 8001be0:	f006 fa12 	bl	8008008 <siprintf>
			break;
 8001be4:	e0e3      	b.n	8001dae <draw_title+0x3ba>
		case ePORT_Set:
			sprintf(line_1_buf, "Communication  \n");
 8001be6:	f107 0320 	add.w	r3, r7, #32
 8001bea:	4946      	ldr	r1, [pc, #280]	@ (8001d04 <draw_title+0x310>)
 8001bec:	4618      	mov	r0, r3
 8001bee:	f006 fa0b 	bl	8008008 <siprintf>
			sprintf(line_2_buf, "Port : %d    \n", load_cfg.ether.port);
 8001bf2:	4b30      	ldr	r3, [pc, #192]	@ (8001cb4 <draw_title+0x2c0>)
 8001bf4:	f8b3 3033 	ldrh.w	r3, [r3, #51]	@ 0x33
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	f107 030c 	add.w	r3, r7, #12
 8001c00:	4942      	ldr	r1, [pc, #264]	@ (8001d0c <draw_title+0x318>)
 8001c02:	4618      	mov	r0, r3
 8001c04:	f006 fa00 	bl	8008008 <siprintf>
			break;
 8001c08:	e0d1      	b.n	8001dae <draw_title+0x3ba>
		case eRemote_Mode:
			sprintf(line_1_buf, "Communication  \n");
 8001c0a:	f107 0320 	add.w	r3, r7, #32
 8001c0e:	493d      	ldr	r1, [pc, #244]	@ (8001d04 <draw_title+0x310>)
 8001c10:	4618      	mov	r0, r3
 8001c12:	f006 f9f9 	bl	8008008 <siprintf>
			if(m_cfg.remote_mode == eREMOTE_RS232){
 8001c16:	4b24      	ldr	r3, [pc, #144]	@ (8001ca8 <draw_title+0x2b4>)
 8001c18:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d106      	bne.n	8001c2e <draw_title+0x23a>
				sprintf(line_2_buf, "RS232...       \n");
 8001c20:	f107 030c 	add.w	r3, r7, #12
 8001c24:	493a      	ldr	r1, [pc, #232]	@ (8001d10 <draw_title+0x31c>)
 8001c26:	4618      	mov	r0, r3
 8001c28:	f006 f9ee 	bl	8008008 <siprintf>
			}else{
				sprintf(line_2_buf, "Ethernet...    \n");
			}
			break;
 8001c2c:	e0bf      	b.n	8001dae <draw_title+0x3ba>
				sprintf(line_2_buf, "Ethernet...    \n");
 8001c2e:	f107 030c 	add.w	r3, r7, #12
 8001c32:	4938      	ldr	r1, [pc, #224]	@ (8001d14 <draw_title+0x320>)
 8001c34:	4618      	mov	r0, r3
 8001c36:	f006 f9e7 	bl	8008008 <siprintf>
			break;
 8001c3a:	e0b8      	b.n	8001dae <draw_title+0x3ba>
		case eSelf_Test:
			sprintf(line_1_buf, "Test Operation  \n");
 8001c3c:	f107 0320 	add.w	r3, r7, #32
 8001c40:	4935      	ldr	r1, [pc, #212]	@ (8001d18 <draw_title+0x324>)
 8001c42:	4618      	mov	r0, r3
 8001c44:	f006 f9e0 	bl	8008008 <siprintf>
			sprintf(line_2_buf, "Testing...      \n");
 8001c48:	f107 030c 	add.w	r3, r7, #12
 8001c4c:	4933      	ldr	r1, [pc, #204]	@ (8001d1c <draw_title+0x328>)
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f006 f9da 	bl	8008008 <siprintf>
			break;
 8001c54:	e0ab      	b.n	8001dae <draw_title+0x3ba>
		case eUSER_Mode:
			sprintf(line_1_buf, " %s\n", load_cfg.company);
 8001c56:	f107 0320 	add.w	r3, r7, #32
 8001c5a:	4a31      	ldr	r2, [pc, #196]	@ (8001d20 <draw_title+0x32c>)
 8001c5c:	4931      	ldr	r1, [pc, #196]	@ (8001d24 <draw_title+0x330>)
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f006 f9d2 	bl	8008008 <siprintf>
			sprintf(line_2_buf, "StrobeController\n");
 8001c64:	f107 030c 	add.w	r3, r7, #12
 8001c68:	492f      	ldr	r1, [pc, #188]	@ (8001d28 <draw_title+0x334>)
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f006 f9cc 	bl	8008008 <siprintf>
			break;
 8001c70:	e09d      	b.n	8001dae <draw_title+0x3ba>
		case eFactor_Mode:
			sprintf(line_1_buf, "Factory mode    \n");
 8001c72:	f107 0320 	add.w	r3, r7, #32
 8001c76:	492d      	ldr	r1, [pc, #180]	@ (8001d2c <draw_title+0x338>)
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f006 f9c5 	bl	8008008 <siprintf>
			sprintf(line_2_buf, "Reset...        \n");
 8001c7e:	f107 030c 	add.w	r3, r7, #12
 8001c82:	492b      	ldr	r1, [pc, #172]	@ (8001d30 <draw_title+0x33c>)
 8001c84:	4618      	mov	r0, r3
 8001c86:	f006 f9bf 	bl	8008008 <siprintf>
			break;
 8001c8a:	e090      	b.n	8001dae <draw_title+0x3ba>
		case eSEL_OP_Ch:
			sprintf(line_1_buf, "CH1 CH2 CH4 CH6 \n");
 8001c8c:	f107 0320 	add.w	r3, r7, #32
 8001c90:	4928      	ldr	r1, [pc, #160]	@ (8001d34 <draw_title+0x340>)
 8001c92:	4618      	mov	r0, r3
 8001c94:	f006 f9b8 	bl	8008008 <siprintf>
			sprintf(line_2_buf, "CH8             \n");
 8001c98:	f107 030c 	add.w	r3, r7, #12
 8001c9c:	4926      	ldr	r1, [pc, #152]	@ (8001d38 <draw_title+0x344>)
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f006 f9b2 	bl	8008008 <siprintf>
			break;
 8001ca4:	e083      	b.n	8001dae <draw_title+0x3ba>
 8001ca6:	bf00      	nop
 8001ca8:	20000bd0 	.word	0x20000bd0
 8001cac:	08008f78 	.word	0x08008f78
 8001cb0:	08008f98 	.word	0x08008f98
 8001cb4:	20000c1c 	.word	0x20000c1c
 8001cb8:	08008fac 	.word	0x08008fac
 8001cbc:	08008fbc 	.word	0x08008fbc
 8001cc0:	08008fd0 	.word	0x08008fd0
 8001cc4:	08008fe0 	.word	0x08008fe0
 8001cc8:	08008ff4 	.word	0x08008ff4
 8001ccc:	08009008 	.word	0x08009008
 8001cd0:	08009010 	.word	0x08009010
 8001cd4:	08009018 	.word	0x08009018
 8001cd8:	20000bdd 	.word	0x20000bdd
 8001cdc:	08009028 	.word	0x08009028
 8001ce0:	20000bf1 	.word	0x20000bf1
 8001ce4:	0800903c 	.word	0x0800903c
 8001ce8:	08009050 	.word	0x08009050
 8001cec:	08009058 	.word	0x08009058
 8001cf0:	08009060 	.word	0x08009060
 8001cf4:	08009070 	.word	0x08009070
 8001cf8:	08009084 	.word	0x08009084
 8001cfc:	08009094 	.word	0x08009094
 8001d00:	080090a8 	.word	0x080090a8
 8001d04:	080090bc 	.word	0x080090bc
 8001d08:	080090d0 	.word	0x080090d0
 8001d0c:	080090e8 	.word	0x080090e8
 8001d10:	080090f8 	.word	0x080090f8
 8001d14:	0800910c 	.word	0x0800910c
 8001d18:	08009120 	.word	0x08009120
 8001d1c:	08009134 	.word	0x08009134
 8001d20:	20000c51 	.word	0x20000c51
 8001d24:	08009148 	.word	0x08009148
 8001d28:	08008f50 	.word	0x08008f50
 8001d2c:	08009150 	.word	0x08009150
 8001d30:	08009164 	.word	0x08009164
 8001d34:	08009178 	.word	0x08009178
 8001d38:	0800918c 	.word	0x0800918c
		case eVer_Disp:
			sprintf(line_1_buf, "F - FW : Ver %1d.%1d\n", load_cfg.frontVer/10, load_cfg.frontVer%10);
 8001d3c:	4b28      	ldr	r3, [pc, #160]	@ (8001de0 <draw_title+0x3ec>)
 8001d3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001d42:	4a28      	ldr	r2, [pc, #160]	@ (8001de4 <draw_title+0x3f0>)
 8001d44:	fba2 2303 	umull	r2, r3, r2, r3
 8001d48:	08db      	lsrs	r3, r3, #3
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	461c      	mov	r4, r3
 8001d4e:	4b24      	ldr	r3, [pc, #144]	@ (8001de0 <draw_title+0x3ec>)
 8001d50:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8001d54:	4b23      	ldr	r3, [pc, #140]	@ (8001de4 <draw_title+0x3f0>)
 8001d56:	fba3 1302 	umull	r1, r3, r3, r2
 8001d5a:	08d9      	lsrs	r1, r3, #3
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	440b      	add	r3, r1
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	f107 0020 	add.w	r0, r7, #32
 8001d6c:	4622      	mov	r2, r4
 8001d6e:	491e      	ldr	r1, [pc, #120]	@ (8001de8 <draw_title+0x3f4>)
 8001d70:	f006 f94a 	bl	8008008 <siprintf>
			sprintf(line_2_buf, "M - FW : Ver %1d.%1d\n", load_cfg.backendVer/10, load_cfg.backendVer%10);
 8001d74:	4b1a      	ldr	r3, [pc, #104]	@ (8001de0 <draw_title+0x3ec>)
 8001d76:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8001d7a:	4a1a      	ldr	r2, [pc, #104]	@ (8001de4 <draw_title+0x3f0>)
 8001d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d80:	08db      	lsrs	r3, r3, #3
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	461c      	mov	r4, r3
 8001d86:	4b16      	ldr	r3, [pc, #88]	@ (8001de0 <draw_title+0x3ec>)
 8001d88:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8001d8c:	4b15      	ldr	r3, [pc, #84]	@ (8001de4 <draw_title+0x3f0>)
 8001d8e:	fba3 1302 	umull	r1, r3, r3, r2
 8001d92:	08d9      	lsrs	r1, r3, #3
 8001d94:	460b      	mov	r3, r1
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	440b      	add	r3, r1
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	f107 000c 	add.w	r0, r7, #12
 8001da4:	4622      	mov	r2, r4
 8001da6:	4911      	ldr	r1, [pc, #68]	@ (8001dec <draw_title+0x3f8>)
 8001da8:	f006 f92e 	bl	8008008 <siprintf>
			break;
 8001dac:	bf00      	nop
	}
	LCD_LOCATE(1,1);
 8001dae:	2101      	movs	r1, #1
 8001db0:	2001      	movs	r0, #1
 8001db2:	f7ff fcff 	bl	80017b4 <LCD_LOCATE>
	LCD_printstring(line_1_buf);
 8001db6:	f107 0320 	add.w	r3, r7, #32
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff fcce 	bl	800175c <LCD_printstring>
	LCD_LOCATE(2,1);
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	2002      	movs	r0, #2
 8001dc4:	f7ff fcf6 	bl	80017b4 <LCD_LOCATE>
	LCD_printstring(line_2_buf);
 8001dc8:	f107 030c 	add.w	r3, r7, #12
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff fcc5 	bl	800175c <LCD_printstring>
	LOG_INF("End Draw title\r\n");
 8001dd2:	4807      	ldr	r0, [pc, #28]	@ (8001df0 <draw_title+0x3fc>)
 8001dd4:	f7fe fe38 	bl	8000a48 <Printf>
}
 8001dd8:	bf00      	nop
 8001dda:	373c      	adds	r7, #60	@ 0x3c
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd90      	pop	{r4, r7, pc}
 8001de0:	20000c1c 	.word	0x20000c1c
 8001de4:	cccccccd 	.word	0xcccccccd
 8001de8:	080091a0 	.word	0x080091a0
 8001dec:	080091b8 	.word	0x080091b8
 8001df0:	080091d0 	.word	0x080091d0

08001df4 <split_num>:

static void split_num(uint16_t value, int8_t *array)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	6039      	str	r1, [r7, #0]
 8001dfe:	80fb      	strh	r3, [r7, #6]
	int num = value, i;
 8001e00:	88fb      	ldrh	r3, [r7, #6]
 8001e02:	60fb      	str	r3, [r7, #12]

	for(i = m_cfg.digit_num; i >= 0; i--){
 8001e04:	4b18      	ldr	r3, [pc, #96]	@ (8001e68 <split_num+0x74>)
 8001e06:	79db      	ldrb	r3, [r3, #7]
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	e023      	b.n	8001e54 <split_num+0x60>
		array[i] = -1;  // init value
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	4413      	add	r3, r2
 8001e12:	22ff      	movs	r2, #255	@ 0xff
 8001e14:	701a      	strb	r2, [r3, #0]
		if(num){
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d018      	beq.n	8001e4e <split_num+0x5a>
			array[i] = num%10;
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	4b13      	ldr	r3, [pc, #76]	@ (8001e6c <split_num+0x78>)
 8001e20:	fb83 1302 	smull	r1, r3, r3, r2
 8001e24:	1099      	asrs	r1, r3, #2
 8001e26:	17d3      	asrs	r3, r2, #31
 8001e28:	1ac9      	subs	r1, r1, r3
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	440b      	add	r3, r1
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	1ad1      	subs	r1, r2, r3
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	4413      	add	r3, r2
 8001e3a:	b24a      	sxtb	r2, r1
 8001e3c:	701a      	strb	r2, [r3, #0]
			num/=10;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	4a0a      	ldr	r2, [pc, #40]	@ (8001e6c <split_num+0x78>)
 8001e42:	fb82 1203 	smull	r1, r2, r2, r3
 8001e46:	1092      	asrs	r2, r2, #2
 8001e48:	17db      	asrs	r3, r3, #31
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	60fb      	str	r3, [r7, #12]
	for(i = m_cfg.digit_num; i >= 0; i--){
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	3b01      	subs	r3, #1
 8001e52:	60bb      	str	r3, [r7, #8]
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	dad8      	bge.n	8001e0c <split_num+0x18>
		}
	}
}
 8001e5a:	bf00      	nop
 8001e5c:	bf00      	nop
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	20000bd0 	.word	0x20000bd0
 8001e6c:	66666667 	.word	0x66666667

08001e70 <combine_array>:

static uint16_t combine_array(int8_t *array)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
	int i;
	uint16_t value = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	817b      	strh	r3, [r7, #10]
	
	for(i = 0; i <= m_cfg.digit_num; i++){
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	e017      	b.n	8001eb2 <combine_array+0x42>
		if(array[i] >= 0){
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	4413      	add	r3, r2
 8001e88:	f993 3000 	ldrsb.w	r3, [r3]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	db0d      	blt.n	8001eac <combine_array+0x3c>
			value = (value*10)+array[i];
 8001e90:	897b      	ldrh	r3, [r7, #10]
 8001e92:	461a      	mov	r2, r3
 8001e94:	0092      	lsls	r2, r2, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	440b      	add	r3, r1
 8001ea2:	f993 3000 	ldrsb.w	r3, [r3]
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	4413      	add	r3, r2
 8001eaa:	817b      	strh	r3, [r7, #10]
	for(i = 0; i <= m_cfg.digit_num; i++){
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	4b06      	ldr	r3, [pc, #24]	@ (8001ecc <combine_array+0x5c>)
 8001eb4:	79db      	ldrb	r3, [r3, #7]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	dde1      	ble.n	8001e82 <combine_array+0x12>
		}
	}
	
	return value;
 8001ebe:	897b      	ldrh	r3, [r7, #10]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	20000bd0 	.word	0x20000bd0

08001ed0 <channel_screen_func>:

ScreenID_t channel_screen_func(Screen_param_t param)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	463b      	mov	r3, r7
 8001ed8:	e883 0003 	stmia.w	r3, {r0, r1}
	LOG_INF("Enter ch screen\r\n");
 8001edc:	483e      	ldr	r0, [pc, #248]	@ (8001fd8 <channel_screen_func+0x108>)
 8001ede:	f7fe fdb3 	bl	8000a48 <Printf>
	m_cfg.cursor = 0;
 8001ee2:	4b3e      	ldr	r3, [pc, #248]	@ (8001fdc <channel_screen_func+0x10c>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	705a      	strb	r2, [r3, #1]
	switch(param.key){
 8001ee8:	887b      	ldrh	r3, [r7, #2]
 8001eea:	2b10      	cmp	r3, #16
 8001eec:	d867      	bhi.n	8001fbe <channel_screen_func+0xee>
 8001eee:	a201      	add	r2, pc, #4	@ (adr r2, 8001ef4 <channel_screen_func+0x24>)
 8001ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ef4:	08001f39 	.word	0x08001f39
 8001ef8:	08001fbf 	.word	0x08001fbf
 8001efc:	08001f41 	.word	0x08001f41
 8001f00:	08001fbf 	.word	0x08001fbf
 8001f04:	08001f5d 	.word	0x08001f5d
 8001f08:	08001fbf 	.word	0x08001fbf
 8001f0c:	08001fbf 	.word	0x08001fbf
 8001f10:	08001fbf 	.word	0x08001fbf
 8001f14:	08001fbf 	.word	0x08001fbf
 8001f18:	08001fbf 	.word	0x08001fbf
 8001f1c:	08001fbf 	.word	0x08001fbf
 8001f20:	08001fbf 	.word	0x08001fbf
 8001f24:	08001fbf 	.word	0x08001fbf
 8001f28:	08001fbf 	.word	0x08001fbf
 8001f2c:	08001fbf 	.word	0x08001fbf
 8001f30:	08001fbf 	.word	0x08001fbf
 8001f34:	08001f79 	.word	0x08001f79
		case eKey_Idle:
			m_cfg.cur_ch = eCH1;
 8001f38:	4b28      	ldr	r3, [pc, #160]	@ (8001fdc <channel_screen_func+0x10c>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	701a      	strb	r2, [r3, #0]
			break;
 8001f3e:	e03f      	b.n	8001fc0 <channel_screen_func+0xf0>
		case eKey_Up:
			m_cfg.cur_ch = (m_cfg.cur_ch + 1) % eCH_MAX;
 8001f40:	4b26      	ldr	r3, [pc, #152]	@ (8001fdc <channel_screen_func+0x10c>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	3301      	adds	r3, #1
 8001f46:	425a      	negs	r2, r3
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	f002 0207 	and.w	r2, r2, #7
 8001f50:	bf58      	it	pl
 8001f52:	4253      	negpl	r3, r2
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	4b21      	ldr	r3, [pc, #132]	@ (8001fdc <channel_screen_func+0x10c>)
 8001f58:	701a      	strb	r2, [r3, #0]
			break;
 8001f5a:	e031      	b.n	8001fc0 <channel_screen_func+0xf0>
		case eKey_Down:
			m_cfg.cur_ch = (m_cfg.cur_ch - 1 + eCH_MAX) % eCH_MAX;
 8001f5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001fdc <channel_screen_func+0x10c>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	3307      	adds	r3, #7
 8001f62:	425a      	negs	r2, r3
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	f002 0207 	and.w	r2, r2, #7
 8001f6c:	bf58      	it	pl
 8001f6e:	4253      	negpl	r3, r2
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	4b1a      	ldr	r3, [pc, #104]	@ (8001fdc <channel_screen_func+0x10c>)
 8001f74:	701a      	strb	r2, [r3, #0]
			break;
 8001f76:	e023      	b.n	8001fc0 <channel_screen_func+0xf0>
		case eKey_SetMode:
			draw_title(eCH_OnTIME);
 8001f78:	2001      	movs	r0, #1
 8001f7a:	f7ff fd3b 	bl	80019f4 <draw_title>
			m_cfg.set_time = load_cfg.on_time[m_cfg.cur_ch];
 8001f7e:	4b17      	ldr	r3, [pc, #92]	@ (8001fdc <channel_screen_func+0x10c>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	4a17      	ldr	r2, [pc, #92]	@ (8001fe0 <channel_screen_func+0x110>)
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	4413      	add	r3, r2
 8001f88:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	4b13      	ldr	r3, [pc, #76]	@ (8001fdc <channel_screen_func+0x10c>)
 8001f90:	811a      	strh	r2, [r3, #8]
			m_cfg.cursor = 13;
 8001f92:	4b12      	ldr	r3, [pc, #72]	@ (8001fdc <channel_screen_func+0x10c>)
 8001f94:	220d      	movs	r2, #13
 8001f96:	705a      	strb	r2, [r3, #1]
			m_cfg.digit_num = 4;  // 0 ~ 4
 8001f98:	4b10      	ldr	r3, [pc, #64]	@ (8001fdc <channel_screen_func+0x10c>)
 8001f9a:	2204      	movs	r2, #4
 8001f9c:	71da      	strb	r2, [r3, #7]
			split_num(m_cfg.set_time, m_cfg.input_num);			
 8001f9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001fdc <channel_screen_func+0x10c>)
 8001fa0:	891b      	ldrh	r3, [r3, #8]
 8001fa2:	4910      	ldr	r1, [pc, #64]	@ (8001fe4 <channel_screen_func+0x114>)
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff ff25 	bl	8001df4 <split_num>
			LCD_LOCATE(2, m_cfg.cursor);
 8001faa:	4b0c      	ldr	r3, [pc, #48]	@ (8001fdc <channel_screen_func+0x10c>)
 8001fac:	785b      	ldrb	r3, [r3, #1]
 8001fae:	4619      	mov	r1, r3
 8001fb0:	2002      	movs	r0, #2
 8001fb2:	f7ff fbff 	bl	80017b4 <LCD_LOCATE>
			LCD_DISP_CURSOR();
 8001fb6:	f7ff fbf6 	bl	80017a6 <LCD_DISP_CURSOR>
			return eSET_ON_TIME_SC;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	e007      	b.n	8001fce <channel_screen_func+0xfe>
		default:
			break;
 8001fbe:	bf00      	nop
	}
	
	draw_title(eCH_CHSelect);	
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	f7ff fd17 	bl	80019f4 <draw_title>
	LOG_INF("Return ch scree function\r\n");
 8001fc6:	4808      	ldr	r0, [pc, #32]	@ (8001fe8 <channel_screen_func+0x118>)
 8001fc8:	f7fe fd3e 	bl	8000a48 <Printf>
	return eMAX_SCREEN_ID;
 8001fcc:	230f      	movs	r3, #15
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	080091e8 	.word	0x080091e8
 8001fdc:	20000bd0 	.word	0x20000bd0
 8001fe0:	20000c1c 	.word	0x20000c1c
 8001fe4:	20000bd2 	.word	0x20000bd2
 8001fe8:	08009204 	.word	0x08009204

08001fec <set_changetime_func>:

ScreenID_t set_changetime_func(Screen_param_t param)
{
 8001fec:	b590      	push	{r4, r7, lr}
 8001fee:	b091      	sub	sp, #68	@ 0x44
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	463b      	mov	r3, r7
 8001ff4:	e883 0003 	stmia.w	r3, {r0, r1}
	char line_1_buf[LCD_PRINT_MAX], line_2_buf[LCD_PRINT_MAX];
	ScreenID_t ret_sc = param.sc_id;
 8001ff8:	783b      	ldrb	r3, [r7, #0]
 8001ffa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t old_cursor = m_cfg.cursor;
 8001ffe:	4ba6      	ldr	r3, [pc, #664]	@ (8002298 <set_changetime_func+0x2ac>)
 8002000:	785b      	ldrb	r3, [r3, #1]
 8002002:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t digit_idx = (m_cfg.cursor - 9);
 8002006:	4ba4      	ldr	r3, [pc, #656]	@ (8002298 <set_changetime_func+0x2ac>)
 8002008:	785b      	ldrb	r3, [r3, #1]
 800200a:	3b09      	subs	r3, #9
 800200c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	uint8_t change_value = 0, channel = m_cfg.cur_ch;
 8002010:	2300      	movs	r3, #0
 8002012:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8002016:	4ba0      	ldr	r3, [pc, #640]	@ (8002298 <set_changetime_func+0x2ac>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	BackEnd_Cmd_t cmd;
	uint32_t set_time;
	
	switch(param.key){
 800201e:	887b      	ldrh	r3, [r7, #2]
 8002020:	3b01      	subs	r3, #1
 8002022:	2b0b      	cmp	r3, #11
 8002024:	f200 80eb 	bhi.w	80021fe <set_changetime_func+0x212>
 8002028:	a201      	add	r2, pc, #4	@ (adr r2, 8002030 <set_changetime_func+0x44>)
 800202a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800202e:	bf00      	nop
 8002030:	080020fd 	.word	0x080020fd
 8002034:	08002061 	.word	0x08002061
 8002038:	080021ff 	.word	0x080021ff
 800203c:	08002095 	.word	0x08002095
 8002040:	080021ff 	.word	0x080021ff
 8002044:	080021ff 	.word	0x080021ff
 8002048:	080021ff 	.word	0x080021ff
 800204c:	08002187 	.word	0x08002187
 8002050:	080021ff 	.word	0x080021ff
 8002054:	080020c9 	.word	0x080020c9
 8002058:	080021ff 	.word	0x080021ff
 800205c:	080020e3 	.word	0x080020e3
		case eKey_Up:
			if(m_cfg.input_num[digit_idx]++ >= 9){
 8002060:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002064:	4a8c      	ldr	r2, [pc, #560]	@ (8002298 <set_changetime_func+0x2ac>)
 8002066:	441a      	add	r2, r3
 8002068:	f992 2002 	ldrsb.w	r2, [r2, #2]
 800206c:	b2d1      	uxtb	r1, r2
 800206e:	3101      	adds	r1, #1
 8002070:	b2c9      	uxtb	r1, r1
 8002072:	b248      	sxtb	r0, r1
 8002074:	4988      	ldr	r1, [pc, #544]	@ (8002298 <set_changetime_func+0x2ac>)
 8002076:	440b      	add	r3, r1
 8002078:	4601      	mov	r1, r0
 800207a:	7099      	strb	r1, [r3, #2]
 800207c:	2a08      	cmp	r2, #8
 800207e:	dd05      	ble.n	800208c <set_changetime_func+0xa0>
				m_cfg.input_num[digit_idx] = 0;
 8002080:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002084:	4a84      	ldr	r2, [pc, #528]	@ (8002298 <set_changetime_func+0x2ac>)
 8002086:	4413      	add	r3, r2
 8002088:	2200      	movs	r2, #0
 800208a:	709a      	strb	r2, [r3, #2]
			}
			change_value=1;
 800208c:	2301      	movs	r3, #1
 800208e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
			break;
 8002092:	e0b4      	b.n	80021fe <set_changetime_func+0x212>
		case eKey_Down:			
			if(m_cfg.input_num[digit_idx]-- <= 0){
 8002094:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002098:	4a7f      	ldr	r2, [pc, #508]	@ (8002298 <set_changetime_func+0x2ac>)
 800209a:	441a      	add	r2, r3
 800209c:	f992 2002 	ldrsb.w	r2, [r2, #2]
 80020a0:	b2d1      	uxtb	r1, r2
 80020a2:	3901      	subs	r1, #1
 80020a4:	b2c9      	uxtb	r1, r1
 80020a6:	b248      	sxtb	r0, r1
 80020a8:	497b      	ldr	r1, [pc, #492]	@ (8002298 <set_changetime_func+0x2ac>)
 80020aa:	440b      	add	r3, r1
 80020ac:	4601      	mov	r1, r0
 80020ae:	7099      	strb	r1, [r3, #2]
 80020b0:	2a00      	cmp	r2, #0
 80020b2:	dc05      	bgt.n	80020c0 <set_changetime_func+0xd4>
				m_cfg.input_num[digit_idx] = 9;
 80020b4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80020b8:	4a77      	ldr	r2, [pc, #476]	@ (8002298 <set_changetime_func+0x2ac>)
 80020ba:	4413      	add	r3, r2
 80020bc:	2209      	movs	r2, #9
 80020be:	709a      	strb	r2, [r3, #2]
			}
			change_value=1;
 80020c0:	2301      	movs	r3, #1
 80020c2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
			break;
 80020c6:	e09a      	b.n	80021fe <set_changetime_func+0x212>
		case eKey_CursorUp:
			if(m_cfg.cursor-- <= 9){
 80020c8:	4b73      	ldr	r3, [pc, #460]	@ (8002298 <set_changetime_func+0x2ac>)
 80020ca:	785b      	ldrb	r3, [r3, #1]
 80020cc:	1e5a      	subs	r2, r3, #1
 80020ce:	b2d1      	uxtb	r1, r2
 80020d0:	4a71      	ldr	r2, [pc, #452]	@ (8002298 <set_changetime_func+0x2ac>)
 80020d2:	7051      	strb	r1, [r2, #1]
 80020d4:	2b09      	cmp	r3, #9
 80020d6:	f200 808f 	bhi.w	80021f8 <set_changetime_func+0x20c>
				m_cfg.cursor = 13;
 80020da:	4b6f      	ldr	r3, [pc, #444]	@ (8002298 <set_changetime_func+0x2ac>)
 80020dc:	220d      	movs	r2, #13
 80020de:	705a      	strb	r2, [r3, #1]
			}
			break;
 80020e0:	e08a      	b.n	80021f8 <set_changetime_func+0x20c>
		case eKey_CursorDown:
			if(m_cfg.cursor++ >= 13){
 80020e2:	4b6d      	ldr	r3, [pc, #436]	@ (8002298 <set_changetime_func+0x2ac>)
 80020e4:	785b      	ldrb	r3, [r3, #1]
 80020e6:	1c5a      	adds	r2, r3, #1
 80020e8:	b2d1      	uxtb	r1, r2
 80020ea:	4a6b      	ldr	r2, [pc, #428]	@ (8002298 <set_changetime_func+0x2ac>)
 80020ec:	7051      	strb	r1, [r2, #1]
 80020ee:	2b0c      	cmp	r3, #12
 80020f0:	f240 8084 	bls.w	80021fc <set_changetime_func+0x210>
				m_cfg.cursor = 9;
 80020f4:	4b68      	ldr	r3, [pc, #416]	@ (8002298 <set_changetime_func+0x2ac>)
 80020f6:	2209      	movs	r2, #9
 80020f8:	705a      	strb	r2, [r3, #1]
			}		
			break;
 80020fa:	e07f      	b.n	80021fc <set_changetime_func+0x210>
		case eKey_Enter:
			if(param.sc_id == eSET_ON_TIME_SC){
 80020fc:	783b      	ldrb	r3, [r7, #0]
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d119      	bne.n	8002136 <set_changetime_func+0x14a>
				load_cfg.on_time[channel] = combine_array(m_cfg.input_num);
 8002102:	f897 4035 	ldrb.w	r4, [r7, #53]	@ 0x35
 8002106:	4865      	ldr	r0, [pc, #404]	@ (800229c <set_changetime_func+0x2b0>)
 8002108:	f7ff feb2 	bl	8001e70 <combine_array>
 800210c:	4603      	mov	r3, r0
 800210e:	4619      	mov	r1, r3
 8002110:	4a63      	ldr	r2, [pc, #396]	@ (80022a0 <set_changetime_func+0x2b4>)
 8002112:	0063      	lsls	r3, r4, #1
 8002114:	4413      	add	r3, r2
 8002116:	460a      	mov	r2, r1
 8002118:	f8a3 2007 	strh.w	r2, [r3, #7]
				cmd = eCMD_Ontime;
 800211c:	23b2      	movs	r3, #178	@ 0xb2
 800211e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
				set_time = (uint32_t)load_cfg.on_time[channel];
 8002122:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002126:	4a5e      	ldr	r2, [pc, #376]	@ (80022a0 <set_changetime_func+0x2b4>)
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	4413      	add	r3, r2
 800212c:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8002130:	b29b      	uxth	r3, r3
 8002132:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002134:	e01b      	b.n	800216e <set_changetime_func+0x182>
			}else{
				load_cfg.delay_time[channel] = combine_array(m_cfg.input_num);
 8002136:	f897 4035 	ldrb.w	r4, [r7, #53]	@ 0x35
 800213a:	4858      	ldr	r0, [pc, #352]	@ (800229c <set_changetime_func+0x2b0>)
 800213c:	f7ff fe98 	bl	8001e70 <combine_array>
 8002140:	4603      	mov	r3, r0
 8002142:	4619      	mov	r1, r3
 8002144:	4a56      	ldr	r2, [pc, #344]	@ (80022a0 <set_changetime_func+0x2b4>)
 8002146:	f104 0308 	add.w	r3, r4, #8
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	4413      	add	r3, r2
 800214e:	460a      	mov	r2, r1
 8002150:	f8a3 2007 	strh.w	r2, [r3, #7]
				cmd = eCMD_Delaytime;
 8002154:	23b3      	movs	r3, #179	@ 0xb3
 8002156:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
				set_time = (uint32_t)load_cfg.delay_time[channel];
 800215a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800215e:	4a50      	ldr	r2, [pc, #320]	@ (80022a0 <set_changetime_func+0x2b4>)
 8002160:	3308      	adds	r3, #8
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	4413      	add	r3, r2
 8002166:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800216a:	b29b      	uxth	r3, r3
 800216c:	63bb      	str	r3, [r7, #56]	@ 0x38
			}
			send_cmd_2_backend(cmd, channel, set_time);
 800216e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002170:	b29a      	uxth	r2, r3
 8002172:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8002176:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff fbe2 	bl	8001944 <send_cmd_2_backend>
			save_data();
 8002180:	f000 f898 	bl	80022b4 <save_data>
			break;
 8002184:	e03b      	b.n	80021fe <set_changetime_func+0x212>
		case eKey_Mode:
			if(param.sc_id == eSET_ON_TIME_SC){
 8002186:	783b      	ldrb	r3, [r7, #0]
 8002188:	2b02      	cmp	r3, #2
 800218a:	d123      	bne.n	80021d4 <set_changetime_func+0x1e8>
				draw_title(eCH_DelayTIME);
 800218c:	2002      	movs	r0, #2
 800218e:	f7ff fc31 	bl	80019f4 <draw_title>
				ret_sc = eSET_DELAY_TIME_SC;
 8002192:	2303      	movs	r3, #3
 8002194:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				m_cfg.set_time = load_cfg.delay_time[channel];
 8002198:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800219c:	4a40      	ldr	r2, [pc, #256]	@ (80022a0 <set_changetime_func+0x2b4>)
 800219e:	3308      	adds	r3, #8
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	4413      	add	r3, r2
 80021a4:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002298 <set_changetime_func+0x2ac>)
 80021ac:	811a      	strh	r2, [r3, #8]
				m_cfg.cursor = 13;
 80021ae:	4b3a      	ldr	r3, [pc, #232]	@ (8002298 <set_changetime_func+0x2ac>)
 80021b0:	220d      	movs	r2, #13
 80021b2:	705a      	strb	r2, [r3, #1]
				m_cfg.digit_num = 4;  // 0 ~ 4
 80021b4:	4b38      	ldr	r3, [pc, #224]	@ (8002298 <set_changetime_func+0x2ac>)
 80021b6:	2204      	movs	r2, #4
 80021b8:	71da      	strb	r2, [r3, #7]
				split_num(m_cfg.set_time, m_cfg.input_num);			
 80021ba:	4b37      	ldr	r3, [pc, #220]	@ (8002298 <set_changetime_func+0x2ac>)
 80021bc:	891b      	ldrh	r3, [r3, #8]
 80021be:	4937      	ldr	r1, [pc, #220]	@ (800229c <set_changetime_func+0x2b0>)
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff fe17 	bl	8001df4 <split_num>
				LCD_LOCATE(2, m_cfg.cursor);
 80021c6:	4b34      	ldr	r3, [pc, #208]	@ (8002298 <set_changetime_func+0x2ac>)
 80021c8:	785b      	ldrb	r3, [r3, #1]
 80021ca:	4619      	mov	r1, r3
 80021cc:	2002      	movs	r0, #2
 80021ce:	f7ff faf1 	bl	80017b4 <LCD_LOCATE>
				m_cfg.blink_row = 2;
				m_cfg.blink = 0;
				ret_sc = eSET_TRIGGER_SC;
				LCD_DISP_ON(); // Cursor off
			}
			break;
 80021d2:	e014      	b.n	80021fe <set_changetime_func+0x212>
				draw_title(eCH_TriggerSet);
 80021d4:	2003      	movs	r0, #3
 80021d6:	f7ff fc0d 	bl	80019f4 <draw_title>
				m_cfg.enable_blink = 1;
 80021da:	4b2f      	ldr	r3, [pc, #188]	@ (8002298 <set_changetime_func+0x2ac>)
 80021dc:	2201      	movs	r2, #1
 80021de:	729a      	strb	r2, [r3, #10]
				m_cfg.blink_row = 2;
 80021e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002298 <set_changetime_func+0x2ac>)
 80021e2:	2202      	movs	r2, #2
 80021e4:	731a      	strb	r2, [r3, #12]
				m_cfg.blink = 0;
 80021e6:	4b2c      	ldr	r3, [pc, #176]	@ (8002298 <set_changetime_func+0x2ac>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	72da      	strb	r2, [r3, #11]
				ret_sc = eSET_TRIGGER_SC;
 80021ec:	2304      	movs	r3, #4
 80021ee:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				LCD_DISP_ON(); // Cursor off
 80021f2:	f7ff fad1 	bl	8001798 <LCD_DISP_ON>
			break;
 80021f6:	e002      	b.n	80021fe <set_changetime_func+0x212>
			break;
 80021f8:	bf00      	nop
 80021fa:	e000      	b.n	80021fe <set_changetime_func+0x212>
			break;
 80021fc:	bf00      	nop
	}

	if(change_value){
 80021fe:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002202:	2b00      	cmp	r3, #0
 8002204:	d035      	beq.n	8002272 <set_changetime_func+0x286>
		LOG_DBG("Change Value Ch[%d] time[%d]", channel+1, combine_array(m_cfg.input_num));
 8002206:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800220a:	1c5c      	adds	r4, r3, #1
 800220c:	4823      	ldr	r0, [pc, #140]	@ (800229c <set_changetime_func+0x2b0>)
 800220e:	f7ff fe2f 	bl	8001e70 <combine_array>
 8002212:	4603      	mov	r3, r0
 8002214:	461a      	mov	r2, r3
 8002216:	4621      	mov	r1, r4
 8002218:	4822      	ldr	r0, [pc, #136]	@ (80022a4 <set_changetime_func+0x2b8>)
 800221a:	f7fe fc15 	bl	8000a48 <Printf>
		if(param.sc_id == eSET_ON_TIME_SC){
 800221e:	783b      	ldrb	r3, [r7, #0]
 8002220:	2b02      	cmp	r3, #2
 8002222:	d109      	bne.n	8002238 <set_changetime_func+0x24c>
			sprintf(line_1_buf, "CH%d On-Time     \n", channel+1);
 8002224:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002228:	1c5a      	adds	r2, r3, #1
 800222a:	f107 0320 	add.w	r3, r7, #32
 800222e:	491e      	ldr	r1, [pc, #120]	@ (80022a8 <set_changetime_func+0x2bc>)
 8002230:	4618      	mov	r0, r3
 8002232:	f005 fee9 	bl	8008008 <siprintf>
 8002236:	e008      	b.n	800224a <set_changetime_func+0x25e>
		}else{
			sprintf(line_1_buf, "CH%d Delay-Time  \n", channel+1);
 8002238:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800223c:	1c5a      	adds	r2, r3, #1
 800223e:	f107 0320 	add.w	r3, r7, #32
 8002242:	491a      	ldr	r1, [pc, #104]	@ (80022ac <set_changetime_func+0x2c0>)
 8002244:	4618      	mov	r0, r3
 8002246:	f005 fedf 	bl	8008008 <siprintf>
		}
		sprintf(line_2_buf, "Value : %05d us", combine_array(m_cfg.input_num));
 800224a:	4814      	ldr	r0, [pc, #80]	@ (800229c <set_changetime_func+0x2b0>)
 800224c:	f7ff fe10 	bl	8001e70 <combine_array>
 8002250:	4603      	mov	r3, r0
 8002252:	461a      	mov	r2, r3
 8002254:	f107 030c 	add.w	r3, r7, #12
 8002258:	4915      	ldr	r1, [pc, #84]	@ (80022b0 <set_changetime_func+0x2c4>)
 800225a:	4618      	mov	r0, r3
 800225c:	f005 fed4 	bl	8008008 <siprintf>
		LCD_LOCATE(2,1);
 8002260:	2101      	movs	r1, #1
 8002262:	2002      	movs	r0, #2
 8002264:	f7ff faa6 	bl	80017b4 <LCD_LOCATE>
		LCD_printstring(line_2_buf);
 8002268:	f107 030c 	add.w	r3, r7, #12
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff fa75 	bl	800175c <LCD_printstring>
	}
	if(m_cfg.cursor != old_cursor){
 8002272:	4b09      	ldr	r3, [pc, #36]	@ (8002298 <set_changetime_func+0x2ac>)
 8002274:	785b      	ldrb	r3, [r3, #1]
 8002276:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800227a:	429a      	cmp	r2, r3
 800227c:	d005      	beq.n	800228a <set_changetime_func+0x29e>
		LCD_LOCATE(2, m_cfg.cursor);
 800227e:	4b06      	ldr	r3, [pc, #24]	@ (8002298 <set_changetime_func+0x2ac>)
 8002280:	785b      	ldrb	r3, [r3, #1]
 8002282:	4619      	mov	r1, r3
 8002284:	2002      	movs	r0, #2
 8002286:	f7ff fa95 	bl	80017b4 <LCD_LOCATE>
	}
	return ret_sc;
 800228a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800228e:	4618      	mov	r0, r3
 8002290:	3744      	adds	r7, #68	@ 0x44
 8002292:	46bd      	mov	sp, r7
 8002294:	bd90      	pop	{r4, r7, pc}
 8002296:	bf00      	nop
 8002298:	20000bd0 	.word	0x20000bd0
 800229c:	20000bd2 	.word	0x20000bd2
 80022a0:	20000c1c 	.word	0x20000c1c
 80022a4:	08009228 	.word	0x08009228
 80022a8:	08008fbc 	.word	0x08008fbc
 80022ac:	08008fe0 	.word	0x08008fe0
 80022b0:	0800924c 	.word	0x0800924c

080022b4 <save_data>:

static ScreenID_t save_data(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
	memcpy(m_app_config, &load_cfg, sizeof(config_t));
 80022b8:	4b08      	ldr	r3, [pc, #32]	@ (80022dc <save_data+0x28>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a08      	ldr	r2, [pc, #32]	@ (80022e0 <save_data+0x2c>)
 80022be:	4618      	mov	r0, r3
 80022c0:	4611      	mov	r1, r2
 80022c2:	2347      	movs	r3, #71	@ 0x47
 80022c4:	461a      	mov	r2, r3
 80022c6:	f005 ff83 	bl	80081d0 <memcpy>
	app_save_config();
 80022ca:	f7fe f9b9 	bl	8000640 <app_save_config>
	draw_title(eCH_CHSelect);
 80022ce:	2000      	movs	r0, #0
 80022d0:	f7ff fb90 	bl	80019f4 <draw_title>
	return eMAX_SCREEN_ID;	
 80022d4:	230f      	movs	r3, #15
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	2000020c 	.word	0x2000020c
 80022e0:	20000c1c 	.word	0x20000c1c

080022e4 <run_remote_mode>:

static void run_remote_mode(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
	send_cmd_2_backend(eCMD_FR_SetRemote, 0, m_cfg.remote_mode);
 80022e8:	4b04      	ldr	r3, [pc, #16]	@ (80022fc <run_remote_mode+0x18>)
 80022ea:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80022ee:	461a      	mov	r2, r3
 80022f0:	2100      	movs	r1, #0
 80022f2:	20c0      	movs	r0, #192	@ 0xc0
 80022f4:	f7ff fb26 	bl	8001944 <send_cmd_2_backend>
}
 80022f8:	bf00      	nop
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	20000bd0 	.word	0x20000bd0

08002300 <blink_text_screen_func>:

ScreenID_t blink_text_screen_func(Screen_param_t param)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	463b      	mov	r3, r7
 8002308:	e883 0003 	stmia.w	r3, {r0, r1}
	ScreenID_t ret_sc = param.sc_id;
 800230c:	783b      	ldrb	r3, [r7, #0]
 800230e:	73fb      	strb	r3, [r7, #15]
	uint8_t old_value;
	BackEnd_Cmd_t cmd = 0;
 8002310:	2300      	movs	r3, #0
 8002312:	737b      	strb	r3, [r7, #13]
	
	if(ret_sc == eSET_TRIGGER_SC){
 8002314:	7bfb      	ldrb	r3, [r7, #15]
 8002316:	2b04      	cmp	r3, #4
 8002318:	d108      	bne.n	800232c <blink_text_screen_func+0x2c>
		old_value = load_cfg.edge[m_cfg.cur_ch];
 800231a:	4b61      	ldr	r3, [pc, #388]	@ (80024a0 <blink_text_screen_func+0x1a0>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	461a      	mov	r2, r3
 8002320:	4b60      	ldr	r3, [pc, #384]	@ (80024a4 <blink_text_screen_func+0x1a4>)
 8002322:	4413      	add	r3, r2
 8002324:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8002328:	73bb      	strb	r3, [r7, #14]
 800232a:	e002      	b.n	8002332 <blink_text_screen_func+0x32>
	}else{
		old_value = load_cfg.mode;
 800232c:	4b5d      	ldr	r3, [pc, #372]	@ (80024a4 <blink_text_screen_func+0x1a4>)
 800232e:	791b      	ldrb	r3, [r3, #4]
 8002330:	73bb      	strb	r3, [r7, #14]
	}

	switch(param.key){
 8002332:	887b      	ldrh	r3, [r7, #2]
 8002334:	3b01      	subs	r3, #1
 8002336:	2b0f      	cmp	r3, #15
 8002338:	f200 80aa 	bhi.w	8002490 <blink_text_screen_func+0x190>
 800233c:	a201      	add	r2, pc, #4	@ (adr r2, 8002344 <blink_text_screen_func+0x44>)
 800233e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002342:	bf00      	nop
 8002344:	080023f7 	.word	0x080023f7
 8002348:	08002385 	.word	0x08002385
 800234c:	08002491 	.word	0x08002491
 8002350:	08002385 	.word	0x08002385
 8002354:	08002491 	.word	0x08002491
 8002358:	08002491 	.word	0x08002491
 800235c:	08002491 	.word	0x08002491
 8002360:	08002475 	.word	0x08002475
 8002364:	08002491 	.word	0x08002491
 8002368:	08002491 	.word	0x08002491
 800236c:	08002491 	.word	0x08002491
 8002370:	08002491 	.word	0x08002491
 8002374:	08002491 	.word	0x08002491
 8002378:	08002491 	.word	0x08002491
 800237c:	08002491 	.word	0x08002491
 8002380:	08002417 	.word	0x08002417
		case eKey_Up:
		case eKey_Down:
			old_value = ~old_value;
 8002384:	7bbb      	ldrb	r3, [r7, #14]
 8002386:	43db      	mvns	r3, r3
 8002388:	73bb      	strb	r3, [r7, #14]
			if(ret_sc == eSET_TRIGGER_SC){
 800238a:	7bfb      	ldrb	r3, [r7, #15]
 800238c:	2b04      	cmp	r3, #4
 800238e:	d11b      	bne.n	80023c8 <blink_text_screen_func+0xc8>
				sprintf(m_cfg.blink_text[0], "Value : %s \n", old_value?"Falling":"Rising");
 8002390:	7bbb      	ldrb	r3, [r7, #14]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <blink_text_screen_func+0x9a>
 8002396:	4b44      	ldr	r3, [pc, #272]	@ (80024a8 <blink_text_screen_func+0x1a8>)
 8002398:	e000      	b.n	800239c <blink_text_screen_func+0x9c>
 800239a:	4b44      	ldr	r3, [pc, #272]	@ (80024ac <blink_text_screen_func+0x1ac>)
 800239c:	461a      	mov	r2, r3
 800239e:	4944      	ldr	r1, [pc, #272]	@ (80024b0 <blink_text_screen_func+0x1b0>)
 80023a0:	4844      	ldr	r0, [pc, #272]	@ (80024b4 <blink_text_screen_func+0x1b4>)
 80023a2:	f005 fe31 	bl	8008008 <siprintf>
				load_cfg.edge[m_cfg.cur_ch] = (old_value)?eFALLING:eRISING;
 80023a6:	7bbb      	ldrb	r3, [r7, #14]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	bf0c      	ite	eq
 80023ac:	2301      	moveq	r3, #1
 80023ae:	2300      	movne	r3, #0
 80023b0:	b2d9      	uxtb	r1, r3
 80023b2:	4b3b      	ldr	r3, [pc, #236]	@ (80024a0 <blink_text_screen_func+0x1a0>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	461a      	mov	r2, r3
 80023b8:	4b3a      	ldr	r3, [pc, #232]	@ (80024a4 <blink_text_screen_func+0x1a4>)
 80023ba:	4413      	add	r3, r2
 80023bc:	460a      	mov	r2, r1
 80023be:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
				cmd = eCMD_InputEdge;
 80023c2:	23b8      	movs	r3, #184	@ 0xb8
 80023c4:	737b      	strb	r3, [r7, #13]
			}else{
				sprintf(m_cfg.blink_text[0], "      %s     \n", (old_value)?"1 : 1" : "1 : N");
				load_cfg.mode = (old_value)?eONE_ONE:eONE_N;
				cmd = eCMD_OutMode;
			}
			break;			
 80023c6:	e066      	b.n	8002496 <blink_text_screen_func+0x196>
				sprintf(m_cfg.blink_text[0], "      %s     \n", (old_value)?"1 : 1" : "1 : N");
 80023c8:	7bbb      	ldrb	r3, [r7, #14]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <blink_text_screen_func+0xd2>
 80023ce:	4b3a      	ldr	r3, [pc, #232]	@ (80024b8 <blink_text_screen_func+0x1b8>)
 80023d0:	e000      	b.n	80023d4 <blink_text_screen_func+0xd4>
 80023d2:	4b3a      	ldr	r3, [pc, #232]	@ (80024bc <blink_text_screen_func+0x1bc>)
 80023d4:	461a      	mov	r2, r3
 80023d6:	493a      	ldr	r1, [pc, #232]	@ (80024c0 <blink_text_screen_func+0x1c0>)
 80023d8:	4836      	ldr	r0, [pc, #216]	@ (80024b4 <blink_text_screen_func+0x1b4>)
 80023da:	f005 fe15 	bl	8008008 <siprintf>
				load_cfg.mode = (old_value)?eONE_ONE:eONE_N;
 80023de:	7bbb      	ldrb	r3, [r7, #14]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	bf0c      	ite	eq
 80023e4:	2301      	moveq	r3, #1
 80023e6:	2300      	movne	r3, #0
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	461a      	mov	r2, r3
 80023ec:	4b2d      	ldr	r3, [pc, #180]	@ (80024a4 <blink_text_screen_func+0x1a4>)
 80023ee:	711a      	strb	r2, [r3, #4]
				cmd = eCMD_OutMode;
 80023f0:	23b1      	movs	r3, #177	@ 0xb1
 80023f2:	737b      	strb	r3, [r7, #13]
			break;			
 80023f4:	e04f      	b.n	8002496 <blink_text_screen_func+0x196>
		case eKey_Enter:
			m_cfg.enable_blink = 0;
 80023f6:	4b2a      	ldr	r3, [pc, #168]	@ (80024a0 <blink_text_screen_func+0x1a0>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	729a      	strb	r2, [r3, #10]
			send_cmd_2_backend(cmd, m_cfg.cur_ch, old_value);
 80023fc:	4b28      	ldr	r3, [pc, #160]	@ (80024a0 <blink_text_screen_func+0x1a0>)
 80023fe:	7819      	ldrb	r1, [r3, #0]
 8002400:	7bbb      	ldrb	r3, [r7, #14]
 8002402:	b29a      	uxth	r2, r3
 8002404:	7b7b      	ldrb	r3, [r7, #13]
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff fa9c 	bl	8001944 <send_cmd_2_backend>
			ret_sc = save_data();
 800240c:	f7ff ff52 	bl	80022b4 <save_data>
 8002410:	4603      	mov	r3, r0
 8002412:	73fb      	strb	r3, [r7, #15]
			break;
 8002414:	e03f      	b.n	8002496 <blink_text_screen_func+0x196>
		case eKey_SetMode:
			if(ret_sc == eSET_TRIGGER_SC){
 8002416:	7bfb      	ldrb	r3, [r7, #15]
 8002418:	2b04      	cmp	r3, #4
 800241a:	d10f      	bne.n	800243c <blink_text_screen_func+0x13c>
				sprintf(m_cfg.blink_text[0], "Value : %s \n", (old_value)?"Rising":"Falling");
 800241c:	7bbb      	ldrb	r3, [r7, #14]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <blink_text_screen_func+0x126>
 8002422:	4b22      	ldr	r3, [pc, #136]	@ (80024ac <blink_text_screen_func+0x1ac>)
 8002424:	e000      	b.n	8002428 <blink_text_screen_func+0x128>
 8002426:	4b20      	ldr	r3, [pc, #128]	@ (80024a8 <blink_text_screen_func+0x1a8>)
 8002428:	461a      	mov	r2, r3
 800242a:	4921      	ldr	r1, [pc, #132]	@ (80024b0 <blink_text_screen_func+0x1b0>)
 800242c:	4821      	ldr	r0, [pc, #132]	@ (80024b4 <blink_text_screen_func+0x1b4>)
 800242e:	f005 fdeb 	bl	8008008 <siprintf>
				sprintf(m_cfg.blink_text[1], "Value :         \n");
 8002432:	4924      	ldr	r1, [pc, #144]	@ (80024c4 <blink_text_screen_func+0x1c4>)
 8002434:	4824      	ldr	r0, [pc, #144]	@ (80024c8 <blink_text_screen_func+0x1c8>)
 8002436:	f005 fde7 	bl	8008008 <siprintf>
 800243a:	e011      	b.n	8002460 <blink_text_screen_func+0x160>
			}else{
				sprintf(m_cfg.blink_text[0], "      %s     \n", (old_value)?"1 : N" : "1 : 1");
 800243c:	7bbb      	ldrb	r3, [r7, #14]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <blink_text_screen_func+0x146>
 8002442:	4b1e      	ldr	r3, [pc, #120]	@ (80024bc <blink_text_screen_func+0x1bc>)
 8002444:	e000      	b.n	8002448 <blink_text_screen_func+0x148>
 8002446:	4b1c      	ldr	r3, [pc, #112]	@ (80024b8 <blink_text_screen_func+0x1b8>)
 8002448:	461a      	mov	r2, r3
 800244a:	491d      	ldr	r1, [pc, #116]	@ (80024c0 <blink_text_screen_func+0x1c0>)
 800244c:	4819      	ldr	r0, [pc, #100]	@ (80024b4 <blink_text_screen_func+0x1b4>)
 800244e:	f005 fddb 	bl	8008008 <siprintf>
				sprintf(m_cfg.blink_text[1], "                \n");
 8002452:	491e      	ldr	r1, [pc, #120]	@ (80024cc <blink_text_screen_func+0x1cc>)
 8002454:	481c      	ldr	r0, [pc, #112]	@ (80024c8 <blink_text_screen_func+0x1c8>)
 8002456:	f005 fdd7 	bl	8008008 <siprintf>
				draw_title(eSET_OPMODE);
 800245a:	2005      	movs	r0, #5
 800245c:	f7ff faca 	bl	80019f4 <draw_title>
			}
			m_cfg.blink = 0;
 8002460:	4b0f      	ldr	r3, [pc, #60]	@ (80024a0 <blink_text_screen_func+0x1a0>)
 8002462:	2200      	movs	r2, #0
 8002464:	72da      	strb	r2, [r3, #11]
			m_cfg.blink_row = 2;
 8002466:	4b0e      	ldr	r3, [pc, #56]	@ (80024a0 <blink_text_screen_func+0x1a0>)
 8002468:	2202      	movs	r2, #2
 800246a:	731a      	strb	r2, [r3, #12]
			m_cfg.enable_blink = 1;
 800246c:	4b0c      	ldr	r3, [pc, #48]	@ (80024a0 <blink_text_screen_func+0x1a0>)
 800246e:	2201      	movs	r2, #1
 8002470:	729a      	strb	r2, [r3, #10]
			break;
 8002472:	e010      	b.n	8002496 <blink_text_screen_func+0x196>
		case eKey_Mode:
			if(ret_sc == eSET_TRIGGER_SC){
 8002474:	7bfb      	ldrb	r3, [r7, #15]
 8002476:	2b04      	cmp	r3, #4
 8002478:	d103      	bne.n	8002482 <blink_text_screen_func+0x182>
				draw_title(eCH_TriggerSet);
 800247a:	2003      	movs	r0, #3
 800247c:	f7ff faba 	bl	80019f4 <draw_title>
			}else if(ret_sc == eOPMODE_SC){
				draw_title(eSEL_OPMODE);
			}
			break;
 8002480:	e008      	b.n	8002494 <blink_text_screen_func+0x194>
			}else if(ret_sc == eOPMODE_SC){
 8002482:	7bfb      	ldrb	r3, [r7, #15]
 8002484:	2b05      	cmp	r3, #5
 8002486:	d105      	bne.n	8002494 <blink_text_screen_func+0x194>
				draw_title(eSEL_OPMODE);
 8002488:	2004      	movs	r0, #4
 800248a:	f7ff fab3 	bl	80019f4 <draw_title>
			break;
 800248e:	e001      	b.n	8002494 <blink_text_screen_func+0x194>
		default:
			break;
 8002490:	bf00      	nop
 8002492:	e000      	b.n	8002496 <blink_text_screen_func+0x196>
			break;
 8002494:	bf00      	nop
	}	
	
	return ret_sc;
 8002496:	7bfb      	ldrb	r3, [r7, #15]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20000bd0 	.word	0x20000bd0
 80024a4:	20000c1c 	.word	0x20000c1c
 80024a8:	08009010 	.word	0x08009010
 80024ac:	08009008 	.word	0x08009008
 80024b0:	08009018 	.word	0x08009018
 80024b4:	20000bdd 	.word	0x20000bdd
 80024b8:	08009058 	.word	0x08009058
 80024bc:	08009050 	.word	0x08009050
 80024c0:	08009060 	.word	0x08009060
 80024c4:	0800925c 	.word	0x0800925c
 80024c8:	20000bf1 	.word	0x20000bf1
 80024cc:	08009270 	.word	0x08009270

080024d0 <uart_screen_func>:

ScreenID_t uart_screen_func(Screen_param_t param)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	463b      	mov	r3, r7
 80024d8:	e883 0003 	stmia.w	r3, {r0, r1}
	ScreenID_t ret_sc = param.sc_id;
 80024dc:	783b      	ldrb	r3, [r7, #0]
 80024de:	73fb      	strb	r3, [r7, #15]
	uint8_t old_value = load_cfg.dev_id;
 80024e0:	4b49      	ldr	r3, [pc, #292]	@ (8002608 <uart_screen_func+0x138>)
 80024e2:	795b      	ldrb	r3, [r3, #5]
 80024e4:	73bb      	strb	r3, [r7, #14]

	switch(param.key){
 80024e6:	887b      	ldrh	r3, [r7, #2]
 80024e8:	3b01      	subs	r3, #1
 80024ea:	2b0f      	cmp	r3, #15
 80024ec:	d877      	bhi.n	80025de <uart_screen_func+0x10e>
 80024ee:	a201      	add	r2, pc, #4	@ (adr r2, 80024f4 <uart_screen_func+0x24>)
 80024f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f4:	08002565 	.word	0x08002565
 80024f8:	08002535 	.word	0x08002535
 80024fc:	080025df 	.word	0x080025df
 8002500:	0800254d 	.word	0x0800254d
 8002504:	080025df 	.word	0x080025df
 8002508:	080025df 	.word	0x080025df
 800250c:	080025df 	.word	0x080025df
 8002510:	080025cd 	.word	0x080025cd
 8002514:	080025df 	.word	0x080025df
 8002518:	080025df 	.word	0x080025df
 800251c:	080025df 	.word	0x080025df
 8002520:	080025df 	.word	0x080025df
 8002524:	080025df 	.word	0x080025df
 8002528:	080025df 	.word	0x080025df
 800252c:	080025df 	.word	0x080025df
 8002530:	080025a7 	.word	0x080025a7
		case eKey_Up:
			if(load_cfg.dev_id++ > MAX_DEV_ID){
 8002534:	4b34      	ldr	r3, [pc, #208]	@ (8002608 <uart_screen_func+0x138>)
 8002536:	795b      	ldrb	r3, [r3, #5]
 8002538:	1c5a      	adds	r2, r3, #1
 800253a:	b2d1      	uxtb	r1, r2
 800253c:	4a32      	ldr	r2, [pc, #200]	@ (8002608 <uart_screen_func+0x138>)
 800253e:	7151      	strb	r1, [r2, #5]
 8002540:	2b0a      	cmp	r3, #10
 8002542:	d94e      	bls.n	80025e2 <uart_screen_func+0x112>
				load_cfg.dev_id = 1;
 8002544:	4b30      	ldr	r3, [pc, #192]	@ (8002608 <uart_screen_func+0x138>)
 8002546:	2201      	movs	r2, #1
 8002548:	715a      	strb	r2, [r3, #5]
			}			
			break;
 800254a:	e04a      	b.n	80025e2 <uart_screen_func+0x112>
		case eKey_Down:
			if(load_cfg.dev_id-- <= 1){
 800254c:	4b2e      	ldr	r3, [pc, #184]	@ (8002608 <uart_screen_func+0x138>)
 800254e:	795b      	ldrb	r3, [r3, #5]
 8002550:	1e5a      	subs	r2, r3, #1
 8002552:	b2d1      	uxtb	r1, r2
 8002554:	4a2c      	ldr	r2, [pc, #176]	@ (8002608 <uart_screen_func+0x138>)
 8002556:	7151      	strb	r1, [r2, #5]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d844      	bhi.n	80025e6 <uart_screen_func+0x116>
				load_cfg.dev_id = MAX_DEV_ID;
 800255c:	4b2a      	ldr	r3, [pc, #168]	@ (8002608 <uart_screen_func+0x138>)
 800255e:	220a      	movs	r2, #10
 8002560:	715a      	strb	r2, [r3, #5]
			}			
			break;
 8002562:	e040      	b.n	80025e6 <uart_screen_func+0x116>
		case eKey_Enter:
			if(m_cfg.set_mode){
 8002564:	4b29      	ldr	r3, [pc, #164]	@ (800260c <uart_screen_func+0x13c>)
 8002566:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800256a:	2b00      	cmp	r3, #0
 800256c:	d012      	beq.n	8002594 <uart_screen_func+0xc4>
				LCD_DISP_ON();	// Cursor off
 800256e:	f7ff f913 	bl	8001798 <LCD_DISP_ON>
				send_cmd_2_backend(eCMD_FR_SetDevID, 0, m_cfg.remote_mode);
 8002572:	4b26      	ldr	r3, [pc, #152]	@ (800260c <uart_screen_func+0x13c>)
 8002574:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8002578:	461a      	mov	r2, r3
 800257a:	2100      	movs	r1, #0
 800257c:	20c2      	movs	r0, #194	@ 0xc2
 800257e:	f7ff f9e1 	bl	8001944 <send_cmd_2_backend>
				ret_sc = save_data();
 8002582:	f7ff fe97 	bl	80022b4 <save_data>
 8002586:	4603      	mov	r3, r0
 8002588:	73fb      	strb	r3, [r7, #15]
				m_cfg.set_mode = 0;
 800258a:	4b20      	ldr	r3, [pc, #128]	@ (800260c <uart_screen_func+0x13c>)
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
			}else{
				m_cfg.remote_mode = eREMOTE_RS232;
				ret_sc = eREMOTE_SC;
				run_remote_mode();
			}
			break;			
 8002592:	e02b      	b.n	80025ec <uart_screen_func+0x11c>
				m_cfg.remote_mode = eREMOTE_RS232;
 8002594:	4b1d      	ldr	r3, [pc, #116]	@ (800260c <uart_screen_func+0x13c>)
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
				ret_sc = eREMOTE_SC;
 800259c:	230a      	movs	r3, #10
 800259e:	73fb      	strb	r3, [r7, #15]
				run_remote_mode();
 80025a0:	f7ff fea0 	bl	80022e4 <run_remote_mode>
			break;			
 80025a4:	e022      	b.n	80025ec <uart_screen_func+0x11c>
		case eKey_SetMode:
			m_cfg.set_mode = 1;
 80025a6:	4b19      	ldr	r3, [pc, #100]	@ (800260c <uart_screen_func+0x13c>)
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
			m_cfg.cursor = 14;
 80025ae:	4b17      	ldr	r3, [pc, #92]	@ (800260c <uart_screen_func+0x13c>)
 80025b0:	220e      	movs	r2, #14
 80025b2:	705a      	strb	r2, [r3, #1]
			draw_title(eRS_DevID);
 80025b4:	2006      	movs	r0, #6
 80025b6:	f7ff fa1d 	bl	80019f4 <draw_title>
			LCD_LOCATE(2, m_cfg.cursor);
 80025ba:	4b14      	ldr	r3, [pc, #80]	@ (800260c <uart_screen_func+0x13c>)
 80025bc:	785b      	ldrb	r3, [r3, #1]
 80025be:	4619      	mov	r1, r3
 80025c0:	2002      	movs	r0, #2
 80025c2:	f7ff f8f7 	bl	80017b4 <LCD_LOCATE>
			LCD_DISP_CURSOR();  // Cursor on		
 80025c6:	f7ff f8ee 	bl	80017a6 <LCD_DISP_CURSOR>
			break;
 80025ca:	e00f      	b.n	80025ec <uart_screen_func+0x11c>
		case eKey_Mode:
			if(m_cfg.set_mode == 0){
 80025cc:	4b0f      	ldr	r3, [pc, #60]	@ (800260c <uart_screen_func+0x13c>)
 80025ce:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d109      	bne.n	80025ea <uart_screen_func+0x11a>
				draw_title(eRS_DevID);
 80025d6:	2006      	movs	r0, #6
 80025d8:	f7ff fa0c 	bl	80019f4 <draw_title>
			}
			break;
 80025dc:	e005      	b.n	80025ea <uart_screen_func+0x11a>
		default:
			break;
 80025de:	bf00      	nop
 80025e0:	e004      	b.n	80025ec <uart_screen_func+0x11c>
			break;
 80025e2:	bf00      	nop
 80025e4:	e002      	b.n	80025ec <uart_screen_func+0x11c>
			break;
 80025e6:	bf00      	nop
 80025e8:	e000      	b.n	80025ec <uart_screen_func+0x11c>
			break;
 80025ea:	bf00      	nop
	}
	if(old_value != load_cfg.dev_id){
 80025ec:	4b06      	ldr	r3, [pc, #24]	@ (8002608 <uart_screen_func+0x138>)
 80025ee:	795b      	ldrb	r3, [r3, #5]
 80025f0:	7bba      	ldrb	r2, [r7, #14]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d002      	beq.n	80025fc <uart_screen_func+0x12c>
		draw_title(eRS_DevID);
 80025f6:	2006      	movs	r0, #6
 80025f8:	f7ff f9fc 	bl	80019f4 <draw_title>
	}
	return ret_sc;
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20000c1c 	.word	0x20000c1c
 800260c:	20000bd0 	.word	0x20000bd0

08002610 <check_octet>:

static void check_octet(uint8_t *check_value, uint8_t isUp)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	460b      	mov	r3, r1
 800261a:	70fb      	strb	r3, [r7, #3]
	uint16_t addr = combine_array((int8_t *)check_value);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f7ff fc27 	bl	8001e70 <combine_array>
 8002622:	4603      	mov	r3, r0
 8002624:	81fb      	strh	r3, [r7, #14]
	uint8_t cur_digit = m_cfg.ip_digit;
 8002626:	4b13      	ldr	r3, [pc, #76]	@ (8002674 <check_octet+0x64>)
 8002628:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800262c:	737b      	strb	r3, [r7, #13]

	LOG_DBG("isup[%d] Addr[%x] cur_dig[%d]", isUp, addr, cur_digit);
 800262e:	78f9      	ldrb	r1, [r7, #3]
 8002630:	89fa      	ldrh	r2, [r7, #14]
 8002632:	7b7b      	ldrb	r3, [r7, #13]
 8002634:	4810      	ldr	r0, [pc, #64]	@ (8002678 <check_octet+0x68>)
 8002636:	f7fe fa07 	bl	8000a48 <Printf>

	if(addr > 255){
 800263a:	89fb      	ldrh	r3, [r7, #14]
 800263c:	2bff      	cmp	r3, #255	@ 0xff
 800263e:	d914      	bls.n	800266a <check_octet+0x5a>
		if(cur_digit == 0){
 8002640:	7b7b      	ldrb	r3, [r7, #13]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d103      	bne.n	800264e <check_octet+0x3e>
			check_value[0] = 0;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	701a      	strb	r2, [r3, #0]
			}else{ // 29x or 259
				check_value[cur_digit] = 5;
			}
		}
	}	
}
 800264c:	e00d      	b.n	800266a <check_octet+0x5a>
			if(isUp){
 800264e:	78fb      	ldrb	r3, [r7, #3]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d005      	beq.n	8002660 <check_octet+0x50>
				check_value[cur_digit] = 0;
 8002654:	7b7b      	ldrb	r3, [r7, #13]
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	4413      	add	r3, r2
 800265a:	2200      	movs	r2, #0
 800265c:	701a      	strb	r2, [r3, #0]
}
 800265e:	e004      	b.n	800266a <check_octet+0x5a>
				check_value[cur_digit] = 5;
 8002660:	7b7b      	ldrb	r3, [r7, #13]
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	4413      	add	r3, r2
 8002666:	2205      	movs	r2, #5
 8002668:	701a      	strb	r2, [r3, #0]
}
 800266a:	bf00      	nop
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20000bd0 	.word	0x20000bd0
 8002678:	08009284 	.word	0x08009284

0800267c <ip_screen_func>:

ScreenID_t ip_screen_func(Screen_param_t param)
{
 800267c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800267e:	b08f      	sub	sp, #60	@ 0x3c
 8002680:	af02      	add	r7, sp, #8
 8002682:	463b      	mov	r3, r7
 8002684:	e883 0003 	stmia.w	r3, {r0, r1}
	ScreenID_t ret_sc = param.sc_id;	
 8002688:	783b      	ldrb	r3, [r7, #0]
 800268a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t temp_addr[3];
	char line_buf[LCD_PRINT_MAX];
	int i;
	uint8_t is_up = 0;
 800268e:	2300      	movs	r3, #0
 8002690:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t old_cursor = m_cfg.cursor;
 8002694:	4baf      	ldr	r3, [pc, #700]	@ (8002954 <ip_screen_func+0x2d8>)
 8002696:	785b      	ldrb	r3, [r3, #1]
 8002698:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	
	switch(param.key){
 800269c:	887b      	ldrh	r3, [r7, #2]
 800269e:	3b01      	subs	r3, #1
 80026a0:	2b0f      	cmp	r3, #15
 80026a2:	f200 81a0 	bhi.w	80029e6 <ip_screen_func+0x36a>
 80026a6:	a201      	add	r2, pc, #4	@ (adr r2, 80026ac <ip_screen_func+0x30>)
 80026a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ac:	080028d9 	.word	0x080028d9
 80026b0:	080026ed 	.word	0x080026ed
 80026b4:	080029e7 	.word	0x080029e7
 80026b8:	080026ed 	.word	0x080026ed
 80026bc:	080029e7 	.word	0x080029e7
 80026c0:	080029e7 	.word	0x080029e7
 80026c4:	080029e7 	.word	0x080029e7
 80026c8:	080029d5 	.word	0x080029d5
 80026cc:	080029e7 	.word	0x080029e7
 80026d0:	08002801 	.word	0x08002801
 80026d4:	080029e7 	.word	0x080029e7
 80026d8:	0800286d 	.word	0x0800286d
 80026dc:	080029e7 	.word	0x080029e7
 80026e0:	080029e7 	.word	0x080029e7
 80026e4:	080029e7 	.word	0x080029e7
 80026e8:	08002947 	.word	0x08002947
		case eKey_Up:
		case eKey_Down:
			memcpy(temp_addr, m_cfg.ipaddr[m_cfg.ip_idx],3);
 80026ec:	4b99      	ldr	r3, [pc, #612]	@ (8002954 <ip_screen_func+0x2d8>)
 80026ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026f2:	461a      	mov	r2, r3
 80026f4:	4613      	mov	r3, r2
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	4413      	add	r3, r2
 80026fa:	3330      	adds	r3, #48	@ 0x30
 80026fc:	4a95      	ldr	r2, [pc, #596]	@ (8002954 <ip_screen_func+0x2d8>)
 80026fe:	4413      	add	r3, r2
 8002700:	1d5a      	adds	r2, r3, #5
 8002702:	f107 0320 	add.w	r3, r7, #32
 8002706:	8811      	ldrh	r1, [r2, #0]
 8002708:	7892      	ldrb	r2, [r2, #2]
 800270a:	8019      	strh	r1, [r3, #0]
 800270c:	709a      	strb	r2, [r3, #2]
			if(param.key == eKey_Up){
 800270e:	887b      	ldrh	r3, [r7, #2]
 8002710:	2b02      	cmp	r3, #2
 8002712:	d111      	bne.n	8002738 <ip_screen_func+0xbc>
				temp_addr[m_cfg.ip_digit]++;
 8002714:	4b8f      	ldr	r3, [pc, #572]	@ (8002954 <ip_screen_func+0x2d8>)
 8002716:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800271a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800271e:	443a      	add	r2, r7
 8002720:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8002724:	3201      	adds	r2, #1
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	3330      	adds	r3, #48	@ 0x30
 800272a:	443b      	add	r3, r7
 800272c:	f803 2c10 	strb.w	r2, [r3, #-16]
				is_up = 1;
 8002730:	2301      	movs	r3, #1
 8002732:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002736:	e01f      	b.n	8002778 <ip_screen_func+0xfc>
			}else{
				if(temp_addr[m_cfg.ip_digit] == 0){
 8002738:	4b86      	ldr	r3, [pc, #536]	@ (8002954 <ip_screen_func+0x2d8>)
 800273a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800273e:	3330      	adds	r3, #48	@ 0x30
 8002740:	443b      	add	r3, r7
 8002742:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d108      	bne.n	800275c <ip_screen_func+0xe0>
					temp_addr[m_cfg.ip_digit] = 9;
 800274a:	4b82      	ldr	r3, [pc, #520]	@ (8002954 <ip_screen_func+0x2d8>)
 800274c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002750:	3330      	adds	r3, #48	@ 0x30
 8002752:	443b      	add	r3, r7
 8002754:	2209      	movs	r2, #9
 8002756:	f803 2c10 	strb.w	r2, [r3, #-16]
 800275a:	e00d      	b.n	8002778 <ip_screen_func+0xfc>
				}else{
					temp_addr[m_cfg.ip_digit]--;
 800275c:	4b7d      	ldr	r3, [pc, #500]	@ (8002954 <ip_screen_func+0x2d8>)
 800275e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002762:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8002766:	443a      	add	r2, r7
 8002768:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800276c:	3a01      	subs	r2, #1
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	3330      	adds	r3, #48	@ 0x30
 8002772:	443b      	add	r3, r7
 8002774:	f803 2c10 	strb.w	r2, [r3, #-16]
				}
			}
			check_octet(temp_addr, is_up);
 8002778:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800277c:	f107 0320 	add.w	r3, r7, #32
 8002780:	4611      	mov	r1, r2
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff ff44 	bl	8002610 <check_octet>
			memcpy(m_cfg.ipaddr[m_cfg.ip_idx], temp_addr, 3);
 8002788:	4b72      	ldr	r3, [pc, #456]	@ (8002954 <ip_screen_func+0x2d8>)
 800278a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800278e:	461a      	mov	r2, r3
 8002790:	4613      	mov	r3, r2
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	4413      	add	r3, r2
 8002796:	3330      	adds	r3, #48	@ 0x30
 8002798:	4a6e      	ldr	r2, [pc, #440]	@ (8002954 <ip_screen_func+0x2d8>)
 800279a:	4413      	add	r3, r2
 800279c:	3305      	adds	r3, #5
 800279e:	461a      	mov	r2, r3
 80027a0:	f107 0320 	add.w	r3, r7, #32
 80027a4:	8819      	ldrh	r1, [r3, #0]
 80027a6:	789b      	ldrb	r3, [r3, #2]
 80027a8:	8011      	strh	r1, [r2, #0]
 80027aa:	7093      	strb	r3, [r2, #2]
			sprintf(line_buf, "%03d.%03d.%03d.%03d ",	(uint8_t)combine_array(m_cfg.ipaddr[0]),
 80027ac:	486a      	ldr	r0, [pc, #424]	@ (8002958 <ip_screen_func+0x2dc>)
 80027ae:	f7ff fb5f 	bl	8001e70 <combine_array>
 80027b2:	4603      	mov	r3, r0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	461d      	mov	r5, r3
														(uint8_t)combine_array(m_cfg.ipaddr[1]),
 80027b8:	4868      	ldr	r0, [pc, #416]	@ (800295c <ip_screen_func+0x2e0>)
 80027ba:	f7ff fb59 	bl	8001e70 <combine_array>
 80027be:	4603      	mov	r3, r0
 80027c0:	b2db      	uxtb	r3, r3
			sprintf(line_buf, "%03d.%03d.%03d.%03d ",	(uint8_t)combine_array(m_cfg.ipaddr[0]),
 80027c2:	461e      	mov	r6, r3
														(uint8_t)combine_array(m_cfg.ipaddr[2]),
 80027c4:	4866      	ldr	r0, [pc, #408]	@ (8002960 <ip_screen_func+0x2e4>)
 80027c6:	f7ff fb53 	bl	8001e70 <combine_array>
 80027ca:	4603      	mov	r3, r0
 80027cc:	b2db      	uxtb	r3, r3
			sprintf(line_buf, "%03d.%03d.%03d.%03d ",	(uint8_t)combine_array(m_cfg.ipaddr[0]),
 80027ce:	461c      	mov	r4, r3
														(uint8_t)combine_array(m_cfg.ipaddr[3]));
 80027d0:	4864      	ldr	r0, [pc, #400]	@ (8002964 <ip_screen_func+0x2e8>)
 80027d2:	f7ff fb4d 	bl	8001e70 <combine_array>
 80027d6:	4603      	mov	r3, r0
 80027d8:	b2db      	uxtb	r3, r3
			sprintf(line_buf, "%03d.%03d.%03d.%03d ",	(uint8_t)combine_array(m_cfg.ipaddr[0]),
 80027da:	f107 000c 	add.w	r0, r7, #12
 80027de:	9301      	str	r3, [sp, #4]
 80027e0:	9400      	str	r4, [sp, #0]
 80027e2:	4633      	mov	r3, r6
 80027e4:	462a      	mov	r2, r5
 80027e6:	4960      	ldr	r1, [pc, #384]	@ (8002968 <ip_screen_func+0x2ec>)
 80027e8:	f005 fc0e 	bl	8008008 <siprintf>
			LCD_LOCATE(2,1);
 80027ec:	2101      	movs	r1, #1
 80027ee:	2002      	movs	r0, #2
 80027f0:	f7fe ffe0 	bl	80017b4 <LCD_LOCATE>
			LCD_printstring(line_buf);
 80027f4:	f107 030c 	add.w	r3, r7, #12
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7fe ffaf 	bl	800175c <LCD_printstring>
			break;
 80027fe:	e0f9      	b.n	80029f4 <ip_screen_func+0x378>
		case eKey_CursorUp:
			if(m_cfg.cursor--<=0){
 8002800:	4b54      	ldr	r3, [pc, #336]	@ (8002954 <ip_screen_func+0x2d8>)
 8002802:	785b      	ldrb	r3, [r3, #1]
 8002804:	1e5a      	subs	r2, r3, #1
 8002806:	b2d1      	uxtb	r1, r2
 8002808:	4a52      	ldr	r2, [pc, #328]	@ (8002954 <ip_screen_func+0x2d8>)
 800280a:	7051      	strb	r1, [r2, #1]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10a      	bne.n	8002826 <ip_screen_func+0x1aa>
				m_cfg.cursor = 15;
 8002810:	4b50      	ldr	r3, [pc, #320]	@ (8002954 <ip_screen_func+0x2d8>)
 8002812:	220f      	movs	r2, #15
 8002814:	705a      	strb	r2, [r3, #1]
				m_cfg.ip_idx = 3;
 8002816:	4b4f      	ldr	r3, [pc, #316]	@ (8002954 <ip_screen_func+0x2d8>)
 8002818:	2203      	movs	r2, #3
 800281a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
				m_cfg.ip_digit=2;
 800281e:	4b4d      	ldr	r3, [pc, #308]	@ (8002954 <ip_screen_func+0x2d8>)
 8002820:	2202      	movs	r2, #2
 8002822:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
			}
			m_cfg.ip_digit--;
 8002826:	4b4b      	ldr	r3, [pc, #300]	@ (8002954 <ip_screen_func+0x2d8>)
 8002828:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800282c:	3b01      	subs	r3, #1
 800282e:	b2da      	uxtb	r2, r3
 8002830:	4b48      	ldr	r3, [pc, #288]	@ (8002954 <ip_screen_func+0x2d8>)
 8002832:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
			if(m_cfg.cursor%4 == 0){
 8002836:	4b47      	ldr	r3, [pc, #284]	@ (8002954 <ip_screen_func+0x2d8>)
 8002838:	785b      	ldrb	r3, [r3, #1]
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b00      	cmp	r3, #0
 8002842:	f040 80d2 	bne.w	80029ea <ip_screen_func+0x36e>
				m_cfg.cursor--;
 8002846:	4b43      	ldr	r3, [pc, #268]	@ (8002954 <ip_screen_func+0x2d8>)
 8002848:	785b      	ldrb	r3, [r3, #1]
 800284a:	3b01      	subs	r3, #1
 800284c:	b2da      	uxtb	r2, r3
 800284e:	4b41      	ldr	r3, [pc, #260]	@ (8002954 <ip_screen_func+0x2d8>)
 8002850:	705a      	strb	r2, [r3, #1]
				m_cfg.ip_idx--;
 8002852:	4b40      	ldr	r3, [pc, #256]	@ (8002954 <ip_screen_func+0x2d8>)
 8002854:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002858:	3b01      	subs	r3, #1
 800285a:	b2da      	uxtb	r2, r3
 800285c:	4b3d      	ldr	r3, [pc, #244]	@ (8002954 <ip_screen_func+0x2d8>)
 800285e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
				m_cfg.ip_digit=2;
 8002862:	4b3c      	ldr	r3, [pc, #240]	@ (8002954 <ip_screen_func+0x2d8>)
 8002864:	2202      	movs	r2, #2
 8002866:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
			}
			break;
 800286a:	e0be      	b.n	80029ea <ip_screen_func+0x36e>
		case eKey_CursorDown:
			if(m_cfg.cursor++>=15){
 800286c:	4b39      	ldr	r3, [pc, #228]	@ (8002954 <ip_screen_func+0x2d8>)
 800286e:	785b      	ldrb	r3, [r3, #1]
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	b2d1      	uxtb	r1, r2
 8002874:	4a37      	ldr	r2, [pc, #220]	@ (8002954 <ip_screen_func+0x2d8>)
 8002876:	7051      	strb	r1, [r2, #1]
 8002878:	2b0e      	cmp	r3, #14
 800287a:	d90a      	bls.n	8002892 <ip_screen_func+0x216>
				m_cfg.cursor = 1;
 800287c:	4b35      	ldr	r3, [pc, #212]	@ (8002954 <ip_screen_func+0x2d8>)
 800287e:	2201      	movs	r2, #1
 8002880:	705a      	strb	r2, [r3, #1]
				m_cfg.ip_idx = 0;
 8002882:	4b34      	ldr	r3, [pc, #208]	@ (8002954 <ip_screen_func+0x2d8>)
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
				m_cfg.ip_digit =0;
 800288a:	4b32      	ldr	r3, [pc, #200]	@ (8002954 <ip_screen_func+0x2d8>)
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
			}
			m_cfg.ip_digit++;
 8002892:	4b30      	ldr	r3, [pc, #192]	@ (8002954 <ip_screen_func+0x2d8>)
 8002894:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002898:	3301      	adds	r3, #1
 800289a:	b2da      	uxtb	r2, r3
 800289c:	4b2d      	ldr	r3, [pc, #180]	@ (8002954 <ip_screen_func+0x2d8>)
 800289e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
			if(m_cfg.cursor%4 == 0){
 80028a2:	4b2c      	ldr	r3, [pc, #176]	@ (8002954 <ip_screen_func+0x2d8>)
 80028a4:	785b      	ldrb	r3, [r3, #1]
 80028a6:	f003 0303 	and.w	r3, r3, #3
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f040 809e 	bne.w	80029ee <ip_screen_func+0x372>
				m_cfg.cursor++;
 80028b2:	4b28      	ldr	r3, [pc, #160]	@ (8002954 <ip_screen_func+0x2d8>)
 80028b4:	785b      	ldrb	r3, [r3, #1]
 80028b6:	3301      	adds	r3, #1
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	4b26      	ldr	r3, [pc, #152]	@ (8002954 <ip_screen_func+0x2d8>)
 80028bc:	705a      	strb	r2, [r3, #1]
				m_cfg.ip_idx++;
 80028be:	4b25      	ldr	r3, [pc, #148]	@ (8002954 <ip_screen_func+0x2d8>)
 80028c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028c4:	3301      	adds	r3, #1
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	4b22      	ldr	r3, [pc, #136]	@ (8002954 <ip_screen_func+0x2d8>)
 80028ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
				m_cfg.ip_digit = 0;
 80028ce:	4b21      	ldr	r3, [pc, #132]	@ (8002954 <ip_screen_func+0x2d8>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
			}
			break;
 80028d6:	e08a      	b.n	80029ee <ip_screen_func+0x372>
		case eKey_Enter:
			if(m_cfg.set_mode){
 80028d8:	4b1e      	ldr	r3, [pc, #120]	@ (8002954 <ip_screen_func+0x2d8>)
 80028da:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d027      	beq.n	8002932 <ip_screen_func+0x2b6>
				LCD_DISP_ON();	// Cursor off
 80028e2:	f7fe ff59 	bl	8001798 <LCD_DISP_ON>
				for(i = 0; i < 4; i++){
 80028e6:	2300      	movs	r3, #0
 80028e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028ea:	e015      	b.n	8002918 <ip_screen_func+0x29c>
					load_cfg.ether.ipaddr[i] = combine_array(m_cfg.ipaddr[i]);
 80028ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028ee:	4613      	mov	r3, r2
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	4413      	add	r3, r2
 80028f4:	3330      	adds	r3, #48	@ 0x30
 80028f6:	4a17      	ldr	r2, [pc, #92]	@ (8002954 <ip_screen_func+0x2d8>)
 80028f8:	4413      	add	r3, r2
 80028fa:	3305      	adds	r3, #5
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff fab7 	bl	8001e70 <combine_array>
 8002902:	4603      	mov	r3, r0
 8002904:	b2d9      	uxtb	r1, r3
 8002906:	4a19      	ldr	r2, [pc, #100]	@ (800296c <ip_screen_func+0x2f0>)
 8002908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800290a:	4413      	add	r3, r2
 800290c:	332f      	adds	r3, #47	@ 0x2f
 800290e:	460a      	mov	r2, r1
 8002910:	701a      	strb	r2, [r3, #0]
				for(i = 0; i < 4; i++){
 8002912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002914:	3301      	adds	r3, #1
 8002916:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800291a:	2b03      	cmp	r3, #3
 800291c:	dde6      	ble.n	80028ec <ip_screen_func+0x270>
				}
				ret_sc = save_data();
 800291e:	f7ff fcc9 	bl	80022b4 <save_data>
 8002922:	4603      	mov	r3, r0
 8002924:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				m_cfg.set_mode = 0;
 8002928:	4b0a      	ldr	r3, [pc, #40]	@ (8002954 <ip_screen_func+0x2d8>)
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
				//push_event0(EVT_Remote_Ether);
				m_cfg.remote_mode = eREMOTE_ETHER;
				ret_sc = eREMOTE_SC;
				run_remote_mode();
			}
			break;			
 8002930:	e060      	b.n	80029f4 <ip_screen_func+0x378>
				m_cfg.remote_mode = eREMOTE_ETHER;
 8002932:	4b08      	ldr	r3, [pc, #32]	@ (8002954 <ip_screen_func+0x2d8>)
 8002934:	2201      	movs	r2, #1
 8002936:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
				ret_sc = eREMOTE_SC;
 800293a:	230a      	movs	r3, #10
 800293c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				run_remote_mode();
 8002940:	f7ff fcd0 	bl	80022e4 <run_remote_mode>
			break;			
 8002944:	e056      	b.n	80029f4 <ip_screen_func+0x378>
		case eKey_SetMode:
			m_cfg.digit_num = 2;
 8002946:	4b03      	ldr	r3, [pc, #12]	@ (8002954 <ip_screen_func+0x2d8>)
 8002948:	2202      	movs	r2, #2
 800294a:	71da      	strb	r2, [r3, #7]
			for(i = 0; i < 4; i++){
 800294c:	2300      	movs	r3, #0
 800294e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002950:	e022      	b.n	8002998 <ip_screen_func+0x31c>
 8002952:	bf00      	nop
 8002954:	20000bd0 	.word	0x20000bd0
 8002958:	20000c05 	.word	0x20000c05
 800295c:	20000c08 	.word	0x20000c08
 8002960:	20000c0b 	.word	0x20000c0b
 8002964:	20000c0e 	.word	0x20000c0e
 8002968:	080090d0 	.word	0x080090d0
 800296c:	20000c1c 	.word	0x20000c1c
				split_num(load_cfg.ether.ipaddr[i], m_cfg.ipaddr[i]);
 8002970:	4a29      	ldr	r2, [pc, #164]	@ (8002a18 <ip_screen_func+0x39c>)
 8002972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002974:	4413      	add	r3, r2
 8002976:	332f      	adds	r3, #47	@ 0x2f
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800297e:	4613      	mov	r3, r2
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	4413      	add	r3, r2
 8002984:	3330      	adds	r3, #48	@ 0x30
 8002986:	4a25      	ldr	r2, [pc, #148]	@ (8002a1c <ip_screen_func+0x3a0>)
 8002988:	4413      	add	r3, r2
 800298a:	3305      	adds	r3, #5
 800298c:	4619      	mov	r1, r3
 800298e:	f7ff fa31 	bl	8001df4 <split_num>
			for(i = 0; i < 4; i++){
 8002992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002994:	3301      	adds	r3, #1
 8002996:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800299a:	2b03      	cmp	r3, #3
 800299c:	dde8      	ble.n	8002970 <ip_screen_func+0x2f4>
			}
			m_cfg.cursor = 15;
 800299e:	4b1f      	ldr	r3, [pc, #124]	@ (8002a1c <ip_screen_func+0x3a0>)
 80029a0:	220f      	movs	r2, #15
 80029a2:	705a      	strb	r2, [r3, #1]
			m_cfg.ip_idx = 3;
 80029a4:	4b1d      	ldr	r3, [pc, #116]	@ (8002a1c <ip_screen_func+0x3a0>)
 80029a6:	2203      	movs	r2, #3
 80029a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			m_cfg.ip_digit = 2;
 80029ac:	4b1b      	ldr	r3, [pc, #108]	@ (8002a1c <ip_screen_func+0x3a0>)
 80029ae:	2202      	movs	r2, #2
 80029b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
			m_cfg.set_mode = 1;
 80029b4:	4b19      	ldr	r3, [pc, #100]	@ (8002a1c <ip_screen_func+0x3a0>)
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
			LCD_LOCATE(2, m_cfg.cursor);
 80029bc:	4b17      	ldr	r3, [pc, #92]	@ (8002a1c <ip_screen_func+0x3a0>)
 80029be:	785b      	ldrb	r3, [r3, #1]
 80029c0:	4619      	mov	r1, r3
 80029c2:	2002      	movs	r0, #2
 80029c4:	f7fe fef6 	bl	80017b4 <LCD_LOCATE>
			LCD_DISP_CURSOR();  // Cursor on		
 80029c8:	f7fe feed 	bl	80017a6 <LCD_DISP_CURSOR>
			draw_title(eIP_Set);			
 80029cc:	2007      	movs	r0, #7
 80029ce:	f7ff f811 	bl	80019f4 <draw_title>
			break;
 80029d2:	e00f      	b.n	80029f4 <ip_screen_func+0x378>
		case eKey_Mode:
			if(m_cfg.set_mode == 0){
 80029d4:	4b11      	ldr	r3, [pc, #68]	@ (8002a1c <ip_screen_func+0x3a0>)
 80029d6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d109      	bne.n	80029f2 <ip_screen_func+0x376>
				draw_title(eIP_Set);
 80029de:	2007      	movs	r0, #7
 80029e0:	f7ff f808 	bl	80019f4 <draw_title>
			}
			break;
 80029e4:	e005      	b.n	80029f2 <ip_screen_func+0x376>
		default:
			break;
 80029e6:	bf00      	nop
 80029e8:	e004      	b.n	80029f4 <ip_screen_func+0x378>
			break;
 80029ea:	bf00      	nop
 80029ec:	e002      	b.n	80029f4 <ip_screen_func+0x378>
			break;
 80029ee:	bf00      	nop
 80029f0:	e000      	b.n	80029f4 <ip_screen_func+0x378>
			break;
 80029f2:	bf00      	nop
	}

	if(m_cfg.cursor != old_cursor){
 80029f4:	4b09      	ldr	r3, [pc, #36]	@ (8002a1c <ip_screen_func+0x3a0>)
 80029f6:	785b      	ldrb	r3, [r3, #1]
 80029f8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d005      	beq.n	8002a0c <ip_screen_func+0x390>
		LCD_LOCATE(2, m_cfg.cursor);
 8002a00:	4b06      	ldr	r3, [pc, #24]	@ (8002a1c <ip_screen_func+0x3a0>)
 8002a02:	785b      	ldrb	r3, [r3, #1]
 8002a04:	4619      	mov	r1, r3
 8002a06:	2002      	movs	r0, #2
 8002a08:	f7fe fed4 	bl	80017b4 <LCD_LOCATE>
	}
	return ret_sc;
 8002a0c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3734      	adds	r7, #52	@ 0x34
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a18:	20000c1c 	.word	0x20000c1c
 8002a1c:	20000bd0 	.word	0x20000bd0

08002a20 <port_screen_func>:
ScreenID_t port_screen_func(Screen_param_t param)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b08a      	sub	sp, #40	@ 0x28
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	463b      	mov	r3, r7
 8002a28:	e883 0003 	stmia.w	r3, {r0, r1}
	ScreenID_t ret_sc = eMAX_SCREEN_ID;
 8002a2c:	230f      	movs	r3, #15
 8002a2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t old_cursor = m_cfg.cursor;
 8002a32:	4b97      	ldr	r3, [pc, #604]	@ (8002c90 <port_screen_func+0x270>)
 8002a34:	785b      	ldrb	r3, [r3, #1]
 8002a36:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	uint8_t temp_port[5];
	char line_buf[LCD_PRINT_MAX];
	
	switch(param.key){
 8002a3a:	887b      	ldrh	r3, [r7, #2]
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	2b0f      	cmp	r3, #15
 8002a40:	f200 8113 	bhi.w	8002c6a <port_screen_func+0x24a>
 8002a44:	a201      	add	r2, pc, #4	@ (adr r2, 8002a4c <port_screen_func+0x2c>)
 8002a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a4a:	bf00      	nop
 8002a4c:	08002bcf 	.word	0x08002bcf
 8002a50:	08002a8d 	.word	0x08002a8d
 8002a54:	08002c6b 	.word	0x08002c6b
 8002a58:	08002a8d 	.word	0x08002a8d
 8002a5c:	08002c6b 	.word	0x08002c6b
 8002a60:	08002c6b 	.word	0x08002c6b
 8002a64:	08002c6b 	.word	0x08002c6b
 8002a68:	08002c59 	.word	0x08002c59
 8002a6c:	08002c6b 	.word	0x08002c6b
 8002a70:	08002b6b 	.word	0x08002b6b
 8002a74:	08002c6b 	.word	0x08002c6b
 8002a78:	08002b9d 	.word	0x08002b9d
 8002a7c:	08002c6b 	.word	0x08002c6b
 8002a80:	08002c6b 	.word	0x08002c6b
 8002a84:	08002c6b 	.word	0x08002c6b
 8002a88:	08002c15 	.word	0x08002c15
		case eKey_Up:
		case eKey_Down:
			memcpy(temp_port, m_cfg.port, 5);
 8002a8c:	4a80      	ldr	r2, [pc, #512]	@ (8002c90 <port_screen_func+0x270>)
 8002a8e:	f107 0320 	add.w	r3, r7, #32
 8002a92:	3243      	adds	r2, #67	@ 0x43
 8002a94:	6810      	ldr	r0, [r2, #0]
 8002a96:	6018      	str	r0, [r3, #0]
 8002a98:	7912      	ldrb	r2, [r2, #4]
 8002a9a:	711a      	strb	r2, [r3, #4]
			if(param.key == eKey_Up){
 8002a9c:	887b      	ldrh	r3, [r7, #2]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d120      	bne.n	8002ae4 <port_screen_func+0xc4>
				if(temp_port[m_cfg.ip_digit] == 9){
 8002aa2:	4b7b      	ldr	r3, [pc, #492]	@ (8002c90 <port_screen_func+0x270>)
 8002aa4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002aa8:	3328      	adds	r3, #40	@ 0x28
 8002aaa:	443b      	add	r3, r7
 8002aac:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8002ab0:	2b09      	cmp	r3, #9
 8002ab2:	d108      	bne.n	8002ac6 <port_screen_func+0xa6>
					temp_port[m_cfg.ip_digit] = 0;
 8002ab4:	4b76      	ldr	r3, [pc, #472]	@ (8002c90 <port_screen_func+0x270>)
 8002ab6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002aba:	3328      	adds	r3, #40	@ 0x28
 8002abc:	443b      	add	r3, r7
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002ac4:	e02e      	b.n	8002b24 <port_screen_func+0x104>
				}else{
					temp_port[m_cfg.ip_digit]++;
 8002ac6:	4b72      	ldr	r3, [pc, #456]	@ (8002c90 <port_screen_func+0x270>)
 8002ac8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002acc:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8002ad0:	443a      	add	r2, r7
 8002ad2:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8002ad6:	3201      	adds	r2, #1
 8002ad8:	b2d2      	uxtb	r2, r2
 8002ada:	3328      	adds	r3, #40	@ 0x28
 8002adc:	443b      	add	r3, r7
 8002ade:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002ae2:	e01f      	b.n	8002b24 <port_screen_func+0x104>
				}
			}else{
				if(temp_port[m_cfg.ip_digit] == 0){
 8002ae4:	4b6a      	ldr	r3, [pc, #424]	@ (8002c90 <port_screen_func+0x270>)
 8002ae6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002aea:	3328      	adds	r3, #40	@ 0x28
 8002aec:	443b      	add	r3, r7
 8002aee:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d108      	bne.n	8002b08 <port_screen_func+0xe8>
					temp_port[m_cfg.ip_digit] = 9;
 8002af6:	4b66      	ldr	r3, [pc, #408]	@ (8002c90 <port_screen_func+0x270>)
 8002af8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002afc:	3328      	adds	r3, #40	@ 0x28
 8002afe:	443b      	add	r3, r7
 8002b00:	2209      	movs	r2, #9
 8002b02:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002b06:	e00d      	b.n	8002b24 <port_screen_func+0x104>
				}else{
					temp_port[m_cfg.ip_digit]--;
 8002b08:	4b61      	ldr	r3, [pc, #388]	@ (8002c90 <port_screen_func+0x270>)
 8002b0a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002b0e:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8002b12:	443a      	add	r2, r7
 8002b14:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8002b18:	3a01      	subs	r2, #1
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	3328      	adds	r3, #40	@ 0x28
 8002b1e:	443b      	add	r3, r7
 8002b20:	f803 2c08 	strb.w	r2, [r3, #-8]
				}
			}
			memcpy(m_cfg.port, temp_port, 5);
 8002b24:	4b5a      	ldr	r3, [pc, #360]	@ (8002c90 <port_screen_func+0x270>)
 8002b26:	3343      	adds	r3, #67	@ 0x43
 8002b28:	f107 0220 	add.w	r2, r7, #32
 8002b2c:	6810      	ldr	r0, [r2, #0]
 8002b2e:	6018      	str	r0, [r3, #0]
 8002b30:	7912      	ldrb	r2, [r2, #4]
 8002b32:	711a      	strb	r2, [r3, #4]
			sprintf(line_buf, "Port : %05d    ", combine_array(m_cfg.port));
 8002b34:	4857      	ldr	r0, [pc, #348]	@ (8002c94 <port_screen_func+0x274>)
 8002b36:	f7ff f99b 	bl	8001e70 <combine_array>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	f107 030c 	add.w	r3, r7, #12
 8002b42:	4955      	ldr	r1, [pc, #340]	@ (8002c98 <port_screen_func+0x278>)
 8002b44:	4618      	mov	r0, r3
 8002b46:	f005 fa5f 	bl	8008008 <siprintf>
			LCD_LOCATE(2,1);
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	2002      	movs	r0, #2
 8002b4e:	f7fe fe31 	bl	80017b4 <LCD_LOCATE>
			LCD_printstring(line_buf);
 8002b52:	f107 030c 	add.w	r3, r7, #12
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fe fe00 	bl	800175c <LCD_printstring>
			LCD_LOCATE(2,m_cfg.cursor);
 8002b5c:	4b4c      	ldr	r3, [pc, #304]	@ (8002c90 <port_screen_func+0x270>)
 8002b5e:	785b      	ldrb	r3, [r3, #1]
 8002b60:	4619      	mov	r1, r3
 8002b62:	2002      	movs	r0, #2
 8002b64:	f7fe fe26 	bl	80017b4 <LCD_LOCATE>
			break;
 8002b68:	e07f      	b.n	8002c6a <port_screen_func+0x24a>
		case eKey_CursorUp:
			if(m_cfg.cursor--<=7){
 8002b6a:	4b49      	ldr	r3, [pc, #292]	@ (8002c90 <port_screen_func+0x270>)
 8002b6c:	785b      	ldrb	r3, [r3, #1]
 8002b6e:	1e5a      	subs	r2, r3, #1
 8002b70:	b2d1      	uxtb	r1, r2
 8002b72:	4a47      	ldr	r2, [pc, #284]	@ (8002c90 <port_screen_func+0x270>)
 8002b74:	7051      	strb	r1, [r2, #1]
 8002b76:	2b07      	cmp	r3, #7
 8002b78:	d807      	bhi.n	8002b8a <port_screen_func+0x16a>
				m_cfg.cursor = 11;
 8002b7a:	4b45      	ldr	r3, [pc, #276]	@ (8002c90 <port_screen_func+0x270>)
 8002b7c:	220b      	movs	r2, #11
 8002b7e:	705a      	strb	r2, [r3, #1]
				m_cfg.ip_digit=4;
 8002b80:	4b43      	ldr	r3, [pc, #268]	@ (8002c90 <port_screen_func+0x270>)
 8002b82:	2204      	movs	r2, #4
 8002b84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
			}else{
				m_cfg.ip_digit--;
			}
			break;
 8002b88:	e06f      	b.n	8002c6a <port_screen_func+0x24a>
				m_cfg.ip_digit--;
 8002b8a:	4b41      	ldr	r3, [pc, #260]	@ (8002c90 <port_screen_func+0x270>)
 8002b8c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002b90:	3b01      	subs	r3, #1
 8002b92:	b2da      	uxtb	r2, r3
 8002b94:	4b3e      	ldr	r3, [pc, #248]	@ (8002c90 <port_screen_func+0x270>)
 8002b96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
			break;
 8002b9a:	e066      	b.n	8002c6a <port_screen_func+0x24a>
		case eKey_CursorDown:
			if(m_cfg.cursor++>=11){
 8002b9c:	4b3c      	ldr	r3, [pc, #240]	@ (8002c90 <port_screen_func+0x270>)
 8002b9e:	785b      	ldrb	r3, [r3, #1]
 8002ba0:	1c5a      	adds	r2, r3, #1
 8002ba2:	b2d1      	uxtb	r1, r2
 8002ba4:	4a3a      	ldr	r2, [pc, #232]	@ (8002c90 <port_screen_func+0x270>)
 8002ba6:	7051      	strb	r1, [r2, #1]
 8002ba8:	2b0a      	cmp	r3, #10
 8002baa:	d907      	bls.n	8002bbc <port_screen_func+0x19c>
				m_cfg.cursor = 7;
 8002bac:	4b38      	ldr	r3, [pc, #224]	@ (8002c90 <port_screen_func+0x270>)
 8002bae:	2207      	movs	r2, #7
 8002bb0:	705a      	strb	r2, [r3, #1]
				m_cfg.ip_digit =0;
 8002bb2:	4b37      	ldr	r3, [pc, #220]	@ (8002c90 <port_screen_func+0x270>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
			}else{
				m_cfg.ip_digit++;
			}
			break;
 8002bba:	e056      	b.n	8002c6a <port_screen_func+0x24a>
				m_cfg.ip_digit++;
 8002bbc:	4b34      	ldr	r3, [pc, #208]	@ (8002c90 <port_screen_func+0x270>)
 8002bbe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	4b32      	ldr	r3, [pc, #200]	@ (8002c90 <port_screen_func+0x270>)
 8002bc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
			break;
 8002bcc:	e04d      	b.n	8002c6a <port_screen_func+0x24a>
		case eKey_Enter:
			if(m_cfg.set_mode){
 8002bce:	4b30      	ldr	r3, [pc, #192]	@ (8002c90 <port_screen_func+0x270>)
 8002bd0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d013      	beq.n	8002c00 <port_screen_func+0x1e0>
				LCD_DISP_ON();	// Cursor off
 8002bd8:	f7fe fdde 	bl	8001798 <LCD_DISP_ON>
				load_cfg.ether.port = combine_array(m_cfg.port);
 8002bdc:	482d      	ldr	r0, [pc, #180]	@ (8002c94 <port_screen_func+0x274>)
 8002bde:	f7ff f947 	bl	8001e70 <combine_array>
 8002be2:	4603      	mov	r3, r0
 8002be4:	461a      	mov	r2, r3
 8002be6:	4b2d      	ldr	r3, [pc, #180]	@ (8002c9c <port_screen_func+0x27c>)
 8002be8:	f8a3 2033 	strh.w	r2, [r3, #51]	@ 0x33
				ret_sc = save_data();
 8002bec:	f7ff fb62 	bl	80022b4 <save_data>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				m_cfg.set_mode = 0;
 8002bf6:	4b26      	ldr	r3, [pc, #152]	@ (8002c90 <port_screen_func+0x270>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
			}else{
				m_cfg.remote_mode = eREMOTE_ETHER;
				ret_sc = eREMOTE_SC;
				run_remote_mode();
			}
			break;
 8002bfe:	e034      	b.n	8002c6a <port_screen_func+0x24a>
				m_cfg.remote_mode = eREMOTE_ETHER;
 8002c00:	4b23      	ldr	r3, [pc, #140]	@ (8002c90 <port_screen_func+0x270>)
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
				ret_sc = eREMOTE_SC;
 8002c08:	230a      	movs	r3, #10
 8002c0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				run_remote_mode();
 8002c0e:	f7ff fb69 	bl	80022e4 <run_remote_mode>
			break;
 8002c12:	e02a      	b.n	8002c6a <port_screen_func+0x24a>
		case eKey_SetMode:
			m_cfg.set_mode = 1;
 8002c14:	4b1e      	ldr	r3, [pc, #120]	@ (8002c90 <port_screen_func+0x270>)
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
			m_cfg.cursor = 11;
 8002c1c:	4b1c      	ldr	r3, [pc, #112]	@ (8002c90 <port_screen_func+0x270>)
 8002c1e:	220b      	movs	r2, #11
 8002c20:	705a      	strb	r2, [r3, #1]
			m_cfg.digit_num = 5;
 8002c22:	4b1b      	ldr	r3, [pc, #108]	@ (8002c90 <port_screen_func+0x270>)
 8002c24:	2205      	movs	r2, #5
 8002c26:	71da      	strb	r2, [r3, #7]
			m_cfg.ip_digit = 4;
 8002c28:	4b19      	ldr	r3, [pc, #100]	@ (8002c90 <port_screen_func+0x270>)
 8002c2a:	2204      	movs	r2, #4
 8002c2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
			split_num(load_cfg.ether.port, m_cfg.port);
 8002c30:	4b1a      	ldr	r3, [pc, #104]	@ (8002c9c <port_screen_func+0x27c>)
 8002c32:	f8b3 3033 	ldrh.w	r3, [r3, #51]	@ 0x33
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	4916      	ldr	r1, [pc, #88]	@ (8002c94 <port_screen_func+0x274>)
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff f8da 	bl	8001df4 <split_num>
			LCD_LOCATE(2, m_cfg.cursor);
 8002c40:	4b13      	ldr	r3, [pc, #76]	@ (8002c90 <port_screen_func+0x270>)
 8002c42:	785b      	ldrb	r3, [r3, #1]
 8002c44:	4619      	mov	r1, r3
 8002c46:	2002      	movs	r0, #2
 8002c48:	f7fe fdb4 	bl	80017b4 <LCD_LOCATE>
			LCD_DISP_CURSOR();  // Cursor on		
 8002c4c:	f7fe fdab 	bl	80017a6 <LCD_DISP_CURSOR>
			draw_title(ePORT_Set);					
 8002c50:	2008      	movs	r0, #8
 8002c52:	f7fe fecf 	bl	80019f4 <draw_title>
			break;
 8002c56:	e008      	b.n	8002c6a <port_screen_func+0x24a>
		case eKey_Mode:
			if(m_cfg.set_mode == 0){
 8002c58:	4b0d      	ldr	r3, [pc, #52]	@ (8002c90 <port_screen_func+0x270>)
 8002c5a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d102      	bne.n	8002c68 <port_screen_func+0x248>
				draw_title(ePORT_Set);
 8002c62:	2008      	movs	r0, #8
 8002c64:	f7fe fec6 	bl	80019f4 <draw_title>
			}
			break;
 8002c68:	bf00      	nop
	}
	
	if(m_cfg.cursor != old_cursor){
 8002c6a:	4b09      	ldr	r3, [pc, #36]	@ (8002c90 <port_screen_func+0x270>)
 8002c6c:	785b      	ldrb	r3, [r3, #1]
 8002c6e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d005      	beq.n	8002c82 <port_screen_func+0x262>
		LCD_LOCATE(2, m_cfg.cursor);
 8002c76:	4b06      	ldr	r3, [pc, #24]	@ (8002c90 <port_screen_func+0x270>)
 8002c78:	785b      	ldrb	r3, [r3, #1]
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	2002      	movs	r0, #2
 8002c7e:	f7fe fd99 	bl	80017b4 <LCD_LOCATE>
	}	
	return ret_sc;
 8002c82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3728      	adds	r7, #40	@ 0x28
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	20000bd0 	.word	0x20000bd0
 8002c94:	20000c13 	.word	0x20000c13
 8002c98:	080092ac 	.word	0x080092ac
 8002c9c:	20000c1c 	.word	0x20000c1c

08002ca0 <self_test_screen_func>:

ScreenID_t self_test_screen_func(Screen_param_t param)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	463b      	mov	r3, r7
 8002ca8:	e883 0003 	stmia.w	r3, {r0, r1}
	ScreenID_t ret_sc = eMAX_SCREEN_ID;
 8002cac:	230f      	movs	r3, #15
 8002cae:	73fb      	strb	r3, [r7, #15]

	switch(param.key){
 8002cb0:	887b      	ldrh	r3, [r7, #2]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d005      	beq.n	8002cc2 <self_test_screen_func+0x22>
 8002cb6:	2b08      	cmp	r3, #8
 8002cb8:	d109      	bne.n	8002cce <self_test_screen_func+0x2e>
		case eKey_Mode:
			draw_title(eSelf_Test);
 8002cba:	2009      	movs	r0, #9
 8002cbc:	f7fe fe9a 	bl	80019f4 <draw_title>
			break;
 8002cc0:	e005      	b.n	8002cce <self_test_screen_func+0x2e>
		case eKey_Enter:
			send_cmd_2_backend(eCMD_FR_SelfTest, 0, 0);
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	20c1      	movs	r0, #193	@ 0xc1
 8002cc8:	f7fe fe3c 	bl	8001944 <send_cmd_2_backend>
			break;
 8002ccc:	bf00      	nop
	}
	return ret_sc;
 8002cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <remote_screen_func>:

ScreenID_t remote_screen_func(Screen_param_t param)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	463b      	mov	r3, r7
 8002ce0:	e883 0003 	stmia.w	r3, {r0, r1}
	ScreenID_t ret_sc = eMAX_SCREEN_ID;
 8002ce4:	230f      	movs	r3, #15
 8002ce6:	73fb      	strb	r3, [r7, #15]

	switch(param.key){
 8002ce8:	887b      	ldrh	r3, [r7, #2]
 8002cea:	2b08      	cmp	r3, #8
 8002cec:	d009      	beq.n	8002d02 <remote_screen_func+0x2a>
 8002cee:	2b20      	cmp	r3, #32
 8002cf0:	d10b      	bne.n	8002d0a <remote_screen_func+0x32>
		case eKey_ExitRemote:
			send_cmd_2_backend(eCMD_CloseRemote, 0, 0);
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	20bb      	movs	r0, #187	@ 0xbb
 8002cf8:	f7fe fe24 	bl	8001944 <send_cmd_2_backend>
			ret_sc = eCHANNEL_SC;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	73fb      	strb	r3, [r7, #15]
			break;
 8002d00:	e003      	b.n	8002d0a <remote_screen_func+0x32>
		case eKey_Mode:
			draw_title(eRemote_Mode);
 8002d02:	200a      	movs	r0, #10
 8002d04:	f7fe fe76 	bl	80019f4 <draw_title>
			break;
 8002d08:	bf00      	nop
	}
	
	return ret_sc;
 8002d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <findCharIndex>:

static int findCharIndex(char c) {
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < CHARSET_LENGTH; i++) {
 8002d1e:	2300      	movs	r3, #0
 8002d20:	60fb      	str	r3, [r7, #12]
 8002d22:	e00b      	b.n	8002d3c <findCharIndex+0x28>
        if (charSet[i] == c) return i;
 8002d24:	4a0a      	ldr	r2, [pc, #40]	@ (8002d50 <findCharIndex+0x3c>)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	4413      	add	r3, r2
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	79fa      	ldrb	r2, [r7, #7]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d101      	bne.n	8002d36 <findCharIndex+0x22>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	e006      	b.n	8002d44 <findCharIndex+0x30>
    for (int i = 0; i < CHARSET_LENGTH; i++) {
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2b40      	cmp	r3, #64	@ 0x40
 8002d40:	d9f0      	bls.n	8002d24 <findCharIndex+0x10>
    }
    return 0;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3714      	adds	r7, #20
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bc80      	pop	{r7}
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	08009344 	.word	0x08009344

08002d54 <increaseChar>:

static void increaseChar(char *ch) {
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
    int idx = findCharIndex(*ch);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff ffd7 	bl	8002d14 <findCharIndex>
 8002d66:	60f8      	str	r0, [r7, #12]

    *ch = charSet[(idx + 1) % CHARSET_LENGTH];
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4b08      	ldr	r3, [pc, #32]	@ (8002d90 <increaseChar+0x3c>)
 8002d70:	fba3 2301 	umull	r2, r3, r3, r1
 8002d74:	099a      	lsrs	r2, r3, #6
 8002d76:	4613      	mov	r3, r2
 8002d78:	019b      	lsls	r3, r3, #6
 8002d7a:	4413      	add	r3, r2
 8002d7c:	1aca      	subs	r2, r1, r3
 8002d7e:	4b05      	ldr	r3, [pc, #20]	@ (8002d94 <increaseChar+0x40>)
 8002d80:	5c9a      	ldrb	r2, [r3, r2]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	701a      	strb	r2, [r3, #0]
}
 8002d86:	bf00      	nop
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	fc0fc0fd 	.word	0xfc0fc0fd
 8002d94:	08009344 	.word	0x08009344

08002d98 <user_screen_func>:
    int idx = findCharIndex(*ch);
    *ch = charSet[(idx - 1 + CHARSET_LENGTH) % CHARSET_LENGTH];
}

ScreenID_t user_screen_func(Screen_param_t param)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b088      	sub	sp, #32
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	463b      	mov	r3, r7
 8002da0:	e883 0003 	stmia.w	r3, {r0, r1}
	ScreenID_t ret_sc = eMAX_SCREEN_ID;
 8002da4:	230f      	movs	r3, #15
 8002da6:	77fb      	strb	r3, [r7, #31]
	uint8_t old_cursor = m_cfg.cursor;
 8002da8:	4b45      	ldr	r3, [pc, #276]	@ (8002ec0 <user_screen_func+0x128>)
 8002daa:	785b      	ldrb	r3, [r3, #1]
 8002dac:	77bb      	strb	r3, [r7, #30]
	char line_buf[LCD_PRINT_MAX];

	switch(param.key){
 8002dae:	887b      	ldrh	r3, [r7, #2]
 8002db0:	3b01      	subs	r3, #1
 8002db2:	2b0b      	cmp	r3, #11
 8002db4:	d874      	bhi.n	8002ea0 <user_screen_func+0x108>
 8002db6:	a201      	add	r2, pc, #4	@ (adr r2, 8002dbc <user_screen_func+0x24>)
 8002db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dbc:	08002e65 	.word	0x08002e65
 8002dc0:	08002ded 	.word	0x08002ded
 8002dc4:	08002e7b 	.word	0x08002e7b
 8002dc8:	08002ded 	.word	0x08002ded
 8002dcc:	08002ea1 	.word	0x08002ea1
 8002dd0:	08002ea1 	.word	0x08002ea1
 8002dd4:	08002ea1 	.word	0x08002ea1
 8002dd8:	08002ea1 	.word	0x08002ea1
 8002ddc:	08002ea1 	.word	0x08002ea1
 8002de0:	08002e2d 	.word	0x08002e2d
 8002de4:	08002ea1 	.word	0x08002ea1
 8002de8:	08002e49 	.word	0x08002e49
		case eKey_Up:
		case eKey_Down:
			if(eKey_Up){
				increaseChar((char *)&load_cfg.company[m_cfg.cursor]);
 8002dec:	4b34      	ldr	r3, [pc, #208]	@ (8002ec0 <user_screen_func+0x128>)
 8002dee:	785b      	ldrb	r3, [r3, #1]
 8002df0:	3330      	adds	r3, #48	@ 0x30
 8002df2:	4a34      	ldr	r2, [pc, #208]	@ (8002ec4 <user_screen_func+0x12c>)
 8002df4:	4413      	add	r3, r2
 8002df6:	3305      	adds	r3, #5
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff ffab 	bl	8002d54 <increaseChar>
			}else{
				decreaseChar((char *)&load_cfg.company[m_cfg.cursor]);
			}
			sprintf(line_buf, "%s", load_cfg.company);
 8002dfe:	f107 0308 	add.w	r3, r7, #8
 8002e02:	4a31      	ldr	r2, [pc, #196]	@ (8002ec8 <user_screen_func+0x130>)
 8002e04:	4931      	ldr	r1, [pc, #196]	@ (8002ecc <user_screen_func+0x134>)
 8002e06:	4618      	mov	r0, r3
 8002e08:	f005 f8fe 	bl	8008008 <siprintf>
			LCD_LOCATE(1,1);
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	2001      	movs	r0, #1
 8002e10:	f7fe fcd0 	bl	80017b4 <LCD_LOCATE>
			LCD_printstring(line_buf);
 8002e14:	f107 0308 	add.w	r3, r7, #8
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7fe fc9f 	bl	800175c <LCD_printstring>
			LCD_LOCATE(1,m_cfg.cursor);
 8002e1e:	4b28      	ldr	r3, [pc, #160]	@ (8002ec0 <user_screen_func+0x128>)
 8002e20:	785b      	ldrb	r3, [r3, #1]
 8002e22:	4619      	mov	r1, r3
 8002e24:	2001      	movs	r0, #1
 8002e26:	f7fe fcc5 	bl	80017b4 <LCD_LOCATE>
			break;
 8002e2a:	e039      	b.n	8002ea0 <user_screen_func+0x108>
		case eKey_CursorUp:
			m_cfg.cursor = (m_cfg.cursor - 1 + LINE_CHARACTER_MAX) % LINE_CHARACTER_MAX;
 8002e2c:	4b24      	ldr	r3, [pc, #144]	@ (8002ec0 <user_screen_func+0x128>)
 8002e2e:	785b      	ldrb	r3, [r3, #1]
 8002e30:	330f      	adds	r3, #15
 8002e32:	425a      	negs	r2, r3
 8002e34:	f003 030f 	and.w	r3, r3, #15
 8002e38:	f002 020f 	and.w	r2, r2, #15
 8002e3c:	bf58      	it	pl
 8002e3e:	4253      	negpl	r3, r2
 8002e40:	b2da      	uxtb	r2, r3
 8002e42:	4b1f      	ldr	r3, [pc, #124]	@ (8002ec0 <user_screen_func+0x128>)
 8002e44:	705a      	strb	r2, [r3, #1]
			break;
 8002e46:	e02b      	b.n	8002ea0 <user_screen_func+0x108>
		case eKey_CursorDown:
			m_cfg.cursor = (m_cfg.cursor + 1 ) % LINE_CHARACTER_MAX;
 8002e48:	4b1d      	ldr	r3, [pc, #116]	@ (8002ec0 <user_screen_func+0x128>)
 8002e4a:	785b      	ldrb	r3, [r3, #1]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	425a      	negs	r2, r3
 8002e50:	f003 030f 	and.w	r3, r3, #15
 8002e54:	f002 020f 	and.w	r2, r2, #15
 8002e58:	bf58      	it	pl
 8002e5a:	4253      	negpl	r3, r2
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	4b18      	ldr	r3, [pc, #96]	@ (8002ec0 <user_screen_func+0x128>)
 8002e60:	705a      	strb	r2, [r3, #1]
			break;
 8002e62:	e01d      	b.n	8002ea0 <user_screen_func+0x108>
		case eKey_Enter:
			LCD_DISP_ON();	// Cursor off
 8002e64:	f7fe fc98 	bl	8001798 <LCD_DISP_ON>
			ret_sc = save_data();
 8002e68:	f7ff fa24 	bl	80022b4 <save_data>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	77fb      	strb	r3, [r7, #31]
			m_cfg.set_mode = 0;
 8002e70:	4b13      	ldr	r3, [pc, #76]	@ (8002ec0 <user_screen_func+0x128>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
			break;
 8002e78:	e012      	b.n	8002ea0 <user_screen_func+0x108>
		case eKey_User:
			m_cfg.set_mode = 1;
 8002e7a:	4b11      	ldr	r3, [pc, #68]	@ (8002ec0 <user_screen_func+0x128>)
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
			m_cfg.cursor = 2;
 8002e82:	4b0f      	ldr	r3, [pc, #60]	@ (8002ec0 <user_screen_func+0x128>)
 8002e84:	2202      	movs	r2, #2
 8002e86:	705a      	strb	r2, [r3, #1]
			LCD_LOCATE(1, m_cfg.cursor);
 8002e88:	4b0d      	ldr	r3, [pc, #52]	@ (8002ec0 <user_screen_func+0x128>)
 8002e8a:	785b      	ldrb	r3, [r3, #1]
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	2001      	movs	r0, #1
 8002e90:	f7fe fc90 	bl	80017b4 <LCD_LOCATE>
			LCD_DISP_CURSOR();  // Cursor on
 8002e94:	f7fe fc87 	bl	80017a6 <LCD_DISP_CURSOR>
			draw_title(eUSER_Mode);
 8002e98:	200b      	movs	r0, #11
 8002e9a:	f7fe fdab 	bl	80019f4 <draw_title>
			break;
 8002e9e:	bf00      	nop
	}
	if(m_cfg.cursor != old_cursor){
 8002ea0:	4b07      	ldr	r3, [pc, #28]	@ (8002ec0 <user_screen_func+0x128>)
 8002ea2:	785b      	ldrb	r3, [r3, #1]
 8002ea4:	7fba      	ldrb	r2, [r7, #30]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d005      	beq.n	8002eb6 <user_screen_func+0x11e>
		LCD_LOCATE(1, m_cfg.cursor);
 8002eaa:	4b05      	ldr	r3, [pc, #20]	@ (8002ec0 <user_screen_func+0x128>)
 8002eac:	785b      	ldrb	r3, [r3, #1]
 8002eae:	4619      	mov	r1, r3
 8002eb0:	2001      	movs	r0, #1
 8002eb2:	f7fe fc7f 	bl	80017b4 <LCD_LOCATE>
	}
	return ret_sc;
 8002eb6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3720      	adds	r7, #32
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	20000bd0 	.word	0x20000bd0
 8002ec4:	20000c1c 	.word	0x20000c1c
 8002ec8:	20000c51 	.word	0x20000c51
 8002ecc:	080092bc 	.word	0x080092bc

08002ed0 <factory_screen_func>:

ScreenID_t factory_screen_func(Screen_param_t param)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	463b      	mov	r3, r7
 8002ed8:	e883 0003 	stmia.w	r3, {r0, r1}
	ScreenID_t ret_sc = eMAX_SCREEN_ID;
 8002edc:	230f      	movs	r3, #15
 8002ede:	73fb      	strb	r3, [r7, #15]
	
	switch(param.key){
 8002ee0:	887b      	ldrh	r3, [r7, #2]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d002      	beq.n	8002eec <factory_screen_func+0x1c>
 8002ee6:	2b09      	cmp	r3, #9
 8002ee8:	d004      	beq.n	8002ef4 <factory_screen_func+0x24>
 8002eea:	e00c      	b.n	8002f06 <factory_screen_func+0x36>
		case eKey_Enter:
			draw_title(eCH_CHSelect);
 8002eec:	2000      	movs	r0, #0
 8002eee:	f7fe fd81 	bl	80019f4 <draw_title>
			break;
 8002ef2:	e008      	b.n	8002f06 <factory_screen_func+0x36>
		case eKey_Factory:
			draw_title(eFactor_Mode);
 8002ef4:	200c      	movs	r0, #12
 8002ef6:	f7fe fd7d 	bl	80019f4 <draw_title>
			send_cmd_2_backend(eCMD_Factory, 0, 0);
 8002efa:	2200      	movs	r2, #0
 8002efc:	2100      	movs	r1, #0
 8002efe:	20b9      	movs	r0, #185	@ 0xb9
 8002f00:	f7fe fd20 	bl	8001944 <send_cmd_2_backend>
			break;
 8002f04:	bf00      	nop
	}
	return ret_sc;
 8002f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <select_ch_set_blink>:

static void select_ch_set_blink(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b094      	sub	sp, #80	@ 0x50
 8002f14:	af00      	add	r7, sp, #0
	uint8_t ch_disp[4][LCD_PRINT_MAX] = {{"    CH2 CH4 CH6 \n"}, {"CH1     CH4 CH6 \n"},
 8002f16:	4a18      	ldr	r2, [pc, #96]	@ (8002f78 <select_ch_set_blink+0x68>)
 8002f18:	463b      	mov	r3, r7
 8002f1a:	4611      	mov	r1, r2
 8002f1c:	2250      	movs	r2, #80	@ 0x50
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f005 f956 	bl	80081d0 <memcpy>
										 {"CH1 CH2     CH6 \n"}, {"CH1 CH2 CH4     \n"}};

	if(m_cfg.cursor == 4){
 8002f24:	4b15      	ldr	r3, [pc, #84]	@ (8002f7c <select_ch_set_blink+0x6c>)
 8002f26:	785b      	ldrb	r3, [r3, #1]
 8002f28:	2b04      	cmp	r3, #4
 8002f2a:	d10b      	bne.n	8002f44 <select_ch_set_blink+0x34>
		sprintf(m_cfg.blink_text[0], "CH8             \n");
 8002f2c:	4914      	ldr	r1, [pc, #80]	@ (8002f80 <select_ch_set_blink+0x70>)
 8002f2e:	4815      	ldr	r0, [pc, #84]	@ (8002f84 <select_ch_set_blink+0x74>)
 8002f30:	f005 f86a 	bl	8008008 <siprintf>
		sprintf(m_cfg.blink_text[1], "                \n");
 8002f34:	4914      	ldr	r1, [pc, #80]	@ (8002f88 <select_ch_set_blink+0x78>)
 8002f36:	4815      	ldr	r0, [pc, #84]	@ (8002f8c <select_ch_set_blink+0x7c>)
 8002f38:	f005 f866 	bl	8008008 <siprintf>
		m_cfg.blink_row = 2;
 8002f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8002f7c <select_ch_set_blink+0x6c>)
 8002f3e:	2202      	movs	r2, #2
 8002f40:	731a      	strb	r2, [r3, #12]
	}else{
		sprintf(m_cfg.blink_text[0], "CH1 CH2 CH4 CH6 \n");
		sprintf(m_cfg.blink_text[1], "%s", ch_disp[m_cfg.cursor]);
		m_cfg.blink_row = 1;
	}
}
 8002f42:	e014      	b.n	8002f6e <select_ch_set_blink+0x5e>
		sprintf(m_cfg.blink_text[0], "CH1 CH2 CH4 CH6 \n");
 8002f44:	4912      	ldr	r1, [pc, #72]	@ (8002f90 <select_ch_set_blink+0x80>)
 8002f46:	480f      	ldr	r0, [pc, #60]	@ (8002f84 <select_ch_set_blink+0x74>)
 8002f48:	f005 f85e 	bl	8008008 <siprintf>
		sprintf(m_cfg.blink_text[1], "%s", ch_disp[m_cfg.cursor]);
 8002f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f7c <select_ch_set_blink+0x6c>)
 8002f4e:	785b      	ldrb	r3, [r3, #1]
 8002f50:	4619      	mov	r1, r3
 8002f52:	463a      	mov	r2, r7
 8002f54:	460b      	mov	r3, r1
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4413      	add	r3, r2
 8002f5e:	461a      	mov	r2, r3
 8002f60:	490c      	ldr	r1, [pc, #48]	@ (8002f94 <select_ch_set_blink+0x84>)
 8002f62:	480a      	ldr	r0, [pc, #40]	@ (8002f8c <select_ch_set_blink+0x7c>)
 8002f64:	f005 f850 	bl	8008008 <siprintf>
		m_cfg.blink_row = 1;
 8002f68:	4b04      	ldr	r3, [pc, #16]	@ (8002f7c <select_ch_set_blink+0x6c>)
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	731a      	strb	r2, [r3, #12]
}
 8002f6e:	bf00      	nop
 8002f70:	3750      	adds	r7, #80	@ 0x50
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	080092c0 	.word	0x080092c0
 8002f7c:	20000bd0 	.word	0x20000bd0
 8002f80:	0800918c 	.word	0x0800918c
 8002f84:	20000bdd 	.word	0x20000bdd
 8002f88:	08009270 	.word	0x08009270
 8002f8c:	20000bf1 	.word	0x20000bf1
 8002f90:	08009178 	.word	0x08009178
 8002f94:	080092bc 	.word	0x080092bc

08002f98 <select_ch_screen_func>:

ScreenID_t select_ch_screen_func(Screen_param_t param)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	463b      	mov	r3, r7
 8002fa0:	e883 0003 	stmia.w	r3, {r0, r1}
	ScreenID_t ret_sc = eMAX_SCREEN_ID;
 8002fa4:	230f      	movs	r3, #15
 8002fa6:	73fb      	strb	r3, [r7, #15]

	switch(param.key){
 8002fa8:	887b      	ldrh	r3, [r7, #2]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	2b05      	cmp	r3, #5
 8002fae:	d851      	bhi.n	8003054 <select_ch_screen_func+0xbc>
 8002fb0:	a201      	add	r2, pc, #4	@ (adr r2, 8002fb8 <select_ch_screen_func+0x20>)
 8002fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb6:	bf00      	nop
 8002fb8:	08003015 	.word	0x08003015
 8002fbc:	08002fd1 	.word	0x08002fd1
 8002fc0:	08003055 	.word	0x08003055
 8002fc4:	08002ff3 	.word	0x08002ff3
 8002fc8:	08003055 	.word	0x08003055
 8002fcc:	08003035 	.word	0x08003035
		case eKey_Up:
			m_cfg.cursor = (m_cfg.cursor - 1 + SEL_MAX_CH) % SEL_MAX_CH;
 8002fd0:	4b23      	ldr	r3, [pc, #140]	@ (8003060 <select_ch_screen_func+0xc8>)
 8002fd2:	785b      	ldrb	r3, [r3, #1]
 8002fd4:	1d1a      	adds	r2, r3, #4
 8002fd6:	4b23      	ldr	r3, [pc, #140]	@ (8003064 <select_ch_screen_func+0xcc>)
 8002fd8:	fb83 1302 	smull	r1, r3, r3, r2
 8002fdc:	1059      	asrs	r1, r3, #1
 8002fde:	17d3      	asrs	r3, r2, #31
 8002fe0:	1ac9      	subs	r1, r1, r3
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	1ad1      	subs	r1, r2, r3
 8002fea:	b2ca      	uxtb	r2, r1
 8002fec:	4b1c      	ldr	r3, [pc, #112]	@ (8003060 <select_ch_screen_func+0xc8>)
 8002fee:	705a      	strb	r2, [r3, #1]
			break;
 8002ff0:	e030      	b.n	8003054 <select_ch_screen_func+0xbc>
		case eKey_Down:
			m_cfg.cursor = (m_cfg.cursor + 1 ) % SEL_MAX_CH;
 8002ff2:	4b1b      	ldr	r3, [pc, #108]	@ (8003060 <select_ch_screen_func+0xc8>)
 8002ff4:	785b      	ldrb	r3, [r3, #1]
 8002ff6:	1c5a      	adds	r2, r3, #1
 8002ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8003064 <select_ch_screen_func+0xcc>)
 8002ffa:	fb83 1302 	smull	r1, r3, r3, r2
 8002ffe:	1059      	asrs	r1, r3, #1
 8003000:	17d3      	asrs	r3, r2, #31
 8003002:	1ac9      	subs	r1, r1, r3
 8003004:	460b      	mov	r3, r1
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	1ad1      	subs	r1, r2, r3
 800300c:	b2ca      	uxtb	r2, r1
 800300e:	4b14      	ldr	r3, [pc, #80]	@ (8003060 <select_ch_screen_func+0xc8>)
 8003010:	705a      	strb	r2, [r3, #1]
			break;
 8003012:	e01f      	b.n	8003054 <select_ch_screen_func+0xbc>
		case eKey_Enter:
			m_cfg.enable_blink = 0;
 8003014:	4b12      	ldr	r3, [pc, #72]	@ (8003060 <select_ch_screen_func+0xc8>)
 8003016:	2200      	movs	r2, #0
 8003018:	729a      	strb	r2, [r3, #10]
			load_cfg.ch_num = m_cfg.cursor ;
 800301a:	4b11      	ldr	r3, [pc, #68]	@ (8003060 <select_ch_screen_func+0xc8>)
 800301c:	785a      	ldrb	r2, [r3, #1]
 800301e:	4b12      	ldr	r3, [pc, #72]	@ (8003068 <select_ch_screen_func+0xd0>)
 8003020:	719a      	strb	r2, [r3, #6]
			ret_sc = save_data();
 8003022:	f7ff f947 	bl	80022b4 <save_data>
 8003026:	4603      	mov	r3, r0
 8003028:	73fb      	strb	r3, [r7, #15]
			m_cfg.set_mode = 0;
 800302a:	4b0d      	ldr	r3, [pc, #52]	@ (8003060 <select_ch_screen_func+0xc8>)
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
			break;
 8003032:	e00f      	b.n	8003054 <select_ch_screen_func+0xbc>
		case eKey_ChSel:
			m_cfg.cursor = load_cfg.ch_num;
 8003034:	4b0c      	ldr	r3, [pc, #48]	@ (8003068 <select_ch_screen_func+0xd0>)
 8003036:	799a      	ldrb	r2, [r3, #6]
 8003038:	4b09      	ldr	r3, [pc, #36]	@ (8003060 <select_ch_screen_func+0xc8>)
 800303a:	705a      	strb	r2, [r3, #1]
			m_cfg.blink = 0;
 800303c:	4b08      	ldr	r3, [pc, #32]	@ (8003060 <select_ch_screen_func+0xc8>)
 800303e:	2200      	movs	r2, #0
 8003040:	72da      	strb	r2, [r3, #11]
			m_cfg.enable_blink = 1;
 8003042:	4b07      	ldr	r3, [pc, #28]	@ (8003060 <select_ch_screen_func+0xc8>)
 8003044:	2201      	movs	r2, #1
 8003046:	729a      	strb	r2, [r3, #10]
			select_ch_set_blink();
 8003048:	f7ff ff62 	bl	8002f10 <select_ch_set_blink>
			draw_title(eSEL_OP_Ch);
 800304c:	200d      	movs	r0, #13
 800304e:	f7fe fcd1 	bl	80019f4 <draw_title>
			break;
 8003052:	bf00      	nop
	}

	return ret_sc;
 8003054:	7bfb      	ldrb	r3, [r7, #15]
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	20000bd0 	.word	0x20000bd0
 8003064:	66666667 	.word	0x66666667
 8003068:	20000c1c 	.word	0x20000c1c

0800306c <version_screen_func>:

ScreenID_t version_screen_func(Screen_param_t param)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	463b      	mov	r3, r7
 8003074:	e883 0003 	stmia.w	r3, {r0, r1}
	ScreenID_t ret_sc = eMAX_SCREEN_ID;
 8003078:	230f      	movs	r3, #15
 800307a:	73fb      	strb	r3, [r7, #15]
	
	switch(param.key){
 800307c:	887b      	ldrh	r3, [r7, #2]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d002      	beq.n	8003088 <version_screen_func+0x1c>
 8003082:	2b05      	cmp	r3, #5
 8003084:	d004      	beq.n	8003090 <version_screen_func+0x24>
 8003086:	e007      	b.n	8003098 <version_screen_func+0x2c>
		case eKey_Enter:
			draw_title(eCH_CHSelect);
 8003088:	2000      	movs	r0, #0
 800308a:	f7fe fcb3 	bl	80019f4 <draw_title>
			break;
 800308e:	e003      	b.n	8003098 <version_screen_func+0x2c>
		case eKey_Version:
			draw_title(eKey_Version);
 8003090:	2005      	movs	r0, #5
 8003092:	f7fe fcaf 	bl	80019f4 <draw_title>
			break;
 8003096:	bf00      	nop
	}
	return ret_sc;
 8003098:	7bfb      	ldrb	r3, [r7, #15]
}
 800309a:	4618      	mov	r0, r3
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
	...

080030a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80030a4:	f7fe fa9c 	bl	80015e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030a8:	480b      	ldr	r0, [pc, #44]	@ (80030d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80030aa:	490c      	ldr	r1, [pc, #48]	@ (80030dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80030ac:	4a0c      	ldr	r2, [pc, #48]	@ (80030e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80030ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030b0:	e002      	b.n	80030b8 <LoopCopyDataInit>

080030b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030b6:	3304      	adds	r3, #4

080030b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030bc:	d3f9      	bcc.n	80030b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030be:	4a09      	ldr	r2, [pc, #36]	@ (80030e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80030c0:	4c09      	ldr	r4, [pc, #36]	@ (80030e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80030c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030c4:	e001      	b.n	80030ca <LoopFillZerobss>

080030c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030c8:	3204      	adds	r2, #4

080030ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030cc:	d3fb      	bcc.n	80030c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030ce:	f005 f859 	bl	8008184 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80030d2:	f7fd fef3 	bl	8000ebc <main>
  bx lr
 80030d6:	4770      	bx	lr
  ldr r0, =_sdata
 80030d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030dc:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 80030e0:	080093e0 	.word	0x080093e0
  ldr r2, =_sbss
 80030e4:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 80030e8:	20002060 	.word	0x20002060

080030ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030ec:	e7fe      	b.n	80030ec <ADC1_2_IRQHandler>
	...

080030f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030f4:	4b08      	ldr	r3, [pc, #32]	@ (8003118 <HAL_Init+0x28>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a07      	ldr	r2, [pc, #28]	@ (8003118 <HAL_Init+0x28>)
 80030fa:	f043 0310 	orr.w	r3, r3, #16
 80030fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003100:	2003      	movs	r0, #3
 8003102:	f000 f8d1 	bl	80032a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003106:	200f      	movs	r0, #15
 8003108:	f7fe f988 	bl	800141c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800310c:	f7fe f8c2 	bl	8001294 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	40022000 	.word	0x40022000

0800311c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003120:	4b05      	ldr	r3, [pc, #20]	@ (8003138 <HAL_IncTick+0x1c>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	461a      	mov	r2, r3
 8003126:	4b05      	ldr	r3, [pc, #20]	@ (800313c <HAL_IncTick+0x20>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4413      	add	r3, r2
 800312c:	4a03      	ldr	r2, [pc, #12]	@ (800313c <HAL_IncTick+0x20>)
 800312e:	6013      	str	r3, [r2, #0]
}
 8003130:	bf00      	nop
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr
 8003138:	20000148 	.word	0x20000148
 800313c:	20000c64 	.word	0x20000c64

08003140 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  return uwTick;
 8003144:	4b02      	ldr	r3, [pc, #8]	@ (8003150 <HAL_GetTick+0x10>)
 8003146:	681b      	ldr	r3, [r3, #0]
}
 8003148:	4618      	mov	r0, r3
 800314a:	46bd      	mov	sp, r7
 800314c:	bc80      	pop	{r7}
 800314e:	4770      	bx	lr
 8003150:	20000c64 	.word	0x20000c64

08003154 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f003 0307 	and.w	r3, r3, #7
 8003162:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003164:	4b0c      	ldr	r3, [pc, #48]	@ (8003198 <__NVIC_SetPriorityGrouping+0x44>)
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800316a:	68ba      	ldr	r2, [r7, #8]
 800316c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003170:	4013      	ands	r3, r2
 8003172:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800317c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003180:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003184:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003186:	4a04      	ldr	r2, [pc, #16]	@ (8003198 <__NVIC_SetPriorityGrouping+0x44>)
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	60d3      	str	r3, [r2, #12]
}
 800318c:	bf00      	nop
 800318e:	3714      	adds	r7, #20
 8003190:	46bd      	mov	sp, r7
 8003192:	bc80      	pop	{r7}
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	e000ed00 	.word	0xe000ed00

0800319c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031a0:	4b04      	ldr	r3, [pc, #16]	@ (80031b4 <__NVIC_GetPriorityGrouping+0x18>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	0a1b      	lsrs	r3, r3, #8
 80031a6:	f003 0307 	and.w	r3, r3, #7
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bc80      	pop	{r7}
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	e000ed00 	.word	0xe000ed00

080031b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	4603      	mov	r3, r0
 80031c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	db0b      	blt.n	80031e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031ca:	79fb      	ldrb	r3, [r7, #7]
 80031cc:	f003 021f 	and.w	r2, r3, #31
 80031d0:	4906      	ldr	r1, [pc, #24]	@ (80031ec <__NVIC_EnableIRQ+0x34>)
 80031d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d6:	095b      	lsrs	r3, r3, #5
 80031d8:	2001      	movs	r0, #1
 80031da:	fa00 f202 	lsl.w	r2, r0, r2
 80031de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031e2:	bf00      	nop
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bc80      	pop	{r7}
 80031ea:	4770      	bx	lr
 80031ec:	e000e100 	.word	0xe000e100

080031f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	4603      	mov	r3, r0
 80031f8:	6039      	str	r1, [r7, #0]
 80031fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003200:	2b00      	cmp	r3, #0
 8003202:	db0a      	blt.n	800321a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	b2da      	uxtb	r2, r3
 8003208:	490c      	ldr	r1, [pc, #48]	@ (800323c <__NVIC_SetPriority+0x4c>)
 800320a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320e:	0112      	lsls	r2, r2, #4
 8003210:	b2d2      	uxtb	r2, r2
 8003212:	440b      	add	r3, r1
 8003214:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003218:	e00a      	b.n	8003230 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	b2da      	uxtb	r2, r3
 800321e:	4908      	ldr	r1, [pc, #32]	@ (8003240 <__NVIC_SetPriority+0x50>)
 8003220:	79fb      	ldrb	r3, [r7, #7]
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	3b04      	subs	r3, #4
 8003228:	0112      	lsls	r2, r2, #4
 800322a:	b2d2      	uxtb	r2, r2
 800322c:	440b      	add	r3, r1
 800322e:	761a      	strb	r2, [r3, #24]
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	bc80      	pop	{r7}
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	e000e100 	.word	0xe000e100
 8003240:	e000ed00 	.word	0xe000ed00

08003244 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003244:	b480      	push	{r7}
 8003246:	b089      	sub	sp, #36	@ 0x24
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	f1c3 0307 	rsb	r3, r3, #7
 800325e:	2b04      	cmp	r3, #4
 8003260:	bf28      	it	cs
 8003262:	2304      	movcs	r3, #4
 8003264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	3304      	adds	r3, #4
 800326a:	2b06      	cmp	r3, #6
 800326c:	d902      	bls.n	8003274 <NVIC_EncodePriority+0x30>
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	3b03      	subs	r3, #3
 8003272:	e000      	b.n	8003276 <NVIC_EncodePriority+0x32>
 8003274:	2300      	movs	r3, #0
 8003276:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003278:	f04f 32ff 	mov.w	r2, #4294967295
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	fa02 f303 	lsl.w	r3, r2, r3
 8003282:	43da      	mvns	r2, r3
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	401a      	ands	r2, r3
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800328c:	f04f 31ff 	mov.w	r1, #4294967295
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	fa01 f303 	lsl.w	r3, r1, r3
 8003296:	43d9      	mvns	r1, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800329c:	4313      	orrs	r3, r2
         );
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3724      	adds	r7, #36	@ 0x24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bc80      	pop	{r7}
 80032a6:	4770      	bx	lr

080032a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7ff ff4f 	bl	8003154 <__NVIC_SetPriorityGrouping>
}
 80032b6:	bf00      	nop
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032be:	b580      	push	{r7, lr}
 80032c0:	b086      	sub	sp, #24
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	4603      	mov	r3, r0
 80032c6:	60b9      	str	r1, [r7, #8]
 80032c8:	607a      	str	r2, [r7, #4]
 80032ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032d0:	f7ff ff64 	bl	800319c <__NVIC_GetPriorityGrouping>
 80032d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	68b9      	ldr	r1, [r7, #8]
 80032da:	6978      	ldr	r0, [r7, #20]
 80032dc:	f7ff ffb2 	bl	8003244 <NVIC_EncodePriority>
 80032e0:	4602      	mov	r2, r0
 80032e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032e6:	4611      	mov	r1, r2
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff ff81 	bl	80031f0 <__NVIC_SetPriority>
}
 80032ee:	bf00      	nop
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b082      	sub	sp, #8
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	4603      	mov	r3, r0
 80032fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff ff57 	bl	80031b8 <__NVIC_EnableIRQ>
}
 800330a:	bf00      	nop
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003312:	b480      	push	{r7}
 8003314:	b085      	sub	sp, #20
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800331a:	2300      	movs	r3, #0
 800331c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d008      	beq.n	800333c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2204      	movs	r2, #4
 800332e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e020      	b.n	800337e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 020e 	bic.w	r2, r2, #14
 800334a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0201 	bic.w	r2, r2, #1
 800335a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003364:	2101      	movs	r1, #1
 8003366:	fa01 f202 	lsl.w	r2, r1, r2
 800336a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800337c:	7bfb      	ldrb	r3, [r7, #15]
}
 800337e:	4618      	mov	r0, r3
 8003380:	3714      	adds	r7, #20
 8003382:	46bd      	mov	sp, r7
 8003384:	bc80      	pop	{r7}
 8003386:	4770      	bx	lr

08003388 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003390:	2300      	movs	r3, #0
 8003392:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d005      	beq.n	80033ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2204      	movs	r2, #4
 80033a4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	73fb      	strb	r3, [r7, #15]
 80033aa:	e051      	b.n	8003450 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 020e 	bic.w	r2, r2, #14
 80033ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 0201 	bic.w	r2, r2, #1
 80033ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a22      	ldr	r2, [pc, #136]	@ (800345c <HAL_DMA_Abort_IT+0xd4>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d029      	beq.n	800342a <HAL_DMA_Abort_IT+0xa2>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a21      	ldr	r2, [pc, #132]	@ (8003460 <HAL_DMA_Abort_IT+0xd8>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d022      	beq.n	8003426 <HAL_DMA_Abort_IT+0x9e>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a1f      	ldr	r2, [pc, #124]	@ (8003464 <HAL_DMA_Abort_IT+0xdc>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d01a      	beq.n	8003420 <HAL_DMA_Abort_IT+0x98>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a1e      	ldr	r2, [pc, #120]	@ (8003468 <HAL_DMA_Abort_IT+0xe0>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d012      	beq.n	800341a <HAL_DMA_Abort_IT+0x92>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a1c      	ldr	r2, [pc, #112]	@ (800346c <HAL_DMA_Abort_IT+0xe4>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d00a      	beq.n	8003414 <HAL_DMA_Abort_IT+0x8c>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a1b      	ldr	r2, [pc, #108]	@ (8003470 <HAL_DMA_Abort_IT+0xe8>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d102      	bne.n	800340e <HAL_DMA_Abort_IT+0x86>
 8003408:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800340c:	e00e      	b.n	800342c <HAL_DMA_Abort_IT+0xa4>
 800340e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003412:	e00b      	b.n	800342c <HAL_DMA_Abort_IT+0xa4>
 8003414:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003418:	e008      	b.n	800342c <HAL_DMA_Abort_IT+0xa4>
 800341a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800341e:	e005      	b.n	800342c <HAL_DMA_Abort_IT+0xa4>
 8003420:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003424:	e002      	b.n	800342c <HAL_DMA_Abort_IT+0xa4>
 8003426:	2310      	movs	r3, #16
 8003428:	e000      	b.n	800342c <HAL_DMA_Abort_IT+0xa4>
 800342a:	2301      	movs	r3, #1
 800342c:	4a11      	ldr	r2, [pc, #68]	@ (8003474 <HAL_DMA_Abort_IT+0xec>)
 800342e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003444:	2b00      	cmp	r3, #0
 8003446:	d003      	beq.n	8003450 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	4798      	blx	r3
    } 
  }
  return status;
 8003450:	7bfb      	ldrb	r3, [r7, #15]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	40020008 	.word	0x40020008
 8003460:	4002001c 	.word	0x4002001c
 8003464:	40020030 	.word	0x40020030
 8003468:	40020044 	.word	0x40020044
 800346c:	40020058 	.word	0x40020058
 8003470:	4002006c 	.word	0x4002006c
 8003474:	40020000 	.word	0x40020000

08003478 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800347a:	b087      	sub	sp, #28
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800348a:	2300      	movs	r3, #0
 800348c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800348e:	2300      	movs	r3, #0
 8003490:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003492:	4b2f      	ldr	r3, [pc, #188]	@ (8003550 <HAL_FLASH_Program+0xd8>)
 8003494:	7e1b      	ldrb	r3, [r3, #24]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d101      	bne.n	800349e <HAL_FLASH_Program+0x26>
 800349a:	2302      	movs	r3, #2
 800349c:	e054      	b.n	8003548 <HAL_FLASH_Program+0xd0>
 800349e:	4b2c      	ldr	r3, [pc, #176]	@ (8003550 <HAL_FLASH_Program+0xd8>)
 80034a0:	2201      	movs	r2, #1
 80034a2:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80034a4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80034a8:	f000 f8b2 	bl	8003610 <FLASH_WaitForLastOperation>
 80034ac:	4603      	mov	r3, r0
 80034ae:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80034b0:	7dfb      	ldrb	r3, [r7, #23]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d144      	bne.n	8003540 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d102      	bne.n	80034c2 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80034bc:	2301      	movs	r3, #1
 80034be:	757b      	strb	r3, [r7, #21]
 80034c0:	e007      	b.n	80034d2 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d102      	bne.n	80034ce <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80034c8:	2302      	movs	r3, #2
 80034ca:	757b      	strb	r3, [r7, #21]
 80034cc:	e001      	b.n	80034d2 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80034ce:	2304      	movs	r3, #4
 80034d0:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80034d2:	2300      	movs	r3, #0
 80034d4:	75bb      	strb	r3, [r7, #22]
 80034d6:	e02d      	b.n	8003534 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80034d8:	7dbb      	ldrb	r3, [r7, #22]
 80034da:	005a      	lsls	r2, r3, #1
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	eb02 0c03 	add.w	ip, r2, r3
 80034e2:	7dbb      	ldrb	r3, [r7, #22]
 80034e4:	0119      	lsls	r1, r3, #4
 80034e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034ea:	f1c1 0620 	rsb	r6, r1, #32
 80034ee:	f1a1 0020 	sub.w	r0, r1, #32
 80034f2:	fa22 f401 	lsr.w	r4, r2, r1
 80034f6:	fa03 f606 	lsl.w	r6, r3, r6
 80034fa:	4334      	orrs	r4, r6
 80034fc:	fa23 f000 	lsr.w	r0, r3, r0
 8003500:	4304      	orrs	r4, r0
 8003502:	fa23 f501 	lsr.w	r5, r3, r1
 8003506:	b2a3      	uxth	r3, r4
 8003508:	4619      	mov	r1, r3
 800350a:	4660      	mov	r0, ip
 800350c:	f000 f864 	bl	80035d8 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003510:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003514:	f000 f87c 	bl	8003610 <FLASH_WaitForLastOperation>
 8003518:	4603      	mov	r3, r0
 800351a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800351c:	4b0d      	ldr	r3, [pc, #52]	@ (8003554 <HAL_FLASH_Program+0xdc>)
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	4a0c      	ldr	r2, [pc, #48]	@ (8003554 <HAL_FLASH_Program+0xdc>)
 8003522:	f023 0301 	bic.w	r3, r3, #1
 8003526:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003528:	7dfb      	ldrb	r3, [r7, #23]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d107      	bne.n	800353e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800352e:	7dbb      	ldrb	r3, [r7, #22]
 8003530:	3301      	adds	r3, #1
 8003532:	75bb      	strb	r3, [r7, #22]
 8003534:	7dba      	ldrb	r2, [r7, #22]
 8003536:	7d7b      	ldrb	r3, [r7, #21]
 8003538:	429a      	cmp	r2, r3
 800353a:	d3cd      	bcc.n	80034d8 <HAL_FLASH_Program+0x60>
 800353c:	e000      	b.n	8003540 <HAL_FLASH_Program+0xc8>
      {
        break;
 800353e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003540:	4b03      	ldr	r3, [pc, #12]	@ (8003550 <HAL_FLASH_Program+0xd8>)
 8003542:	2200      	movs	r2, #0
 8003544:	761a      	strb	r2, [r3, #24]

  return status;
 8003546:	7dfb      	ldrb	r3, [r7, #23]
}
 8003548:	4618      	mov	r0, r3
 800354a:	371c      	adds	r7, #28
 800354c:	46bd      	mov	sp, r7
 800354e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003550:	20000c68 	.word	0x20000c68
 8003554:	40022000 	.word	0x40022000

08003558 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800355e:	2300      	movs	r3, #0
 8003560:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003562:	4b0d      	ldr	r3, [pc, #52]	@ (8003598 <HAL_FLASH_Unlock+0x40>)
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00d      	beq.n	800358a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800356e:	4b0a      	ldr	r3, [pc, #40]	@ (8003598 <HAL_FLASH_Unlock+0x40>)
 8003570:	4a0a      	ldr	r2, [pc, #40]	@ (800359c <HAL_FLASH_Unlock+0x44>)
 8003572:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003574:	4b08      	ldr	r3, [pc, #32]	@ (8003598 <HAL_FLASH_Unlock+0x40>)
 8003576:	4a0a      	ldr	r2, [pc, #40]	@ (80035a0 <HAL_FLASH_Unlock+0x48>)
 8003578:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800357a:	4b07      	ldr	r3, [pc, #28]	@ (8003598 <HAL_FLASH_Unlock+0x40>)
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800358a:	79fb      	ldrb	r3, [r7, #7]
}
 800358c:	4618      	mov	r0, r3
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	bc80      	pop	{r7}
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	40022000 	.word	0x40022000
 800359c:	45670123 	.word	0x45670123
 80035a0:	cdef89ab 	.word	0xcdef89ab

080035a4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80035a8:	4b05      	ldr	r3, [pc, #20]	@ (80035c0 <HAL_FLASH_Lock+0x1c>)
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	4a04      	ldr	r2, [pc, #16]	@ (80035c0 <HAL_FLASH_Lock+0x1c>)
 80035ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035b2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bc80      	pop	{r7}
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	40022000 	.word	0x40022000

080035c4 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80035c8:	4b02      	ldr	r3, [pc, #8]	@ (80035d4 <HAL_FLASH_GetError+0x10>)
 80035ca:	69db      	ldr	r3, [r3, #28]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bc80      	pop	{r7}
 80035d2:	4770      	bx	lr
 80035d4:	20000c68 	.word	0x20000c68

080035d8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	460b      	mov	r3, r1
 80035e2:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80035e4:	4b08      	ldr	r3, [pc, #32]	@ (8003608 <FLASH_Program_HalfWord+0x30>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80035ea:	4b08      	ldr	r3, [pc, #32]	@ (800360c <FLASH_Program_HalfWord+0x34>)
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	4a07      	ldr	r2, [pc, #28]	@ (800360c <FLASH_Program_HalfWord+0x34>)
 80035f0:	f043 0301 	orr.w	r3, r3, #1
 80035f4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	887a      	ldrh	r2, [r7, #2]
 80035fa:	801a      	strh	r2, [r3, #0]
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	bc80      	pop	{r7}
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	20000c68 	.word	0x20000c68
 800360c:	40022000 	.word	0x40022000

08003610 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003618:	f7ff fd92 	bl	8003140 <HAL_GetTick>
 800361c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800361e:	e010      	b.n	8003642 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003626:	d00c      	beq.n	8003642 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d007      	beq.n	800363e <FLASH_WaitForLastOperation+0x2e>
 800362e:	f7ff fd87 	bl	8003140 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	429a      	cmp	r2, r3
 800363c:	d201      	bcs.n	8003642 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e025      	b.n	800368e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003642:	4b15      	ldr	r3, [pc, #84]	@ (8003698 <FLASH_WaitForLastOperation+0x88>)
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1e8      	bne.n	8003620 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800364e:	4b12      	ldr	r3, [pc, #72]	@ (8003698 <FLASH_WaitForLastOperation+0x88>)
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	f003 0320 	and.w	r3, r3, #32
 8003656:	2b00      	cmp	r3, #0
 8003658:	d002      	beq.n	8003660 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800365a:	4b0f      	ldr	r3, [pc, #60]	@ (8003698 <FLASH_WaitForLastOperation+0x88>)
 800365c:	2220      	movs	r2, #32
 800365e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003660:	4b0d      	ldr	r3, [pc, #52]	@ (8003698 <FLASH_WaitForLastOperation+0x88>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	f003 0310 	and.w	r3, r3, #16
 8003668:	2b00      	cmp	r3, #0
 800366a:	d10b      	bne.n	8003684 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800366c:	4b0a      	ldr	r3, [pc, #40]	@ (8003698 <FLASH_WaitForLastOperation+0x88>)
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003674:	2b00      	cmp	r3, #0
 8003676:	d105      	bne.n	8003684 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003678:	4b07      	ldr	r3, [pc, #28]	@ (8003698 <FLASH_WaitForLastOperation+0x88>)
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003680:	2b00      	cmp	r3, #0
 8003682:	d003      	beq.n	800368c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003684:	f000 f80a 	bl	800369c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e000      	b.n	800368e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	40022000 	.word	0x40022000

0800369c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80036a2:	2300      	movs	r3, #0
 80036a4:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80036a6:	4b23      	ldr	r3, [pc, #140]	@ (8003734 <FLASH_SetErrorCode+0x98>)
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	f003 0310 	and.w	r3, r3, #16
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d009      	beq.n	80036c6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80036b2:	4b21      	ldr	r3, [pc, #132]	@ (8003738 <FLASH_SetErrorCode+0x9c>)
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	f043 0302 	orr.w	r3, r3, #2
 80036ba:	4a1f      	ldr	r2, [pc, #124]	@ (8003738 <FLASH_SetErrorCode+0x9c>)
 80036bc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f043 0310 	orr.w	r3, r3, #16
 80036c4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80036c6:	4b1b      	ldr	r3, [pc, #108]	@ (8003734 <FLASH_SetErrorCode+0x98>)
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	f003 0304 	and.w	r3, r3, #4
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d009      	beq.n	80036e6 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80036d2:	4b19      	ldr	r3, [pc, #100]	@ (8003738 <FLASH_SetErrorCode+0x9c>)
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	f043 0301 	orr.w	r3, r3, #1
 80036da:	4a17      	ldr	r2, [pc, #92]	@ (8003738 <FLASH_SetErrorCode+0x9c>)
 80036dc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f043 0304 	orr.w	r3, r3, #4
 80036e4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80036e6:	4b13      	ldr	r3, [pc, #76]	@ (8003734 <FLASH_SetErrorCode+0x98>)
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00b      	beq.n	800370a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80036f2:	4b11      	ldr	r3, [pc, #68]	@ (8003738 <FLASH_SetErrorCode+0x9c>)
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	f043 0304 	orr.w	r3, r3, #4
 80036fa:	4a0f      	ldr	r2, [pc, #60]	@ (8003738 <FLASH_SetErrorCode+0x9c>)
 80036fc:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80036fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003734 <FLASH_SetErrorCode+0x98>)
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	4a0c      	ldr	r2, [pc, #48]	@ (8003734 <FLASH_SetErrorCode+0x98>)
 8003704:	f023 0301 	bic.w	r3, r3, #1
 8003708:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f240 1201 	movw	r2, #257	@ 0x101
 8003710:	4293      	cmp	r3, r2
 8003712:	d106      	bne.n	8003722 <FLASH_SetErrorCode+0x86>
 8003714:	4b07      	ldr	r3, [pc, #28]	@ (8003734 <FLASH_SetErrorCode+0x98>)
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	4a06      	ldr	r2, [pc, #24]	@ (8003734 <FLASH_SetErrorCode+0x98>)
 800371a:	f023 0301 	bic.w	r3, r3, #1
 800371e:	61d3      	str	r3, [r2, #28]
}  
 8003720:	e002      	b.n	8003728 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003722:	4a04      	ldr	r2, [pc, #16]	@ (8003734 <FLASH_SetErrorCode+0x98>)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	60d3      	str	r3, [r2, #12]
}  
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	bc80      	pop	{r7}
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	40022000 	.word	0x40022000
 8003738:	20000c68 	.word	0x20000c68

0800373c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800373c:	b480      	push	{r7}
 800373e:	b08b      	sub	sp, #44	@ 0x2c
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003746:	2300      	movs	r3, #0
 8003748:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800374a:	2300      	movs	r3, #0
 800374c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800374e:	e169      	b.n	8003a24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003750:	2201      	movs	r2, #1
 8003752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	69fa      	ldr	r2, [r7, #28]
 8003760:	4013      	ands	r3, r2
 8003762:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	429a      	cmp	r2, r3
 800376a:	f040 8158 	bne.w	8003a1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	4a9a      	ldr	r2, [pc, #616]	@ (80039dc <HAL_GPIO_Init+0x2a0>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d05e      	beq.n	8003836 <HAL_GPIO_Init+0xfa>
 8003778:	4a98      	ldr	r2, [pc, #608]	@ (80039dc <HAL_GPIO_Init+0x2a0>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d875      	bhi.n	800386a <HAL_GPIO_Init+0x12e>
 800377e:	4a98      	ldr	r2, [pc, #608]	@ (80039e0 <HAL_GPIO_Init+0x2a4>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d058      	beq.n	8003836 <HAL_GPIO_Init+0xfa>
 8003784:	4a96      	ldr	r2, [pc, #600]	@ (80039e0 <HAL_GPIO_Init+0x2a4>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d86f      	bhi.n	800386a <HAL_GPIO_Init+0x12e>
 800378a:	4a96      	ldr	r2, [pc, #600]	@ (80039e4 <HAL_GPIO_Init+0x2a8>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d052      	beq.n	8003836 <HAL_GPIO_Init+0xfa>
 8003790:	4a94      	ldr	r2, [pc, #592]	@ (80039e4 <HAL_GPIO_Init+0x2a8>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d869      	bhi.n	800386a <HAL_GPIO_Init+0x12e>
 8003796:	4a94      	ldr	r2, [pc, #592]	@ (80039e8 <HAL_GPIO_Init+0x2ac>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d04c      	beq.n	8003836 <HAL_GPIO_Init+0xfa>
 800379c:	4a92      	ldr	r2, [pc, #584]	@ (80039e8 <HAL_GPIO_Init+0x2ac>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d863      	bhi.n	800386a <HAL_GPIO_Init+0x12e>
 80037a2:	4a92      	ldr	r2, [pc, #584]	@ (80039ec <HAL_GPIO_Init+0x2b0>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d046      	beq.n	8003836 <HAL_GPIO_Init+0xfa>
 80037a8:	4a90      	ldr	r2, [pc, #576]	@ (80039ec <HAL_GPIO_Init+0x2b0>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d85d      	bhi.n	800386a <HAL_GPIO_Init+0x12e>
 80037ae:	2b12      	cmp	r3, #18
 80037b0:	d82a      	bhi.n	8003808 <HAL_GPIO_Init+0xcc>
 80037b2:	2b12      	cmp	r3, #18
 80037b4:	d859      	bhi.n	800386a <HAL_GPIO_Init+0x12e>
 80037b6:	a201      	add	r2, pc, #4	@ (adr r2, 80037bc <HAL_GPIO_Init+0x80>)
 80037b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037bc:	08003837 	.word	0x08003837
 80037c0:	08003811 	.word	0x08003811
 80037c4:	08003823 	.word	0x08003823
 80037c8:	08003865 	.word	0x08003865
 80037cc:	0800386b 	.word	0x0800386b
 80037d0:	0800386b 	.word	0x0800386b
 80037d4:	0800386b 	.word	0x0800386b
 80037d8:	0800386b 	.word	0x0800386b
 80037dc:	0800386b 	.word	0x0800386b
 80037e0:	0800386b 	.word	0x0800386b
 80037e4:	0800386b 	.word	0x0800386b
 80037e8:	0800386b 	.word	0x0800386b
 80037ec:	0800386b 	.word	0x0800386b
 80037f0:	0800386b 	.word	0x0800386b
 80037f4:	0800386b 	.word	0x0800386b
 80037f8:	0800386b 	.word	0x0800386b
 80037fc:	0800386b 	.word	0x0800386b
 8003800:	08003819 	.word	0x08003819
 8003804:	0800382d 	.word	0x0800382d
 8003808:	4a79      	ldr	r2, [pc, #484]	@ (80039f0 <HAL_GPIO_Init+0x2b4>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d013      	beq.n	8003836 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800380e:	e02c      	b.n	800386a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	623b      	str	r3, [r7, #32]
          break;
 8003816:	e029      	b.n	800386c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	3304      	adds	r3, #4
 800381e:	623b      	str	r3, [r7, #32]
          break;
 8003820:	e024      	b.n	800386c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	3308      	adds	r3, #8
 8003828:	623b      	str	r3, [r7, #32]
          break;
 800382a:	e01f      	b.n	800386c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	330c      	adds	r3, #12
 8003832:	623b      	str	r3, [r7, #32]
          break;
 8003834:	e01a      	b.n	800386c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d102      	bne.n	8003844 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800383e:	2304      	movs	r3, #4
 8003840:	623b      	str	r3, [r7, #32]
          break;
 8003842:	e013      	b.n	800386c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d105      	bne.n	8003858 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800384c:	2308      	movs	r3, #8
 800384e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	69fa      	ldr	r2, [r7, #28]
 8003854:	611a      	str	r2, [r3, #16]
          break;
 8003856:	e009      	b.n	800386c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003858:	2308      	movs	r3, #8
 800385a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	69fa      	ldr	r2, [r7, #28]
 8003860:	615a      	str	r2, [r3, #20]
          break;
 8003862:	e003      	b.n	800386c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003864:	2300      	movs	r3, #0
 8003866:	623b      	str	r3, [r7, #32]
          break;
 8003868:	e000      	b.n	800386c <HAL_GPIO_Init+0x130>
          break;
 800386a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	2bff      	cmp	r3, #255	@ 0xff
 8003870:	d801      	bhi.n	8003876 <HAL_GPIO_Init+0x13a>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	e001      	b.n	800387a <HAL_GPIO_Init+0x13e>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	3304      	adds	r3, #4
 800387a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	2bff      	cmp	r3, #255	@ 0xff
 8003880:	d802      	bhi.n	8003888 <HAL_GPIO_Init+0x14c>
 8003882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	e002      	b.n	800388e <HAL_GPIO_Init+0x152>
 8003888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388a:	3b08      	subs	r3, #8
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	210f      	movs	r1, #15
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	fa01 f303 	lsl.w	r3, r1, r3
 800389c:	43db      	mvns	r3, r3
 800389e:	401a      	ands	r2, r3
 80038a0:	6a39      	ldr	r1, [r7, #32]
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	fa01 f303 	lsl.w	r3, r1, r3
 80038a8:	431a      	orrs	r2, r3
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f000 80b1 	beq.w	8003a1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80038bc:	4b4d      	ldr	r3, [pc, #308]	@ (80039f4 <HAL_GPIO_Init+0x2b8>)
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	4a4c      	ldr	r2, [pc, #304]	@ (80039f4 <HAL_GPIO_Init+0x2b8>)
 80038c2:	f043 0301 	orr.w	r3, r3, #1
 80038c6:	6193      	str	r3, [r2, #24]
 80038c8:	4b4a      	ldr	r3, [pc, #296]	@ (80039f4 <HAL_GPIO_Init+0x2b8>)
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	60bb      	str	r3, [r7, #8]
 80038d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80038d4:	4a48      	ldr	r2, [pc, #288]	@ (80039f8 <HAL_GPIO_Init+0x2bc>)
 80038d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d8:	089b      	lsrs	r3, r3, #2
 80038da:	3302      	adds	r3, #2
 80038dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80038e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e4:	f003 0303 	and.w	r3, r3, #3
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	220f      	movs	r2, #15
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	43db      	mvns	r3, r3
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	4013      	ands	r3, r2
 80038f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a40      	ldr	r2, [pc, #256]	@ (80039fc <HAL_GPIO_Init+0x2c0>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d013      	beq.n	8003928 <HAL_GPIO_Init+0x1ec>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a3f      	ldr	r2, [pc, #252]	@ (8003a00 <HAL_GPIO_Init+0x2c4>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d00d      	beq.n	8003924 <HAL_GPIO_Init+0x1e8>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a3e      	ldr	r2, [pc, #248]	@ (8003a04 <HAL_GPIO_Init+0x2c8>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d007      	beq.n	8003920 <HAL_GPIO_Init+0x1e4>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a3d      	ldr	r2, [pc, #244]	@ (8003a08 <HAL_GPIO_Init+0x2cc>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d101      	bne.n	800391c <HAL_GPIO_Init+0x1e0>
 8003918:	2303      	movs	r3, #3
 800391a:	e006      	b.n	800392a <HAL_GPIO_Init+0x1ee>
 800391c:	2304      	movs	r3, #4
 800391e:	e004      	b.n	800392a <HAL_GPIO_Init+0x1ee>
 8003920:	2302      	movs	r3, #2
 8003922:	e002      	b.n	800392a <HAL_GPIO_Init+0x1ee>
 8003924:	2301      	movs	r3, #1
 8003926:	e000      	b.n	800392a <HAL_GPIO_Init+0x1ee>
 8003928:	2300      	movs	r3, #0
 800392a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800392c:	f002 0203 	and.w	r2, r2, #3
 8003930:	0092      	lsls	r2, r2, #2
 8003932:	4093      	lsls	r3, r2
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	4313      	orrs	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800393a:	492f      	ldr	r1, [pc, #188]	@ (80039f8 <HAL_GPIO_Init+0x2bc>)
 800393c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393e:	089b      	lsrs	r3, r3, #2
 8003940:	3302      	adds	r3, #2
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d006      	beq.n	8003962 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003954:	4b2d      	ldr	r3, [pc, #180]	@ (8003a0c <HAL_GPIO_Init+0x2d0>)
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	492c      	ldr	r1, [pc, #176]	@ (8003a0c <HAL_GPIO_Init+0x2d0>)
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	4313      	orrs	r3, r2
 800395e:	608b      	str	r3, [r1, #8]
 8003960:	e006      	b.n	8003970 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003962:	4b2a      	ldr	r3, [pc, #168]	@ (8003a0c <HAL_GPIO_Init+0x2d0>)
 8003964:	689a      	ldr	r2, [r3, #8]
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	43db      	mvns	r3, r3
 800396a:	4928      	ldr	r1, [pc, #160]	@ (8003a0c <HAL_GPIO_Init+0x2d0>)
 800396c:	4013      	ands	r3, r2
 800396e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d006      	beq.n	800398a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800397c:	4b23      	ldr	r3, [pc, #140]	@ (8003a0c <HAL_GPIO_Init+0x2d0>)
 800397e:	68da      	ldr	r2, [r3, #12]
 8003980:	4922      	ldr	r1, [pc, #136]	@ (8003a0c <HAL_GPIO_Init+0x2d0>)
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	4313      	orrs	r3, r2
 8003986:	60cb      	str	r3, [r1, #12]
 8003988:	e006      	b.n	8003998 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800398a:	4b20      	ldr	r3, [pc, #128]	@ (8003a0c <HAL_GPIO_Init+0x2d0>)
 800398c:	68da      	ldr	r2, [r3, #12]
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	43db      	mvns	r3, r3
 8003992:	491e      	ldr	r1, [pc, #120]	@ (8003a0c <HAL_GPIO_Init+0x2d0>)
 8003994:	4013      	ands	r3, r2
 8003996:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d006      	beq.n	80039b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80039a4:	4b19      	ldr	r3, [pc, #100]	@ (8003a0c <HAL_GPIO_Init+0x2d0>)
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	4918      	ldr	r1, [pc, #96]	@ (8003a0c <HAL_GPIO_Init+0x2d0>)
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	604b      	str	r3, [r1, #4]
 80039b0:	e006      	b.n	80039c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80039b2:	4b16      	ldr	r3, [pc, #88]	@ (8003a0c <HAL_GPIO_Init+0x2d0>)
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	43db      	mvns	r3, r3
 80039ba:	4914      	ldr	r1, [pc, #80]	@ (8003a0c <HAL_GPIO_Init+0x2d0>)
 80039bc:	4013      	ands	r3, r2
 80039be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d021      	beq.n	8003a10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80039cc:	4b0f      	ldr	r3, [pc, #60]	@ (8003a0c <HAL_GPIO_Init+0x2d0>)
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	490e      	ldr	r1, [pc, #56]	@ (8003a0c <HAL_GPIO_Init+0x2d0>)
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	600b      	str	r3, [r1, #0]
 80039d8:	e021      	b.n	8003a1e <HAL_GPIO_Init+0x2e2>
 80039da:	bf00      	nop
 80039dc:	10320000 	.word	0x10320000
 80039e0:	10310000 	.word	0x10310000
 80039e4:	10220000 	.word	0x10220000
 80039e8:	10210000 	.word	0x10210000
 80039ec:	10120000 	.word	0x10120000
 80039f0:	10110000 	.word	0x10110000
 80039f4:	40021000 	.word	0x40021000
 80039f8:	40010000 	.word	0x40010000
 80039fc:	40010800 	.word	0x40010800
 8003a00:	40010c00 	.word	0x40010c00
 8003a04:	40011000 	.word	0x40011000
 8003a08:	40011400 	.word	0x40011400
 8003a0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003a10:	4b0b      	ldr	r3, [pc, #44]	@ (8003a40 <HAL_GPIO_Init+0x304>)
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	43db      	mvns	r3, r3
 8003a18:	4909      	ldr	r1, [pc, #36]	@ (8003a40 <HAL_GPIO_Init+0x304>)
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a20:	3301      	adds	r3, #1
 8003a22:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f47f ae8e 	bne.w	8003750 <HAL_GPIO_Init+0x14>
  }
}
 8003a34:	bf00      	nop
 8003a36:	bf00      	nop
 8003a38:	372c      	adds	r7, #44	@ 0x2c
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bc80      	pop	{r7}
 8003a3e:	4770      	bx	lr
 8003a40:	40010400 	.word	0x40010400

08003a44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	887b      	ldrh	r3, [r7, #2]
 8003a56:	4013      	ands	r3, r2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d002      	beq.n	8003a62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	73fb      	strb	r3, [r7, #15]
 8003a60:	e001      	b.n	8003a66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a62:	2300      	movs	r3, #0
 8003a64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3714      	adds	r7, #20
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bc80      	pop	{r7}
 8003a70:	4770      	bx	lr

08003a72 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	807b      	strh	r3, [r7, #2]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a82:	787b      	ldrb	r3, [r7, #1]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a88:	887a      	ldrh	r2, [r7, #2]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003a8e:	e003      	b.n	8003a98 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a90:	887b      	ldrh	r3, [r7, #2]
 8003a92:	041a      	lsls	r2, r3, #16
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	611a      	str	r2, [r3, #16]
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bc80      	pop	{r7}
 8003aa0:	4770      	bx	lr

08003aa2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b085      	sub	sp, #20
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
 8003aaa:	460b      	mov	r3, r1
 8003aac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ab4:	887a      	ldrh	r2, [r7, #2]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	041a      	lsls	r2, r3, #16
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	43d9      	mvns	r1, r3
 8003ac0:	887b      	ldrh	r3, [r7, #2]
 8003ac2:	400b      	ands	r3, r1
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	611a      	str	r2, [r3, #16]
}
 8003aca:	bf00      	nop
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bc80      	pop	{r7}
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e272      	b.n	8003fcc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f000 8087 	beq.w	8003c02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003af4:	4b92      	ldr	r3, [pc, #584]	@ (8003d40 <HAL_RCC_OscConfig+0x26c>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f003 030c 	and.w	r3, r3, #12
 8003afc:	2b04      	cmp	r3, #4
 8003afe:	d00c      	beq.n	8003b1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b00:	4b8f      	ldr	r3, [pc, #572]	@ (8003d40 <HAL_RCC_OscConfig+0x26c>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f003 030c 	and.w	r3, r3, #12
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d112      	bne.n	8003b32 <HAL_RCC_OscConfig+0x5e>
 8003b0c:	4b8c      	ldr	r3, [pc, #560]	@ (8003d40 <HAL_RCC_OscConfig+0x26c>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b18:	d10b      	bne.n	8003b32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b1a:	4b89      	ldr	r3, [pc, #548]	@ (8003d40 <HAL_RCC_OscConfig+0x26c>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d06c      	beq.n	8003c00 <HAL_RCC_OscConfig+0x12c>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d168      	bne.n	8003c00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e24c      	b.n	8003fcc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b3a:	d106      	bne.n	8003b4a <HAL_RCC_OscConfig+0x76>
 8003b3c:	4b80      	ldr	r3, [pc, #512]	@ (8003d40 <HAL_RCC_OscConfig+0x26c>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a7f      	ldr	r2, [pc, #508]	@ (8003d40 <HAL_RCC_OscConfig+0x26c>)
 8003b42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b46:	6013      	str	r3, [r2, #0]
 8003b48:	e02e      	b.n	8003ba8 <HAL_RCC_OscConfig+0xd4>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10c      	bne.n	8003b6c <HAL_RCC_OscConfig+0x98>
 8003b52:	4b7b      	ldr	r3, [pc, #492]	@ (8003d40 <HAL_RCC_OscConfig+0x26c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a7a      	ldr	r2, [pc, #488]	@ (8003d40 <HAL_RCC_OscConfig+0x26c>)
 8003b58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b5c:	6013      	str	r3, [r2, #0]
 8003b5e:	4b78      	ldr	r3, [pc, #480]	@ (8003d40 <HAL_RCC_OscConfig+0x26c>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a77      	ldr	r2, [pc, #476]	@ (8003d40 <HAL_RCC_OscConfig+0x26c>)
 8003b64:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	e01d      	b.n	8003ba8 <HAL_RCC_OscConfig+0xd4>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b74:	d10c      	bne.n	8003b90 <HAL_RCC_OscConfig+0xbc>
 8003b76:	4b72      	ldr	r3, [pc, #456]	@ (8003d40 <HAL_RCC_OscConfig+0x26c>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a71      	ldr	r2, [pc, #452]	@ (8003d40 <HAL_RCC_OscConfig+0x26c>)
 8003b7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b80:	6013      	str	r3, [r2, #0]
 8003b82:	4b6f      	ldr	r3, [pc, #444]	@ (8003d40 <HAL_RCC_OscConfig+0x26c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a6e      	ldr	r2, [pc, #440]	@ (8003d40 <HAL_RCC_OscConfig+0x26c>)
 8003b88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b8c:	6013      	str	r3, [r2, #0]
 8003b8e:	e00b      	b.n	8003ba8 <HAL_RCC_OscConfig+0xd4>
 8003b90:	4b6b      	ldr	r3, [pc, #428]	@ (8003d40 <HAL_RCC_OscConfig+0x26c>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a6a      	ldr	r2, [pc, #424]	@ (8003d40 <HAL_RCC_OscConfig+0x26c>)
 8003b96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b9a:	6013      	str	r3, [r2, #0]
 8003b9c:	4b68      	ldr	r3, [pc, #416]	@ (8003d40 <HAL_RCC_OscConfig+0x26c>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a67      	ldr	r2, [pc, #412]	@ (8003d40 <HAL_RCC_OscConfig+0x26c>)
 8003ba2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ba6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d013      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb0:	f7ff fac6 	bl	8003140 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bb8:	f7ff fac2 	bl	8003140 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b64      	cmp	r3, #100	@ 0x64
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e200      	b.n	8003fcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bca:	4b5d      	ldr	r3, [pc, #372]	@ (8003d40 <HAL_RCC_OscConfig+0x26c>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0f0      	beq.n	8003bb8 <HAL_RCC_OscConfig+0xe4>
 8003bd6:	e014      	b.n	8003c02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd8:	f7ff fab2 	bl	8003140 <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003be0:	f7ff faae 	bl	8003140 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b64      	cmp	r3, #100	@ 0x64
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e1ec      	b.n	8003fcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bf2:	4b53      	ldr	r3, [pc, #332]	@ (8003d40 <HAL_RCC_OscConfig+0x26c>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1f0      	bne.n	8003be0 <HAL_RCC_OscConfig+0x10c>
 8003bfe:	e000      	b.n	8003c02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d063      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c0e:	4b4c      	ldr	r3, [pc, #304]	@ (8003d40 <HAL_RCC_OscConfig+0x26c>)
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f003 030c 	and.w	r3, r3, #12
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00b      	beq.n	8003c32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003c1a:	4b49      	ldr	r3, [pc, #292]	@ (8003d40 <HAL_RCC_OscConfig+0x26c>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f003 030c 	and.w	r3, r3, #12
 8003c22:	2b08      	cmp	r3, #8
 8003c24:	d11c      	bne.n	8003c60 <HAL_RCC_OscConfig+0x18c>
 8003c26:	4b46      	ldr	r3, [pc, #280]	@ (8003d40 <HAL_RCC_OscConfig+0x26c>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d116      	bne.n	8003c60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c32:	4b43      	ldr	r3, [pc, #268]	@ (8003d40 <HAL_RCC_OscConfig+0x26c>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d005      	beq.n	8003c4a <HAL_RCC_OscConfig+0x176>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d001      	beq.n	8003c4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e1c0      	b.n	8003fcc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c4a:	4b3d      	ldr	r3, [pc, #244]	@ (8003d40 <HAL_RCC_OscConfig+0x26c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	4939      	ldr	r1, [pc, #228]	@ (8003d40 <HAL_RCC_OscConfig+0x26c>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c5e:	e03a      	b.n	8003cd6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d020      	beq.n	8003caa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c68:	4b36      	ldr	r3, [pc, #216]	@ (8003d44 <HAL_RCC_OscConfig+0x270>)
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c6e:	f7ff fa67 	bl	8003140 <HAL_GetTick>
 8003c72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c74:	e008      	b.n	8003c88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c76:	f7ff fa63 	bl	8003140 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e1a1      	b.n	8003fcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c88:	4b2d      	ldr	r3, [pc, #180]	@ (8003d40 <HAL_RCC_OscConfig+0x26c>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0f0      	beq.n	8003c76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c94:	4b2a      	ldr	r3, [pc, #168]	@ (8003d40 <HAL_RCC_OscConfig+0x26c>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	00db      	lsls	r3, r3, #3
 8003ca2:	4927      	ldr	r1, [pc, #156]	@ (8003d40 <HAL_RCC_OscConfig+0x26c>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	600b      	str	r3, [r1, #0]
 8003ca8:	e015      	b.n	8003cd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003caa:	4b26      	ldr	r3, [pc, #152]	@ (8003d44 <HAL_RCC_OscConfig+0x270>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb0:	f7ff fa46 	bl	8003140 <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cb8:	f7ff fa42 	bl	8003140 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e180      	b.n	8003fcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cca:	4b1d      	ldr	r3, [pc, #116]	@ (8003d40 <HAL_RCC_OscConfig+0x26c>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1f0      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0308 	and.w	r3, r3, #8
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d03a      	beq.n	8003d58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d019      	beq.n	8003d1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cea:	4b17      	ldr	r3, [pc, #92]	@ (8003d48 <HAL_RCC_OscConfig+0x274>)
 8003cec:	2201      	movs	r2, #1
 8003cee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cf0:	f7ff fa26 	bl	8003140 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cf8:	f7ff fa22 	bl	8003140 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e160      	b.n	8003fcc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d40 <HAL_RCC_OscConfig+0x26c>)
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d0f0      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003d16:	2001      	movs	r0, #1
 8003d18:	f000 fafe 	bl	8004318 <RCC_Delay>
 8003d1c:	e01c      	b.n	8003d58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8003d48 <HAL_RCC_OscConfig+0x274>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d24:	f7ff fa0c 	bl	8003140 <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d2a:	e00f      	b.n	8003d4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d2c:	f7ff fa08 	bl	8003140 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d908      	bls.n	8003d4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e146      	b.n	8003fcc <HAL_RCC_OscConfig+0x4f8>
 8003d3e:	bf00      	nop
 8003d40:	40021000 	.word	0x40021000
 8003d44:	42420000 	.word	0x42420000
 8003d48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d4c:	4b92      	ldr	r3, [pc, #584]	@ (8003f98 <HAL_RCC_OscConfig+0x4c4>)
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1e9      	bne.n	8003d2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 80a6 	beq.w	8003eb2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d66:	2300      	movs	r3, #0
 8003d68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d6a:	4b8b      	ldr	r3, [pc, #556]	@ (8003f98 <HAL_RCC_OscConfig+0x4c4>)
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10d      	bne.n	8003d92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d76:	4b88      	ldr	r3, [pc, #544]	@ (8003f98 <HAL_RCC_OscConfig+0x4c4>)
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	4a87      	ldr	r2, [pc, #540]	@ (8003f98 <HAL_RCC_OscConfig+0x4c4>)
 8003d7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d80:	61d3      	str	r3, [r2, #28]
 8003d82:	4b85      	ldr	r3, [pc, #532]	@ (8003f98 <HAL_RCC_OscConfig+0x4c4>)
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d8a:	60bb      	str	r3, [r7, #8]
 8003d8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d92:	4b82      	ldr	r3, [pc, #520]	@ (8003f9c <HAL_RCC_OscConfig+0x4c8>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d118      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d9e:	4b7f      	ldr	r3, [pc, #508]	@ (8003f9c <HAL_RCC_OscConfig+0x4c8>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a7e      	ldr	r2, [pc, #504]	@ (8003f9c <HAL_RCC_OscConfig+0x4c8>)
 8003da4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003da8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003daa:	f7ff f9c9 	bl	8003140 <HAL_GetTick>
 8003dae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db0:	e008      	b.n	8003dc4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db2:	f7ff f9c5 	bl	8003140 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b64      	cmp	r3, #100	@ 0x64
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e103      	b.n	8003fcc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc4:	4b75      	ldr	r3, [pc, #468]	@ (8003f9c <HAL_RCC_OscConfig+0x4c8>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0f0      	beq.n	8003db2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d106      	bne.n	8003de6 <HAL_RCC_OscConfig+0x312>
 8003dd8:	4b6f      	ldr	r3, [pc, #444]	@ (8003f98 <HAL_RCC_OscConfig+0x4c4>)
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	4a6e      	ldr	r2, [pc, #440]	@ (8003f98 <HAL_RCC_OscConfig+0x4c4>)
 8003dde:	f043 0301 	orr.w	r3, r3, #1
 8003de2:	6213      	str	r3, [r2, #32]
 8003de4:	e02d      	b.n	8003e42 <HAL_RCC_OscConfig+0x36e>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10c      	bne.n	8003e08 <HAL_RCC_OscConfig+0x334>
 8003dee:	4b6a      	ldr	r3, [pc, #424]	@ (8003f98 <HAL_RCC_OscConfig+0x4c4>)
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	4a69      	ldr	r2, [pc, #420]	@ (8003f98 <HAL_RCC_OscConfig+0x4c4>)
 8003df4:	f023 0301 	bic.w	r3, r3, #1
 8003df8:	6213      	str	r3, [r2, #32]
 8003dfa:	4b67      	ldr	r3, [pc, #412]	@ (8003f98 <HAL_RCC_OscConfig+0x4c4>)
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	4a66      	ldr	r2, [pc, #408]	@ (8003f98 <HAL_RCC_OscConfig+0x4c4>)
 8003e00:	f023 0304 	bic.w	r3, r3, #4
 8003e04:	6213      	str	r3, [r2, #32]
 8003e06:	e01c      	b.n	8003e42 <HAL_RCC_OscConfig+0x36e>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	2b05      	cmp	r3, #5
 8003e0e:	d10c      	bne.n	8003e2a <HAL_RCC_OscConfig+0x356>
 8003e10:	4b61      	ldr	r3, [pc, #388]	@ (8003f98 <HAL_RCC_OscConfig+0x4c4>)
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	4a60      	ldr	r2, [pc, #384]	@ (8003f98 <HAL_RCC_OscConfig+0x4c4>)
 8003e16:	f043 0304 	orr.w	r3, r3, #4
 8003e1a:	6213      	str	r3, [r2, #32]
 8003e1c:	4b5e      	ldr	r3, [pc, #376]	@ (8003f98 <HAL_RCC_OscConfig+0x4c4>)
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	4a5d      	ldr	r2, [pc, #372]	@ (8003f98 <HAL_RCC_OscConfig+0x4c4>)
 8003e22:	f043 0301 	orr.w	r3, r3, #1
 8003e26:	6213      	str	r3, [r2, #32]
 8003e28:	e00b      	b.n	8003e42 <HAL_RCC_OscConfig+0x36e>
 8003e2a:	4b5b      	ldr	r3, [pc, #364]	@ (8003f98 <HAL_RCC_OscConfig+0x4c4>)
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	4a5a      	ldr	r2, [pc, #360]	@ (8003f98 <HAL_RCC_OscConfig+0x4c4>)
 8003e30:	f023 0301 	bic.w	r3, r3, #1
 8003e34:	6213      	str	r3, [r2, #32]
 8003e36:	4b58      	ldr	r3, [pc, #352]	@ (8003f98 <HAL_RCC_OscConfig+0x4c4>)
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	4a57      	ldr	r2, [pc, #348]	@ (8003f98 <HAL_RCC_OscConfig+0x4c4>)
 8003e3c:	f023 0304 	bic.w	r3, r3, #4
 8003e40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d015      	beq.n	8003e76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e4a:	f7ff f979 	bl	8003140 <HAL_GetTick>
 8003e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e50:	e00a      	b.n	8003e68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e52:	f7ff f975 	bl	8003140 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e0b1      	b.n	8003fcc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e68:	4b4b      	ldr	r3, [pc, #300]	@ (8003f98 <HAL_RCC_OscConfig+0x4c4>)
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d0ee      	beq.n	8003e52 <HAL_RCC_OscConfig+0x37e>
 8003e74:	e014      	b.n	8003ea0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e76:	f7ff f963 	bl	8003140 <HAL_GetTick>
 8003e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e7c:	e00a      	b.n	8003e94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e7e:	f7ff f95f 	bl	8003140 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e09b      	b.n	8003fcc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e94:	4b40      	ldr	r3, [pc, #256]	@ (8003f98 <HAL_RCC_OscConfig+0x4c4>)
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1ee      	bne.n	8003e7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ea0:	7dfb      	ldrb	r3, [r7, #23]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d105      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ea6:	4b3c      	ldr	r3, [pc, #240]	@ (8003f98 <HAL_RCC_OscConfig+0x4c4>)
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	4a3b      	ldr	r2, [pc, #236]	@ (8003f98 <HAL_RCC_OscConfig+0x4c4>)
 8003eac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003eb0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 8087 	beq.w	8003fca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ebc:	4b36      	ldr	r3, [pc, #216]	@ (8003f98 <HAL_RCC_OscConfig+0x4c4>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f003 030c 	and.w	r3, r3, #12
 8003ec4:	2b08      	cmp	r3, #8
 8003ec6:	d061      	beq.n	8003f8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d146      	bne.n	8003f5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed0:	4b33      	ldr	r3, [pc, #204]	@ (8003fa0 <HAL_RCC_OscConfig+0x4cc>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed6:	f7ff f933 	bl	8003140 <HAL_GetTick>
 8003eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003edc:	e008      	b.n	8003ef0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ede:	f7ff f92f 	bl	8003140 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e06d      	b.n	8003fcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ef0:	4b29      	ldr	r3, [pc, #164]	@ (8003f98 <HAL_RCC_OscConfig+0x4c4>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1f0      	bne.n	8003ede <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f04:	d108      	bne.n	8003f18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f06:	4b24      	ldr	r3, [pc, #144]	@ (8003f98 <HAL_RCC_OscConfig+0x4c4>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	4921      	ldr	r1, [pc, #132]	@ (8003f98 <HAL_RCC_OscConfig+0x4c4>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f18:	4b1f      	ldr	r3, [pc, #124]	@ (8003f98 <HAL_RCC_OscConfig+0x4c4>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a19      	ldr	r1, [r3, #32]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f28:	430b      	orrs	r3, r1
 8003f2a:	491b      	ldr	r1, [pc, #108]	@ (8003f98 <HAL_RCC_OscConfig+0x4c4>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f30:	4b1b      	ldr	r3, [pc, #108]	@ (8003fa0 <HAL_RCC_OscConfig+0x4cc>)
 8003f32:	2201      	movs	r2, #1
 8003f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f36:	f7ff f903 	bl	8003140 <HAL_GetTick>
 8003f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f3c:	e008      	b.n	8003f50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f3e:	f7ff f8ff 	bl	8003140 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e03d      	b.n	8003fcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f50:	4b11      	ldr	r3, [pc, #68]	@ (8003f98 <HAL_RCC_OscConfig+0x4c4>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d0f0      	beq.n	8003f3e <HAL_RCC_OscConfig+0x46a>
 8003f5c:	e035      	b.n	8003fca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f5e:	4b10      	ldr	r3, [pc, #64]	@ (8003fa0 <HAL_RCC_OscConfig+0x4cc>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f64:	f7ff f8ec 	bl	8003140 <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f6c:	f7ff f8e8 	bl	8003140 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e026      	b.n	8003fcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f7e:	4b06      	ldr	r3, [pc, #24]	@ (8003f98 <HAL_RCC_OscConfig+0x4c4>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1f0      	bne.n	8003f6c <HAL_RCC_OscConfig+0x498>
 8003f8a:	e01e      	b.n	8003fca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d107      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e019      	b.n	8003fcc <HAL_RCC_OscConfig+0x4f8>
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	40007000 	.word	0x40007000
 8003fa0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd4 <HAL_RCC_OscConfig+0x500>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d106      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d001      	beq.n	8003fca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e000      	b.n	8003fcc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3718      	adds	r7, #24
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	40021000 	.word	0x40021000

08003fd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d101      	bne.n	8003fec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e0d0      	b.n	800418e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fec:	4b6a      	ldr	r3, [pc, #424]	@ (8004198 <HAL_RCC_ClockConfig+0x1c0>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0307 	and.w	r3, r3, #7
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d910      	bls.n	800401c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ffa:	4b67      	ldr	r3, [pc, #412]	@ (8004198 <HAL_RCC_ClockConfig+0x1c0>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f023 0207 	bic.w	r2, r3, #7
 8004002:	4965      	ldr	r1, [pc, #404]	@ (8004198 <HAL_RCC_ClockConfig+0x1c0>)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	4313      	orrs	r3, r2
 8004008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800400a:	4b63      	ldr	r3, [pc, #396]	@ (8004198 <HAL_RCC_ClockConfig+0x1c0>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0307 	and.w	r3, r3, #7
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	429a      	cmp	r2, r3
 8004016:	d001      	beq.n	800401c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e0b8      	b.n	800418e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d020      	beq.n	800406a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0304 	and.w	r3, r3, #4
 8004030:	2b00      	cmp	r3, #0
 8004032:	d005      	beq.n	8004040 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004034:	4b59      	ldr	r3, [pc, #356]	@ (800419c <HAL_RCC_ClockConfig+0x1c4>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	4a58      	ldr	r2, [pc, #352]	@ (800419c <HAL_RCC_ClockConfig+0x1c4>)
 800403a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800403e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0308 	and.w	r3, r3, #8
 8004048:	2b00      	cmp	r3, #0
 800404a:	d005      	beq.n	8004058 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800404c:	4b53      	ldr	r3, [pc, #332]	@ (800419c <HAL_RCC_ClockConfig+0x1c4>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	4a52      	ldr	r2, [pc, #328]	@ (800419c <HAL_RCC_ClockConfig+0x1c4>)
 8004052:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004056:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004058:	4b50      	ldr	r3, [pc, #320]	@ (800419c <HAL_RCC_ClockConfig+0x1c4>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	494d      	ldr	r1, [pc, #308]	@ (800419c <HAL_RCC_ClockConfig+0x1c4>)
 8004066:	4313      	orrs	r3, r2
 8004068:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d040      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d107      	bne.n	800408e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800407e:	4b47      	ldr	r3, [pc, #284]	@ (800419c <HAL_RCC_ClockConfig+0x1c4>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d115      	bne.n	80040b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e07f      	b.n	800418e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	2b02      	cmp	r3, #2
 8004094:	d107      	bne.n	80040a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004096:	4b41      	ldr	r3, [pc, #260]	@ (800419c <HAL_RCC_ClockConfig+0x1c4>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d109      	bne.n	80040b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e073      	b.n	800418e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040a6:	4b3d      	ldr	r3, [pc, #244]	@ (800419c <HAL_RCC_ClockConfig+0x1c4>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e06b      	b.n	800418e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040b6:	4b39      	ldr	r3, [pc, #228]	@ (800419c <HAL_RCC_ClockConfig+0x1c4>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f023 0203 	bic.w	r2, r3, #3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	4936      	ldr	r1, [pc, #216]	@ (800419c <HAL_RCC_ClockConfig+0x1c4>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040c8:	f7ff f83a 	bl	8003140 <HAL_GetTick>
 80040cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ce:	e00a      	b.n	80040e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040d0:	f7ff f836 	bl	8003140 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040de:	4293      	cmp	r3, r2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e053      	b.n	800418e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040e6:	4b2d      	ldr	r3, [pc, #180]	@ (800419c <HAL_RCC_ClockConfig+0x1c4>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f003 020c 	and.w	r2, r3, #12
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d1eb      	bne.n	80040d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040f8:	4b27      	ldr	r3, [pc, #156]	@ (8004198 <HAL_RCC_ClockConfig+0x1c0>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0307 	and.w	r3, r3, #7
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	429a      	cmp	r2, r3
 8004104:	d210      	bcs.n	8004128 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004106:	4b24      	ldr	r3, [pc, #144]	@ (8004198 <HAL_RCC_ClockConfig+0x1c0>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f023 0207 	bic.w	r2, r3, #7
 800410e:	4922      	ldr	r1, [pc, #136]	@ (8004198 <HAL_RCC_ClockConfig+0x1c0>)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	4313      	orrs	r3, r2
 8004114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004116:	4b20      	ldr	r3, [pc, #128]	@ (8004198 <HAL_RCC_ClockConfig+0x1c0>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0307 	and.w	r3, r3, #7
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	429a      	cmp	r2, r3
 8004122:	d001      	beq.n	8004128 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e032      	b.n	800418e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0304 	and.w	r3, r3, #4
 8004130:	2b00      	cmp	r3, #0
 8004132:	d008      	beq.n	8004146 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004134:	4b19      	ldr	r3, [pc, #100]	@ (800419c <HAL_RCC_ClockConfig+0x1c4>)
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	4916      	ldr	r1, [pc, #88]	@ (800419c <HAL_RCC_ClockConfig+0x1c4>)
 8004142:	4313      	orrs	r3, r2
 8004144:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0308 	and.w	r3, r3, #8
 800414e:	2b00      	cmp	r3, #0
 8004150:	d009      	beq.n	8004166 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004152:	4b12      	ldr	r3, [pc, #72]	@ (800419c <HAL_RCC_ClockConfig+0x1c4>)
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	490e      	ldr	r1, [pc, #56]	@ (800419c <HAL_RCC_ClockConfig+0x1c4>)
 8004162:	4313      	orrs	r3, r2
 8004164:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004166:	f000 f821 	bl	80041ac <HAL_RCC_GetSysClockFreq>
 800416a:	4602      	mov	r2, r0
 800416c:	4b0b      	ldr	r3, [pc, #44]	@ (800419c <HAL_RCC_ClockConfig+0x1c4>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	091b      	lsrs	r3, r3, #4
 8004172:	f003 030f 	and.w	r3, r3, #15
 8004176:	490a      	ldr	r1, [pc, #40]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c8>)
 8004178:	5ccb      	ldrb	r3, [r1, r3]
 800417a:	fa22 f303 	lsr.w	r3, r2, r3
 800417e:	4a09      	ldr	r2, [pc, #36]	@ (80041a4 <HAL_RCC_ClockConfig+0x1cc>)
 8004180:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004182:	4b09      	ldr	r3, [pc, #36]	@ (80041a8 <HAL_RCC_ClockConfig+0x1d0>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4618      	mov	r0, r3
 8004188:	f7fd f948 	bl	800141c <HAL_InitTick>

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	40022000 	.word	0x40022000
 800419c:	40021000 	.word	0x40021000
 80041a0:	0800932c 	.word	0x0800932c
 80041a4:	200000a0 	.word	0x200000a0
 80041a8:	20000144 	.word	0x20000144

080041ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b087      	sub	sp, #28
 80041b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80041b2:	2300      	movs	r3, #0
 80041b4:	60fb      	str	r3, [r7, #12]
 80041b6:	2300      	movs	r3, #0
 80041b8:	60bb      	str	r3, [r7, #8]
 80041ba:	2300      	movs	r3, #0
 80041bc:	617b      	str	r3, [r7, #20]
 80041be:	2300      	movs	r3, #0
 80041c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80041c2:	2300      	movs	r3, #0
 80041c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80041c6:	4b1e      	ldr	r3, [pc, #120]	@ (8004240 <HAL_RCC_GetSysClockFreq+0x94>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f003 030c 	and.w	r3, r3, #12
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	d002      	beq.n	80041dc <HAL_RCC_GetSysClockFreq+0x30>
 80041d6:	2b08      	cmp	r3, #8
 80041d8:	d003      	beq.n	80041e2 <HAL_RCC_GetSysClockFreq+0x36>
 80041da:	e027      	b.n	800422c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041dc:	4b19      	ldr	r3, [pc, #100]	@ (8004244 <HAL_RCC_GetSysClockFreq+0x98>)
 80041de:	613b      	str	r3, [r7, #16]
      break;
 80041e0:	e027      	b.n	8004232 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	0c9b      	lsrs	r3, r3, #18
 80041e6:	f003 030f 	and.w	r3, r3, #15
 80041ea:	4a17      	ldr	r2, [pc, #92]	@ (8004248 <HAL_RCC_GetSysClockFreq+0x9c>)
 80041ec:	5cd3      	ldrb	r3, [r2, r3]
 80041ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d010      	beq.n	800421c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80041fa:	4b11      	ldr	r3, [pc, #68]	@ (8004240 <HAL_RCC_GetSysClockFreq+0x94>)
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	0c5b      	lsrs	r3, r3, #17
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	4a11      	ldr	r2, [pc, #68]	@ (800424c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004206:	5cd3      	ldrb	r3, [r2, r3]
 8004208:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a0d      	ldr	r2, [pc, #52]	@ (8004244 <HAL_RCC_GetSysClockFreq+0x98>)
 800420e:	fb03 f202 	mul.w	r2, r3, r2
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	fbb2 f3f3 	udiv	r3, r2, r3
 8004218:	617b      	str	r3, [r7, #20]
 800421a:	e004      	b.n	8004226 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a0c      	ldr	r2, [pc, #48]	@ (8004250 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004220:	fb02 f303 	mul.w	r3, r2, r3
 8004224:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	613b      	str	r3, [r7, #16]
      break;
 800422a:	e002      	b.n	8004232 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800422c:	4b05      	ldr	r3, [pc, #20]	@ (8004244 <HAL_RCC_GetSysClockFreq+0x98>)
 800422e:	613b      	str	r3, [r7, #16]
      break;
 8004230:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004232:	693b      	ldr	r3, [r7, #16]
}
 8004234:	4618      	mov	r0, r3
 8004236:	371c      	adds	r7, #28
 8004238:	46bd      	mov	sp, r7
 800423a:	bc80      	pop	{r7}
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	40021000 	.word	0x40021000
 8004244:	007a1200 	.word	0x007a1200
 8004248:	08009388 	.word	0x08009388
 800424c:	08009398 	.word	0x08009398
 8004250:	003d0900 	.word	0x003d0900

08004254 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004258:	4b02      	ldr	r3, [pc, #8]	@ (8004264 <HAL_RCC_GetHCLKFreq+0x10>)
 800425a:	681b      	ldr	r3, [r3, #0]
}
 800425c:	4618      	mov	r0, r3
 800425e:	46bd      	mov	sp, r7
 8004260:	bc80      	pop	{r7}
 8004262:	4770      	bx	lr
 8004264:	200000a0 	.word	0x200000a0

08004268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800426c:	f7ff fff2 	bl	8004254 <HAL_RCC_GetHCLKFreq>
 8004270:	4602      	mov	r2, r0
 8004272:	4b05      	ldr	r3, [pc, #20]	@ (8004288 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	0a1b      	lsrs	r3, r3, #8
 8004278:	f003 0307 	and.w	r3, r3, #7
 800427c:	4903      	ldr	r1, [pc, #12]	@ (800428c <HAL_RCC_GetPCLK1Freq+0x24>)
 800427e:	5ccb      	ldrb	r3, [r1, r3]
 8004280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004284:	4618      	mov	r0, r3
 8004286:	bd80      	pop	{r7, pc}
 8004288:	40021000 	.word	0x40021000
 800428c:	0800933c 	.word	0x0800933c

08004290 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004294:	f7ff ffde 	bl	8004254 <HAL_RCC_GetHCLKFreq>
 8004298:	4602      	mov	r2, r0
 800429a:	4b05      	ldr	r3, [pc, #20]	@ (80042b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	0adb      	lsrs	r3, r3, #11
 80042a0:	f003 0307 	and.w	r3, r3, #7
 80042a4:	4903      	ldr	r1, [pc, #12]	@ (80042b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042a6:	5ccb      	ldrb	r3, [r1, r3]
 80042a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	40021000 	.word	0x40021000
 80042b4:	0800933c 	.word	0x0800933c

080042b8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	220f      	movs	r2, #15
 80042c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80042c8:	4b11      	ldr	r3, [pc, #68]	@ (8004310 <HAL_RCC_GetClockConfig+0x58>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f003 0203 	and.w	r2, r3, #3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80042d4:	4b0e      	ldr	r3, [pc, #56]	@ (8004310 <HAL_RCC_GetClockConfig+0x58>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80042e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004310 <HAL_RCC_GetClockConfig+0x58>)
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80042ec:	4b08      	ldr	r3, [pc, #32]	@ (8004310 <HAL_RCC_GetClockConfig+0x58>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	08db      	lsrs	r3, r3, #3
 80042f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80042fa:	4b06      	ldr	r3, [pc, #24]	@ (8004314 <HAL_RCC_GetClockConfig+0x5c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0207 	and.w	r2, r3, #7
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004306:	bf00      	nop
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	bc80      	pop	{r7}
 800430e:	4770      	bx	lr
 8004310:	40021000 	.word	0x40021000
 8004314:	40022000 	.word	0x40022000

08004318 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004320:	4b0a      	ldr	r3, [pc, #40]	@ (800434c <RCC_Delay+0x34>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a0a      	ldr	r2, [pc, #40]	@ (8004350 <RCC_Delay+0x38>)
 8004326:	fba2 2303 	umull	r2, r3, r2, r3
 800432a:	0a5b      	lsrs	r3, r3, #9
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	fb02 f303 	mul.w	r3, r2, r3
 8004332:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004334:	bf00      	nop
  }
  while (Delay --);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	1e5a      	subs	r2, r3, #1
 800433a:	60fa      	str	r2, [r7, #12]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1f9      	bne.n	8004334 <RCC_Delay+0x1c>
}
 8004340:	bf00      	nop
 8004342:	bf00      	nop
 8004344:	3714      	adds	r7, #20
 8004346:	46bd      	mov	sp, r7
 8004348:	bc80      	pop	{r7}
 800434a:	4770      	bx	lr
 800434c:	200000a0 	.word	0x200000a0
 8004350:	10624dd3 	.word	0x10624dd3

08004354 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e041      	b.n	80043ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d106      	bne.n	8004380 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f839 	bl	80043f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2202      	movs	r2, #2
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	3304      	adds	r3, #4
 8004390:	4619      	mov	r1, r3
 8004392:	4610      	mov	r0, r2
 8004394:	f000 f99c 	bl	80046d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80043f2:	b480      	push	{r7}
 80043f4:	b083      	sub	sp, #12
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80043fa:	bf00      	nop
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	bc80      	pop	{r7}
 8004402:	4770      	bx	lr

08004404 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b01      	cmp	r3, #1
 8004416:	d001      	beq.n	800441c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e03a      	b.n	8004492 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2202      	movs	r2, #2
 8004420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68da      	ldr	r2, [r3, #12]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f042 0201 	orr.w	r2, r2, #1
 8004432:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a18      	ldr	r2, [pc, #96]	@ (800449c <HAL_TIM_Base_Start_IT+0x98>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d00e      	beq.n	800445c <HAL_TIM_Base_Start_IT+0x58>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004446:	d009      	beq.n	800445c <HAL_TIM_Base_Start_IT+0x58>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a14      	ldr	r2, [pc, #80]	@ (80044a0 <HAL_TIM_Base_Start_IT+0x9c>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d004      	beq.n	800445c <HAL_TIM_Base_Start_IT+0x58>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a13      	ldr	r2, [pc, #76]	@ (80044a4 <HAL_TIM_Base_Start_IT+0xa0>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d111      	bne.n	8004480 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f003 0307 	and.w	r3, r3, #7
 8004466:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2b06      	cmp	r3, #6
 800446c:	d010      	beq.n	8004490 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f042 0201 	orr.w	r2, r2, #1
 800447c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800447e:	e007      	b.n	8004490 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f042 0201 	orr.w	r2, r2, #1
 800448e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3714      	adds	r7, #20
 8004496:	46bd      	mov	sp, r7
 8004498:	bc80      	pop	{r7}
 800449a:	4770      	bx	lr
 800449c:	40012c00 	.word	0x40012c00
 80044a0:	40000400 	.word	0x40000400
 80044a4:	40000800 	.word	0x40000800

080044a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d020      	beq.n	800450c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d01b      	beq.n	800450c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f06f 0202 	mvn.w	r2, #2
 80044dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2201      	movs	r2, #1
 80044e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	f003 0303 	and.w	r3, r3, #3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f8d1 	bl	800469a <HAL_TIM_IC_CaptureCallback>
 80044f8:	e005      	b.n	8004506 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f8c4 	bl	8004688 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f8d3 	bl	80046ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	f003 0304 	and.w	r3, r3, #4
 8004512:	2b00      	cmp	r3, #0
 8004514:	d020      	beq.n	8004558 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f003 0304 	and.w	r3, r3, #4
 800451c:	2b00      	cmp	r3, #0
 800451e:	d01b      	beq.n	8004558 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f06f 0204 	mvn.w	r2, #4
 8004528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2202      	movs	r2, #2
 800452e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f8ab 	bl	800469a <HAL_TIM_IC_CaptureCallback>
 8004544:	e005      	b.n	8004552 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f89e 	bl	8004688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f8ad 	bl	80046ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	f003 0308 	and.w	r3, r3, #8
 800455e:	2b00      	cmp	r3, #0
 8004560:	d020      	beq.n	80045a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f003 0308 	and.w	r3, r3, #8
 8004568:	2b00      	cmp	r3, #0
 800456a:	d01b      	beq.n	80045a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f06f 0208 	mvn.w	r2, #8
 8004574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2204      	movs	r2, #4
 800457a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	f003 0303 	and.w	r3, r3, #3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d003      	beq.n	8004592 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f885 	bl	800469a <HAL_TIM_IC_CaptureCallback>
 8004590:	e005      	b.n	800459e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f878 	bl	8004688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f887 	bl	80046ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f003 0310 	and.w	r3, r3, #16
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d020      	beq.n	80045f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f003 0310 	and.w	r3, r3, #16
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d01b      	beq.n	80045f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f06f 0210 	mvn.w	r2, #16
 80045c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2208      	movs	r2, #8
 80045c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	69db      	ldr	r3, [r3, #28]
 80045ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f85f 	bl	800469a <HAL_TIM_IC_CaptureCallback>
 80045dc:	e005      	b.n	80045ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 f852 	bl	8004688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 f861 	bl	80046ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00c      	beq.n	8004614 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b00      	cmp	r3, #0
 8004602:	d007      	beq.n	8004614 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f06f 0201 	mvn.w	r2, #1
 800460c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7fc fe28 	bl	8001264 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00c      	beq.n	8004638 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004624:	2b00      	cmp	r3, #0
 8004626:	d007      	beq.n	8004638 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f8c3 	bl	80047be <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00c      	beq.n	800465c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004648:	2b00      	cmp	r3, #0
 800464a:	d007      	beq.n	800465c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f831 	bl	80046be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	f003 0320 	and.w	r3, r3, #32
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00c      	beq.n	8004680 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f003 0320 	and.w	r3, r3, #32
 800466c:	2b00      	cmp	r3, #0
 800466e:	d007      	beq.n	8004680 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f06f 0220 	mvn.w	r2, #32
 8004678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f896 	bl	80047ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004680:	bf00      	nop
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	bc80      	pop	{r7}
 8004698:	4770      	bx	lr

0800469a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800469a:	b480      	push	{r7}
 800469c:	b083      	sub	sp, #12
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046a2:	bf00      	nop
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bc80      	pop	{r7}
 80046aa:	4770      	bx	lr

080046ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bc80      	pop	{r7}
 80046bc:	4770      	bx	lr

080046be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046be:	b480      	push	{r7}
 80046c0:	b083      	sub	sp, #12
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046c6:	bf00      	nop
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bc80      	pop	{r7}
 80046ce:	4770      	bx	lr

080046d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a2f      	ldr	r2, [pc, #188]	@ (80047a0 <TIM_Base_SetConfig+0xd0>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d00b      	beq.n	8004700 <TIM_Base_SetConfig+0x30>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046ee:	d007      	beq.n	8004700 <TIM_Base_SetConfig+0x30>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a2c      	ldr	r2, [pc, #176]	@ (80047a4 <TIM_Base_SetConfig+0xd4>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d003      	beq.n	8004700 <TIM_Base_SetConfig+0x30>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a2b      	ldr	r2, [pc, #172]	@ (80047a8 <TIM_Base_SetConfig+0xd8>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d108      	bne.n	8004712 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004706:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	4313      	orrs	r3, r2
 8004710:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a22      	ldr	r2, [pc, #136]	@ (80047a0 <TIM_Base_SetConfig+0xd0>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d00b      	beq.n	8004732 <TIM_Base_SetConfig+0x62>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004720:	d007      	beq.n	8004732 <TIM_Base_SetConfig+0x62>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a1f      	ldr	r2, [pc, #124]	@ (80047a4 <TIM_Base_SetConfig+0xd4>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d003      	beq.n	8004732 <TIM_Base_SetConfig+0x62>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a1e      	ldr	r2, [pc, #120]	@ (80047a8 <TIM_Base_SetConfig+0xd8>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d108      	bne.n	8004744 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004738:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	4313      	orrs	r3, r2
 8004742:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	4313      	orrs	r3, r2
 8004750:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	689a      	ldr	r2, [r3, #8]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a0d      	ldr	r2, [pc, #52]	@ (80047a0 <TIM_Base_SetConfig+0xd0>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d103      	bne.n	8004778 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	691a      	ldr	r2, [r3, #16]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b00      	cmp	r3, #0
 8004788:	d005      	beq.n	8004796 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	f023 0201 	bic.w	r2, r3, #1
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	611a      	str	r2, [r3, #16]
  }
}
 8004796:	bf00      	nop
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	bc80      	pop	{r7}
 800479e:	4770      	bx	lr
 80047a0:	40012c00 	.word	0x40012c00
 80047a4:	40000400 	.word	0x40000400
 80047a8:	40000800 	.word	0x40000800

080047ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bc80      	pop	{r7}
 80047bc:	4770      	bx	lr

080047be <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047be:	b480      	push	{r7}
 80047c0:	b083      	sub	sp, #12
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047c6:	bf00      	nop
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bc80      	pop	{r7}
 80047ce:	4770      	bx	lr

080047d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e042      	b.n	8004868 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d106      	bne.n	80047fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f7fc fd84 	bl	8001304 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2224      	movs	r2, #36	@ 0x24
 8004800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68da      	ldr	r2, [r3, #12]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004812:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 fdb7 	bl	8005388 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	691a      	ldr	r2, [r3, #16]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004828:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	695a      	ldr	r2, [r3, #20]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004838:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68da      	ldr	r2, [r3, #12]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004848:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2220      	movs	r2, #32
 8004854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2220      	movs	r2, #32
 800485c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3708      	adds	r7, #8
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b08a      	sub	sp, #40	@ 0x28
 8004874:	af02      	add	r7, sp, #8
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	603b      	str	r3, [r7, #0]
 800487c:	4613      	mov	r3, r2
 800487e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004880:	2300      	movs	r3, #0
 8004882:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2b20      	cmp	r3, #32
 800488e:	d175      	bne.n	800497c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d002      	beq.n	800489c <HAL_UART_Transmit+0x2c>
 8004896:	88fb      	ldrh	r3, [r7, #6]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e06e      	b.n	800497e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2221      	movs	r2, #33	@ 0x21
 80048aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048ae:	f7fe fc47 	bl	8003140 <HAL_GetTick>
 80048b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	88fa      	ldrh	r2, [r7, #6]
 80048b8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	88fa      	ldrh	r2, [r7, #6]
 80048be:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048c8:	d108      	bne.n	80048dc <HAL_UART_Transmit+0x6c>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d104      	bne.n	80048dc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80048d2:	2300      	movs	r3, #0
 80048d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	61bb      	str	r3, [r7, #24]
 80048da:	e003      	b.n	80048e4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048e0:	2300      	movs	r3, #0
 80048e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048e4:	e02e      	b.n	8004944 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	9300      	str	r3, [sp, #0]
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	2200      	movs	r2, #0
 80048ee:	2180      	movs	r1, #128	@ 0x80
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f000 fb1c 	bl	8004f2e <UART_WaitOnFlagUntilTimeout>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d005      	beq.n	8004908 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2220      	movs	r2, #32
 8004900:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e03a      	b.n	800497e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10b      	bne.n	8004926 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	881b      	ldrh	r3, [r3, #0]
 8004912:	461a      	mov	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800491c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	3302      	adds	r3, #2
 8004922:	61bb      	str	r3, [r7, #24]
 8004924:	e007      	b.n	8004936 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	781a      	ldrb	r2, [r3, #0]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	3301      	adds	r3, #1
 8004934:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800493a:	b29b      	uxth	r3, r3
 800493c:	3b01      	subs	r3, #1
 800493e:	b29a      	uxth	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004948:	b29b      	uxth	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1cb      	bne.n	80048e6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	2200      	movs	r2, #0
 8004956:	2140      	movs	r1, #64	@ 0x40
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f000 fae8 	bl	8004f2e <UART_WaitOnFlagUntilTimeout>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d005      	beq.n	8004970 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2220      	movs	r2, #32
 8004968:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e006      	b.n	800497e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2220      	movs	r2, #32
 8004974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004978:	2300      	movs	r3, #0
 800497a:	e000      	b.n	800497e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800497c:	2302      	movs	r3, #2
  }
}
 800497e:	4618      	mov	r0, r3
 8004980:	3720      	adds	r7, #32
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004986:	b580      	push	{r7, lr}
 8004988:	b084      	sub	sp, #16
 800498a:	af00      	add	r7, sp, #0
 800498c:	60f8      	str	r0, [r7, #12]
 800498e:	60b9      	str	r1, [r7, #8]
 8004990:	4613      	mov	r3, r2
 8004992:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b20      	cmp	r3, #32
 800499e:	d112      	bne.n	80049c6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <HAL_UART_Receive_IT+0x26>
 80049a6:	88fb      	ldrh	r3, [r7, #6]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d101      	bne.n	80049b0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e00b      	b.n	80049c8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80049b6:	88fb      	ldrh	r3, [r7, #6]
 80049b8:	461a      	mov	r2, r3
 80049ba:	68b9      	ldr	r1, [r7, #8]
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 fb0f 	bl	8004fe0 <UART_Start_Receive_IT>
 80049c2:	4603      	mov	r3, r0
 80049c4:	e000      	b.n	80049c8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80049c6:	2302      	movs	r3, #2
  }
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b0ba      	sub	sp, #232	@ 0xe8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80049f6:	2300      	movs	r3, #0
 80049f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80049fc:	2300      	movs	r3, #0
 80049fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a06:	f003 030f 	and.w	r3, r3, #15
 8004a0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004a0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10f      	bne.n	8004a36 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a1a:	f003 0320 	and.w	r3, r3, #32
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d009      	beq.n	8004a36 <HAL_UART_IRQHandler+0x66>
 8004a22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a26:	f003 0320 	and.w	r3, r3, #32
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 fbec 	bl	800520c <UART_Receive_IT>
      return;
 8004a34:	e25b      	b.n	8004eee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f000 80de 	beq.w	8004bfc <HAL_UART_IRQHandler+0x22c>
 8004a40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d106      	bne.n	8004a5a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a50:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 80d1 	beq.w	8004bfc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00b      	beq.n	8004a7e <HAL_UART_IRQHandler+0xae>
 8004a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d005      	beq.n	8004a7e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a76:	f043 0201 	orr.w	r2, r3, #1
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a82:	f003 0304 	and.w	r3, r3, #4
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00b      	beq.n	8004aa2 <HAL_UART_IRQHandler+0xd2>
 8004a8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d005      	beq.n	8004aa2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a9a:	f043 0202 	orr.w	r2, r3, #2
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00b      	beq.n	8004ac6 <HAL_UART_IRQHandler+0xf6>
 8004aae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d005      	beq.n	8004ac6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004abe:	f043 0204 	orr.w	r2, r3, #4
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aca:	f003 0308 	and.w	r3, r3, #8
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d011      	beq.n	8004af6 <HAL_UART_IRQHandler+0x126>
 8004ad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ad6:	f003 0320 	and.w	r3, r3, #32
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d105      	bne.n	8004aea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004ade:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d005      	beq.n	8004af6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aee:	f043 0208 	orr.w	r2, r3, #8
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f000 81f2 	beq.w	8004ee4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b04:	f003 0320 	and.w	r3, r3, #32
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d008      	beq.n	8004b1e <HAL_UART_IRQHandler+0x14e>
 8004b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b10:	f003 0320 	and.w	r3, r3, #32
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d002      	beq.n	8004b1e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 fb77 	bl	800520c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	bf14      	ite	ne
 8004b2c:	2301      	movne	r3, #1
 8004b2e:	2300      	moveq	r3, #0
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b3a:	f003 0308 	and.w	r3, r3, #8
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d103      	bne.n	8004b4a <HAL_UART_IRQHandler+0x17a>
 8004b42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d04f      	beq.n	8004bea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 fa81 	bl	8005052 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d041      	beq.n	8004be2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	3314      	adds	r3, #20
 8004b64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004b6c:	e853 3f00 	ldrex	r3, [r3]
 8004b70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004b74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004b78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	3314      	adds	r3, #20
 8004b86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004b8a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004b8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004b96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004b9a:	e841 2300 	strex	r3, r2, [r1]
 8004b9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004ba2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1d9      	bne.n	8004b5e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d013      	beq.n	8004bda <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bb6:	4a7e      	ldr	r2, [pc, #504]	@ (8004db0 <HAL_UART_IRQHandler+0x3e0>)
 8004bb8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7fe fbe2 	bl	8003388 <HAL_DMA_Abort_IT>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d016      	beq.n	8004bf8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004bd4:	4610      	mov	r0, r2
 8004bd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bd8:	e00e      	b.n	8004bf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 f993 	bl	8004f06 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004be0:	e00a      	b.n	8004bf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f98f 	bl	8004f06 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004be8:	e006      	b.n	8004bf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 f98b 	bl	8004f06 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004bf6:	e175      	b.n	8004ee4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bf8:	bf00      	nop
    return;
 8004bfa:	e173      	b.n	8004ee4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	f040 814f 	bne.w	8004ea4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c0a:	f003 0310 	and.w	r3, r3, #16
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f000 8148 	beq.w	8004ea4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c18:	f003 0310 	and.w	r3, r3, #16
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 8141 	beq.w	8004ea4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c22:	2300      	movs	r3, #0
 8004c24:	60bb      	str	r3, [r7, #8]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	60bb      	str	r3, [r7, #8]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	60bb      	str	r3, [r7, #8]
 8004c36:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f000 80b6 	beq.w	8004db4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 8145 	beq.w	8004ee8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c66:	429a      	cmp	r2, r3
 8004c68:	f080 813e 	bcs.w	8004ee8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c72:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	2b20      	cmp	r3, #32
 8004c7c:	f000 8088 	beq.w	8004d90 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	330c      	adds	r3, #12
 8004c86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004c8e:	e853 3f00 	ldrex	r3, [r3]
 8004c92:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004c96:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004c9a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c9e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	330c      	adds	r3, #12
 8004ca8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004cac:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004cb0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004cb8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004cbc:	e841 2300 	strex	r3, r2, [r1]
 8004cc0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004cc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1d9      	bne.n	8004c80 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	3314      	adds	r3, #20
 8004cd2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cd6:	e853 3f00 	ldrex	r3, [r3]
 8004cda:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004cdc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004cde:	f023 0301 	bic.w	r3, r3, #1
 8004ce2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	3314      	adds	r3, #20
 8004cec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004cf0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004cf4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004cf8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004cfc:	e841 2300 	strex	r3, r2, [r1]
 8004d00:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004d02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1e1      	bne.n	8004ccc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	3314      	adds	r3, #20
 8004d0e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d12:	e853 3f00 	ldrex	r3, [r3]
 8004d16:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004d18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	3314      	adds	r3, #20
 8004d28:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004d2c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004d2e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d30:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004d32:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004d34:	e841 2300 	strex	r3, r2, [r1]
 8004d38:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004d3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1e3      	bne.n	8004d08 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2220      	movs	r2, #32
 8004d44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	330c      	adds	r3, #12
 8004d54:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d58:	e853 3f00 	ldrex	r3, [r3]
 8004d5c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004d5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d60:	f023 0310 	bic.w	r3, r3, #16
 8004d64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	330c      	adds	r3, #12
 8004d6e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004d72:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004d74:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d76:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d78:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d7a:	e841 2300 	strex	r3, r2, [r1]
 8004d7e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004d80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1e3      	bne.n	8004d4e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7fe fac1 	bl	8003312 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2202      	movs	r2, #2
 8004d94:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	4619      	mov	r1, r3
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f8b6 	bl	8004f18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004dac:	e09c      	b.n	8004ee8 <HAL_UART_IRQHandler+0x518>
 8004dae:	bf00      	nop
 8004db0:	08005117 	.word	0x08005117
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f000 808e 	beq.w	8004eec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004dd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f000 8089 	beq.w	8004eec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	330c      	adds	r3, #12
 8004de0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004de4:	e853 3f00 	ldrex	r3, [r3]
 8004de8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004df0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	330c      	adds	r3, #12
 8004dfa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004dfe:	647a      	str	r2, [r7, #68]	@ 0x44
 8004e00:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e02:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e06:	e841 2300 	strex	r3, r2, [r1]
 8004e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1e3      	bne.n	8004dda <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	3314      	adds	r3, #20
 8004e18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1c:	e853 3f00 	ldrex	r3, [r3]
 8004e20:	623b      	str	r3, [r7, #32]
   return(result);
 8004e22:	6a3b      	ldr	r3, [r7, #32]
 8004e24:	f023 0301 	bic.w	r3, r3, #1
 8004e28:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	3314      	adds	r3, #20
 8004e32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004e36:	633a      	str	r2, [r7, #48]	@ 0x30
 8004e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e3e:	e841 2300 	strex	r3, r2, [r1]
 8004e42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1e3      	bne.n	8004e12 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2220      	movs	r2, #32
 8004e4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	330c      	adds	r3, #12
 8004e5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	e853 3f00 	ldrex	r3, [r3]
 8004e66:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f023 0310 	bic.w	r3, r3, #16
 8004e6e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	330c      	adds	r3, #12
 8004e78:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004e7c:	61fa      	str	r2, [r7, #28]
 8004e7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e80:	69b9      	ldr	r1, [r7, #24]
 8004e82:	69fa      	ldr	r2, [r7, #28]
 8004e84:	e841 2300 	strex	r3, r2, [r1]
 8004e88:	617b      	str	r3, [r7, #20]
   return(result);
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1e3      	bne.n	8004e58 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2202      	movs	r2, #2
 8004e94:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e96:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 f83b 	bl	8004f18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ea2:	e023      	b.n	8004eec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ea8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d009      	beq.n	8004ec4 <HAL_UART_IRQHandler+0x4f4>
 8004eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004eb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d003      	beq.n	8004ec4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 f93e 	bl	800513e <UART_Transmit_IT>
    return;
 8004ec2:	e014      	b.n	8004eee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00e      	beq.n	8004eee <HAL_UART_IRQHandler+0x51e>
 8004ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d008      	beq.n	8004eee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 f97d 	bl	80051dc <UART_EndTransmit_IT>
    return;
 8004ee2:	e004      	b.n	8004eee <HAL_UART_IRQHandler+0x51e>
    return;
 8004ee4:	bf00      	nop
 8004ee6:	e002      	b.n	8004eee <HAL_UART_IRQHandler+0x51e>
      return;
 8004ee8:	bf00      	nop
 8004eea:	e000      	b.n	8004eee <HAL_UART_IRQHandler+0x51e>
      return;
 8004eec:	bf00      	nop
  }
}
 8004eee:	37e8      	adds	r7, #232	@ 0xe8
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bc80      	pop	{r7}
 8004f04:	4770      	bx	lr

08004f06 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f06:	b480      	push	{r7}
 8004f08:	b083      	sub	sp, #12
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f0e:	bf00      	nop
 8004f10:	370c      	adds	r7, #12
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bc80      	pop	{r7}
 8004f16:	4770      	bx	lr

08004f18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	460b      	mov	r3, r1
 8004f22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bc80      	pop	{r7}
 8004f2c:	4770      	bx	lr

08004f2e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b086      	sub	sp, #24
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	60f8      	str	r0, [r7, #12]
 8004f36:	60b9      	str	r1, [r7, #8]
 8004f38:	603b      	str	r3, [r7, #0]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f3e:	e03b      	b.n	8004fb8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f40:	6a3b      	ldr	r3, [r7, #32]
 8004f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f46:	d037      	beq.n	8004fb8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f48:	f7fe f8fa 	bl	8003140 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	6a3a      	ldr	r2, [r7, #32]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d302      	bcc.n	8004f5e <UART_WaitOnFlagUntilTimeout+0x30>
 8004f58:	6a3b      	ldr	r3, [r7, #32]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e03a      	b.n	8004fd8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	f003 0304 	and.w	r3, r3, #4
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d023      	beq.n	8004fb8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	2b80      	cmp	r3, #128	@ 0x80
 8004f74:	d020      	beq.n	8004fb8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	2b40      	cmp	r3, #64	@ 0x40
 8004f7a:	d01d      	beq.n	8004fb8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0308 	and.w	r3, r3, #8
 8004f86:	2b08      	cmp	r3, #8
 8004f88:	d116      	bne.n	8004fb8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	617b      	str	r3, [r7, #20]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	617b      	str	r3, [r7, #20]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	617b      	str	r3, [r7, #20]
 8004f9e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f000 f856 	bl	8005052 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2208      	movs	r2, #8
 8004faa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e00f      	b.n	8004fd8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	68ba      	ldr	r2, [r7, #8]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	bf0c      	ite	eq
 8004fc8:	2301      	moveq	r3, #1
 8004fca:	2300      	movne	r3, #0
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	461a      	mov	r2, r3
 8004fd0:	79fb      	ldrb	r3, [r7, #7]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d0b4      	beq.n	8004f40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3718      	adds	r7, #24
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	4613      	mov	r3, r2
 8004fec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	68ba      	ldr	r2, [r7, #8]
 8004ff2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	88fa      	ldrh	r2, [r7, #6]
 8004ff8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	88fa      	ldrh	r2, [r7, #6]
 8004ffe:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2222      	movs	r2, #34	@ 0x22
 800500a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d007      	beq.n	8005026 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68da      	ldr	r2, [r3, #12]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005024:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	695a      	ldr	r2, [r3, #20]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f042 0201 	orr.w	r2, r2, #1
 8005034:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68da      	ldr	r2, [r3, #12]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f042 0220 	orr.w	r2, r2, #32
 8005044:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3714      	adds	r7, #20
 800504c:	46bd      	mov	sp, r7
 800504e:	bc80      	pop	{r7}
 8005050:	4770      	bx	lr

08005052 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005052:	b480      	push	{r7}
 8005054:	b095      	sub	sp, #84	@ 0x54
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	330c      	adds	r3, #12
 8005060:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005064:	e853 3f00 	ldrex	r3, [r3]
 8005068:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800506a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800506c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005070:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	330c      	adds	r3, #12
 8005078:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800507a:	643a      	str	r2, [r7, #64]	@ 0x40
 800507c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005080:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005082:	e841 2300 	strex	r3, r2, [r1]
 8005086:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1e5      	bne.n	800505a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	3314      	adds	r3, #20
 8005094:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005096:	6a3b      	ldr	r3, [r7, #32]
 8005098:	e853 3f00 	ldrex	r3, [r3]
 800509c:	61fb      	str	r3, [r7, #28]
   return(result);
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	f023 0301 	bic.w	r3, r3, #1
 80050a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	3314      	adds	r3, #20
 80050ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050b6:	e841 2300 	strex	r3, r2, [r1]
 80050ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80050bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1e5      	bne.n	800508e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d119      	bne.n	80050fe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	330c      	adds	r3, #12
 80050d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	e853 3f00 	ldrex	r3, [r3]
 80050d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	f023 0310 	bic.w	r3, r3, #16
 80050e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	330c      	adds	r3, #12
 80050e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050ea:	61ba      	str	r2, [r7, #24]
 80050ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ee:	6979      	ldr	r1, [r7, #20]
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	e841 2300 	strex	r3, r2, [r1]
 80050f6:	613b      	str	r3, [r7, #16]
   return(result);
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1e5      	bne.n	80050ca <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2220      	movs	r2, #32
 8005102:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800510c:	bf00      	nop
 800510e:	3754      	adds	r7, #84	@ 0x54
 8005110:	46bd      	mov	sp, r7
 8005112:	bc80      	pop	{r7}
 8005114:	4770      	bx	lr

08005116 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b084      	sub	sp, #16
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005122:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f7ff fee8 	bl	8004f06 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005136:	bf00      	nop
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800513e:	b480      	push	{r7}
 8005140:	b085      	sub	sp, #20
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b21      	cmp	r3, #33	@ 0x21
 8005150:	d13e      	bne.n	80051d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800515a:	d114      	bne.n	8005186 <UART_Transmit_IT+0x48>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d110      	bne.n	8005186 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	881b      	ldrh	r3, [r3, #0]
 800516e:	461a      	mov	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005178:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	1c9a      	adds	r2, r3, #2
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	621a      	str	r2, [r3, #32]
 8005184:	e008      	b.n	8005198 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	1c59      	adds	r1, r3, #1
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	6211      	str	r1, [r2, #32]
 8005190:	781a      	ldrb	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800519c:	b29b      	uxth	r3, r3
 800519e:	3b01      	subs	r3, #1
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	4619      	mov	r1, r3
 80051a6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d10f      	bne.n	80051cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68da      	ldr	r2, [r3, #12]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80051ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68da      	ldr	r2, [r3, #12]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80051cc:	2300      	movs	r3, #0
 80051ce:	e000      	b.n	80051d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80051d0:	2302      	movs	r3, #2
  }
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3714      	adds	r7, #20
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bc80      	pop	{r7}
 80051da:	4770      	bx	lr

080051dc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68da      	ldr	r2, [r3, #12]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051f2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2220      	movs	r2, #32
 80051f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f7ff fe79 	bl	8004ef4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3708      	adds	r7, #8
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b08c      	sub	sp, #48	@ 0x30
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b22      	cmp	r3, #34	@ 0x22
 800521e:	f040 80ae 	bne.w	800537e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800522a:	d117      	bne.n	800525c <UART_Receive_IT+0x50>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d113      	bne.n	800525c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005234:	2300      	movs	r3, #0
 8005236:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800523c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	b29b      	uxth	r3, r3
 8005246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800524a:	b29a      	uxth	r2, r3
 800524c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800524e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005254:	1c9a      	adds	r2, r3, #2
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	629a      	str	r2, [r3, #40]	@ 0x28
 800525a:	e026      	b.n	80052aa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005260:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005262:	2300      	movs	r3, #0
 8005264:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800526e:	d007      	beq.n	8005280 <UART_Receive_IT+0x74>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10a      	bne.n	800528e <UART_Receive_IT+0x82>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d106      	bne.n	800528e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	b2da      	uxtb	r2, r3
 8005288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800528a:	701a      	strb	r2, [r3, #0]
 800528c:	e008      	b.n	80052a0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	b2db      	uxtb	r3, r3
 8005296:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800529a:	b2da      	uxtb	r2, r3
 800529c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800529e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a4:	1c5a      	adds	r2, r3, #1
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	3b01      	subs	r3, #1
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	4619      	mov	r1, r3
 80052b8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d15d      	bne.n	800537a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68da      	ldr	r2, [r3, #12]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f022 0220 	bic.w	r2, r2, #32
 80052cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68da      	ldr	r2, [r3, #12]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80052dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	695a      	ldr	r2, [r3, #20]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 0201 	bic.w	r2, r2, #1
 80052ec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2220      	movs	r2, #32
 80052f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005300:	2b01      	cmp	r3, #1
 8005302:	d135      	bne.n	8005370 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	330c      	adds	r3, #12
 8005310:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	e853 3f00 	ldrex	r3, [r3]
 8005318:	613b      	str	r3, [r7, #16]
   return(result);
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	f023 0310 	bic.w	r3, r3, #16
 8005320:	627b      	str	r3, [r7, #36]	@ 0x24
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	330c      	adds	r3, #12
 8005328:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800532a:	623a      	str	r2, [r7, #32]
 800532c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532e:	69f9      	ldr	r1, [r7, #28]
 8005330:	6a3a      	ldr	r2, [r7, #32]
 8005332:	e841 2300 	strex	r3, r2, [r1]
 8005336:	61bb      	str	r3, [r7, #24]
   return(result);
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1e5      	bne.n	800530a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0310 	and.w	r3, r3, #16
 8005348:	2b10      	cmp	r3, #16
 800534a:	d10a      	bne.n	8005362 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800534c:	2300      	movs	r3, #0
 800534e:	60fb      	str	r3, [r7, #12]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	60fb      	str	r3, [r7, #12]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	60fb      	str	r3, [r7, #12]
 8005360:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005366:	4619      	mov	r1, r3
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7ff fdd5 	bl	8004f18 <HAL_UARTEx_RxEventCallback>
 800536e:	e002      	b.n	8005376 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f7fb facf 	bl	8000914 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005376:	2300      	movs	r3, #0
 8005378:	e002      	b.n	8005380 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800537a:	2300      	movs	r3, #0
 800537c:	e000      	b.n	8005380 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800537e:	2302      	movs	r3, #2
  }
}
 8005380:	4618      	mov	r0, r3
 8005382:	3730      	adds	r7, #48	@ 0x30
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68da      	ldr	r2, [r3, #12]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	430a      	orrs	r2, r1
 80053a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	689a      	ldr	r2, [r3, #8]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	431a      	orrs	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	695b      	ldr	r3, [r3, #20]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80053c2:	f023 030c 	bic.w	r3, r3, #12
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	6812      	ldr	r2, [r2, #0]
 80053ca:	68b9      	ldr	r1, [r7, #8]
 80053cc:	430b      	orrs	r3, r1
 80053ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	699a      	ldr	r2, [r3, #24]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	430a      	orrs	r2, r1
 80053e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a2c      	ldr	r2, [pc, #176]	@ (800549c <UART_SetConfig+0x114>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d103      	bne.n	80053f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80053f0:	f7fe ff4e 	bl	8004290 <HAL_RCC_GetPCLK2Freq>
 80053f4:	60f8      	str	r0, [r7, #12]
 80053f6:	e002      	b.n	80053fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80053f8:	f7fe ff36 	bl	8004268 <HAL_RCC_GetPCLK1Freq>
 80053fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	4613      	mov	r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	4413      	add	r3, r2
 8005406:	009a      	lsls	r2, r3, #2
 8005408:	441a      	add	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	fbb2 f3f3 	udiv	r3, r2, r3
 8005414:	4a22      	ldr	r2, [pc, #136]	@ (80054a0 <UART_SetConfig+0x118>)
 8005416:	fba2 2303 	umull	r2, r3, r2, r3
 800541a:	095b      	lsrs	r3, r3, #5
 800541c:	0119      	lsls	r1, r3, #4
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	4613      	mov	r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	4413      	add	r3, r2
 8005426:	009a      	lsls	r2, r3, #2
 8005428:	441a      	add	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	fbb2 f2f3 	udiv	r2, r2, r3
 8005434:	4b1a      	ldr	r3, [pc, #104]	@ (80054a0 <UART_SetConfig+0x118>)
 8005436:	fba3 0302 	umull	r0, r3, r3, r2
 800543a:	095b      	lsrs	r3, r3, #5
 800543c:	2064      	movs	r0, #100	@ 0x64
 800543e:	fb00 f303 	mul.w	r3, r0, r3
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	011b      	lsls	r3, r3, #4
 8005446:	3332      	adds	r3, #50	@ 0x32
 8005448:	4a15      	ldr	r2, [pc, #84]	@ (80054a0 <UART_SetConfig+0x118>)
 800544a:	fba2 2303 	umull	r2, r3, r2, r3
 800544e:	095b      	lsrs	r3, r3, #5
 8005450:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005454:	4419      	add	r1, r3
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	4613      	mov	r3, r2
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	4413      	add	r3, r2
 800545e:	009a      	lsls	r2, r3, #2
 8005460:	441a      	add	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	fbb2 f2f3 	udiv	r2, r2, r3
 800546c:	4b0c      	ldr	r3, [pc, #48]	@ (80054a0 <UART_SetConfig+0x118>)
 800546e:	fba3 0302 	umull	r0, r3, r3, r2
 8005472:	095b      	lsrs	r3, r3, #5
 8005474:	2064      	movs	r0, #100	@ 0x64
 8005476:	fb00 f303 	mul.w	r3, r0, r3
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	011b      	lsls	r3, r3, #4
 800547e:	3332      	adds	r3, #50	@ 0x32
 8005480:	4a07      	ldr	r2, [pc, #28]	@ (80054a0 <UART_SetConfig+0x118>)
 8005482:	fba2 2303 	umull	r2, r3, r2, r3
 8005486:	095b      	lsrs	r3, r3, #5
 8005488:	f003 020f 	and.w	r2, r3, #15
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	440a      	add	r2, r1
 8005492:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005494:	bf00      	nop
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	40013800 	.word	0x40013800
 80054a0:	51eb851f 	.word	0x51eb851f

080054a4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	4603      	mov	r3, r0
 80054ac:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80054ae:	2300      	movs	r3, #0
 80054b0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80054b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054b6:	2b84      	cmp	r3, #132	@ 0x84
 80054b8:	d005      	beq.n	80054c6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80054ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	4413      	add	r3, r2
 80054c2:	3303      	adds	r3, #3
 80054c4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80054c6:	68fb      	ldr	r3, [r7, #12]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3714      	adds	r7, #20
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bc80      	pop	{r7}
 80054d0:	4770      	bx	lr

080054d2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80054d2:	b480      	push	{r7}
 80054d4:	b083      	sub	sp, #12
 80054d6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054d8:	f3ef 8305 	mrs	r3, IPSR
 80054dc:	607b      	str	r3, [r7, #4]
  return(result);
 80054de:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	bf14      	ite	ne
 80054e4:	2301      	movne	r3, #1
 80054e6:	2300      	moveq	r3, #0
 80054e8:	b2db      	uxtb	r3, r3
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bc80      	pop	{r7}
 80054f2:	4770      	bx	lr

080054f4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80054f8:	f001 f866 	bl	80065c8 <vTaskStartScheduler>
  
  return osOK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	bd80      	pop	{r7, pc}

08005502 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005502:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005504:	b089      	sub	sp, #36	@ 0x24
 8005506:	af04      	add	r7, sp, #16
 8005508:	6078      	str	r0, [r7, #4]
 800550a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	695b      	ldr	r3, [r3, #20]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d020      	beq.n	8005556 <osThreadCreate+0x54>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d01c      	beq.n	8005556 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685c      	ldr	r4, [r3, #4]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691e      	ldr	r6, [r3, #16]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800552e:	4618      	mov	r0, r3
 8005530:	f7ff ffb8 	bl	80054a4 <makeFreeRtosPriority>
 8005534:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800553e:	9202      	str	r2, [sp, #8]
 8005540:	9301      	str	r3, [sp, #4]
 8005542:	9100      	str	r1, [sp, #0]
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	4632      	mov	r2, r6
 8005548:	4629      	mov	r1, r5
 800554a:	4620      	mov	r0, r4
 800554c:	f000 fe56 	bl	80061fc <xTaskCreateStatic>
 8005550:	4603      	mov	r3, r0
 8005552:	60fb      	str	r3, [r7, #12]
 8005554:	e01c      	b.n	8005590 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685c      	ldr	r4, [r3, #4]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005562:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800556a:	4618      	mov	r0, r3
 800556c:	f7ff ff9a 	bl	80054a4 <makeFreeRtosPriority>
 8005570:	4602      	mov	r2, r0
 8005572:	f107 030c 	add.w	r3, r7, #12
 8005576:	9301      	str	r3, [sp, #4]
 8005578:	9200      	str	r2, [sp, #0]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	4632      	mov	r2, r6
 800557e:	4629      	mov	r1, r5
 8005580:	4620      	mov	r0, r4
 8005582:	f000 fe9b 	bl	80062bc <xTaskCreate>
 8005586:	4603      	mov	r3, r0
 8005588:	2b01      	cmp	r3, #1
 800558a:	d001      	beq.n	8005590 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800558c:	2300      	movs	r3, #0
 800558e:	e000      	b.n	8005592 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005590:	68fb      	ldr	r3, [r7, #12]
}
 8005592:	4618      	mov	r0, r3
 8005594:	3714      	adds	r7, #20
 8005596:	46bd      	mov	sp, r7
 8005598:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800559a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800559a:	b580      	push	{r7, lr}
 800559c:	b084      	sub	sp, #16
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d001      	beq.n	80055b0 <osDelay+0x16>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	e000      	b.n	80055b2 <osDelay+0x18>
 80055b0:	2301      	movs	r3, #1
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 ffd2 	bl	800655c <vTaskDelay>
  
  return osOK;
 80055b8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
	...

080055c4 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b086      	sub	sp, #24
 80055c8:	af02      	add	r7, sp, #8
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	460b      	mov	r3, r1
 80055ce:	607a      	str	r2, [r7, #4]
 80055d0:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d013      	beq.n	8005602 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 80055da:	7afb      	ldrb	r3, [r7, #11]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d101      	bne.n	80055e4 <osTimerCreate+0x20>
 80055e0:	2101      	movs	r1, #1
 80055e2:	e000      	b.n	80055e6 <osTimerCreate+0x22>
 80055e4:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 80055ee:	9201      	str	r2, [sp, #4]
 80055f0:	9300      	str	r3, [sp, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	460a      	mov	r2, r1
 80055f6:	2101      	movs	r1, #1
 80055f8:	480b      	ldr	r0, [pc, #44]	@ (8005628 <osTimerCreate+0x64>)
 80055fa:	f001 fdba 	bl	8007172 <xTimerCreateStatic>
 80055fe:	4603      	mov	r3, r0
 8005600:	e00e      	b.n	8005620 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8005602:	7afb      	ldrb	r3, [r7, #11]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d101      	bne.n	800560c <osTimerCreate+0x48>
 8005608:	2201      	movs	r2, #1
 800560a:	e000      	b.n	800560e <osTimerCreate+0x4a>
 800560c:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8005612:	9300      	str	r3, [sp, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2101      	movs	r1, #1
 8005618:	4803      	ldr	r0, [pc, #12]	@ (8005628 <osTimerCreate+0x64>)
 800561a:	f001 fd89 	bl	8007130 <xTimerCreate>
 800561e:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8005620:	4618      	mov	r0, r3
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	08009310 	.word	0x08009310

0800562c <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b088      	sub	sp, #32
 8005630:	af02      	add	r7, sp, #8
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8005636:	2300      	movs	r3, #0
 8005638:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800563a:	2300      	movs	r3, #0
 800563c:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d101      	bne.n	800564c <osTimerStart+0x20>
    ticks = 1;
 8005648:	2301      	movs	r3, #1
 800564a:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 800564c:	f7ff ff41 	bl	80054d2 <inHandlerMode>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d01a      	beq.n	800568c <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8005656:	f107 030c 	add.w	r3, r7, #12
 800565a:	2200      	movs	r2, #0
 800565c:	9200      	str	r2, [sp, #0]
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	2109      	movs	r1, #9
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f001 fe02 	bl	800726c <xTimerGenericCommand>
 8005668:	4603      	mov	r3, r0
 800566a:	2b01      	cmp	r3, #1
 800566c:	d002      	beq.n	8005674 <osTimerStart+0x48>
    {
      result = osErrorOS;
 800566e:	23ff      	movs	r3, #255	@ 0xff
 8005670:	617b      	str	r3, [r7, #20]
 8005672:	e018      	b.n	80056a6 <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d015      	beq.n	80056a6 <osTimerStart+0x7a>
 800567a:	4b0d      	ldr	r3, [pc, #52]	@ (80056b0 <osTimerStart+0x84>)
 800567c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005680:	601a      	str	r2, [r3, #0]
 8005682:	f3bf 8f4f 	dsb	sy
 8005686:	f3bf 8f6f 	isb	sy
 800568a:	e00c      	b.n	80056a6 <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 800568c:	2300      	movs	r3, #0
 800568e:	9300      	str	r3, [sp, #0]
 8005690:	2300      	movs	r3, #0
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	2104      	movs	r1, #4
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f001 fde8 	bl	800726c <xTimerGenericCommand>
 800569c:	4603      	mov	r3, r0
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d001      	beq.n	80056a6 <osTimerStart+0x7a>
      result = osErrorOS;
 80056a2:	23ff      	movs	r3, #255	@ 0xff
 80056a4:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 80056a6:	697b      	ldr	r3, [r7, #20]
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3718      	adds	r7, #24
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	e000ed04 	.word	0xe000ed04

080056b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f103 0208 	add.w	r2, r3, #8
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f04f 32ff 	mov.w	r2, #4294967295
 80056cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f103 0208 	add.w	r2, r3, #8
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f103 0208 	add.w	r2, r3, #8
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bc80      	pop	{r7}
 80056f0:	4770      	bx	lr

080056f2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80056f2:	b480      	push	{r7}
 80056f4:	b083      	sub	sp, #12
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	bc80      	pop	{r7}
 8005708:	4770      	bx	lr

0800570a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800570a:	b480      	push	{r7}
 800570c:	b085      	sub	sp, #20
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
 8005712:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	689a      	ldr	r2, [r3, #8]
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	683a      	ldr	r2, [r7, #0]
 800572e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	683a      	ldr	r2, [r7, #0]
 8005734:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	1c5a      	adds	r2, r3, #1
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	601a      	str	r2, [r3, #0]
}
 8005746:	bf00      	nop
 8005748:	3714      	adds	r7, #20
 800574a:	46bd      	mov	sp, r7
 800574c:	bc80      	pop	{r7}
 800574e:	4770      	bx	lr

08005750 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005766:	d103      	bne.n	8005770 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	60fb      	str	r3, [r7, #12]
 800576e:	e00c      	b.n	800578a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	3308      	adds	r3, #8
 8005774:	60fb      	str	r3, [r7, #12]
 8005776:	e002      	b.n	800577e <vListInsert+0x2e>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	60fb      	str	r3, [r7, #12]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68ba      	ldr	r2, [r7, #8]
 8005786:	429a      	cmp	r2, r3
 8005788:	d2f6      	bcs.n	8005778 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	685a      	ldr	r2, [r3, #4]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	683a      	ldr	r2, [r7, #0]
 80057a4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	1c5a      	adds	r2, r3, #1
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	601a      	str	r2, [r3, #0]
}
 80057b6:	bf00      	nop
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bc80      	pop	{r7}
 80057be:	4770      	bx	lr

080057c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	6892      	ldr	r2, [r2, #8]
 80057d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	6852      	ldr	r2, [r2, #4]
 80057e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d103      	bne.n	80057f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	689a      	ldr	r2, [r3, #8]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	1e5a      	subs	r2, r3, #1
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
}
 8005808:	4618      	mov	r0, r3
 800580a:	3714      	adds	r7, #20
 800580c:	46bd      	mov	sp, r7
 800580e:	bc80      	pop	{r7}
 8005810:	4770      	bx	lr
	...

08005814 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10b      	bne.n	8005840 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800582c:	f383 8811 	msr	BASEPRI, r3
 8005830:	f3bf 8f6f 	isb	sy
 8005834:	f3bf 8f4f 	dsb	sy
 8005838:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800583a:	bf00      	nop
 800583c:	bf00      	nop
 800583e:	e7fd      	b.n	800583c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005840:	f002 f8f4 	bl	8007a2c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800584c:	68f9      	ldr	r1, [r7, #12]
 800584e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005850:	fb01 f303 	mul.w	r3, r1, r3
 8005854:	441a      	add	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005870:	3b01      	subs	r3, #1
 8005872:	68f9      	ldr	r1, [r7, #12]
 8005874:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005876:	fb01 f303 	mul.w	r3, r1, r3
 800587a:	441a      	add	r2, r3
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	22ff      	movs	r2, #255	@ 0xff
 8005884:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	22ff      	movs	r2, #255	@ 0xff
 800588c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d114      	bne.n	80058c0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d01a      	beq.n	80058d4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	3310      	adds	r3, #16
 80058a2:	4618      	mov	r0, r3
 80058a4:	f001 f928 	bl	8006af8 <xTaskRemoveFromEventList>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d012      	beq.n	80058d4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80058ae:	4b0d      	ldr	r3, [pc, #52]	@ (80058e4 <xQueueGenericReset+0xd0>)
 80058b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	f3bf 8f4f 	dsb	sy
 80058ba:	f3bf 8f6f 	isb	sy
 80058be:	e009      	b.n	80058d4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	3310      	adds	r3, #16
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7ff fef5 	bl	80056b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	3324      	adds	r3, #36	@ 0x24
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7ff fef0 	bl	80056b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80058d4:	f002 f8da 	bl	8007a8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80058d8:	2301      	movs	r3, #1
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	e000ed04 	.word	0xe000ed04

080058e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b08e      	sub	sp, #56	@ 0x38
 80058ec:	af02      	add	r7, sp, #8
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
 80058f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d10b      	bne.n	8005914 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80058fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005900:	f383 8811 	msr	BASEPRI, r3
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800590e:	bf00      	nop
 8005910:	bf00      	nop
 8005912:	e7fd      	b.n	8005910 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d10b      	bne.n	8005932 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800591a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800591e:	f383 8811 	msr	BASEPRI, r3
 8005922:	f3bf 8f6f 	isb	sy
 8005926:	f3bf 8f4f 	dsb	sy
 800592a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800592c:	bf00      	nop
 800592e:	bf00      	nop
 8005930:	e7fd      	b.n	800592e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d002      	beq.n	800593e <xQueueGenericCreateStatic+0x56>
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d001      	beq.n	8005942 <xQueueGenericCreateStatic+0x5a>
 800593e:	2301      	movs	r3, #1
 8005940:	e000      	b.n	8005944 <xQueueGenericCreateStatic+0x5c>
 8005942:	2300      	movs	r3, #0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d10b      	bne.n	8005960 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800594c:	f383 8811 	msr	BASEPRI, r3
 8005950:	f3bf 8f6f 	isb	sy
 8005954:	f3bf 8f4f 	dsb	sy
 8005958:	623b      	str	r3, [r7, #32]
}
 800595a:	bf00      	nop
 800595c:	bf00      	nop
 800595e:	e7fd      	b.n	800595c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d102      	bne.n	800596c <xQueueGenericCreateStatic+0x84>
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d101      	bne.n	8005970 <xQueueGenericCreateStatic+0x88>
 800596c:	2301      	movs	r3, #1
 800596e:	e000      	b.n	8005972 <xQueueGenericCreateStatic+0x8a>
 8005970:	2300      	movs	r3, #0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d10b      	bne.n	800598e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800597a:	f383 8811 	msr	BASEPRI, r3
 800597e:	f3bf 8f6f 	isb	sy
 8005982:	f3bf 8f4f 	dsb	sy
 8005986:	61fb      	str	r3, [r7, #28]
}
 8005988:	bf00      	nop
 800598a:	bf00      	nop
 800598c:	e7fd      	b.n	800598a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800598e:	2348      	movs	r3, #72	@ 0x48
 8005990:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	2b48      	cmp	r3, #72	@ 0x48
 8005996:	d00b      	beq.n	80059b0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800599c:	f383 8811 	msr	BASEPRI, r3
 80059a0:	f3bf 8f6f 	isb	sy
 80059a4:	f3bf 8f4f 	dsb	sy
 80059a8:	61bb      	str	r3, [r7, #24]
}
 80059aa:	bf00      	nop
 80059ac:	bf00      	nop
 80059ae:	e7fd      	b.n	80059ac <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80059b0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80059b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00d      	beq.n	80059d8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80059bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80059c4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80059c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059ca:	9300      	str	r3, [sp, #0]
 80059cc:	4613      	mov	r3, r2
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	68b9      	ldr	r1, [r7, #8]
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f000 f805 	bl	80059e2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80059d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80059da:	4618      	mov	r0, r3
 80059dc:	3730      	adds	r7, #48	@ 0x30
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}

080059e2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80059e2:	b580      	push	{r7, lr}
 80059e4:	b084      	sub	sp, #16
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	60f8      	str	r0, [r7, #12]
 80059ea:	60b9      	str	r1, [r7, #8]
 80059ec:	607a      	str	r2, [r7, #4]
 80059ee:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d103      	bne.n	80059fe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	69ba      	ldr	r2, [r7, #24]
 80059fa:	601a      	str	r2, [r3, #0]
 80059fc:	e002      	b.n	8005a04 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005a10:	2101      	movs	r1, #1
 8005a12:	69b8      	ldr	r0, [r7, #24]
 8005a14:	f7ff fefe 	bl	8005814 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005a18:	bf00      	nop
 8005a1a:	3710      	adds	r7, #16
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b08e      	sub	sp, #56	@ 0x38
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
 8005a2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d10b      	bne.n	8005a54 <xQueueGenericSend+0x34>
	__asm volatile
 8005a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a40:	f383 8811 	msr	BASEPRI, r3
 8005a44:	f3bf 8f6f 	isb	sy
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005a4e:	bf00      	nop
 8005a50:	bf00      	nop
 8005a52:	e7fd      	b.n	8005a50 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d103      	bne.n	8005a62 <xQueueGenericSend+0x42>
 8005a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d101      	bne.n	8005a66 <xQueueGenericSend+0x46>
 8005a62:	2301      	movs	r3, #1
 8005a64:	e000      	b.n	8005a68 <xQueueGenericSend+0x48>
 8005a66:	2300      	movs	r3, #0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10b      	bne.n	8005a84 <xQueueGenericSend+0x64>
	__asm volatile
 8005a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a70:	f383 8811 	msr	BASEPRI, r3
 8005a74:	f3bf 8f6f 	isb	sy
 8005a78:	f3bf 8f4f 	dsb	sy
 8005a7c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005a7e:	bf00      	nop
 8005a80:	bf00      	nop
 8005a82:	e7fd      	b.n	8005a80 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d103      	bne.n	8005a92 <xQueueGenericSend+0x72>
 8005a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d101      	bne.n	8005a96 <xQueueGenericSend+0x76>
 8005a92:	2301      	movs	r3, #1
 8005a94:	e000      	b.n	8005a98 <xQueueGenericSend+0x78>
 8005a96:	2300      	movs	r3, #0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d10b      	bne.n	8005ab4 <xQueueGenericSend+0x94>
	__asm volatile
 8005a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aa0:	f383 8811 	msr	BASEPRI, r3
 8005aa4:	f3bf 8f6f 	isb	sy
 8005aa8:	f3bf 8f4f 	dsb	sy
 8005aac:	623b      	str	r3, [r7, #32]
}
 8005aae:	bf00      	nop
 8005ab0:	bf00      	nop
 8005ab2:	e7fd      	b.n	8005ab0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ab4:	f001 f9e6 	bl	8006e84 <xTaskGetSchedulerState>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d102      	bne.n	8005ac4 <xQueueGenericSend+0xa4>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d101      	bne.n	8005ac8 <xQueueGenericSend+0xa8>
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e000      	b.n	8005aca <xQueueGenericSend+0xaa>
 8005ac8:	2300      	movs	r3, #0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d10b      	bne.n	8005ae6 <xQueueGenericSend+0xc6>
	__asm volatile
 8005ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad2:	f383 8811 	msr	BASEPRI, r3
 8005ad6:	f3bf 8f6f 	isb	sy
 8005ada:	f3bf 8f4f 	dsb	sy
 8005ade:	61fb      	str	r3, [r7, #28]
}
 8005ae0:	bf00      	nop
 8005ae2:	bf00      	nop
 8005ae4:	e7fd      	b.n	8005ae2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ae6:	f001 ffa1 	bl	8007a2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d302      	bcc.n	8005afc <xQueueGenericSend+0xdc>
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d129      	bne.n	8005b50 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005afc:	683a      	ldr	r2, [r7, #0]
 8005afe:	68b9      	ldr	r1, [r7, #8]
 8005b00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b02:	f000 fa0f 	bl	8005f24 <prvCopyDataToQueue>
 8005b06:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d010      	beq.n	8005b32 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b12:	3324      	adds	r3, #36	@ 0x24
 8005b14:	4618      	mov	r0, r3
 8005b16:	f000 ffef 	bl	8006af8 <xTaskRemoveFromEventList>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d013      	beq.n	8005b48 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005b20:	4b3f      	ldr	r3, [pc, #252]	@ (8005c20 <xQueueGenericSend+0x200>)
 8005b22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b26:	601a      	str	r2, [r3, #0]
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	f3bf 8f6f 	isb	sy
 8005b30:	e00a      	b.n	8005b48 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d007      	beq.n	8005b48 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005b38:	4b39      	ldr	r3, [pc, #228]	@ (8005c20 <xQueueGenericSend+0x200>)
 8005b3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b3e:	601a      	str	r2, [r3, #0]
 8005b40:	f3bf 8f4f 	dsb	sy
 8005b44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005b48:	f001 ffa0 	bl	8007a8c <vPortExitCritical>
				return pdPASS;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e063      	b.n	8005c18 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d103      	bne.n	8005b5e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b56:	f001 ff99 	bl	8007a8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	e05c      	b.n	8005c18 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d106      	bne.n	8005b72 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b64:	f107 0314 	add.w	r3, r7, #20
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f001 f829 	bl	8006bc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b72:	f001 ff8b 	bl	8007a8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b76:	f000 fd97 	bl	80066a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b7a:	f001 ff57 	bl	8007a2c <vPortEnterCritical>
 8005b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b84:	b25b      	sxtb	r3, r3
 8005b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b8a:	d103      	bne.n	8005b94 <xQueueGenericSend+0x174>
 8005b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b96:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b9a:	b25b      	sxtb	r3, r3
 8005b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba0:	d103      	bne.n	8005baa <xQueueGenericSend+0x18a>
 8005ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005baa:	f001 ff6f 	bl	8007a8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005bae:	1d3a      	adds	r2, r7, #4
 8005bb0:	f107 0314 	add.w	r3, r7, #20
 8005bb4:	4611      	mov	r1, r2
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f001 f818 	bl	8006bec <xTaskCheckForTimeOut>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d124      	bne.n	8005c0c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005bc2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005bc4:	f000 faa6 	bl	8006114 <prvIsQueueFull>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d018      	beq.n	8005c00 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd0:	3310      	adds	r3, #16
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	4611      	mov	r1, r2
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f000 ff3c 	bl	8006a54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005bdc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005bde:	f000 fa31 	bl	8006044 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005be2:	f000 fd6f 	bl	80066c4 <xTaskResumeAll>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f47f af7c 	bne.w	8005ae6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005bee:	4b0c      	ldr	r3, [pc, #48]	@ (8005c20 <xQueueGenericSend+0x200>)
 8005bf0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bf4:	601a      	str	r2, [r3, #0]
 8005bf6:	f3bf 8f4f 	dsb	sy
 8005bfa:	f3bf 8f6f 	isb	sy
 8005bfe:	e772      	b.n	8005ae6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005c00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c02:	f000 fa1f 	bl	8006044 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c06:	f000 fd5d 	bl	80066c4 <xTaskResumeAll>
 8005c0a:	e76c      	b.n	8005ae6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005c0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c0e:	f000 fa19 	bl	8006044 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c12:	f000 fd57 	bl	80066c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005c16:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3738      	adds	r7, #56	@ 0x38
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	e000ed04 	.word	0xe000ed04

08005c24 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b090      	sub	sp, #64	@ 0x40
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
 8005c30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10b      	bne.n	8005c54 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c40:	f383 8811 	msr	BASEPRI, r3
 8005c44:	f3bf 8f6f 	isb	sy
 8005c48:	f3bf 8f4f 	dsb	sy
 8005c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005c4e:	bf00      	nop
 8005c50:	bf00      	nop
 8005c52:	e7fd      	b.n	8005c50 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d103      	bne.n	8005c62 <xQueueGenericSendFromISR+0x3e>
 8005c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d101      	bne.n	8005c66 <xQueueGenericSendFromISR+0x42>
 8005c62:	2301      	movs	r3, #1
 8005c64:	e000      	b.n	8005c68 <xQueueGenericSendFromISR+0x44>
 8005c66:	2300      	movs	r3, #0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d10b      	bne.n	8005c84 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c70:	f383 8811 	msr	BASEPRI, r3
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005c7e:	bf00      	nop
 8005c80:	bf00      	nop
 8005c82:	e7fd      	b.n	8005c80 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d103      	bne.n	8005c92 <xQueueGenericSendFromISR+0x6e>
 8005c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d101      	bne.n	8005c96 <xQueueGenericSendFromISR+0x72>
 8005c92:	2301      	movs	r3, #1
 8005c94:	e000      	b.n	8005c98 <xQueueGenericSendFromISR+0x74>
 8005c96:	2300      	movs	r3, #0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10b      	bne.n	8005cb4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca0:	f383 8811 	msr	BASEPRI, r3
 8005ca4:	f3bf 8f6f 	isb	sy
 8005ca8:	f3bf 8f4f 	dsb	sy
 8005cac:	623b      	str	r3, [r7, #32]
}
 8005cae:	bf00      	nop
 8005cb0:	bf00      	nop
 8005cb2:	e7fd      	b.n	8005cb0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005cb4:	f001 ff7c 	bl	8007bb0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005cb8:	f3ef 8211 	mrs	r2, BASEPRI
 8005cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc0:	f383 8811 	msr	BASEPRI, r3
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	61fa      	str	r2, [r7, #28]
 8005cce:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005cd0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005cd2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d302      	bcc.n	8005ce6 <xQueueGenericSendFromISR+0xc2>
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d12f      	bne.n	8005d46 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ce8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005cec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005cf6:	683a      	ldr	r2, [r7, #0]
 8005cf8:	68b9      	ldr	r1, [r7, #8]
 8005cfa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005cfc:	f000 f912 	bl	8005f24 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005d00:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d08:	d112      	bne.n	8005d30 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d016      	beq.n	8005d40 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d14:	3324      	adds	r3, #36	@ 0x24
 8005d16:	4618      	mov	r0, r3
 8005d18:	f000 feee 	bl	8006af8 <xTaskRemoveFromEventList>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d00e      	beq.n	8005d40 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00b      	beq.n	8005d40 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	601a      	str	r2, [r3, #0]
 8005d2e:	e007      	b.n	8005d40 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005d30:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005d34:	3301      	adds	r3, #1
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	b25a      	sxtb	r2, r3
 8005d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005d40:	2301      	movs	r3, #1
 8005d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005d44:	e001      	b.n	8005d4a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005d46:	2300      	movs	r3, #0
 8005d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d4c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005d54:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3740      	adds	r7, #64	@ 0x40
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b08c      	sub	sp, #48	@ 0x30
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d10b      	bne.n	8005d92 <xQueueReceive+0x32>
	__asm volatile
 8005d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d7e:	f383 8811 	msr	BASEPRI, r3
 8005d82:	f3bf 8f6f 	isb	sy
 8005d86:	f3bf 8f4f 	dsb	sy
 8005d8a:	623b      	str	r3, [r7, #32]
}
 8005d8c:	bf00      	nop
 8005d8e:	bf00      	nop
 8005d90:	e7fd      	b.n	8005d8e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d103      	bne.n	8005da0 <xQueueReceive+0x40>
 8005d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d101      	bne.n	8005da4 <xQueueReceive+0x44>
 8005da0:	2301      	movs	r3, #1
 8005da2:	e000      	b.n	8005da6 <xQueueReceive+0x46>
 8005da4:	2300      	movs	r3, #0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10b      	bne.n	8005dc2 <xQueueReceive+0x62>
	__asm volatile
 8005daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dae:	f383 8811 	msr	BASEPRI, r3
 8005db2:	f3bf 8f6f 	isb	sy
 8005db6:	f3bf 8f4f 	dsb	sy
 8005dba:	61fb      	str	r3, [r7, #28]
}
 8005dbc:	bf00      	nop
 8005dbe:	bf00      	nop
 8005dc0:	e7fd      	b.n	8005dbe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005dc2:	f001 f85f 	bl	8006e84 <xTaskGetSchedulerState>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d102      	bne.n	8005dd2 <xQueueReceive+0x72>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d101      	bne.n	8005dd6 <xQueueReceive+0x76>
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e000      	b.n	8005dd8 <xQueueReceive+0x78>
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10b      	bne.n	8005df4 <xQueueReceive+0x94>
	__asm volatile
 8005ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005de0:	f383 8811 	msr	BASEPRI, r3
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	f3bf 8f4f 	dsb	sy
 8005dec:	61bb      	str	r3, [r7, #24]
}
 8005dee:	bf00      	nop
 8005df0:	bf00      	nop
 8005df2:	e7fd      	b.n	8005df0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005df4:	f001 fe1a 	bl	8007a2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dfc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d01f      	beq.n	8005e44 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005e04:	68b9      	ldr	r1, [r7, #8]
 8005e06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e08:	f000 f8f6 	bl	8005ff8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e0e:	1e5a      	subs	r2, r3, #1
 8005e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e12:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00f      	beq.n	8005e3c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e1e:	3310      	adds	r3, #16
 8005e20:	4618      	mov	r0, r3
 8005e22:	f000 fe69 	bl	8006af8 <xTaskRemoveFromEventList>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d007      	beq.n	8005e3c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005e2c:	4b3c      	ldr	r3, [pc, #240]	@ (8005f20 <xQueueReceive+0x1c0>)
 8005e2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e32:	601a      	str	r2, [r3, #0]
 8005e34:	f3bf 8f4f 	dsb	sy
 8005e38:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005e3c:	f001 fe26 	bl	8007a8c <vPortExitCritical>
				return pdPASS;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e069      	b.n	8005f18 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d103      	bne.n	8005e52 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e4a:	f001 fe1f 	bl	8007a8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	e062      	b.n	8005f18 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d106      	bne.n	8005e66 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e58:	f107 0310 	add.w	r3, r7, #16
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f000 feaf 	bl	8006bc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e62:	2301      	movs	r3, #1
 8005e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e66:	f001 fe11 	bl	8007a8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e6a:	f000 fc1d 	bl	80066a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e6e:	f001 fddd 	bl	8007a2c <vPortEnterCritical>
 8005e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e78:	b25b      	sxtb	r3, r3
 8005e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e7e:	d103      	bne.n	8005e88 <xQueueReceive+0x128>
 8005e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e8a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e8e:	b25b      	sxtb	r3, r3
 8005e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e94:	d103      	bne.n	8005e9e <xQueueReceive+0x13e>
 8005e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e9e:	f001 fdf5 	bl	8007a8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ea2:	1d3a      	adds	r2, r7, #4
 8005ea4:	f107 0310 	add.w	r3, r7, #16
 8005ea8:	4611      	mov	r1, r2
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f000 fe9e 	bl	8006bec <xTaskCheckForTimeOut>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d123      	bne.n	8005efe <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005eb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005eb8:	f000 f916 	bl	80060e8 <prvIsQueueEmpty>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d017      	beq.n	8005ef2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec4:	3324      	adds	r3, #36	@ 0x24
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	4611      	mov	r1, r2
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f000 fdc2 	bl	8006a54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ed0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ed2:	f000 f8b7 	bl	8006044 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ed6:	f000 fbf5 	bl	80066c4 <xTaskResumeAll>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d189      	bne.n	8005df4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005ee0:	4b0f      	ldr	r3, [pc, #60]	@ (8005f20 <xQueueReceive+0x1c0>)
 8005ee2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ee6:	601a      	str	r2, [r3, #0]
 8005ee8:	f3bf 8f4f 	dsb	sy
 8005eec:	f3bf 8f6f 	isb	sy
 8005ef0:	e780      	b.n	8005df4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005ef2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ef4:	f000 f8a6 	bl	8006044 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ef8:	f000 fbe4 	bl	80066c4 <xTaskResumeAll>
 8005efc:	e77a      	b.n	8005df4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005efe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f00:	f000 f8a0 	bl	8006044 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f04:	f000 fbde 	bl	80066c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f0a:	f000 f8ed 	bl	80060e8 <prvIsQueueEmpty>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f43f af6f 	beq.w	8005df4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005f16:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3730      	adds	r7, #48	@ 0x30
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	e000ed04 	.word	0xe000ed04

08005f24 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b086      	sub	sp, #24
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005f30:	2300      	movs	r3, #0
 8005f32:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10d      	bne.n	8005f5e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d14d      	bne.n	8005fe6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f000 ffb6 	bl	8006ec0 <xTaskPriorityDisinherit>
 8005f54:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	609a      	str	r2, [r3, #8]
 8005f5c:	e043      	b.n	8005fe6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d119      	bne.n	8005f98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6858      	ldr	r0, [r3, #4]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	68b9      	ldr	r1, [r7, #8]
 8005f70:	f002 f92e 	bl	80081d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	685a      	ldr	r2, [r3, #4]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f7c:	441a      	add	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	685a      	ldr	r2, [r3, #4]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d32b      	bcc.n	8005fe6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	605a      	str	r2, [r3, #4]
 8005f96:	e026      	b.n	8005fe6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	68d8      	ldr	r0, [r3, #12]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	68b9      	ldr	r1, [r7, #8]
 8005fa4:	f002 f914 	bl	80081d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	68da      	ldr	r2, [r3, #12]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb0:	425b      	negs	r3, r3
 8005fb2:	441a      	add	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	68da      	ldr	r2, [r3, #12]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d207      	bcs.n	8005fd4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	689a      	ldr	r2, [r3, #8]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fcc:	425b      	negs	r3, r3
 8005fce:	441a      	add	r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d105      	bne.n	8005fe6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d002      	beq.n	8005fe6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	1c5a      	adds	r2, r3, #1
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005fee:	697b      	ldr	r3, [r7, #20]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3718      	adds	r7, #24
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006006:	2b00      	cmp	r3, #0
 8006008:	d018      	beq.n	800603c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	68da      	ldr	r2, [r3, #12]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006012:	441a      	add	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	68da      	ldr	r2, [r3, #12]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	429a      	cmp	r2, r3
 8006022:	d303      	bcc.n	800602c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	68d9      	ldr	r1, [r3, #12]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006034:	461a      	mov	r2, r3
 8006036:	6838      	ldr	r0, [r7, #0]
 8006038:	f002 f8ca 	bl	80081d0 <memcpy>
	}
}
 800603c:	bf00      	nop
 800603e:	3708      	adds	r7, #8
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800604c:	f001 fcee 	bl	8007a2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006056:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006058:	e011      	b.n	800607e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800605e:	2b00      	cmp	r3, #0
 8006060:	d012      	beq.n	8006088 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	3324      	adds	r3, #36	@ 0x24
 8006066:	4618      	mov	r0, r3
 8006068:	f000 fd46 	bl	8006af8 <xTaskRemoveFromEventList>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d001      	beq.n	8006076 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006072:	f000 fe1f 	bl	8006cb4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006076:	7bfb      	ldrb	r3, [r7, #15]
 8006078:	3b01      	subs	r3, #1
 800607a:	b2db      	uxtb	r3, r3
 800607c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800607e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006082:	2b00      	cmp	r3, #0
 8006084:	dce9      	bgt.n	800605a <prvUnlockQueue+0x16>
 8006086:	e000      	b.n	800608a <prvUnlockQueue+0x46>
					break;
 8006088:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	22ff      	movs	r2, #255	@ 0xff
 800608e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006092:	f001 fcfb 	bl	8007a8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006096:	f001 fcc9 	bl	8007a2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80060a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80060a2:	e011      	b.n	80060c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d012      	beq.n	80060d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	3310      	adds	r3, #16
 80060b0:	4618      	mov	r0, r3
 80060b2:	f000 fd21 	bl	8006af8 <xTaskRemoveFromEventList>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d001      	beq.n	80060c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80060bc:	f000 fdfa 	bl	8006cb4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80060c0:	7bbb      	ldrb	r3, [r7, #14]
 80060c2:	3b01      	subs	r3, #1
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80060c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	dce9      	bgt.n	80060a4 <prvUnlockQueue+0x60>
 80060d0:	e000      	b.n	80060d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80060d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	22ff      	movs	r2, #255	@ 0xff
 80060d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80060dc:	f001 fcd6 	bl	8007a8c <vPortExitCritical>
}
 80060e0:	bf00      	nop
 80060e2:	3710      	adds	r7, #16
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80060f0:	f001 fc9c 	bl	8007a2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d102      	bne.n	8006102 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80060fc:	2301      	movs	r3, #1
 80060fe:	60fb      	str	r3, [r7, #12]
 8006100:	e001      	b.n	8006106 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006102:	2300      	movs	r3, #0
 8006104:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006106:	f001 fcc1 	bl	8007a8c <vPortExitCritical>

	return xReturn;
 800610a:	68fb      	ldr	r3, [r7, #12]
}
 800610c:	4618      	mov	r0, r3
 800610e:	3710      	adds	r7, #16
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800611c:	f001 fc86 	bl	8007a2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006128:	429a      	cmp	r2, r3
 800612a:	d102      	bne.n	8006132 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800612c:	2301      	movs	r3, #1
 800612e:	60fb      	str	r3, [r7, #12]
 8006130:	e001      	b.n	8006136 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006132:	2300      	movs	r3, #0
 8006134:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006136:	f001 fca9 	bl	8007a8c <vPortExitCritical>

	return xReturn;
 800613a:	68fb      	ldr	r3, [r7, #12]
}
 800613c:	4618      	mov	r0, r3
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800614e:	2300      	movs	r3, #0
 8006150:	60fb      	str	r3, [r7, #12]
 8006152:	e014      	b.n	800617e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006154:	4a0e      	ldr	r2, [pc, #56]	@ (8006190 <vQueueAddToRegistry+0x4c>)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10b      	bne.n	8006178 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006160:	490b      	ldr	r1, [pc, #44]	@ (8006190 <vQueueAddToRegistry+0x4c>)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	683a      	ldr	r2, [r7, #0]
 8006166:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800616a:	4a09      	ldr	r2, [pc, #36]	@ (8006190 <vQueueAddToRegistry+0x4c>)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	00db      	lsls	r3, r3, #3
 8006170:	4413      	add	r3, r2
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006176:	e006      	b.n	8006186 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	3301      	adds	r3, #1
 800617c:	60fb      	str	r3, [r7, #12]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2b07      	cmp	r3, #7
 8006182:	d9e7      	bls.n	8006154 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006184:	bf00      	nop
 8006186:	bf00      	nop
 8006188:	3714      	adds	r7, #20
 800618a:	46bd      	mov	sp, r7
 800618c:	bc80      	pop	{r7}
 800618e:	4770      	bx	lr
 8006190:	20000c88 	.word	0x20000c88

08006194 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006194:	b580      	push	{r7, lr}
 8006196:	b086      	sub	sp, #24
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80061a4:	f001 fc42 	bl	8007a2c <vPortEnterCritical>
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80061ae:	b25b      	sxtb	r3, r3
 80061b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b4:	d103      	bne.n	80061be <vQueueWaitForMessageRestricted+0x2a>
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80061c4:	b25b      	sxtb	r3, r3
 80061c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ca:	d103      	bne.n	80061d4 <vQueueWaitForMessageRestricted+0x40>
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80061d4:	f001 fc5a 	bl	8007a8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d106      	bne.n	80061ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	3324      	adds	r3, #36	@ 0x24
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	68b9      	ldr	r1, [r7, #8]
 80061e8:	4618      	mov	r0, r3
 80061ea:	f000 fc59 	bl	8006aa0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80061ee:	6978      	ldr	r0, [r7, #20]
 80061f0:	f7ff ff28 	bl	8006044 <prvUnlockQueue>
	}
 80061f4:	bf00      	nop
 80061f6:	3718      	adds	r7, #24
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b08e      	sub	sp, #56	@ 0x38
 8006200:	af04      	add	r7, sp, #16
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
 8006208:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800620a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10b      	bne.n	8006228 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006214:	f383 8811 	msr	BASEPRI, r3
 8006218:	f3bf 8f6f 	isb	sy
 800621c:	f3bf 8f4f 	dsb	sy
 8006220:	623b      	str	r3, [r7, #32]
}
 8006222:	bf00      	nop
 8006224:	bf00      	nop
 8006226:	e7fd      	b.n	8006224 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800622a:	2b00      	cmp	r3, #0
 800622c:	d10b      	bne.n	8006246 <xTaskCreateStatic+0x4a>
	__asm volatile
 800622e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006232:	f383 8811 	msr	BASEPRI, r3
 8006236:	f3bf 8f6f 	isb	sy
 800623a:	f3bf 8f4f 	dsb	sy
 800623e:	61fb      	str	r3, [r7, #28]
}
 8006240:	bf00      	nop
 8006242:	bf00      	nop
 8006244:	e7fd      	b.n	8006242 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006246:	23a0      	movs	r3, #160	@ 0xa0
 8006248:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	2ba0      	cmp	r3, #160	@ 0xa0
 800624e:	d00b      	beq.n	8006268 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006254:	f383 8811 	msr	BASEPRI, r3
 8006258:	f3bf 8f6f 	isb	sy
 800625c:	f3bf 8f4f 	dsb	sy
 8006260:	61bb      	str	r3, [r7, #24]
}
 8006262:	bf00      	nop
 8006264:	bf00      	nop
 8006266:	e7fd      	b.n	8006264 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006268:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800626a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800626c:	2b00      	cmp	r3, #0
 800626e:	d01e      	beq.n	80062ae <xTaskCreateStatic+0xb2>
 8006270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006272:	2b00      	cmp	r3, #0
 8006274:	d01b      	beq.n	80062ae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006278:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800627a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800627e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006282:	2202      	movs	r2, #2
 8006284:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006288:	2300      	movs	r3, #0
 800628a:	9303      	str	r3, [sp, #12]
 800628c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628e:	9302      	str	r3, [sp, #8]
 8006290:	f107 0314 	add.w	r3, r7, #20
 8006294:	9301      	str	r3, [sp, #4]
 8006296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006298:	9300      	str	r3, [sp, #0]
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	68b9      	ldr	r1, [r7, #8]
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f000 f851 	bl	8006348 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80062a8:	f000 f8ee 	bl	8006488 <prvAddNewTaskToReadyList>
 80062ac:	e001      	b.n	80062b2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80062ae:	2300      	movs	r3, #0
 80062b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80062b2:	697b      	ldr	r3, [r7, #20]
	}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3728      	adds	r7, #40	@ 0x28
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b08c      	sub	sp, #48	@ 0x30
 80062c0:	af04      	add	r7, sp, #16
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	603b      	str	r3, [r7, #0]
 80062c8:	4613      	mov	r3, r2
 80062ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80062cc:	88fb      	ldrh	r3, [r7, #6]
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4618      	mov	r0, r3
 80062d2:	f001 fcad 	bl	8007c30 <pvPortMalloc>
 80062d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00e      	beq.n	80062fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80062de:	20a0      	movs	r0, #160	@ 0xa0
 80062e0:	f001 fca6 	bl	8007c30 <pvPortMalloc>
 80062e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d003      	beq.n	80062f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80062f2:	e005      	b.n	8006300 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80062f4:	6978      	ldr	r0, [r7, #20]
 80062f6:	f001 fd69 	bl	8007dcc <vPortFree>
 80062fa:	e001      	b.n	8006300 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80062fc:	2300      	movs	r3, #0
 80062fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d017      	beq.n	8006336 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800630e:	88fa      	ldrh	r2, [r7, #6]
 8006310:	2300      	movs	r3, #0
 8006312:	9303      	str	r3, [sp, #12]
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	9302      	str	r3, [sp, #8]
 8006318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800631a:	9301      	str	r3, [sp, #4]
 800631c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800631e:	9300      	str	r3, [sp, #0]
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	68b9      	ldr	r1, [r7, #8]
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f000 f80f 	bl	8006348 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800632a:	69f8      	ldr	r0, [r7, #28]
 800632c:	f000 f8ac 	bl	8006488 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006330:	2301      	movs	r3, #1
 8006332:	61bb      	str	r3, [r7, #24]
 8006334:	e002      	b.n	800633c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006336:	f04f 33ff 	mov.w	r3, #4294967295
 800633a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800633c:	69bb      	ldr	r3, [r7, #24]
	}
 800633e:	4618      	mov	r0, r3
 8006340:	3720      	adds	r7, #32
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
	...

08006348 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b088      	sub	sp, #32
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	607a      	str	r2, [r7, #4]
 8006354:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006358:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006360:	3b01      	subs	r3, #1
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	4413      	add	r3, r2
 8006366:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	f023 0307 	bic.w	r3, r3, #7
 800636e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	f003 0307 	and.w	r3, r3, #7
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00b      	beq.n	8006392 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800637a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800637e:	f383 8811 	msr	BASEPRI, r3
 8006382:	f3bf 8f6f 	isb	sy
 8006386:	f3bf 8f4f 	dsb	sy
 800638a:	617b      	str	r3, [r7, #20]
}
 800638c:	bf00      	nop
 800638e:	bf00      	nop
 8006390:	e7fd      	b.n	800638e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d01f      	beq.n	80063d8 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006398:	2300      	movs	r3, #0
 800639a:	61fb      	str	r3, [r7, #28]
 800639c:	e012      	b.n	80063c4 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800639e:	68ba      	ldr	r2, [r7, #8]
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	4413      	add	r3, r2
 80063a4:	7819      	ldrb	r1, [r3, #0]
 80063a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	4413      	add	r3, r2
 80063ac:	3334      	adds	r3, #52	@ 0x34
 80063ae:	460a      	mov	r2, r1
 80063b0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80063b2:	68ba      	ldr	r2, [r7, #8]
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	4413      	add	r3, r2
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d006      	beq.n	80063cc <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	3301      	adds	r3, #1
 80063c2:	61fb      	str	r3, [r7, #28]
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	2b0f      	cmp	r3, #15
 80063c8:	d9e9      	bls.n	800639e <prvInitialiseNewTask+0x56>
 80063ca:	e000      	b.n	80063ce <prvInitialiseNewTask+0x86>
			{
				break;
 80063cc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80063ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80063d6:	e003      	b.n	80063e0 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80063d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80063e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e2:	2b06      	cmp	r3, #6
 80063e4:	d901      	bls.n	80063ea <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80063e6:	2306      	movs	r3, #6
 80063e8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80063ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063ee:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80063f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063f4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80063f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f8:	2200      	movs	r2, #0
 80063fa:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80063fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063fe:	3304      	adds	r3, #4
 8006400:	4618      	mov	r0, r3
 8006402:	f7ff f976 	bl	80056f2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006408:	3318      	adds	r3, #24
 800640a:	4618      	mov	r0, r3
 800640c:	f7ff f971 	bl	80056f2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006412:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006414:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006418:	f1c3 0207 	rsb	r2, r3, #7
 800641c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800641e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006422:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006424:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006428:	2200      	movs	r2, #0
 800642a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800642e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006430:	2200      	movs	r2, #0
 8006432:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006438:	334c      	adds	r3, #76	@ 0x4c
 800643a:	224c      	movs	r2, #76	@ 0x4c
 800643c:	2100      	movs	r1, #0
 800643e:	4618      	mov	r0, r3
 8006440:	f001 fe3c 	bl	80080bc <memset>
 8006444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006446:	4a0d      	ldr	r2, [pc, #52]	@ (800647c <prvInitialiseNewTask+0x134>)
 8006448:	651a      	str	r2, [r3, #80]	@ 0x50
 800644a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644c:	4a0c      	ldr	r2, [pc, #48]	@ (8006480 <prvInitialiseNewTask+0x138>)
 800644e:	655a      	str	r2, [r3, #84]	@ 0x54
 8006450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006452:	4a0c      	ldr	r2, [pc, #48]	@ (8006484 <prvInitialiseNewTask+0x13c>)
 8006454:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006456:	683a      	ldr	r2, [r7, #0]
 8006458:	68f9      	ldr	r1, [r7, #12]
 800645a:	69b8      	ldr	r0, [r7, #24]
 800645c:	f001 f9f8 	bl	8007850 <pxPortInitialiseStack>
 8006460:	4602      	mov	r2, r0
 8006462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006464:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006468:	2b00      	cmp	r3, #0
 800646a:	d002      	beq.n	8006472 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800646c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800646e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006470:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006472:	bf00      	nop
 8006474:	3720      	adds	r7, #32
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	20001f18 	.word	0x20001f18
 8006480:	20001f80 	.word	0x20001f80
 8006484:	20001fe8 	.word	0x20001fe8

08006488 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006490:	f001 facc 	bl	8007a2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006494:	4b2a      	ldr	r3, [pc, #168]	@ (8006540 <prvAddNewTaskToReadyList+0xb8>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	3301      	adds	r3, #1
 800649a:	4a29      	ldr	r2, [pc, #164]	@ (8006540 <prvAddNewTaskToReadyList+0xb8>)
 800649c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800649e:	4b29      	ldr	r3, [pc, #164]	@ (8006544 <prvAddNewTaskToReadyList+0xbc>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d109      	bne.n	80064ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80064a6:	4a27      	ldr	r2, [pc, #156]	@ (8006544 <prvAddNewTaskToReadyList+0xbc>)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80064ac:	4b24      	ldr	r3, [pc, #144]	@ (8006540 <prvAddNewTaskToReadyList+0xb8>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d110      	bne.n	80064d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80064b4:	f000 fc22 	bl	8006cfc <prvInitialiseTaskLists>
 80064b8:	e00d      	b.n	80064d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80064ba:	4b23      	ldr	r3, [pc, #140]	@ (8006548 <prvAddNewTaskToReadyList+0xc0>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d109      	bne.n	80064d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80064c2:	4b20      	ldr	r3, [pc, #128]	@ (8006544 <prvAddNewTaskToReadyList+0xbc>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d802      	bhi.n	80064d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80064d0:	4a1c      	ldr	r2, [pc, #112]	@ (8006544 <prvAddNewTaskToReadyList+0xbc>)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80064d6:	4b1d      	ldr	r3, [pc, #116]	@ (800654c <prvAddNewTaskToReadyList+0xc4>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	3301      	adds	r3, #1
 80064dc:	4a1b      	ldr	r2, [pc, #108]	@ (800654c <prvAddNewTaskToReadyList+0xc4>)
 80064de:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064e4:	2201      	movs	r2, #1
 80064e6:	409a      	lsls	r2, r3
 80064e8:	4b19      	ldr	r3, [pc, #100]	@ (8006550 <prvAddNewTaskToReadyList+0xc8>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	4a18      	ldr	r2, [pc, #96]	@ (8006550 <prvAddNewTaskToReadyList+0xc8>)
 80064f0:	6013      	str	r3, [r2, #0]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064f6:	4613      	mov	r3, r2
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	4413      	add	r3, r2
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	4a15      	ldr	r2, [pc, #84]	@ (8006554 <prvAddNewTaskToReadyList+0xcc>)
 8006500:	441a      	add	r2, r3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	3304      	adds	r3, #4
 8006506:	4619      	mov	r1, r3
 8006508:	4610      	mov	r0, r2
 800650a:	f7ff f8fe 	bl	800570a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800650e:	f001 fabd 	bl	8007a8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006512:	4b0d      	ldr	r3, [pc, #52]	@ (8006548 <prvAddNewTaskToReadyList+0xc0>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00e      	beq.n	8006538 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800651a:	4b0a      	ldr	r3, [pc, #40]	@ (8006544 <prvAddNewTaskToReadyList+0xbc>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006524:	429a      	cmp	r2, r3
 8006526:	d207      	bcs.n	8006538 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006528:	4b0b      	ldr	r3, [pc, #44]	@ (8006558 <prvAddNewTaskToReadyList+0xd0>)
 800652a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800652e:	601a      	str	r2, [r3, #0]
 8006530:	f3bf 8f4f 	dsb	sy
 8006534:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006538:	bf00      	nop
 800653a:	3708      	adds	r7, #8
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	20000dc8 	.word	0x20000dc8
 8006544:	20000cc8 	.word	0x20000cc8
 8006548:	20000dd4 	.word	0x20000dd4
 800654c:	20000de4 	.word	0x20000de4
 8006550:	20000dd0 	.word	0x20000dd0
 8006554:	20000ccc 	.word	0x20000ccc
 8006558:	e000ed04 	.word	0xe000ed04

0800655c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006564:	2300      	movs	r3, #0
 8006566:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d018      	beq.n	80065a0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800656e:	4b14      	ldr	r3, [pc, #80]	@ (80065c0 <vTaskDelay+0x64>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00b      	beq.n	800658e <vTaskDelay+0x32>
	__asm volatile
 8006576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800657a:	f383 8811 	msr	BASEPRI, r3
 800657e:	f3bf 8f6f 	isb	sy
 8006582:	f3bf 8f4f 	dsb	sy
 8006586:	60bb      	str	r3, [r7, #8]
}
 8006588:	bf00      	nop
 800658a:	bf00      	nop
 800658c:	e7fd      	b.n	800658a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800658e:	f000 f88b 	bl	80066a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006592:	2100      	movs	r1, #0
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 fd1b 	bl	8006fd0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800659a:	f000 f893 	bl	80066c4 <xTaskResumeAll>
 800659e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d107      	bne.n	80065b6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80065a6:	4b07      	ldr	r3, [pc, #28]	@ (80065c4 <vTaskDelay+0x68>)
 80065a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065ac:	601a      	str	r2, [r3, #0]
 80065ae:	f3bf 8f4f 	dsb	sy
 80065b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80065b6:	bf00      	nop
 80065b8:	3710      	adds	r7, #16
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	20000df0 	.word	0x20000df0
 80065c4:	e000ed04 	.word	0xe000ed04

080065c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b08a      	sub	sp, #40	@ 0x28
 80065cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80065ce:	2300      	movs	r3, #0
 80065d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80065d2:	2300      	movs	r3, #0
 80065d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80065d6:	463a      	mov	r2, r7
 80065d8:	1d39      	adds	r1, r7, #4
 80065da:	f107 0308 	add.w	r3, r7, #8
 80065de:	4618      	mov	r0, r3
 80065e0:	f7fa fa00 	bl	80009e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80065e4:	6839      	ldr	r1, [r7, #0]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	68ba      	ldr	r2, [r7, #8]
 80065ea:	9202      	str	r2, [sp, #8]
 80065ec:	9301      	str	r3, [sp, #4]
 80065ee:	2300      	movs	r3, #0
 80065f0:	9300      	str	r3, [sp, #0]
 80065f2:	2300      	movs	r3, #0
 80065f4:	460a      	mov	r2, r1
 80065f6:	4924      	ldr	r1, [pc, #144]	@ (8006688 <vTaskStartScheduler+0xc0>)
 80065f8:	4824      	ldr	r0, [pc, #144]	@ (800668c <vTaskStartScheduler+0xc4>)
 80065fa:	f7ff fdff 	bl	80061fc <xTaskCreateStatic>
 80065fe:	4603      	mov	r3, r0
 8006600:	4a23      	ldr	r2, [pc, #140]	@ (8006690 <vTaskStartScheduler+0xc8>)
 8006602:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006604:	4b22      	ldr	r3, [pc, #136]	@ (8006690 <vTaskStartScheduler+0xc8>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d002      	beq.n	8006612 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800660c:	2301      	movs	r3, #1
 800660e:	617b      	str	r3, [r7, #20]
 8006610:	e001      	b.n	8006616 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006612:	2300      	movs	r3, #0
 8006614:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d102      	bne.n	8006622 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800661c:	f000 fd3e 	bl	800709c <xTimerCreateTimerTask>
 8006620:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d11b      	bne.n	8006660 <vTaskStartScheduler+0x98>
	__asm volatile
 8006628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800662c:	f383 8811 	msr	BASEPRI, r3
 8006630:	f3bf 8f6f 	isb	sy
 8006634:	f3bf 8f4f 	dsb	sy
 8006638:	613b      	str	r3, [r7, #16]
}
 800663a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800663c:	4b15      	ldr	r3, [pc, #84]	@ (8006694 <vTaskStartScheduler+0xcc>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	334c      	adds	r3, #76	@ 0x4c
 8006642:	4a15      	ldr	r2, [pc, #84]	@ (8006698 <vTaskStartScheduler+0xd0>)
 8006644:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006646:	4b15      	ldr	r3, [pc, #84]	@ (800669c <vTaskStartScheduler+0xd4>)
 8006648:	f04f 32ff 	mov.w	r2, #4294967295
 800664c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800664e:	4b14      	ldr	r3, [pc, #80]	@ (80066a0 <vTaskStartScheduler+0xd8>)
 8006650:	2201      	movs	r2, #1
 8006652:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006654:	4b13      	ldr	r3, [pc, #76]	@ (80066a4 <vTaskStartScheduler+0xdc>)
 8006656:	2200      	movs	r2, #0
 8006658:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800665a:	f001 f975 	bl	8007948 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800665e:	e00f      	b.n	8006680 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006666:	d10b      	bne.n	8006680 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800666c:	f383 8811 	msr	BASEPRI, r3
 8006670:	f3bf 8f6f 	isb	sy
 8006674:	f3bf 8f4f 	dsb	sy
 8006678:	60fb      	str	r3, [r7, #12]
}
 800667a:	bf00      	nop
 800667c:	bf00      	nop
 800667e:	e7fd      	b.n	800667c <vTaskStartScheduler+0xb4>
}
 8006680:	bf00      	nop
 8006682:	3718      	adds	r7, #24
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	08009314 	.word	0x08009314
 800668c:	08006ccd 	.word	0x08006ccd
 8006690:	20000dec 	.word	0x20000dec
 8006694:	20000cc8 	.word	0x20000cc8
 8006698:	20000150 	.word	0x20000150
 800669c:	20000de8 	.word	0x20000de8
 80066a0:	20000dd4 	.word	0x20000dd4
 80066a4:	20000dcc 	.word	0x20000dcc

080066a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80066a8:	b480      	push	{r7}
 80066aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80066ac:	4b04      	ldr	r3, [pc, #16]	@ (80066c0 <vTaskSuspendAll+0x18>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	3301      	adds	r3, #1
 80066b2:	4a03      	ldr	r2, [pc, #12]	@ (80066c0 <vTaskSuspendAll+0x18>)
 80066b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80066b6:	bf00      	nop
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bc80      	pop	{r7}
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	20000df0 	.word	0x20000df0

080066c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80066ca:	2300      	movs	r3, #0
 80066cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80066ce:	2300      	movs	r3, #0
 80066d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80066d2:	4b42      	ldr	r3, [pc, #264]	@ (80067dc <xTaskResumeAll+0x118>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d10b      	bne.n	80066f2 <xTaskResumeAll+0x2e>
	__asm volatile
 80066da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066de:	f383 8811 	msr	BASEPRI, r3
 80066e2:	f3bf 8f6f 	isb	sy
 80066e6:	f3bf 8f4f 	dsb	sy
 80066ea:	603b      	str	r3, [r7, #0]
}
 80066ec:	bf00      	nop
 80066ee:	bf00      	nop
 80066f0:	e7fd      	b.n	80066ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80066f2:	f001 f99b 	bl	8007a2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80066f6:	4b39      	ldr	r3, [pc, #228]	@ (80067dc <xTaskResumeAll+0x118>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	3b01      	subs	r3, #1
 80066fc:	4a37      	ldr	r2, [pc, #220]	@ (80067dc <xTaskResumeAll+0x118>)
 80066fe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006700:	4b36      	ldr	r3, [pc, #216]	@ (80067dc <xTaskResumeAll+0x118>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d161      	bne.n	80067cc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006708:	4b35      	ldr	r3, [pc, #212]	@ (80067e0 <xTaskResumeAll+0x11c>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d05d      	beq.n	80067cc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006710:	e02e      	b.n	8006770 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006712:	4b34      	ldr	r3, [pc, #208]	@ (80067e4 <xTaskResumeAll+0x120>)
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	3318      	adds	r3, #24
 800671e:	4618      	mov	r0, r3
 8006720:	f7ff f84e 	bl	80057c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	3304      	adds	r3, #4
 8006728:	4618      	mov	r0, r3
 800672a:	f7ff f849 	bl	80057c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006732:	2201      	movs	r2, #1
 8006734:	409a      	lsls	r2, r3
 8006736:	4b2c      	ldr	r3, [pc, #176]	@ (80067e8 <xTaskResumeAll+0x124>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4313      	orrs	r3, r2
 800673c:	4a2a      	ldr	r2, [pc, #168]	@ (80067e8 <xTaskResumeAll+0x124>)
 800673e:	6013      	str	r3, [r2, #0]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006744:	4613      	mov	r3, r2
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	4413      	add	r3, r2
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	4a27      	ldr	r2, [pc, #156]	@ (80067ec <xTaskResumeAll+0x128>)
 800674e:	441a      	add	r2, r3
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	3304      	adds	r3, #4
 8006754:	4619      	mov	r1, r3
 8006756:	4610      	mov	r0, r2
 8006758:	f7fe ffd7 	bl	800570a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006760:	4b23      	ldr	r3, [pc, #140]	@ (80067f0 <xTaskResumeAll+0x12c>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006766:	429a      	cmp	r2, r3
 8006768:	d302      	bcc.n	8006770 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800676a:	4b22      	ldr	r3, [pc, #136]	@ (80067f4 <xTaskResumeAll+0x130>)
 800676c:	2201      	movs	r2, #1
 800676e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006770:	4b1c      	ldr	r3, [pc, #112]	@ (80067e4 <xTaskResumeAll+0x120>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d1cc      	bne.n	8006712 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d001      	beq.n	8006782 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800677e:	f000 fb61 	bl	8006e44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006782:	4b1d      	ldr	r3, [pc, #116]	@ (80067f8 <xTaskResumeAll+0x134>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d010      	beq.n	80067b0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800678e:	f000 f845 	bl	800681c <xTaskIncrementTick>
 8006792:	4603      	mov	r3, r0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d002      	beq.n	800679e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006798:	4b16      	ldr	r3, [pc, #88]	@ (80067f4 <xTaskResumeAll+0x130>)
 800679a:	2201      	movs	r2, #1
 800679c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	3b01      	subs	r3, #1
 80067a2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1f1      	bne.n	800678e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80067aa:	4b13      	ldr	r3, [pc, #76]	@ (80067f8 <xTaskResumeAll+0x134>)
 80067ac:	2200      	movs	r2, #0
 80067ae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80067b0:	4b10      	ldr	r3, [pc, #64]	@ (80067f4 <xTaskResumeAll+0x130>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d009      	beq.n	80067cc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80067b8:	2301      	movs	r3, #1
 80067ba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80067bc:	4b0f      	ldr	r3, [pc, #60]	@ (80067fc <xTaskResumeAll+0x138>)
 80067be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067c2:	601a      	str	r2, [r3, #0]
 80067c4:	f3bf 8f4f 	dsb	sy
 80067c8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80067cc:	f001 f95e 	bl	8007a8c <vPortExitCritical>

	return xAlreadyYielded;
 80067d0:	68bb      	ldr	r3, [r7, #8]
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	20000df0 	.word	0x20000df0
 80067e0:	20000dc8 	.word	0x20000dc8
 80067e4:	20000d88 	.word	0x20000d88
 80067e8:	20000dd0 	.word	0x20000dd0
 80067ec:	20000ccc 	.word	0x20000ccc
 80067f0:	20000cc8 	.word	0x20000cc8
 80067f4:	20000ddc 	.word	0x20000ddc
 80067f8:	20000dd8 	.word	0x20000dd8
 80067fc:	e000ed04 	.word	0xe000ed04

08006800 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006806:	4b04      	ldr	r3, [pc, #16]	@ (8006818 <xTaskGetTickCount+0x18>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800680c:	687b      	ldr	r3, [r7, #4]
}
 800680e:	4618      	mov	r0, r3
 8006810:	370c      	adds	r7, #12
 8006812:	46bd      	mov	sp, r7
 8006814:	bc80      	pop	{r7}
 8006816:	4770      	bx	lr
 8006818:	20000dcc 	.word	0x20000dcc

0800681c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b086      	sub	sp, #24
 8006820:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006822:	2300      	movs	r3, #0
 8006824:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006826:	4b4f      	ldr	r3, [pc, #316]	@ (8006964 <xTaskIncrementTick+0x148>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	f040 808f 	bne.w	800694e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006830:	4b4d      	ldr	r3, [pc, #308]	@ (8006968 <xTaskIncrementTick+0x14c>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	3301      	adds	r3, #1
 8006836:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006838:	4a4b      	ldr	r2, [pc, #300]	@ (8006968 <xTaskIncrementTick+0x14c>)
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d121      	bne.n	8006888 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006844:	4b49      	ldr	r3, [pc, #292]	@ (800696c <xTaskIncrementTick+0x150>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00b      	beq.n	8006866 <xTaskIncrementTick+0x4a>
	__asm volatile
 800684e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006852:	f383 8811 	msr	BASEPRI, r3
 8006856:	f3bf 8f6f 	isb	sy
 800685a:	f3bf 8f4f 	dsb	sy
 800685e:	603b      	str	r3, [r7, #0]
}
 8006860:	bf00      	nop
 8006862:	bf00      	nop
 8006864:	e7fd      	b.n	8006862 <xTaskIncrementTick+0x46>
 8006866:	4b41      	ldr	r3, [pc, #260]	@ (800696c <xTaskIncrementTick+0x150>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	60fb      	str	r3, [r7, #12]
 800686c:	4b40      	ldr	r3, [pc, #256]	@ (8006970 <xTaskIncrementTick+0x154>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a3e      	ldr	r2, [pc, #248]	@ (800696c <xTaskIncrementTick+0x150>)
 8006872:	6013      	str	r3, [r2, #0]
 8006874:	4a3e      	ldr	r2, [pc, #248]	@ (8006970 <xTaskIncrementTick+0x154>)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6013      	str	r3, [r2, #0]
 800687a:	4b3e      	ldr	r3, [pc, #248]	@ (8006974 <xTaskIncrementTick+0x158>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	3301      	adds	r3, #1
 8006880:	4a3c      	ldr	r2, [pc, #240]	@ (8006974 <xTaskIncrementTick+0x158>)
 8006882:	6013      	str	r3, [r2, #0]
 8006884:	f000 fade 	bl	8006e44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006888:	4b3b      	ldr	r3, [pc, #236]	@ (8006978 <xTaskIncrementTick+0x15c>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	693a      	ldr	r2, [r7, #16]
 800688e:	429a      	cmp	r2, r3
 8006890:	d348      	bcc.n	8006924 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006892:	4b36      	ldr	r3, [pc, #216]	@ (800696c <xTaskIncrementTick+0x150>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d104      	bne.n	80068a6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800689c:	4b36      	ldr	r3, [pc, #216]	@ (8006978 <xTaskIncrementTick+0x15c>)
 800689e:	f04f 32ff 	mov.w	r2, #4294967295
 80068a2:	601a      	str	r2, [r3, #0]
					break;
 80068a4:	e03e      	b.n	8006924 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068a6:	4b31      	ldr	r3, [pc, #196]	@ (800696c <xTaskIncrementTick+0x150>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d203      	bcs.n	80068c6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80068be:	4a2e      	ldr	r2, [pc, #184]	@ (8006978 <xTaskIncrementTick+0x15c>)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80068c4:	e02e      	b.n	8006924 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	3304      	adds	r3, #4
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7fe ff78 	bl	80057c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d004      	beq.n	80068e2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	3318      	adds	r3, #24
 80068dc:	4618      	mov	r0, r3
 80068de:	f7fe ff6f 	bl	80057c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068e6:	2201      	movs	r2, #1
 80068e8:	409a      	lsls	r2, r3
 80068ea:	4b24      	ldr	r3, [pc, #144]	@ (800697c <xTaskIncrementTick+0x160>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	4a22      	ldr	r2, [pc, #136]	@ (800697c <xTaskIncrementTick+0x160>)
 80068f2:	6013      	str	r3, [r2, #0]
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068f8:	4613      	mov	r3, r2
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	4413      	add	r3, r2
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	4a1f      	ldr	r2, [pc, #124]	@ (8006980 <xTaskIncrementTick+0x164>)
 8006902:	441a      	add	r2, r3
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	3304      	adds	r3, #4
 8006908:	4619      	mov	r1, r3
 800690a:	4610      	mov	r0, r2
 800690c:	f7fe fefd 	bl	800570a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006914:	4b1b      	ldr	r3, [pc, #108]	@ (8006984 <xTaskIncrementTick+0x168>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800691a:	429a      	cmp	r2, r3
 800691c:	d3b9      	bcc.n	8006892 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800691e:	2301      	movs	r3, #1
 8006920:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006922:	e7b6      	b.n	8006892 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006924:	4b17      	ldr	r3, [pc, #92]	@ (8006984 <xTaskIncrementTick+0x168>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800692a:	4915      	ldr	r1, [pc, #84]	@ (8006980 <xTaskIncrementTick+0x164>)
 800692c:	4613      	mov	r3, r2
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	4413      	add	r3, r2
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	440b      	add	r3, r1
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2b01      	cmp	r3, #1
 800693a:	d901      	bls.n	8006940 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800693c:	2301      	movs	r3, #1
 800693e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006940:	4b11      	ldr	r3, [pc, #68]	@ (8006988 <xTaskIncrementTick+0x16c>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d007      	beq.n	8006958 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006948:	2301      	movs	r3, #1
 800694a:	617b      	str	r3, [r7, #20]
 800694c:	e004      	b.n	8006958 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800694e:	4b0f      	ldr	r3, [pc, #60]	@ (800698c <xTaskIncrementTick+0x170>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	3301      	adds	r3, #1
 8006954:	4a0d      	ldr	r2, [pc, #52]	@ (800698c <xTaskIncrementTick+0x170>)
 8006956:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006958:	697b      	ldr	r3, [r7, #20]
}
 800695a:	4618      	mov	r0, r3
 800695c:	3718      	adds	r7, #24
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	20000df0 	.word	0x20000df0
 8006968:	20000dcc 	.word	0x20000dcc
 800696c:	20000d80 	.word	0x20000d80
 8006970:	20000d84 	.word	0x20000d84
 8006974:	20000de0 	.word	0x20000de0
 8006978:	20000de8 	.word	0x20000de8
 800697c:	20000dd0 	.word	0x20000dd0
 8006980:	20000ccc 	.word	0x20000ccc
 8006984:	20000cc8 	.word	0x20000cc8
 8006988:	20000ddc 	.word	0x20000ddc
 800698c:	20000dd8 	.word	0x20000dd8

08006990 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006990:	b480      	push	{r7}
 8006992:	b087      	sub	sp, #28
 8006994:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006996:	4b29      	ldr	r3, [pc, #164]	@ (8006a3c <vTaskSwitchContext+0xac>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d003      	beq.n	80069a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800699e:	4b28      	ldr	r3, [pc, #160]	@ (8006a40 <vTaskSwitchContext+0xb0>)
 80069a0:	2201      	movs	r2, #1
 80069a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80069a4:	e045      	b.n	8006a32 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80069a6:	4b26      	ldr	r3, [pc, #152]	@ (8006a40 <vTaskSwitchContext+0xb0>)
 80069a8:	2200      	movs	r2, #0
 80069aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069ac:	4b25      	ldr	r3, [pc, #148]	@ (8006a44 <vTaskSwitchContext+0xb4>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	fab3 f383 	clz	r3, r3
 80069b8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80069ba:	7afb      	ldrb	r3, [r7, #11]
 80069bc:	f1c3 031f 	rsb	r3, r3, #31
 80069c0:	617b      	str	r3, [r7, #20]
 80069c2:	4921      	ldr	r1, [pc, #132]	@ (8006a48 <vTaskSwitchContext+0xb8>)
 80069c4:	697a      	ldr	r2, [r7, #20]
 80069c6:	4613      	mov	r3, r2
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	4413      	add	r3, r2
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	440b      	add	r3, r1
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d10b      	bne.n	80069ee <vTaskSwitchContext+0x5e>
	__asm volatile
 80069d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069da:	f383 8811 	msr	BASEPRI, r3
 80069de:	f3bf 8f6f 	isb	sy
 80069e2:	f3bf 8f4f 	dsb	sy
 80069e6:	607b      	str	r3, [r7, #4]
}
 80069e8:	bf00      	nop
 80069ea:	bf00      	nop
 80069ec:	e7fd      	b.n	80069ea <vTaskSwitchContext+0x5a>
 80069ee:	697a      	ldr	r2, [r7, #20]
 80069f0:	4613      	mov	r3, r2
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	4413      	add	r3, r2
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	4a13      	ldr	r2, [pc, #76]	@ (8006a48 <vTaskSwitchContext+0xb8>)
 80069fa:	4413      	add	r3, r2
 80069fc:	613b      	str	r3, [r7, #16]
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	685a      	ldr	r2, [r3, #4]
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	605a      	str	r2, [r3, #4]
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	685a      	ldr	r2, [r3, #4]
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	3308      	adds	r3, #8
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d104      	bne.n	8006a1e <vTaskSwitchContext+0x8e>
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	685a      	ldr	r2, [r3, #4]
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	605a      	str	r2, [r3, #4]
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	4a09      	ldr	r2, [pc, #36]	@ (8006a4c <vTaskSwitchContext+0xbc>)
 8006a26:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006a28:	4b08      	ldr	r3, [pc, #32]	@ (8006a4c <vTaskSwitchContext+0xbc>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	334c      	adds	r3, #76	@ 0x4c
 8006a2e:	4a08      	ldr	r2, [pc, #32]	@ (8006a50 <vTaskSwitchContext+0xc0>)
 8006a30:	6013      	str	r3, [r2, #0]
}
 8006a32:	bf00      	nop
 8006a34:	371c      	adds	r7, #28
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bc80      	pop	{r7}
 8006a3a:	4770      	bx	lr
 8006a3c:	20000df0 	.word	0x20000df0
 8006a40:	20000ddc 	.word	0x20000ddc
 8006a44:	20000dd0 	.word	0x20000dd0
 8006a48:	20000ccc 	.word	0x20000ccc
 8006a4c:	20000cc8 	.word	0x20000cc8
 8006a50:	20000150 	.word	0x20000150

08006a54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d10b      	bne.n	8006a7c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a68:	f383 8811 	msr	BASEPRI, r3
 8006a6c:	f3bf 8f6f 	isb	sy
 8006a70:	f3bf 8f4f 	dsb	sy
 8006a74:	60fb      	str	r3, [r7, #12]
}
 8006a76:	bf00      	nop
 8006a78:	bf00      	nop
 8006a7a:	e7fd      	b.n	8006a78 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a7c:	4b07      	ldr	r3, [pc, #28]	@ (8006a9c <vTaskPlaceOnEventList+0x48>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	3318      	adds	r3, #24
 8006a82:	4619      	mov	r1, r3
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f7fe fe63 	bl	8005750 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a8a:	2101      	movs	r1, #1
 8006a8c:	6838      	ldr	r0, [r7, #0]
 8006a8e:	f000 fa9f 	bl	8006fd0 <prvAddCurrentTaskToDelayedList>
}
 8006a92:	bf00      	nop
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	20000cc8 	.word	0x20000cc8

08006aa0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b086      	sub	sp, #24
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d10b      	bne.n	8006aca <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ab6:	f383 8811 	msr	BASEPRI, r3
 8006aba:	f3bf 8f6f 	isb	sy
 8006abe:	f3bf 8f4f 	dsb	sy
 8006ac2:	617b      	str	r3, [r7, #20]
}
 8006ac4:	bf00      	nop
 8006ac6:	bf00      	nop
 8006ac8:	e7fd      	b.n	8006ac6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006aca:	4b0a      	ldr	r3, [pc, #40]	@ (8006af4 <vTaskPlaceOnEventListRestricted+0x54>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	3318      	adds	r3, #24
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f7fe fe19 	bl	800570a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d002      	beq.n	8006ae4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006ade:	f04f 33ff 	mov.w	r3, #4294967295
 8006ae2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006ae4:	6879      	ldr	r1, [r7, #4]
 8006ae6:	68b8      	ldr	r0, [r7, #8]
 8006ae8:	f000 fa72 	bl	8006fd0 <prvAddCurrentTaskToDelayedList>
	}
 8006aec:	bf00      	nop
 8006aee:	3718      	adds	r7, #24
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	20000cc8 	.word	0x20000cc8

08006af8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b086      	sub	sp, #24
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10b      	bne.n	8006b26 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b12:	f383 8811 	msr	BASEPRI, r3
 8006b16:	f3bf 8f6f 	isb	sy
 8006b1a:	f3bf 8f4f 	dsb	sy
 8006b1e:	60fb      	str	r3, [r7, #12]
}
 8006b20:	bf00      	nop
 8006b22:	bf00      	nop
 8006b24:	e7fd      	b.n	8006b22 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	3318      	adds	r3, #24
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7fe fe48 	bl	80057c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b30:	4b1d      	ldr	r3, [pc, #116]	@ (8006ba8 <xTaskRemoveFromEventList+0xb0>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d11c      	bne.n	8006b72 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	3304      	adds	r3, #4
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f7fe fe3f 	bl	80057c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b46:	2201      	movs	r2, #1
 8006b48:	409a      	lsls	r2, r3
 8006b4a:	4b18      	ldr	r3, [pc, #96]	@ (8006bac <xTaskRemoveFromEventList+0xb4>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	4a16      	ldr	r2, [pc, #88]	@ (8006bac <xTaskRemoveFromEventList+0xb4>)
 8006b52:	6013      	str	r3, [r2, #0]
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b58:	4613      	mov	r3, r2
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	4413      	add	r3, r2
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	4a13      	ldr	r2, [pc, #76]	@ (8006bb0 <xTaskRemoveFromEventList+0xb8>)
 8006b62:	441a      	add	r2, r3
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	3304      	adds	r3, #4
 8006b68:	4619      	mov	r1, r3
 8006b6a:	4610      	mov	r0, r2
 8006b6c:	f7fe fdcd 	bl	800570a <vListInsertEnd>
 8006b70:	e005      	b.n	8006b7e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	3318      	adds	r3, #24
 8006b76:	4619      	mov	r1, r3
 8006b78:	480e      	ldr	r0, [pc, #56]	@ (8006bb4 <xTaskRemoveFromEventList+0xbc>)
 8006b7a:	f7fe fdc6 	bl	800570a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b82:	4b0d      	ldr	r3, [pc, #52]	@ (8006bb8 <xTaskRemoveFromEventList+0xc0>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d905      	bls.n	8006b98 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006b90:	4b0a      	ldr	r3, [pc, #40]	@ (8006bbc <xTaskRemoveFromEventList+0xc4>)
 8006b92:	2201      	movs	r2, #1
 8006b94:	601a      	str	r2, [r3, #0]
 8006b96:	e001      	b.n	8006b9c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006b9c:	697b      	ldr	r3, [r7, #20]
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3718      	adds	r7, #24
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	20000df0 	.word	0x20000df0
 8006bac:	20000dd0 	.word	0x20000dd0
 8006bb0:	20000ccc 	.word	0x20000ccc
 8006bb4:	20000d88 	.word	0x20000d88
 8006bb8:	20000cc8 	.word	0x20000cc8
 8006bbc:	20000ddc 	.word	0x20000ddc

08006bc0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006bc8:	4b06      	ldr	r3, [pc, #24]	@ (8006be4 <vTaskInternalSetTimeOutState+0x24>)
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006bd0:	4b05      	ldr	r3, [pc, #20]	@ (8006be8 <vTaskInternalSetTimeOutState+0x28>)
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	605a      	str	r2, [r3, #4]
}
 8006bd8:	bf00      	nop
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bc80      	pop	{r7}
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	20000de0 	.word	0x20000de0
 8006be8:	20000dcc 	.word	0x20000dcc

08006bec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b088      	sub	sp, #32
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d10b      	bne.n	8006c14 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c00:	f383 8811 	msr	BASEPRI, r3
 8006c04:	f3bf 8f6f 	isb	sy
 8006c08:	f3bf 8f4f 	dsb	sy
 8006c0c:	613b      	str	r3, [r7, #16]
}
 8006c0e:	bf00      	nop
 8006c10:	bf00      	nop
 8006c12:	e7fd      	b.n	8006c10 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d10b      	bne.n	8006c32 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c1e:	f383 8811 	msr	BASEPRI, r3
 8006c22:	f3bf 8f6f 	isb	sy
 8006c26:	f3bf 8f4f 	dsb	sy
 8006c2a:	60fb      	str	r3, [r7, #12]
}
 8006c2c:	bf00      	nop
 8006c2e:	bf00      	nop
 8006c30:	e7fd      	b.n	8006c2e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006c32:	f000 fefb 	bl	8007a2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006c36:	4b1d      	ldr	r3, [pc, #116]	@ (8006cac <xTaskCheckForTimeOut+0xc0>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	69ba      	ldr	r2, [r7, #24]
 8006c42:	1ad3      	subs	r3, r2, r3
 8006c44:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c4e:	d102      	bne.n	8006c56 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006c50:	2300      	movs	r3, #0
 8006c52:	61fb      	str	r3, [r7, #28]
 8006c54:	e023      	b.n	8006c9e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	4b15      	ldr	r3, [pc, #84]	@ (8006cb0 <xTaskCheckForTimeOut+0xc4>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d007      	beq.n	8006c72 <xTaskCheckForTimeOut+0x86>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	69ba      	ldr	r2, [r7, #24]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d302      	bcc.n	8006c72 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	61fb      	str	r3, [r7, #28]
 8006c70:	e015      	b.n	8006c9e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	697a      	ldr	r2, [r7, #20]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d20b      	bcs.n	8006c94 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	1ad2      	subs	r2, r2, r3
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f7ff ff99 	bl	8006bc0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	61fb      	str	r3, [r7, #28]
 8006c92:	e004      	b.n	8006c9e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	2200      	movs	r2, #0
 8006c98:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006c9e:	f000 fef5 	bl	8007a8c <vPortExitCritical>

	return xReturn;
 8006ca2:	69fb      	ldr	r3, [r7, #28]
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3720      	adds	r7, #32
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	20000dcc 	.word	0x20000dcc
 8006cb0:	20000de0 	.word	0x20000de0

08006cb4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006cb8:	4b03      	ldr	r3, [pc, #12]	@ (8006cc8 <vTaskMissedYield+0x14>)
 8006cba:	2201      	movs	r2, #1
 8006cbc:	601a      	str	r2, [r3, #0]
}
 8006cbe:	bf00      	nop
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bc80      	pop	{r7}
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop
 8006cc8:	20000ddc 	.word	0x20000ddc

08006ccc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006cd4:	f000 f852 	bl	8006d7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006cd8:	4b06      	ldr	r3, [pc, #24]	@ (8006cf4 <prvIdleTask+0x28>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d9f9      	bls.n	8006cd4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006ce0:	4b05      	ldr	r3, [pc, #20]	@ (8006cf8 <prvIdleTask+0x2c>)
 8006ce2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ce6:	601a      	str	r2, [r3, #0]
 8006ce8:	f3bf 8f4f 	dsb	sy
 8006cec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006cf0:	e7f0      	b.n	8006cd4 <prvIdleTask+0x8>
 8006cf2:	bf00      	nop
 8006cf4:	20000ccc 	.word	0x20000ccc
 8006cf8:	e000ed04 	.word	0xe000ed04

08006cfc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d02:	2300      	movs	r3, #0
 8006d04:	607b      	str	r3, [r7, #4]
 8006d06:	e00c      	b.n	8006d22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	4413      	add	r3, r2
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	4a12      	ldr	r2, [pc, #72]	@ (8006d5c <prvInitialiseTaskLists+0x60>)
 8006d14:	4413      	add	r3, r2
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7fe fccc 	bl	80056b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	3301      	adds	r3, #1
 8006d20:	607b      	str	r3, [r7, #4]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2b06      	cmp	r3, #6
 8006d26:	d9ef      	bls.n	8006d08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006d28:	480d      	ldr	r0, [pc, #52]	@ (8006d60 <prvInitialiseTaskLists+0x64>)
 8006d2a:	f7fe fcc3 	bl	80056b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006d2e:	480d      	ldr	r0, [pc, #52]	@ (8006d64 <prvInitialiseTaskLists+0x68>)
 8006d30:	f7fe fcc0 	bl	80056b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d34:	480c      	ldr	r0, [pc, #48]	@ (8006d68 <prvInitialiseTaskLists+0x6c>)
 8006d36:	f7fe fcbd 	bl	80056b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006d3a:	480c      	ldr	r0, [pc, #48]	@ (8006d6c <prvInitialiseTaskLists+0x70>)
 8006d3c:	f7fe fcba 	bl	80056b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006d40:	480b      	ldr	r0, [pc, #44]	@ (8006d70 <prvInitialiseTaskLists+0x74>)
 8006d42:	f7fe fcb7 	bl	80056b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006d46:	4b0b      	ldr	r3, [pc, #44]	@ (8006d74 <prvInitialiseTaskLists+0x78>)
 8006d48:	4a05      	ldr	r2, [pc, #20]	@ (8006d60 <prvInitialiseTaskLists+0x64>)
 8006d4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8006d78 <prvInitialiseTaskLists+0x7c>)
 8006d4e:	4a05      	ldr	r2, [pc, #20]	@ (8006d64 <prvInitialiseTaskLists+0x68>)
 8006d50:	601a      	str	r2, [r3, #0]
}
 8006d52:	bf00      	nop
 8006d54:	3708      	adds	r7, #8
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	20000ccc 	.word	0x20000ccc
 8006d60:	20000d58 	.word	0x20000d58
 8006d64:	20000d6c 	.word	0x20000d6c
 8006d68:	20000d88 	.word	0x20000d88
 8006d6c:	20000d9c 	.word	0x20000d9c
 8006d70:	20000db4 	.word	0x20000db4
 8006d74:	20000d80 	.word	0x20000d80
 8006d78:	20000d84 	.word	0x20000d84

08006d7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d82:	e019      	b.n	8006db8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006d84:	f000 fe52 	bl	8007a2c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d88:	4b10      	ldr	r3, [pc, #64]	@ (8006dcc <prvCheckTasksWaitingTermination+0x50>)
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	3304      	adds	r3, #4
 8006d94:	4618      	mov	r0, r3
 8006d96:	f7fe fd13 	bl	80057c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006dd0 <prvCheckTasksWaitingTermination+0x54>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	4a0b      	ldr	r2, [pc, #44]	@ (8006dd0 <prvCheckTasksWaitingTermination+0x54>)
 8006da2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006da4:	4b0b      	ldr	r3, [pc, #44]	@ (8006dd4 <prvCheckTasksWaitingTermination+0x58>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	3b01      	subs	r3, #1
 8006daa:	4a0a      	ldr	r2, [pc, #40]	@ (8006dd4 <prvCheckTasksWaitingTermination+0x58>)
 8006dac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006dae:	f000 fe6d 	bl	8007a8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f810 	bl	8006dd8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006db8:	4b06      	ldr	r3, [pc, #24]	@ (8006dd4 <prvCheckTasksWaitingTermination+0x58>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d1e1      	bne.n	8006d84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006dc0:	bf00      	nop
 8006dc2:	bf00      	nop
 8006dc4:	3708      	adds	r7, #8
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	20000d9c 	.word	0x20000d9c
 8006dd0:	20000dc8 	.word	0x20000dc8
 8006dd4:	20000db0 	.word	0x20000db0

08006dd8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	334c      	adds	r3, #76	@ 0x4c
 8006de4:	4618      	mov	r0, r3
 8006de6:	f001 f971 	bl	80080cc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d108      	bne.n	8006e06 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f000 ffe7 	bl	8007dcc <vPortFree>
				vPortFree( pxTCB );
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 ffe4 	bl	8007dcc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006e04:	e019      	b.n	8006e3a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d103      	bne.n	8006e18 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 ffdb 	bl	8007dcc <vPortFree>
	}
 8006e16:	e010      	b.n	8006e3a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d00b      	beq.n	8006e3a <prvDeleteTCB+0x62>
	__asm volatile
 8006e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e26:	f383 8811 	msr	BASEPRI, r3
 8006e2a:	f3bf 8f6f 	isb	sy
 8006e2e:	f3bf 8f4f 	dsb	sy
 8006e32:	60fb      	str	r3, [r7, #12]
}
 8006e34:	bf00      	nop
 8006e36:	bf00      	nop
 8006e38:	e7fd      	b.n	8006e36 <prvDeleteTCB+0x5e>
	}
 8006e3a:	bf00      	nop
 8006e3c:	3710      	adds	r7, #16
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
	...

08006e44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e4a:	4b0c      	ldr	r3, [pc, #48]	@ (8006e7c <prvResetNextTaskUnblockTime+0x38>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d104      	bne.n	8006e5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006e54:	4b0a      	ldr	r3, [pc, #40]	@ (8006e80 <prvResetNextTaskUnblockTime+0x3c>)
 8006e56:	f04f 32ff 	mov.w	r2, #4294967295
 8006e5a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006e5c:	e008      	b.n	8006e70 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e5e:	4b07      	ldr	r3, [pc, #28]	@ (8006e7c <prvResetNextTaskUnblockTime+0x38>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	4a04      	ldr	r2, [pc, #16]	@ (8006e80 <prvResetNextTaskUnblockTime+0x3c>)
 8006e6e:	6013      	str	r3, [r2, #0]
}
 8006e70:	bf00      	nop
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bc80      	pop	{r7}
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	20000d80 	.word	0x20000d80
 8006e80:	20000de8 	.word	0x20000de8

08006e84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8006eb8 <xTaskGetSchedulerState+0x34>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d102      	bne.n	8006e98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006e92:	2301      	movs	r3, #1
 8006e94:	607b      	str	r3, [r7, #4]
 8006e96:	e008      	b.n	8006eaa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e98:	4b08      	ldr	r3, [pc, #32]	@ (8006ebc <xTaskGetSchedulerState+0x38>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d102      	bne.n	8006ea6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006ea0:	2302      	movs	r3, #2
 8006ea2:	607b      	str	r3, [r7, #4]
 8006ea4:	e001      	b.n	8006eaa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006eaa:	687b      	ldr	r3, [r7, #4]
	}
 8006eac:	4618      	mov	r0, r3
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bc80      	pop	{r7}
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop
 8006eb8:	20000dd4 	.word	0x20000dd4
 8006ebc:	20000df0 	.word	0x20000df0

08006ec0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b086      	sub	sp, #24
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d070      	beq.n	8006fb8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006ed6:	4b3b      	ldr	r3, [pc, #236]	@ (8006fc4 <xTaskPriorityDisinherit+0x104>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	693a      	ldr	r2, [r7, #16]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d00b      	beq.n	8006ef8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee4:	f383 8811 	msr	BASEPRI, r3
 8006ee8:	f3bf 8f6f 	isb	sy
 8006eec:	f3bf 8f4f 	dsb	sy
 8006ef0:	60fb      	str	r3, [r7, #12]
}
 8006ef2:	bf00      	nop
 8006ef4:	bf00      	nop
 8006ef6:	e7fd      	b.n	8006ef4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d10b      	bne.n	8006f18 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f04:	f383 8811 	msr	BASEPRI, r3
 8006f08:	f3bf 8f6f 	isb	sy
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	60bb      	str	r3, [r7, #8]
}
 8006f12:	bf00      	nop
 8006f14:	bf00      	nop
 8006f16:	e7fd      	b.n	8006f14 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f1c:	1e5a      	subs	r2, r3, #1
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d044      	beq.n	8006fb8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d140      	bne.n	8006fb8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	3304      	adds	r3, #4
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7fe fc40 	bl	80057c0 <uxListRemove>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d115      	bne.n	8006f72 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f4a:	491f      	ldr	r1, [pc, #124]	@ (8006fc8 <xTaskPriorityDisinherit+0x108>)
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	4413      	add	r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	440b      	add	r3, r1
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d10a      	bne.n	8006f72 <xTaskPriorityDisinherit+0xb2>
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f60:	2201      	movs	r2, #1
 8006f62:	fa02 f303 	lsl.w	r3, r2, r3
 8006f66:	43da      	mvns	r2, r3
 8006f68:	4b18      	ldr	r3, [pc, #96]	@ (8006fcc <xTaskPriorityDisinherit+0x10c>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4013      	ands	r3, r2
 8006f6e:	4a17      	ldr	r2, [pc, #92]	@ (8006fcc <xTaskPriorityDisinherit+0x10c>)
 8006f70:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f7e:	f1c3 0207 	rsb	r2, r3, #7
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	409a      	lsls	r2, r3
 8006f8e:	4b0f      	ldr	r3, [pc, #60]	@ (8006fcc <xTaskPriorityDisinherit+0x10c>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	4a0d      	ldr	r2, [pc, #52]	@ (8006fcc <xTaskPriorityDisinherit+0x10c>)
 8006f96:	6013      	str	r3, [r2, #0]
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f9c:	4613      	mov	r3, r2
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	4413      	add	r3, r2
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4a08      	ldr	r2, [pc, #32]	@ (8006fc8 <xTaskPriorityDisinherit+0x108>)
 8006fa6:	441a      	add	r2, r3
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	3304      	adds	r3, #4
 8006fac:	4619      	mov	r1, r3
 8006fae:	4610      	mov	r0, r2
 8006fb0:	f7fe fbab 	bl	800570a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006fb8:	697b      	ldr	r3, [r7, #20]
	}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3718      	adds	r7, #24
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	20000cc8 	.word	0x20000cc8
 8006fc8:	20000ccc 	.word	0x20000ccc
 8006fcc:	20000dd0 	.word	0x20000dd0

08006fd0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006fda:	4b29      	ldr	r3, [pc, #164]	@ (8007080 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fe0:	4b28      	ldr	r3, [pc, #160]	@ (8007084 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	3304      	adds	r3, #4
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7fe fbea 	bl	80057c0 <uxListRemove>
 8006fec:	4603      	mov	r3, r0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d10b      	bne.n	800700a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006ff2:	4b24      	ldr	r3, [pc, #144]	@ (8007084 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8006ffe:	43da      	mvns	r2, r3
 8007000:	4b21      	ldr	r3, [pc, #132]	@ (8007088 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4013      	ands	r3, r2
 8007006:	4a20      	ldr	r2, [pc, #128]	@ (8007088 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007008:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007010:	d10a      	bne.n	8007028 <prvAddCurrentTaskToDelayedList+0x58>
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d007      	beq.n	8007028 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007018:	4b1a      	ldr	r3, [pc, #104]	@ (8007084 <prvAddCurrentTaskToDelayedList+0xb4>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	3304      	adds	r3, #4
 800701e:	4619      	mov	r1, r3
 8007020:	481a      	ldr	r0, [pc, #104]	@ (800708c <prvAddCurrentTaskToDelayedList+0xbc>)
 8007022:	f7fe fb72 	bl	800570a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007026:	e026      	b.n	8007076 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4413      	add	r3, r2
 800702e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007030:	4b14      	ldr	r3, [pc, #80]	@ (8007084 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68ba      	ldr	r2, [r7, #8]
 8007036:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007038:	68ba      	ldr	r2, [r7, #8]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	429a      	cmp	r2, r3
 800703e:	d209      	bcs.n	8007054 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007040:	4b13      	ldr	r3, [pc, #76]	@ (8007090 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	4b0f      	ldr	r3, [pc, #60]	@ (8007084 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	3304      	adds	r3, #4
 800704a:	4619      	mov	r1, r3
 800704c:	4610      	mov	r0, r2
 800704e:	f7fe fb7f 	bl	8005750 <vListInsert>
}
 8007052:	e010      	b.n	8007076 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007054:	4b0f      	ldr	r3, [pc, #60]	@ (8007094 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	4b0a      	ldr	r3, [pc, #40]	@ (8007084 <prvAddCurrentTaskToDelayedList+0xb4>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	3304      	adds	r3, #4
 800705e:	4619      	mov	r1, r3
 8007060:	4610      	mov	r0, r2
 8007062:	f7fe fb75 	bl	8005750 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007066:	4b0c      	ldr	r3, [pc, #48]	@ (8007098 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68ba      	ldr	r2, [r7, #8]
 800706c:	429a      	cmp	r2, r3
 800706e:	d202      	bcs.n	8007076 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007070:	4a09      	ldr	r2, [pc, #36]	@ (8007098 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	6013      	str	r3, [r2, #0]
}
 8007076:	bf00      	nop
 8007078:	3710      	adds	r7, #16
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	20000dcc 	.word	0x20000dcc
 8007084:	20000cc8 	.word	0x20000cc8
 8007088:	20000dd0 	.word	0x20000dd0
 800708c:	20000db4 	.word	0x20000db4
 8007090:	20000d84 	.word	0x20000d84
 8007094:	20000d80 	.word	0x20000d80
 8007098:	20000de8 	.word	0x20000de8

0800709c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b08a      	sub	sp, #40	@ 0x28
 80070a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80070a2:	2300      	movs	r3, #0
 80070a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80070a6:	f000 fb93 	bl	80077d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80070aa:	4b1d      	ldr	r3, [pc, #116]	@ (8007120 <xTimerCreateTimerTask+0x84>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d021      	beq.n	80070f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80070b2:	2300      	movs	r3, #0
 80070b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80070b6:	2300      	movs	r3, #0
 80070b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80070ba:	1d3a      	adds	r2, r7, #4
 80070bc:	f107 0108 	add.w	r1, r7, #8
 80070c0:	f107 030c 	add.w	r3, r7, #12
 80070c4:	4618      	mov	r0, r3
 80070c6:	f7f9 fca5 	bl	8000a14 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80070ca:	6879      	ldr	r1, [r7, #4]
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	9202      	str	r2, [sp, #8]
 80070d2:	9301      	str	r3, [sp, #4]
 80070d4:	2302      	movs	r3, #2
 80070d6:	9300      	str	r3, [sp, #0]
 80070d8:	2300      	movs	r3, #0
 80070da:	460a      	mov	r2, r1
 80070dc:	4911      	ldr	r1, [pc, #68]	@ (8007124 <xTimerCreateTimerTask+0x88>)
 80070de:	4812      	ldr	r0, [pc, #72]	@ (8007128 <xTimerCreateTimerTask+0x8c>)
 80070e0:	f7ff f88c 	bl	80061fc <xTaskCreateStatic>
 80070e4:	4603      	mov	r3, r0
 80070e6:	4a11      	ldr	r2, [pc, #68]	@ (800712c <xTimerCreateTimerTask+0x90>)
 80070e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80070ea:	4b10      	ldr	r3, [pc, #64]	@ (800712c <xTimerCreateTimerTask+0x90>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d001      	beq.n	80070f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80070f2:	2301      	movs	r3, #1
 80070f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10b      	bne.n	8007114 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80070fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007100:	f383 8811 	msr	BASEPRI, r3
 8007104:	f3bf 8f6f 	isb	sy
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	613b      	str	r3, [r7, #16]
}
 800710e:	bf00      	nop
 8007110:	bf00      	nop
 8007112:	e7fd      	b.n	8007110 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007114:	697b      	ldr	r3, [r7, #20]
}
 8007116:	4618      	mov	r0, r3
 8007118:	3718      	adds	r7, #24
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	20000e24 	.word	0x20000e24
 8007124:	0800931c 	.word	0x0800931c
 8007128:	080073a5 	.word	0x080073a5
 800712c:	20000e28 	.word	0x20000e28

08007130 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007130:	b580      	push	{r7, lr}
 8007132:	b088      	sub	sp, #32
 8007134:	af02      	add	r7, sp, #8
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	607a      	str	r2, [r7, #4]
 800713c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800713e:	2028      	movs	r0, #40	@ 0x28
 8007140:	f000 fd76 	bl	8007c30 <pvPortMalloc>
 8007144:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00d      	beq.n	8007168 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	9301      	str	r3, [sp, #4]
 8007158:	6a3b      	ldr	r3, [r7, #32]
 800715a:	9300      	str	r3, [sp, #0]
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	68b9      	ldr	r1, [r7, #8]
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	f000 f845 	bl	80071f2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007168:	697b      	ldr	r3, [r7, #20]
	}
 800716a:	4618      	mov	r0, r3
 800716c:	3718      	adds	r7, #24
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}

08007172 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8007172:	b580      	push	{r7, lr}
 8007174:	b08a      	sub	sp, #40	@ 0x28
 8007176:	af02      	add	r7, sp, #8
 8007178:	60f8      	str	r0, [r7, #12]
 800717a:	60b9      	str	r1, [r7, #8]
 800717c:	607a      	str	r2, [r7, #4]
 800717e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8007180:	2328      	movs	r3, #40	@ 0x28
 8007182:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	2b28      	cmp	r3, #40	@ 0x28
 8007188:	d00b      	beq.n	80071a2 <xTimerCreateStatic+0x30>
	__asm volatile
 800718a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800718e:	f383 8811 	msr	BASEPRI, r3
 8007192:	f3bf 8f6f 	isb	sy
 8007196:	f3bf 8f4f 	dsb	sy
 800719a:	61bb      	str	r3, [r7, #24]
}
 800719c:	bf00      	nop
 800719e:	bf00      	nop
 80071a0:	e7fd      	b.n	800719e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80071a2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80071a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d10b      	bne.n	80071c2 <xTimerCreateStatic+0x50>
	__asm volatile
 80071aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ae:	f383 8811 	msr	BASEPRI, r3
 80071b2:	f3bf 8f6f 	isb	sy
 80071b6:	f3bf 8f4f 	dsb	sy
 80071ba:	617b      	str	r3, [r7, #20]
}
 80071bc:	bf00      	nop
 80071be:	bf00      	nop
 80071c0:	e7fd      	b.n	80071be <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80071c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071c4:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d00d      	beq.n	80071e8 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	2202      	movs	r2, #2
 80071d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	9301      	str	r3, [sp, #4]
 80071d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071da:	9300      	str	r3, [sp, #0]
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	68b9      	ldr	r1, [r7, #8]
 80071e2:	68f8      	ldr	r0, [r7, #12]
 80071e4:	f000 f805 	bl	80071f2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80071e8:	69fb      	ldr	r3, [r7, #28]
	}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3720      	adds	r7, #32
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}

080071f2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80071f2:	b580      	push	{r7, lr}
 80071f4:	b086      	sub	sp, #24
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	60f8      	str	r0, [r7, #12]
 80071fa:	60b9      	str	r1, [r7, #8]
 80071fc:	607a      	str	r2, [r7, #4]
 80071fe:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d10b      	bne.n	800721e <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8007206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800720a:	f383 8811 	msr	BASEPRI, r3
 800720e:	f3bf 8f6f 	isb	sy
 8007212:	f3bf 8f4f 	dsb	sy
 8007216:	617b      	str	r3, [r7, #20]
}
 8007218:	bf00      	nop
 800721a:	bf00      	nop
 800721c:	e7fd      	b.n	800721a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800721e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007220:	2b00      	cmp	r3, #0
 8007222:	d01e      	beq.n	8007262 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007224:	f000 fad4 	bl	80077d0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800722e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007230:	68ba      	ldr	r2, [r7, #8]
 8007232:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8007234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007236:	683a      	ldr	r2, [r7, #0]
 8007238:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800723a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800723c:	6a3a      	ldr	r2, [r7, #32]
 800723e:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007242:	3304      	adds	r3, #4
 8007244:	4618      	mov	r0, r3
 8007246:	f7fe fa54 	bl	80056f2 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d008      	beq.n	8007262 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8007250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007252:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007256:	f043 0304 	orr.w	r3, r3, #4
 800725a:	b2da      	uxtb	r2, r3
 800725c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800725e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8007262:	bf00      	nop
 8007264:	3718      	adds	r7, #24
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
	...

0800726c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b08a      	sub	sp, #40	@ 0x28
 8007270:	af00      	add	r7, sp, #0
 8007272:	60f8      	str	r0, [r7, #12]
 8007274:	60b9      	str	r1, [r7, #8]
 8007276:	607a      	str	r2, [r7, #4]
 8007278:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800727a:	2300      	movs	r3, #0
 800727c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d10b      	bne.n	800729c <xTimerGenericCommand+0x30>
	__asm volatile
 8007284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007288:	f383 8811 	msr	BASEPRI, r3
 800728c:	f3bf 8f6f 	isb	sy
 8007290:	f3bf 8f4f 	dsb	sy
 8007294:	623b      	str	r3, [r7, #32]
}
 8007296:	bf00      	nop
 8007298:	bf00      	nop
 800729a:	e7fd      	b.n	8007298 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800729c:	4b19      	ldr	r3, [pc, #100]	@ (8007304 <xTimerGenericCommand+0x98>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d02a      	beq.n	80072fa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	2b05      	cmp	r3, #5
 80072b4:	dc18      	bgt.n	80072e8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80072b6:	f7ff fde5 	bl	8006e84 <xTaskGetSchedulerState>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d109      	bne.n	80072d4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80072c0:	4b10      	ldr	r3, [pc, #64]	@ (8007304 <xTimerGenericCommand+0x98>)
 80072c2:	6818      	ldr	r0, [r3, #0]
 80072c4:	f107 0114 	add.w	r1, r7, #20
 80072c8:	2300      	movs	r3, #0
 80072ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072cc:	f7fe fba8 	bl	8005a20 <xQueueGenericSend>
 80072d0:	6278      	str	r0, [r7, #36]	@ 0x24
 80072d2:	e012      	b.n	80072fa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80072d4:	4b0b      	ldr	r3, [pc, #44]	@ (8007304 <xTimerGenericCommand+0x98>)
 80072d6:	6818      	ldr	r0, [r3, #0]
 80072d8:	f107 0114 	add.w	r1, r7, #20
 80072dc:	2300      	movs	r3, #0
 80072de:	2200      	movs	r2, #0
 80072e0:	f7fe fb9e 	bl	8005a20 <xQueueGenericSend>
 80072e4:	6278      	str	r0, [r7, #36]	@ 0x24
 80072e6:	e008      	b.n	80072fa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80072e8:	4b06      	ldr	r3, [pc, #24]	@ (8007304 <xTimerGenericCommand+0x98>)
 80072ea:	6818      	ldr	r0, [r3, #0]
 80072ec:	f107 0114 	add.w	r1, r7, #20
 80072f0:	2300      	movs	r3, #0
 80072f2:	683a      	ldr	r2, [r7, #0]
 80072f4:	f7fe fc96 	bl	8005c24 <xQueueGenericSendFromISR>
 80072f8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80072fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3728      	adds	r7, #40	@ 0x28
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	20000e24 	.word	0x20000e24

08007308 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b088      	sub	sp, #32
 800730c:	af02      	add	r7, sp, #8
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007312:	4b23      	ldr	r3, [pc, #140]	@ (80073a0 <prvProcessExpiredTimer+0x98>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	3304      	adds	r3, #4
 8007320:	4618      	mov	r0, r3
 8007322:	f7fe fa4d 	bl	80057c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800732c:	f003 0304 	and.w	r3, r3, #4
 8007330:	2b00      	cmp	r3, #0
 8007332:	d023      	beq.n	800737c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	699a      	ldr	r2, [r3, #24]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	18d1      	adds	r1, r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	683a      	ldr	r2, [r7, #0]
 8007340:	6978      	ldr	r0, [r7, #20]
 8007342:	f000 f8d3 	bl	80074ec <prvInsertTimerInActiveList>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d020      	beq.n	800738e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800734c:	2300      	movs	r3, #0
 800734e:	9300      	str	r3, [sp, #0]
 8007350:	2300      	movs	r3, #0
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	2100      	movs	r1, #0
 8007356:	6978      	ldr	r0, [r7, #20]
 8007358:	f7ff ff88 	bl	800726c <xTimerGenericCommand>
 800735c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d114      	bne.n	800738e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007368:	f383 8811 	msr	BASEPRI, r3
 800736c:	f3bf 8f6f 	isb	sy
 8007370:	f3bf 8f4f 	dsb	sy
 8007374:	60fb      	str	r3, [r7, #12]
}
 8007376:	bf00      	nop
 8007378:	bf00      	nop
 800737a:	e7fd      	b.n	8007378 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007382:	f023 0301 	bic.w	r3, r3, #1
 8007386:	b2da      	uxtb	r2, r3
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	6a1b      	ldr	r3, [r3, #32]
 8007392:	6978      	ldr	r0, [r7, #20]
 8007394:	4798      	blx	r3
}
 8007396:	bf00      	nop
 8007398:	3718      	adds	r7, #24
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	20000e1c 	.word	0x20000e1c

080073a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80073ac:	f107 0308 	add.w	r3, r7, #8
 80073b0:	4618      	mov	r0, r3
 80073b2:	f000 f859 	bl	8007468 <prvGetNextExpireTime>
 80073b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	4619      	mov	r1, r3
 80073bc:	68f8      	ldr	r0, [r7, #12]
 80073be:	f000 f805 	bl	80073cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80073c2:	f000 f8d5 	bl	8007570 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80073c6:	bf00      	nop
 80073c8:	e7f0      	b.n	80073ac <prvTimerTask+0x8>
	...

080073cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80073d6:	f7ff f967 	bl	80066a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80073da:	f107 0308 	add.w	r3, r7, #8
 80073de:	4618      	mov	r0, r3
 80073e0:	f000 f864 	bl	80074ac <prvSampleTimeNow>
 80073e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d130      	bne.n	800744e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d10a      	bne.n	8007408 <prvProcessTimerOrBlockTask+0x3c>
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d806      	bhi.n	8007408 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80073fa:	f7ff f963 	bl	80066c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80073fe:	68f9      	ldr	r1, [r7, #12]
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f7ff ff81 	bl	8007308 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007406:	e024      	b.n	8007452 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d008      	beq.n	8007420 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800740e:	4b13      	ldr	r3, [pc, #76]	@ (800745c <prvProcessTimerOrBlockTask+0x90>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d101      	bne.n	800741c <prvProcessTimerOrBlockTask+0x50>
 8007418:	2301      	movs	r3, #1
 800741a:	e000      	b.n	800741e <prvProcessTimerOrBlockTask+0x52>
 800741c:	2300      	movs	r3, #0
 800741e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007420:	4b0f      	ldr	r3, [pc, #60]	@ (8007460 <prvProcessTimerOrBlockTask+0x94>)
 8007422:	6818      	ldr	r0, [r3, #0]
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	1ad3      	subs	r3, r2, r3
 800742a:	683a      	ldr	r2, [r7, #0]
 800742c:	4619      	mov	r1, r3
 800742e:	f7fe feb1 	bl	8006194 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007432:	f7ff f947 	bl	80066c4 <xTaskResumeAll>
 8007436:	4603      	mov	r3, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	d10a      	bne.n	8007452 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800743c:	4b09      	ldr	r3, [pc, #36]	@ (8007464 <prvProcessTimerOrBlockTask+0x98>)
 800743e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007442:	601a      	str	r2, [r3, #0]
 8007444:	f3bf 8f4f 	dsb	sy
 8007448:	f3bf 8f6f 	isb	sy
}
 800744c:	e001      	b.n	8007452 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800744e:	f7ff f939 	bl	80066c4 <xTaskResumeAll>
}
 8007452:	bf00      	nop
 8007454:	3710      	adds	r7, #16
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	20000e20 	.word	0x20000e20
 8007460:	20000e24 	.word	0x20000e24
 8007464:	e000ed04 	.word	0xe000ed04

08007468 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007468:	b480      	push	{r7}
 800746a:	b085      	sub	sp, #20
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007470:	4b0d      	ldr	r3, [pc, #52]	@ (80074a8 <prvGetNextExpireTime+0x40>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d101      	bne.n	800747e <prvGetNextExpireTime+0x16>
 800747a:	2201      	movs	r2, #1
 800747c:	e000      	b.n	8007480 <prvGetNextExpireTime+0x18>
 800747e:	2200      	movs	r2, #0
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d105      	bne.n	8007498 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800748c:	4b06      	ldr	r3, [pc, #24]	@ (80074a8 <prvGetNextExpireTime+0x40>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	60fb      	str	r3, [r7, #12]
 8007496:	e001      	b.n	800749c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007498:	2300      	movs	r3, #0
 800749a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800749c:	68fb      	ldr	r3, [r7, #12]
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3714      	adds	r7, #20
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bc80      	pop	{r7}
 80074a6:	4770      	bx	lr
 80074a8:	20000e1c 	.word	0x20000e1c

080074ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80074b4:	f7ff f9a4 	bl	8006800 <xTaskGetTickCount>
 80074b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80074ba:	4b0b      	ldr	r3, [pc, #44]	@ (80074e8 <prvSampleTimeNow+0x3c>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d205      	bcs.n	80074d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80074c4:	f000 f91e 	bl	8007704 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	601a      	str	r2, [r3, #0]
 80074ce:	e002      	b.n	80074d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80074d6:	4a04      	ldr	r2, [pc, #16]	@ (80074e8 <prvSampleTimeNow+0x3c>)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80074dc:	68fb      	ldr	r3, [r7, #12]
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	20000e2c 	.word	0x20000e2c

080074ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b086      	sub	sp, #24
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]
 80074f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80074fa:	2300      	movs	r3, #0
 80074fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	68ba      	ldr	r2, [r7, #8]
 8007502:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800750a:	68ba      	ldr	r2, [r7, #8]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	429a      	cmp	r2, r3
 8007510:	d812      	bhi.n	8007538 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	1ad2      	subs	r2, r2, r3
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	699b      	ldr	r3, [r3, #24]
 800751c:	429a      	cmp	r2, r3
 800751e:	d302      	bcc.n	8007526 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007520:	2301      	movs	r3, #1
 8007522:	617b      	str	r3, [r7, #20]
 8007524:	e01b      	b.n	800755e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007526:	4b10      	ldr	r3, [pc, #64]	@ (8007568 <prvInsertTimerInActiveList+0x7c>)
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	3304      	adds	r3, #4
 800752e:	4619      	mov	r1, r3
 8007530:	4610      	mov	r0, r2
 8007532:	f7fe f90d 	bl	8005750 <vListInsert>
 8007536:	e012      	b.n	800755e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	429a      	cmp	r2, r3
 800753e:	d206      	bcs.n	800754e <prvInsertTimerInActiveList+0x62>
 8007540:	68ba      	ldr	r2, [r7, #8]
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	429a      	cmp	r2, r3
 8007546:	d302      	bcc.n	800754e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007548:	2301      	movs	r3, #1
 800754a:	617b      	str	r3, [r7, #20]
 800754c:	e007      	b.n	800755e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800754e:	4b07      	ldr	r3, [pc, #28]	@ (800756c <prvInsertTimerInActiveList+0x80>)
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	3304      	adds	r3, #4
 8007556:	4619      	mov	r1, r3
 8007558:	4610      	mov	r0, r2
 800755a:	f7fe f8f9 	bl	8005750 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800755e:	697b      	ldr	r3, [r7, #20]
}
 8007560:	4618      	mov	r0, r3
 8007562:	3718      	adds	r7, #24
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	20000e20 	.word	0x20000e20
 800756c:	20000e1c 	.word	0x20000e1c

08007570 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b08c      	sub	sp, #48	@ 0x30
 8007574:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007576:	e0b2      	b.n	80076de <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	2b00      	cmp	r3, #0
 800757c:	f2c0 80af 	blt.w	80076de <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007586:	695b      	ldr	r3, [r3, #20]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d004      	beq.n	8007596 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800758c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800758e:	3304      	adds	r3, #4
 8007590:	4618      	mov	r0, r3
 8007592:	f7fe f915 	bl	80057c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007596:	1d3b      	adds	r3, r7, #4
 8007598:	4618      	mov	r0, r3
 800759a:	f7ff ff87 	bl	80074ac <prvSampleTimeNow>
 800759e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	2b09      	cmp	r3, #9
 80075a4:	f200 8098 	bhi.w	80076d8 <prvProcessReceivedCommands+0x168>
 80075a8:	a201      	add	r2, pc, #4	@ (adr r2, 80075b0 <prvProcessReceivedCommands+0x40>)
 80075aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ae:	bf00      	nop
 80075b0:	080075d9 	.word	0x080075d9
 80075b4:	080075d9 	.word	0x080075d9
 80075b8:	080075d9 	.word	0x080075d9
 80075bc:	0800764f 	.word	0x0800764f
 80075c0:	08007663 	.word	0x08007663
 80075c4:	080076af 	.word	0x080076af
 80075c8:	080075d9 	.word	0x080075d9
 80075cc:	080075d9 	.word	0x080075d9
 80075d0:	0800764f 	.word	0x0800764f
 80075d4:	08007663 	.word	0x08007663
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80075d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075da:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80075de:	f043 0301 	orr.w	r3, r3, #1
 80075e2:	b2da      	uxtb	r2, r3
 80075e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80075ea:	68fa      	ldr	r2, [r7, #12]
 80075ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ee:	699b      	ldr	r3, [r3, #24]
 80075f0:	18d1      	adds	r1, r2, r3
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6a3a      	ldr	r2, [r7, #32]
 80075f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80075f8:	f7ff ff78 	bl	80074ec <prvInsertTimerInActiveList>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d06c      	beq.n	80076dc <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007604:	6a1b      	ldr	r3, [r3, #32]
 8007606:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007608:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800760a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007610:	f003 0304 	and.w	r3, r3, #4
 8007614:	2b00      	cmp	r3, #0
 8007616:	d061      	beq.n	80076dc <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800761c:	699b      	ldr	r3, [r3, #24]
 800761e:	441a      	add	r2, r3
 8007620:	2300      	movs	r3, #0
 8007622:	9300      	str	r3, [sp, #0]
 8007624:	2300      	movs	r3, #0
 8007626:	2100      	movs	r1, #0
 8007628:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800762a:	f7ff fe1f 	bl	800726c <xTimerGenericCommand>
 800762e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d152      	bne.n	80076dc <prvProcessReceivedCommands+0x16c>
	__asm volatile
 8007636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800763a:	f383 8811 	msr	BASEPRI, r3
 800763e:	f3bf 8f6f 	isb	sy
 8007642:	f3bf 8f4f 	dsb	sy
 8007646:	61bb      	str	r3, [r7, #24]
}
 8007648:	bf00      	nop
 800764a:	bf00      	nop
 800764c:	e7fd      	b.n	800764a <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800764e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007650:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007654:	f023 0301 	bic.w	r3, r3, #1
 8007658:	b2da      	uxtb	r2, r3
 800765a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8007660:	e03d      	b.n	80076de <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007664:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007668:	f043 0301 	orr.w	r3, r3, #1
 800766c:	b2da      	uxtb	r2, r3
 800766e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007670:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007678:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800767a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800767c:	699b      	ldr	r3, [r3, #24]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d10b      	bne.n	800769a <prvProcessReceivedCommands+0x12a>
	__asm volatile
 8007682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007686:	f383 8811 	msr	BASEPRI, r3
 800768a:	f3bf 8f6f 	isb	sy
 800768e:	f3bf 8f4f 	dsb	sy
 8007692:	617b      	str	r3, [r7, #20]
}
 8007694:	bf00      	nop
 8007696:	bf00      	nop
 8007698:	e7fd      	b.n	8007696 <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800769a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800769c:	699a      	ldr	r2, [r3, #24]
 800769e:	6a3b      	ldr	r3, [r7, #32]
 80076a0:	18d1      	adds	r1, r2, r3
 80076a2:	6a3b      	ldr	r3, [r7, #32]
 80076a4:	6a3a      	ldr	r2, [r7, #32]
 80076a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80076a8:	f7ff ff20 	bl	80074ec <prvInsertTimerInActiveList>
					break;
 80076ac:	e017      	b.n	80076de <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80076ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80076b4:	f003 0302 	and.w	r3, r3, #2
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d103      	bne.n	80076c4 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 80076bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80076be:	f000 fb85 	bl	8007dcc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80076c2:	e00c      	b.n	80076de <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80076c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80076ca:	f023 0301 	bic.w	r3, r3, #1
 80076ce:	b2da      	uxtb	r2, r3
 80076d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 80076d6:	e002      	b.n	80076de <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 80076d8:	bf00      	nop
 80076da:	e000      	b.n	80076de <prvProcessReceivedCommands+0x16e>
					break;
 80076dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80076de:	4b08      	ldr	r3, [pc, #32]	@ (8007700 <prvProcessReceivedCommands+0x190>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f107 0108 	add.w	r1, r7, #8
 80076e6:	2200      	movs	r2, #0
 80076e8:	4618      	mov	r0, r3
 80076ea:	f7fe fb39 	bl	8005d60 <xQueueReceive>
 80076ee:	4603      	mov	r3, r0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	f47f af41 	bne.w	8007578 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80076f6:	bf00      	nop
 80076f8:	bf00      	nop
 80076fa:	3728      	adds	r7, #40	@ 0x28
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	20000e24 	.word	0x20000e24

08007704 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b088      	sub	sp, #32
 8007708:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800770a:	e049      	b.n	80077a0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800770c:	4b2e      	ldr	r3, [pc, #184]	@ (80077c8 <prvSwitchTimerLists+0xc4>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007716:	4b2c      	ldr	r3, [pc, #176]	@ (80077c8 <prvSwitchTimerLists+0xc4>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	3304      	adds	r3, #4
 8007724:	4618      	mov	r0, r3
 8007726:	f7fe f84b 	bl	80057c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6a1b      	ldr	r3, [r3, #32]
 800772e:	68f8      	ldr	r0, [r7, #12]
 8007730:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007738:	f003 0304 	and.w	r3, r3, #4
 800773c:	2b00      	cmp	r3, #0
 800773e:	d02f      	beq.n	80077a0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	699b      	ldr	r3, [r3, #24]
 8007744:	693a      	ldr	r2, [r7, #16]
 8007746:	4413      	add	r3, r2
 8007748:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	429a      	cmp	r2, r3
 8007750:	d90e      	bls.n	8007770 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	68ba      	ldr	r2, [r7, #8]
 8007756:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800775e:	4b1a      	ldr	r3, [pc, #104]	@ (80077c8 <prvSwitchTimerLists+0xc4>)
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	3304      	adds	r3, #4
 8007766:	4619      	mov	r1, r3
 8007768:	4610      	mov	r0, r2
 800776a:	f7fd fff1 	bl	8005750 <vListInsert>
 800776e:	e017      	b.n	80077a0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007770:	2300      	movs	r3, #0
 8007772:	9300      	str	r3, [sp, #0]
 8007774:	2300      	movs	r3, #0
 8007776:	693a      	ldr	r2, [r7, #16]
 8007778:	2100      	movs	r1, #0
 800777a:	68f8      	ldr	r0, [r7, #12]
 800777c:	f7ff fd76 	bl	800726c <xTimerGenericCommand>
 8007780:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d10b      	bne.n	80077a0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800778c:	f383 8811 	msr	BASEPRI, r3
 8007790:	f3bf 8f6f 	isb	sy
 8007794:	f3bf 8f4f 	dsb	sy
 8007798:	603b      	str	r3, [r7, #0]
}
 800779a:	bf00      	nop
 800779c:	bf00      	nop
 800779e:	e7fd      	b.n	800779c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80077a0:	4b09      	ldr	r3, [pc, #36]	@ (80077c8 <prvSwitchTimerLists+0xc4>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d1b0      	bne.n	800770c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80077aa:	4b07      	ldr	r3, [pc, #28]	@ (80077c8 <prvSwitchTimerLists+0xc4>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80077b0:	4b06      	ldr	r3, [pc, #24]	@ (80077cc <prvSwitchTimerLists+0xc8>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a04      	ldr	r2, [pc, #16]	@ (80077c8 <prvSwitchTimerLists+0xc4>)
 80077b6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80077b8:	4a04      	ldr	r2, [pc, #16]	@ (80077cc <prvSwitchTimerLists+0xc8>)
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	6013      	str	r3, [r2, #0]
}
 80077be:	bf00      	nop
 80077c0:	3718      	adds	r7, #24
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	20000e1c 	.word	0x20000e1c
 80077cc:	20000e20 	.word	0x20000e20

080077d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80077d6:	f000 f929 	bl	8007a2c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80077da:	4b15      	ldr	r3, [pc, #84]	@ (8007830 <prvCheckForValidListAndQueue+0x60>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d120      	bne.n	8007824 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80077e2:	4814      	ldr	r0, [pc, #80]	@ (8007834 <prvCheckForValidListAndQueue+0x64>)
 80077e4:	f7fd ff66 	bl	80056b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80077e8:	4813      	ldr	r0, [pc, #76]	@ (8007838 <prvCheckForValidListAndQueue+0x68>)
 80077ea:	f7fd ff63 	bl	80056b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80077ee:	4b13      	ldr	r3, [pc, #76]	@ (800783c <prvCheckForValidListAndQueue+0x6c>)
 80077f0:	4a10      	ldr	r2, [pc, #64]	@ (8007834 <prvCheckForValidListAndQueue+0x64>)
 80077f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80077f4:	4b12      	ldr	r3, [pc, #72]	@ (8007840 <prvCheckForValidListAndQueue+0x70>)
 80077f6:	4a10      	ldr	r2, [pc, #64]	@ (8007838 <prvCheckForValidListAndQueue+0x68>)
 80077f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80077fa:	2300      	movs	r3, #0
 80077fc:	9300      	str	r3, [sp, #0]
 80077fe:	4b11      	ldr	r3, [pc, #68]	@ (8007844 <prvCheckForValidListAndQueue+0x74>)
 8007800:	4a11      	ldr	r2, [pc, #68]	@ (8007848 <prvCheckForValidListAndQueue+0x78>)
 8007802:	210c      	movs	r1, #12
 8007804:	200a      	movs	r0, #10
 8007806:	f7fe f86f 	bl	80058e8 <xQueueGenericCreateStatic>
 800780a:	4603      	mov	r3, r0
 800780c:	4a08      	ldr	r2, [pc, #32]	@ (8007830 <prvCheckForValidListAndQueue+0x60>)
 800780e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007810:	4b07      	ldr	r3, [pc, #28]	@ (8007830 <prvCheckForValidListAndQueue+0x60>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d005      	beq.n	8007824 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007818:	4b05      	ldr	r3, [pc, #20]	@ (8007830 <prvCheckForValidListAndQueue+0x60>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	490b      	ldr	r1, [pc, #44]	@ (800784c <prvCheckForValidListAndQueue+0x7c>)
 800781e:	4618      	mov	r0, r3
 8007820:	f7fe fc90 	bl	8006144 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007824:	f000 f932 	bl	8007a8c <vPortExitCritical>
}
 8007828:	bf00      	nop
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	20000e24 	.word	0x20000e24
 8007834:	20000df4 	.word	0x20000df4
 8007838:	20000e08 	.word	0x20000e08
 800783c:	20000e1c 	.word	0x20000e1c
 8007840:	20000e20 	.word	0x20000e20
 8007844:	20000ea8 	.word	0x20000ea8
 8007848:	20000e30 	.word	0x20000e30
 800784c:	08009324 	.word	0x08009324

08007850 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007850:	b480      	push	{r7}
 8007852:	b085      	sub	sp, #20
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	3b04      	subs	r3, #4
 8007860:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007868:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	3b04      	subs	r3, #4
 800786e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	f023 0201 	bic.w	r2, r3, #1
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	3b04      	subs	r3, #4
 800787e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007880:	4a08      	ldr	r2, [pc, #32]	@ (80078a4 <pxPortInitialiseStack+0x54>)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	3b14      	subs	r3, #20
 800788a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	3b20      	subs	r3, #32
 8007896:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007898:	68fb      	ldr	r3, [r7, #12]
}
 800789a:	4618      	mov	r0, r3
 800789c:	3714      	adds	r7, #20
 800789e:	46bd      	mov	sp, r7
 80078a0:	bc80      	pop	{r7}
 80078a2:	4770      	bx	lr
 80078a4:	080078a9 	.word	0x080078a9

080078a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80078a8:	b480      	push	{r7}
 80078aa:	b085      	sub	sp, #20
 80078ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80078ae:	2300      	movs	r3, #0
 80078b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80078b2:	4b12      	ldr	r3, [pc, #72]	@ (80078fc <prvTaskExitError+0x54>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ba:	d00b      	beq.n	80078d4 <prvTaskExitError+0x2c>
	__asm volatile
 80078bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c0:	f383 8811 	msr	BASEPRI, r3
 80078c4:	f3bf 8f6f 	isb	sy
 80078c8:	f3bf 8f4f 	dsb	sy
 80078cc:	60fb      	str	r3, [r7, #12]
}
 80078ce:	bf00      	nop
 80078d0:	bf00      	nop
 80078d2:	e7fd      	b.n	80078d0 <prvTaskExitError+0x28>
	__asm volatile
 80078d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d8:	f383 8811 	msr	BASEPRI, r3
 80078dc:	f3bf 8f6f 	isb	sy
 80078e0:	f3bf 8f4f 	dsb	sy
 80078e4:	60bb      	str	r3, [r7, #8]
}
 80078e6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80078e8:	bf00      	nop
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d0fc      	beq.n	80078ea <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80078f0:	bf00      	nop
 80078f2:	bf00      	nop
 80078f4:	3714      	adds	r7, #20
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bc80      	pop	{r7}
 80078fa:	4770      	bx	lr
 80078fc:	2000014c 	.word	0x2000014c

08007900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007900:	4b07      	ldr	r3, [pc, #28]	@ (8007920 <pxCurrentTCBConst2>)
 8007902:	6819      	ldr	r1, [r3, #0]
 8007904:	6808      	ldr	r0, [r1, #0]
 8007906:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800790a:	f380 8809 	msr	PSP, r0
 800790e:	f3bf 8f6f 	isb	sy
 8007912:	f04f 0000 	mov.w	r0, #0
 8007916:	f380 8811 	msr	BASEPRI, r0
 800791a:	f04e 0e0d 	orr.w	lr, lr, #13
 800791e:	4770      	bx	lr

08007920 <pxCurrentTCBConst2>:
 8007920:	20000cc8 	.word	0x20000cc8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007924:	bf00      	nop
 8007926:	bf00      	nop

08007928 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007928:	4806      	ldr	r0, [pc, #24]	@ (8007944 <prvPortStartFirstTask+0x1c>)
 800792a:	6800      	ldr	r0, [r0, #0]
 800792c:	6800      	ldr	r0, [r0, #0]
 800792e:	f380 8808 	msr	MSP, r0
 8007932:	b662      	cpsie	i
 8007934:	b661      	cpsie	f
 8007936:	f3bf 8f4f 	dsb	sy
 800793a:	f3bf 8f6f 	isb	sy
 800793e:	df00      	svc	0
 8007940:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007942:	bf00      	nop
 8007944:	e000ed08 	.word	0xe000ed08

08007948 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800794e:	4b32      	ldr	r3, [pc, #200]	@ (8007a18 <xPortStartScheduler+0xd0>)
 8007950:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	b2db      	uxtb	r3, r3
 8007958:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	22ff      	movs	r2, #255	@ 0xff
 800795e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	b2db      	uxtb	r3, r3
 8007966:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007968:	78fb      	ldrb	r3, [r7, #3]
 800796a:	b2db      	uxtb	r3, r3
 800796c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007970:	b2da      	uxtb	r2, r3
 8007972:	4b2a      	ldr	r3, [pc, #168]	@ (8007a1c <xPortStartScheduler+0xd4>)
 8007974:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007976:	4b2a      	ldr	r3, [pc, #168]	@ (8007a20 <xPortStartScheduler+0xd8>)
 8007978:	2207      	movs	r2, #7
 800797a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800797c:	e009      	b.n	8007992 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800797e:	4b28      	ldr	r3, [pc, #160]	@ (8007a20 <xPortStartScheduler+0xd8>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	3b01      	subs	r3, #1
 8007984:	4a26      	ldr	r2, [pc, #152]	@ (8007a20 <xPortStartScheduler+0xd8>)
 8007986:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007988:	78fb      	ldrb	r3, [r7, #3]
 800798a:	b2db      	uxtb	r3, r3
 800798c:	005b      	lsls	r3, r3, #1
 800798e:	b2db      	uxtb	r3, r3
 8007990:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007992:	78fb      	ldrb	r3, [r7, #3]
 8007994:	b2db      	uxtb	r3, r3
 8007996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800799a:	2b80      	cmp	r3, #128	@ 0x80
 800799c:	d0ef      	beq.n	800797e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800799e:	4b20      	ldr	r3, [pc, #128]	@ (8007a20 <xPortStartScheduler+0xd8>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f1c3 0307 	rsb	r3, r3, #7
 80079a6:	2b04      	cmp	r3, #4
 80079a8:	d00b      	beq.n	80079c2 <xPortStartScheduler+0x7a>
	__asm volatile
 80079aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ae:	f383 8811 	msr	BASEPRI, r3
 80079b2:	f3bf 8f6f 	isb	sy
 80079b6:	f3bf 8f4f 	dsb	sy
 80079ba:	60bb      	str	r3, [r7, #8]
}
 80079bc:	bf00      	nop
 80079be:	bf00      	nop
 80079c0:	e7fd      	b.n	80079be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80079c2:	4b17      	ldr	r3, [pc, #92]	@ (8007a20 <xPortStartScheduler+0xd8>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	021b      	lsls	r3, r3, #8
 80079c8:	4a15      	ldr	r2, [pc, #84]	@ (8007a20 <xPortStartScheduler+0xd8>)
 80079ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80079cc:	4b14      	ldr	r3, [pc, #80]	@ (8007a20 <xPortStartScheduler+0xd8>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80079d4:	4a12      	ldr	r2, [pc, #72]	@ (8007a20 <xPortStartScheduler+0xd8>)
 80079d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	b2da      	uxtb	r2, r3
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80079e0:	4b10      	ldr	r3, [pc, #64]	@ (8007a24 <xPortStartScheduler+0xdc>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a0f      	ldr	r2, [pc, #60]	@ (8007a24 <xPortStartScheduler+0xdc>)
 80079e6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80079ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80079ec:	4b0d      	ldr	r3, [pc, #52]	@ (8007a24 <xPortStartScheduler+0xdc>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a0c      	ldr	r2, [pc, #48]	@ (8007a24 <xPortStartScheduler+0xdc>)
 80079f2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80079f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80079f8:	f000 f8b8 	bl	8007b6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80079fc:	4b0a      	ldr	r3, [pc, #40]	@ (8007a28 <xPortStartScheduler+0xe0>)
 80079fe:	2200      	movs	r2, #0
 8007a00:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007a02:	f7ff ff91 	bl	8007928 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007a06:	f7fe ffc3 	bl	8006990 <vTaskSwitchContext>
	prvTaskExitError();
 8007a0a:	f7ff ff4d 	bl	80078a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007a0e:	2300      	movs	r3, #0
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3710      	adds	r7, #16
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	e000e400 	.word	0xe000e400
 8007a1c:	20000ef0 	.word	0x20000ef0
 8007a20:	20000ef4 	.word	0x20000ef4
 8007a24:	e000ed20 	.word	0xe000ed20
 8007a28:	2000014c 	.word	0x2000014c

08007a2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
	__asm volatile
 8007a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a36:	f383 8811 	msr	BASEPRI, r3
 8007a3a:	f3bf 8f6f 	isb	sy
 8007a3e:	f3bf 8f4f 	dsb	sy
 8007a42:	607b      	str	r3, [r7, #4]
}
 8007a44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007a46:	4b0f      	ldr	r3, [pc, #60]	@ (8007a84 <vPortEnterCritical+0x58>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8007a84 <vPortEnterCritical+0x58>)
 8007a4e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007a50:	4b0c      	ldr	r3, [pc, #48]	@ (8007a84 <vPortEnterCritical+0x58>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d110      	bne.n	8007a7a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007a58:	4b0b      	ldr	r3, [pc, #44]	@ (8007a88 <vPortEnterCritical+0x5c>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	b2db      	uxtb	r3, r3
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d00b      	beq.n	8007a7a <vPortEnterCritical+0x4e>
	__asm volatile
 8007a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a66:	f383 8811 	msr	BASEPRI, r3
 8007a6a:	f3bf 8f6f 	isb	sy
 8007a6e:	f3bf 8f4f 	dsb	sy
 8007a72:	603b      	str	r3, [r7, #0]
}
 8007a74:	bf00      	nop
 8007a76:	bf00      	nop
 8007a78:	e7fd      	b.n	8007a76 <vPortEnterCritical+0x4a>
	}
}
 8007a7a:	bf00      	nop
 8007a7c:	370c      	adds	r7, #12
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bc80      	pop	{r7}
 8007a82:	4770      	bx	lr
 8007a84:	2000014c 	.word	0x2000014c
 8007a88:	e000ed04 	.word	0xe000ed04

08007a8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007a92:	4b12      	ldr	r3, [pc, #72]	@ (8007adc <vPortExitCritical+0x50>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d10b      	bne.n	8007ab2 <vPortExitCritical+0x26>
	__asm volatile
 8007a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a9e:	f383 8811 	msr	BASEPRI, r3
 8007aa2:	f3bf 8f6f 	isb	sy
 8007aa6:	f3bf 8f4f 	dsb	sy
 8007aaa:	607b      	str	r3, [r7, #4]
}
 8007aac:	bf00      	nop
 8007aae:	bf00      	nop
 8007ab0:	e7fd      	b.n	8007aae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8007adc <vPortExitCritical+0x50>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	3b01      	subs	r3, #1
 8007ab8:	4a08      	ldr	r2, [pc, #32]	@ (8007adc <vPortExitCritical+0x50>)
 8007aba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007abc:	4b07      	ldr	r3, [pc, #28]	@ (8007adc <vPortExitCritical+0x50>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d105      	bne.n	8007ad0 <vPortExitCritical+0x44>
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	f383 8811 	msr	BASEPRI, r3
}
 8007ace:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007ad0:	bf00      	nop
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bc80      	pop	{r7}
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	2000014c 	.word	0x2000014c

08007ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007ae0:	f3ef 8009 	mrs	r0, PSP
 8007ae4:	f3bf 8f6f 	isb	sy
 8007ae8:	4b0d      	ldr	r3, [pc, #52]	@ (8007b20 <pxCurrentTCBConst>)
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007af0:	6010      	str	r0, [r2, #0]
 8007af2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007af6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007afa:	f380 8811 	msr	BASEPRI, r0
 8007afe:	f7fe ff47 	bl	8006990 <vTaskSwitchContext>
 8007b02:	f04f 0000 	mov.w	r0, #0
 8007b06:	f380 8811 	msr	BASEPRI, r0
 8007b0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007b0e:	6819      	ldr	r1, [r3, #0]
 8007b10:	6808      	ldr	r0, [r1, #0]
 8007b12:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007b16:	f380 8809 	msr	PSP, r0
 8007b1a:	f3bf 8f6f 	isb	sy
 8007b1e:	4770      	bx	lr

08007b20 <pxCurrentTCBConst>:
 8007b20:	20000cc8 	.word	0x20000cc8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007b24:	bf00      	nop
 8007b26:	bf00      	nop

08007b28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b32:	f383 8811 	msr	BASEPRI, r3
 8007b36:	f3bf 8f6f 	isb	sy
 8007b3a:	f3bf 8f4f 	dsb	sy
 8007b3e:	607b      	str	r3, [r7, #4]
}
 8007b40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007b42:	f7fe fe6b 	bl	800681c <xTaskIncrementTick>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d003      	beq.n	8007b54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007b4c:	4b06      	ldr	r3, [pc, #24]	@ (8007b68 <SysTick_Handler+0x40>)
 8007b4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b52:	601a      	str	r2, [r3, #0]
 8007b54:	2300      	movs	r3, #0
 8007b56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	f383 8811 	msr	BASEPRI, r3
}
 8007b5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007b60:	bf00      	nop
 8007b62:	3708      	adds	r7, #8
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	e000ed04 	.word	0xe000ed04

08007b6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007b70:	4b0a      	ldr	r3, [pc, #40]	@ (8007b9c <vPortSetupTimerInterrupt+0x30>)
 8007b72:	2200      	movs	r2, #0
 8007b74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007b76:	4b0a      	ldr	r3, [pc, #40]	@ (8007ba0 <vPortSetupTimerInterrupt+0x34>)
 8007b78:	2200      	movs	r2, #0
 8007b7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007b7c:	4b09      	ldr	r3, [pc, #36]	@ (8007ba4 <vPortSetupTimerInterrupt+0x38>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a09      	ldr	r2, [pc, #36]	@ (8007ba8 <vPortSetupTimerInterrupt+0x3c>)
 8007b82:	fba2 2303 	umull	r2, r3, r2, r3
 8007b86:	099b      	lsrs	r3, r3, #6
 8007b88:	4a08      	ldr	r2, [pc, #32]	@ (8007bac <vPortSetupTimerInterrupt+0x40>)
 8007b8a:	3b01      	subs	r3, #1
 8007b8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007b8e:	4b03      	ldr	r3, [pc, #12]	@ (8007b9c <vPortSetupTimerInterrupt+0x30>)
 8007b90:	2207      	movs	r2, #7
 8007b92:	601a      	str	r2, [r3, #0]
}
 8007b94:	bf00      	nop
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bc80      	pop	{r7}
 8007b9a:	4770      	bx	lr
 8007b9c:	e000e010 	.word	0xe000e010
 8007ba0:	e000e018 	.word	0xe000e018
 8007ba4:	200000a0 	.word	0x200000a0
 8007ba8:	10624dd3 	.word	0x10624dd3
 8007bac:	e000e014 	.word	0xe000e014

08007bb0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007bb6:	f3ef 8305 	mrs	r3, IPSR
 8007bba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2b0f      	cmp	r3, #15
 8007bc0:	d915      	bls.n	8007bee <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007bc2:	4a17      	ldr	r2, [pc, #92]	@ (8007c20 <vPortValidateInterruptPriority+0x70>)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007bcc:	4b15      	ldr	r3, [pc, #84]	@ (8007c24 <vPortValidateInterruptPriority+0x74>)
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	7afa      	ldrb	r2, [r7, #11]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d20b      	bcs.n	8007bee <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bda:	f383 8811 	msr	BASEPRI, r3
 8007bde:	f3bf 8f6f 	isb	sy
 8007be2:	f3bf 8f4f 	dsb	sy
 8007be6:	607b      	str	r3, [r7, #4]
}
 8007be8:	bf00      	nop
 8007bea:	bf00      	nop
 8007bec:	e7fd      	b.n	8007bea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007bee:	4b0e      	ldr	r3, [pc, #56]	@ (8007c28 <vPortValidateInterruptPriority+0x78>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8007c2c <vPortValidateInterruptPriority+0x7c>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d90b      	bls.n	8007c16 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c02:	f383 8811 	msr	BASEPRI, r3
 8007c06:	f3bf 8f6f 	isb	sy
 8007c0a:	f3bf 8f4f 	dsb	sy
 8007c0e:	603b      	str	r3, [r7, #0]
}
 8007c10:	bf00      	nop
 8007c12:	bf00      	nop
 8007c14:	e7fd      	b.n	8007c12 <vPortValidateInterruptPriority+0x62>
	}
 8007c16:	bf00      	nop
 8007c18:	3714      	adds	r7, #20
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bc80      	pop	{r7}
 8007c1e:	4770      	bx	lr
 8007c20:	e000e3f0 	.word	0xe000e3f0
 8007c24:	20000ef0 	.word	0x20000ef0
 8007c28:	e000ed0c 	.word	0xe000ed0c
 8007c2c:	20000ef4 	.word	0x20000ef4

08007c30 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b08a      	sub	sp, #40	@ 0x28
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007c3c:	f7fe fd34 	bl	80066a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007c40:	4b5c      	ldr	r3, [pc, #368]	@ (8007db4 <pvPortMalloc+0x184>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d101      	bne.n	8007c4c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007c48:	f000 f924 	bl	8007e94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007c4c:	4b5a      	ldr	r3, [pc, #360]	@ (8007db8 <pvPortMalloc+0x188>)
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	4013      	ands	r3, r2
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f040 8095 	bne.w	8007d84 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d01e      	beq.n	8007c9e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007c60:	2208      	movs	r2, #8
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4413      	add	r3, r2
 8007c66:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f003 0307 	and.w	r3, r3, #7
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d015      	beq.n	8007c9e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f023 0307 	bic.w	r3, r3, #7
 8007c78:	3308      	adds	r3, #8
 8007c7a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f003 0307 	and.w	r3, r3, #7
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00b      	beq.n	8007c9e <pvPortMalloc+0x6e>
	__asm volatile
 8007c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c8a:	f383 8811 	msr	BASEPRI, r3
 8007c8e:	f3bf 8f6f 	isb	sy
 8007c92:	f3bf 8f4f 	dsb	sy
 8007c96:	617b      	str	r3, [r7, #20]
}
 8007c98:	bf00      	nop
 8007c9a:	bf00      	nop
 8007c9c:	e7fd      	b.n	8007c9a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d06f      	beq.n	8007d84 <pvPortMalloc+0x154>
 8007ca4:	4b45      	ldr	r3, [pc, #276]	@ (8007dbc <pvPortMalloc+0x18c>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d86a      	bhi.n	8007d84 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007cae:	4b44      	ldr	r3, [pc, #272]	@ (8007dc0 <pvPortMalloc+0x190>)
 8007cb0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007cb2:	4b43      	ldr	r3, [pc, #268]	@ (8007dc0 <pvPortMalloc+0x190>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007cb8:	e004      	b.n	8007cc4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cbc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d903      	bls.n	8007cd6 <pvPortMalloc+0xa6>
 8007cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d1f1      	bne.n	8007cba <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007cd6:	4b37      	ldr	r3, [pc, #220]	@ (8007db4 <pvPortMalloc+0x184>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d051      	beq.n	8007d84 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ce0:	6a3b      	ldr	r3, [r7, #32]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	2208      	movs	r2, #8
 8007ce6:	4413      	add	r3, r2
 8007ce8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	6a3b      	ldr	r3, [r7, #32]
 8007cf0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf4:	685a      	ldr	r2, [r3, #4]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	1ad2      	subs	r2, r2, r3
 8007cfa:	2308      	movs	r3, #8
 8007cfc:	005b      	lsls	r3, r3, #1
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d920      	bls.n	8007d44 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007d02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4413      	add	r3, r2
 8007d08:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	f003 0307 	and.w	r3, r3, #7
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d00b      	beq.n	8007d2c <pvPortMalloc+0xfc>
	__asm volatile
 8007d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d18:	f383 8811 	msr	BASEPRI, r3
 8007d1c:	f3bf 8f6f 	isb	sy
 8007d20:	f3bf 8f4f 	dsb	sy
 8007d24:	613b      	str	r3, [r7, #16]
}
 8007d26:	bf00      	nop
 8007d28:	bf00      	nop
 8007d2a:	e7fd      	b.n	8007d28 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d2e:	685a      	ldr	r2, [r3, #4]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	1ad2      	subs	r2, r2, r3
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007d3e:	69b8      	ldr	r0, [r7, #24]
 8007d40:	f000 f90a 	bl	8007f58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007d44:	4b1d      	ldr	r3, [pc, #116]	@ (8007dbc <pvPortMalloc+0x18c>)
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	1ad3      	subs	r3, r2, r3
 8007d4e:	4a1b      	ldr	r2, [pc, #108]	@ (8007dbc <pvPortMalloc+0x18c>)
 8007d50:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007d52:	4b1a      	ldr	r3, [pc, #104]	@ (8007dbc <pvPortMalloc+0x18c>)
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	4b1b      	ldr	r3, [pc, #108]	@ (8007dc4 <pvPortMalloc+0x194>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d203      	bcs.n	8007d66 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007d5e:	4b17      	ldr	r3, [pc, #92]	@ (8007dbc <pvPortMalloc+0x18c>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a18      	ldr	r2, [pc, #96]	@ (8007dc4 <pvPortMalloc+0x194>)
 8007d64:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d68:	685a      	ldr	r2, [r3, #4]
 8007d6a:	4b13      	ldr	r3, [pc, #76]	@ (8007db8 <pvPortMalloc+0x188>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	431a      	orrs	r2, r3
 8007d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d72:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d76:	2200      	movs	r2, #0
 8007d78:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007d7a:	4b13      	ldr	r3, [pc, #76]	@ (8007dc8 <pvPortMalloc+0x198>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	4a11      	ldr	r2, [pc, #68]	@ (8007dc8 <pvPortMalloc+0x198>)
 8007d82:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007d84:	f7fe fc9e 	bl	80066c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	f003 0307 	and.w	r3, r3, #7
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00b      	beq.n	8007daa <pvPortMalloc+0x17a>
	__asm volatile
 8007d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d96:	f383 8811 	msr	BASEPRI, r3
 8007d9a:	f3bf 8f6f 	isb	sy
 8007d9e:	f3bf 8f4f 	dsb	sy
 8007da2:	60fb      	str	r3, [r7, #12]
}
 8007da4:	bf00      	nop
 8007da6:	bf00      	nop
 8007da8:	e7fd      	b.n	8007da6 <pvPortMalloc+0x176>
	return pvReturn;
 8007daa:	69fb      	ldr	r3, [r7, #28]
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3728      	adds	r7, #40	@ 0x28
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	20001f00 	.word	0x20001f00
 8007db8:	20001f14 	.word	0x20001f14
 8007dbc:	20001f04 	.word	0x20001f04
 8007dc0:	20001ef8 	.word	0x20001ef8
 8007dc4:	20001f08 	.word	0x20001f08
 8007dc8:	20001f0c 	.word	0x20001f0c

08007dcc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b086      	sub	sp, #24
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d04f      	beq.n	8007e7e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007dde:	2308      	movs	r3, #8
 8007de0:	425b      	negs	r3, r3
 8007de2:	697a      	ldr	r2, [r7, #20]
 8007de4:	4413      	add	r3, r2
 8007de6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	685a      	ldr	r2, [r3, #4]
 8007df0:	4b25      	ldr	r3, [pc, #148]	@ (8007e88 <vPortFree+0xbc>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4013      	ands	r3, r2
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d10b      	bne.n	8007e12 <vPortFree+0x46>
	__asm volatile
 8007dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dfe:	f383 8811 	msr	BASEPRI, r3
 8007e02:	f3bf 8f6f 	isb	sy
 8007e06:	f3bf 8f4f 	dsb	sy
 8007e0a:	60fb      	str	r3, [r7, #12]
}
 8007e0c:	bf00      	nop
 8007e0e:	bf00      	nop
 8007e10:	e7fd      	b.n	8007e0e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d00b      	beq.n	8007e32 <vPortFree+0x66>
	__asm volatile
 8007e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e1e:	f383 8811 	msr	BASEPRI, r3
 8007e22:	f3bf 8f6f 	isb	sy
 8007e26:	f3bf 8f4f 	dsb	sy
 8007e2a:	60bb      	str	r3, [r7, #8]
}
 8007e2c:	bf00      	nop
 8007e2e:	bf00      	nop
 8007e30:	e7fd      	b.n	8007e2e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	685a      	ldr	r2, [r3, #4]
 8007e36:	4b14      	ldr	r3, [pc, #80]	@ (8007e88 <vPortFree+0xbc>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d01e      	beq.n	8007e7e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d11a      	bne.n	8007e7e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	685a      	ldr	r2, [r3, #4]
 8007e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8007e88 <vPortFree+0xbc>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	43db      	mvns	r3, r3
 8007e52:	401a      	ands	r2, r3
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007e58:	f7fe fc26 	bl	80066a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	685a      	ldr	r2, [r3, #4]
 8007e60:	4b0a      	ldr	r3, [pc, #40]	@ (8007e8c <vPortFree+0xc0>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4413      	add	r3, r2
 8007e66:	4a09      	ldr	r2, [pc, #36]	@ (8007e8c <vPortFree+0xc0>)
 8007e68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007e6a:	6938      	ldr	r0, [r7, #16]
 8007e6c:	f000 f874 	bl	8007f58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007e70:	4b07      	ldr	r3, [pc, #28]	@ (8007e90 <vPortFree+0xc4>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	3301      	adds	r3, #1
 8007e76:	4a06      	ldr	r2, [pc, #24]	@ (8007e90 <vPortFree+0xc4>)
 8007e78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007e7a:	f7fe fc23 	bl	80066c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007e7e:	bf00      	nop
 8007e80:	3718      	adds	r7, #24
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	20001f14 	.word	0x20001f14
 8007e8c:	20001f04 	.word	0x20001f04
 8007e90:	20001f10 	.word	0x20001f10

08007e94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007e94:	b480      	push	{r7}
 8007e96:	b085      	sub	sp, #20
 8007e98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007e9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007e9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ea0:	4b27      	ldr	r3, [pc, #156]	@ (8007f40 <prvHeapInit+0xac>)
 8007ea2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f003 0307 	and.w	r3, r3, #7
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d00c      	beq.n	8007ec8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	3307      	adds	r3, #7
 8007eb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f023 0307 	bic.w	r3, r3, #7
 8007eba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007ebc:	68ba      	ldr	r2, [r7, #8]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	4a1f      	ldr	r2, [pc, #124]	@ (8007f40 <prvHeapInit+0xac>)
 8007ec4:	4413      	add	r3, r2
 8007ec6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007ecc:	4a1d      	ldr	r2, [pc, #116]	@ (8007f44 <prvHeapInit+0xb0>)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007ed2:	4b1c      	ldr	r3, [pc, #112]	@ (8007f44 <prvHeapInit+0xb0>)
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	68ba      	ldr	r2, [r7, #8]
 8007edc:	4413      	add	r3, r2
 8007ede:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ee0:	2208      	movs	r2, #8
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	1a9b      	subs	r3, r3, r2
 8007ee6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f023 0307 	bic.w	r3, r3, #7
 8007eee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	4a15      	ldr	r2, [pc, #84]	@ (8007f48 <prvHeapInit+0xb4>)
 8007ef4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007ef6:	4b14      	ldr	r3, [pc, #80]	@ (8007f48 <prvHeapInit+0xb4>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2200      	movs	r2, #0
 8007efc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007efe:	4b12      	ldr	r3, [pc, #72]	@ (8007f48 <prvHeapInit+0xb4>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2200      	movs	r2, #0
 8007f04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	68fa      	ldr	r2, [r7, #12]
 8007f0e:	1ad2      	subs	r2, r2, r3
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007f14:	4b0c      	ldr	r3, [pc, #48]	@ (8007f48 <prvHeapInit+0xb4>)
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	4a0a      	ldr	r2, [pc, #40]	@ (8007f4c <prvHeapInit+0xb8>)
 8007f22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	4a09      	ldr	r2, [pc, #36]	@ (8007f50 <prvHeapInit+0xbc>)
 8007f2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007f2c:	4b09      	ldr	r3, [pc, #36]	@ (8007f54 <prvHeapInit+0xc0>)
 8007f2e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007f32:	601a      	str	r2, [r3, #0]
}
 8007f34:	bf00      	nop
 8007f36:	3714      	adds	r7, #20
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bc80      	pop	{r7}
 8007f3c:	4770      	bx	lr
 8007f3e:	bf00      	nop
 8007f40:	20000ef8 	.word	0x20000ef8
 8007f44:	20001ef8 	.word	0x20001ef8
 8007f48:	20001f00 	.word	0x20001f00
 8007f4c:	20001f08 	.word	0x20001f08
 8007f50:	20001f04 	.word	0x20001f04
 8007f54:	20001f14 	.word	0x20001f14

08007f58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f60:	4b27      	ldr	r3, [pc, #156]	@ (8008000 <prvInsertBlockIntoFreeList+0xa8>)
 8007f62:	60fb      	str	r3, [r7, #12]
 8007f64:	e002      	b.n	8007f6c <prvInsertBlockIntoFreeList+0x14>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	60fb      	str	r3, [r7, #12]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d8f7      	bhi.n	8007f66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	68ba      	ldr	r2, [r7, #8]
 8007f80:	4413      	add	r3, r2
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d108      	bne.n	8007f9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	685a      	ldr	r2, [r3, #4]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	441a      	add	r2, r3
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	68ba      	ldr	r2, [r7, #8]
 8007fa4:	441a      	add	r2, r3
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d118      	bne.n	8007fe0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	4b14      	ldr	r3, [pc, #80]	@ (8008004 <prvInsertBlockIntoFreeList+0xac>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d00d      	beq.n	8007fd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	685a      	ldr	r2, [r3, #4]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	441a      	add	r2, r3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	601a      	str	r2, [r3, #0]
 8007fd4:	e008      	b.n	8007fe8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8008004 <prvInsertBlockIntoFreeList+0xac>)
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	601a      	str	r2, [r3, #0]
 8007fde:	e003      	b.n	8007fe8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d002      	beq.n	8007ff6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ff6:	bf00      	nop
 8007ff8:	3714      	adds	r7, #20
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bc80      	pop	{r7}
 8007ffe:	4770      	bx	lr
 8008000:	20001ef8 	.word	0x20001ef8
 8008004:	20001f00 	.word	0x20001f00

08008008 <siprintf>:
 8008008:	b40e      	push	{r1, r2, r3}
 800800a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800800e:	b500      	push	{lr}
 8008010:	b09c      	sub	sp, #112	@ 0x70
 8008012:	ab1d      	add	r3, sp, #116	@ 0x74
 8008014:	9002      	str	r0, [sp, #8]
 8008016:	9006      	str	r0, [sp, #24]
 8008018:	9107      	str	r1, [sp, #28]
 800801a:	9104      	str	r1, [sp, #16]
 800801c:	4808      	ldr	r0, [pc, #32]	@ (8008040 <siprintf+0x38>)
 800801e:	4909      	ldr	r1, [pc, #36]	@ (8008044 <siprintf+0x3c>)
 8008020:	f853 2b04 	ldr.w	r2, [r3], #4
 8008024:	9105      	str	r1, [sp, #20]
 8008026:	6800      	ldr	r0, [r0, #0]
 8008028:	a902      	add	r1, sp, #8
 800802a:	9301      	str	r3, [sp, #4]
 800802c:	f000 fa30 	bl	8008490 <_svfiprintf_r>
 8008030:	2200      	movs	r2, #0
 8008032:	9b02      	ldr	r3, [sp, #8]
 8008034:	701a      	strb	r2, [r3, #0]
 8008036:	b01c      	add	sp, #112	@ 0x70
 8008038:	f85d eb04 	ldr.w	lr, [sp], #4
 800803c:	b003      	add	sp, #12
 800803e:	4770      	bx	lr
 8008040:	20000150 	.word	0x20000150
 8008044:	ffff0208 	.word	0xffff0208

08008048 <_vsniprintf_r>:
 8008048:	b530      	push	{r4, r5, lr}
 800804a:	4614      	mov	r4, r2
 800804c:	2c00      	cmp	r4, #0
 800804e:	4605      	mov	r5, r0
 8008050:	461a      	mov	r2, r3
 8008052:	b09b      	sub	sp, #108	@ 0x6c
 8008054:	da05      	bge.n	8008062 <_vsniprintf_r+0x1a>
 8008056:	238b      	movs	r3, #139	@ 0x8b
 8008058:	6003      	str	r3, [r0, #0]
 800805a:	f04f 30ff 	mov.w	r0, #4294967295
 800805e:	b01b      	add	sp, #108	@ 0x6c
 8008060:	bd30      	pop	{r4, r5, pc}
 8008062:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008066:	f8ad 300c 	strh.w	r3, [sp, #12]
 800806a:	bf0c      	ite	eq
 800806c:	4623      	moveq	r3, r4
 800806e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008072:	9302      	str	r3, [sp, #8]
 8008074:	9305      	str	r3, [sp, #20]
 8008076:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800807a:	9100      	str	r1, [sp, #0]
 800807c:	9104      	str	r1, [sp, #16]
 800807e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008082:	4669      	mov	r1, sp
 8008084:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8008086:	f000 fa03 	bl	8008490 <_svfiprintf_r>
 800808a:	1c43      	adds	r3, r0, #1
 800808c:	bfbc      	itt	lt
 800808e:	238b      	movlt	r3, #139	@ 0x8b
 8008090:	602b      	strlt	r3, [r5, #0]
 8008092:	2c00      	cmp	r4, #0
 8008094:	d0e3      	beq.n	800805e <_vsniprintf_r+0x16>
 8008096:	2200      	movs	r2, #0
 8008098:	9b00      	ldr	r3, [sp, #0]
 800809a:	701a      	strb	r2, [r3, #0]
 800809c:	e7df      	b.n	800805e <_vsniprintf_r+0x16>
	...

080080a0 <vsniprintf>:
 80080a0:	b507      	push	{r0, r1, r2, lr}
 80080a2:	9300      	str	r3, [sp, #0]
 80080a4:	4613      	mov	r3, r2
 80080a6:	460a      	mov	r2, r1
 80080a8:	4601      	mov	r1, r0
 80080aa:	4803      	ldr	r0, [pc, #12]	@ (80080b8 <vsniprintf+0x18>)
 80080ac:	6800      	ldr	r0, [r0, #0]
 80080ae:	f7ff ffcb 	bl	8008048 <_vsniprintf_r>
 80080b2:	b003      	add	sp, #12
 80080b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80080b8:	20000150 	.word	0x20000150

080080bc <memset>:
 80080bc:	4603      	mov	r3, r0
 80080be:	4402      	add	r2, r0
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d100      	bne.n	80080c6 <memset+0xa>
 80080c4:	4770      	bx	lr
 80080c6:	f803 1b01 	strb.w	r1, [r3], #1
 80080ca:	e7f9      	b.n	80080c0 <memset+0x4>

080080cc <_reclaim_reent>:
 80080cc:	4b29      	ldr	r3, [pc, #164]	@ (8008174 <_reclaim_reent+0xa8>)
 80080ce:	b570      	push	{r4, r5, r6, lr}
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4604      	mov	r4, r0
 80080d4:	4283      	cmp	r3, r0
 80080d6:	d04b      	beq.n	8008170 <_reclaim_reent+0xa4>
 80080d8:	69c3      	ldr	r3, [r0, #28]
 80080da:	b1ab      	cbz	r3, 8008108 <_reclaim_reent+0x3c>
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	b16b      	cbz	r3, 80080fc <_reclaim_reent+0x30>
 80080e0:	2500      	movs	r5, #0
 80080e2:	69e3      	ldr	r3, [r4, #28]
 80080e4:	68db      	ldr	r3, [r3, #12]
 80080e6:	5959      	ldr	r1, [r3, r5]
 80080e8:	2900      	cmp	r1, #0
 80080ea:	d13b      	bne.n	8008164 <_reclaim_reent+0x98>
 80080ec:	3504      	adds	r5, #4
 80080ee:	2d80      	cmp	r5, #128	@ 0x80
 80080f0:	d1f7      	bne.n	80080e2 <_reclaim_reent+0x16>
 80080f2:	69e3      	ldr	r3, [r4, #28]
 80080f4:	4620      	mov	r0, r4
 80080f6:	68d9      	ldr	r1, [r3, #12]
 80080f8:	f000 f878 	bl	80081ec <_free_r>
 80080fc:	69e3      	ldr	r3, [r4, #28]
 80080fe:	6819      	ldr	r1, [r3, #0]
 8008100:	b111      	cbz	r1, 8008108 <_reclaim_reent+0x3c>
 8008102:	4620      	mov	r0, r4
 8008104:	f000 f872 	bl	80081ec <_free_r>
 8008108:	6961      	ldr	r1, [r4, #20]
 800810a:	b111      	cbz	r1, 8008112 <_reclaim_reent+0x46>
 800810c:	4620      	mov	r0, r4
 800810e:	f000 f86d 	bl	80081ec <_free_r>
 8008112:	69e1      	ldr	r1, [r4, #28]
 8008114:	b111      	cbz	r1, 800811c <_reclaim_reent+0x50>
 8008116:	4620      	mov	r0, r4
 8008118:	f000 f868 	bl	80081ec <_free_r>
 800811c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800811e:	b111      	cbz	r1, 8008126 <_reclaim_reent+0x5a>
 8008120:	4620      	mov	r0, r4
 8008122:	f000 f863 	bl	80081ec <_free_r>
 8008126:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008128:	b111      	cbz	r1, 8008130 <_reclaim_reent+0x64>
 800812a:	4620      	mov	r0, r4
 800812c:	f000 f85e 	bl	80081ec <_free_r>
 8008130:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008132:	b111      	cbz	r1, 800813a <_reclaim_reent+0x6e>
 8008134:	4620      	mov	r0, r4
 8008136:	f000 f859 	bl	80081ec <_free_r>
 800813a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800813c:	b111      	cbz	r1, 8008144 <_reclaim_reent+0x78>
 800813e:	4620      	mov	r0, r4
 8008140:	f000 f854 	bl	80081ec <_free_r>
 8008144:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008146:	b111      	cbz	r1, 800814e <_reclaim_reent+0x82>
 8008148:	4620      	mov	r0, r4
 800814a:	f000 f84f 	bl	80081ec <_free_r>
 800814e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008150:	b111      	cbz	r1, 8008158 <_reclaim_reent+0x8c>
 8008152:	4620      	mov	r0, r4
 8008154:	f000 f84a 	bl	80081ec <_free_r>
 8008158:	6a23      	ldr	r3, [r4, #32]
 800815a:	b14b      	cbz	r3, 8008170 <_reclaim_reent+0xa4>
 800815c:	4620      	mov	r0, r4
 800815e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008162:	4718      	bx	r3
 8008164:	680e      	ldr	r6, [r1, #0]
 8008166:	4620      	mov	r0, r4
 8008168:	f000 f840 	bl	80081ec <_free_r>
 800816c:	4631      	mov	r1, r6
 800816e:	e7bb      	b.n	80080e8 <_reclaim_reent+0x1c>
 8008170:	bd70      	pop	{r4, r5, r6, pc}
 8008172:	bf00      	nop
 8008174:	20000150 	.word	0x20000150

08008178 <__errno>:
 8008178:	4b01      	ldr	r3, [pc, #4]	@ (8008180 <__errno+0x8>)
 800817a:	6818      	ldr	r0, [r3, #0]
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop
 8008180:	20000150 	.word	0x20000150

08008184 <__libc_init_array>:
 8008184:	b570      	push	{r4, r5, r6, lr}
 8008186:	2600      	movs	r6, #0
 8008188:	4d0c      	ldr	r5, [pc, #48]	@ (80081bc <__libc_init_array+0x38>)
 800818a:	4c0d      	ldr	r4, [pc, #52]	@ (80081c0 <__libc_init_array+0x3c>)
 800818c:	1b64      	subs	r4, r4, r5
 800818e:	10a4      	asrs	r4, r4, #2
 8008190:	42a6      	cmp	r6, r4
 8008192:	d109      	bne.n	80081a8 <__libc_init_array+0x24>
 8008194:	f000 fc78 	bl	8008a88 <_init>
 8008198:	2600      	movs	r6, #0
 800819a:	4d0a      	ldr	r5, [pc, #40]	@ (80081c4 <__libc_init_array+0x40>)
 800819c:	4c0a      	ldr	r4, [pc, #40]	@ (80081c8 <__libc_init_array+0x44>)
 800819e:	1b64      	subs	r4, r4, r5
 80081a0:	10a4      	asrs	r4, r4, #2
 80081a2:	42a6      	cmp	r6, r4
 80081a4:	d105      	bne.n	80081b2 <__libc_init_array+0x2e>
 80081a6:	bd70      	pop	{r4, r5, r6, pc}
 80081a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80081ac:	4798      	blx	r3
 80081ae:	3601      	adds	r6, #1
 80081b0:	e7ee      	b.n	8008190 <__libc_init_array+0xc>
 80081b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80081b6:	4798      	blx	r3
 80081b8:	3601      	adds	r6, #1
 80081ba:	e7f2      	b.n	80081a2 <__libc_init_array+0x1e>
 80081bc:	080093d8 	.word	0x080093d8
 80081c0:	080093d8 	.word	0x080093d8
 80081c4:	080093d8 	.word	0x080093d8
 80081c8:	080093dc 	.word	0x080093dc

080081cc <__retarget_lock_acquire_recursive>:
 80081cc:	4770      	bx	lr

080081ce <__retarget_lock_release_recursive>:
 80081ce:	4770      	bx	lr

080081d0 <memcpy>:
 80081d0:	440a      	add	r2, r1
 80081d2:	4291      	cmp	r1, r2
 80081d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80081d8:	d100      	bne.n	80081dc <memcpy+0xc>
 80081da:	4770      	bx	lr
 80081dc:	b510      	push	{r4, lr}
 80081de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081e2:	4291      	cmp	r1, r2
 80081e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081e8:	d1f9      	bne.n	80081de <memcpy+0xe>
 80081ea:	bd10      	pop	{r4, pc}

080081ec <_free_r>:
 80081ec:	b538      	push	{r3, r4, r5, lr}
 80081ee:	4605      	mov	r5, r0
 80081f0:	2900      	cmp	r1, #0
 80081f2:	d040      	beq.n	8008276 <_free_r+0x8a>
 80081f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081f8:	1f0c      	subs	r4, r1, #4
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	bfb8      	it	lt
 80081fe:	18e4      	addlt	r4, r4, r3
 8008200:	f000 f8de 	bl	80083c0 <__malloc_lock>
 8008204:	4a1c      	ldr	r2, [pc, #112]	@ (8008278 <_free_r+0x8c>)
 8008206:	6813      	ldr	r3, [r2, #0]
 8008208:	b933      	cbnz	r3, 8008218 <_free_r+0x2c>
 800820a:	6063      	str	r3, [r4, #4]
 800820c:	6014      	str	r4, [r2, #0]
 800820e:	4628      	mov	r0, r5
 8008210:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008214:	f000 b8da 	b.w	80083cc <__malloc_unlock>
 8008218:	42a3      	cmp	r3, r4
 800821a:	d908      	bls.n	800822e <_free_r+0x42>
 800821c:	6820      	ldr	r0, [r4, #0]
 800821e:	1821      	adds	r1, r4, r0
 8008220:	428b      	cmp	r3, r1
 8008222:	bf01      	itttt	eq
 8008224:	6819      	ldreq	r1, [r3, #0]
 8008226:	685b      	ldreq	r3, [r3, #4]
 8008228:	1809      	addeq	r1, r1, r0
 800822a:	6021      	streq	r1, [r4, #0]
 800822c:	e7ed      	b.n	800820a <_free_r+0x1e>
 800822e:	461a      	mov	r2, r3
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	b10b      	cbz	r3, 8008238 <_free_r+0x4c>
 8008234:	42a3      	cmp	r3, r4
 8008236:	d9fa      	bls.n	800822e <_free_r+0x42>
 8008238:	6811      	ldr	r1, [r2, #0]
 800823a:	1850      	adds	r0, r2, r1
 800823c:	42a0      	cmp	r0, r4
 800823e:	d10b      	bne.n	8008258 <_free_r+0x6c>
 8008240:	6820      	ldr	r0, [r4, #0]
 8008242:	4401      	add	r1, r0
 8008244:	1850      	adds	r0, r2, r1
 8008246:	4283      	cmp	r3, r0
 8008248:	6011      	str	r1, [r2, #0]
 800824a:	d1e0      	bne.n	800820e <_free_r+0x22>
 800824c:	6818      	ldr	r0, [r3, #0]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	4408      	add	r0, r1
 8008252:	6010      	str	r0, [r2, #0]
 8008254:	6053      	str	r3, [r2, #4]
 8008256:	e7da      	b.n	800820e <_free_r+0x22>
 8008258:	d902      	bls.n	8008260 <_free_r+0x74>
 800825a:	230c      	movs	r3, #12
 800825c:	602b      	str	r3, [r5, #0]
 800825e:	e7d6      	b.n	800820e <_free_r+0x22>
 8008260:	6820      	ldr	r0, [r4, #0]
 8008262:	1821      	adds	r1, r4, r0
 8008264:	428b      	cmp	r3, r1
 8008266:	bf01      	itttt	eq
 8008268:	6819      	ldreq	r1, [r3, #0]
 800826a:	685b      	ldreq	r3, [r3, #4]
 800826c:	1809      	addeq	r1, r1, r0
 800826e:	6021      	streq	r1, [r4, #0]
 8008270:	6063      	str	r3, [r4, #4]
 8008272:	6054      	str	r4, [r2, #4]
 8008274:	e7cb      	b.n	800820e <_free_r+0x22>
 8008276:	bd38      	pop	{r3, r4, r5, pc}
 8008278:	2000205c 	.word	0x2000205c

0800827c <sbrk_aligned>:
 800827c:	b570      	push	{r4, r5, r6, lr}
 800827e:	4e0f      	ldr	r6, [pc, #60]	@ (80082bc <sbrk_aligned+0x40>)
 8008280:	460c      	mov	r4, r1
 8008282:	6831      	ldr	r1, [r6, #0]
 8008284:	4605      	mov	r5, r0
 8008286:	b911      	cbnz	r1, 800828e <sbrk_aligned+0x12>
 8008288:	f000 fbaa 	bl	80089e0 <_sbrk_r>
 800828c:	6030      	str	r0, [r6, #0]
 800828e:	4621      	mov	r1, r4
 8008290:	4628      	mov	r0, r5
 8008292:	f000 fba5 	bl	80089e0 <_sbrk_r>
 8008296:	1c43      	adds	r3, r0, #1
 8008298:	d103      	bne.n	80082a2 <sbrk_aligned+0x26>
 800829a:	f04f 34ff 	mov.w	r4, #4294967295
 800829e:	4620      	mov	r0, r4
 80082a0:	bd70      	pop	{r4, r5, r6, pc}
 80082a2:	1cc4      	adds	r4, r0, #3
 80082a4:	f024 0403 	bic.w	r4, r4, #3
 80082a8:	42a0      	cmp	r0, r4
 80082aa:	d0f8      	beq.n	800829e <sbrk_aligned+0x22>
 80082ac:	1a21      	subs	r1, r4, r0
 80082ae:	4628      	mov	r0, r5
 80082b0:	f000 fb96 	bl	80089e0 <_sbrk_r>
 80082b4:	3001      	adds	r0, #1
 80082b6:	d1f2      	bne.n	800829e <sbrk_aligned+0x22>
 80082b8:	e7ef      	b.n	800829a <sbrk_aligned+0x1e>
 80082ba:	bf00      	nop
 80082bc:	20002058 	.word	0x20002058

080082c0 <_malloc_r>:
 80082c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082c4:	1ccd      	adds	r5, r1, #3
 80082c6:	f025 0503 	bic.w	r5, r5, #3
 80082ca:	3508      	adds	r5, #8
 80082cc:	2d0c      	cmp	r5, #12
 80082ce:	bf38      	it	cc
 80082d0:	250c      	movcc	r5, #12
 80082d2:	2d00      	cmp	r5, #0
 80082d4:	4606      	mov	r6, r0
 80082d6:	db01      	blt.n	80082dc <_malloc_r+0x1c>
 80082d8:	42a9      	cmp	r1, r5
 80082da:	d904      	bls.n	80082e6 <_malloc_r+0x26>
 80082dc:	230c      	movs	r3, #12
 80082de:	6033      	str	r3, [r6, #0]
 80082e0:	2000      	movs	r0, #0
 80082e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80083bc <_malloc_r+0xfc>
 80082ea:	f000 f869 	bl	80083c0 <__malloc_lock>
 80082ee:	f8d8 3000 	ldr.w	r3, [r8]
 80082f2:	461c      	mov	r4, r3
 80082f4:	bb44      	cbnz	r4, 8008348 <_malloc_r+0x88>
 80082f6:	4629      	mov	r1, r5
 80082f8:	4630      	mov	r0, r6
 80082fa:	f7ff ffbf 	bl	800827c <sbrk_aligned>
 80082fe:	1c43      	adds	r3, r0, #1
 8008300:	4604      	mov	r4, r0
 8008302:	d158      	bne.n	80083b6 <_malloc_r+0xf6>
 8008304:	f8d8 4000 	ldr.w	r4, [r8]
 8008308:	4627      	mov	r7, r4
 800830a:	2f00      	cmp	r7, #0
 800830c:	d143      	bne.n	8008396 <_malloc_r+0xd6>
 800830e:	2c00      	cmp	r4, #0
 8008310:	d04b      	beq.n	80083aa <_malloc_r+0xea>
 8008312:	6823      	ldr	r3, [r4, #0]
 8008314:	4639      	mov	r1, r7
 8008316:	4630      	mov	r0, r6
 8008318:	eb04 0903 	add.w	r9, r4, r3
 800831c:	f000 fb60 	bl	80089e0 <_sbrk_r>
 8008320:	4581      	cmp	r9, r0
 8008322:	d142      	bne.n	80083aa <_malloc_r+0xea>
 8008324:	6821      	ldr	r1, [r4, #0]
 8008326:	4630      	mov	r0, r6
 8008328:	1a6d      	subs	r5, r5, r1
 800832a:	4629      	mov	r1, r5
 800832c:	f7ff ffa6 	bl	800827c <sbrk_aligned>
 8008330:	3001      	adds	r0, #1
 8008332:	d03a      	beq.n	80083aa <_malloc_r+0xea>
 8008334:	6823      	ldr	r3, [r4, #0]
 8008336:	442b      	add	r3, r5
 8008338:	6023      	str	r3, [r4, #0]
 800833a:	f8d8 3000 	ldr.w	r3, [r8]
 800833e:	685a      	ldr	r2, [r3, #4]
 8008340:	bb62      	cbnz	r2, 800839c <_malloc_r+0xdc>
 8008342:	f8c8 7000 	str.w	r7, [r8]
 8008346:	e00f      	b.n	8008368 <_malloc_r+0xa8>
 8008348:	6822      	ldr	r2, [r4, #0]
 800834a:	1b52      	subs	r2, r2, r5
 800834c:	d420      	bmi.n	8008390 <_malloc_r+0xd0>
 800834e:	2a0b      	cmp	r2, #11
 8008350:	d917      	bls.n	8008382 <_malloc_r+0xc2>
 8008352:	1961      	adds	r1, r4, r5
 8008354:	42a3      	cmp	r3, r4
 8008356:	6025      	str	r5, [r4, #0]
 8008358:	bf18      	it	ne
 800835a:	6059      	strne	r1, [r3, #4]
 800835c:	6863      	ldr	r3, [r4, #4]
 800835e:	bf08      	it	eq
 8008360:	f8c8 1000 	streq.w	r1, [r8]
 8008364:	5162      	str	r2, [r4, r5]
 8008366:	604b      	str	r3, [r1, #4]
 8008368:	4630      	mov	r0, r6
 800836a:	f000 f82f 	bl	80083cc <__malloc_unlock>
 800836e:	f104 000b 	add.w	r0, r4, #11
 8008372:	1d23      	adds	r3, r4, #4
 8008374:	f020 0007 	bic.w	r0, r0, #7
 8008378:	1ac2      	subs	r2, r0, r3
 800837a:	bf1c      	itt	ne
 800837c:	1a1b      	subne	r3, r3, r0
 800837e:	50a3      	strne	r3, [r4, r2]
 8008380:	e7af      	b.n	80082e2 <_malloc_r+0x22>
 8008382:	6862      	ldr	r2, [r4, #4]
 8008384:	42a3      	cmp	r3, r4
 8008386:	bf0c      	ite	eq
 8008388:	f8c8 2000 	streq.w	r2, [r8]
 800838c:	605a      	strne	r2, [r3, #4]
 800838e:	e7eb      	b.n	8008368 <_malloc_r+0xa8>
 8008390:	4623      	mov	r3, r4
 8008392:	6864      	ldr	r4, [r4, #4]
 8008394:	e7ae      	b.n	80082f4 <_malloc_r+0x34>
 8008396:	463c      	mov	r4, r7
 8008398:	687f      	ldr	r7, [r7, #4]
 800839a:	e7b6      	b.n	800830a <_malloc_r+0x4a>
 800839c:	461a      	mov	r2, r3
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	42a3      	cmp	r3, r4
 80083a2:	d1fb      	bne.n	800839c <_malloc_r+0xdc>
 80083a4:	2300      	movs	r3, #0
 80083a6:	6053      	str	r3, [r2, #4]
 80083a8:	e7de      	b.n	8008368 <_malloc_r+0xa8>
 80083aa:	230c      	movs	r3, #12
 80083ac:	4630      	mov	r0, r6
 80083ae:	6033      	str	r3, [r6, #0]
 80083b0:	f000 f80c 	bl	80083cc <__malloc_unlock>
 80083b4:	e794      	b.n	80082e0 <_malloc_r+0x20>
 80083b6:	6005      	str	r5, [r0, #0]
 80083b8:	e7d6      	b.n	8008368 <_malloc_r+0xa8>
 80083ba:	bf00      	nop
 80083bc:	2000205c 	.word	0x2000205c

080083c0 <__malloc_lock>:
 80083c0:	4801      	ldr	r0, [pc, #4]	@ (80083c8 <__malloc_lock+0x8>)
 80083c2:	f7ff bf03 	b.w	80081cc <__retarget_lock_acquire_recursive>
 80083c6:	bf00      	nop
 80083c8:	20002054 	.word	0x20002054

080083cc <__malloc_unlock>:
 80083cc:	4801      	ldr	r0, [pc, #4]	@ (80083d4 <__malloc_unlock+0x8>)
 80083ce:	f7ff befe 	b.w	80081ce <__retarget_lock_release_recursive>
 80083d2:	bf00      	nop
 80083d4:	20002054 	.word	0x20002054

080083d8 <__ssputs_r>:
 80083d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083dc:	461f      	mov	r7, r3
 80083de:	688e      	ldr	r6, [r1, #8]
 80083e0:	4682      	mov	sl, r0
 80083e2:	42be      	cmp	r6, r7
 80083e4:	460c      	mov	r4, r1
 80083e6:	4690      	mov	r8, r2
 80083e8:	680b      	ldr	r3, [r1, #0]
 80083ea:	d82d      	bhi.n	8008448 <__ssputs_r+0x70>
 80083ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80083f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80083f4:	d026      	beq.n	8008444 <__ssputs_r+0x6c>
 80083f6:	6965      	ldr	r5, [r4, #20]
 80083f8:	6909      	ldr	r1, [r1, #16]
 80083fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80083fe:	eba3 0901 	sub.w	r9, r3, r1
 8008402:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008406:	1c7b      	adds	r3, r7, #1
 8008408:	444b      	add	r3, r9
 800840a:	106d      	asrs	r5, r5, #1
 800840c:	429d      	cmp	r5, r3
 800840e:	bf38      	it	cc
 8008410:	461d      	movcc	r5, r3
 8008412:	0553      	lsls	r3, r2, #21
 8008414:	d527      	bpl.n	8008466 <__ssputs_r+0x8e>
 8008416:	4629      	mov	r1, r5
 8008418:	f7ff ff52 	bl	80082c0 <_malloc_r>
 800841c:	4606      	mov	r6, r0
 800841e:	b360      	cbz	r0, 800847a <__ssputs_r+0xa2>
 8008420:	464a      	mov	r2, r9
 8008422:	6921      	ldr	r1, [r4, #16]
 8008424:	f7ff fed4 	bl	80081d0 <memcpy>
 8008428:	89a3      	ldrh	r3, [r4, #12]
 800842a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800842e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008432:	81a3      	strh	r3, [r4, #12]
 8008434:	6126      	str	r6, [r4, #16]
 8008436:	444e      	add	r6, r9
 8008438:	6026      	str	r6, [r4, #0]
 800843a:	463e      	mov	r6, r7
 800843c:	6165      	str	r5, [r4, #20]
 800843e:	eba5 0509 	sub.w	r5, r5, r9
 8008442:	60a5      	str	r5, [r4, #8]
 8008444:	42be      	cmp	r6, r7
 8008446:	d900      	bls.n	800844a <__ssputs_r+0x72>
 8008448:	463e      	mov	r6, r7
 800844a:	4632      	mov	r2, r6
 800844c:	4641      	mov	r1, r8
 800844e:	6820      	ldr	r0, [r4, #0]
 8008450:	f000 faac 	bl	80089ac <memmove>
 8008454:	2000      	movs	r0, #0
 8008456:	68a3      	ldr	r3, [r4, #8]
 8008458:	1b9b      	subs	r3, r3, r6
 800845a:	60a3      	str	r3, [r4, #8]
 800845c:	6823      	ldr	r3, [r4, #0]
 800845e:	4433      	add	r3, r6
 8008460:	6023      	str	r3, [r4, #0]
 8008462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008466:	462a      	mov	r2, r5
 8008468:	f000 fad8 	bl	8008a1c <_realloc_r>
 800846c:	4606      	mov	r6, r0
 800846e:	2800      	cmp	r0, #0
 8008470:	d1e0      	bne.n	8008434 <__ssputs_r+0x5c>
 8008472:	4650      	mov	r0, sl
 8008474:	6921      	ldr	r1, [r4, #16]
 8008476:	f7ff feb9 	bl	80081ec <_free_r>
 800847a:	230c      	movs	r3, #12
 800847c:	f8ca 3000 	str.w	r3, [sl]
 8008480:	89a3      	ldrh	r3, [r4, #12]
 8008482:	f04f 30ff 	mov.w	r0, #4294967295
 8008486:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800848a:	81a3      	strh	r3, [r4, #12]
 800848c:	e7e9      	b.n	8008462 <__ssputs_r+0x8a>
	...

08008490 <_svfiprintf_r>:
 8008490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008494:	4698      	mov	r8, r3
 8008496:	898b      	ldrh	r3, [r1, #12]
 8008498:	4607      	mov	r7, r0
 800849a:	061b      	lsls	r3, r3, #24
 800849c:	460d      	mov	r5, r1
 800849e:	4614      	mov	r4, r2
 80084a0:	b09d      	sub	sp, #116	@ 0x74
 80084a2:	d510      	bpl.n	80084c6 <_svfiprintf_r+0x36>
 80084a4:	690b      	ldr	r3, [r1, #16]
 80084a6:	b973      	cbnz	r3, 80084c6 <_svfiprintf_r+0x36>
 80084a8:	2140      	movs	r1, #64	@ 0x40
 80084aa:	f7ff ff09 	bl	80082c0 <_malloc_r>
 80084ae:	6028      	str	r0, [r5, #0]
 80084b0:	6128      	str	r0, [r5, #16]
 80084b2:	b930      	cbnz	r0, 80084c2 <_svfiprintf_r+0x32>
 80084b4:	230c      	movs	r3, #12
 80084b6:	603b      	str	r3, [r7, #0]
 80084b8:	f04f 30ff 	mov.w	r0, #4294967295
 80084bc:	b01d      	add	sp, #116	@ 0x74
 80084be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084c2:	2340      	movs	r3, #64	@ 0x40
 80084c4:	616b      	str	r3, [r5, #20]
 80084c6:	2300      	movs	r3, #0
 80084c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80084ca:	2320      	movs	r3, #32
 80084cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80084d0:	2330      	movs	r3, #48	@ 0x30
 80084d2:	f04f 0901 	mov.w	r9, #1
 80084d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80084da:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008674 <_svfiprintf_r+0x1e4>
 80084de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80084e2:	4623      	mov	r3, r4
 80084e4:	469a      	mov	sl, r3
 80084e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084ea:	b10a      	cbz	r2, 80084f0 <_svfiprintf_r+0x60>
 80084ec:	2a25      	cmp	r2, #37	@ 0x25
 80084ee:	d1f9      	bne.n	80084e4 <_svfiprintf_r+0x54>
 80084f0:	ebba 0b04 	subs.w	fp, sl, r4
 80084f4:	d00b      	beq.n	800850e <_svfiprintf_r+0x7e>
 80084f6:	465b      	mov	r3, fp
 80084f8:	4622      	mov	r2, r4
 80084fa:	4629      	mov	r1, r5
 80084fc:	4638      	mov	r0, r7
 80084fe:	f7ff ff6b 	bl	80083d8 <__ssputs_r>
 8008502:	3001      	adds	r0, #1
 8008504:	f000 80a7 	beq.w	8008656 <_svfiprintf_r+0x1c6>
 8008508:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800850a:	445a      	add	r2, fp
 800850c:	9209      	str	r2, [sp, #36]	@ 0x24
 800850e:	f89a 3000 	ldrb.w	r3, [sl]
 8008512:	2b00      	cmp	r3, #0
 8008514:	f000 809f 	beq.w	8008656 <_svfiprintf_r+0x1c6>
 8008518:	2300      	movs	r3, #0
 800851a:	f04f 32ff 	mov.w	r2, #4294967295
 800851e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008522:	f10a 0a01 	add.w	sl, sl, #1
 8008526:	9304      	str	r3, [sp, #16]
 8008528:	9307      	str	r3, [sp, #28]
 800852a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800852e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008530:	4654      	mov	r4, sl
 8008532:	2205      	movs	r2, #5
 8008534:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008538:	484e      	ldr	r0, [pc, #312]	@ (8008674 <_svfiprintf_r+0x1e4>)
 800853a:	f000 fa61 	bl	8008a00 <memchr>
 800853e:	9a04      	ldr	r2, [sp, #16]
 8008540:	b9d8      	cbnz	r0, 800857a <_svfiprintf_r+0xea>
 8008542:	06d0      	lsls	r0, r2, #27
 8008544:	bf44      	itt	mi
 8008546:	2320      	movmi	r3, #32
 8008548:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800854c:	0711      	lsls	r1, r2, #28
 800854e:	bf44      	itt	mi
 8008550:	232b      	movmi	r3, #43	@ 0x2b
 8008552:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008556:	f89a 3000 	ldrb.w	r3, [sl]
 800855a:	2b2a      	cmp	r3, #42	@ 0x2a
 800855c:	d015      	beq.n	800858a <_svfiprintf_r+0xfa>
 800855e:	4654      	mov	r4, sl
 8008560:	2000      	movs	r0, #0
 8008562:	f04f 0c0a 	mov.w	ip, #10
 8008566:	9a07      	ldr	r2, [sp, #28]
 8008568:	4621      	mov	r1, r4
 800856a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800856e:	3b30      	subs	r3, #48	@ 0x30
 8008570:	2b09      	cmp	r3, #9
 8008572:	d94b      	bls.n	800860c <_svfiprintf_r+0x17c>
 8008574:	b1b0      	cbz	r0, 80085a4 <_svfiprintf_r+0x114>
 8008576:	9207      	str	r2, [sp, #28]
 8008578:	e014      	b.n	80085a4 <_svfiprintf_r+0x114>
 800857a:	eba0 0308 	sub.w	r3, r0, r8
 800857e:	fa09 f303 	lsl.w	r3, r9, r3
 8008582:	4313      	orrs	r3, r2
 8008584:	46a2      	mov	sl, r4
 8008586:	9304      	str	r3, [sp, #16]
 8008588:	e7d2      	b.n	8008530 <_svfiprintf_r+0xa0>
 800858a:	9b03      	ldr	r3, [sp, #12]
 800858c:	1d19      	adds	r1, r3, #4
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	9103      	str	r1, [sp, #12]
 8008592:	2b00      	cmp	r3, #0
 8008594:	bfbb      	ittet	lt
 8008596:	425b      	neglt	r3, r3
 8008598:	f042 0202 	orrlt.w	r2, r2, #2
 800859c:	9307      	strge	r3, [sp, #28]
 800859e:	9307      	strlt	r3, [sp, #28]
 80085a0:	bfb8      	it	lt
 80085a2:	9204      	strlt	r2, [sp, #16]
 80085a4:	7823      	ldrb	r3, [r4, #0]
 80085a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80085a8:	d10a      	bne.n	80085c0 <_svfiprintf_r+0x130>
 80085aa:	7863      	ldrb	r3, [r4, #1]
 80085ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80085ae:	d132      	bne.n	8008616 <_svfiprintf_r+0x186>
 80085b0:	9b03      	ldr	r3, [sp, #12]
 80085b2:	3402      	adds	r4, #2
 80085b4:	1d1a      	adds	r2, r3, #4
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	9203      	str	r2, [sp, #12]
 80085ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80085be:	9305      	str	r3, [sp, #20]
 80085c0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008678 <_svfiprintf_r+0x1e8>
 80085c4:	2203      	movs	r2, #3
 80085c6:	4650      	mov	r0, sl
 80085c8:	7821      	ldrb	r1, [r4, #0]
 80085ca:	f000 fa19 	bl	8008a00 <memchr>
 80085ce:	b138      	cbz	r0, 80085e0 <_svfiprintf_r+0x150>
 80085d0:	2240      	movs	r2, #64	@ 0x40
 80085d2:	9b04      	ldr	r3, [sp, #16]
 80085d4:	eba0 000a 	sub.w	r0, r0, sl
 80085d8:	4082      	lsls	r2, r0
 80085da:	4313      	orrs	r3, r2
 80085dc:	3401      	adds	r4, #1
 80085de:	9304      	str	r3, [sp, #16]
 80085e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085e4:	2206      	movs	r2, #6
 80085e6:	4825      	ldr	r0, [pc, #148]	@ (800867c <_svfiprintf_r+0x1ec>)
 80085e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80085ec:	f000 fa08 	bl	8008a00 <memchr>
 80085f0:	2800      	cmp	r0, #0
 80085f2:	d036      	beq.n	8008662 <_svfiprintf_r+0x1d2>
 80085f4:	4b22      	ldr	r3, [pc, #136]	@ (8008680 <_svfiprintf_r+0x1f0>)
 80085f6:	bb1b      	cbnz	r3, 8008640 <_svfiprintf_r+0x1b0>
 80085f8:	9b03      	ldr	r3, [sp, #12]
 80085fa:	3307      	adds	r3, #7
 80085fc:	f023 0307 	bic.w	r3, r3, #7
 8008600:	3308      	adds	r3, #8
 8008602:	9303      	str	r3, [sp, #12]
 8008604:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008606:	4433      	add	r3, r6
 8008608:	9309      	str	r3, [sp, #36]	@ 0x24
 800860a:	e76a      	b.n	80084e2 <_svfiprintf_r+0x52>
 800860c:	460c      	mov	r4, r1
 800860e:	2001      	movs	r0, #1
 8008610:	fb0c 3202 	mla	r2, ip, r2, r3
 8008614:	e7a8      	b.n	8008568 <_svfiprintf_r+0xd8>
 8008616:	2300      	movs	r3, #0
 8008618:	f04f 0c0a 	mov.w	ip, #10
 800861c:	4619      	mov	r1, r3
 800861e:	3401      	adds	r4, #1
 8008620:	9305      	str	r3, [sp, #20]
 8008622:	4620      	mov	r0, r4
 8008624:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008628:	3a30      	subs	r2, #48	@ 0x30
 800862a:	2a09      	cmp	r2, #9
 800862c:	d903      	bls.n	8008636 <_svfiprintf_r+0x1a6>
 800862e:	2b00      	cmp	r3, #0
 8008630:	d0c6      	beq.n	80085c0 <_svfiprintf_r+0x130>
 8008632:	9105      	str	r1, [sp, #20]
 8008634:	e7c4      	b.n	80085c0 <_svfiprintf_r+0x130>
 8008636:	4604      	mov	r4, r0
 8008638:	2301      	movs	r3, #1
 800863a:	fb0c 2101 	mla	r1, ip, r1, r2
 800863e:	e7f0      	b.n	8008622 <_svfiprintf_r+0x192>
 8008640:	ab03      	add	r3, sp, #12
 8008642:	9300      	str	r3, [sp, #0]
 8008644:	462a      	mov	r2, r5
 8008646:	4638      	mov	r0, r7
 8008648:	4b0e      	ldr	r3, [pc, #56]	@ (8008684 <_svfiprintf_r+0x1f4>)
 800864a:	a904      	add	r1, sp, #16
 800864c:	f3af 8000 	nop.w
 8008650:	1c42      	adds	r2, r0, #1
 8008652:	4606      	mov	r6, r0
 8008654:	d1d6      	bne.n	8008604 <_svfiprintf_r+0x174>
 8008656:	89ab      	ldrh	r3, [r5, #12]
 8008658:	065b      	lsls	r3, r3, #25
 800865a:	f53f af2d 	bmi.w	80084b8 <_svfiprintf_r+0x28>
 800865e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008660:	e72c      	b.n	80084bc <_svfiprintf_r+0x2c>
 8008662:	ab03      	add	r3, sp, #12
 8008664:	9300      	str	r3, [sp, #0]
 8008666:	462a      	mov	r2, r5
 8008668:	4638      	mov	r0, r7
 800866a:	4b06      	ldr	r3, [pc, #24]	@ (8008684 <_svfiprintf_r+0x1f4>)
 800866c:	a904      	add	r1, sp, #16
 800866e:	f000 f87d 	bl	800876c <_printf_i>
 8008672:	e7ed      	b.n	8008650 <_svfiprintf_r+0x1c0>
 8008674:	0800939a 	.word	0x0800939a
 8008678:	080093a0 	.word	0x080093a0
 800867c:	080093a4 	.word	0x080093a4
 8008680:	00000000 	.word	0x00000000
 8008684:	080083d9 	.word	0x080083d9

08008688 <_printf_common>:
 8008688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800868c:	4616      	mov	r6, r2
 800868e:	4698      	mov	r8, r3
 8008690:	688a      	ldr	r2, [r1, #8]
 8008692:	690b      	ldr	r3, [r1, #16]
 8008694:	4607      	mov	r7, r0
 8008696:	4293      	cmp	r3, r2
 8008698:	bfb8      	it	lt
 800869a:	4613      	movlt	r3, r2
 800869c:	6033      	str	r3, [r6, #0]
 800869e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80086a2:	460c      	mov	r4, r1
 80086a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80086a8:	b10a      	cbz	r2, 80086ae <_printf_common+0x26>
 80086aa:	3301      	adds	r3, #1
 80086ac:	6033      	str	r3, [r6, #0]
 80086ae:	6823      	ldr	r3, [r4, #0]
 80086b0:	0699      	lsls	r1, r3, #26
 80086b2:	bf42      	ittt	mi
 80086b4:	6833      	ldrmi	r3, [r6, #0]
 80086b6:	3302      	addmi	r3, #2
 80086b8:	6033      	strmi	r3, [r6, #0]
 80086ba:	6825      	ldr	r5, [r4, #0]
 80086bc:	f015 0506 	ands.w	r5, r5, #6
 80086c0:	d106      	bne.n	80086d0 <_printf_common+0x48>
 80086c2:	f104 0a19 	add.w	sl, r4, #25
 80086c6:	68e3      	ldr	r3, [r4, #12]
 80086c8:	6832      	ldr	r2, [r6, #0]
 80086ca:	1a9b      	subs	r3, r3, r2
 80086cc:	42ab      	cmp	r3, r5
 80086ce:	dc2b      	bgt.n	8008728 <_printf_common+0xa0>
 80086d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80086d4:	6822      	ldr	r2, [r4, #0]
 80086d6:	3b00      	subs	r3, #0
 80086d8:	bf18      	it	ne
 80086da:	2301      	movne	r3, #1
 80086dc:	0692      	lsls	r2, r2, #26
 80086de:	d430      	bmi.n	8008742 <_printf_common+0xba>
 80086e0:	4641      	mov	r1, r8
 80086e2:	4638      	mov	r0, r7
 80086e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80086e8:	47c8      	blx	r9
 80086ea:	3001      	adds	r0, #1
 80086ec:	d023      	beq.n	8008736 <_printf_common+0xae>
 80086ee:	6823      	ldr	r3, [r4, #0]
 80086f0:	6922      	ldr	r2, [r4, #16]
 80086f2:	f003 0306 	and.w	r3, r3, #6
 80086f6:	2b04      	cmp	r3, #4
 80086f8:	bf14      	ite	ne
 80086fa:	2500      	movne	r5, #0
 80086fc:	6833      	ldreq	r3, [r6, #0]
 80086fe:	f04f 0600 	mov.w	r6, #0
 8008702:	bf08      	it	eq
 8008704:	68e5      	ldreq	r5, [r4, #12]
 8008706:	f104 041a 	add.w	r4, r4, #26
 800870a:	bf08      	it	eq
 800870c:	1aed      	subeq	r5, r5, r3
 800870e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008712:	bf08      	it	eq
 8008714:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008718:	4293      	cmp	r3, r2
 800871a:	bfc4      	itt	gt
 800871c:	1a9b      	subgt	r3, r3, r2
 800871e:	18ed      	addgt	r5, r5, r3
 8008720:	42b5      	cmp	r5, r6
 8008722:	d11a      	bne.n	800875a <_printf_common+0xd2>
 8008724:	2000      	movs	r0, #0
 8008726:	e008      	b.n	800873a <_printf_common+0xb2>
 8008728:	2301      	movs	r3, #1
 800872a:	4652      	mov	r2, sl
 800872c:	4641      	mov	r1, r8
 800872e:	4638      	mov	r0, r7
 8008730:	47c8      	blx	r9
 8008732:	3001      	adds	r0, #1
 8008734:	d103      	bne.n	800873e <_printf_common+0xb6>
 8008736:	f04f 30ff 	mov.w	r0, #4294967295
 800873a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800873e:	3501      	adds	r5, #1
 8008740:	e7c1      	b.n	80086c6 <_printf_common+0x3e>
 8008742:	2030      	movs	r0, #48	@ 0x30
 8008744:	18e1      	adds	r1, r4, r3
 8008746:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800874a:	1c5a      	adds	r2, r3, #1
 800874c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008750:	4422      	add	r2, r4
 8008752:	3302      	adds	r3, #2
 8008754:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008758:	e7c2      	b.n	80086e0 <_printf_common+0x58>
 800875a:	2301      	movs	r3, #1
 800875c:	4622      	mov	r2, r4
 800875e:	4641      	mov	r1, r8
 8008760:	4638      	mov	r0, r7
 8008762:	47c8      	blx	r9
 8008764:	3001      	adds	r0, #1
 8008766:	d0e6      	beq.n	8008736 <_printf_common+0xae>
 8008768:	3601      	adds	r6, #1
 800876a:	e7d9      	b.n	8008720 <_printf_common+0x98>

0800876c <_printf_i>:
 800876c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008770:	7e0f      	ldrb	r7, [r1, #24]
 8008772:	4691      	mov	r9, r2
 8008774:	2f78      	cmp	r7, #120	@ 0x78
 8008776:	4680      	mov	r8, r0
 8008778:	460c      	mov	r4, r1
 800877a:	469a      	mov	sl, r3
 800877c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800877e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008782:	d807      	bhi.n	8008794 <_printf_i+0x28>
 8008784:	2f62      	cmp	r7, #98	@ 0x62
 8008786:	d80a      	bhi.n	800879e <_printf_i+0x32>
 8008788:	2f00      	cmp	r7, #0
 800878a:	f000 80d3 	beq.w	8008934 <_printf_i+0x1c8>
 800878e:	2f58      	cmp	r7, #88	@ 0x58
 8008790:	f000 80ba 	beq.w	8008908 <_printf_i+0x19c>
 8008794:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008798:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800879c:	e03a      	b.n	8008814 <_printf_i+0xa8>
 800879e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80087a2:	2b15      	cmp	r3, #21
 80087a4:	d8f6      	bhi.n	8008794 <_printf_i+0x28>
 80087a6:	a101      	add	r1, pc, #4	@ (adr r1, 80087ac <_printf_i+0x40>)
 80087a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087ac:	08008805 	.word	0x08008805
 80087b0:	08008819 	.word	0x08008819
 80087b4:	08008795 	.word	0x08008795
 80087b8:	08008795 	.word	0x08008795
 80087bc:	08008795 	.word	0x08008795
 80087c0:	08008795 	.word	0x08008795
 80087c4:	08008819 	.word	0x08008819
 80087c8:	08008795 	.word	0x08008795
 80087cc:	08008795 	.word	0x08008795
 80087d0:	08008795 	.word	0x08008795
 80087d4:	08008795 	.word	0x08008795
 80087d8:	0800891b 	.word	0x0800891b
 80087dc:	08008843 	.word	0x08008843
 80087e0:	080088d5 	.word	0x080088d5
 80087e4:	08008795 	.word	0x08008795
 80087e8:	08008795 	.word	0x08008795
 80087ec:	0800893d 	.word	0x0800893d
 80087f0:	08008795 	.word	0x08008795
 80087f4:	08008843 	.word	0x08008843
 80087f8:	08008795 	.word	0x08008795
 80087fc:	08008795 	.word	0x08008795
 8008800:	080088dd 	.word	0x080088dd
 8008804:	6833      	ldr	r3, [r6, #0]
 8008806:	1d1a      	adds	r2, r3, #4
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	6032      	str	r2, [r6, #0]
 800880c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008810:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008814:	2301      	movs	r3, #1
 8008816:	e09e      	b.n	8008956 <_printf_i+0x1ea>
 8008818:	6833      	ldr	r3, [r6, #0]
 800881a:	6820      	ldr	r0, [r4, #0]
 800881c:	1d19      	adds	r1, r3, #4
 800881e:	6031      	str	r1, [r6, #0]
 8008820:	0606      	lsls	r6, r0, #24
 8008822:	d501      	bpl.n	8008828 <_printf_i+0xbc>
 8008824:	681d      	ldr	r5, [r3, #0]
 8008826:	e003      	b.n	8008830 <_printf_i+0xc4>
 8008828:	0645      	lsls	r5, r0, #25
 800882a:	d5fb      	bpl.n	8008824 <_printf_i+0xb8>
 800882c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008830:	2d00      	cmp	r5, #0
 8008832:	da03      	bge.n	800883c <_printf_i+0xd0>
 8008834:	232d      	movs	r3, #45	@ 0x2d
 8008836:	426d      	negs	r5, r5
 8008838:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800883c:	230a      	movs	r3, #10
 800883e:	4859      	ldr	r0, [pc, #356]	@ (80089a4 <_printf_i+0x238>)
 8008840:	e011      	b.n	8008866 <_printf_i+0xfa>
 8008842:	6821      	ldr	r1, [r4, #0]
 8008844:	6833      	ldr	r3, [r6, #0]
 8008846:	0608      	lsls	r0, r1, #24
 8008848:	f853 5b04 	ldr.w	r5, [r3], #4
 800884c:	d402      	bmi.n	8008854 <_printf_i+0xe8>
 800884e:	0649      	lsls	r1, r1, #25
 8008850:	bf48      	it	mi
 8008852:	b2ad      	uxthmi	r5, r5
 8008854:	2f6f      	cmp	r7, #111	@ 0x6f
 8008856:	6033      	str	r3, [r6, #0]
 8008858:	bf14      	ite	ne
 800885a:	230a      	movne	r3, #10
 800885c:	2308      	moveq	r3, #8
 800885e:	4851      	ldr	r0, [pc, #324]	@ (80089a4 <_printf_i+0x238>)
 8008860:	2100      	movs	r1, #0
 8008862:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008866:	6866      	ldr	r6, [r4, #4]
 8008868:	2e00      	cmp	r6, #0
 800886a:	bfa8      	it	ge
 800886c:	6821      	ldrge	r1, [r4, #0]
 800886e:	60a6      	str	r6, [r4, #8]
 8008870:	bfa4      	itt	ge
 8008872:	f021 0104 	bicge.w	r1, r1, #4
 8008876:	6021      	strge	r1, [r4, #0]
 8008878:	b90d      	cbnz	r5, 800887e <_printf_i+0x112>
 800887a:	2e00      	cmp	r6, #0
 800887c:	d04b      	beq.n	8008916 <_printf_i+0x1aa>
 800887e:	4616      	mov	r6, r2
 8008880:	fbb5 f1f3 	udiv	r1, r5, r3
 8008884:	fb03 5711 	mls	r7, r3, r1, r5
 8008888:	5dc7      	ldrb	r7, [r0, r7]
 800888a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800888e:	462f      	mov	r7, r5
 8008890:	42bb      	cmp	r3, r7
 8008892:	460d      	mov	r5, r1
 8008894:	d9f4      	bls.n	8008880 <_printf_i+0x114>
 8008896:	2b08      	cmp	r3, #8
 8008898:	d10b      	bne.n	80088b2 <_printf_i+0x146>
 800889a:	6823      	ldr	r3, [r4, #0]
 800889c:	07df      	lsls	r7, r3, #31
 800889e:	d508      	bpl.n	80088b2 <_printf_i+0x146>
 80088a0:	6923      	ldr	r3, [r4, #16]
 80088a2:	6861      	ldr	r1, [r4, #4]
 80088a4:	4299      	cmp	r1, r3
 80088a6:	bfde      	ittt	le
 80088a8:	2330      	movle	r3, #48	@ 0x30
 80088aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80088ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 80088b2:	1b92      	subs	r2, r2, r6
 80088b4:	6122      	str	r2, [r4, #16]
 80088b6:	464b      	mov	r3, r9
 80088b8:	4621      	mov	r1, r4
 80088ba:	4640      	mov	r0, r8
 80088bc:	f8cd a000 	str.w	sl, [sp]
 80088c0:	aa03      	add	r2, sp, #12
 80088c2:	f7ff fee1 	bl	8008688 <_printf_common>
 80088c6:	3001      	adds	r0, #1
 80088c8:	d14a      	bne.n	8008960 <_printf_i+0x1f4>
 80088ca:	f04f 30ff 	mov.w	r0, #4294967295
 80088ce:	b004      	add	sp, #16
 80088d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088d4:	6823      	ldr	r3, [r4, #0]
 80088d6:	f043 0320 	orr.w	r3, r3, #32
 80088da:	6023      	str	r3, [r4, #0]
 80088dc:	2778      	movs	r7, #120	@ 0x78
 80088de:	4832      	ldr	r0, [pc, #200]	@ (80089a8 <_printf_i+0x23c>)
 80088e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80088e4:	6823      	ldr	r3, [r4, #0]
 80088e6:	6831      	ldr	r1, [r6, #0]
 80088e8:	061f      	lsls	r7, r3, #24
 80088ea:	f851 5b04 	ldr.w	r5, [r1], #4
 80088ee:	d402      	bmi.n	80088f6 <_printf_i+0x18a>
 80088f0:	065f      	lsls	r7, r3, #25
 80088f2:	bf48      	it	mi
 80088f4:	b2ad      	uxthmi	r5, r5
 80088f6:	6031      	str	r1, [r6, #0]
 80088f8:	07d9      	lsls	r1, r3, #31
 80088fa:	bf44      	itt	mi
 80088fc:	f043 0320 	orrmi.w	r3, r3, #32
 8008900:	6023      	strmi	r3, [r4, #0]
 8008902:	b11d      	cbz	r5, 800890c <_printf_i+0x1a0>
 8008904:	2310      	movs	r3, #16
 8008906:	e7ab      	b.n	8008860 <_printf_i+0xf4>
 8008908:	4826      	ldr	r0, [pc, #152]	@ (80089a4 <_printf_i+0x238>)
 800890a:	e7e9      	b.n	80088e0 <_printf_i+0x174>
 800890c:	6823      	ldr	r3, [r4, #0]
 800890e:	f023 0320 	bic.w	r3, r3, #32
 8008912:	6023      	str	r3, [r4, #0]
 8008914:	e7f6      	b.n	8008904 <_printf_i+0x198>
 8008916:	4616      	mov	r6, r2
 8008918:	e7bd      	b.n	8008896 <_printf_i+0x12a>
 800891a:	6833      	ldr	r3, [r6, #0]
 800891c:	6825      	ldr	r5, [r4, #0]
 800891e:	1d18      	adds	r0, r3, #4
 8008920:	6961      	ldr	r1, [r4, #20]
 8008922:	6030      	str	r0, [r6, #0]
 8008924:	062e      	lsls	r6, r5, #24
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	d501      	bpl.n	800892e <_printf_i+0x1c2>
 800892a:	6019      	str	r1, [r3, #0]
 800892c:	e002      	b.n	8008934 <_printf_i+0x1c8>
 800892e:	0668      	lsls	r0, r5, #25
 8008930:	d5fb      	bpl.n	800892a <_printf_i+0x1be>
 8008932:	8019      	strh	r1, [r3, #0]
 8008934:	2300      	movs	r3, #0
 8008936:	4616      	mov	r6, r2
 8008938:	6123      	str	r3, [r4, #16]
 800893a:	e7bc      	b.n	80088b6 <_printf_i+0x14a>
 800893c:	6833      	ldr	r3, [r6, #0]
 800893e:	2100      	movs	r1, #0
 8008940:	1d1a      	adds	r2, r3, #4
 8008942:	6032      	str	r2, [r6, #0]
 8008944:	681e      	ldr	r6, [r3, #0]
 8008946:	6862      	ldr	r2, [r4, #4]
 8008948:	4630      	mov	r0, r6
 800894a:	f000 f859 	bl	8008a00 <memchr>
 800894e:	b108      	cbz	r0, 8008954 <_printf_i+0x1e8>
 8008950:	1b80      	subs	r0, r0, r6
 8008952:	6060      	str	r0, [r4, #4]
 8008954:	6863      	ldr	r3, [r4, #4]
 8008956:	6123      	str	r3, [r4, #16]
 8008958:	2300      	movs	r3, #0
 800895a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800895e:	e7aa      	b.n	80088b6 <_printf_i+0x14a>
 8008960:	4632      	mov	r2, r6
 8008962:	4649      	mov	r1, r9
 8008964:	4640      	mov	r0, r8
 8008966:	6923      	ldr	r3, [r4, #16]
 8008968:	47d0      	blx	sl
 800896a:	3001      	adds	r0, #1
 800896c:	d0ad      	beq.n	80088ca <_printf_i+0x15e>
 800896e:	6823      	ldr	r3, [r4, #0]
 8008970:	079b      	lsls	r3, r3, #30
 8008972:	d413      	bmi.n	800899c <_printf_i+0x230>
 8008974:	68e0      	ldr	r0, [r4, #12]
 8008976:	9b03      	ldr	r3, [sp, #12]
 8008978:	4298      	cmp	r0, r3
 800897a:	bfb8      	it	lt
 800897c:	4618      	movlt	r0, r3
 800897e:	e7a6      	b.n	80088ce <_printf_i+0x162>
 8008980:	2301      	movs	r3, #1
 8008982:	4632      	mov	r2, r6
 8008984:	4649      	mov	r1, r9
 8008986:	4640      	mov	r0, r8
 8008988:	47d0      	blx	sl
 800898a:	3001      	adds	r0, #1
 800898c:	d09d      	beq.n	80088ca <_printf_i+0x15e>
 800898e:	3501      	adds	r5, #1
 8008990:	68e3      	ldr	r3, [r4, #12]
 8008992:	9903      	ldr	r1, [sp, #12]
 8008994:	1a5b      	subs	r3, r3, r1
 8008996:	42ab      	cmp	r3, r5
 8008998:	dcf2      	bgt.n	8008980 <_printf_i+0x214>
 800899a:	e7eb      	b.n	8008974 <_printf_i+0x208>
 800899c:	2500      	movs	r5, #0
 800899e:	f104 0619 	add.w	r6, r4, #25
 80089a2:	e7f5      	b.n	8008990 <_printf_i+0x224>
 80089a4:	080093ab 	.word	0x080093ab
 80089a8:	080093bc 	.word	0x080093bc

080089ac <memmove>:
 80089ac:	4288      	cmp	r0, r1
 80089ae:	b510      	push	{r4, lr}
 80089b0:	eb01 0402 	add.w	r4, r1, r2
 80089b4:	d902      	bls.n	80089bc <memmove+0x10>
 80089b6:	4284      	cmp	r4, r0
 80089b8:	4623      	mov	r3, r4
 80089ba:	d807      	bhi.n	80089cc <memmove+0x20>
 80089bc:	1e43      	subs	r3, r0, #1
 80089be:	42a1      	cmp	r1, r4
 80089c0:	d008      	beq.n	80089d4 <memmove+0x28>
 80089c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089ca:	e7f8      	b.n	80089be <memmove+0x12>
 80089cc:	4601      	mov	r1, r0
 80089ce:	4402      	add	r2, r0
 80089d0:	428a      	cmp	r2, r1
 80089d2:	d100      	bne.n	80089d6 <memmove+0x2a>
 80089d4:	bd10      	pop	{r4, pc}
 80089d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80089de:	e7f7      	b.n	80089d0 <memmove+0x24>

080089e0 <_sbrk_r>:
 80089e0:	b538      	push	{r3, r4, r5, lr}
 80089e2:	2300      	movs	r3, #0
 80089e4:	4d05      	ldr	r5, [pc, #20]	@ (80089fc <_sbrk_r+0x1c>)
 80089e6:	4604      	mov	r4, r0
 80089e8:	4608      	mov	r0, r1
 80089ea:	602b      	str	r3, [r5, #0]
 80089ec:	f7f8 fdc2 	bl	8001574 <_sbrk>
 80089f0:	1c43      	adds	r3, r0, #1
 80089f2:	d102      	bne.n	80089fa <_sbrk_r+0x1a>
 80089f4:	682b      	ldr	r3, [r5, #0]
 80089f6:	b103      	cbz	r3, 80089fa <_sbrk_r+0x1a>
 80089f8:	6023      	str	r3, [r4, #0]
 80089fa:	bd38      	pop	{r3, r4, r5, pc}
 80089fc:	20002050 	.word	0x20002050

08008a00 <memchr>:
 8008a00:	4603      	mov	r3, r0
 8008a02:	b510      	push	{r4, lr}
 8008a04:	b2c9      	uxtb	r1, r1
 8008a06:	4402      	add	r2, r0
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	d101      	bne.n	8008a12 <memchr+0x12>
 8008a0e:	2000      	movs	r0, #0
 8008a10:	e003      	b.n	8008a1a <memchr+0x1a>
 8008a12:	7804      	ldrb	r4, [r0, #0]
 8008a14:	3301      	adds	r3, #1
 8008a16:	428c      	cmp	r4, r1
 8008a18:	d1f6      	bne.n	8008a08 <memchr+0x8>
 8008a1a:	bd10      	pop	{r4, pc}

08008a1c <_realloc_r>:
 8008a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a20:	4680      	mov	r8, r0
 8008a22:	4615      	mov	r5, r2
 8008a24:	460c      	mov	r4, r1
 8008a26:	b921      	cbnz	r1, 8008a32 <_realloc_r+0x16>
 8008a28:	4611      	mov	r1, r2
 8008a2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a2e:	f7ff bc47 	b.w	80082c0 <_malloc_r>
 8008a32:	b92a      	cbnz	r2, 8008a40 <_realloc_r+0x24>
 8008a34:	f7ff fbda 	bl	80081ec <_free_r>
 8008a38:	2400      	movs	r4, #0
 8008a3a:	4620      	mov	r0, r4
 8008a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a40:	f000 f81a 	bl	8008a78 <_malloc_usable_size_r>
 8008a44:	4285      	cmp	r5, r0
 8008a46:	4606      	mov	r6, r0
 8008a48:	d802      	bhi.n	8008a50 <_realloc_r+0x34>
 8008a4a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008a4e:	d8f4      	bhi.n	8008a3a <_realloc_r+0x1e>
 8008a50:	4629      	mov	r1, r5
 8008a52:	4640      	mov	r0, r8
 8008a54:	f7ff fc34 	bl	80082c0 <_malloc_r>
 8008a58:	4607      	mov	r7, r0
 8008a5a:	2800      	cmp	r0, #0
 8008a5c:	d0ec      	beq.n	8008a38 <_realloc_r+0x1c>
 8008a5e:	42b5      	cmp	r5, r6
 8008a60:	462a      	mov	r2, r5
 8008a62:	4621      	mov	r1, r4
 8008a64:	bf28      	it	cs
 8008a66:	4632      	movcs	r2, r6
 8008a68:	f7ff fbb2 	bl	80081d0 <memcpy>
 8008a6c:	4621      	mov	r1, r4
 8008a6e:	4640      	mov	r0, r8
 8008a70:	f7ff fbbc 	bl	80081ec <_free_r>
 8008a74:	463c      	mov	r4, r7
 8008a76:	e7e0      	b.n	8008a3a <_realloc_r+0x1e>

08008a78 <_malloc_usable_size_r>:
 8008a78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a7c:	1f18      	subs	r0, r3, #4
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	bfbc      	itt	lt
 8008a82:	580b      	ldrlt	r3, [r1, r0]
 8008a84:	18c0      	addlt	r0, r0, r3
 8008a86:	4770      	bx	lr

08008a88 <_init>:
 8008a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a8a:	bf00      	nop
 8008a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a8e:	bc08      	pop	{r3}
 8008a90:	469e      	mov	lr, r3
 8008a92:	4770      	bx	lr

08008a94 <_fini>:
 8008a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a96:	bf00      	nop
 8008a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a9a:	bc08      	pop	{r3}
 8008a9c:	469e      	mov	lr, r3
 8008a9e:	4770      	bx	lr
