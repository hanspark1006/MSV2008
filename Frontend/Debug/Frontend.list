
Frontend.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095f4  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a84  08009704  08009704  0000a704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a188  0800a188  0000c1a8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a188  0800a188  0000b188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a190  0800a190  0000c1a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a190  0800a190  0000b190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a194  0800a194  0000b194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001a8  20000000  0800a198  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000036d0  200001a8  0800a340  0000c1a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003878  0800a340  0000c878  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a262  00000000  00000000  0000c1d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004abb  00000000  00000000  00026433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001738  00000000  00000000  0002aef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011d9  00000000  00000000  0002c628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cc97  00000000  00000000  0002d801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d238  00000000  00000000  0004a498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096f05  00000000  00000000  000676d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fe5d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000636c  00000000  00000000  000fe618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  00104984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001a8 	.word	0x200001a8
 800012c:	00000000 	.word	0x00000000
 8000130:	080096ec 	.word	0x080096ec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ac 	.word	0x200001ac
 800014c:	080096ec 	.word	0x080096ec

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <key_check>:
extern osMessageQId keyQueueHandle;
/* Private function prototypes -----------------------------------------------*/
//static void AppsTask(void const * argument);
/* Private functions ---------------------------------------------------------*/
uint8_t key_check(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
	uint8_t read_key = 0;
 8000166:	2300      	movs	r3, #0
 8000168:	71fb      	strb	r3, [r7, #7]

	if(HAL_GPIO_ReadPin(ENTER_SW_GPIO_Port, ENTER_SW_Pin) == GPIO_PIN_RESET){
 800016a:	2101      	movs	r1, #1
 800016c:	4817      	ldr	r0, [pc, #92]	@ (80001cc <key_check+0x6c>)
 800016e:	f004 f8c5 	bl	80042fc <HAL_GPIO_ReadPin>
 8000172:	4603      	mov	r3, r0
 8000174:	2b00      	cmp	r3, #0
 8000176:	d103      	bne.n	8000180 <key_check+0x20>
		//LOG_INF("Enter\r\n");
		read_key |= KEY_ENTER_PIN;
 8000178:	79fb      	ldrb	r3, [r7, #7]
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	71fb      	strb	r3, [r7, #7]
	}
	if(HAL_GPIO_ReadPin(UP_SW_GPIO_Port, UP_SW_Pin) == GPIO_PIN_RESET){
 8000180:	2180      	movs	r1, #128	@ 0x80
 8000182:	4813      	ldr	r0, [pc, #76]	@ (80001d0 <key_check+0x70>)
 8000184:	f004 f8ba 	bl	80042fc <HAL_GPIO_ReadPin>
 8000188:	4603      	mov	r3, r0
 800018a:	2b00      	cmp	r3, #0
 800018c:	d103      	bne.n	8000196 <key_check+0x36>
		//LOG_INF("UP\r\n");
		read_key |= KEY_UP_PIN;
 800018e:	79fb      	ldrb	r3, [r7, #7]
 8000190:	f043 0302 	orr.w	r3, r3, #2
 8000194:	71fb      	strb	r3, [r7, #7]
	}
	if(HAL_GPIO_ReadPin(DOWN_SW_GPIO_Port, DOWN_SW_Pin) == GPIO_PIN_RESET){
 8000196:	2140      	movs	r1, #64	@ 0x40
 8000198:	480d      	ldr	r0, [pc, #52]	@ (80001d0 <key_check+0x70>)
 800019a:	f004 f8af 	bl	80042fc <HAL_GPIO_ReadPin>
 800019e:	4603      	mov	r3, r0
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d103      	bne.n	80001ac <key_check+0x4c>
		//LOG_INF("DOWN\r\n");
		read_key |= KEY_DOWN_PIN;
 80001a4:	79fb      	ldrb	r3, [r7, #7]
 80001a6:	f043 0304 	orr.w	r3, r3, #4
 80001aa:	71fb      	strb	r3, [r7, #7]
	}
	if(HAL_GPIO_ReadPin(MODE_SW_GPIO_Port, MODE_SW_Pin) == GPIO_PIN_RESET){
 80001ac:	2102      	movs	r1, #2
 80001ae:	4807      	ldr	r0, [pc, #28]	@ (80001cc <key_check+0x6c>)
 80001b0:	f004 f8a4 	bl	80042fc <HAL_GPIO_ReadPin>
 80001b4:	4603      	mov	r3, r0
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d103      	bne.n	80001c2 <key_check+0x62>
		//LOG_INF("MODE\r\n");
		read_key |= KEY_MODE_PIN;
 80001ba:	79fb      	ldrb	r3, [r7, #7]
 80001bc:	f043 0308 	orr.w	r3, r3, #8
 80001c0:	71fb      	strb	r3, [r7, #7]
	}
	return read_key;
 80001c2:	79fb      	ldrb	r3, [r7, #7]
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	40010c00 	.word	0x40010c00
 80001d0:	40010800 	.word	0x40010800

080001d4 <btn_tmr_callback>:

static uint8_t proc_blink = 0;

void btn_tmr_callback(void const *argument)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	if(m_cfg.btn_status == eBTN_PRESS){
 80001dc:	4b0b      	ldr	r3, [pc, #44]	@ (800020c <btn_tmr_callback+0x38>)
 80001de:	789b      	ldrb	r3, [r3, #2]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d104      	bne.n	80001ee <btn_tmr_callback+0x1a>
		m_cfg.key_tick++;
 80001e4:	4b09      	ldr	r3, [pc, #36]	@ (800020c <btn_tmr_callback+0x38>)
 80001e6:	689b      	ldr	r3, [r3, #8]
 80001e8:	3301      	adds	r3, #1
 80001ea:	4a08      	ldr	r2, [pc, #32]	@ (800020c <btn_tmr_callback+0x38>)
 80001ec:	6093      	str	r3, [r2, #8]
	}

	if(m_cfg.blink_enable){
 80001ee:	4b07      	ldr	r3, [pc, #28]	@ (800020c <btn_tmr_callback+0x38>)
 80001f0:	7b1b      	ldrb	r3, [r3, #12]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d005      	beq.n	8000202 <btn_tmr_callback+0x2e>
		m_cfg.blink_tick++;
 80001f6:	4b05      	ldr	r3, [pc, #20]	@ (800020c <btn_tmr_callback+0x38>)
 80001f8:	89db      	ldrh	r3, [r3, #14]
 80001fa:	3301      	adds	r3, #1
 80001fc:	b29a      	uxth	r2, r3
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <btn_tmr_callback+0x38>)
 8000200:	81da      	strh	r2, [r3, #14]
	}
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000000 	.word	0x20000000

08000210 <set_skip_key>:

void set_skip_key(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
	m_cfg.key_tick = 0;
 8000214:	4b06      	ldr	r3, [pc, #24]	@ (8000230 <set_skip_key+0x20>)
 8000216:	2200      	movs	r2, #0
 8000218:	609a      	str	r2, [r3, #8]
	m_cfg.btn_status = eBTN_RELEASE;
 800021a:	4b05      	ldr	r3, [pc, #20]	@ (8000230 <set_skip_key+0x20>)
 800021c:	2201      	movs	r2, #1
 800021e:	709a      	strb	r2, [r3, #2]
	m_cfg.skip_press = 1;
 8000220:	4b03      	ldr	r3, [pc, #12]	@ (8000230 <set_skip_key+0x20>)
 8000222:	2201      	movs	r2, #1
 8000224:	715a      	strb	r2, [r3, #5]
	LOG_DBG("Set skip Key");
 8000226:	4803      	ldr	r0, [pc, #12]	@ (8000234 <set_skip_key+0x24>)
 8000228:	f000 fd30 	bl	8000c8c <Printf>
}
 800022c:	bf00      	nop
 800022e:	bd80      	pop	{r7, pc}
 8000230:	20000000 	.word	0x20000000
 8000234:	08009704 	.word	0x08009704

08000238 <key_process>:

static Key_t multi_key=eKey_Idle, get_key = eKey_Idle,  old_key = eKey_Idle, release_old = eKey_Idle;
Key_t key_process(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
	uint8_t read_key;
	Key_t press_key = eKey_Idle;
 800023e:	2300      	movs	r3, #0
 8000240:	71fb      	strb	r3, [r7, #7]

	read_key = key_check();
 8000242:	f7ff ff8d 	bl	8000160 <key_check>
 8000246:	4603      	mov	r3, r0
 8000248:	71bb      	strb	r3, [r7, #6]
	if(read_key & 0x0F){ // down key
 800024a:	79bb      	ldrb	r3, [r7, #6]
 800024c:	f003 030f 	and.w	r3, r3, #15
 8000250:	2b00      	cmp	r3, #0
 8000252:	d07f      	beq.n	8000354 <key_process+0x11c>
		//LOG_DBG("Read key[%s] skip key[%d]", key_id_2_str(read_key), m_cfg.skip_press);
		if(m_cfg.skip_press){
 8000254:	4b59      	ldr	r3, [pc, #356]	@ (80003bc <key_process+0x184>)
 8000256:	795b      	ldrb	r3, [r3, #5]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <key_process+0x28>
			return press_key;
 800025c:	79fb      	ldrb	r3, [r7, #7]
 800025e:	e0a9      	b.n	80003b4 <key_process+0x17c>
		}
		m_cfg.btn_status = eBTN_PRESS;
 8000260:	4b56      	ldr	r3, [pc, #344]	@ (80003bc <key_process+0x184>)
 8000262:	2200      	movs	r2, #0
 8000264:	709a      	strb	r2, [r3, #2]
		switch(read_key){
 8000266:	79bb      	ldrb	r3, [r7, #6]
 8000268:	3b03      	subs	r3, #3
 800026a:	2b09      	cmp	r3, #9
 800026c:	bf8c      	ite	hi
 800026e:	2201      	movhi	r2, #1
 8000270:	2200      	movls	r2, #0
 8000272:	b2d2      	uxtb	r2, r2
 8000274:	2a00      	cmp	r2, #0
 8000276:	d110      	bne.n	800029a <key_process+0x62>
 8000278:	f240 22cd 	movw	r2, #717	@ 0x2cd
 800027c:	fa22 f303 	lsr.w	r3, r2, r3
 8000280:	f003 0301 	and.w	r3, r3, #1
 8000284:	2b00      	cmp	r3, #0
 8000286:	bf14      	ite	ne
 8000288:	2301      	movne	r3, #1
 800028a:	2300      	moveq	r3, #0
 800028c:	b2db      	uxtb	r3, r3
 800028e:	2b00      	cmp	r3, #0
 8000290:	d003      	beq.n	800029a <key_process+0x62>
			case KEY_CUR_DOWN_PIN:
			case KEY_FACTORY_PIN:
			case KEY_USER_PIN:
			case KEY_VERSION_PIN:
			case KEY_CHSEL_PIN:
				multi_key = read_key;
 8000292:	4a4b      	ldr	r2, [pc, #300]	@ (80003c0 <key_process+0x188>)
 8000294:	79bb      	ldrb	r3, [r7, #6]
 8000296:	7013      	strb	r3, [r2, #0]
				break;
 8000298:	e003      	b.n	80002a2 <key_process+0x6a>
			default:
				get_key = read_key;
 800029a:	4a4a      	ldr	r2, [pc, #296]	@ (80003c4 <key_process+0x18c>)
 800029c:	79bb      	ldrb	r3, [r7, #6]
 800029e:	7013      	strb	r3, [r2, #0]
				break;
 80002a0:	bf00      	nop
		}
		if(old_key != read_key){
 80002a2:	4b49      	ldr	r3, [pc, #292]	@ (80003c8 <key_process+0x190>)
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	79ba      	ldrb	r2, [r7, #6]
 80002a8:	429a      	cmp	r2, r3
 80002aa:	d002      	beq.n	80002b2 <key_process+0x7a>
			//LOG_DBG("tick[%d] %s", m_cfg.key_tick, key_id_2_str(read_key));
			old_key = read_key;
 80002ac:	4a46      	ldr	r2, [pc, #280]	@ (80003c8 <key_process+0x190>)
 80002ae:	79bb      	ldrb	r3, [r7, #6]
 80002b0:	7013      	strb	r3, [r2, #0]
		}
		if(get_key == eKey_Mode){
 80002b2:	4b44      	ldr	r3, [pc, #272]	@ (80003c4 <key_process+0x18c>)
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	2b08      	cmp	r3, #8
 80002b8:	d13a      	bne.n	8000330 <key_process+0xf8>
			if((m_cfg.setting_mode) && (m_cfg.key_tick > TIMER_50_MSEC)){
 80002ba:	4b40      	ldr	r3, [pc, #256]	@ (80003bc <key_process+0x184>)
 80002bc:	78db      	ldrb	r3, [r3, #3]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d014      	beq.n	80002ec <key_process+0xb4>
 80002c2:	4b3e      	ldr	r3, [pc, #248]	@ (80003bc <key_process+0x184>)
 80002c4:	689b      	ldr	r3, [r3, #8]
 80002c6:	2b32      	cmp	r3, #50	@ 0x32
 80002c8:	d910      	bls.n	80002ec <key_process+0xb4>
				if(multi_key != eKey_Idle){
 80002ca:	4b3d      	ldr	r3, [pc, #244]	@ (80003c0 <key_process+0x188>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d002      	beq.n	80002d8 <key_process+0xa0>
					m_cfg.mul_press = 1;
 80002d2:	4b3a      	ldr	r3, [pc, #232]	@ (80003bc <key_process+0x184>)
 80002d4:	2201      	movs	r2, #1
 80002d6:	711a      	strb	r2, [r3, #4]
				}
				press_key = multi_key;
 80002d8:	4b39      	ldr	r3, [pc, #228]	@ (80003c0 <key_process+0x188>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	71fb      	strb	r3, [r7, #7]
				multi_key = eKey_Idle;
 80002de:	4b38      	ldr	r3, [pc, #224]	@ (80003c0 <key_process+0x188>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	701a      	strb	r2, [r3, #0]
				m_cfg.key_tick = 0;
 80002e4:	4b35      	ldr	r3, [pc, #212]	@ (80003bc <key_process+0x184>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	e01f      	b.n	800032c <key_process+0xf4>
			}else if(m_cfg.key_tick >= TIMER_2_SEC){
 80002ec:	4b33      	ldr	r3, [pc, #204]	@ (80003bc <key_process+0x184>)
 80002ee:	689b      	ldr	r3, [r3, #8]
 80002f0:	2bc7      	cmp	r3, #199	@ 0xc7
 80002f2:	d919      	bls.n	8000328 <key_process+0xf0>
				if((m_cfg.setting_mode == 0) && (m_cfg.remote_ctrl == 0)){
 80002f4:	4b31      	ldr	r3, [pc, #196]	@ (80003bc <key_process+0x184>)
 80002f6:	78db      	ldrb	r3, [r3, #3]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d10c      	bne.n	8000316 <key_process+0xde>
 80002fc:	4b2f      	ldr	r3, [pc, #188]	@ (80003bc <key_process+0x184>)
 80002fe:	7c1b      	ldrb	r3, [r3, #16]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d108      	bne.n	8000316 <key_process+0xde>
					press_key = eKey_SetMode;
 8000304:	2310      	movs	r3, #16
 8000306:	71fb      	strb	r3, [r7, #7]
					m_cfg.setting_mode = 1;
 8000308:	4b2c      	ldr	r3, [pc, #176]	@ (80003bc <key_process+0x184>)
 800030a:	2201      	movs	r2, #1
 800030c:	70da      	strb	r2, [r3, #3]
					m_cfg.blink_tick = 0;
 800030e:	4b2b      	ldr	r3, [pc, #172]	@ (80003bc <key_process+0x184>)
 8000310:	2200      	movs	r2, #0
 8000312:	81da      	strh	r2, [r3, #14]
 8000314:	e005      	b.n	8000322 <key_process+0xea>
				}else if(m_cfg.remote_ctrl){
 8000316:	4b29      	ldr	r3, [pc, #164]	@ (80003bc <key_process+0x184>)
 8000318:	7c1b      	ldrb	r3, [r3, #16]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <key_process+0xea>
					press_key = eKey_ExitRemote;
 800031e:	2320      	movs	r3, #32
 8000320:	71fb      	strb	r3, [r7, #7]
				}
				//LOG_DBG("1.tick[%d] %s", m_cfg.key_tick, key_id_2_str(press_key));
				set_skip_key();
 8000322:	f7ff ff75 	bl	8000210 <set_skip_key>
 8000326:	e001      	b.n	800032c <key_process+0xf4>
			}else{
				return eKey_Idle;
 8000328:	2300      	movs	r3, #0
 800032a:	e043      	b.n	80003b4 <key_process+0x17c>
			}

			return press_key;
 800032c:	79fb      	ldrb	r3, [r7, #7]
 800032e:	e041      	b.n	80003b4 <key_process+0x17c>
		}

		if((multi_key!=eKey_Idle) && (m_cfg.key_tick > TIMER_5_SEC)){
 8000330:	4b23      	ldr	r3, [pc, #140]	@ (80003c0 <key_process+0x188>)
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d03c      	beq.n	80003b2 <key_process+0x17a>
 8000338:	4b20      	ldr	r3, [pc, #128]	@ (80003bc <key_process+0x184>)
 800033a:	689b      	ldr	r3, [r3, #8]
 800033c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000340:	d937      	bls.n	80003b2 <key_process+0x17a>
			press_key = multi_key;
 8000342:	4b1f      	ldr	r3, [pc, #124]	@ (80003c0 <key_process+0x188>)
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	71fb      	strb	r3, [r7, #7]
			multi_key = eKey_Idle;
 8000348:	4b1d      	ldr	r3, [pc, #116]	@ (80003c0 <key_process+0x188>)
 800034a:	2200      	movs	r2, #0
 800034c:	701a      	strb	r2, [r3, #0]
			//LOG_DBG("2.tick[%d] %s", m_cfg.key_tick, key_id_2_str(press_key));
			set_skip_key();
 800034e:	f7ff ff5f 	bl	8000210 <set_skip_key>
 8000352:	e02e      	b.n	80003b2 <key_process+0x17a>
		}
	}else{  // up key
		if((get_key != eKey_Idle)&& (release_old != get_key)){
 8000354:	4b1b      	ldr	r3, [pc, #108]	@ (80003c4 <key_process+0x18c>)
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d009      	beq.n	8000370 <key_process+0x138>
 800035c:	4b1b      	ldr	r3, [pc, #108]	@ (80003cc <key_process+0x194>)
 800035e:	781a      	ldrb	r2, [r3, #0]
 8000360:	4b18      	ldr	r3, [pc, #96]	@ (80003c4 <key_process+0x18c>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	429a      	cmp	r2, r3
 8000366:	d003      	beq.n	8000370 <key_process+0x138>
			//LOG_DBG("Release[%s] tick[%d]", key_id_2_str(get_key), m_cfg.key_tick);
			release_old = get_key;
 8000368:	4b16      	ldr	r3, [pc, #88]	@ (80003c4 <key_process+0x18c>)
 800036a:	781a      	ldrb	r2, [r3, #0]
 800036c:	4b17      	ldr	r3, [pc, #92]	@ (80003cc <key_process+0x194>)
 800036e:	701a      	strb	r2, [r3, #0]
		}
		m_cfg.btn_status = eBTN_RELEASE;
 8000370:	4b12      	ldr	r3, [pc, #72]	@ (80003bc <key_process+0x184>)
 8000372:	2201      	movs	r2, #1
 8000374:	709a      	strb	r2, [r3, #2]
		if((m_cfg.key_tick > TIMER_10_MSEC) && (m_cfg.key_tick < TIMER_50_MSEC)){
 8000376:	4b11      	ldr	r3, [pc, #68]	@ (80003bc <key_process+0x184>)
 8000378:	689b      	ldr	r3, [r3, #8]
 800037a:	2b0a      	cmp	r3, #10
 800037c:	d90d      	bls.n	800039a <key_process+0x162>
 800037e:	4b0f      	ldr	r3, [pc, #60]	@ (80003bc <key_process+0x184>)
 8000380:	689b      	ldr	r3, [r3, #8]
 8000382:	2b31      	cmp	r3, #49	@ 0x31
 8000384:	d809      	bhi.n	800039a <key_process+0x162>
			if(m_cfg.mul_press == 0){
 8000386:	4b0d      	ldr	r3, [pc, #52]	@ (80003bc <key_process+0x184>)
 8000388:	791b      	ldrb	r3, [r3, #4]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d105      	bne.n	800039a <key_process+0x162>
				press_key = get_key;
 800038e:	4b0d      	ldr	r3, [pc, #52]	@ (80003c4 <key_process+0x18c>)
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	71fb      	strb	r3, [r7, #7]
				get_key = eKey_Idle;
 8000394:	4b0b      	ldr	r3, [pc, #44]	@ (80003c4 <key_process+0x18c>)
 8000396:	2200      	movs	r2, #0
 8000398:	701a      	strb	r2, [r3, #0]
			}
		}
		old_key = eKey_Idle;
 800039a:	4b0b      	ldr	r3, [pc, #44]	@ (80003c8 <key_process+0x190>)
 800039c:	2200      	movs	r2, #0
 800039e:	701a      	strb	r2, [r3, #0]
		m_cfg.skip_press = 0;
 80003a0:	4b06      	ldr	r3, [pc, #24]	@ (80003bc <key_process+0x184>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	715a      	strb	r2, [r3, #5]
		m_cfg.key_tick = 0;
 80003a6:	4b05      	ldr	r3, [pc, #20]	@ (80003bc <key_process+0x184>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	609a      	str	r2, [r3, #8]
		m_cfg.mul_press = 0;
 80003ac:	4b03      	ldr	r3, [pc, #12]	@ (80003bc <key_process+0x184>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	711a      	strb	r2, [r3, #4]
	}

	return press_key;
 80003b2:	79fb      	ldrb	r3, [r7, #7]
}
 80003b4:	4618      	mov	r0, r3
 80003b6:	3708      	adds	r7, #8
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	20000000 	.word	0x20000000
 80003c0:	200001c9 	.word	0x200001c9
 80003c4:	200001ca 	.word	0x200001ca
 80003c8:	200001cb 	.word	0x200001cb
 80003cc:	200001cc 	.word	0x200001cc

080003d0 <run_menu>:

void run_menu(Key_t input_key)
{
 80003d0:	b590      	push	{r4, r7, lr}
 80003d2:	b085      	sub	sp, #20
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	4603      	mov	r3, r0
 80003d8:	71fb      	strb	r3, [r7, #7]
	ScreenID_t next_sc = eMAX_SCREEN_ID;
 80003da:	230f      	movs	r3, #15
 80003dc:	73fb      	strb	r3, [r7, #15]

	LOG_DBG("Old SC[%d] Key[%x]", m_cfg.sc_id, input_key);
 80003de:	4b70      	ldr	r3, [pc, #448]	@ (80005a0 <run_menu+0x1d0>)
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	4619      	mov	r1, r3
 80003e4:	79fb      	ldrb	r3, [r7, #7]
 80003e6:	461a      	mov	r2, r3
 80003e8:	486e      	ldr	r0, [pc, #440]	@ (80005a4 <run_menu+0x1d4>)
 80003ea:	f000 fc4f 	bl	8000c8c <Printf>
	if(m_cfg.setting_mode == 0){
 80003ee:	4b6c      	ldr	r3, [pc, #432]	@ (80005a0 <run_menu+0x1d0>)
 80003f0:	78db      	ldrb	r3, [r3, #3]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d170      	bne.n	80004d8 <run_menu+0x108>
		switch(input_key){
 80003f6:	79fb      	ldrb	r3, [r7, #7]
 80003f8:	3b01      	subs	r3, #1
 80003fa:	2b1f      	cmp	r3, #31
 80003fc:	d86b      	bhi.n	80004d6 <run_menu+0x106>
 80003fe:	a201      	add	r2, pc, #4	@ (adr r2, 8000404 <run_menu+0x34>)
 8000400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000404:	080004d7 	.word	0x080004d7
 8000408:	080004d7 	.word	0x080004d7
 800040c:	080004bf 	.word	0x080004bf
 8000410:	080004d7 	.word	0x080004d7
 8000414:	080004c7 	.word	0x080004c7
 8000418:	080004af 	.word	0x080004af
 800041c:	080004d7 	.word	0x080004d7
 8000420:	08000485 	.word	0x08000485
 8000424:	080004b7 	.word	0x080004b7
 8000428:	080004d7 	.word	0x080004d7
 800042c:	080004d7 	.word	0x080004d7
 8000430:	080004d7 	.word	0x080004d7
 8000434:	080004d7 	.word	0x080004d7
 8000438:	080004d7 	.word	0x080004d7
 800043c:	080004d7 	.word	0x080004d7
 8000440:	080004d7 	.word	0x080004d7
 8000444:	080004d7 	.word	0x080004d7
 8000448:	080004d7 	.word	0x080004d7
 800044c:	080004d7 	.word	0x080004d7
 8000450:	080004d7 	.word	0x080004d7
 8000454:	080004d7 	.word	0x080004d7
 8000458:	080004d7 	.word	0x080004d7
 800045c:	080004d7 	.word	0x080004d7
 8000460:	080004d7 	.word	0x080004d7
 8000464:	080004d7 	.word	0x080004d7
 8000468:	080004d7 	.word	0x080004d7
 800046c:	080004d7 	.word	0x080004d7
 8000470:	080004d7 	.word	0x080004d7
 8000474:	080004d7 	.word	0x080004d7
 8000478:	080004d7 	.word	0x080004d7
 800047c:	080004d7 	.word	0x080004d7
 8000480:	080004cf 	.word	0x080004cf
			case eKey_Enter:
				break;
			case eKey_Mode:
				if(++m_cfg.list_idx >= MAX_SCREEN_STEP){
 8000484:	4b46      	ldr	r3, [pc, #280]	@ (80005a0 <run_menu+0x1d0>)
 8000486:	785b      	ldrb	r3, [r3, #1]
 8000488:	3301      	adds	r3, #1
 800048a:	b2da      	uxtb	r2, r3
 800048c:	4b44      	ldr	r3, [pc, #272]	@ (80005a0 <run_menu+0x1d0>)
 800048e:	705a      	strb	r2, [r3, #1]
 8000490:	4b43      	ldr	r3, [pc, #268]	@ (80005a0 <run_menu+0x1d0>)
 8000492:	785b      	ldrb	r3, [r3, #1]
 8000494:	2b05      	cmp	r3, #5
 8000496:	d902      	bls.n	800049e <run_menu+0xce>
					m_cfg.list_idx = 0;
 8000498:	4b41      	ldr	r3, [pc, #260]	@ (80005a0 <run_menu+0x1d0>)
 800049a:	2200      	movs	r2, #0
 800049c:	705a      	strb	r2, [r3, #1]
				}
				m_cfg.sc_id = screen_list[m_cfg.list_idx];
 800049e:	4b40      	ldr	r3, [pc, #256]	@ (80005a0 <run_menu+0x1d0>)
 80004a0:	785b      	ldrb	r3, [r3, #1]
 80004a2:	461a      	mov	r2, r3
 80004a4:	4b40      	ldr	r3, [pc, #256]	@ (80005a8 <run_menu+0x1d8>)
 80004a6:	5c9a      	ldrb	r2, [r3, r2]
 80004a8:	4b3d      	ldr	r3, [pc, #244]	@ (80005a0 <run_menu+0x1d0>)
 80004aa:	701a      	strb	r2, [r3, #0]
				break;
 80004ac:	e014      	b.n	80004d8 <run_menu+0x108>
			case eKey_ChSel:
				m_cfg.sc_id = eCHSELECT_SC;
 80004ae:	4b3c      	ldr	r3, [pc, #240]	@ (80005a0 <run_menu+0x1d0>)
 80004b0:	220d      	movs	r2, #13
 80004b2:	701a      	strb	r2, [r3, #0]
				break;
 80004b4:	e010      	b.n	80004d8 <run_menu+0x108>
			case eKey_Factory:
				m_cfg.sc_id = eFACTORY_SC;
 80004b6:	4b3a      	ldr	r3, [pc, #232]	@ (80005a0 <run_menu+0x1d0>)
 80004b8:	220c      	movs	r2, #12
 80004ba:	701a      	strb	r2, [r3, #0]
				break;
 80004bc:	e00c      	b.n	80004d8 <run_menu+0x108>
			case eKey_User:
				m_cfg.sc_id = eUSERMODE_SC;
 80004be:	4b38      	ldr	r3, [pc, #224]	@ (80005a0 <run_menu+0x1d0>)
 80004c0:	220b      	movs	r2, #11
 80004c2:	701a      	strb	r2, [r3, #0]
				break;
 80004c4:	e008      	b.n	80004d8 <run_menu+0x108>
			case eKey_Version:
				m_cfg.sc_id = eVERSION_SC;
 80004c6:	4b36      	ldr	r3, [pc, #216]	@ (80005a0 <run_menu+0x1d0>)
 80004c8:	220e      	movs	r2, #14
 80004ca:	701a      	strb	r2, [r3, #0]
				break;
 80004cc:	e004      	b.n	80004d8 <run_menu+0x108>
			case eKey_ExitRemote:
				m_cfg.sc_id = eCHANNEL_SC;
 80004ce:	4b34      	ldr	r3, [pc, #208]	@ (80005a0 <run_menu+0x1d0>)
 80004d0:	2201      	movs	r2, #1
 80004d2:	701a      	strb	r2, [r3, #0]
				break;
 80004d4:	e000      	b.n	80004d8 <run_menu+0x108>
			default:
				break;
 80004d6:	bf00      	nop
		}
	}
	LOG_DBG("Change SC[%d]", m_cfg.sc_id);
 80004d8:	4b31      	ldr	r3, [pc, #196]	@ (80005a0 <run_menu+0x1d0>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	4619      	mov	r1, r3
 80004de:	4833      	ldr	r0, [pc, #204]	@ (80005ac <run_menu+0x1dc>)
 80004e0:	f000 fbd4 	bl	8000c8c <Printf>
	LOG_DBG("Setting mode[%d]", m_cfg.setting_mode);
 80004e4:	4b2e      	ldr	r3, [pc, #184]	@ (80005a0 <run_menu+0x1d0>)
 80004e6:	78db      	ldrb	r3, [r3, #3]
 80004e8:	4619      	mov	r1, r3
 80004ea:	4831      	ldr	r0, [pc, #196]	@ (80005b0 <run_menu+0x1e0>)
 80004ec:	f000 fbce 	bl	8000c8c <Printf>
	next_sc = screen_process(m_cfg.sc_id, input_key);
 80004f0:	4b2b      	ldr	r3, [pc, #172]	@ (80005a0 <run_menu+0x1d0>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	79fa      	ldrb	r2, [r7, #7]
 80004f6:	4611      	mov	r1, r2
 80004f8:	4618      	mov	r0, r3
 80004fa:	f001 fc09 	bl	8001d10 <screen_process>
 80004fe:	4603      	mov	r3, r0
 8000500:	73fb      	strb	r3, [r7, #15]
	if(next_sc < eMAX_SCREEN_ID ){
 8000502:	7bfb      	ldrb	r3, [r7, #15]
 8000504:	2b0e      	cmp	r3, #14
 8000506:	d822      	bhi.n	800054e <run_menu+0x17e>
		LOG_INF("Next Sc[%s] Cur SC[%s]", screen_id_2_str(next_sc), screen_id_2_str(m_cfg.sc_id));
 8000508:	7bfb      	ldrb	r3, [r7, #15]
 800050a:	4618      	mov	r0, r3
 800050c:	f000 fc38 	bl	8000d80 <screen_id_2_str>
 8000510:	4604      	mov	r4, r0
 8000512:	4b23      	ldr	r3, [pc, #140]	@ (80005a0 <run_menu+0x1d0>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	4618      	mov	r0, r3
 8000518:	f000 fc32 	bl	8000d80 <screen_id_2_str>
 800051c:	4603      	mov	r3, r0
 800051e:	461a      	mov	r2, r3
 8000520:	4621      	mov	r1, r4
 8000522:	4824      	ldr	r0, [pc, #144]	@ (80005b4 <run_menu+0x1e4>)
 8000524:	f000 fbb2 	bl	8000c8c <Printf>
		if(next_sc != m_cfg.sc_id){
 8000528:	4b1d      	ldr	r3, [pc, #116]	@ (80005a0 <run_menu+0x1d0>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	7bfa      	ldrb	r2, [r7, #15]
 800052e:	429a      	cmp	r2, r3
 8000530:	d00d      	beq.n	800054e <run_menu+0x17e>
			m_cfg.sc_id = next_sc;
 8000532:	4a1b      	ldr	r2, [pc, #108]	@ (80005a0 <run_menu+0x1d0>)
 8000534:	7bfb      	ldrb	r3, [r7, #15]
 8000536:	7013      	strb	r3, [r2, #0]
			next_sc = screen_process(m_cfg.sc_id, eKey_Idle);
 8000538:	4b19      	ldr	r3, [pc, #100]	@ (80005a0 <run_menu+0x1d0>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f001 fbe6 	bl	8001d10 <screen_process>
 8000544:	4603      	mov	r3, r0
 8000546:	73fb      	strb	r3, [r7, #15]
			m_cfg.setting_mode = 0;
 8000548:	4b15      	ldr	r3, [pc, #84]	@ (80005a0 <run_menu+0x1d0>)
 800054a:	2200      	movs	r2, #0
 800054c:	70da      	strb	r2, [r3, #3]
			//LOG_ERR("Change screen clear setting mode");
		}
	}

	LOG_DBG("next Screen = %s[%d] setting mode[%d]", screen_id_2_str(next_sc), next_sc, m_cfg.setting_mode);
 800054e:	7bfb      	ldrb	r3, [r7, #15]
 8000550:	4618      	mov	r0, r3
 8000552:	f000 fc15 	bl	8000d80 <screen_id_2_str>
 8000556:	4601      	mov	r1, r0
 8000558:	7bfa      	ldrb	r2, [r7, #15]
 800055a:	4b11      	ldr	r3, [pc, #68]	@ (80005a0 <run_menu+0x1d0>)
 800055c:	78db      	ldrb	r3, [r3, #3]
 800055e:	4816      	ldr	r0, [pc, #88]	@ (80005b8 <run_menu+0x1e8>)
 8000560:	f000 fb94 	bl	8000c8c <Printf>
	if(next_sc == eMAX_SCREEN_ID){
 8000564:	7bfb      	ldrb	r3, [r7, #15]
 8000566:	2b0f      	cmp	r3, #15
 8000568:	d113      	bne.n	8000592 <run_menu+0x1c2>
		if(m_cfg.setting_mode || m_cfg.remote_ctrl){
 800056a:	4b0d      	ldr	r3, [pc, #52]	@ (80005a0 <run_menu+0x1d0>)
 800056c:	78db      	ldrb	r3, [r3, #3]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d103      	bne.n	800057a <run_menu+0x1aa>
 8000572:	4b0b      	ldr	r3, [pc, #44]	@ (80005a0 <run_menu+0x1d0>)
 8000574:	7c1b      	ldrb	r3, [r3, #16]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d00b      	beq.n	8000592 <run_menu+0x1c2>
			//LOG_DBG("Release setting mode");
			m_cfg.setting_mode = 0;
 800057a:	4b09      	ldr	r3, [pc, #36]	@ (80005a0 <run_menu+0x1d0>)
 800057c:	2200      	movs	r2, #0
 800057e:	70da      	strb	r2, [r3, #3]
			m_cfg.remote_ctrl = 0;
 8000580:	4b07      	ldr	r3, [pc, #28]	@ (80005a0 <run_menu+0x1d0>)
 8000582:	2200      	movs	r2, #0
 8000584:	741a      	strb	r2, [r3, #16]
			m_cfg.sc_id = eCHANNEL_SC;
 8000586:	4b06      	ldr	r3, [pc, #24]	@ (80005a0 <run_menu+0x1d0>)
 8000588:	2201      	movs	r2, #1
 800058a:	701a      	strb	r2, [r3, #0]
			m_cfg.list_idx = 0;
 800058c:	4b04      	ldr	r3, [pc, #16]	@ (80005a0 <run_menu+0x1d0>)
 800058e:	2200      	movs	r2, #0
 8000590:	705a      	strb	r2, [r3, #1]
		}
	}
	LOG_DBG("Exit screen proc");
 8000592:	480a      	ldr	r0, [pc, #40]	@ (80005bc <run_menu+0x1ec>)
 8000594:	f000 fb7a 	bl	8000c8c <Printf>
}
 8000598:	bf00      	nop
 800059a:	3714      	adds	r7, #20
 800059c:	46bd      	mov	sp, r7
 800059e:	bd90      	pop	{r4, r7, pc}
 80005a0:	20000000 	.word	0x20000000
 80005a4:	08009718 	.word	0x08009718
 80005a8:	20000014 	.word	0x20000014
 80005ac:	08009734 	.word	0x08009734
 80005b0:	0800974c 	.word	0x0800974c
 80005b4:	08009764 	.word	0x08009764
 80005b8:	08009784 	.word	0x08009784
 80005bc:	080097b4 	.word	0x080097b4

080005c0 <key_handler>:

uint8_t bWaitAppproc = 0;
void key_handler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
	Key_t read_key;

	while(1){
		if(bWaitAppproc == 1){
 80005c6:	4b12      	ldr	r3, [pc, #72]	@ (8000610 <key_handler+0x50>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d100      	bne.n	80005d0 <key_handler+0x10>
			break;
 80005ce:	e003      	b.n	80005d8 <key_handler+0x18>
		}
		osDelay(100);
 80005d0:	2064      	movs	r0, #100	@ 0x64
 80005d2:	f005 fc3e 	bl	8005e52 <osDelay>
		if(bWaitAppproc == 1){
 80005d6:	e7f6      	b.n	80005c6 <key_handler+0x6>
	}

	while(1){
		read_key = key_process();
 80005d8:	f7ff fe2e 	bl	8000238 <key_process>
 80005dc:	4603      	mov	r3, r0
 80005de:	71fb      	strb	r3, [r7, #7]
		if(read_key != eKey_Idle){
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d010      	beq.n	8000608 <key_handler+0x48>
			LOG_DBG("Put Key[%s]", key_id_2_str(read_key));
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 fc3d 	bl	8000e68 <key_id_2_str>
 80005ee:	4603      	mov	r3, r0
 80005f0:	4619      	mov	r1, r3
 80005f2:	4808      	ldr	r0, [pc, #32]	@ (8000614 <key_handler+0x54>)
 80005f4:	f000 fb4a 	bl	8000c8c <Printf>
			osMessagePut(keyQueueHandle, read_key, osWaitForever);
 80005f8:	4b07      	ldr	r3, [pc, #28]	@ (8000618 <key_handler+0x58>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	79f9      	ldrb	r1, [r7, #7]
 80005fe:	f04f 32ff 	mov.w	r2, #4294967295
 8000602:	4618      	mov	r0, r3
 8000604:	f005 fcda 	bl	8005fbc <osMessagePut>
		}
		osDelay(10);
 8000608:	200a      	movs	r0, #10
 800060a:	f005 fc22 	bl	8005e52 <osDelay>
		read_key = key_process();
 800060e:	e7e3      	b.n	80005d8 <key_handler+0x18>
 8000610:	200001cd 	.word	0x200001cd
 8000614:	080097cc 	.word	0x080097cc
 8000618:	20000b90 	.word	0x20000b90

0800061c <AppsTask>:
	}
}

//void AppsTask(void const * argument)
void AppsTask(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
	Key_t read_key;
#if USE_KEY_TASK
	osEvent evt;
#endif

	osTimerStart(btn_TimerHandle, (TIMER_10_MSEC));
 8000622:	4b30      	ldr	r3, [pc, #192]	@ (80006e4 <AppsTask+0xc8>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	210a      	movs	r1, #10
 8000628:	4618      	mov	r0, r3
 800062a:	f005 fc5b 	bl	8005ee4 <osTimerStart>
	m_cfg.btn_status = eBTN_PRESS;
 800062e:	4b2e      	ldr	r3, [pc, #184]	@ (80006e8 <AppsTask+0xcc>)
 8000630:	2200      	movs	r2, #0
 8000632:	709a      	strb	r2, [r3, #2]
	while(1){
		if(m_cfg.key_tick >= TIMER_3_SEC){
 8000634:	4b2c      	ldr	r3, [pc, #176]	@ (80006e8 <AppsTask+0xcc>)
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800063c:	d313      	bcc.n	8000666 <AppsTask+0x4a>
			m_cfg.sc_id = eCHANNEL_SC;
 800063e:	4b2a      	ldr	r3, [pc, #168]	@ (80006e8 <AppsTask+0xcc>)
 8000640:	2201      	movs	r2, #1
 8000642:	701a      	strb	r2, [r3, #0]
			screen_process(m_cfg.sc_id, eKey_Idle);
 8000644:	4b28      	ldr	r3, [pc, #160]	@ (80006e8 <AppsTask+0xcc>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f001 fb60 	bl	8001d10 <screen_process>
			m_cfg.btn_status = eBTN_RELEASE;
 8000650:	4b25      	ldr	r3, [pc, #148]	@ (80006e8 <AppsTask+0xcc>)
 8000652:	2201      	movs	r2, #1
 8000654:	709a      	strb	r2, [r3, #2]
			m_cfg.key_tick = 0;
 8000656:	4b24      	ldr	r3, [pc, #144]	@ (80006e8 <AppsTask+0xcc>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
			break;
 800065c:	bf00      	nop
		}
		osDelay(10);
	}
	bWaitAppproc = 1;
 800065e:	4b23      	ldr	r3, [pc, #140]	@ (80006ec <AppsTask+0xd0>)
 8000660:	2201      	movs	r2, #1
 8000662:	701a      	strb	r2, [r3, #0]
 8000664:	e003      	b.n	800066e <AppsTask+0x52>
		osDelay(10);
 8000666:	200a      	movs	r0, #10
 8000668:	f005 fbf3 	bl	8005e52 <osDelay>
		if(m_cfg.key_tick >= TIMER_3_SEC){
 800066c:	e7e2      	b.n	8000634 <AppsTask+0x18>

	while(1){
#if USE_KEY_TASK
		evt = osMessageGet(keyQueueHandle, 10);
 800066e:	4b20      	ldr	r3, [pc, #128]	@ (80006f0 <AppsTask+0xd4>)
 8000670:	6819      	ldr	r1, [r3, #0]
 8000672:	463b      	mov	r3, r7
 8000674:	220a      	movs	r2, #10
 8000676:	4618      	mov	r0, r3
 8000678:	f005 fce0 	bl	800603c <osMessageGet>
		if(evt.status == osEventMessage){
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	2b10      	cmp	r3, #16
 8000680:	d115      	bne.n	80006ae <AppsTask+0x92>
			read_key = (Key_t)evt.value.v;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	73fb      	strb	r3, [r7, #15]
#endif

//			if(m_cfg.remote_ctrl){
//				LOG_DBG("read key[%s]", key_id_2_str(read_key));
//			}
			LOG_DBG("read key[%s]", key_id_2_str(read_key));
 8000686:	7bfb      	ldrb	r3, [r7, #15]
 8000688:	4618      	mov	r0, r3
 800068a:	f000 fbed 	bl	8000e68 <key_id_2_str>
 800068e:	4603      	mov	r3, r0
 8000690:	4619      	mov	r1, r3
 8000692:	4818      	ldr	r0, [pc, #96]	@ (80006f4 <AppsTask+0xd8>)
 8000694:	f000 fafa 	bl	8000c8c <Printf>
			if(m_cfg.remote_ctrl && (read_key != eKey_ExitRemote)){
 8000698:	4b13      	ldr	r3, [pc, #76]	@ (80006e8 <AppsTask+0xcc>)
 800069a:	7c1b      	ldrb	r3, [r3, #16]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d002      	beq.n	80006a6 <AppsTask+0x8a>
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	2b20      	cmp	r3, #32
 80006a4:	d11b      	bne.n	80006de <AppsTask+0xc2>
#else
				osDelay(10);
#endif
				continue;
			}
			run_menu(read_key);
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff fe91 	bl	80003d0 <run_menu>
		}
		if(m_cfg.blink_enable && (m_cfg.blink_tick >= TIMER_50_MSEC) && (proc_blink == 0)){
 80006ae:	4b0e      	ldr	r3, [pc, #56]	@ (80006e8 <AppsTask+0xcc>)
 80006b0:	7b1b      	ldrb	r3, [r3, #12]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d0db      	beq.n	800066e <AppsTask+0x52>
 80006b6:	4b0c      	ldr	r3, [pc, #48]	@ (80006e8 <AppsTask+0xcc>)
 80006b8:	89db      	ldrh	r3, [r3, #14]
 80006ba:	2b31      	cmp	r3, #49	@ 0x31
 80006bc:	d9d7      	bls.n	800066e <AppsTask+0x52>
 80006be:	4b0e      	ldr	r3, [pc, #56]	@ (80006f8 <AppsTask+0xdc>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d1d3      	bne.n	800066e <AppsTask+0x52>
			proc_blink = 1;
 80006c6:	4b0c      	ldr	r3, [pc, #48]	@ (80006f8 <AppsTask+0xdc>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	701a      	strb	r2, [r3, #0]
			screen_blink();
 80006cc:	f001 fae6 	bl	8001c9c <screen_blink>
			m_cfg.blink_tick = 0;
 80006d0:	4b05      	ldr	r3, [pc, #20]	@ (80006e8 <AppsTask+0xcc>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	81da      	strh	r2, [r3, #14]
			proc_blink = 0;
 80006d6:	4b08      	ldr	r3, [pc, #32]	@ (80006f8 <AppsTask+0xdc>)
 80006d8:	2200      	movs	r2, #0
 80006da:	701a      	strb	r2, [r3, #0]
 80006dc:	e7c7      	b.n	800066e <AppsTask+0x52>
				continue;
 80006de:	bf00      	nop
		evt = osMessageGet(keyQueueHandle, 10);
 80006e0:	e7c5      	b.n	800066e <AppsTask+0x52>
 80006e2:	bf00      	nop
 80006e4:	200001c4 	.word	0x200001c4
 80006e8:	20000000 	.word	0x20000000
 80006ec:	200001cd 	.word	0x200001cd
 80006f0:	20000b90 	.word	0x20000b90
 80006f4:	080097e0 	.word	0x080097e0
 80006f8:	200001c8 	.word	0x200001c8

080006fc <apps_set_remote_mode>:
#endif
	}
}

void apps_set_remote_mode(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	LOG_DBG("Set remote mode");
 8000700:	4803      	ldr	r0, [pc, #12]	@ (8000710 <apps_set_remote_mode+0x14>)
 8000702:	f000 fac3 	bl	8000c8c <Printf>
	m_cfg.remote_ctrl = 1;
 8000706:	4b03      	ldr	r3, [pc, #12]	@ (8000714 <apps_set_remote_mode+0x18>)
 8000708:	2201      	movs	r2, #1
 800070a:	741a      	strb	r2, [r3, #16]
}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	080097f4 	.word	0x080097f4
 8000714:	20000000 	.word	0x20000000

08000718 <apps_set_blink_enable>:

void apps_set_blink_enable(uint8_t enable)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	71fb      	strb	r3, [r7, #7]
	m_cfg.blink_enable = enable;
 8000722:	4a04      	ldr	r2, [pc, #16]	@ (8000734 <apps_set_blink_enable+0x1c>)
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	7313      	strb	r3, [r2, #12]
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	20000000 	.word	0x20000000

08000738 <apps_init>:

int apps_init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
	osTimerDef(btn_Timer, btn_tmr_callback);
 800073e:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <apps_init+0x40>)
 8000740:	603b      	str	r3, [r7, #0]
 8000742:	2300      	movs	r3, #0
 8000744:	607b      	str	r3, [r7, #4]
	btn_TimerHandle = osTimerCreate(osTimer(btn_Timer), osTimerPeriodic, NULL);
 8000746:	463b      	mov	r3, r7
 8000748:	2200      	movs	r2, #0
 800074a:	2101      	movs	r1, #1
 800074c:	4618      	mov	r0, r3
 800074e:	f005 fb95 	bl	8005e7c <osTimerCreate>
 8000752:	4603      	mov	r3, r0
 8000754:	4a09      	ldr	r2, [pc, #36]	@ (800077c <apps_init+0x44>)
 8000756:	6013      	str	r3, [r2, #0]
	if(btn_TimerHandle == NULL){
 8000758:	4b08      	ldr	r3, [pc, #32]	@ (800077c <apps_init+0x44>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d105      	bne.n	800076c <apps_init+0x34>
		LOG_ERR("Front Key timer Create Error");
 8000760:	4807      	ldr	r0, [pc, #28]	@ (8000780 <apps_init+0x48>)
 8000762:	f000 fa93 	bl	8000c8c <Printf>
		return -1;
 8000766:	f04f 33ff 	mov.w	r3, #4294967295
 800076a:	e000      	b.n	800076e <apps_init+0x36>
	if(AppsTaskHandle == NULL){
		LOG_ERR("Front Apps Task Create Error");
		return -1;
	}
#endif
	return 0;
 800076c:	2300      	movs	r3, #0
}
 800076e:	4618      	mov	r0, r3
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	080001d5 	.word	0x080001d5
 800077c:	200001c4 	.word	0x200001c4
 8000780:	0800980c 	.word	0x0800980c

08000784 <app_set_default_config>:

config_t m_flash_cfg, *m_app_config;
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
void app_set_default_config(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	LOG_INF("Set Default Configuration...");
 8000788:	4808      	ldr	r0, [pc, #32]	@ (80007ac <app_set_default_config+0x28>)
 800078a:	f000 fa7f 	bl	8000c8c <Printf>
	//LOG_HEX_DUMP(&m_flash_cfg, sizeof(config_t), "Before Config Data");
	memcpy(&m_flash_cfg, &def_config, sizeof(config_t));
 800078e:	4a08      	ldr	r2, [pc, #32]	@ (80007b0 <app_set_default_config+0x2c>)
 8000790:	4b08      	ldr	r3, [pc, #32]	@ (80007b4 <app_set_default_config+0x30>)
 8000792:	4610      	mov	r0, r2
 8000794:	4619      	mov	r1, r3
 8000796:	2347      	movs	r3, #71	@ 0x47
 8000798:	461a      	mov	r2, r3
 800079a:	f008 fb4d 	bl	8008e38 <memcpy>
	m_flash_config_write((void *)&m_flash_cfg, sizeof(config_t));
 800079e:	2147      	movs	r1, #71	@ 0x47
 80007a0:	4803      	ldr	r0, [pc, #12]	@ (80007b0 <app_set_default_config+0x2c>)
 80007a2:	f000 f899 	bl	80008d8 <m_flash_config_write>
	//LOG_HEX_DUMP(&m_flash_cfg, sizeof(config_t), "After Config Data");
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	08009830 	.word	0x08009830
 80007b0:	200001d0 	.word	0x200001d0
 80007b4:	2000001c 	.word	0x2000001c

080007b8 <app_config_init>:

void app_config_init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	if(app_read_config(&m_flash_cfg)){
 80007bc:	4808      	ldr	r0, [pc, #32]	@ (80007e0 <app_config_init+0x28>)
 80007be:	f000 f821 	bl	8000804 <app_read_config>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <app_config_init+0x14>
		app_set_default_config();
 80007c8:	f7ff ffdc 	bl	8000784 <app_set_default_config>
	}
	m_app_config = &m_flash_cfg;
 80007cc:	4b05      	ldr	r3, [pc, #20]	@ (80007e4 <app_config_init+0x2c>)
 80007ce:	4a04      	ldr	r2, [pc, #16]	@ (80007e0 <app_config_init+0x28>)
 80007d0:	601a      	str	r2, [r3, #0]
	LOG_HEX_DUMP(&m_flash_cfg, sizeof(config_t), "Config Data");
 80007d2:	4a05      	ldr	r2, [pc, #20]	@ (80007e8 <app_config_init+0x30>)
 80007d4:	2147      	movs	r1, #71	@ 0x47
 80007d6:	4802      	ldr	r0, [pc, #8]	@ (80007e0 <app_config_init+0x28>)
 80007d8:	f000 faaa 	bl	8000d30 <dump_printf>
}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	200001d0 	.word	0x200001d0
 80007e4:	20000218 	.word	0x20000218
 80007e8:	08009854 	.word	0x08009854

080007ec <app_save_config>:

int app_save_config(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	return m_flash_config_write((void *)&m_flash_cfg, sizeof(config_t));
 80007f0:	2147      	movs	r1, #71	@ 0x47
 80007f2:	4803      	ldr	r0, [pc, #12]	@ (8000800 <app_save_config+0x14>)
 80007f4:	f000 f870 	bl	80008d8 <m_flash_config_write>
 80007f8:	4603      	mov	r3, r0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	200001d0 	.word	0x200001d0

08000804 <app_read_config>:

uint8_t app_read_config(config_t *pConfig)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	m_flash_config_read((void *)pConfig, sizeof(config_t));
 800080c:	2147      	movs	r1, #71	@ 0x47
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f000 f84e 	bl	80008b0 <m_flash_config_read>
	if(pConfig->valid != CONFIG_VALID){
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b10      	cmp	r3, #16
 800081a:	d004      	beq.n	8000826 <app_read_config+0x22>
		LOG_ERR("Configuration is not valid!!!");
 800081c:	4804      	ldr	r0, [pc, #16]	@ (8000830 <app_read_config+0x2c>)
 800081e:	f000 fa35 	bl	8000c8c <Printf>
		return 1;
 8000822:	2301      	movs	r3, #1
 8000824:	e000      	b.n	8000828 <app_read_config+0x24>
	}
	return 0;
 8000826:	2300      	movs	r3, #0
}
 8000828:	4618      	mov	r0, r3
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	08009860 	.word	0x08009860

08000834 <m_flash_config_erase>:
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/

/* Private function prototypes -----------------------------------------------*/
int m_flash_config_erase(void)
{
 8000834:	b590      	push	{r4, r7, lr}
 8000836:	b087      	sub	sp, #28
 8000838:	af00      	add	r7, sp, #0
	int err_code;
	uint32_t PageError;
	FLASH_EraseInitTypeDef EraseInitStruct;

	HAL_FLASH_Unlock();
 800083a:	f003 fa41 	bl	8003cc0 <HAL_FLASH_Unlock>

	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 800083e:	2300      	movs	r3, #0
 8000840:	603b      	str	r3, [r7, #0]
	EraseInitStruct.PageAddress = FRONT_CONFIG_ADDRESS;
 8000842:	4b17      	ldr	r3, [pc, #92]	@ (80008a0 <m_flash_config_erase+0x6c>)
 8000844:	60bb      	str	r3, [r7, #8]
	EraseInitStruct.NbPages     = 1;
 8000846:	2301      	movs	r3, #1
 8000848:	60fb      	str	r3, [r7, #12]

	err_code = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 800084a:	f107 0210 	add.w	r2, r7, #16
 800084e:	463b      	mov	r3, r7
 8000850:	4611      	mov	r1, r2
 8000852:	4618      	mov	r0, r3
 8000854:	f003 fb26 	bl	8003ea4 <HAL_FLASHEx_Erase>
 8000858:	4603      	mov	r3, r0
 800085a:	617b      	str	r3, [r7, #20]
	if (err_code != HAL_OK)
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d017      	beq.n	8000892 <m_flash_config_erase+0x5e>
	{
		LOG_ERR("Page Error[%x] Flash Error[%x]", PageError, HAL_FLASH_GetError());
 8000862:	693c      	ldr	r4, [r7, #16]
 8000864:	f003 fa62 	bl	8003d2c <HAL_FLASH_GetError>
 8000868:	4603      	mov	r3, r0
 800086a:	461a      	mov	r2, r3
 800086c:	4621      	mov	r1, r4
 800086e:	480d      	ldr	r0, [pc, #52]	@ (80008a4 <m_flash_config_erase+0x70>)
 8000870:	f000 fa0c 	bl	8000c8c <Printf>
		HAL_FLASH_Lock();
 8000874:	f003 fa4a 	bl	8003d0c <HAL_FLASH_Lock>
		RETURN_IF_ERROR(err_code);
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d009      	beq.n	8000892 <m_flash_config_erase+0x5e>
 800087e:	480a      	ldr	r0, [pc, #40]	@ (80008a8 <m_flash_config_erase+0x74>)
 8000880:	f000 fa04 	bl	8000c8c <Printf>
 8000884:	697a      	ldr	r2, [r7, #20]
 8000886:	2122      	movs	r1, #34	@ 0x22
 8000888:	4808      	ldr	r0, [pc, #32]	@ (80008ac <m_flash_config_erase+0x78>)
 800088a:	f000 f9ff 	bl	8000c8c <Printf>
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	e002      	b.n	8000898 <m_flash_config_erase+0x64>
	}

	HAL_FLASH_Lock();
 8000892:	f003 fa3b 	bl	8003d0c <HAL_FLASH_Lock>
	return 0;
 8000896:	2300      	movs	r3, #0
}
 8000898:	4618      	mov	r0, r3
 800089a:	371c      	adds	r7, #28
 800089c:	46bd      	mov	sp, r7
 800089e:	bd90      	pop	{r4, r7, pc}
 80008a0:	0800f800 	.word	0x0800f800
 80008a4:	08009888 	.word	0x08009888
 80008a8:	080098b0 	.word	0x080098b0
 80008ac:	080098d4 	.word	0x080098d4

080008b0 <m_flash_config_read>:

void m_flash_config_read(void *pBuffer, int size)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	6039      	str	r1, [r7, #0]
	uint32_t address;

	address = FRONT_CONFIG_ADDRESS;
 80008ba:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <m_flash_config_read+0x24>)
 80008bc:	60fb      	str	r3, [r7, #12]

	memcpy(pBuffer, (uint32_t *)address, size);
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	683a      	ldr	r2, [r7, #0]
 80008c2:	4619      	mov	r1, r3
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f008 fab7 	bl	8008e38 <memcpy>
	//LOG_HEX_DUMP(pBuffer, size, "Dump DB");
}
 80008ca:	bf00      	nop
 80008cc:	3710      	adds	r7, #16
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	0800f800 	.word	0x0800f800

080008d8 <m_flash_config_write>:

int m_flash_config_write(void *Data_p, int size)
{
 80008d8:	b5b0      	push	{r4, r5, r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	6039      	str	r1, [r7, #0]
	unsigned int write_size =0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	617b      	str	r3, [r7, #20]
	uint32_t Address, write_data;
	uint16_t *pData;

	Address = FRONT_CONFIG_ADDRESS;
 80008e6:	4b20      	ldr	r3, [pc, #128]	@ (8000968 <m_flash_config_write+0x90>)
 80008e8:	613b      	str	r3, [r7, #16]

	pData = (uint16_t *)Data_p;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	60fb      	str	r3, [r7, #12]

	if(m_flash_config_erase()){
 80008ee:	f7ff ffa1 	bl	8000834 <m_flash_config_erase>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d002      	beq.n	80008fe <m_flash_config_write+0x26>
		return -1;
 80008f8:	f04f 33ff 	mov.w	r3, #4294967295
 80008fc:	e02f      	b.n	800095e <m_flash_config_write+0x86>
	}

	HAL_FLASH_Unlock();
 80008fe:	f003 f9df 	bl	8003cc0 <HAL_FLASH_Unlock>

	while(write_size < size)
 8000902:	e025      	b.n	8000950 <m_flash_config_write+0x78>
	{
		write_data = (uint16_t)*pData;
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	881b      	ldrh	r3, [r3, #0]
 8000908:	60bb      	str	r3, [r7, #8]
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Address, write_data) != HAL_OK)
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	2200      	movs	r2, #0
 800090e:	461c      	mov	r4, r3
 8000910:	4615      	mov	r5, r2
 8000912:	4622      	mov	r2, r4
 8000914:	462b      	mov	r3, r5
 8000916:	6939      	ldr	r1, [r7, #16]
 8000918:	2001      	movs	r0, #1
 800091a:	f003 f961 	bl	8003be0 <HAL_FLASH_Program>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d00c      	beq.n	800093e <m_flash_config_write+0x66>
		{

			LOG_ERR("Flash Write Error [%lx] TotSize[%d] WriteSize[%d]", HAL_FLASH_GetError(), size, write_size);
 8000924:	f003 fa02 	bl	8003d2c <HAL_FLASH_GetError>
 8000928:	4601      	mov	r1, r0
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	683a      	ldr	r2, [r7, #0]
 800092e:	480f      	ldr	r0, [pc, #60]	@ (800096c <m_flash_config_write+0x94>)
 8000930:	f000 f9ac 	bl	8000c8c <Printf>

			HAL_FLASH_Lock();
 8000934:	f003 f9ea 	bl	8003d0c <HAL_FLASH_Lock>
			return -1;
 8000938:	f04f 33ff 	mov.w	r3, #4294967295
 800093c:	e00f      	b.n	800095e <m_flash_config_write+0x86>
		}
		pData++;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	3302      	adds	r3, #2
 8000942:	60fb      	str	r3, [r7, #12]
		write_size+=2;
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	3302      	adds	r3, #2
 8000948:	617b      	str	r3, [r7, #20]
		Address +=2;
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	3302      	adds	r3, #2
 800094e:	613b      	str	r3, [r7, #16]
	while(write_size < size)
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	697a      	ldr	r2, [r7, #20]
 8000954:	429a      	cmp	r2, r3
 8000956:	d3d5      	bcc.n	8000904 <m_flash_config_write+0x2c>
	}

	HAL_FLASH_Lock();
 8000958:	f003 f9d8 	bl	8003d0c <HAL_FLASH_Lock>
	return 0;
 800095c:	2300      	movs	r3, #0
}
 800095e:	4618      	mov	r0, r3
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bdb0      	pop	{r4, r5, r7, pc}
 8000966:	bf00      	nop
 8000968:	0800f800 	.word	0x0800f800
 800096c:	08009908 	.word	0x08009908

08000970 <trigger_set>:
		HAL_GPIO_WritePin(trigger[cnt].Port, trigger[cnt].pin, GPIO_PIN_SET);
	}
}

void trigger_set(uint8_t signal)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	71fb      	strb	r3, [r7, #7]
	int cnt;
	
	if(signal == 0){
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d116      	bne.n	80009ae <trigger_set+0x3e>
		for(cnt = 0; cnt < MAX_CHANNEL; cnt++){
 8000980:	2300      	movs	r3, #0
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	e00f      	b.n	80009a6 <trigger_set+0x36>
			HAL_GPIO_WritePin(trigger[cnt].Port, trigger[cnt].pin, GPIO_PIN_SET);
 8000986:	4a1a      	ldr	r2, [pc, #104]	@ (80009f0 <trigger_set+0x80>)
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800098e:	4a18      	ldr	r2, [pc, #96]	@ (80009f0 <trigger_set+0x80>)
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	00db      	lsls	r3, r3, #3
 8000994:	4413      	add	r3, r2
 8000996:	889b      	ldrh	r3, [r3, #4]
 8000998:	2201      	movs	r2, #1
 800099a:	4619      	mov	r1, r3
 800099c:	f003 fcc5 	bl	800432a <HAL_GPIO_WritePin>
		for(cnt = 0; cnt < MAX_CHANNEL; cnt++){
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	3301      	adds	r3, #1
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	2b07      	cmp	r3, #7
 80009aa:	ddec      	ble.n	8000986 <trigger_set+0x16>
		}
		return ;
 80009ac:	e01d      	b.n	80009ea <trigger_set+0x7a>
	}
	
	for(cnt = 0; cnt < MAX_CHANNEL; cnt++){
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	e017      	b.n	80009e4 <trigger_set+0x74>
		if((signal >> cnt) & 0x01){
 80009b4:	79fa      	ldrb	r2, [r7, #7]
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	fa42 f303 	asr.w	r3, r2, r3
 80009bc:	f003 0301 	and.w	r3, r3, #1
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d00c      	beq.n	80009de <trigger_set+0x6e>
			HAL_GPIO_WritePin(trigger[cnt].Port, trigger[cnt].pin, GPIO_PIN_RESET);
 80009c4:	4a0a      	ldr	r2, [pc, #40]	@ (80009f0 <trigger_set+0x80>)
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80009cc:	4a08      	ldr	r2, [pc, #32]	@ (80009f0 <trigger_set+0x80>)
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	00db      	lsls	r3, r3, #3
 80009d2:	4413      	add	r3, r2
 80009d4:	889b      	ldrh	r3, [r3, #4]
 80009d6:	2200      	movs	r2, #0
 80009d8:	4619      	mov	r1, r3
 80009da:	f003 fca6 	bl	800432a <HAL_GPIO_WritePin>
	for(cnt = 0; cnt < MAX_CHANNEL; cnt++){
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	3301      	adds	r3, #1
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	2b07      	cmp	r3, #7
 80009e8:	dde4      	ble.n	80009b4 <trigger_set+0x44>
		}
	}
}
 80009ea:	3710      	adds	r7, #16
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000064 	.word	0x20000064

080009f4 <push_buf>:
static serial_cfg_t config;
/* Private function prototypes -----------------------------------------------*/
//static void SerialTask(void const * argument);
/* Private functions ---------------------------------------------------------*/
static void push_buf(uint8_t ch)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	71fb      	strb	r3, [r7, #7]
	int pos = (que._head + 1) % MAX_QUEUE_SIZE;
 80009fe:	4b11      	ldr	r3, [pc, #68]	@ (8000a44 <push_buf+0x50>)
 8000a00:	881b      	ldrh	r3, [r3, #0]
 8000a02:	3301      	adds	r3, #1
 8000a04:	425a      	negs	r2, r3
 8000a06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000a0a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8000a0e:	bf58      	it	pl
 8000a10:	4253      	negpl	r3, r2
 8000a12:	60fb      	str	r3, [r7, #12]

	if(pos == que._tail) return ;
 8000a14:	4b0b      	ldr	r3, [pc, #44]	@ (8000a44 <push_buf+0x50>)
 8000a16:	885b      	ldrh	r3, [r3, #2]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d00b      	beq.n	8000a38 <push_buf+0x44>

	que._data[que._head] = ch;
 8000a20:	4b08      	ldr	r3, [pc, #32]	@ (8000a44 <push_buf+0x50>)
 8000a22:	881b      	ldrh	r3, [r3, #0]
 8000a24:	461a      	mov	r2, r3
 8000a26:	4b07      	ldr	r3, [pc, #28]	@ (8000a44 <push_buf+0x50>)
 8000a28:	4413      	add	r3, r2
 8000a2a:	79fa      	ldrb	r2, [r7, #7]
 8000a2c:	711a      	strb	r2, [r3, #4]
	que._head = pos;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	4b04      	ldr	r3, [pc, #16]	@ (8000a44 <push_buf+0x50>)
 8000a34:	801a      	strh	r2, [r3, #0]
 8000a36:	e000      	b.n	8000a3a <push_buf+0x46>
	if(pos == que._tail) return ;
 8000a38:	bf00      	nop
}
 8000a3a:	3714      	adds	r7, #20
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bc80      	pop	{r7}
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	20000220 	.word	0x20000220

08000a48 <pop_buf>:

static uint8_t pop_buf(uint8_t *ch)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	if(que._head == que._tail) return 0;
 8000a50:	4b11      	ldr	r3, [pc, #68]	@ (8000a98 <pop_buf+0x50>)
 8000a52:	881a      	ldrh	r2, [r3, #0]
 8000a54:	4b10      	ldr	r3, [pc, #64]	@ (8000a98 <pop_buf+0x50>)
 8000a56:	885b      	ldrh	r3, [r3, #2]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d101      	bne.n	8000a60 <pop_buf+0x18>
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	e015      	b.n	8000a8c <pop_buf+0x44>

	*ch = que._data[que._tail];
 8000a60:	4b0d      	ldr	r3, [pc, #52]	@ (8000a98 <pop_buf+0x50>)
 8000a62:	885b      	ldrh	r3, [r3, #2]
 8000a64:	461a      	mov	r2, r3
 8000a66:	4b0c      	ldr	r3, [pc, #48]	@ (8000a98 <pop_buf+0x50>)
 8000a68:	4413      	add	r3, r2
 8000a6a:	791a      	ldrb	r2, [r3, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	701a      	strb	r2, [r3, #0]
	que._tail = (que._tail + 1)%MAX_QUEUE_SIZE;
 8000a70:	4b09      	ldr	r3, [pc, #36]	@ (8000a98 <pop_buf+0x50>)
 8000a72:	885b      	ldrh	r3, [r3, #2]
 8000a74:	3301      	adds	r3, #1
 8000a76:	425a      	negs	r2, r3
 8000a78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000a7c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8000a80:	bf58      	it	pl
 8000a82:	4253      	negpl	r3, r2
 8000a84:	b29a      	uxth	r2, r3
 8000a86:	4b04      	ldr	r3, [pc, #16]	@ (8000a98 <pop_buf+0x50>)
 8000a88:	805a      	strh	r2, [r3, #2]

	return 1;
 8000a8a:	2301      	movs	r3, #1
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	20000220 	.word	0x20000220

08000a9c <find_cmd>:

static uint8_t find_cmd(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
	uint8_t data = 0, len = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	71bb      	strb	r3, [r7, #6]
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	71fb      	strb	r3, [r7, #7]

	while(pop_buf(&data)){
 8000aaa:	e02c      	b.n	8000b06 <find_cmd+0x6a>
		if((config.cmd_pos == 0)&&(data != CMD_HEAD)){
 8000aac:	4b1c      	ldr	r3, [pc, #112]	@ (8000b20 <find_cmd+0x84>)
 8000aae:	895b      	ldrh	r3, [r3, #10]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d102      	bne.n	8000aba <find_cmd+0x1e>
 8000ab4:	79bb      	ldrb	r3, [r7, #6]
 8000ab6:	2bdf      	cmp	r3, #223	@ 0xdf
 8000ab8:	d124      	bne.n	8000b04 <find_cmd+0x68>
			continue;
		}
		if(config.cmd_pos < CMD_MAX_SIZE){
 8000aba:	4b19      	ldr	r3, [pc, #100]	@ (8000b20 <find_cmd+0x84>)
 8000abc:	895b      	ldrh	r3, [r3, #10]
 8000abe:	2b09      	cmp	r3, #9
 8000ac0:	d809      	bhi.n	8000ad6 <find_cmd+0x3a>
			config.cmd_buffer[config.cmd_pos++] = data;
 8000ac2:	4b17      	ldr	r3, [pc, #92]	@ (8000b20 <find_cmd+0x84>)
 8000ac4:	895b      	ldrh	r3, [r3, #10]
 8000ac6:	1c5a      	adds	r2, r3, #1
 8000ac8:	b291      	uxth	r1, r2
 8000aca:	4a15      	ldr	r2, [pc, #84]	@ (8000b20 <find_cmd+0x84>)
 8000acc:	8151      	strh	r1, [r2, #10]
 8000ace:	461a      	mov	r2, r3
 8000ad0:	79b9      	ldrb	r1, [r7, #6]
 8000ad2:	4b13      	ldr	r3, [pc, #76]	@ (8000b20 <find_cmd+0x84>)
 8000ad4:	5499      	strb	r1, [r3, r2]
		}
		config.cmd_state = ((config.cmd_state<<8)|data);
 8000ad6:	4b12      	ldr	r3, [pc, #72]	@ (8000b20 <find_cmd+0x84>)
 8000ad8:	68db      	ldr	r3, [r3, #12]
 8000ada:	021b      	lsls	r3, r3, #8
 8000adc:	79ba      	ldrb	r2, [r7, #6]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	4a0f      	ldr	r2, [pc, #60]	@ (8000b20 <find_cmd+0x84>)
 8000ae2:	60d3      	str	r3, [r2, #12]
		if(config.cmd_state == CMD_TAIL){
 8000ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b20 <find_cmd+0x84>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d10a      	bne.n	8000b06 <find_cmd+0x6a>
			len = config.cmd_pos;
 8000af0:	4b0b      	ldr	r3, [pc, #44]	@ (8000b20 <find_cmd+0x84>)
 8000af2:	895b      	ldrh	r3, [r3, #10]
 8000af4:	71fb      	strb	r3, [r7, #7]
			config.cmd_state = 0;
 8000af6:	4b0a      	ldr	r3, [pc, #40]	@ (8000b20 <find_cmd+0x84>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	60da      	str	r2, [r3, #12]
			config.cmd_pos = 0;
 8000afc:	4b08      	ldr	r3, [pc, #32]	@ (8000b20 <find_cmd+0x84>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	815a      	strh	r2, [r3, #10]
 8000b02:	e000      	b.n	8000b06 <find_cmd+0x6a>
			continue;
 8000b04:	bf00      	nop
	while(pop_buf(&data)){
 8000b06:	1dbb      	adds	r3, r7, #6
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff ff9d 	bl	8000a48 <pop_buf>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d1cb      	bne.n	8000aac <find_cmd+0x10>
		}
	}
	return len;
 8000b14:	79fb      	ldrb	r3, [r7, #7]
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	200002a4 	.word	0x200002a4

08000b24 <uart_task>:

//static void SerialTask(void const * argument)
void uart_task(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
	uint16_t cmd_size;
	while(1){
		cmd_size = find_cmd();
 8000b2a:	f7ff ffb7 	bl	8000a9c <find_cmd>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	80fb      	strh	r3, [r7, #6]
		if(cmd_size){
 8000b32:	88fb      	ldrh	r3, [r7, #6]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d008      	beq.n	8000b4a <uart_task+0x26>
			if(config.cmd_buffer[1] == TRIGGER_EVT_CMD){
 8000b38:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <uart_task+0x30>)
 8000b3a:	785b      	ldrb	r3, [r3, #1]
 8000b3c:	2b33      	cmp	r3, #51	@ 0x33
 8000b3e:	d104      	bne.n	8000b4a <uart_task+0x26>
				trigger_set(config.cmd_buffer[TRIGGER_DATA_IDX]);
 8000b40:	4b04      	ldr	r3, [pc, #16]	@ (8000b54 <uart_task+0x30>)
 8000b42:	789b      	ldrb	r3, [r3, #2]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff ff13 	bl	8000970 <trigger_set>
			}else if(config.cmd_buffer[1] == RES_ERROR){
				// todo : error 처리
			}
		}
		osDelay(10);
 8000b4a:	200a      	movs	r0, #10
 8000b4c:	f005 f981 	bl	8005e52 <osDelay>
		cmd_size = find_cmd();
 8000b50:	e7eb      	b.n	8000b2a <uart_task+0x6>
 8000b52:	bf00      	nop
 8000b54:	200002a4 	.word	0x200002a4

08000b58 <HAL_UART_RxCpltCallback>:
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
	/* Console */
	if ( huart->Instance == USART1 ){
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a08      	ldr	r2, [pc, #32]	@ (8000b88 <HAL_UART_RxCpltCallback+0x30>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d109      	bne.n	8000b7e <HAL_UART_RxCpltCallback+0x26>
		push_buf(Front_rx_buf[0]);
 8000b6a:	4b08      	ldr	r3, [pc, #32]	@ (8000b8c <HAL_UART_RxCpltCallback+0x34>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff ff40 	bl	80009f4 <push_buf>
		HAL_UART_Receive_IT(FRONT_UART, &Front_rx_buf[0], 1 );
 8000b74:	2201      	movs	r2, #1
 8000b76:	4905      	ldr	r1, [pc, #20]	@ (8000b8c <HAL_UART_RxCpltCallback+0x34>)
 8000b78:	4805      	ldr	r0, [pc, #20]	@ (8000b90 <HAL_UART_RxCpltCallback+0x38>)
 8000b7a:	f004 fb60 	bl	800523e <HAL_UART_Receive_IT>
	}
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40013800 	.word	0x40013800
 8000b8c:	2000021c 	.word	0x2000021c
 8000b90:	20000af4 	.word	0x20000af4

08000b94 <uart_SendFront>:

int uart_SendFront(uint8_t cmd, uint8_t ch, uint32_t data)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	603a      	str	r2, [r7, #0]
 8000b9e:	71fb      	strb	r3, [r7, #7]
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	71bb      	strb	r3, [r7, #6]
	int error;
	uint8_t send_data[CMD_MAX_SIZE]={0xEF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF};
 8000ba4:	4a16      	ldr	r2, [pc, #88]	@ (8000c00 <uart_SendFront+0x6c>)
 8000ba6:	f107 0308 	add.w	r3, r7, #8
 8000baa:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bac:	c303      	stmia	r3!, {r0, r1}
 8000bae:	801a      	strh	r2, [r3, #0]

	send_data[2] = cmd;
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	72bb      	strb	r3, [r7, #10]
	send_data[3] = ch;
 8000bb4:	79bb      	ldrb	r3, [r7, #6]
 8000bb6:	72fb      	strb	r3, [r7, #11]
	send_data[4] = ((data & 0xFF00) >> 24);
 8000bb8:	2300      	movs	r3, #0
 8000bba:	733b      	strb	r3, [r7, #12]
	send_data[5] = ((data & 0xFF00) >> 16);
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	737b      	strb	r3, [r7, #13]
	send_data[6] = ((data & 0xFF00) >> 8);
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	0a1b      	lsrs	r3, r3, #8
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	73bb      	strb	r3, [r7, #14]
	send_data[7] = (data & 0x00FF);
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	73fb      	strb	r3, [r7, #15]

	error  = HAL_UART_Transmit(FRONT_UART, send_data, CMD_MAX_SIZE, 1000);
 8000bce:	f107 0108 	add.w	r1, r7, #8
 8000bd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bd6:	220a      	movs	r2, #10
 8000bd8:	480a      	ldr	r0, [pc, #40]	@ (8000c04 <uart_SendFront+0x70>)
 8000bda:	f004 faa5 	bl	8005128 <HAL_UART_Transmit>
 8000bde:	4603      	mov	r3, r0
 8000be0:	617b      	str	r3, [r7, #20]
	if(error != HAL_OK){
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d005      	beq.n	8000bf4 <uart_SendFront+0x60>
		LOG_ERR("Send Command Error");
 8000be8:	4807      	ldr	r0, [pc, #28]	@ (8000c08 <uart_SendFront+0x74>)
 8000bea:	f000 f84f 	bl	8000c8c <Printf>
		return -EIO;
 8000bee:	f06f 0304 	mvn.w	r3, #4
 8000bf2:	e000      	b.n	8000bf6 <uart_SendFront+0x62>
	}

	return 0;
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3718      	adds	r7, #24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	08009960 	.word	0x08009960
 8000c04:	20000af4 	.word	0x20000af4
 8000c08:	08009944 	.word	0x08009944

08000c0c <uart_init>:

int uart_init(void)
{	
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(FRONT_UART, &Front_rx_buf[0], 1);
 8000c10:	2201      	movs	r2, #1
 8000c12:	4903      	ldr	r1, [pc, #12]	@ (8000c20 <uart_init+0x14>)
 8000c14:	4803      	ldr	r0, [pc, #12]	@ (8000c24 <uart_init+0x18>)
 8000c16:	f004 fb12 	bl	800523e <HAL_UART_Receive_IT>
//	serialTaskHandle = osThreadCreate(osThread(serialTask), NULL);
//	if(serialTaskHandle == NULL){
//		LOG_ERR("Front Serial Task Create Error");
//		return -1;
//	}
	return 0;
 8000c1a:	2300      	movs	r3, #0
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	2000021c 	.word	0x2000021c
 8000c24:	20000af4 	.word	0x20000af4

08000c28 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	4a06      	ldr	r2, [pc, #24]	@ (8000c50 <vApplicationGetIdleTaskMemory+0x28>)
 8000c38:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	4a05      	ldr	r2, [pc, #20]	@ (8000c54 <vApplicationGetIdleTaskMemory+0x2c>)
 8000c3e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2280      	movs	r2, #128	@ 0x80
 8000c44:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000c46:	bf00      	nop
 8000c48:	3714      	adds	r7, #20
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr
 8000c50:	200002b4 	.word	0x200002b4
 8000c54:	20000354 	.word	0x20000354

08000c58 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	4a07      	ldr	r2, [pc, #28]	@ (8000c84 <vApplicationGetTimerTaskMemory+0x2c>)
 8000c68:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	4a06      	ldr	r2, [pc, #24]	@ (8000c88 <vApplicationGetTimerTaskMemory+0x30>)
 8000c6e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c76:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000c78:	bf00      	nop
 8000c7a:	3714      	adds	r7, #20
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bc80      	pop	{r7}
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	20000554 	.word	0x20000554
 8000c88:	200005f4 	.word	0x200005f4

08000c8c <Printf>:
/* Private variables ---------------------------------------------------------*/
char debug_buf[MAX_PRINT_BUF];
/* Private function prototypes -----------------------------------------------*/

void Printf(const char *fmt, ...)
{
 8000c8c:	b40f      	push	{r0, r1, r2, r3}
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
	va_list args = {0};
 8000c94:	2300      	movs	r3, #0
 8000c96:	607b      	str	r3, [r7, #4]

	va_start(args, fmt);
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	607b      	str	r3, [r7, #4]
	vsnprintf(debug_buf, MAX_PRINT_BUF, fmt, args);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	21ff      	movs	r1, #255	@ 0xff
 8000ca4:	480a      	ldr	r0, [pc, #40]	@ (8000cd0 <Printf+0x44>)
 8000ca6:	f008 f827 	bl	8008cf8 <vsniprintf>
	va_end(args);

	HAL_UART_Transmit(DBG_UART, (uint8_t *)debug_buf, strlen(debug_buf), 0xFFFFFF);
 8000caa:	4809      	ldr	r0, [pc, #36]	@ (8000cd0 <Printf+0x44>)
 8000cac:	f7ff fa50 	bl	8000150 <strlen>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	b29a      	uxth	r2, r3
 8000cb4:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8000cb8:	4905      	ldr	r1, [pc, #20]	@ (8000cd0 <Printf+0x44>)
 8000cba:	4806      	ldr	r0, [pc, #24]	@ (8000cd4 <Printf+0x48>)
 8000cbc:	f004 fa34 	bl	8005128 <HAL_UART_Transmit>
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000cca:	b004      	add	sp, #16
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	200009f4 	.word	0x200009f4
 8000cd4:	20000b3c 	.word	0x20000b3c

08000cd8 <hex_dump_line_print>:

static void hex_dump_line_print(const char *data, int length)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	6039      	str	r1, [r7, #0]
	for (int i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	e012      	b.n	8000d0e <hex_dump_line_print+0x36>
		if (i < length) {
 8000ce8:	68fa      	ldr	r2, [r7, #12]
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	da08      	bge.n	8000d02 <hex_dump_line_print+0x2a>
			Printf("%02x ", (unsigned char)data[i] & 0xFFu);
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	480a      	ldr	r0, [pc, #40]	@ (8000d24 <hex_dump_line_print+0x4c>)
 8000cfc:	f7ff ffc6 	bl	8000c8c <Printf>
 8000d00:	e002      	b.n	8000d08 <hex_dump_line_print+0x30>
		} else {
			Printf("   ");
 8000d02:	4809      	ldr	r0, [pc, #36]	@ (8000d28 <hex_dump_line_print+0x50>)
 8000d04:	f7ff ffc2 	bl	8000c8c <Printf>
	for (int i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	2b07      	cmp	r3, #7
 8000d12:	d9e9      	bls.n	8000ce8 <hex_dump_line_print+0x10>
		}
	}
	Printf("\r\n");
 8000d14:	4805      	ldr	r0, [pc, #20]	@ (8000d2c <hex_dump_line_print+0x54>)
 8000d16:	f7ff ffb9 	bl	8000c8c <Printf>
}
 8000d1a:	bf00      	nop
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	0800996c 	.word	0x0800996c
 8000d28:	08009974 	.word	0x08009974
 8000d2c:	08009978 	.word	0x08009978

08000d30 <dump_printf>:

void dump_printf(const void *data, int size, const char* str)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
	const char *data_buf = (const char *)data;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	617b      	str	r3, [r7, #20]

	Printf(str);
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f7ff ffa3 	bl	8000c8c <Printf>
	Printf("\r\n");
 8000d46:	480d      	ldr	r0, [pc, #52]	@ (8000d7c <dump_printf+0x4c>)
 8000d48:	f7ff ffa0 	bl	8000c8c <Printf>

	while(size > 0){
 8000d4c:	e00c      	b.n	8000d68 <dump_printf+0x38>
		hex_dump_line_print(data_buf, size);
 8000d4e:	68b9      	ldr	r1, [r7, #8]
 8000d50:	6978      	ldr	r0, [r7, #20]
 8000d52:	f7ff ffc1 	bl	8000cd8 <hex_dump_line_print>
		if(size < HEXDUMP_BYTES_IN_LINE){
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	2b07      	cmp	r3, #7
 8000d5a:	d909      	bls.n	8000d70 <dump_printf+0x40>
			break;
		}
		size -= HEXDUMP_BYTES_IN_LINE;
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	3b08      	subs	r3, #8
 8000d60:	60bb      	str	r3, [r7, #8]
		data_buf += HEXDUMP_BYTES_IN_LINE;
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	3308      	adds	r3, #8
 8000d66:	617b      	str	r3, [r7, #20]
	while(size > 0){
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	dcef      	bgt.n	8000d4e <dump_printf+0x1e>
	}
}
 8000d6e:	e000      	b.n	8000d72 <dump_printf+0x42>
			break;
 8000d70:	bf00      	nop
}
 8000d72:	bf00      	nop
 8000d74:	3718      	adds	r7, #24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	08009978 	.word	0x08009978

08000d80 <screen_id_2_str>:

const char *screen_id_2_str(int screen_id)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
	switch(screen_id)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2b0f      	cmp	r3, #15
 8000d8c:	d842      	bhi.n	8000e14 <screen_id_2_str+0x94>
 8000d8e:	a201      	add	r2, pc, #4	@ (adr r2, 8000d94 <screen_id_2_str+0x14>)
 8000d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d94:	08000dd5 	.word	0x08000dd5
 8000d98:	08000dd9 	.word	0x08000dd9
 8000d9c:	08000ddd 	.word	0x08000ddd
 8000da0:	08000de1 	.word	0x08000de1
 8000da4:	08000de5 	.word	0x08000de5
 8000da8:	08000de9 	.word	0x08000de9
 8000dac:	08000ded 	.word	0x08000ded
 8000db0:	08000df1 	.word	0x08000df1
 8000db4:	08000df5 	.word	0x08000df5
 8000db8:	08000df9 	.word	0x08000df9
 8000dbc:	08000dfd 	.word	0x08000dfd
 8000dc0:	08000e01 	.word	0x08000e01
 8000dc4:	08000e05 	.word	0x08000e05
 8000dc8:	08000e09 	.word	0x08000e09
 8000dcc:	08000e0d 	.word	0x08000e0d
 8000dd0:	08000e11 	.word	0x08000e11
	{
		case_str(eMAIN_SC)
 8000dd4:	4b13      	ldr	r3, [pc, #76]	@ (8000e24 <screen_id_2_str+0xa4>)
 8000dd6:	e01f      	b.n	8000e18 <screen_id_2_str+0x98>
		case_str(eCHANNEL_SC)
 8000dd8:	4b13      	ldr	r3, [pc, #76]	@ (8000e28 <screen_id_2_str+0xa8>)
 8000dda:	e01d      	b.n	8000e18 <screen_id_2_str+0x98>
		case_str(eSET_ON_TIME_SC)
 8000ddc:	4b13      	ldr	r3, [pc, #76]	@ (8000e2c <screen_id_2_str+0xac>)
 8000dde:	e01b      	b.n	8000e18 <screen_id_2_str+0x98>
		case_str(eSET_DELAY_TIME_SC)
 8000de0:	4b13      	ldr	r3, [pc, #76]	@ (8000e30 <screen_id_2_str+0xb0>)
 8000de2:	e019      	b.n	8000e18 <screen_id_2_str+0x98>
		case_str(eSET_TRIGGER_SC)
 8000de4:	4b13      	ldr	r3, [pc, #76]	@ (8000e34 <screen_id_2_str+0xb4>)
 8000de6:	e017      	b.n	8000e18 <screen_id_2_str+0x98>
		case_str(eOPMODE_SC)
 8000de8:	4b13      	ldr	r3, [pc, #76]	@ (8000e38 <screen_id_2_str+0xb8>)
 8000dea:	e015      	b.n	8000e18 <screen_id_2_str+0x98>
		case_str(eUARTMODE_SC)
 8000dec:	4b13      	ldr	r3, [pc, #76]	@ (8000e3c <screen_id_2_str+0xbc>)
 8000dee:	e013      	b.n	8000e18 <screen_id_2_str+0x98>
		case_str(eETH_IP_SC)
 8000df0:	4b13      	ldr	r3, [pc, #76]	@ (8000e40 <screen_id_2_str+0xc0>)
 8000df2:	e011      	b.n	8000e18 <screen_id_2_str+0x98>
		case_str(eETH_PORT_SC)
 8000df4:	4b13      	ldr	r3, [pc, #76]	@ (8000e44 <screen_id_2_str+0xc4>)
 8000df6:	e00f      	b.n	8000e18 <screen_id_2_str+0x98>
		case_str(eTESTMODE_SC)
 8000df8:	4b13      	ldr	r3, [pc, #76]	@ (8000e48 <screen_id_2_str+0xc8>)
 8000dfa:	e00d      	b.n	8000e18 <screen_id_2_str+0x98>
		case_str(eREMOTE_SC)
 8000dfc:	4b13      	ldr	r3, [pc, #76]	@ (8000e4c <screen_id_2_str+0xcc>)
 8000dfe:	e00b      	b.n	8000e18 <screen_id_2_str+0x98>
		case_str(eUSERMODE_SC)
 8000e00:	4b13      	ldr	r3, [pc, #76]	@ (8000e50 <screen_id_2_str+0xd0>)
 8000e02:	e009      	b.n	8000e18 <screen_id_2_str+0x98>
		case_str(eFACTORY_SC)
 8000e04:	4b13      	ldr	r3, [pc, #76]	@ (8000e54 <screen_id_2_str+0xd4>)
 8000e06:	e007      	b.n	8000e18 <screen_id_2_str+0x98>
		case_str(eCHSELECT_SC)
 8000e08:	4b13      	ldr	r3, [pc, #76]	@ (8000e58 <screen_id_2_str+0xd8>)
 8000e0a:	e005      	b.n	8000e18 <screen_id_2_str+0x98>
		case_str(eVERSION_SC)
 8000e0c:	4b13      	ldr	r3, [pc, #76]	@ (8000e5c <screen_id_2_str+0xdc>)
 8000e0e:	e003      	b.n	8000e18 <screen_id_2_str+0x98>
		case_str(eMAX_SCREEN_ID)
 8000e10:	4b13      	ldr	r3, [pc, #76]	@ (8000e60 <screen_id_2_str+0xe0>)
 8000e12:	e001      	b.n	8000e18 <screen_id_2_str+0x98>
		default:
			break;
 8000e14:	bf00      	nop
	}
	return "Unknown Screen";
 8000e16:	4b13      	ldr	r3, [pc, #76]	@ (8000e64 <screen_id_2_str+0xe4>)
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	0800997c 	.word	0x0800997c
 8000e28:	08009988 	.word	0x08009988
 8000e2c:	08009994 	.word	0x08009994
 8000e30:	080099a4 	.word	0x080099a4
 8000e34:	080099b8 	.word	0x080099b8
 8000e38:	080099c8 	.word	0x080099c8
 8000e3c:	080099d4 	.word	0x080099d4
 8000e40:	080099e4 	.word	0x080099e4
 8000e44:	080099f0 	.word	0x080099f0
 8000e48:	08009a00 	.word	0x08009a00
 8000e4c:	08009a10 	.word	0x08009a10
 8000e50:	08009a1c 	.word	0x08009a1c
 8000e54:	08009a2c 	.word	0x08009a2c
 8000e58:	08009a38 	.word	0x08009a38
 8000e5c:	08009a48 	.word	0x08009a48
 8000e60:	08009a54 	.word	0x08009a54
 8000e64:	08009a64 	.word	0x08009a64

08000e68 <key_id_2_str>:

const char *key_id_2_str(int key_id)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
	switch(key_id)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b20      	cmp	r3, #32
 8000e74:	d85e      	bhi.n	8000f34 <key_id_2_str+0xcc>
 8000e76:	a201      	add	r2, pc, #4	@ (adr r2, 8000e7c <key_id_2_str+0x14>)
 8000e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e7c:	08000f01 	.word	0x08000f01
 8000e80:	08000f05 	.word	0x08000f05
 8000e84:	08000f09 	.word	0x08000f09
 8000e88:	08000f0d 	.word	0x08000f0d
 8000e8c:	08000f11 	.word	0x08000f11
 8000e90:	08000f15 	.word	0x08000f15
 8000e94:	08000f19 	.word	0x08000f19
 8000e98:	08000f35 	.word	0x08000f35
 8000e9c:	08000f1d 	.word	0x08000f1d
 8000ea0:	08000f21 	.word	0x08000f21
 8000ea4:	08000f25 	.word	0x08000f25
 8000ea8:	08000f35 	.word	0x08000f35
 8000eac:	08000f29 	.word	0x08000f29
 8000eb0:	08000f35 	.word	0x08000f35
 8000eb4:	08000f35 	.word	0x08000f35
 8000eb8:	08000f35 	.word	0x08000f35
 8000ebc:	08000f2d 	.word	0x08000f2d
 8000ec0:	08000f35 	.word	0x08000f35
 8000ec4:	08000f35 	.word	0x08000f35
 8000ec8:	08000f35 	.word	0x08000f35
 8000ecc:	08000f35 	.word	0x08000f35
 8000ed0:	08000f35 	.word	0x08000f35
 8000ed4:	08000f35 	.word	0x08000f35
 8000ed8:	08000f35 	.word	0x08000f35
 8000edc:	08000f35 	.word	0x08000f35
 8000ee0:	08000f35 	.word	0x08000f35
 8000ee4:	08000f35 	.word	0x08000f35
 8000ee8:	08000f35 	.word	0x08000f35
 8000eec:	08000f35 	.word	0x08000f35
 8000ef0:	08000f35 	.word	0x08000f35
 8000ef4:	08000f35 	.word	0x08000f35
 8000ef8:	08000f35 	.word	0x08000f35
 8000efc:	08000f31 	.word	0x08000f31
	{
		case_str(eKey_Idle)
 8000f00:	4b10      	ldr	r3, [pc, #64]	@ (8000f44 <key_id_2_str+0xdc>)
 8000f02:	e019      	b.n	8000f38 <key_id_2_str+0xd0>
		case_str(eKey_Enter)
 8000f04:	4b10      	ldr	r3, [pc, #64]	@ (8000f48 <key_id_2_str+0xe0>)
 8000f06:	e017      	b.n	8000f38 <key_id_2_str+0xd0>
		case_str(eKey_Up)
 8000f08:	4b10      	ldr	r3, [pc, #64]	@ (8000f4c <key_id_2_str+0xe4>)
 8000f0a:	e015      	b.n	8000f38 <key_id_2_str+0xd0>
		case_str(eKey_User)
 8000f0c:	4b10      	ldr	r3, [pc, #64]	@ (8000f50 <key_id_2_str+0xe8>)
 8000f0e:	e013      	b.n	8000f38 <key_id_2_str+0xd0>
		case_str(eKey_Down)
 8000f10:	4b10      	ldr	r3, [pc, #64]	@ (8000f54 <key_id_2_str+0xec>)
 8000f12:	e011      	b.n	8000f38 <key_id_2_str+0xd0>
		case_str(eKey_Version)
 8000f14:	4b10      	ldr	r3, [pc, #64]	@ (8000f58 <key_id_2_str+0xf0>)
 8000f16:	e00f      	b.n	8000f38 <key_id_2_str+0xd0>
		case_str(eKey_ChSel)
 8000f18:	4b10      	ldr	r3, [pc, #64]	@ (8000f5c <key_id_2_str+0xf4>)
 8000f1a:	e00d      	b.n	8000f38 <key_id_2_str+0xd0>
		case_str(eKey_Mode)
 8000f1c:	4b10      	ldr	r3, [pc, #64]	@ (8000f60 <key_id_2_str+0xf8>)
 8000f1e:	e00b      	b.n	8000f38 <key_id_2_str+0xd0>
		case_str(eKey_Factory)
 8000f20:	4b10      	ldr	r3, [pc, #64]	@ (8000f64 <key_id_2_str+0xfc>)
 8000f22:	e009      	b.n	8000f38 <key_id_2_str+0xd0>
		case_str(eKey_CursorUp)
 8000f24:	4b10      	ldr	r3, [pc, #64]	@ (8000f68 <key_id_2_str+0x100>)
 8000f26:	e007      	b.n	8000f38 <key_id_2_str+0xd0>
		case_str(eKey_CursorDown)
 8000f28:	4b10      	ldr	r3, [pc, #64]	@ (8000f6c <key_id_2_str+0x104>)
 8000f2a:	e005      	b.n	8000f38 <key_id_2_str+0xd0>
		case_str(eKey_SetMode)
 8000f2c:	4b10      	ldr	r3, [pc, #64]	@ (8000f70 <key_id_2_str+0x108>)
 8000f2e:	e003      	b.n	8000f38 <key_id_2_str+0xd0>
		case_str(eKey_ExitRemote)
 8000f30:	4b10      	ldr	r3, [pc, #64]	@ (8000f74 <key_id_2_str+0x10c>)
 8000f32:	e001      	b.n	8000f38 <key_id_2_str+0xd0>
		default:
			break;
 8000f34:	bf00      	nop
	}
	return "Unknown key";
 8000f36:	4b10      	ldr	r3, [pc, #64]	@ (8000f78 <key_id_2_str+0x110>)
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	08009a74 	.word	0x08009a74
 8000f48:	08009a80 	.word	0x08009a80
 8000f4c:	08009a8c 	.word	0x08009a8c
 8000f50:	08009a94 	.word	0x08009a94
 8000f54:	08009aa0 	.word	0x08009aa0
 8000f58:	08009aac 	.word	0x08009aac
 8000f5c:	08009abc 	.word	0x08009abc
 8000f60:	08009ac8 	.word	0x08009ac8
 8000f64:	08009ad4 	.word	0x08009ad4
 8000f68:	08009ae4 	.word	0x08009ae4
 8000f6c:	08009af4 	.word	0x08009af4
 8000f70:	08009b04 	.word	0x08009b04
 8000f74:	08009b14 	.word	0x08009b14
 8000f78:	08009b24 	.word	0x08009b24

08000f7c <get_model>:
    __set_MSP(*(__IO uint32_t *)SYSTEMBOOT_ADDR);
    Jump_To_Application();
}

const char* get_model(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
	return "MSV2008_Front panel";
 8000f80:	4b02      	ldr	r3, [pc, #8]	@ (8000f8c <get_model+0x10>)
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc80      	pop	{r7}
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	08009b30 	.word	0x08009b30

08000f90 <banner>:

static void banner(void)
{
 8000f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af04      	add	r7, sp, #16
	LOG_INF("======================================================");
 8000f96:	4877      	ldr	r0, [pc, #476]	@ (8001174 <banner+0x1e4>)
 8000f98:	f7ff fe78 	bl	8000c8c <Printf>
	LOG_INF("\t YNS Vision LED Controller");
 8000f9c:	4876      	ldr	r0, [pc, #472]	@ (8001178 <banner+0x1e8>)
 8000f9e:	f7ff fe75 	bl	8000c8c <Printf>
	LOG_INF("\t Build Data	: %04d-%02d-%02d %02d:%02d:%02d", BUILD_YEAR, BUILD_MONTH, BUILD_DAY,
 8000fa2:	234d      	movs	r3, #77	@ 0x4d
 8000fa4:	2b3f      	cmp	r3, #63	@ 0x3f
 8000fa6:	d017      	beq.n	8000fd8 <banner+0x48>
 8000fa8:	2332      	movs	r3, #50	@ 0x32
 8000faa:	3b30      	subs	r3, #48	@ 0x30
 8000fac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000fb0:	fb03 f202 	mul.w	r2, r3, r2
 8000fb4:	2330      	movs	r3, #48	@ 0x30
 8000fb6:	3b30      	subs	r3, #48	@ 0x30
 8000fb8:	2164      	movs	r1, #100	@ 0x64
 8000fba:	fb01 f303 	mul.w	r3, r1, r3
 8000fbe:	18d1      	adds	r1, r2, r3
 8000fc0:	2332      	movs	r3, #50	@ 0x32
 8000fc2:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	4413      	add	r3, r2
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	18ca      	adds	r2, r1, r3
 8000fd0:	2335      	movs	r3, #53	@ 0x35
 8000fd2:	3b30      	subs	r3, #48	@ 0x30
 8000fd4:	18d4      	adds	r4, r2, r3
 8000fd6:	e000      	b.n	8000fda <banner+0x4a>
 8000fd8:	2463      	movs	r4, #99	@ 0x63
 8000fda:	234d      	movs	r3, #77	@ 0x4d
 8000fdc:	2b3f      	cmp	r3, #63	@ 0x3f
 8000fde:	d067      	beq.n	80010b0 <banner+0x120>
 8000fe0:	234d      	movs	r3, #77	@ 0x4d
 8000fe2:	2b4a      	cmp	r3, #74	@ 0x4a
 8000fe4:	d105      	bne.n	8000ff2 <banner+0x62>
 8000fe6:	2361      	movs	r3, #97	@ 0x61
 8000fe8:	2b61      	cmp	r3, #97	@ 0x61
 8000fea:	d102      	bne.n	8000ff2 <banner+0x62>
 8000fec:	2372      	movs	r3, #114	@ 0x72
 8000fee:	2b6e      	cmp	r3, #110	@ 0x6e
 8000ff0:	d05c      	beq.n	80010ac <banner+0x11c>
 8000ff2:	234d      	movs	r3, #77	@ 0x4d
 8000ff4:	2b46      	cmp	r3, #70	@ 0x46
 8000ff6:	d056      	beq.n	80010a6 <banner+0x116>
 8000ff8:	234d      	movs	r3, #77	@ 0x4d
 8000ffa:	2b4d      	cmp	r3, #77	@ 0x4d
 8000ffc:	d105      	bne.n	800100a <banner+0x7a>
 8000ffe:	2361      	movs	r3, #97	@ 0x61
 8001000:	2b61      	cmp	r3, #97	@ 0x61
 8001002:	d102      	bne.n	800100a <banner+0x7a>
 8001004:	2372      	movs	r3, #114	@ 0x72
 8001006:	2b72      	cmp	r3, #114	@ 0x72
 8001008:	d04b      	beq.n	80010a2 <banner+0x112>
 800100a:	234d      	movs	r3, #77	@ 0x4d
 800100c:	2b41      	cmp	r3, #65	@ 0x41
 800100e:	d102      	bne.n	8001016 <banner+0x86>
 8001010:	2361      	movs	r3, #97	@ 0x61
 8001012:	2b70      	cmp	r3, #112	@ 0x70
 8001014:	d042      	beq.n	800109c <banner+0x10c>
 8001016:	234d      	movs	r3, #77	@ 0x4d
 8001018:	2b4d      	cmp	r3, #77	@ 0x4d
 800101a:	d105      	bne.n	8001028 <banner+0x98>
 800101c:	2361      	movs	r3, #97	@ 0x61
 800101e:	2b61      	cmp	r3, #97	@ 0x61
 8001020:	d102      	bne.n	8001028 <banner+0x98>
 8001022:	2372      	movs	r3, #114	@ 0x72
 8001024:	2b79      	cmp	r3, #121	@ 0x79
 8001026:	d036      	beq.n	8001096 <banner+0x106>
 8001028:	234d      	movs	r3, #77	@ 0x4d
 800102a:	2b4a      	cmp	r3, #74	@ 0x4a
 800102c:	d105      	bne.n	800103a <banner+0xaa>
 800102e:	2361      	movs	r3, #97	@ 0x61
 8001030:	2b75      	cmp	r3, #117	@ 0x75
 8001032:	d102      	bne.n	800103a <banner+0xaa>
 8001034:	2372      	movs	r3, #114	@ 0x72
 8001036:	2b6e      	cmp	r3, #110	@ 0x6e
 8001038:	d02a      	beq.n	8001090 <banner+0x100>
 800103a:	234d      	movs	r3, #77	@ 0x4d
 800103c:	2b4a      	cmp	r3, #74	@ 0x4a
 800103e:	d105      	bne.n	800104c <banner+0xbc>
 8001040:	2361      	movs	r3, #97	@ 0x61
 8001042:	2b75      	cmp	r3, #117	@ 0x75
 8001044:	d102      	bne.n	800104c <banner+0xbc>
 8001046:	2372      	movs	r3, #114	@ 0x72
 8001048:	2b6c      	cmp	r3, #108	@ 0x6c
 800104a:	d01e      	beq.n	800108a <banner+0xfa>
 800104c:	234d      	movs	r3, #77	@ 0x4d
 800104e:	2b41      	cmp	r3, #65	@ 0x41
 8001050:	d102      	bne.n	8001058 <banner+0xc8>
 8001052:	2361      	movs	r3, #97	@ 0x61
 8001054:	2b75      	cmp	r3, #117	@ 0x75
 8001056:	d015      	beq.n	8001084 <banner+0xf4>
 8001058:	234d      	movs	r3, #77	@ 0x4d
 800105a:	2b53      	cmp	r3, #83	@ 0x53
 800105c:	d010      	beq.n	8001080 <banner+0xf0>
 800105e:	234d      	movs	r3, #77	@ 0x4d
 8001060:	2b4f      	cmp	r3, #79	@ 0x4f
 8001062:	d00b      	beq.n	800107c <banner+0xec>
 8001064:	234d      	movs	r3, #77	@ 0x4d
 8001066:	2b4e      	cmp	r3, #78	@ 0x4e
 8001068:	d006      	beq.n	8001078 <banner+0xe8>
 800106a:	234d      	movs	r3, #77	@ 0x4d
 800106c:	2b44      	cmp	r3, #68	@ 0x44
 800106e:	d101      	bne.n	8001074 <banner+0xe4>
 8001070:	220c      	movs	r2, #12
 8001072:	e009      	b.n	8001088 <banner+0xf8>
 8001074:	2263      	movs	r2, #99	@ 0x63
 8001076:	e007      	b.n	8001088 <banner+0xf8>
 8001078:	220b      	movs	r2, #11
 800107a:	e005      	b.n	8001088 <banner+0xf8>
 800107c:	220a      	movs	r2, #10
 800107e:	e003      	b.n	8001088 <banner+0xf8>
 8001080:	2209      	movs	r2, #9
 8001082:	e001      	b.n	8001088 <banner+0xf8>
 8001084:	2208      	movs	r2, #8
 8001086:	e002      	b.n	800108e <banner+0xfe>
 8001088:	e001      	b.n	800108e <banner+0xfe>
 800108a:	2207      	movs	r2, #7
 800108c:	e002      	b.n	8001094 <banner+0x104>
 800108e:	e001      	b.n	8001094 <banner+0x104>
 8001090:	2206      	movs	r2, #6
 8001092:	e002      	b.n	800109a <banner+0x10a>
 8001094:	e001      	b.n	800109a <banner+0x10a>
 8001096:	2205      	movs	r2, #5
 8001098:	e002      	b.n	80010a0 <banner+0x110>
 800109a:	e001      	b.n	80010a0 <banner+0x110>
 800109c:	2204      	movs	r2, #4
 800109e:	e004      	b.n	80010aa <banner+0x11a>
 80010a0:	e003      	b.n	80010aa <banner+0x11a>
 80010a2:	2203      	movs	r2, #3
 80010a4:	e005      	b.n	80010b2 <banner+0x122>
 80010a6:	2202      	movs	r2, #2
 80010a8:	e003      	b.n	80010b2 <banner+0x122>
 80010aa:	e002      	b.n	80010b2 <banner+0x122>
 80010ac:	2201      	movs	r2, #1
 80010ae:	e000      	b.n	80010b2 <banner+0x122>
 80010b0:	2263      	movs	r2, #99	@ 0x63
 80010b2:	234d      	movs	r3, #77	@ 0x4d
 80010b4:	2b3f      	cmp	r3, #63	@ 0x3f
 80010b6:	d010      	beq.n	80010da <banner+0x14a>
 80010b8:	2332      	movs	r3, #50	@ 0x32
 80010ba:	2b2f      	cmp	r3, #47	@ 0x2f
 80010bc:	d908      	bls.n	80010d0 <banner+0x140>
 80010be:	2332      	movs	r3, #50	@ 0x32
 80010c0:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 80010c4:	460b      	mov	r3, r1
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	440b      	add	r3, r1
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	4619      	mov	r1, r3
 80010ce:	e000      	b.n	80010d2 <banner+0x142>
 80010d0:	2100      	movs	r1, #0
 80010d2:	2331      	movs	r3, #49	@ 0x31
 80010d4:	3b30      	subs	r3, #48	@ 0x30
 80010d6:	18cd      	adds	r5, r1, r3
 80010d8:	e000      	b.n	80010dc <banner+0x14c>
 80010da:	2563      	movs	r5, #99	@ 0x63
 80010dc:	2331      	movs	r3, #49	@ 0x31
 80010de:	2b3f      	cmp	r3, #63	@ 0x3f
 80010e0:	d00c      	beq.n	80010fc <banner+0x16c>
 80010e2:	2331      	movs	r3, #49	@ 0x31
 80010e4:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 80010e8:	460b      	mov	r3, r1
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	440b      	add	r3, r1
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	4619      	mov	r1, r3
 80010f2:	2334      	movs	r3, #52	@ 0x34
 80010f4:	440b      	add	r3, r1
 80010f6:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 80010fa:	e000      	b.n	80010fe <banner+0x16e>
 80010fc:	2163      	movs	r1, #99	@ 0x63
 80010fe:	2331      	movs	r3, #49	@ 0x31
 8001100:	2b3f      	cmp	r3, #63	@ 0x3f
 8001102:	d00c      	beq.n	800111e <banner+0x18e>
 8001104:	2335      	movs	r3, #53	@ 0x35
 8001106:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 800110a:	4603      	mov	r3, r0
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4403      	add	r3, r0
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	4618      	mov	r0, r3
 8001114:	2338      	movs	r3, #56	@ 0x38
 8001116:	4403      	add	r3, r0
 8001118:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 800111c:	e000      	b.n	8001120 <banner+0x190>
 800111e:	2063      	movs	r0, #99	@ 0x63
 8001120:	2331      	movs	r3, #49	@ 0x31
 8001122:	2b3f      	cmp	r3, #63	@ 0x3f
 8001124:	d00b      	beq.n	800113e <banner+0x1ae>
 8001126:	2331      	movs	r3, #49	@ 0x31
 8001128:	f1a3 0630 	sub.w	r6, r3, #48	@ 0x30
 800112c:	4633      	mov	r3, r6
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4433      	add	r3, r6
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	461e      	mov	r6, r3
 8001136:	2330      	movs	r3, #48	@ 0x30
 8001138:	4433      	add	r3, r6
 800113a:	3b30      	subs	r3, #48	@ 0x30
 800113c:	e000      	b.n	8001140 <banner+0x1b0>
 800113e:	2363      	movs	r3, #99	@ 0x63
 8001140:	9302      	str	r3, [sp, #8]
 8001142:	9001      	str	r0, [sp, #4]
 8001144:	9100      	str	r1, [sp, #0]
 8001146:	462b      	mov	r3, r5
 8001148:	4621      	mov	r1, r4
 800114a:	480c      	ldr	r0, [pc, #48]	@ (800117c <banner+0x1ec>)
 800114c:	f7ff fd9e 	bl	8000c8c <Printf>
			BUILD_HOUR, BUILD_MIN, BUILD_SEC);
	LOG_INF("\tModel		: %s", get_model());
 8001150:	f7ff ff14 	bl	8000f7c <get_model>
 8001154:	4603      	mov	r3, r0
 8001156:	4619      	mov	r1, r3
 8001158:	4809      	ldr	r0, [pc, #36]	@ (8001180 <banner+0x1f0>)
 800115a:	f7ff fd97 	bl	8000c8c <Printf>
	LOG_INF("\tVersion		: %s", _VERSION_);
 800115e:	4909      	ldr	r1, [pc, #36]	@ (8001184 <banner+0x1f4>)
 8001160:	4809      	ldr	r0, [pc, #36]	@ (8001188 <banner+0x1f8>)
 8001162:	f7ff fd93 	bl	8000c8c <Printf>
	LOG_INF("======================================================");
 8001166:	4803      	ldr	r0, [pc, #12]	@ (8001174 <banner+0x1e4>)
 8001168:	f7ff fd90 	bl	8000c8c <Printf>
}
 800116c:	bf00      	nop
 800116e:	3704      	adds	r7, #4
 8001170:	46bd      	mov	sp, r7
 8001172:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001174:	08009b44 	.word	0x08009b44
 8001178:	08009b84 	.word	0x08009b84
 800117c:	08009ba8 	.word	0x08009ba8
 8001180:	08009bdc 	.word	0x08009bdc
 8001184:	08009bf0 	.word	0x08009bf0
 8001188:	08009bf8 	.word	0x08009bf8

0800118c <Init_device>:

static int Init_device(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	do{
		if(uart_init()){
 8001190:	f7ff fd3c 	bl	8000c0c <uart_init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d002      	beq.n	80011a0 <Init_device+0x14>
			return -1;
 800119a:	f04f 33ff 	mov.w	r3, #4294967295
 800119e:	e00a      	b.n	80011b6 <Init_device+0x2a>
		}
		app_config_init();
 80011a0:	f7ff fb0a 	bl	80007b8 <app_config_init>

		if(apps_init()){
 80011a4:	f7ff fac8 	bl	8000738 <apps_init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d002      	beq.n	80011b4 <Init_device+0x28>
			return -1;
 80011ae:	f04f 33ff 	mov.w	r3, #4294967295
 80011b2:	e000      	b.n	80011b6 <Init_device+0x2a>
		}
	}while(0);

	return 0;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
    LOG_DBG("Stack Overflow in Task: %s\n", pcTaskName);
 80011c6:	6839      	ldr	r1, [r7, #0]
 80011c8:	4803      	ldr	r0, [pc, #12]	@ (80011d8 <vApplicationStackOverflowHook+0x1c>)
 80011ca:	f7ff fd5f 	bl	8000c8c <Printf>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	08009c10 	.word	0x08009c10

080011dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011dc:	b5b0      	push	{r4, r5, r7, lr}
 80011de:	b09c      	sub	sp, #112	@ 0x70
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011e2:	f002 fb39 	bl	8003858 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e6:	f000 f891 	bl	800130c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ea:	f000 f92b 	bl	8001444 <MX_GPIO_Init>
  //MX_IWDG_Init();
  MX_USART1_UART_Init();
 80011ee:	f000 f8d5 	bl	800139c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80011f2:	f000 f8fd 	bl	80013f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  banner();
 80011f6:	f7ff fecb 	bl	8000f90 <banner>
  Init_device();
 80011fa:	f7ff ffc7 	bl	800118c <Init_device>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of opLedTimer */
  osTimerDef(opLedTimer, opLedCb);
 80011fe:	4b36      	ldr	r3, [pc, #216]	@ (80012d8 <main+0xfc>)
 8001200:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001202:	2300      	movs	r3, #0
 8001204:	66fb      	str	r3, [r7, #108]	@ 0x6c
  opLedTimerHandle = osTimerCreate(osTimer(opLedTimer), osTimerPeriodic, NULL);
 8001206:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800120a:	2200      	movs	r2, #0
 800120c:	2101      	movs	r1, #1
 800120e:	4618      	mov	r0, r3
 8001210:	f004 fe34 	bl	8005e7c <osTimerCreate>
 8001214:	4603      	mov	r3, r0
 8001216:	4a31      	ldr	r2, [pc, #196]	@ (80012dc <main+0x100>)
 8001218:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of keyQueue */
  osMessageQDef(keyQueue, 16, uint8_t);
 800121a:	4b31      	ldr	r3, [pc, #196]	@ (80012e0 <main+0x104>)
 800121c:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8001220:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001222:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  keyQueueHandle = osMessageCreate(osMessageQ(keyQueue), NULL);
 8001226:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f004 fe9d 	bl	8005f6c <osMessageCreate>
 8001232:	4603      	mov	r3, r0
 8001234:	4a2b      	ldr	r2, [pc, #172]	@ (80012e4 <main+0x108>)
 8001236:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ApplicationTask */
  osThreadDef(ApplicationTask, applicationTask, osPriorityNormal, 0, 512);
 8001238:	4b2b      	ldr	r3, [pc, #172]	@ (80012e8 <main+0x10c>)
 800123a:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800123e:	461d      	mov	r5, r3
 8001240:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001242:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001244:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001248:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ApplicationTaskHandle = osThreadCreate(osThread(ApplicationTask), NULL);
 800124c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f004 fdb1 	bl	8005dba <osThreadCreate>
 8001258:	4603      	mov	r3, r0
 800125a:	4a24      	ldr	r2, [pc, #144]	@ (80012ec <main+0x110>)
 800125c:	6013      	str	r3, [r2, #0]

  /* definition and creation of seriaTask */
  osThreadDef(seriaTask, SerialTask, osPriorityIdle, 0, 128);
 800125e:	4b24      	ldr	r3, [pc, #144]	@ (80012f0 <main+0x114>)
 8001260:	f107 0420 	add.w	r4, r7, #32
 8001264:	461d      	mov	r5, r3
 8001266:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001268:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800126a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800126e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  seriaTaskHandle = osThreadCreate(osThread(seriaTask), NULL);
 8001272:	f107 0320 	add.w	r3, r7, #32
 8001276:	2100      	movs	r1, #0
 8001278:	4618      	mov	r0, r3
 800127a:	f004 fd9e 	bl	8005dba <osThreadCreate>
 800127e:	4603      	mov	r3, r0
 8001280:	4a1c      	ldr	r2, [pc, #112]	@ (80012f4 <main+0x118>)
 8001282:	6013      	str	r3, [r2, #0]

  /* definition and creation of KeyTask */
  osThreadDef(KeyTask, keyProc, osPriorityIdle, 0, 256);
 8001284:	4b1c      	ldr	r3, [pc, #112]	@ (80012f8 <main+0x11c>)
 8001286:	1d3c      	adds	r4, r7, #4
 8001288:	461d      	mov	r5, r3
 800128a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800128c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800128e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001292:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  KeyTaskHandle = osThreadCreate(osThread(KeyTask), NULL);
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	2100      	movs	r1, #0
 800129a:	4618      	mov	r0, r3
 800129c:	f004 fd8d 	bl	8005dba <osThreadCreate>
 80012a0:	4603      	mov	r3, r0
 80012a2:	4a16      	ldr	r2, [pc, #88]	@ (80012fc <main+0x120>)
 80012a4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  if(ApplicationTaskHandle == NULL){
 80012a6:	4b11      	ldr	r3, [pc, #68]	@ (80012ec <main+0x110>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d102      	bne.n	80012b4 <main+0xd8>
	  LOG_ERR("Event Task Create Error!!");
 80012ae:	4814      	ldr	r0, [pc, #80]	@ (8001300 <main+0x124>)
 80012b0:	f7ff fcec 	bl	8000c8c <Printf>
  }
  if(seriaTaskHandle == NULL){
 80012b4:	4b0f      	ldr	r3, [pc, #60]	@ (80012f4 <main+0x118>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d102      	bne.n	80012c2 <main+0xe6>
	  LOG_ERR("Serial Task Create Error!!");
 80012bc:	4811      	ldr	r0, [pc, #68]	@ (8001304 <main+0x128>)
 80012be:	f7ff fce5 	bl	8000c8c <Printf>
  }
  if(KeyTaskHandle == NULL){
 80012c2:	4b0e      	ldr	r3, [pc, #56]	@ (80012fc <main+0x120>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d102      	bne.n	80012d0 <main+0xf4>
	  LOG_ERR("Key Task Create Error!!");
 80012ca:	480f      	ldr	r0, [pc, #60]	@ (8001308 <main+0x12c>)
 80012cc:	f7ff fcde 	bl	8000c8c <Printf>
  }

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80012d0:	f004 fd6c 	bl	8005dac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012d4:	bf00      	nop
 80012d6:	e7fd      	b.n	80012d4 <main+0xf8>
 80012d8:	080015e9 	.word	0x080015e9
 80012dc:	20000b94 	.word	0x20000b94
 80012e0:	08009c9c 	.word	0x08009c9c
 80012e4:	20000b90 	.word	0x20000b90
 80012e8:	08009cbc 	.word	0x08009cbc
 80012ec:	20000b84 	.word	0x20000b84
 80012f0:	08009ce4 	.word	0x08009ce4
 80012f4:	20000b88 	.word	0x20000b88
 80012f8:	08009d08 	.word	0x08009d08
 80012fc:	20000b8c 	.word	0x20000b8c
 8001300:	08009c34 	.word	0x08009c34
 8001304:	08009c58 	.word	0x08009c58
 8001308:	08009c7c 	.word	0x08009c7c

0800130c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b090      	sub	sp, #64	@ 0x40
 8001310:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001312:	f107 0318 	add.w	r3, r7, #24
 8001316:	2228      	movs	r2, #40	@ 0x28
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f007 fcfa 	bl	8008d14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	60da      	str	r2, [r3, #12]
 800132c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800132e:	2309      	movs	r3, #9
 8001330:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001332:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001336:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001338:	2300      	movs	r3, #0
 800133a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800133c:	2301      	movs	r3, #1
 800133e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001340:	2301      	movs	r3, #1
 8001342:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001344:	2302      	movs	r3, #2
 8001346:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001348:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800134c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800134e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001352:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001354:	f107 0318 	add.w	r3, r7, #24
 8001358:	4618      	mov	r0, r3
 800135a:	f003 f817 	bl	800438c <HAL_RCC_OscConfig>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001364:	f000 f962 	bl	800162c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001368:	230f      	movs	r3, #15
 800136a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800136c:	2302      	movs	r3, #2
 800136e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001374:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001378:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	2102      	movs	r1, #2
 8001382:	4618      	mov	r0, r3
 8001384:	f003 fa84 	bl	8004890 <HAL_RCC_ClockConfig>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800138e:	f000 f94d 	bl	800162c <Error_Handler>
  }
}
 8001392:	bf00      	nop
 8001394:	3740      	adds	r7, #64	@ 0x40
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013a0:	4b11      	ldr	r3, [pc, #68]	@ (80013e8 <MX_USART1_UART_Init+0x4c>)
 80013a2:	4a12      	ldr	r2, [pc, #72]	@ (80013ec <MX_USART1_UART_Init+0x50>)
 80013a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013a6:	4b10      	ldr	r3, [pc, #64]	@ (80013e8 <MX_USART1_UART_Init+0x4c>)
 80013a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013ae:	4b0e      	ldr	r3, [pc, #56]	@ (80013e8 <MX_USART1_UART_Init+0x4c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013b4:	4b0c      	ldr	r3, [pc, #48]	@ (80013e8 <MX_USART1_UART_Init+0x4c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013ba:	4b0b      	ldr	r3, [pc, #44]	@ (80013e8 <MX_USART1_UART_Init+0x4c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013c0:	4b09      	ldr	r3, [pc, #36]	@ (80013e8 <MX_USART1_UART_Init+0x4c>)
 80013c2:	220c      	movs	r2, #12
 80013c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013c6:	4b08      	ldr	r3, [pc, #32]	@ (80013e8 <MX_USART1_UART_Init+0x4c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013cc:	4b06      	ldr	r3, [pc, #24]	@ (80013e8 <MX_USART1_UART_Init+0x4c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013d2:	4805      	ldr	r0, [pc, #20]	@ (80013e8 <MX_USART1_UART_Init+0x4c>)
 80013d4:	f003 fe58 	bl	8005088 <HAL_UART_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013de:	f000 f925 	bl	800162c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000af4 	.word	0x20000af4
 80013ec:	40013800 	.word	0x40013800

080013f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013f4:	4b11      	ldr	r3, [pc, #68]	@ (800143c <MX_USART2_UART_Init+0x4c>)
 80013f6:	4a12      	ldr	r2, [pc, #72]	@ (8001440 <MX_USART2_UART_Init+0x50>)
 80013f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013fa:	4b10      	ldr	r3, [pc, #64]	@ (800143c <MX_USART2_UART_Init+0x4c>)
 80013fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001400:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001402:	4b0e      	ldr	r3, [pc, #56]	@ (800143c <MX_USART2_UART_Init+0x4c>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001408:	4b0c      	ldr	r3, [pc, #48]	@ (800143c <MX_USART2_UART_Init+0x4c>)
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800140e:	4b0b      	ldr	r3, [pc, #44]	@ (800143c <MX_USART2_UART_Init+0x4c>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001414:	4b09      	ldr	r3, [pc, #36]	@ (800143c <MX_USART2_UART_Init+0x4c>)
 8001416:	220c      	movs	r2, #12
 8001418:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141a:	4b08      	ldr	r3, [pc, #32]	@ (800143c <MX_USART2_UART_Init+0x4c>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001420:	4b06      	ldr	r3, [pc, #24]	@ (800143c <MX_USART2_UART_Init+0x4c>)
 8001422:	2200      	movs	r2, #0
 8001424:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001426:	4805      	ldr	r0, [pc, #20]	@ (800143c <MX_USART2_UART_Init+0x4c>)
 8001428:	f003 fe2e 	bl	8005088 <HAL_UART_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001432:	f000 f8fb 	bl	800162c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000b3c 	.word	0x20000b3c
 8001440:	40004400 	.word	0x40004400

08001444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b088      	sub	sp, #32
 8001448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144a:	f107 0310 	add.w	r3, r7, #16
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001458:	4b45      	ldr	r3, [pc, #276]	@ (8001570 <MX_GPIO_Init+0x12c>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	4a44      	ldr	r2, [pc, #272]	@ (8001570 <MX_GPIO_Init+0x12c>)
 800145e:	f043 0310 	orr.w	r3, r3, #16
 8001462:	6193      	str	r3, [r2, #24]
 8001464:	4b42      	ldr	r3, [pc, #264]	@ (8001570 <MX_GPIO_Init+0x12c>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	f003 0310 	and.w	r3, r3, #16
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001470:	4b3f      	ldr	r3, [pc, #252]	@ (8001570 <MX_GPIO_Init+0x12c>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	4a3e      	ldr	r2, [pc, #248]	@ (8001570 <MX_GPIO_Init+0x12c>)
 8001476:	f043 0320 	orr.w	r3, r3, #32
 800147a:	6193      	str	r3, [r2, #24]
 800147c:	4b3c      	ldr	r3, [pc, #240]	@ (8001570 <MX_GPIO_Init+0x12c>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	f003 0320 	and.w	r3, r3, #32
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001488:	4b39      	ldr	r3, [pc, #228]	@ (8001570 <MX_GPIO_Init+0x12c>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	4a38      	ldr	r2, [pc, #224]	@ (8001570 <MX_GPIO_Init+0x12c>)
 800148e:	f043 0304 	orr.w	r3, r3, #4
 8001492:	6193      	str	r3, [r2, #24]
 8001494:	4b36      	ldr	r3, [pc, #216]	@ (8001570 <MX_GPIO_Init+0x12c>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	607b      	str	r3, [r7, #4]
 800149e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a0:	4b33      	ldr	r3, [pc, #204]	@ (8001570 <MX_GPIO_Init+0x12c>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	4a32      	ldr	r2, [pc, #200]	@ (8001570 <MX_GPIO_Init+0x12c>)
 80014a6:	f043 0308 	orr.w	r3, r3, #8
 80014aa:	6193      	str	r3, [r2, #24]
 80014ac:	4b30      	ldr	r3, [pc, #192]	@ (8001570 <MX_GPIO_Init+0x12c>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	f003 0308 	and.w	r3, r3, #8
 80014b4:	603b      	str	r3, [r7, #0]
 80014b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, GPIO_PIN_RESET);
 80014b8:	2200      	movs	r2, #0
 80014ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014be:	482d      	ldr	r0, [pc, #180]	@ (8001574 <MX_GPIO_Init+0x130>)
 80014c0:	f002 ff33 	bl	800432a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin
 80014c4:	2200      	movs	r2, #0
 80014c6:	f24f 31f8 	movw	r1, #62456	@ 0xf3f8
 80014ca:	482b      	ldr	r0, [pc, #172]	@ (8001578 <MX_GPIO_Init+0x134>)
 80014cc:	f002 ff2d 	bl	800432a <HAL_GPIO_WritePin>
                          |TRG2_Pin|TRG3_Pin|TRG4_Pin|TRG5_Pin
                          |TRG6_Pin|TRG7_Pin|TRG8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_EN_Pin|LCD_RW_Pin|LCD_RS_Pin|TRG1_Pin, GPIO_PIN_RESET);
 80014d0:	2200      	movs	r2, #0
 80014d2:	f44f 4119 	mov.w	r1, #39168	@ 0x9900
 80014d6:	4829      	ldr	r0, [pc, #164]	@ (800157c <MX_GPIO_Init+0x138>)
 80014d8:	f002 ff27 	bl	800432a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : STATUS_LED_Pin */
  GPIO_InitStruct.Pin = STATUS_LED_Pin;
 80014dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e2:	2301      	movs	r3, #1
 80014e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	2302      	movs	r3, #2
 80014ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(STATUS_LED_GPIO_Port, &GPIO_InitStruct);
 80014ee:	f107 0310 	add.w	r3, r7, #16
 80014f2:	4619      	mov	r1, r3
 80014f4:	481f      	ldr	r0, [pc, #124]	@ (8001574 <MX_GPIO_Init+0x130>)
 80014f6:	f002 fd7d 	bl	8003ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DOWN_SW_Pin UP_SW_Pin */
  GPIO_InitStruct.Pin = DOWN_SW_Pin|UP_SW_Pin;
 80014fa:	23c0      	movs	r3, #192	@ 0xc0
 80014fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001506:	f107 0310 	add.w	r3, r7, #16
 800150a:	4619      	mov	r1, r3
 800150c:	481b      	ldr	r0, [pc, #108]	@ (800157c <MX_GPIO_Init+0x138>)
 800150e:	f002 fd71 	bl	8003ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENTER_SW_Pin MODE_SW_Pin */
  GPIO_InitStruct.Pin = ENTER_SW_Pin|MODE_SW_Pin;
 8001512:	2303      	movs	r3, #3
 8001514:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151e:	f107 0310 	add.w	r3, r7, #16
 8001522:	4619      	mov	r1, r3
 8001524:	4814      	ldr	r0, [pc, #80]	@ (8001578 <MX_GPIO_Init+0x134>)
 8001526:	f002 fd65 	bl	8003ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D7_Pin LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin
                           TRG2_Pin TRG3_Pin TRG4_Pin TRG5_Pin
                           TRG6_Pin TRG7_Pin TRG8_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin
 800152a:	f24f 33f8 	movw	r3, #62456	@ 0xf3f8
 800152e:	613b      	str	r3, [r7, #16]
                          |TRG2_Pin|TRG3_Pin|TRG4_Pin|TRG5_Pin
                          |TRG6_Pin|TRG7_Pin|TRG8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001530:	2301      	movs	r3, #1
 8001532:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001538:	2302      	movs	r3, #2
 800153a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153c:	f107 0310 	add.w	r3, r7, #16
 8001540:	4619      	mov	r1, r3
 8001542:	480d      	ldr	r0, [pc, #52]	@ (8001578 <MX_GPIO_Init+0x134>)
 8001544:	f002 fd56 	bl	8003ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_EN_Pin LCD_RW_Pin LCD_RS_Pin TRG1_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin|LCD_RW_Pin|LCD_RS_Pin|TRG1_Pin;
 8001548:	f44f 4319 	mov.w	r3, #39168	@ 0x9900
 800154c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154e:	2301      	movs	r3, #1
 8001550:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001556:	2302      	movs	r3, #2
 8001558:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155a:	f107 0310 	add.w	r3, r7, #16
 800155e:	4619      	mov	r1, r3
 8001560:	4806      	ldr	r0, [pc, #24]	@ (800157c <MX_GPIO_Init+0x138>)
 8001562:	f002 fd47 	bl	8003ff4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001566:	bf00      	nop
 8001568:	3720      	adds	r7, #32
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40021000 	.word	0x40021000
 8001574:	40011000 	.word	0x40011000
 8001578:	40010c00 	.word	0x40010c00
 800157c:	40010800 	.word	0x40010800

08001580 <applicationTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_applicationTask */
void applicationTask(void const * argument)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	//event_queue_observer_t main_evt;

	LOG_INF("Run Event Task");
 8001588:	4809      	ldr	r0, [pc, #36]	@ (80015b0 <applicationTask+0x30>)
 800158a:	f7ff fb7f 	bl	8000c8c <Printf>

	LCD_INIT();  // for osDelay
 800158e:	f000 fb0b 	bl	8001ba8 <LCD_INIT>

	screen_init();
 8001592:	f000 fb45 	bl	8001c20 <screen_init>

	osTimerStart(opLedTimerHandle, OP_LED_TIMER_TICK);
 8001596:	4b07      	ldr	r3, [pc, #28]	@ (80015b4 <applicationTask+0x34>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800159e:	4618      	mov	r0, r3
 80015a0:	f004 fca0 	bl	8005ee4 <osTimerStart>
  /* Infinite loop */
//	while(1){
//	osDelay(10);
//	}
	AppsTask();
 80015a4:	f7ff f83a 	bl	800061c <AppsTask>
  /* USER CODE END 5 */
}
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	08009d24 	.word	0x08009d24
 80015b4:	20000b94 	.word	0x20000b94

080015b8 <SerialTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SerialTask */
void SerialTask(void const * argument)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SerialTask */
	LOG_DBG("Run Serial Task");
 80015c0:	4802      	ldr	r0, [pc, #8]	@ (80015cc <SerialTask+0x14>)
 80015c2:	f7ff fb63 	bl	8000c8c <Printf>
  /* Infinite loop */
  for(;;)
  {
	  uart_task();
 80015c6:	f7ff faad 	bl	8000b24 <uart_task>
 80015ca:	e7fc      	b.n	80015c6 <SerialTask+0xe>
 80015cc:	08009d3c 	.word	0x08009d3c

080015d0 <keyProc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_keyProc */
void keyProc(void const * argument)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN keyProc */
	LOG_DBG("Run Key Task");
 80015d8:	4802      	ldr	r0, [pc, #8]	@ (80015e4 <keyProc+0x14>)
 80015da:	f7ff fb57 	bl	8000c8c <Printf>
//  LOG_DBG("Minimum Ever Free Heap Size: %lu bytes\n", minHeap);
  /* Infinite loop */
  for(;;)
  {
	  //osDelay(10);
	  key_handler();
 80015de:	f7fe ffef 	bl	80005c0 <key_handler>
 80015e2:	e7fc      	b.n	80015de <keyProc+0xe>
 80015e4:	08009d54 	.word	0x08009d54

080015e8 <opLedCb>:
  /* USER CODE END keyProc */
}

/* opLedCb function */
void opLedCb(void const * argument)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN opLedCb */
	HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 80015f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015f4:	4803      	ldr	r0, [pc, #12]	@ (8001604 <opLedCb+0x1c>)
 80015f6:	f002 feb0 	bl	800435a <HAL_GPIO_TogglePin>
  /* USER CODE END opLedCb */
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40011000 	.word	0x40011000

08001608 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a04      	ldr	r2, [pc, #16]	@ (8001628 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d101      	bne.n	800161e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800161a:	f002 f933 	bl	8003884 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40000800 	.word	0x40000800

0800162c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001630:	b672      	cpsid	i
}
 8001632:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001634:	bf00      	nop
 8001636:	e7fd      	b.n	8001634 <Error_Handler+0x8>

08001638 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800163e:	4b18      	ldr	r3, [pc, #96]	@ (80016a0 <HAL_MspInit+0x68>)
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	4a17      	ldr	r2, [pc, #92]	@ (80016a0 <HAL_MspInit+0x68>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	6193      	str	r3, [r2, #24]
 800164a:	4b15      	ldr	r3, [pc, #84]	@ (80016a0 <HAL_MspInit+0x68>)
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001656:	4b12      	ldr	r3, [pc, #72]	@ (80016a0 <HAL_MspInit+0x68>)
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	4a11      	ldr	r2, [pc, #68]	@ (80016a0 <HAL_MspInit+0x68>)
 800165c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001660:	61d3      	str	r3, [r2, #28]
 8001662:	4b0f      	ldr	r3, [pc, #60]	@ (80016a0 <HAL_MspInit+0x68>)
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800166e:	2200      	movs	r2, #0
 8001670:	210f      	movs	r1, #15
 8001672:	f06f 0001 	mvn.w	r0, #1
 8001676:	f002 f9d6 	bl	8003a26 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800167a:	4b0a      	ldr	r3, [pc, #40]	@ (80016a4 <HAL_MspInit+0x6c>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	4a04      	ldr	r2, [pc, #16]	@ (80016a4 <HAL_MspInit+0x6c>)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001696:	bf00      	nop
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40010000 	.word	0x40010000

080016a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08a      	sub	sp, #40	@ 0x28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 0318 	add.w	r3, r7, #24
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a3b      	ldr	r2, [pc, #236]	@ (80017b0 <HAL_UART_MspInit+0x108>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d13a      	bne.n	800173e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016c8:	4b3a      	ldr	r3, [pc, #232]	@ (80017b4 <HAL_UART_MspInit+0x10c>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	4a39      	ldr	r2, [pc, #228]	@ (80017b4 <HAL_UART_MspInit+0x10c>)
 80016ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016d2:	6193      	str	r3, [r2, #24]
 80016d4:	4b37      	ldr	r3, [pc, #220]	@ (80017b4 <HAL_UART_MspInit+0x10c>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016dc:	617b      	str	r3, [r7, #20]
 80016de:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e0:	4b34      	ldr	r3, [pc, #208]	@ (80017b4 <HAL_UART_MspInit+0x10c>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	4a33      	ldr	r2, [pc, #204]	@ (80017b4 <HAL_UART_MspInit+0x10c>)
 80016e6:	f043 0304 	orr.w	r3, r3, #4
 80016ea:	6193      	str	r3, [r2, #24]
 80016ec:	4b31      	ldr	r3, [pc, #196]	@ (80017b4 <HAL_UART_MspInit+0x10c>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fe:	2302      	movs	r3, #2
 8001700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001702:	2303      	movs	r3, #3
 8001704:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001706:	f107 0318 	add.w	r3, r7, #24
 800170a:	4619      	mov	r1, r3
 800170c:	482a      	ldr	r0, [pc, #168]	@ (80017b8 <HAL_UART_MspInit+0x110>)
 800170e:	f002 fc71 	bl	8003ff4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001712:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001718:	2300      	movs	r3, #0
 800171a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001720:	f107 0318 	add.w	r3, r7, #24
 8001724:	4619      	mov	r1, r3
 8001726:	4824      	ldr	r0, [pc, #144]	@ (80017b8 <HAL_UART_MspInit+0x110>)
 8001728:	f002 fc64 	bl	8003ff4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800172c:	2200      	movs	r2, #0
 800172e:	2105      	movs	r1, #5
 8001730:	2025      	movs	r0, #37	@ 0x25
 8001732:	f002 f978 	bl	8003a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001736:	2025      	movs	r0, #37	@ 0x25
 8001738:	f002 f991 	bl	8003a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800173c:	e034      	b.n	80017a8 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a1e      	ldr	r2, [pc, #120]	@ (80017bc <HAL_UART_MspInit+0x114>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d12f      	bne.n	80017a8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001748:	4b1a      	ldr	r3, [pc, #104]	@ (80017b4 <HAL_UART_MspInit+0x10c>)
 800174a:	69db      	ldr	r3, [r3, #28]
 800174c:	4a19      	ldr	r2, [pc, #100]	@ (80017b4 <HAL_UART_MspInit+0x10c>)
 800174e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001752:	61d3      	str	r3, [r2, #28]
 8001754:	4b17      	ldr	r3, [pc, #92]	@ (80017b4 <HAL_UART_MspInit+0x10c>)
 8001756:	69db      	ldr	r3, [r3, #28]
 8001758:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001760:	4b14      	ldr	r3, [pc, #80]	@ (80017b4 <HAL_UART_MspInit+0x10c>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	4a13      	ldr	r2, [pc, #76]	@ (80017b4 <HAL_UART_MspInit+0x10c>)
 8001766:	f043 0304 	orr.w	r3, r3, #4
 800176a:	6193      	str	r3, [r2, #24]
 800176c:	4b11      	ldr	r3, [pc, #68]	@ (80017b4 <HAL_UART_MspInit+0x10c>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001778:	2304      	movs	r3, #4
 800177a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177c:	2302      	movs	r3, #2
 800177e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001780:	2303      	movs	r3, #3
 8001782:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001784:	f107 0318 	add.w	r3, r7, #24
 8001788:	4619      	mov	r1, r3
 800178a:	480b      	ldr	r0, [pc, #44]	@ (80017b8 <HAL_UART_MspInit+0x110>)
 800178c:	f002 fc32 	bl	8003ff4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001790:	2308      	movs	r3, #8
 8001792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001794:	2300      	movs	r3, #0
 8001796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179c:	f107 0318 	add.w	r3, r7, #24
 80017a0:	4619      	mov	r1, r3
 80017a2:	4805      	ldr	r0, [pc, #20]	@ (80017b8 <HAL_UART_MspInit+0x110>)
 80017a4:	f002 fc26 	bl	8003ff4 <HAL_GPIO_Init>
}
 80017a8:	bf00      	nop
 80017aa:	3728      	adds	r7, #40	@ 0x28
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40013800 	.word	0x40013800
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40010800 	.word	0x40010800
 80017bc:	40004400 	.word	0x40004400

080017c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08e      	sub	sp, #56	@ 0x38
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80017c8:	2300      	movs	r3, #0
 80017ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80017d0:	2300      	movs	r3, #0
 80017d2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80017d6:	4b34      	ldr	r3, [pc, #208]	@ (80018a8 <HAL_InitTick+0xe8>)
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	4a33      	ldr	r2, [pc, #204]	@ (80018a8 <HAL_InitTick+0xe8>)
 80017dc:	f043 0304 	orr.w	r3, r3, #4
 80017e0:	61d3      	str	r3, [r2, #28]
 80017e2:	4b31      	ldr	r3, [pc, #196]	@ (80018a8 <HAL_InitTick+0xe8>)
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	f003 0304 	and.w	r3, r3, #4
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017ee:	f107 0210 	add.w	r2, r7, #16
 80017f2:	f107 0314 	add.w	r3, r7, #20
 80017f6:	4611      	mov	r1, r2
 80017f8:	4618      	mov	r0, r3
 80017fa:	f003 f9b9 	bl	8004b70 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017fe:	6a3b      	ldr	r3, [r7, #32]
 8001800:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001804:	2b00      	cmp	r3, #0
 8001806:	d103      	bne.n	8001810 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001808:	f003 f98a 	bl	8004b20 <HAL_RCC_GetPCLK1Freq>
 800180c:	6378      	str	r0, [r7, #52]	@ 0x34
 800180e:	e004      	b.n	800181a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001810:	f003 f986 	bl	8004b20 <HAL_RCC_GetPCLK1Freq>
 8001814:	4603      	mov	r3, r0
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800181a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800181c:	4a23      	ldr	r2, [pc, #140]	@ (80018ac <HAL_InitTick+0xec>)
 800181e:	fba2 2303 	umull	r2, r3, r2, r3
 8001822:	0c9b      	lsrs	r3, r3, #18
 8001824:	3b01      	subs	r3, #1
 8001826:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001828:	4b21      	ldr	r3, [pc, #132]	@ (80018b0 <HAL_InitTick+0xf0>)
 800182a:	4a22      	ldr	r2, [pc, #136]	@ (80018b4 <HAL_InitTick+0xf4>)
 800182c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800182e:	4b20      	ldr	r3, [pc, #128]	@ (80018b0 <HAL_InitTick+0xf0>)
 8001830:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001834:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001836:	4a1e      	ldr	r2, [pc, #120]	@ (80018b0 <HAL_InitTick+0xf0>)
 8001838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800183a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800183c:	4b1c      	ldr	r3, [pc, #112]	@ (80018b0 <HAL_InitTick+0xf0>)
 800183e:	2200      	movs	r2, #0
 8001840:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001842:	4b1b      	ldr	r3, [pc, #108]	@ (80018b0 <HAL_InitTick+0xf0>)
 8001844:	2200      	movs	r2, #0
 8001846:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001848:	4b19      	ldr	r3, [pc, #100]	@ (80018b0 <HAL_InitTick+0xf0>)
 800184a:	2200      	movs	r2, #0
 800184c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800184e:	4818      	ldr	r0, [pc, #96]	@ (80018b0 <HAL_InitTick+0xf0>)
 8001850:	f003 f9dc 	bl	8004c0c <HAL_TIM_Base_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800185a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800185e:	2b00      	cmp	r3, #0
 8001860:	d11b      	bne.n	800189a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001862:	4813      	ldr	r0, [pc, #76]	@ (80018b0 <HAL_InitTick+0xf0>)
 8001864:	f003 fa2a 	bl	8004cbc <HAL_TIM_Base_Start_IT>
 8001868:	4603      	mov	r3, r0
 800186a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800186e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001872:	2b00      	cmp	r3, #0
 8001874:	d111      	bne.n	800189a <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001876:	201e      	movs	r0, #30
 8001878:	f002 f8f1 	bl	8003a5e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b0f      	cmp	r3, #15
 8001880:	d808      	bhi.n	8001894 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001882:	2200      	movs	r2, #0
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	201e      	movs	r0, #30
 8001888:	f002 f8cd 	bl	8003a26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800188c:	4a0a      	ldr	r2, [pc, #40]	@ (80018b8 <HAL_InitTick+0xf8>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6013      	str	r3, [r2, #0]
 8001892:	e002      	b.n	800189a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800189a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3738      	adds	r7, #56	@ 0x38
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40021000 	.word	0x40021000
 80018ac:	431bde83 	.word	0x431bde83
 80018b0:	20000b98 	.word	0x20000b98
 80018b4:	40000800 	.word	0x40000800
 80018b8:	2000014c 	.word	0x2000014c

080018bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018c0:	bf00      	nop
 80018c2:	e7fd      	b.n	80018c0 <NMI_Handler+0x4>

080018c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018c8:	bf00      	nop
 80018ca:	e7fd      	b.n	80018c8 <HardFault_Handler+0x4>

080018cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d0:	bf00      	nop
 80018d2:	e7fd      	b.n	80018d0 <MemManage_Handler+0x4>

080018d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018d8:	bf00      	nop
 80018da:	e7fd      	b.n	80018d8 <BusFault_Handler+0x4>

080018dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e0:	bf00      	nop
 80018e2:	e7fd      	b.n	80018e0 <UsageFault_Handler+0x4>

080018e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr

080018f0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80018f4:	4802      	ldr	r0, [pc, #8]	@ (8001900 <TIM4_IRQHandler+0x10>)
 80018f6:	f003 fa33 	bl	8004d60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000b98 	.word	0x20000b98

08001904 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001908:	4802      	ldr	r0, [pc, #8]	@ (8001914 <USART1_IRQHandler+0x10>)
 800190a:	f003 fcbd 	bl	8005288 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000af4 	.word	0x20000af4

08001918 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001920:	4a14      	ldr	r2, [pc, #80]	@ (8001974 <_sbrk+0x5c>)
 8001922:	4b15      	ldr	r3, [pc, #84]	@ (8001978 <_sbrk+0x60>)
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800192c:	4b13      	ldr	r3, [pc, #76]	@ (800197c <_sbrk+0x64>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d102      	bne.n	800193a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001934:	4b11      	ldr	r3, [pc, #68]	@ (800197c <_sbrk+0x64>)
 8001936:	4a12      	ldr	r2, [pc, #72]	@ (8001980 <_sbrk+0x68>)
 8001938:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800193a:	4b10      	ldr	r3, [pc, #64]	@ (800197c <_sbrk+0x64>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4413      	add	r3, r2
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	429a      	cmp	r2, r3
 8001946:	d207      	bcs.n	8001958 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001948:	f007 fa4a 	bl	8008de0 <__errno>
 800194c:	4603      	mov	r3, r0
 800194e:	220c      	movs	r2, #12
 8001950:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001952:	f04f 33ff 	mov.w	r3, #4294967295
 8001956:	e009      	b.n	800196c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001958:	4b08      	ldr	r3, [pc, #32]	@ (800197c <_sbrk+0x64>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800195e:	4b07      	ldr	r3, [pc, #28]	@ (800197c <_sbrk+0x64>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	4a05      	ldr	r2, [pc, #20]	@ (800197c <_sbrk+0x64>)
 8001968:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800196a:	68fb      	ldr	r3, [r7, #12]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3718      	adds	r7, #24
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20005000 	.word	0x20005000
 8001978:	00000400 	.word	0x00000400
 800197c:	20000be0 	.word	0x20000be0
 8001980:	20003878 	.word	0x20003878

08001984 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr

08001990 <LCD_LOAD_CGRAM>:
	0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, // 4columns ||||
	0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, // 5columns |||||
};
/* Private function prototypes -----------------------------------------------*/
void LCD_LOAD_CGRAM(char tab[], uint8_t charnum)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	460b      	mov	r3, r1
 800199a:	70fb      	strb	r3, [r7, #3]
	uint8_t index;
	/* Each character contains 8 definition values*/
	charnum = (uint8_t)(charnum * 8);
 800199c:	78fb      	ldrb	r3, [r7, #3]
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	70fb      	strb	r3, [r7, #3]
	for (index = 0;index < charnum;index++)
 80019a2:	2300      	movs	r3, #0
 80019a4:	73fb      	strb	r3, [r7, #15]
 80019a6:	e00c      	b.n	80019c2 <LCD_LOAD_CGRAM+0x32>
	{
		/* Store values in LCD*/
		LCD_printchar(tab[index]);
 80019a8:	7bfb      	ldrb	r3, [r7, #15]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f000 f883 	bl	8001abc <LCD_printchar>
		osDelay(1);
 80019b6:	2001      	movs	r0, #1
 80019b8:	f004 fa4b 	bl	8005e52 <osDelay>
	for (index = 0;index < charnum;index++)
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
 80019be:	3301      	adds	r3, #1
 80019c0:	73fb      	strb	r3, [r7, #15]
 80019c2:	7bfa      	ldrb	r2, [r7, #15]
 80019c4:	78fb      	ldrb	r3, [r7, #3]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d3ee      	bcc.n	80019a8 <LCD_LOAD_CGRAM+0x18>
	}
}
 80019ca:	bf00      	nop
 80019cc:	bf00      	nop
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <LCD_ENABLE>:

void LCD_ENABLE (void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 80019d8:	2201      	movs	r2, #1
 80019da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019de:	4807      	ldr	r0, [pc, #28]	@ (80019fc <LCD_ENABLE+0x28>)
 80019e0:	f002 fca3 	bl	800432a <HAL_GPIO_WritePin>
	osDelay(2);
 80019e4:	2002      	movs	r0, #2
 80019e6:	f004 fa34 	bl	8005e52 <osDelay>
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 80019ea:	2200      	movs	r2, #0
 80019ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019f0:	4802      	ldr	r0, [pc, #8]	@ (80019fc <LCD_ENABLE+0x28>)
 80019f2:	f002 fc9a 	bl	800432a <HAL_GPIO_WritePin>
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40010800 	.word	0x40010800

08001a00 <Send4Bit>:

static void Send4Bit(uint8_t data)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_Data_Port, LCD_D4_Pin, (data & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	461a      	mov	r2, r3
 8001a14:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a18:	4816      	ldr	r0, [pc, #88]	@ (8001a74 <Send4Bit+0x74>)
 8001a1a:	f002 fc86 	bl	800432a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_Data_Port, LCD_D5_Pin, (data & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	105b      	asrs	r3, r3, #1
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a30:	4810      	ldr	r0, [pc, #64]	@ (8001a74 <Send4Bit+0x74>)
 8001a32:	f002 fc7a 	bl	800432a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_Data_Port, LCD_D6_Pin, (data & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	109b      	asrs	r3, r3, #2
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	461a      	mov	r2, r3
 8001a44:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a48:	480a      	ldr	r0, [pc, #40]	@ (8001a74 <Send4Bit+0x74>)
 8001a4a:	f002 fc6e 	bl	800432a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_Data_Port, LCD_D7_Pin, (data & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	10db      	asrs	r3, r3, #3
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a60:	4804      	ldr	r0, [pc, #16]	@ (8001a74 <Send4Bit+0x74>)
 8001a62:	f002 fc62 	bl	800432a <HAL_GPIO_WritePin>
    LCD_ENABLE();
 8001a66:	f7ff ffb5 	bl	80019d4 <LCD_ENABLE>
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40010c00 	.word	0x40010c00

08001a78 <LCD_CMD>:

void LCD_CMD(unsigned char cmd_data)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8001a82:	2200      	movs	r2, #0
 8001a84:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a88:	480b      	ldr	r0, [pc, #44]	@ (8001ab8 <LCD_CMD+0x40>)
 8001a8a:	f002 fc4e 	bl	800432a <HAL_GPIO_WritePin>

	Send4Bit((cmd_data>>4)&0x0F);
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	091b      	lsrs	r3, r3, #4
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff ffb3 	bl	8001a00 <Send4Bit>
	Send4Bit(cmd_data & 0x0F);
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	f003 030f 	and.w	r3, r3, #15
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff ffac 	bl	8001a00 <Send4Bit>

	osDelay(2);
 8001aa8:	2002      	movs	r0, #2
 8001aaa:	f004 f9d2 	bl	8005e52 <osDelay>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40010800 	.word	0x40010800

08001abc <LCD_printchar>:

void LCD_printchar(unsigned char ascode)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001acc:	480b      	ldr	r0, [pc, #44]	@ (8001afc <LCD_printchar+0x40>)
 8001ace:	f002 fc2c 	bl	800432a <HAL_GPIO_WritePin>

	Send4Bit((ascode>>4)&0x0F);
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	091b      	lsrs	r3, r3, #4
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ff91 	bl	8001a00 <Send4Bit>
	Send4Bit(ascode & 0x0F);
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	f003 030f 	and.w	r3, r3, #15
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff ff8a 	bl	8001a00 <Send4Bit>

	osDelay(2);
 8001aec:	2002      	movs	r0, #2
 8001aee:	f004 f9b0 	bl	8005e52 <osDelay>
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40010800 	.word	0x40010800

08001b00 <LCD_printstring>:

void LCD_printstring(char *text)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
	//LOG_DBG("Print String[%s]", text);
	do
	{
		LCD_printchar(*text++);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	1c5a      	adds	r2, r3, #1
 8001b0c:	607a      	str	r2, [r7, #4]
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff ffd3 	bl	8001abc <LCD_printchar>
	}while (*text != '\n');
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b0a      	cmp	r3, #10
 8001b1c:	d1f4      	bne.n	8001b08 <LCD_printstring+0x8>
}
 8001b1e:	bf00      	nop
 8001b20:	bf00      	nop
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <LCD_CLEAR_DISPLAY>:

void LCD_CLEAR_DISPLAY(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
	LCD_CMD(0x01);
 8001b2c:	2001      	movs	r0, #1
 8001b2e:	f7ff ffa3 	bl	8001a78 <LCD_CMD>
	osDelay(2);
 8001b32:	2002      	movs	r0, #2
 8001b34:	f004 f98d 	bl	8005e52 <osDelay>
}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <LCD_DISP_ON>:
{
	LCD_CMD(0x1C);
}

void LCD_DISP_ON(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
	LCD_CMD(0x0C);
 8001b40:	200c      	movs	r0, #12
 8001b42:	f7ff ff99 	bl	8001a78 <LCD_CMD>
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <LCD_DISP_CURSOR>:
{
	LCD_CMD(0x08);
}

void LCD_DISP_CURSOR(void)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	af00      	add	r7, sp, #0
	LCD_CMD(0x0E); // Cursor ON / Blink ON
 8001b4e:	200e      	movs	r0, #14
 8001b50:	f7ff ff92 	bl	8001a78 <LCD_CMD>
}
 8001b54:	bf00      	nop
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <LCD_LOCATE>:

void LCD_LOCATE(uint8_t row, uint8_t column)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	460a      	mov	r2, r1
 8001b62:	71fb      	strb	r3, [r7, #7]
 8001b64:	4613      	mov	r3, r2
 8001b66:	71bb      	strb	r3, [r7, #6]
	column--;
 8001b68:	79bb      	ldrb	r3, [r7, #6]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	71bb      	strb	r3, [r7, #6]
	switch (row)
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d002      	beq.n	8001b7a <LCD_LOCATE+0x22>
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d009      	beq.n	8001b8c <LCD_LOCATE+0x34>
		case 2:
			/* Set cursor to 2nd row address and add index*/
			LCD_CMD(column |= 0x40 | 0x80);
			break;
		default:
			break;
 8001b78:	e011      	b.n	8001b9e <LCD_LOCATE+0x46>
			LCD_CMD(column |= 0x80);
 8001b7a:	79bb      	ldrb	r3, [r7, #6]
 8001b7c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001b80:	71bb      	strb	r3, [r7, #6]
 8001b82:	79bb      	ldrb	r3, [r7, #6]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff77 	bl	8001a78 <LCD_CMD>
			break;
 8001b8a:	e008      	b.n	8001b9e <LCD_LOCATE+0x46>
			LCD_CMD(column |= 0x40 | 0x80);
 8001b8c:	79bb      	ldrb	r3, [r7, #6]
 8001b8e:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8001b92:	71bb      	strb	r3, [r7, #6]
 8001b94:	79bb      	ldrb	r3, [r7, #6]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff ff6e 	bl	8001a78 <LCD_CMD>
			break;
 8001b9c:	bf00      	nop
	}
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
	...

08001ba8 <LCD_INIT>:
		}
	}
}

void LCD_INIT(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 8001bac:	2201      	movs	r2, #1
 8001bae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001bb2:	4819      	ldr	r0, [pc, #100]	@ (8001c18 <LCD_INIT+0x70>)
 8001bb4:	f002 fbb9 	bl	800432a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001bbe:	4816      	ldr	r0, [pc, #88]	@ (8001c18 <LCD_INIT+0x70>)
 8001bc0:	f002 fbb3 	bl	800432a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001bca:	4813      	ldr	r0, [pc, #76]	@ (8001c18 <LCD_INIT+0x70>)
 8001bcc:	f002 fbad 	bl	800432a <HAL_GPIO_WritePin>

	//Initialization of HD44780-based LCD (4-bit HW)
	LCD_CMD(0x33);
 8001bd0:	2033      	movs	r0, #51	@ 0x33
 8001bd2:	f7ff ff51 	bl	8001a78 <LCD_CMD>
	osDelay(4);
 8001bd6:	2004      	movs	r0, #4
 8001bd8:	f004 f93b 	bl	8005e52 <osDelay>
	LCD_CMD(0x32);
 8001bdc:	2032      	movs	r0, #50	@ 0x32
 8001bde:	f7ff ff4b 	bl	8001a78 <LCD_CMD>
	osDelay(4);
 8001be2:	2004      	movs	r0, #4
 8001be4:	f004 f935 	bl	8005e52 <osDelay>
	//Function Set 4-bit mode DL=0 N=1(2Lie 5*8 dots) F=0(Don't care)
	LCD_CMD(0x28);
 8001be8:	2028      	movs	r0, #40	@ 0x28
 8001bea:	f7ff ff45 	bl	8001a78 <LCD_CMD>
	//Display On/Off Control curso x, blink x
	LCD_CMD(0x0C);
 8001bee:	200c      	movs	r0, #12
 8001bf0:	f7ff ff42 	bl	8001a78 <LCD_CMD>

	//Entry mode set, Increment, display not shift
	LCD_CMD(0x06);
 8001bf4:	2006      	movs	r0, #6
 8001bf6:	f7ff ff3f 	bl	8001a78 <LCD_CMD>

	LCD_CLEAR_DISPLAY();
 8001bfa:	f7ff ff95 	bl	8001b28 <LCD_CLEAR_DISPLAY>
	//Minimum delay to wait before driving LCD module
	osDelay(200);
 8001bfe:	20c8      	movs	r0, #200	@ 0xc8
 8001c00:	f004 f927 	bl	8005e52 <osDelay>

	LCD_CMD(CGRAM_address_start);
 8001c04:	2040      	movs	r0, #64	@ 0x40
 8001c06:	f7ff ff37 	bl	8001a78 <LCD_CMD>
	LCD_LOAD_CGRAM(Custom, 6);
 8001c0a:	2106      	movs	r1, #6
 8001c0c:	4803      	ldr	r0, [pc, #12]	@ (8001c1c <LCD_INIT+0x74>)
 8001c0e:	f7ff febf 	bl	8001990 <LCD_LOAD_CGRAM>
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40010800 	.word	0x40010800
 8001c1c:	200000a8 	.word	0x200000a8

08001c20 <screen_init>:
};

config_t load_cfg;
/* Private functions ---------------------------------------------------------*/
void screen_init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
	char line_buf[LCD_PRINT_MAX];

	memset(&m_cfg, 0, sizeof(m_cfg));
 8001c26:	224a      	movs	r2, #74	@ 0x4a
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4815      	ldr	r0, [pc, #84]	@ (8001c80 <screen_init+0x60>)
 8001c2c:	f007 f872 	bl	8008d14 <memset>
	memcpy(&load_cfg, m_app_config, sizeof(config_t));
 8001c30:	4b14      	ldr	r3, [pc, #80]	@ (8001c84 <screen_init+0x64>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a14      	ldr	r2, [pc, #80]	@ (8001c88 <screen_init+0x68>)
 8001c36:	4610      	mov	r0, r2
 8001c38:	4619      	mov	r1, r3
 8001c3a:	2347      	movs	r3, #71	@ 0x47
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	f007 f8fb 	bl	8008e38 <memcpy>

	sprintf(line_buf,"%s\n", load_cfg.company);
 8001c42:	1d3b      	adds	r3, r7, #4
 8001c44:	4a11      	ldr	r2, [pc, #68]	@ (8001c8c <screen_init+0x6c>)
 8001c46:	4912      	ldr	r1, [pc, #72]	@ (8001c90 <screen_init+0x70>)
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f007 f805 	bl	8008c58 <siprintf>
	LOG_DBG("Model : %s", line_buf);
 8001c4e:	1d3b      	adds	r3, r7, #4
 8001c50:	4619      	mov	r1, r3
 8001c52:	4810      	ldr	r0, [pc, #64]	@ (8001c94 <screen_init+0x74>)
 8001c54:	f7ff f81a 	bl	8000c8c <Printf>
	LCD_LOCATE(1,2);
 8001c58:	2102      	movs	r1, #2
 8001c5a:	2001      	movs	r0, #1
 8001c5c:	f7ff ff7c 	bl	8001b58 <LCD_LOCATE>
	LCD_printstring(line_buf);
 8001c60:	1d3b      	adds	r3, r7, #4
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff ff4c 	bl	8001b00 <LCD_printstring>
	LCD_LOCATE(2,1);
 8001c68:	2101      	movs	r1, #1
 8001c6a:	2002      	movs	r0, #2
 8001c6c:	f7ff ff74 	bl	8001b58 <LCD_LOCATE>
	LCD_printstring("StrobeController\n");
 8001c70:	4809      	ldr	r0, [pc, #36]	@ (8001c98 <screen_init+0x78>)
 8001c72:	f7ff ff45 	bl	8001b00 <LCD_printstring>
}
 8001c76:	bf00      	nop
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000be4 	.word	0x20000be4
 8001c84:	20000218 	.word	0x20000218
 8001c88:	20000c30 	.word	0x20000c30
 8001c8c:	20000c65 	.word	0x20000c65
 8001c90:	08009d68 	.word	0x08009d68
 8001c94:	08009d6c 	.word	0x08009d6c
 8001c98:	08009d80 	.word	0x08009d80

08001c9c <screen_blink>:

void screen_blink(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
	if(m_cfg.enable_blink){
 8001ca0:	4b10      	ldr	r3, [pc, #64]	@ (8001ce4 <screen_blink+0x48>)
 8001ca2:	7b1b      	ldrb	r3, [r3, #12]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d01a      	beq.n	8001cde <screen_blink+0x42>
		LCD_LOCATE(m_cfg.blink_row,1);
 8001ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce4 <screen_blink+0x48>)
 8001caa:	7b9b      	ldrb	r3, [r3, #14]
 8001cac:	2101      	movs	r1, #1
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff ff52 	bl	8001b58 <LCD_LOCATE>
		m_cfg.blink ^= 1;
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce4 <screen_blink+0x48>)
 8001cb6:	7b5b      	ldrb	r3, [r3, #13]
 8001cb8:	f083 0301 	eor.w	r3, r3, #1
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	4b09      	ldr	r3, [pc, #36]	@ (8001ce4 <screen_blink+0x48>)
 8001cc0:	735a      	strb	r2, [r3, #13]
		//LOG_DBG("Blink%d: %s", m_cfg.blink, m_cfg.blink_text[m_cfg.blink]);
		LCD_printstring(m_cfg.blink_text[m_cfg.blink]);
 8001cc2:	4b08      	ldr	r3, [pc, #32]	@ (8001ce4 <screen_blink+0x48>)
 8001cc4:	7b5b      	ldrb	r3, [r3, #13]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	4613      	mov	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	3308      	adds	r3, #8
 8001cd2:	4a04      	ldr	r2, [pc, #16]	@ (8001ce4 <screen_blink+0x48>)
 8001cd4:	4413      	add	r3, r2
 8001cd6:	3307      	adds	r3, #7
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff11 	bl	8001b00 <LCD_printstring>
	}
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000be4 	.word	0x20000be4

08001ce8 <send_cmd_2_backend>:

static void send_cmd_2_backend(BackEnd_Cmd_t cmd, uint8_t ch, uint16_t value)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	71fb      	strb	r3, [r7, #7]
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	71bb      	strb	r3, [r7, #6]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	80bb      	strh	r3, [r7, #4]
	// Todo : Send Cmd
	uart_SendFront(cmd, ch, (uint32_t)value);
 8001cfa:	88ba      	ldrh	r2, [r7, #4]
 8001cfc:	79b9      	ldrb	r1, [r7, #6]
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe ff47 	bl	8000b94 <uart_SendFront>
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
	...

08001d10 <screen_process>:

ScreenID_t screen_process(ScreenID_t screen_id, Key_t key)
{
 8001d10:	b590      	push	{r4, r7, lr}
 8001d12:	b087      	sub	sp, #28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	460a      	mov	r2, r1
 8001d1a:	71fb      	strb	r3, [r7, #7]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	71bb      	strb	r3, [r7, #6]
	int menu_list_size = MAX_SC_LIST_NUM;
 8001d20:	230d      	movs	r3, #13
 8001d22:	613b      	str	r3, [r7, #16]
	int i;	
	Screen_param_t sc_param;

	LOG_INF("%s : key[%s] Set_mode[%d]", screen_id_2_str(screen_id), key_id_2_str(key), m_cfg.set_mode);
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff f82a 	bl	8000d80 <screen_id_2_str>
 8001d2c:	4604      	mov	r4, r0
 8001d2e:	79bb      	ldrb	r3, [r7, #6]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff f899 	bl	8000e68 <key_id_2_str>
 8001d36:	4602      	mov	r2, r0
 8001d38:	4b15      	ldr	r3, [pc, #84]	@ (8001d90 <screen_process+0x80>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	4621      	mov	r1, r4
 8001d3e:	4815      	ldr	r0, [pc, #84]	@ (8001d94 <screen_process+0x84>)
 8001d40:	f7fe ffa4 	bl	8000c8c <Printf>
	sc_param.sc_id = screen_id;
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	723b      	strb	r3, [r7, #8]
	sc_param.key = key;
 8001d48:	79bb      	ldrb	r3, [r7, #6]
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	817b      	strh	r3, [r7, #10]
	for(i = 0; menu_list_size; i++){
 8001d4e:	2300      	movs	r3, #0
 8001d50:	617b      	str	r3, [r7, #20]
 8001d52:	e015      	b.n	8001d80 <screen_process+0x70>
		if(screen_id == screen_func_list[i].id){
 8001d54:	4a10      	ldr	r2, [pc, #64]	@ (8001d98 <screen_process+0x88>)
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8001d5c:	79fa      	ldrb	r2, [r7, #7]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d10b      	bne.n	8001d7a <screen_process+0x6a>
			return screen_func_list[i].func(sc_param);			
 8001d62:	4a0d      	ldr	r2, [pc, #52]	@ (8001d98 <screen_process+0x88>)
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	4413      	add	r3, r2
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f107 0208 	add.w	r2, r7, #8
 8001d70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d74:	4798      	blx	r3
 8001d76:	4603      	mov	r3, r0
 8001d78:	e006      	b.n	8001d88 <screen_process+0x78>
	for(i = 0; menu_list_size; i++){
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	617b      	str	r3, [r7, #20]
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1e6      	bne.n	8001d54 <screen_process+0x44>
		}
	}
	return eMAX_SCREEN_ID;
 8001d86:	230f      	movs	r3, #15
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	371c      	adds	r7, #28
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd90      	pop	{r4, r7, pc}
 8001d90:	20000be4 	.word	0x20000be4
 8001d94:	08009d94 	.word	0x08009d94
 8001d98:	200000d8 	.word	0x200000d8

08001d9c <draw_title>:

static void draw_title(uint8_t step)
{
 8001d9c:	b590      	push	{r4, r7, lr}
 8001d9e:	b091      	sub	sp, #68	@ 0x44
 8001da0:	af02      	add	r7, sp, #8
 8001da2:	4603      	mov	r3, r0
 8001da4:	71fb      	strb	r3, [r7, #7]
	char line_1_buf[LCD_PRINT_MAX]={0,}, line_2_buf[LCD_PRINT_MAX]={0,};
 8001da6:	f107 0320 	add.w	r3, r7, #32
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	605a      	str	r2, [r3, #4]
 8001db0:	609a      	str	r2, [r3, #8]
 8001db2:	60da      	str	r2, [r3, #12]
 8001db4:	611a      	str	r2, [r3, #16]
 8001db6:	f107 030c 	add.w	r3, r7, #12
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	605a      	str	r2, [r3, #4]
 8001dc0:	609a      	str	r2, [r3, #8]
 8001dc2:	60da      	str	r2, [r3, #12]
 8001dc4:	611a      	str	r2, [r3, #16]
	uint8_t ch = m_cfg.cur_ch;
 8001dc6:	4bac      	ldr	r3, [pc, #688]	@ (8002078 <draw_title+0x2dc>)
 8001dc8:	789b      	ldrb	r3, [r3, #2]
 8001dca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t disp_ch = m_cfg.cur_ch+1;
 8001dce:	4baa      	ldr	r3, [pc, #680]	@ (8002078 <draw_title+0x2dc>)
 8001dd0:	789b      	ldrb	r3, [r3, #2]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

	LOG_INF("start Draw title [%d] ch[%d]\r\n", step, ch);
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001dde:	4619      	mov	r1, r3
 8001de0:	48a6      	ldr	r0, [pc, #664]	@ (800207c <draw_title+0x2e0>)
 8001de2:	f7fe ff53 	bl	8000c8c <Printf>

	switch(step){
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	2b0e      	cmp	r3, #14
 8001dea:	f200 81c6 	bhi.w	800217a <draw_title+0x3de>
 8001dee:	a201      	add	r2, pc, #4	@ (adr r2, 8001df4 <draw_title+0x58>)
 8001df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df4:	08001e31 	.word	0x08001e31
 8001df8:	08001e61 	.word	0x08001e61
 8001dfc:	08001e91 	.word	0x08001e91
 8001e00:	08001ec3 	.word	0x08001ec3
 8001e04:	08001f0d 	.word	0x08001f0d
 8001e08:	08001f35 	.word	0x08001f35
 8001e0c:	08001f5d 	.word	0x08001f5d
 8001e10:	08001f7d 	.word	0x08001f7d
 8001e14:	08001fbb 	.word	0x08001fbb
 8001e18:	0800200f 	.word	0x0800200f
 8001e1c:	08001fdf 	.word	0x08001fdf
 8001e20:	08002029 	.word	0x08002029
 8001e24:	08002045 	.word	0x08002045
 8001e28:	0800205f 	.word	0x0800205f
 8001e2c:	08002109 	.word	0x08002109
		case eCH_CHSelect:
			sprintf(line_1_buf, "CH%d   Operation\n", disp_ch);
 8001e30:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8001e34:	f107 0320 	add.w	r3, r7, #32
 8001e38:	4991      	ldr	r1, [pc, #580]	@ (8002080 <draw_title+0x2e4>)
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f006 ff0c 	bl	8008c58 <siprintf>
			sprintf(line_2_buf, "OnTime : %5dus\n", load_cfg.on_time[ch]);
 8001e40:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001e44:	4a8f      	ldr	r2, [pc, #572]	@ (8002084 <draw_title+0x2e8>)
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	4413      	add	r3, r2
 8001e4a:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	461a      	mov	r2, r3
 8001e52:	f107 030c 	add.w	r3, r7, #12
 8001e56:	498c      	ldr	r1, [pc, #560]	@ (8002088 <draw_title+0x2ec>)
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f006 fefd 	bl	8008c58 <siprintf>
			break;
 8001e5e:	e18c      	b.n	800217a <draw_title+0x3de>
		case eCH_OnTIME:
			sprintf(line_1_buf, "CH%d On-Time     \n", disp_ch);
 8001e60:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8001e64:	f107 0320 	add.w	r3, r7, #32
 8001e68:	4988      	ldr	r1, [pc, #544]	@ (800208c <draw_title+0x2f0>)
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f006 fef4 	bl	8008c58 <siprintf>
			sprintf(line_2_buf, "Value : %5d us\n", load_cfg.on_time[ch]);
 8001e70:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001e74:	4a83      	ldr	r2, [pc, #524]	@ (8002084 <draw_title+0x2e8>)
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	4413      	add	r3, r2
 8001e7a:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	461a      	mov	r2, r3
 8001e82:	f107 030c 	add.w	r3, r7, #12
 8001e86:	4982      	ldr	r1, [pc, #520]	@ (8002090 <draw_title+0x2f4>)
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f006 fee5 	bl	8008c58 <siprintf>
			break;
 8001e8e:	e174      	b.n	800217a <draw_title+0x3de>
		case eCH_DelayTIME:
			sprintf(line_1_buf, "CH%d Delay-Time  \n", disp_ch);
 8001e90:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8001e94:	f107 0320 	add.w	r3, r7, #32
 8001e98:	497e      	ldr	r1, [pc, #504]	@ (8002094 <draw_title+0x2f8>)
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f006 fedc 	bl	8008c58 <siprintf>
			sprintf(line_2_buf, "Value : %5d us\n", load_cfg.delay_time[ch]);
 8001ea0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001ea4:	4a77      	ldr	r2, [pc, #476]	@ (8002084 <draw_title+0x2e8>)
 8001ea6:	3308      	adds	r3, #8
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	4413      	add	r3, r2
 8001eac:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	f107 030c 	add.w	r3, r7, #12
 8001eb8:	4975      	ldr	r1, [pc, #468]	@ (8002090 <draw_title+0x2f4>)
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f006 fecc 	bl	8008c58 <siprintf>
			break;
 8001ec0:	e15b      	b.n	800217a <draw_title+0x3de>
		case eCH_TriggerSet:
			sprintf(line_1_buf, "CH%d Trigger Set \n", disp_ch);
 8001ec2:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8001ec6:	f107 0320 	add.w	r3, r7, #32
 8001eca:	4973      	ldr	r1, [pc, #460]	@ (8002098 <draw_title+0x2fc>)
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f006 fec3 	bl	8008c58 <siprintf>
			sprintf(line_2_buf, "Value : %s \n", load_cfg.edge[ch]?"Rising ":"Falling");
 8001ed2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001ed6:	4a6b      	ldr	r2, [pc, #428]	@ (8002084 <draw_title+0x2e8>)
 8001ed8:	4413      	add	r3, r2
 8001eda:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <draw_title+0x14a>
 8001ee2:	4a6e      	ldr	r2, [pc, #440]	@ (800209c <draw_title+0x300>)
 8001ee4:	e000      	b.n	8001ee8 <draw_title+0x14c>
 8001ee6:	4a6e      	ldr	r2, [pc, #440]	@ (80020a0 <draw_title+0x304>)
 8001ee8:	f107 030c 	add.w	r3, r7, #12
 8001eec:	496d      	ldr	r1, [pc, #436]	@ (80020a4 <draw_title+0x308>)
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f006 feb2 	bl	8008c58 <siprintf>
			memcpy(m_cfg.blink_text[0], line_2_buf, 17);
 8001ef4:	f107 030c 	add.w	r3, r7, #12
 8001ef8:	2211      	movs	r2, #17
 8001efa:	4619      	mov	r1, r3
 8001efc:	486a      	ldr	r0, [pc, #424]	@ (80020a8 <draw_title+0x30c>)
 8001efe:	f006 ff9b 	bl	8008e38 <memcpy>
			sprintf(m_cfg.blink_text[1],"Value :         \n");
 8001f02:	496a      	ldr	r1, [pc, #424]	@ (80020ac <draw_title+0x310>)
 8001f04:	486a      	ldr	r0, [pc, #424]	@ (80020b0 <draw_title+0x314>)
 8001f06:	f006 fea7 	bl	8008c58 <siprintf>
			break;
 8001f0a:	e136      	b.n	800217a <draw_title+0x3de>
		case eSEL_OPMODE:
			sprintf(line_1_buf, "Mode Select     \n");
 8001f0c:	f107 0320 	add.w	r3, r7, #32
 8001f10:	4968      	ldr	r1, [pc, #416]	@ (80020b4 <draw_title+0x318>)
 8001f12:	4618      	mov	r0, r3
 8001f14:	f006 fea0 	bl	8008c58 <siprintf>
			sprintf(line_2_buf, "      %s     \n", load_cfg.mode?"1 : N":"1 : 1");
 8001f18:	4b5a      	ldr	r3, [pc, #360]	@ (8002084 <draw_title+0x2e8>)
 8001f1a:	791b      	ldrb	r3, [r3, #4]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <draw_title+0x188>
 8001f20:	4a65      	ldr	r2, [pc, #404]	@ (80020b8 <draw_title+0x31c>)
 8001f22:	e000      	b.n	8001f26 <draw_title+0x18a>
 8001f24:	4a65      	ldr	r2, [pc, #404]	@ (80020bc <draw_title+0x320>)
 8001f26:	f107 030c 	add.w	r3, r7, #12
 8001f2a:	4965      	ldr	r1, [pc, #404]	@ (80020c0 <draw_title+0x324>)
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f006 fe93 	bl	8008c58 <siprintf>
			break;
 8001f32:	e122      	b.n	800217a <draw_title+0x3de>
		case eSET_OPMODE:
			sprintf(line_1_buf, "Mode Selection  \n");
 8001f34:	f107 0320 	add.w	r3, r7, #32
 8001f38:	4962      	ldr	r1, [pc, #392]	@ (80020c4 <draw_title+0x328>)
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f006 fe8c 	bl	8008c58 <siprintf>
			sprintf(line_2_buf, "      %s     \n", load_cfg.mode?"1 : N":"1 : 1");
 8001f40:	4b50      	ldr	r3, [pc, #320]	@ (8002084 <draw_title+0x2e8>)
 8001f42:	791b      	ldrb	r3, [r3, #4]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <draw_title+0x1b0>
 8001f48:	4a5b      	ldr	r2, [pc, #364]	@ (80020b8 <draw_title+0x31c>)
 8001f4a:	e000      	b.n	8001f4e <draw_title+0x1b2>
 8001f4c:	4a5b      	ldr	r2, [pc, #364]	@ (80020bc <draw_title+0x320>)
 8001f4e:	f107 030c 	add.w	r3, r7, #12
 8001f52:	495b      	ldr	r1, [pc, #364]	@ (80020c0 <draw_title+0x324>)
 8001f54:	4618      	mov	r0, r3
 8001f56:	f006 fe7f 	bl	8008c58 <siprintf>
			break;
 8001f5a:	e10e      	b.n	800217a <draw_title+0x3de>
		case eRS_DevID:
			sprintf(line_1_buf, "RS232 Operation  \n");
 8001f5c:	f107 0320 	add.w	r3, r7, #32
 8001f60:	4959      	ldr	r1, [pc, #356]	@ (80020c8 <draw_title+0x32c>)
 8001f62:	4618      	mov	r0, r3
 8001f64:	f006 fe78 	bl	8008c58 <siprintf>
			sprintf(line_2_buf, "Device ID : %02d  \n", load_cfg.dev_id);
 8001f68:	4b46      	ldr	r3, [pc, #280]	@ (8002084 <draw_title+0x2e8>)
 8001f6a:	795b      	ldrb	r3, [r3, #5]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	f107 030c 	add.w	r3, r7, #12
 8001f72:	4956      	ldr	r1, [pc, #344]	@ (80020cc <draw_title+0x330>)
 8001f74:	4618      	mov	r0, r3
 8001f76:	f006 fe6f 	bl	8008c58 <siprintf>
			break;
 8001f7a:	e0fe      	b.n	800217a <draw_title+0x3de>
		case eIP_Set:
			sprintf(line_1_buf, "Communication  \n");
 8001f7c:	f107 0320 	add.w	r3, r7, #32
 8001f80:	4953      	ldr	r1, [pc, #332]	@ (80020d0 <draw_title+0x334>)
 8001f82:	4618      	mov	r0, r3
 8001f84:	f006 fe68 	bl	8008c58 <siprintf>
			sprintf(line_2_buf, "%03d.%03d.%03d.%03d \n", load_cfg.ether.ipaddr[0], load_cfg.ether.ipaddr[1], load_cfg.ether.ipaddr[2], load_cfg.ether.ipaddr[3]);
 8001f88:	4b3e      	ldr	r3, [pc, #248]	@ (8002084 <draw_title+0x2e8>)
 8001f8a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4b3c      	ldr	r3, [pc, #240]	@ (8002084 <draw_title+0x2e8>)
 8001f92:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f96:	461c      	mov	r4, r3
 8001f98:	4b3a      	ldr	r3, [pc, #232]	@ (8002084 <draw_title+0x2e8>)
 8001f9a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	4b38      	ldr	r3, [pc, #224]	@ (8002084 <draw_title+0x2e8>)
 8001fa2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001fa6:	f107 000c 	add.w	r0, r7, #12
 8001faa:	9301      	str	r3, [sp, #4]
 8001fac:	9200      	str	r2, [sp, #0]
 8001fae:	4623      	mov	r3, r4
 8001fb0:	460a      	mov	r2, r1
 8001fb2:	4948      	ldr	r1, [pc, #288]	@ (80020d4 <draw_title+0x338>)
 8001fb4:	f006 fe50 	bl	8008c58 <siprintf>
			break;
 8001fb8:	e0df      	b.n	800217a <draw_title+0x3de>
		case ePORT_Set:
			sprintf(line_1_buf, "Communication  \n");
 8001fba:	f107 0320 	add.w	r3, r7, #32
 8001fbe:	4944      	ldr	r1, [pc, #272]	@ (80020d0 <draw_title+0x334>)
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f006 fe49 	bl	8008c58 <siprintf>
			sprintf(line_2_buf, "Port : %05d    \n", load_cfg.ether.port);
 8001fc6:	4b2f      	ldr	r3, [pc, #188]	@ (8002084 <draw_title+0x2e8>)
 8001fc8:	f8b3 3033 	ldrh.w	r3, [r3, #51]	@ 0x33
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	461a      	mov	r2, r3
 8001fd0:	f107 030c 	add.w	r3, r7, #12
 8001fd4:	4940      	ldr	r1, [pc, #256]	@ (80020d8 <draw_title+0x33c>)
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f006 fe3e 	bl	8008c58 <siprintf>
			break;
 8001fdc:	e0cd      	b.n	800217a <draw_title+0x3de>
		case eRemote_Mode:
			sprintf(line_1_buf, "Communication  \n");
 8001fde:	f107 0320 	add.w	r3, r7, #32
 8001fe2:	493b      	ldr	r1, [pc, #236]	@ (80020d0 <draw_title+0x334>)
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f006 fe37 	bl	8008c58 <siprintf>
			if(m_cfg.remote_mode == eREMOTE_RS232){
 8001fea:	4b23      	ldr	r3, [pc, #140]	@ (8002078 <draw_title+0x2dc>)
 8001fec:	785b      	ldrb	r3, [r3, #1]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d106      	bne.n	8002000 <draw_title+0x264>
				sprintf(line_2_buf, "RS232...       \n");
 8001ff2:	f107 030c 	add.w	r3, r7, #12
 8001ff6:	4939      	ldr	r1, [pc, #228]	@ (80020dc <draw_title+0x340>)
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f006 fe2d 	bl	8008c58 <siprintf>
			}else{
				sprintf(line_2_buf, "Ethernet...    \n");
			}
			break;
 8001ffe:	e0bc      	b.n	800217a <draw_title+0x3de>
				sprintf(line_2_buf, "Ethernet...    \n");
 8002000:	f107 030c 	add.w	r3, r7, #12
 8002004:	4936      	ldr	r1, [pc, #216]	@ (80020e0 <draw_title+0x344>)
 8002006:	4618      	mov	r0, r3
 8002008:	f006 fe26 	bl	8008c58 <siprintf>
			break;
 800200c:	e0b5      	b.n	800217a <draw_title+0x3de>
		case eSelf_Test:
			sprintf(line_1_buf, "Test Operation  \n");
 800200e:	f107 0320 	add.w	r3, r7, #32
 8002012:	4934      	ldr	r1, [pc, #208]	@ (80020e4 <draw_title+0x348>)
 8002014:	4618      	mov	r0, r3
 8002016:	f006 fe1f 	bl	8008c58 <siprintf>
			sprintf(line_2_buf, "Testing...      \n");
 800201a:	f107 030c 	add.w	r3, r7, #12
 800201e:	4932      	ldr	r1, [pc, #200]	@ (80020e8 <draw_title+0x34c>)
 8002020:	4618      	mov	r0, r3
 8002022:	f006 fe19 	bl	8008c58 <siprintf>
			break;
 8002026:	e0a8      	b.n	800217a <draw_title+0x3de>
		case eUSER_Mode:
			sprintf(line_1_buf, " %s\n", load_cfg.company);
 8002028:	f107 0320 	add.w	r3, r7, #32
 800202c:	4a2f      	ldr	r2, [pc, #188]	@ (80020ec <draw_title+0x350>)
 800202e:	4930      	ldr	r1, [pc, #192]	@ (80020f0 <draw_title+0x354>)
 8002030:	4618      	mov	r0, r3
 8002032:	f006 fe11 	bl	8008c58 <siprintf>
			sprintf(line_2_buf, "StrobeController\n");
 8002036:	f107 030c 	add.w	r3, r7, #12
 800203a:	492e      	ldr	r1, [pc, #184]	@ (80020f4 <draw_title+0x358>)
 800203c:	4618      	mov	r0, r3
 800203e:	f006 fe0b 	bl	8008c58 <siprintf>
			break;
 8002042:	e09a      	b.n	800217a <draw_title+0x3de>
		case eFactor_Mode:
			sprintf(line_1_buf, "Factory mode    \n");
 8002044:	f107 0320 	add.w	r3, r7, #32
 8002048:	492b      	ldr	r1, [pc, #172]	@ (80020f8 <draw_title+0x35c>)
 800204a:	4618      	mov	r0, r3
 800204c:	f006 fe04 	bl	8008c58 <siprintf>
			sprintf(line_2_buf, "Reset...        \n");
 8002050:	f107 030c 	add.w	r3, r7, #12
 8002054:	4929      	ldr	r1, [pc, #164]	@ (80020fc <draw_title+0x360>)
 8002056:	4618      	mov	r0, r3
 8002058:	f006 fdfe 	bl	8008c58 <siprintf>
			break;
 800205c:	e08d      	b.n	800217a <draw_title+0x3de>
		case eSEL_OP_Ch:
			sprintf(line_1_buf, "CH1 CH2 CH4 CH6 \n");
 800205e:	f107 0320 	add.w	r3, r7, #32
 8002062:	4927      	ldr	r1, [pc, #156]	@ (8002100 <draw_title+0x364>)
 8002064:	4618      	mov	r0, r3
 8002066:	f006 fdf7 	bl	8008c58 <siprintf>
			sprintf(line_2_buf, "CH8             \n");
 800206a:	f107 030c 	add.w	r3, r7, #12
 800206e:	4925      	ldr	r1, [pc, #148]	@ (8002104 <draw_title+0x368>)
 8002070:	4618      	mov	r0, r3
 8002072:	f006 fdf1 	bl	8008c58 <siprintf>
			break;
 8002076:	e080      	b.n	800217a <draw_title+0x3de>
 8002078:	20000be4 	.word	0x20000be4
 800207c:	08009db8 	.word	0x08009db8
 8002080:	08009de0 	.word	0x08009de0
 8002084:	20000c30 	.word	0x20000c30
 8002088:	08009df4 	.word	0x08009df4
 800208c:	08009e04 	.word	0x08009e04
 8002090:	08009e18 	.word	0x08009e18
 8002094:	08009e28 	.word	0x08009e28
 8002098:	08009e3c 	.word	0x08009e3c
 800209c:	08009e50 	.word	0x08009e50
 80020a0:	08009e58 	.word	0x08009e58
 80020a4:	08009e60 	.word	0x08009e60
 80020a8:	20000bf3 	.word	0x20000bf3
 80020ac:	08009e70 	.word	0x08009e70
 80020b0:	20000c07 	.word	0x20000c07
 80020b4:	08009e84 	.word	0x08009e84
 80020b8:	08009e98 	.word	0x08009e98
 80020bc:	08009ea0 	.word	0x08009ea0
 80020c0:	08009ea8 	.word	0x08009ea8
 80020c4:	08009eb8 	.word	0x08009eb8
 80020c8:	08009ecc 	.word	0x08009ecc
 80020cc:	08009ee0 	.word	0x08009ee0
 80020d0:	08009ef4 	.word	0x08009ef4
 80020d4:	08009f08 	.word	0x08009f08
 80020d8:	08009f20 	.word	0x08009f20
 80020dc:	08009f34 	.word	0x08009f34
 80020e0:	08009f48 	.word	0x08009f48
 80020e4:	08009f5c 	.word	0x08009f5c
 80020e8:	08009f70 	.word	0x08009f70
 80020ec:	20000c65 	.word	0x20000c65
 80020f0:	08009f84 	.word	0x08009f84
 80020f4:	08009d80 	.word	0x08009d80
 80020f8:	08009f8c 	.word	0x08009f8c
 80020fc:	08009fa0 	.word	0x08009fa0
 8002100:	08009fb4 	.word	0x08009fb4
 8002104:	08009fc8 	.word	0x08009fc8
		case eVer_Disp:
			sprintf(line_1_buf, "F - FW : Ver %1d.%1d\n", load_cfg.frontVer/10, load_cfg.frontVer%10);
 8002108:	4b2e      	ldr	r3, [pc, #184]	@ (80021c4 <draw_title+0x428>)
 800210a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800210e:	4a2e      	ldr	r2, [pc, #184]	@ (80021c8 <draw_title+0x42c>)
 8002110:	fba2 2303 	umull	r2, r3, r2, r3
 8002114:	08db      	lsrs	r3, r3, #3
 8002116:	b2db      	uxtb	r3, r3
 8002118:	461c      	mov	r4, r3
 800211a:	4b2a      	ldr	r3, [pc, #168]	@ (80021c4 <draw_title+0x428>)
 800211c:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8002120:	4b29      	ldr	r3, [pc, #164]	@ (80021c8 <draw_title+0x42c>)
 8002122:	fba3 1302 	umull	r1, r3, r3, r2
 8002126:	08d9      	lsrs	r1, r3, #3
 8002128:	460b      	mov	r3, r1
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	440b      	add	r3, r1
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	b2db      	uxtb	r3, r3
 8002134:	f107 0020 	add.w	r0, r7, #32
 8002138:	4622      	mov	r2, r4
 800213a:	4924      	ldr	r1, [pc, #144]	@ (80021cc <draw_title+0x430>)
 800213c:	f006 fd8c 	bl	8008c58 <siprintf>
			sprintf(line_2_buf, "M - FW : Ver %1d.%1d\n", load_cfg.backendVer/10, load_cfg.backendVer%10);
 8002140:	4b20      	ldr	r3, [pc, #128]	@ (80021c4 <draw_title+0x428>)
 8002142:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8002146:	4a20      	ldr	r2, [pc, #128]	@ (80021c8 <draw_title+0x42c>)
 8002148:	fba2 2303 	umull	r2, r3, r2, r3
 800214c:	08db      	lsrs	r3, r3, #3
 800214e:	b2db      	uxtb	r3, r3
 8002150:	461c      	mov	r4, r3
 8002152:	4b1c      	ldr	r3, [pc, #112]	@ (80021c4 <draw_title+0x428>)
 8002154:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8002158:	4b1b      	ldr	r3, [pc, #108]	@ (80021c8 <draw_title+0x42c>)
 800215a:	fba3 1302 	umull	r1, r3, r3, r2
 800215e:	08d9      	lsrs	r1, r3, #3
 8002160:	460b      	mov	r3, r1
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	b2db      	uxtb	r3, r3
 800216c:	f107 000c 	add.w	r0, r7, #12
 8002170:	4622      	mov	r2, r4
 8002172:	4917      	ldr	r1, [pc, #92]	@ (80021d0 <draw_title+0x434>)
 8002174:	f006 fd70 	bl	8008c58 <siprintf>
			break;
 8002178:	bf00      	nop
	}
	LOG_DBG("Line 1 [%s]", line_1_buf);
 800217a:	f107 0320 	add.w	r3, r7, #32
 800217e:	4619      	mov	r1, r3
 8002180:	4814      	ldr	r0, [pc, #80]	@ (80021d4 <draw_title+0x438>)
 8002182:	f7fe fd83 	bl	8000c8c <Printf>
	LOG_DBG("Line 2 [%s]", line_2_buf);
 8002186:	f107 030c 	add.w	r3, r7, #12
 800218a:	4619      	mov	r1, r3
 800218c:	4812      	ldr	r0, [pc, #72]	@ (80021d8 <draw_title+0x43c>)
 800218e:	f7fe fd7d 	bl	8000c8c <Printf>
	LCD_LOCATE(1,1);
 8002192:	2101      	movs	r1, #1
 8002194:	2001      	movs	r0, #1
 8002196:	f7ff fcdf 	bl	8001b58 <LCD_LOCATE>
	LCD_printstring(line_1_buf);
 800219a:	f107 0320 	add.w	r3, r7, #32
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fcae 	bl	8001b00 <LCD_printstring>
	LCD_LOCATE(2,1);
 80021a4:	2101      	movs	r1, #1
 80021a6:	2002      	movs	r0, #2
 80021a8:	f7ff fcd6 	bl	8001b58 <LCD_LOCATE>
	LCD_printstring(line_2_buf);
 80021ac:	f107 030c 	add.w	r3, r7, #12
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff fca5 	bl	8001b00 <LCD_printstring>
	LOG_INF("End Draw title\r\n");
 80021b6:	4809      	ldr	r0, [pc, #36]	@ (80021dc <draw_title+0x440>)
 80021b8:	f7fe fd68 	bl	8000c8c <Printf>
}
 80021bc:	bf00      	nop
 80021be:	373c      	adds	r7, #60	@ 0x3c
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd90      	pop	{r4, r7, pc}
 80021c4:	20000c30 	.word	0x20000c30
 80021c8:	cccccccd 	.word	0xcccccccd
 80021cc:	08009fdc 	.word	0x08009fdc
 80021d0:	08009ff4 	.word	0x08009ff4
 80021d4:	0800a00c 	.word	0x0800a00c
 80021d8:	0800a020 	.word	0x0800a020
 80021dc:	0800a034 	.word	0x0800a034

080021e0 <split_num>:

static void split_num(uint16_t value, int8_t *array)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	6039      	str	r1, [r7, #0]
 80021ea:	80fb      	strh	r3, [r7, #6]
	int num = value, i;
 80021ec:	88fb      	ldrh	r3, [r7, #6]
 80021ee:	60fb      	str	r3, [r7, #12]

	//LOG_DBG("Value : %d", value);
	if(value == 0){
 80021f0:	88fb      	ldrh	r3, [r7, #6]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d108      	bne.n	8002208 <split_num+0x28>
		memset(array, 0, m_cfg.digit_num+1);
 80021f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002264 <split_num+0x84>)
 80021f8:	7a5b      	ldrb	r3, [r3, #9]
 80021fa:	3301      	adds	r3, #1
 80021fc:	461a      	mov	r2, r3
 80021fe:	2100      	movs	r1, #0
 8002200:	6838      	ldr	r0, [r7, #0]
 8002202:	f006 fd87 	bl	8008d14 <memset>
		return ;
 8002206:	e02a      	b.n	800225e <split_num+0x7e>
	}
	for(i = m_cfg.digit_num; i >= 0; i--){
 8002208:	4b16      	ldr	r3, [pc, #88]	@ (8002264 <split_num+0x84>)
 800220a:	7a5b      	ldrb	r3, [r3, #9]
 800220c:	60bb      	str	r3, [r7, #8]
 800220e:	e023      	b.n	8002258 <split_num+0x78>
		array[i] = -1;  // init value
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	4413      	add	r3, r2
 8002216:	22ff      	movs	r2, #255	@ 0xff
 8002218:	701a      	strb	r2, [r3, #0]
		if(num){
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d018      	beq.n	8002252 <split_num+0x72>
			array[i] = num%10;
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	4b11      	ldr	r3, [pc, #68]	@ (8002268 <split_num+0x88>)
 8002224:	fb83 1302 	smull	r1, r3, r3, r2
 8002228:	1099      	asrs	r1, r3, #2
 800222a:	17d3      	asrs	r3, r2, #31
 800222c:	1ac9      	subs	r1, r1, r3
 800222e:	460b      	mov	r3, r1
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	440b      	add	r3, r1
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	1ad1      	subs	r1, r2, r3
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	4413      	add	r3, r2
 800223e:	b24a      	sxtb	r2, r1
 8002240:	701a      	strb	r2, [r3, #0]
			//LOG_DBG("Split num[%d] => %d", i, array[i]);
			num/=10;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4a08      	ldr	r2, [pc, #32]	@ (8002268 <split_num+0x88>)
 8002246:	fb82 1203 	smull	r1, r2, r2, r3
 800224a:	1092      	asrs	r2, r2, #2
 800224c:	17db      	asrs	r3, r3, #31
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	60fb      	str	r3, [r7, #12]
	for(i = m_cfg.digit_num; i >= 0; i--){
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	3b01      	subs	r3, #1
 8002256:	60bb      	str	r3, [r7, #8]
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	2b00      	cmp	r3, #0
 800225c:	dad8      	bge.n	8002210 <split_num+0x30>
		}
	}
}
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	20000be4 	.word	0x20000be4
 8002268:	66666667 	.word	0x66666667

0800226c <combine_array>:

static int combine_array(int8_t *array)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
	int i;
	int value = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	60bb      	str	r3, [r7, #8]
	
	for(i = 0; i <= m_cfg.digit_num; i++){
 8002278:	2300      	movs	r3, #0
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	e016      	b.n	80022ac <combine_array+0x40>
		//LOG_DBG("%d:%d", i, array[i]);
		if(array[i] >= 0){
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	4413      	add	r3, r2
 8002284:	f993 3000 	ldrsb.w	r3, [r3]
 8002288:	2b00      	cmp	r3, #0
 800228a:	db0c      	blt.n	80022a6 <combine_array+0x3a>
			value = (value*10)+array[i];
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	4613      	mov	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	4619      	mov	r1, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	4413      	add	r3, r2
 800229e:	f993 3000 	ldrsb.w	r3, [r3]
 80022a2:	440b      	add	r3, r1
 80022a4:	60bb      	str	r3, [r7, #8]
	for(i = 0; i <= m_cfg.digit_num; i++){
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	3301      	adds	r3, #1
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	4b05      	ldr	r3, [pc, #20]	@ (80022c4 <combine_array+0x58>)
 80022ae:	7a5b      	ldrb	r3, [r3, #9]
 80022b0:	461a      	mov	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	4293      	cmp	r3, r2
 80022b6:	dde2      	ble.n	800227e <combine_array+0x12>
			//LOG_DBG("Value[%d]", value);
		}
	}
	
	return value;
 80022b8:	68bb      	ldr	r3, [r7, #8]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr
 80022c4:	20000be4 	.word	0x20000be4

080022c8 <channel_screen_func>:

ScreenID_t channel_screen_func(Screen_param_t param)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	463b      	mov	r3, r7
 80022d0:	e883 0003 	stmia.w	r3, {r0, r1}
	static uint8_t Info_Ch = 0xFF, Info_idx = 0;
	uint8_t Info_list[]={eCH_OnTIME, eCH_DelayTIME, eCH_TriggerSet, eSEL_OPMODE};
 80022d4:	4b62      	ldr	r3, [pc, #392]	@ (8002460 <channel_screen_func+0x198>)
 80022d6:	60fb      	str	r3, [r7, #12]
	//LOG_INF("Enter ch screen\r\n");

	m_cfg.cursor = 0;
 80022d8:	4b62      	ldr	r3, [pc, #392]	@ (8002464 <channel_screen_func+0x19c>)
 80022da:	2200      	movs	r2, #0
 80022dc:	70da      	strb	r2, [r3, #3]
	switch(param.key){
 80022de:	887b      	ldrh	r3, [r7, #2]
 80022e0:	2b20      	cmp	r3, #32
 80022e2:	f200 80b1 	bhi.w	8002448 <channel_screen_func+0x180>
 80022e6:	a201      	add	r2, pc, #4	@ (adr r2, 80022ec <channel_screen_func+0x24>)
 80022e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ec:	08002371 	.word	0x08002371
 80022f0:	080023b9 	.word	0x080023b9
 80022f4:	08002381 	.word	0x08002381
 80022f8:	08002449 	.word	0x08002449
 80022fc:	0800239d 	.word	0x0800239d
 8002300:	08002449 	.word	0x08002449
 8002304:	08002449 	.word	0x08002449
 8002308:	08002449 	.word	0x08002449
 800230c:	08002449 	.word	0x08002449
 8002310:	08002449 	.word	0x08002449
 8002314:	08002449 	.word	0x08002449
 8002318:	08002449 	.word	0x08002449
 800231c:	08002449 	.word	0x08002449
 8002320:	08002449 	.word	0x08002449
 8002324:	08002449 	.word	0x08002449
 8002328:	08002449 	.word	0x08002449
 800232c:	08002403 	.word	0x08002403
 8002330:	08002449 	.word	0x08002449
 8002334:	08002449 	.word	0x08002449
 8002338:	08002449 	.word	0x08002449
 800233c:	08002449 	.word	0x08002449
 8002340:	08002449 	.word	0x08002449
 8002344:	08002449 	.word	0x08002449
 8002348:	08002449 	.word	0x08002449
 800234c:	08002449 	.word	0x08002449
 8002350:	08002449 	.word	0x08002449
 8002354:	08002449 	.word	0x08002449
 8002358:	08002449 	.word	0x08002449
 800235c:	08002449 	.word	0x08002449
 8002360:	08002449 	.word	0x08002449
 8002364:	08002449 	.word	0x08002449
 8002368:	08002449 	.word	0x08002449
 800236c:	08002371 	.word	0x08002371
		case eKey_Idle:
		case eKey_ExitRemote:
			if(m_cfg.cur_ch < eCH1 || m_cfg.cur_ch > eCH8){
 8002370:	4b3c      	ldr	r3, [pc, #240]	@ (8002464 <channel_screen_func+0x19c>)
 8002372:	789b      	ldrb	r3, [r3, #2]
 8002374:	2b07      	cmp	r3, #7
 8002376:	d969      	bls.n	800244c <channel_screen_func+0x184>
				m_cfg.cur_ch = eCH1;
 8002378:	4b3a      	ldr	r3, [pc, #232]	@ (8002464 <channel_screen_func+0x19c>)
 800237a:	2200      	movs	r2, #0
 800237c:	709a      	strb	r2, [r3, #2]
			}
			break;
 800237e:	e065      	b.n	800244c <channel_screen_func+0x184>
		case eKey_Up:
			m_cfg.cur_ch = (m_cfg.cur_ch + 1) % eCH_MAX;
 8002380:	4b38      	ldr	r3, [pc, #224]	@ (8002464 <channel_screen_func+0x19c>)
 8002382:	789b      	ldrb	r3, [r3, #2]
 8002384:	3301      	adds	r3, #1
 8002386:	425a      	negs	r2, r3
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	f002 0207 	and.w	r2, r2, #7
 8002390:	bf58      	it	pl
 8002392:	4253      	negpl	r3, r2
 8002394:	b2da      	uxtb	r2, r3
 8002396:	4b33      	ldr	r3, [pc, #204]	@ (8002464 <channel_screen_func+0x19c>)
 8002398:	709a      	strb	r2, [r3, #2]
			break;
 800239a:	e058      	b.n	800244e <channel_screen_func+0x186>
		case eKey_Down:
			m_cfg.cur_ch = (m_cfg.cur_ch - 1 + eCH_MAX) % eCH_MAX;
 800239c:	4b31      	ldr	r3, [pc, #196]	@ (8002464 <channel_screen_func+0x19c>)
 800239e:	789b      	ldrb	r3, [r3, #2]
 80023a0:	3307      	adds	r3, #7
 80023a2:	425a      	negs	r2, r3
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	f002 0207 	and.w	r2, r2, #7
 80023ac:	bf58      	it	pl
 80023ae:	4253      	negpl	r3, r2
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	4b2c      	ldr	r3, [pc, #176]	@ (8002464 <channel_screen_func+0x19c>)
 80023b4:	709a      	strb	r2, [r3, #2]
			break;
 80023b6:	e04a      	b.n	800244e <channel_screen_func+0x186>
		case eKey_Enter:
			if(Info_Ch != m_cfg.cur_ch){
 80023b8:	4b2a      	ldr	r3, [pc, #168]	@ (8002464 <channel_screen_func+0x19c>)
 80023ba:	789a      	ldrb	r2, [r3, #2]
 80023bc:	4b2a      	ldr	r3, [pc, #168]	@ (8002468 <channel_screen_func+0x1a0>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d006      	beq.n	80023d2 <channel_screen_func+0x10a>
				Info_idx = 0;
 80023c4:	4b29      	ldr	r3, [pc, #164]	@ (800246c <channel_screen_func+0x1a4>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	701a      	strb	r2, [r3, #0]
				Info_Ch = m_cfg.cur_ch;
 80023ca:	4b26      	ldr	r3, [pc, #152]	@ (8002464 <channel_screen_func+0x19c>)
 80023cc:	789a      	ldrb	r2, [r3, #2]
 80023ce:	4b26      	ldr	r3, [pc, #152]	@ (8002468 <channel_screen_func+0x1a0>)
 80023d0:	701a      	strb	r2, [r3, #0]
			}

			draw_title(Info_list[Info_idx]);
 80023d2:	4b26      	ldr	r3, [pc, #152]	@ (800246c <channel_screen_func+0x1a4>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	3310      	adds	r3, #16
 80023d8:	443b      	add	r3, r7
 80023da:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff fcdc 	bl	8001d9c <draw_title>
			Info_idx++;
 80023e4:	4b21      	ldr	r3, [pc, #132]	@ (800246c <channel_screen_func+0x1a4>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	3301      	adds	r3, #1
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	4b1f      	ldr	r3, [pc, #124]	@ (800246c <channel_screen_func+0x1a4>)
 80023ee:	701a      	strb	r2, [r3, #0]
			if(Info_idx > 3){
 80023f0:	4b1e      	ldr	r3, [pc, #120]	@ (800246c <channel_screen_func+0x1a4>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	2b03      	cmp	r3, #3
 80023f6:	d902      	bls.n	80023fe <channel_screen_func+0x136>
				Info_idx = 0;
 80023f8:	4b1c      	ldr	r3, [pc, #112]	@ (800246c <channel_screen_func+0x1a4>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	701a      	strb	r2, [r3, #0]
			}
			return eMAX_SCREEN_ID;
 80023fe:	230f      	movs	r3, #15
 8002400:	e029      	b.n	8002456 <channel_screen_func+0x18e>
		case eKey_SetMode:
			draw_title(eCH_OnTIME);
 8002402:	2001      	movs	r0, #1
 8002404:	f7ff fcca 	bl	8001d9c <draw_title>
			m_cfg.set_time = load_cfg.on_time[m_cfg.cur_ch];
 8002408:	4b16      	ldr	r3, [pc, #88]	@ (8002464 <channel_screen_func+0x19c>)
 800240a:	789b      	ldrb	r3, [r3, #2]
 800240c:	4a18      	ldr	r2, [pc, #96]	@ (8002470 <channel_screen_func+0x1a8>)
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	4413      	add	r3, r2
 8002412:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8002416:	b29a      	uxth	r2, r3
 8002418:	4b12      	ldr	r3, [pc, #72]	@ (8002464 <channel_screen_func+0x19c>)
 800241a:	815a      	strh	r2, [r3, #10]
			m_cfg.cursor = 13;
 800241c:	4b11      	ldr	r3, [pc, #68]	@ (8002464 <channel_screen_func+0x19c>)
 800241e:	220d      	movs	r2, #13
 8002420:	70da      	strb	r2, [r3, #3]
			m_cfg.digit_num = 4;  // 0 ~ 4
 8002422:	4b10      	ldr	r3, [pc, #64]	@ (8002464 <channel_screen_func+0x19c>)
 8002424:	2204      	movs	r2, #4
 8002426:	725a      	strb	r2, [r3, #9]
			//m_cfg.set_mode =1;
			//LOG_DBG("Delay Set Ch[%d] time[%d]", m_cfg.cur_ch, m_cfg.set_time);
			split_num(m_cfg.set_time, m_cfg.input_num);			
 8002428:	4b0e      	ldr	r3, [pc, #56]	@ (8002464 <channel_screen_func+0x19c>)
 800242a:	895b      	ldrh	r3, [r3, #10]
 800242c:	4911      	ldr	r1, [pc, #68]	@ (8002474 <channel_screen_func+0x1ac>)
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff fed6 	bl	80021e0 <split_num>
			LCD_LOCATE(2, m_cfg.cursor);
 8002434:	4b0b      	ldr	r3, [pc, #44]	@ (8002464 <channel_screen_func+0x19c>)
 8002436:	78db      	ldrb	r3, [r3, #3]
 8002438:	4619      	mov	r1, r3
 800243a:	2002      	movs	r0, #2
 800243c:	f7ff fb8c 	bl	8001b58 <LCD_LOCATE>
			LCD_DISP_CURSOR();
 8002440:	f7ff fb83 	bl	8001b4a <LCD_DISP_CURSOR>
			return eSET_ON_TIME_SC;
 8002444:	2302      	movs	r3, #2
 8002446:	e006      	b.n	8002456 <channel_screen_func+0x18e>
		default:
			break;
 8002448:	bf00      	nop
 800244a:	e000      	b.n	800244e <channel_screen_func+0x186>
			break;
 800244c:	bf00      	nop
	}
	
	draw_title(eCH_CHSelect);	
 800244e:	2000      	movs	r0, #0
 8002450:	f7ff fca4 	bl	8001d9c <draw_title>
	//LOG_INF("Return ch scree function\r\n");
	return eMAX_SCREEN_ID;
 8002454:	230f      	movs	r3, #15
}
 8002456:	4618      	mov	r0, r3
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	04030201 	.word	0x04030201
 8002464:	20000be4 	.word	0x20000be4
 8002468:	20000148 	.word	0x20000148
 800246c:	20000c77 	.word	0x20000c77
 8002470:	20000c30 	.word	0x20000c30
 8002474:	20000be8 	.word	0x20000be8

08002478 <set_changetime_func>:

ScreenID_t set_changetime_func(Screen_param_t param)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b090      	sub	sp, #64	@ 0x40
 800247c:	af00      	add	r7, sp, #0
 800247e:	463b      	mov	r3, r7
 8002480:	e883 0003 	stmia.w	r3, {r0, r1}
	char line_1_buf[LCD_PRINT_MAX], line_2_buf[LCD_PRINT_MAX];
	ScreenID_t ret_sc = param.sc_id;
 8002484:	783b      	ldrb	r3, [r7, #0]
 8002486:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t old_cursor = m_cfg.cursor;
 800248a:	4bba      	ldr	r3, [pc, #744]	@ (8002774 <set_changetime_func+0x2fc>)
 800248c:	78db      	ldrb	r3, [r3, #3]
 800248e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t digit_idx = (m_cfg.cursor - 9);
 8002492:	4bb8      	ldr	r3, [pc, #736]	@ (8002774 <set_changetime_func+0x2fc>)
 8002494:	78db      	ldrb	r3, [r3, #3]
 8002496:	3b09      	subs	r3, #9
 8002498:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	uint8_t change_value = 0, channel = m_cfg.cur_ch;
 800249c:	2300      	movs	r3, #0
 800249e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 80024a2:	4bb4      	ldr	r3, [pc, #720]	@ (8002774 <set_changetime_func+0x2fc>)
 80024a4:	789b      	ldrb	r3, [r3, #2]
 80024a6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	BackEnd_Cmd_t cmd;
	uint32_t set_time;
	
	//LOG_DBG("Cursor[%d] digit[%d] key[%s]", m_cfg.cursor, digit_idx, key_id_2_str(param.key));
	switch(param.key){
 80024aa:	887b      	ldrh	r3, [r7, #2]
 80024ac:	3b01      	subs	r3, #1
 80024ae:	2b0b      	cmp	r3, #11
 80024b0:	f200 8169 	bhi.w	8002786 <set_changetime_func+0x30e>
 80024b4:	a201      	add	r2, pc, #4	@ (adr r2, 80024bc <set_changetime_func+0x44>)
 80024b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ba:	bf00      	nop
 80024bc:	08002671 	.word	0x08002671
 80024c0:	080024ed 	.word	0x080024ed
 80024c4:	08002787 	.word	0x08002787
 80024c8:	08002591 	.word	0x08002591
 80024cc:	08002787 	.word	0x08002787
 80024d0:	08002787 	.word	0x08002787
 80024d4:	08002787 	.word	0x08002787
 80024d8:	08002709 	.word	0x08002709
 80024dc:	08002787 	.word	0x08002787
 80024e0:	08002635 	.word	0x08002635
 80024e4:	08002787 	.word	0x08002787
 80024e8:	08002653 	.word	0x08002653
		case eKey_Up:
			if((m_cfg.input_num[0] == 5) && (digit_idx != 0)){
 80024ec:	4ba1      	ldr	r3, [pc, #644]	@ (8002774 <set_changetime_func+0x2fc>)
 80024ee:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80024f2:	2b05      	cmp	r3, #5
 80024f4:	d106      	bne.n	8002504 <set_changetime_func+0x8c>
 80024f6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d002      	beq.n	8002504 <set_changetime_func+0x8c>
				return ret_sc;
 80024fe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002502:	e181      	b.n	8002808 <set_changetime_func+0x390>
			}
			if(digit_idx == 0){
 8002504:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002508:	2b00      	cmp	r3, #0
 800250a:	d121      	bne.n	8002550 <set_changetime_func+0xd8>
				m_cfg.input_num[digit_idx]++;
 800250c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002510:	4a98      	ldr	r2, [pc, #608]	@ (8002774 <set_changetime_func+0x2fc>)
 8002512:	441a      	add	r2, r3
 8002514:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	3201      	adds	r2, #1
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	b251      	sxtb	r1, r2
 8002520:	4a94      	ldr	r2, [pc, #592]	@ (8002774 <set_changetime_func+0x2fc>)
 8002522:	4413      	add	r3, r2
 8002524:	460a      	mov	r2, r1
 8002526:	711a      	strb	r2, [r3, #4]
				if(m_cfg.input_num[digit_idx] > 5){
 8002528:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800252c:	4a91      	ldr	r2, [pc, #580]	@ (8002774 <set_changetime_func+0x2fc>)
 800252e:	4413      	add	r3, r2
 8002530:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002534:	2b05      	cmp	r3, #5
 8002536:	dd05      	ble.n	8002544 <set_changetime_func+0xcc>
					m_cfg.input_num[digit_idx] = 0;
 8002538:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800253c:	4a8d      	ldr	r2, [pc, #564]	@ (8002774 <set_changetime_func+0x2fc>)
 800253e:	4413      	add	r3, r2
 8002540:	2200      	movs	r2, #0
 8002542:	711a      	strb	r2, [r3, #4]
				}
				memset(&m_cfg.input_num[1], 0, 4);
 8002544:	2204      	movs	r2, #4
 8002546:	2100      	movs	r1, #0
 8002548:	488b      	ldr	r0, [pc, #556]	@ (8002778 <set_changetime_func+0x300>)
 800254a:	f006 fbe3 	bl	8008d14 <memset>
 800254e:	e01b      	b.n	8002588 <set_changetime_func+0x110>
			}else{
				m_cfg.input_num[digit_idx]++;
 8002550:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002554:	4a87      	ldr	r2, [pc, #540]	@ (8002774 <set_changetime_func+0x2fc>)
 8002556:	441a      	add	r2, r3
 8002558:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	3201      	adds	r2, #1
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	b251      	sxtb	r1, r2
 8002564:	4a83      	ldr	r2, [pc, #524]	@ (8002774 <set_changetime_func+0x2fc>)
 8002566:	4413      	add	r3, r2
 8002568:	460a      	mov	r2, r1
 800256a:	711a      	strb	r2, [r3, #4]
				if(m_cfg.input_num[digit_idx] > 9){
 800256c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002570:	4a80      	ldr	r2, [pc, #512]	@ (8002774 <set_changetime_func+0x2fc>)
 8002572:	4413      	add	r3, r2
 8002574:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002578:	2b09      	cmp	r3, #9
 800257a:	dd05      	ble.n	8002588 <set_changetime_func+0x110>
					m_cfg.input_num[digit_idx] = 0;
 800257c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002580:	4a7c      	ldr	r2, [pc, #496]	@ (8002774 <set_changetime_func+0x2fc>)
 8002582:	4413      	add	r3, r2
 8002584:	2200      	movs	r2, #0
 8002586:	711a      	strb	r2, [r3, #4]
				}
			}
			//LOG_HEX_DUMP(m_cfg.input_num, 5, "Up");
			change_value=1;
 8002588:	2301      	movs	r3, #1
 800258a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
			break;
 800258e:	e0fa      	b.n	8002786 <set_changetime_func+0x30e>
		case eKey_Down:
			if((m_cfg.input_num[0] == 5) && (digit_idx != 0)){
 8002590:	4b78      	ldr	r3, [pc, #480]	@ (8002774 <set_changetime_func+0x2fc>)
 8002592:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002596:	2b05      	cmp	r3, #5
 8002598:	d106      	bne.n	80025a8 <set_changetime_func+0x130>
 800259a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d002      	beq.n	80025a8 <set_changetime_func+0x130>
				return ret_sc;
 80025a2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80025a6:	e12f      	b.n	8002808 <set_changetime_func+0x390>
			}
			if(digit_idx == 0){
 80025a8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d121      	bne.n	80025f4 <set_changetime_func+0x17c>
				m_cfg.input_num[digit_idx]--;
 80025b0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80025b4:	4a6f      	ldr	r2, [pc, #444]	@ (8002774 <set_changetime_func+0x2fc>)
 80025b6:	441a      	add	r2, r3
 80025b8:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	3a01      	subs	r2, #1
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	b251      	sxtb	r1, r2
 80025c4:	4a6b      	ldr	r2, [pc, #428]	@ (8002774 <set_changetime_func+0x2fc>)
 80025c6:	4413      	add	r3, r2
 80025c8:	460a      	mov	r2, r1
 80025ca:	711a      	strb	r2, [r3, #4]
				if(m_cfg.input_num[digit_idx] < 0){
 80025cc:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80025d0:	4a68      	ldr	r2, [pc, #416]	@ (8002774 <set_changetime_func+0x2fc>)
 80025d2:	4413      	add	r3, r2
 80025d4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	da05      	bge.n	80025e8 <set_changetime_func+0x170>
					m_cfg.input_num[digit_idx] = 5;
 80025dc:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80025e0:	4a64      	ldr	r2, [pc, #400]	@ (8002774 <set_changetime_func+0x2fc>)
 80025e2:	4413      	add	r3, r2
 80025e4:	2205      	movs	r2, #5
 80025e6:	711a      	strb	r2, [r3, #4]
				}
				memset(&m_cfg.input_num[1], 0, 4);
 80025e8:	2204      	movs	r2, #4
 80025ea:	2100      	movs	r1, #0
 80025ec:	4862      	ldr	r0, [pc, #392]	@ (8002778 <set_changetime_func+0x300>)
 80025ee:	f006 fb91 	bl	8008d14 <memset>
 80025f2:	e01b      	b.n	800262c <set_changetime_func+0x1b4>
			}else{
				m_cfg.input_num[digit_idx]--;
 80025f4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80025f8:	4a5e      	ldr	r2, [pc, #376]	@ (8002774 <set_changetime_func+0x2fc>)
 80025fa:	441a      	add	r2, r3
 80025fc:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	3a01      	subs	r2, #1
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	b251      	sxtb	r1, r2
 8002608:	4a5a      	ldr	r2, [pc, #360]	@ (8002774 <set_changetime_func+0x2fc>)
 800260a:	4413      	add	r3, r2
 800260c:	460a      	mov	r2, r1
 800260e:	711a      	strb	r2, [r3, #4]
				if(m_cfg.input_num[digit_idx] < 0){
 8002610:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002614:	4a57      	ldr	r2, [pc, #348]	@ (8002774 <set_changetime_func+0x2fc>)
 8002616:	4413      	add	r3, r2
 8002618:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	da05      	bge.n	800262c <set_changetime_func+0x1b4>
					m_cfg.input_num[digit_idx] = 9;
 8002620:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002624:	4a53      	ldr	r2, [pc, #332]	@ (8002774 <set_changetime_func+0x2fc>)
 8002626:	4413      	add	r3, r2
 8002628:	2209      	movs	r2, #9
 800262a:	711a      	strb	r2, [r3, #4]
				}
			}
			//LOG_HEX_DUMP(m_cfg.input_num, 5, "Down");
			change_value=1;
 800262c:	2301      	movs	r3, #1
 800262e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
			break;
 8002632:	e0a8      	b.n	8002786 <set_changetime_func+0x30e>
		case eKey_CursorUp:
			m_cfg.cursor--;
 8002634:	4b4f      	ldr	r3, [pc, #316]	@ (8002774 <set_changetime_func+0x2fc>)
 8002636:	78db      	ldrb	r3, [r3, #3]
 8002638:	3b01      	subs	r3, #1
 800263a:	b2da      	uxtb	r2, r3
 800263c:	4b4d      	ldr	r3, [pc, #308]	@ (8002774 <set_changetime_func+0x2fc>)
 800263e:	70da      	strb	r2, [r3, #3]
			if(m_cfg.cursor < 9){
 8002640:	4b4c      	ldr	r3, [pc, #304]	@ (8002774 <set_changetime_func+0x2fc>)
 8002642:	78db      	ldrb	r3, [r3, #3]
 8002644:	2b08      	cmp	r3, #8
 8002646:	f200 8092 	bhi.w	800276e <set_changetime_func+0x2f6>
				m_cfg.cursor = 13;
 800264a:	4b4a      	ldr	r3, [pc, #296]	@ (8002774 <set_changetime_func+0x2fc>)
 800264c:	220d      	movs	r2, #13
 800264e:	70da      	strb	r2, [r3, #3]
			}
			break;
 8002650:	e08d      	b.n	800276e <set_changetime_func+0x2f6>
		case eKey_CursorDown:
			m_cfg.cursor++;
 8002652:	4b48      	ldr	r3, [pc, #288]	@ (8002774 <set_changetime_func+0x2fc>)
 8002654:	78db      	ldrb	r3, [r3, #3]
 8002656:	3301      	adds	r3, #1
 8002658:	b2da      	uxtb	r2, r3
 800265a:	4b46      	ldr	r3, [pc, #280]	@ (8002774 <set_changetime_func+0x2fc>)
 800265c:	70da      	strb	r2, [r3, #3]
			if(m_cfg.cursor > 13){
 800265e:	4b45      	ldr	r3, [pc, #276]	@ (8002774 <set_changetime_func+0x2fc>)
 8002660:	78db      	ldrb	r3, [r3, #3]
 8002662:	2b0d      	cmp	r3, #13
 8002664:	f240 808e 	bls.w	8002784 <set_changetime_func+0x30c>
				m_cfg.cursor = 9;
 8002668:	4b42      	ldr	r3, [pc, #264]	@ (8002774 <set_changetime_func+0x2fc>)
 800266a:	2209      	movs	r2, #9
 800266c:	70da      	strb	r2, [r3, #3]
			}		
			break;
 800266e:	e089      	b.n	8002784 <set_changetime_func+0x30c>
		case eKey_Enter:
			if(param.sc_id == eSET_ON_TIME_SC){
 8002670:	783b      	ldrb	r3, [r7, #0]
 8002672:	2b02      	cmp	r3, #2
 8002674:	d119      	bne.n	80026aa <set_changetime_func+0x232>
				load_cfg.on_time[channel] = combine_array(m_cfg.input_num);
 8002676:	4841      	ldr	r0, [pc, #260]	@ (800277c <set_changetime_func+0x304>)
 8002678:	f7ff fdf8 	bl	800226c <combine_array>
 800267c:	4602      	mov	r2, r0
 800267e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002682:	b291      	uxth	r1, r2
 8002684:	4a3e      	ldr	r2, [pc, #248]	@ (8002780 <set_changetime_func+0x308>)
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	4413      	add	r3, r2
 800268a:	460a      	mov	r2, r1
 800268c:	f8a3 2007 	strh.w	r2, [r3, #7]
				cmd = eCMD_Ontime;
 8002690:	23b2      	movs	r3, #178	@ 0xb2
 8002692:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
				set_time = (uint32_t)load_cfg.on_time[channel];
 8002696:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800269a:	4a39      	ldr	r2, [pc, #228]	@ (8002780 <set_changetime_func+0x308>)
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	4413      	add	r3, r2
 80026a0:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80026a8:	e01a      	b.n	80026e0 <set_changetime_func+0x268>
			}else{
				load_cfg.delay_time[channel] = combine_array(m_cfg.input_num);
 80026aa:	4834      	ldr	r0, [pc, #208]	@ (800277c <set_changetime_func+0x304>)
 80026ac:	f7ff fdde 	bl	800226c <combine_array>
 80026b0:	4602      	mov	r2, r0
 80026b2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80026b6:	b291      	uxth	r1, r2
 80026b8:	4a31      	ldr	r2, [pc, #196]	@ (8002780 <set_changetime_func+0x308>)
 80026ba:	3308      	adds	r3, #8
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	4413      	add	r3, r2
 80026c0:	460a      	mov	r2, r1
 80026c2:	f8a3 2007 	strh.w	r2, [r3, #7]
				cmd = eCMD_Delaytime;
 80026c6:	23b3      	movs	r3, #179	@ 0xb3
 80026c8:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
				set_time = (uint32_t)load_cfg.delay_time[channel];
 80026cc:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80026d0:	4a2b      	ldr	r2, [pc, #172]	@ (8002780 <set_changetime_func+0x308>)
 80026d2:	3308      	adds	r3, #8
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	4413      	add	r3, r2
 80026d8:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80026dc:	b29b      	uxth	r3, r3
 80026de:	63bb      	str	r3, [r7, #56]	@ 0x38
			}
			if(save_data() != eMAX_SCREEN_ID){
 80026e0:	f000 f8a0 	bl	8002824 <save_data>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b0f      	cmp	r3, #15
 80026e8:	d005      	beq.n	80026f6 <set_changetime_func+0x27e>
				ret_sc = eERROR_SC;
 80026ea:	2310      	movs	r3, #16
 80026ec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				return ret_sc;
 80026f0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80026f4:	e088      	b.n	8002808 <set_changetime_func+0x390>
			}else{
				send_cmd_2_backend(cmd, channel, set_time);
 80026f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 80026fe:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff faf0 	bl	8001ce8 <send_cmd_2_backend>
			}
		case eKey_Mode:
			if(param.sc_id == eSET_ON_TIME_SC){
 8002708:	783b      	ldrb	r3, [r7, #0]
 800270a:	2b02      	cmp	r3, #2
 800270c:	d126      	bne.n	800275c <set_changetime_func+0x2e4>
				draw_title(eCH_DelayTIME);
 800270e:	2002      	movs	r0, #2
 8002710:	f7ff fb44 	bl	8001d9c <draw_title>
				ret_sc = eSET_DELAY_TIME_SC;
 8002714:	2303      	movs	r3, #3
 8002716:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				m_cfg.set_time = load_cfg.delay_time[channel];
 800271a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800271e:	4a18      	ldr	r2, [pc, #96]	@ (8002780 <set_changetime_func+0x308>)
 8002720:	3308      	adds	r3, #8
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	4413      	add	r3, r2
 8002726:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800272a:	b29a      	uxth	r2, r3
 800272c:	4b11      	ldr	r3, [pc, #68]	@ (8002774 <set_changetime_func+0x2fc>)
 800272e:	815a      	strh	r2, [r3, #10]
				m_cfg.cursor = 13;
 8002730:	4b10      	ldr	r3, [pc, #64]	@ (8002774 <set_changetime_func+0x2fc>)
 8002732:	220d      	movs	r2, #13
 8002734:	70da      	strb	r2, [r3, #3]
				m_cfg.digit_num = 4;  // 0 ~ 4
 8002736:	4b0f      	ldr	r3, [pc, #60]	@ (8002774 <set_changetime_func+0x2fc>)
 8002738:	2204      	movs	r2, #4
 800273a:	725a      	strb	r2, [r3, #9]
				//LOG_DBG("Delay Set Ch[%d] time[%d]", channel, m_cfg.set_time);
				split_num(m_cfg.set_time, m_cfg.input_num);
 800273c:	4b0d      	ldr	r3, [pc, #52]	@ (8002774 <set_changetime_func+0x2fc>)
 800273e:	895b      	ldrh	r3, [r3, #10]
 8002740:	490e      	ldr	r1, [pc, #56]	@ (800277c <set_changetime_func+0x304>)
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff fd4c 	bl	80021e0 <split_num>
				//LOG_HEX_DUMP(m_cfg.input_num, m_cfg.digit_num, "Set delay");
				LCD_LOCATE(2, m_cfg.cursor);
 8002748:	4b0a      	ldr	r3, [pc, #40]	@ (8002774 <set_changetime_func+0x2fc>)
 800274a:	78db      	ldrb	r3, [r3, #3]
 800274c:	4619      	mov	r1, r3
 800274e:	2002      	movs	r0, #2
 8002750:	f7ff fa02 	bl	8001b58 <LCD_LOCATE>
				change_value = 1;
 8002754:	2301      	movs	r3, #1
 8002756:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
			}else{
				draw_title(eCH_TriggerSet);
				ret_sc = eSET_TRIGGER_SC;
				LCD_DISP_ON(); // Cursor off
			}
			break;
 800275a:	e014      	b.n	8002786 <set_changetime_func+0x30e>
				draw_title(eCH_TriggerSet);
 800275c:	2003      	movs	r0, #3
 800275e:	f7ff fb1d 	bl	8001d9c <draw_title>
				ret_sc = eSET_TRIGGER_SC;
 8002762:	2304      	movs	r3, #4
 8002764:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				LCD_DISP_ON(); // Cursor off
 8002768:	f7ff f9e8 	bl	8001b3c <LCD_DISP_ON>
			break;
 800276c:	e00b      	b.n	8002786 <set_changetime_func+0x30e>
			break;
 800276e:	bf00      	nop
 8002770:	e009      	b.n	8002786 <set_changetime_func+0x30e>
 8002772:	bf00      	nop
 8002774:	20000be4 	.word	0x20000be4
 8002778:	20000be9 	.word	0x20000be9
 800277c:	20000be8 	.word	0x20000be8
 8002780:	20000c30 	.word	0x20000c30
			break;
 8002784:	bf00      	nop
	}

	if(change_value){
 8002786:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800278a:	2b00      	cmp	r3, #0
 800278c:	d02e      	beq.n	80027ec <set_changetime_func+0x374>
		//LOG_DBG("Change Value Ch[%d] time[%d]", channel+1, combine_array(m_cfg.input_num));
		if(param.sc_id == eSET_ON_TIME_SC){
 800278e:	783b      	ldrb	r3, [r7, #0]
 8002790:	2b02      	cmp	r3, #2
 8002792:	d109      	bne.n	80027a8 <set_changetime_func+0x330>
			sprintf(line_1_buf, "CH%d On-Time     \n", channel+1);
 8002794:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002798:	1c5a      	adds	r2, r3, #1
 800279a:	f107 0320 	add.w	r3, r7, #32
 800279e:	491c      	ldr	r1, [pc, #112]	@ (8002810 <set_changetime_func+0x398>)
 80027a0:	4618      	mov	r0, r3
 80027a2:	f006 fa59 	bl	8008c58 <siprintf>
 80027a6:	e008      	b.n	80027ba <set_changetime_func+0x342>
		}else{
			sprintf(line_1_buf, "CH%d Delay-Time  \n", channel+1);
 80027a8:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80027ac:	1c5a      	adds	r2, r3, #1
 80027ae:	f107 0320 	add.w	r3, r7, #32
 80027b2:	4918      	ldr	r1, [pc, #96]	@ (8002814 <set_changetime_func+0x39c>)
 80027b4:	4618      	mov	r0, r3
 80027b6:	f006 fa4f 	bl	8008c58 <siprintf>
		}
		sprintf(line_2_buf, "Value : %05d us\n", combine_array(m_cfg.input_num));
 80027ba:	4817      	ldr	r0, [pc, #92]	@ (8002818 <set_changetime_func+0x3a0>)
 80027bc:	f7ff fd56 	bl	800226c <combine_array>
 80027c0:	4602      	mov	r2, r0
 80027c2:	f107 030c 	add.w	r3, r7, #12
 80027c6:	4915      	ldr	r1, [pc, #84]	@ (800281c <set_changetime_func+0x3a4>)
 80027c8:	4618      	mov	r0, r3
 80027ca:	f006 fa45 	bl	8008c58 <siprintf>
		//LOG_DBG("Change Value[%s]", line_2_buf);
		LCD_LOCATE(2,1);
 80027ce:	2101      	movs	r1, #1
 80027d0:	2002      	movs	r0, #2
 80027d2:	f7ff f9c1 	bl	8001b58 <LCD_LOCATE>
		LCD_printstring(line_2_buf);
 80027d6:	f107 030c 	add.w	r3, r7, #12
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff f990 	bl	8001b00 <LCD_printstring>
		LCD_LOCATE(2,m_cfg.cursor);
 80027e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002820 <set_changetime_func+0x3a8>)
 80027e2:	78db      	ldrb	r3, [r3, #3]
 80027e4:	4619      	mov	r1, r3
 80027e6:	2002      	movs	r0, #2
 80027e8:	f7ff f9b6 	bl	8001b58 <LCD_LOCATE>
	}
	if(m_cfg.cursor != old_cursor){
 80027ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002820 <set_changetime_func+0x3a8>)
 80027ee:	78db      	ldrb	r3, [r3, #3]
 80027f0:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d005      	beq.n	8002804 <set_changetime_func+0x38c>
		LCD_LOCATE(2, m_cfg.cursor);
 80027f8:	4b09      	ldr	r3, [pc, #36]	@ (8002820 <set_changetime_func+0x3a8>)
 80027fa:	78db      	ldrb	r3, [r3, #3]
 80027fc:	4619      	mov	r1, r3
 80027fe:	2002      	movs	r0, #2
 8002800:	f7ff f9aa 	bl	8001b58 <LCD_LOCATE>
	}
	return ret_sc;
 8002804:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8002808:	4618      	mov	r0, r3
 800280a:	3740      	adds	r7, #64	@ 0x40
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	08009e04 	.word	0x08009e04
 8002814:	08009e28 	.word	0x08009e28
 8002818:	20000be8 	.word	0x20000be8
 800281c:	0800a04c 	.word	0x0800a04c
 8002820:	20000be4 	.word	0x20000be4

08002824 <save_data>:

static ScreenID_t save_data(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
	memcpy(m_app_config, &load_cfg, sizeof(config_t));
 8002828:	4b09      	ldr	r3, [pc, #36]	@ (8002850 <save_data+0x2c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a09      	ldr	r2, [pc, #36]	@ (8002854 <save_data+0x30>)
 800282e:	4618      	mov	r0, r3
 8002830:	4611      	mov	r1, r2
 8002832:	2347      	movs	r3, #71	@ 0x47
 8002834:	461a      	mov	r2, r3
 8002836:	f006 faff 	bl	8008e38 <memcpy>
	if(app_save_config() < 0){
 800283a:	f7fd ffd7 	bl	80007ec <app_save_config>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	da01      	bge.n	8002848 <save_data+0x24>
		return eERROR_SC;
 8002844:	2310      	movs	r3, #16
 8002846:	e000      	b.n	800284a <save_data+0x26>
	}else{
		//draw_title(eCH_CHSelect);
		return eMAX_SCREEN_ID;
 8002848:	230f      	movs	r3, #15
	}
}
 800284a:	4618      	mov	r0, r3
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	20000218 	.word	0x20000218
 8002854:	20000c30 	.word	0x20000c30

08002858 <run_remote_mode>:

static void run_remote_mode(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
	apps_set_remote_mode();
 800285c:	f7fd ff4e 	bl	80006fc <apps_set_remote_mode>
	send_cmd_2_backend(eCMD_FR_SetRemote, 0, m_cfg.remote_mode);
 8002860:	4b04      	ldr	r3, [pc, #16]	@ (8002874 <run_remote_mode+0x1c>)
 8002862:	785b      	ldrb	r3, [r3, #1]
 8002864:	461a      	mov	r2, r3
 8002866:	2100      	movs	r1, #0
 8002868:	20c0      	movs	r0, #192	@ 0xc0
 800286a:	f7ff fa3d 	bl	8001ce8 <send_cmd_2_backend>
}
 800286e:	bf00      	nop
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	20000be4 	.word	0x20000be4

08002878 <blink_text_screen_func>:

ScreenID_t blink_text_screen_func(Screen_param_t param)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	463b      	mov	r3, r7
 8002880:	e883 0003 	stmia.w	r3, {r0, r1}
	ScreenID_t ret_sc = param.sc_id;
 8002884:	783b      	ldrb	r3, [r7, #0]
 8002886:	73fb      	strb	r3, [r7, #15]
	uint8_t old_value;
	BackEnd_Cmd_t cmd = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	737b      	strb	r3, [r7, #13]
	
	if(ret_sc == eSET_TRIGGER_SC){
 800288c:	7bfb      	ldrb	r3, [r7, #15]
 800288e:	2b04      	cmp	r3, #4
 8002890:	d108      	bne.n	80028a4 <blink_text_screen_func+0x2c>
		old_value = load_cfg.edge[m_cfg.cur_ch];
 8002892:	4b79      	ldr	r3, [pc, #484]	@ (8002a78 <blink_text_screen_func+0x200>)
 8002894:	789b      	ldrb	r3, [r3, #2]
 8002896:	461a      	mov	r2, r3
 8002898:	4b78      	ldr	r3, [pc, #480]	@ (8002a7c <blink_text_screen_func+0x204>)
 800289a:	4413      	add	r3, r2
 800289c:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 80028a0:	73bb      	strb	r3, [r7, #14]
 80028a2:	e002      	b.n	80028aa <blink_text_screen_func+0x32>
	}else{
		old_value = load_cfg.mode;
 80028a4:	4b75      	ldr	r3, [pc, #468]	@ (8002a7c <blink_text_screen_func+0x204>)
 80028a6:	791b      	ldrb	r3, [r3, #4]
 80028a8:	73bb      	strb	r3, [r7, #14]
	}

	switch(param.key){
 80028aa:	887b      	ldrh	r3, [r7, #2]
 80028ac:	3b01      	subs	r3, #1
 80028ae:	2b0f      	cmp	r3, #15
 80028b0:	f200 80d9 	bhi.w	8002a66 <blink_text_screen_func+0x1ee>
 80028b4:	a201      	add	r2, pc, #4	@ (adr r2, 80028bc <blink_text_screen_func+0x44>)
 80028b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ba:	bf00      	nop
 80028bc:	0800298f 	.word	0x0800298f
 80028c0:	080028fd 	.word	0x080028fd
 80028c4:	08002a67 	.word	0x08002a67
 80028c8:	080028fd 	.word	0x080028fd
 80028cc:	08002a67 	.word	0x08002a67
 80028d0:	08002a67 	.word	0x08002a67
 80028d4:	08002a67 	.word	0x08002a67
 80028d8:	08002a4b 	.word	0x08002a4b
 80028dc:	08002a67 	.word	0x08002a67
 80028e0:	08002a67 	.word	0x08002a67
 80028e4:	08002a67 	.word	0x08002a67
 80028e8:	08002a67 	.word	0x08002a67
 80028ec:	08002a67 	.word	0x08002a67
 80028f0:	08002a67 	.word	0x08002a67
 80028f4:	08002a67 	.word	0x08002a67
 80028f8:	080029dd 	.word	0x080029dd
		case eKey_Up:
		case eKey_Down:
			if(m_cfg.set_mode == 0){
 80028fc:	4b5e      	ldr	r3, [pc, #376]	@ (8002a78 <blink_text_screen_func+0x200>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <blink_text_screen_func+0x90>
				return ret_sc;
 8002904:	7bfb      	ldrb	r3, [r7, #15]
 8002906:	e0b2      	b.n	8002a6e <blink_text_screen_func+0x1f6>
			}
			old_value ^= 1;
 8002908:	7bbb      	ldrb	r3, [r7, #14]
 800290a:	f083 0301 	eor.w	r3, r3, #1
 800290e:	73bb      	strb	r3, [r7, #14]
			if(ret_sc == eSET_TRIGGER_SC){
 8002910:	7bfb      	ldrb	r3, [r7, #15]
 8002912:	2b04      	cmp	r3, #4
 8002914:	d11b      	bne.n	800294e <blink_text_screen_func+0xd6>
				sprintf(m_cfg.blink_text[0], "Value : %s \n", (old_value==eFALLING)?"Falling":"Rising ");
 8002916:	7bbb      	ldrb	r3, [r7, #14]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <blink_text_screen_func+0xa8>
 800291c:	4b58      	ldr	r3, [pc, #352]	@ (8002a80 <blink_text_screen_func+0x208>)
 800291e:	e000      	b.n	8002922 <blink_text_screen_func+0xaa>
 8002920:	4b58      	ldr	r3, [pc, #352]	@ (8002a84 <blink_text_screen_func+0x20c>)
 8002922:	461a      	mov	r2, r3
 8002924:	4958      	ldr	r1, [pc, #352]	@ (8002a88 <blink_text_screen_func+0x210>)
 8002926:	4859      	ldr	r0, [pc, #356]	@ (8002a8c <blink_text_screen_func+0x214>)
 8002928:	f006 f996 	bl	8008c58 <siprintf>
				load_cfg.edge[m_cfg.cur_ch] = (old_value==eFALLING)?eFALLING:eRISING;
 800292c:	7bbb      	ldrb	r3, [r7, #14]
 800292e:	2b00      	cmp	r3, #0
 8002930:	bf14      	ite	ne
 8002932:	2301      	movne	r3, #1
 8002934:	2300      	moveq	r3, #0
 8002936:	b2d9      	uxtb	r1, r3
 8002938:	4b4f      	ldr	r3, [pc, #316]	@ (8002a78 <blink_text_screen_func+0x200>)
 800293a:	789b      	ldrb	r3, [r3, #2]
 800293c:	461a      	mov	r2, r3
 800293e:	4b4f      	ldr	r3, [pc, #316]	@ (8002a7c <blink_text_screen_func+0x204>)
 8002940:	4413      	add	r3, r2
 8002942:	460a      	mov	r2, r1
 8002944:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
				cmd = eCMD_InputEdge;
 8002948:	23b8      	movs	r3, #184	@ 0xb8
 800294a:	737b      	strb	r3, [r7, #13]
 800294c:	e015      	b.n	800297a <blink_text_screen_func+0x102>
			}else{
				sprintf(m_cfg.blink_text[0], "      %s     \n", (old_value==eONE_ONE)?"1 : 1" : "1 : N");
 800294e:	7bbb      	ldrb	r3, [r7, #14]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <blink_text_screen_func+0xe0>
 8002954:	4b4e      	ldr	r3, [pc, #312]	@ (8002a90 <blink_text_screen_func+0x218>)
 8002956:	e000      	b.n	800295a <blink_text_screen_func+0xe2>
 8002958:	4b4e      	ldr	r3, [pc, #312]	@ (8002a94 <blink_text_screen_func+0x21c>)
 800295a:	461a      	mov	r2, r3
 800295c:	494e      	ldr	r1, [pc, #312]	@ (8002a98 <blink_text_screen_func+0x220>)
 800295e:	484b      	ldr	r0, [pc, #300]	@ (8002a8c <blink_text_screen_func+0x214>)
 8002960:	f006 f97a 	bl	8008c58 <siprintf>
				load_cfg.mode = (old_value==eONE_ONE)?eONE_ONE:eONE_N;
 8002964:	7bbb      	ldrb	r3, [r7, #14]
 8002966:	2b00      	cmp	r3, #0
 8002968:	bf14      	ite	ne
 800296a:	2301      	movne	r3, #1
 800296c:	2300      	moveq	r3, #0
 800296e:	b2db      	uxtb	r3, r3
 8002970:	461a      	mov	r2, r3
 8002972:	4b42      	ldr	r3, [pc, #264]	@ (8002a7c <blink_text_screen_func+0x204>)
 8002974:	711a      	strb	r2, [r3, #4]
				cmd = eCMD_OutMode;
 8002976:	23b1      	movs	r3, #177	@ 0xb1
 8002978:	737b      	strb	r3, [r7, #13]
			}
			//LOG_DBG("old[%d] %s", old_value, m_cfg.blink_text[0]);
			LCD_LOCATE(m_cfg.blink_row,1);
 800297a:	4b3f      	ldr	r3, [pc, #252]	@ (8002a78 <blink_text_screen_func+0x200>)
 800297c:	7b9b      	ldrb	r3, [r3, #14]
 800297e:	2101      	movs	r1, #1
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff f8e9 	bl	8001b58 <LCD_LOCATE>
			LCD_printstring(m_cfg.blink_text[0]);
 8002986:	4841      	ldr	r0, [pc, #260]	@ (8002a8c <blink_text_screen_func+0x214>)
 8002988:	f7ff f8ba 	bl	8001b00 <LCD_printstring>
			break;			
 800298c:	e06e      	b.n	8002a6c <blink_text_screen_func+0x1f4>
		case eKey_Enter:
			if(m_cfg.set_mode){
 800298e:	4b3a      	ldr	r3, [pc, #232]	@ (8002a78 <blink_text_screen_func+0x200>)
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d01f      	beq.n	80029d6 <blink_text_screen_func+0x15e>
				m_cfg.enable_blink = 0;
 8002996:	4b38      	ldr	r3, [pc, #224]	@ (8002a78 <blink_text_screen_func+0x200>)
 8002998:	2200      	movs	r2, #0
 800299a:	731a      	strb	r2, [r3, #12]
				m_cfg.set_mode = 0;
 800299c:	4b36      	ldr	r3, [pc, #216]	@ (8002a78 <blink_text_screen_func+0x200>)
 800299e:	2200      	movs	r2, #0
 80029a0:	701a      	strb	r2, [r3, #0]
				apps_set_blink_enable(m_cfg.enable_blink);
 80029a2:	4b35      	ldr	r3, [pc, #212]	@ (8002a78 <blink_text_screen_func+0x200>)
 80029a4:	7b1b      	ldrb	r3, [r3, #12]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fd feb6 	bl	8000718 <apps_set_blink_enable>
				ret_sc = save_data();
 80029ac:	f7ff ff3a 	bl	8002824 <save_data>
 80029b0:	4603      	mov	r3, r0
 80029b2:	73fb      	strb	r3, [r7, #15]
				if(ret_sc != eMAX_SCREEN_ID){
 80029b4:	7bfb      	ldrb	r3, [r7, #15]
 80029b6:	2b0f      	cmp	r3, #15
 80029b8:	d001      	beq.n	80029be <blink_text_screen_func+0x146>
					return eERROR_SC;
 80029ba:	2310      	movs	r3, #16
 80029bc:	e057      	b.n	8002a6e <blink_text_screen_func+0x1f6>
				}
				send_cmd_2_backend(cmd, m_cfg.cur_ch, old_value);
 80029be:	4b2e      	ldr	r3, [pc, #184]	@ (8002a78 <blink_text_screen_func+0x200>)
 80029c0:	7899      	ldrb	r1, [r3, #2]
 80029c2:	7bbb      	ldrb	r3, [r7, #14]
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	7b7b      	ldrb	r3, [r7, #13]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff f98d 	bl	8001ce8 <send_cmd_2_backend>
				draw_title(eCH_CHSelect);
 80029ce:	2000      	movs	r0, #0
 80029d0:	f7ff f9e4 	bl	8001d9c <draw_title>
			}else{
				ret_sc = eCHANNEL_SC;
			}
			break;
 80029d4:	e04a      	b.n	8002a6c <blink_text_screen_func+0x1f4>
				ret_sc = eCHANNEL_SC;
 80029d6:	2301      	movs	r3, #1
 80029d8:	73fb      	strb	r3, [r7, #15]
			break;
 80029da:	e047      	b.n	8002a6c <blink_text_screen_func+0x1f4>
		case eKey_SetMode:
			if(ret_sc == eSET_TRIGGER_SC){
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
 80029de:	2b04      	cmp	r3, #4
 80029e0:	d10f      	bne.n	8002a02 <blink_text_screen_func+0x18a>
				sprintf(m_cfg.blink_text[0], "Value : %s \n", (old_value==eRISING)?"Rising ":"Falling");
 80029e2:	7bbb      	ldrb	r3, [r7, #14]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d101      	bne.n	80029ec <blink_text_screen_func+0x174>
 80029e8:	4b26      	ldr	r3, [pc, #152]	@ (8002a84 <blink_text_screen_func+0x20c>)
 80029ea:	e000      	b.n	80029ee <blink_text_screen_func+0x176>
 80029ec:	4b24      	ldr	r3, [pc, #144]	@ (8002a80 <blink_text_screen_func+0x208>)
 80029ee:	461a      	mov	r2, r3
 80029f0:	4925      	ldr	r1, [pc, #148]	@ (8002a88 <blink_text_screen_func+0x210>)
 80029f2:	4826      	ldr	r0, [pc, #152]	@ (8002a8c <blink_text_screen_func+0x214>)
 80029f4:	f006 f930 	bl	8008c58 <siprintf>
				sprintf(m_cfg.blink_text[1], "Value :         \n");
 80029f8:	4928      	ldr	r1, [pc, #160]	@ (8002a9c <blink_text_screen_func+0x224>)
 80029fa:	4829      	ldr	r0, [pc, #164]	@ (8002aa0 <blink_text_screen_func+0x228>)
 80029fc:	f006 f92c 	bl	8008c58 <siprintf>
 8002a00:	e011      	b.n	8002a26 <blink_text_screen_func+0x1ae>
			}else{
				sprintf(m_cfg.blink_text[0], "      %s     \n", (old_value==eONE_N)?"1 : N" : "1 : 1");
 8002a02:	7bbb      	ldrb	r3, [r7, #14]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d101      	bne.n	8002a0c <blink_text_screen_func+0x194>
 8002a08:	4b22      	ldr	r3, [pc, #136]	@ (8002a94 <blink_text_screen_func+0x21c>)
 8002a0a:	e000      	b.n	8002a0e <blink_text_screen_func+0x196>
 8002a0c:	4b20      	ldr	r3, [pc, #128]	@ (8002a90 <blink_text_screen_func+0x218>)
 8002a0e:	461a      	mov	r2, r3
 8002a10:	4921      	ldr	r1, [pc, #132]	@ (8002a98 <blink_text_screen_func+0x220>)
 8002a12:	481e      	ldr	r0, [pc, #120]	@ (8002a8c <blink_text_screen_func+0x214>)
 8002a14:	f006 f920 	bl	8008c58 <siprintf>
				sprintf(m_cfg.blink_text[1], "                \n");
 8002a18:	4922      	ldr	r1, [pc, #136]	@ (8002aa4 <blink_text_screen_func+0x22c>)
 8002a1a:	4821      	ldr	r0, [pc, #132]	@ (8002aa0 <blink_text_screen_func+0x228>)
 8002a1c:	f006 f91c 	bl	8008c58 <siprintf>
				draw_title(eSET_OPMODE);
 8002a20:	2005      	movs	r0, #5
 8002a22:	f7ff f9bb 	bl	8001d9c <draw_title>
			}
			m_cfg.blink = 0;
 8002a26:	4b14      	ldr	r3, [pc, #80]	@ (8002a78 <blink_text_screen_func+0x200>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	735a      	strb	r2, [r3, #13]
			m_cfg.blink_row = 2;
 8002a2c:	4b12      	ldr	r3, [pc, #72]	@ (8002a78 <blink_text_screen_func+0x200>)
 8002a2e:	2202      	movs	r2, #2
 8002a30:	739a      	strb	r2, [r3, #14]
			m_cfg.enable_blink = 1;
 8002a32:	4b11      	ldr	r3, [pc, #68]	@ (8002a78 <blink_text_screen_func+0x200>)
 8002a34:	2201      	movs	r2, #1
 8002a36:	731a      	strb	r2, [r3, #12]
			m_cfg.set_mode = 1;
 8002a38:	4b0f      	ldr	r3, [pc, #60]	@ (8002a78 <blink_text_screen_func+0x200>)
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	701a      	strb	r2, [r3, #0]

			apps_set_blink_enable(m_cfg.enable_blink);
 8002a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a78 <blink_text_screen_func+0x200>)
 8002a40:	7b1b      	ldrb	r3, [r3, #12]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fd fe68 	bl	8000718 <apps_set_blink_enable>
			break;
 8002a48:	e010      	b.n	8002a6c <blink_text_screen_func+0x1f4>
		case eKey_Mode:
			if(ret_sc == eSET_TRIGGER_SC){
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	d103      	bne.n	8002a58 <blink_text_screen_func+0x1e0>
				draw_title(eCH_TriggerSet);
 8002a50:	2003      	movs	r0, #3
 8002a52:	f7ff f9a3 	bl	8001d9c <draw_title>
			}else if(ret_sc == eOPMODE_SC){
				draw_title(eSEL_OPMODE);
			}
			break;
 8002a56:	e008      	b.n	8002a6a <blink_text_screen_func+0x1f2>
			}else if(ret_sc == eOPMODE_SC){
 8002a58:	7bfb      	ldrb	r3, [r7, #15]
 8002a5a:	2b05      	cmp	r3, #5
 8002a5c:	d105      	bne.n	8002a6a <blink_text_screen_func+0x1f2>
				draw_title(eSEL_OPMODE);
 8002a5e:	2004      	movs	r0, #4
 8002a60:	f7ff f99c 	bl	8001d9c <draw_title>
			break;
 8002a64:	e001      	b.n	8002a6a <blink_text_screen_func+0x1f2>
		default:
			break;
 8002a66:	bf00      	nop
 8002a68:	e000      	b.n	8002a6c <blink_text_screen_func+0x1f4>
			break;
 8002a6a:	bf00      	nop
	}	

	return ret_sc;
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	20000be4 	.word	0x20000be4
 8002a7c:	20000c30 	.word	0x20000c30
 8002a80:	08009e58 	.word	0x08009e58
 8002a84:	08009e50 	.word	0x08009e50
 8002a88:	08009e60 	.word	0x08009e60
 8002a8c:	20000bf3 	.word	0x20000bf3
 8002a90:	08009ea0 	.word	0x08009ea0
 8002a94:	08009e98 	.word	0x08009e98
 8002a98:	08009ea8 	.word	0x08009ea8
 8002a9c:	08009e70 	.word	0x08009e70
 8002aa0:	20000c07 	.word	0x20000c07
 8002aa4:	0800a060 	.word	0x0800a060

08002aa8 <uart_screen_func>:

ScreenID_t uart_screen_func(Screen_param_t param)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	463b      	mov	r3, r7
 8002ab0:	e883 0003 	stmia.w	r3, {r0, r1}
	ScreenID_t ret_sc = param.sc_id;
 8002ab4:	783b      	ldrb	r3, [r7, #0]
 8002ab6:	73fb      	strb	r3, [r7, #15]
	uint8_t old_value = load_cfg.dev_id;
 8002ab8:	4b48      	ldr	r3, [pc, #288]	@ (8002bdc <uart_screen_func+0x134>)
 8002aba:	795b      	ldrb	r3, [r3, #5]
 8002abc:	73bb      	strb	r3, [r7, #14]

	switch(param.key){
 8002abe:	887b      	ldrh	r3, [r7, #2]
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	2b0f      	cmp	r3, #15
 8002ac4:	d875      	bhi.n	8002bb2 <uart_screen_func+0x10a>
 8002ac6:	a201      	add	r2, pc, #4	@ (adr r2, 8002acc <uart_screen_func+0x24>)
 8002ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002acc:	08002b3d 	.word	0x08002b3d
 8002ad0:	08002b0d 	.word	0x08002b0d
 8002ad4:	08002bb3 	.word	0x08002bb3
 8002ad8:	08002b25 	.word	0x08002b25
 8002adc:	08002bb3 	.word	0x08002bb3
 8002ae0:	08002bb3 	.word	0x08002bb3
 8002ae4:	08002bb3 	.word	0x08002bb3
 8002ae8:	08002ba3 	.word	0x08002ba3
 8002aec:	08002bb3 	.word	0x08002bb3
 8002af0:	08002bb3 	.word	0x08002bb3
 8002af4:	08002bb3 	.word	0x08002bb3
 8002af8:	08002bb3 	.word	0x08002bb3
 8002afc:	08002bb3 	.word	0x08002bb3
 8002b00:	08002bb3 	.word	0x08002bb3
 8002b04:	08002bb3 	.word	0x08002bb3
 8002b08:	08002b7f 	.word	0x08002b7f
		case eKey_Up:
			if(load_cfg.dev_id++ >= MAX_DEV_ID){
 8002b0c:	4b33      	ldr	r3, [pc, #204]	@ (8002bdc <uart_screen_func+0x134>)
 8002b0e:	795b      	ldrb	r3, [r3, #5]
 8002b10:	1c5a      	adds	r2, r3, #1
 8002b12:	b2d1      	uxtb	r1, r2
 8002b14:	4a31      	ldr	r2, [pc, #196]	@ (8002bdc <uart_screen_func+0x134>)
 8002b16:	7151      	strb	r1, [r2, #5]
 8002b18:	2b09      	cmp	r3, #9
 8002b1a:	d94c      	bls.n	8002bb6 <uart_screen_func+0x10e>
				load_cfg.dev_id = 1;
 8002b1c:	4b2f      	ldr	r3, [pc, #188]	@ (8002bdc <uart_screen_func+0x134>)
 8002b1e:	2201      	movs	r2, #1
 8002b20:	715a      	strb	r2, [r3, #5]
			}			
			break;
 8002b22:	e048      	b.n	8002bb6 <uart_screen_func+0x10e>
		case eKey_Down:
			if(load_cfg.dev_id-- <= 1){
 8002b24:	4b2d      	ldr	r3, [pc, #180]	@ (8002bdc <uart_screen_func+0x134>)
 8002b26:	795b      	ldrb	r3, [r3, #5]
 8002b28:	1e5a      	subs	r2, r3, #1
 8002b2a:	b2d1      	uxtb	r1, r2
 8002b2c:	4a2b      	ldr	r2, [pc, #172]	@ (8002bdc <uart_screen_func+0x134>)
 8002b2e:	7151      	strb	r1, [r2, #5]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d842      	bhi.n	8002bba <uart_screen_func+0x112>
				load_cfg.dev_id = MAX_DEV_ID;
 8002b34:	4b29      	ldr	r3, [pc, #164]	@ (8002bdc <uart_screen_func+0x134>)
 8002b36:	220a      	movs	r2, #10
 8002b38:	715a      	strb	r2, [r3, #5]
			}			
			break;
 8002b3a:	e03e      	b.n	8002bba <uart_screen_func+0x112>
		case eKey_Enter:
			if(m_cfg.set_mode){
 8002b3c:	4b28      	ldr	r3, [pc, #160]	@ (8002be0 <uart_screen_func+0x138>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d014      	beq.n	8002b6e <uart_screen_func+0xc6>
				LCD_DISP_ON();	// Cursor off
 8002b44:	f7fe fffa 	bl	8001b3c <LCD_DISP_ON>
				m_cfg.set_mode = 0;
 8002b48:	4b25      	ldr	r3, [pc, #148]	@ (8002be0 <uart_screen_func+0x138>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	701a      	strb	r2, [r3, #0]
				ret_sc = save_data();
 8002b4e:	f7ff fe69 	bl	8002824 <save_data>
 8002b52:	4603      	mov	r3, r0
 8002b54:	73fb      	strb	r3, [r7, #15]
				if(ret_sc == eERROR_SC){
 8002b56:	7bfb      	ldrb	r3, [r7, #15]
 8002b58:	2b10      	cmp	r3, #16
 8002b5a:	d101      	bne.n	8002b60 <uart_screen_func+0xb8>
					return ret_sc;
 8002b5c:	7bfb      	ldrb	r3, [r7, #15]
 8002b5e:	e038      	b.n	8002bd2 <uart_screen_func+0x12a>
				}
				send_cmd_2_backend(eCMD_FR_SetDevID, 0, m_cfg.remote_mode);
 8002b60:	4b1f      	ldr	r3, [pc, #124]	@ (8002be0 <uart_screen_func+0x138>)
 8002b62:	785b      	ldrb	r3, [r3, #1]
 8002b64:	461a      	mov	r2, r3
 8002b66:	2100      	movs	r1, #0
 8002b68:	20c2      	movs	r0, #194	@ 0xc2
 8002b6a:	f7ff f8bd 	bl	8001ce8 <send_cmd_2_backend>
			}
			m_cfg.remote_mode = eREMOTE_RS232;
 8002b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8002be0 <uart_screen_func+0x138>)
 8002b70:	2201      	movs	r2, #1
 8002b72:	705a      	strb	r2, [r3, #1]
			ret_sc = eREMOTE_SC;
 8002b74:	230a      	movs	r3, #10
 8002b76:	73fb      	strb	r3, [r7, #15]
			run_remote_mode();
 8002b78:	f7ff fe6e 	bl	8002858 <run_remote_mode>
			break;			
 8002b7c:	e020      	b.n	8002bc0 <uart_screen_func+0x118>
		case eKey_SetMode:
			m_cfg.set_mode = 1;
 8002b7e:	4b18      	ldr	r3, [pc, #96]	@ (8002be0 <uart_screen_func+0x138>)
 8002b80:	2201      	movs	r2, #1
 8002b82:	701a      	strb	r2, [r3, #0]
			m_cfg.cursor = 14;
 8002b84:	4b16      	ldr	r3, [pc, #88]	@ (8002be0 <uart_screen_func+0x138>)
 8002b86:	220e      	movs	r2, #14
 8002b88:	70da      	strb	r2, [r3, #3]
			draw_title(eRS_DevID);
 8002b8a:	2006      	movs	r0, #6
 8002b8c:	f7ff f906 	bl	8001d9c <draw_title>
			LCD_LOCATE(2, m_cfg.cursor);
 8002b90:	4b13      	ldr	r3, [pc, #76]	@ (8002be0 <uart_screen_func+0x138>)
 8002b92:	78db      	ldrb	r3, [r3, #3]
 8002b94:	4619      	mov	r1, r3
 8002b96:	2002      	movs	r0, #2
 8002b98:	f7fe ffde 	bl	8001b58 <LCD_LOCATE>
			LCD_DISP_CURSOR();  // Cursor on		
 8002b9c:	f7fe ffd5 	bl	8001b4a <LCD_DISP_CURSOR>
			break;
 8002ba0:	e00e      	b.n	8002bc0 <uart_screen_func+0x118>
		case eKey_Mode:
			if(m_cfg.set_mode == 0){
 8002ba2:	4b0f      	ldr	r3, [pc, #60]	@ (8002be0 <uart_screen_func+0x138>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d109      	bne.n	8002bbe <uart_screen_func+0x116>
				draw_title(eRS_DevID);
 8002baa:	2006      	movs	r0, #6
 8002bac:	f7ff f8f6 	bl	8001d9c <draw_title>
			}
			break;
 8002bb0:	e005      	b.n	8002bbe <uart_screen_func+0x116>
		default:
			break;
 8002bb2:	bf00      	nop
 8002bb4:	e004      	b.n	8002bc0 <uart_screen_func+0x118>
			break;
 8002bb6:	bf00      	nop
 8002bb8:	e002      	b.n	8002bc0 <uart_screen_func+0x118>
			break;
 8002bba:	bf00      	nop
 8002bbc:	e000      	b.n	8002bc0 <uart_screen_func+0x118>
			break;
 8002bbe:	bf00      	nop
	}
	if(old_value != load_cfg.dev_id){
 8002bc0:	4b06      	ldr	r3, [pc, #24]	@ (8002bdc <uart_screen_func+0x134>)
 8002bc2:	795b      	ldrb	r3, [r3, #5]
 8002bc4:	7bba      	ldrb	r2, [r7, #14]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d002      	beq.n	8002bd0 <uart_screen_func+0x128>
		draw_title(eRS_DevID);
 8002bca:	2006      	movs	r0, #6
 8002bcc:	f7ff f8e6 	bl	8001d9c <draw_title>
	}
	return ret_sc;
 8002bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	20000c30 	.word	0x20000c30
 8002be0:	20000be4 	.word	0x20000be4

08002be4 <check_octet>:

static void check_octet(uint8_t *check_value, uint8_t isUp)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	460b      	mov	r3, r1
 8002bee:	70fb      	strb	r3, [r7, #3]
	uint16_t addr = combine_array((int8_t *)check_value);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7ff fb3b 	bl	800226c <combine_array>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	81fb      	strh	r3, [r7, #14]
	uint8_t cur_digit = m_cfg.ip_digit;
 8002bfa:	4b17      	ldr	r3, [pc, #92]	@ (8002c58 <check_octet+0x74>)
 8002bfc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002c00:	737b      	strb	r3, [r7, #13]

	//LOG_DBG("isup[%d] Addr[%x] cur_dig[%d]", isUp, addr, cur_digit);

	if(addr > 255){
 8002c02:	89fb      	ldrh	r3, [r7, #14]
 8002c04:	2bff      	cmp	r3, #255	@ 0xff
 8002c06:	d922      	bls.n	8002c4e <check_octet+0x6a>
		if(cur_digit == 0){
 8002c08:	7b7b      	ldrb	r3, [r7, #13]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d103      	bne.n	8002c16 <check_octet+0x32>
			check_value[0] = 0;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	701a      	strb	r2, [r3, #0]
					check_value[cur_digit] = 5;
				}
			}
		}
	}	
}
 8002c14:	e01b      	b.n	8002c4e <check_octet+0x6a>
			if(isUp){
 8002c16:	78fb      	ldrb	r3, [r7, #3]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d005      	beq.n	8002c28 <check_octet+0x44>
				check_value[cur_digit] = 0;
 8002c1c:	7b7b      	ldrb	r3, [r7, #13]
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	4413      	add	r3, r2
 8002c22:	2200      	movs	r2, #0
 8002c24:	701a      	strb	r2, [r3, #0]
}
 8002c26:	e012      	b.n	8002c4e <check_octet+0x6a>
				if((cur_digit == 1) &&(check_value[2] > 5)){
 8002c28:	7b7b      	ldrb	r3, [r7, #13]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d10a      	bne.n	8002c44 <check_octet+0x60>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	3302      	adds	r3, #2
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	2b05      	cmp	r3, #5
 8002c36:	d905      	bls.n	8002c44 <check_octet+0x60>
					check_value[cur_digit] = 4;
 8002c38:	7b7b      	ldrb	r3, [r7, #13]
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	2204      	movs	r2, #4
 8002c40:	701a      	strb	r2, [r3, #0]
}
 8002c42:	e004      	b.n	8002c4e <check_octet+0x6a>
					check_value[cur_digit] = 5;
 8002c44:	7b7b      	ldrb	r3, [r7, #13]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	4413      	add	r3, r2
 8002c4a:	2205      	movs	r2, #5
 8002c4c:	701a      	strb	r2, [r3, #0]
}
 8002c4e:	bf00      	nop
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	20000be4 	.word	0x20000be4

08002c5c <ip_screen_func>:

ScreenID_t ip_screen_func(Screen_param_t param)
{
 8002c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c5e:	b08f      	sub	sp, #60	@ 0x3c
 8002c60:	af02      	add	r7, sp, #8
 8002c62:	463b      	mov	r3, r7
 8002c64:	e883 0003 	stmia.w	r3, {r0, r1}
	ScreenID_t ret_sc = param.sc_id;	
 8002c68:	783b      	ldrb	r3, [r7, #0]
 8002c6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t temp_addr[3];
	char line_buf[LCD_PRINT_MAX];
	int i;
	uint8_t is_up = 0;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t old_cursor = m_cfg.cursor;
 8002c74:	4bae      	ldr	r3, [pc, #696]	@ (8002f30 <ip_screen_func+0x2d4>)
 8002c76:	78db      	ldrb	r3, [r3, #3]
 8002c78:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	
	//LOG_DBG("cursor[%d] digit[%d]", m_cfg.cursor, m_cfg.ip_idx);
	switch(param.key){
 8002c7c:	887b      	ldrh	r3, [r7, #2]
 8002c7e:	2b10      	cmp	r3, #16
 8002c80:	f200 81d6 	bhi.w	8003030 <ip_screen_func+0x3d4>
 8002c84:	a201      	add	r2, pc, #4	@ (adr r2, 8002c8c <ip_screen_func+0x30>)
 8002c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c8a:	bf00      	nop
 8002c8c:	08003021 	.word	0x08003021
 8002c90:	08002f1f 	.word	0x08002f1f
 8002c94:	08002cd1 	.word	0x08002cd1
 8002c98:	08003031 	.word	0x08003031
 8002c9c:	08002cd1 	.word	0x08002cd1
 8002ca0:	08003031 	.word	0x08003031
 8002ca4:	08003031 	.word	0x08003031
 8002ca8:	08003031 	.word	0x08003031
 8002cac:	08003021 	.word	0x08003021
 8002cb0:	08003031 	.word	0x08003031
 8002cb4:	08002e23 	.word	0x08002e23
 8002cb8:	08003031 	.word	0x08003031
 8002cbc:	08002ea1 	.word	0x08002ea1
 8002cc0:	08003031 	.word	0x08003031
 8002cc4:	08003031 	.word	0x08003031
 8002cc8:	08003031 	.word	0x08003031
 8002ccc:	08002fb3 	.word	0x08002fb3
		case eKey_Up:
		case eKey_Down:
			if(m_cfg.set_mode == 0){
 8002cd0:	4b97      	ldr	r3, [pc, #604]	@ (8002f30 <ip_screen_func+0x2d4>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d102      	bne.n	8002cde <ip_screen_func+0x82>
				return ret_sc;
 8002cd8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002cdc:	e1bd      	b.n	800305a <ip_screen_func+0x3fe>
			}
			memcpy(temp_addr, m_cfg.ipaddr[m_cfg.ip_idx],3);
 8002cde:	4b94      	ldr	r3, [pc, #592]	@ (8002f30 <ip_screen_func+0x2d4>)
 8002ce0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	4413      	add	r3, r2
 8002cec:	3330      	adds	r3, #48	@ 0x30
 8002cee:	4a90      	ldr	r2, [pc, #576]	@ (8002f30 <ip_screen_func+0x2d4>)
 8002cf0:	4413      	add	r3, r2
 8002cf2:	1dda      	adds	r2, r3, #7
 8002cf4:	f107 0320 	add.w	r3, r7, #32
 8002cf8:	8811      	ldrh	r1, [r2, #0]
 8002cfa:	7892      	ldrb	r2, [r2, #2]
 8002cfc:	8019      	strh	r1, [r3, #0]
 8002cfe:	709a      	strb	r2, [r3, #2]
			if(param.key == eKey_Up){
 8002d00:	887b      	ldrh	r3, [r7, #2]
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d123      	bne.n	8002d4e <ip_screen_func+0xf2>
				if(temp_addr[m_cfg.ip_digit] == 9){
 8002d06:	4b8a      	ldr	r3, [pc, #552]	@ (8002f30 <ip_screen_func+0x2d4>)
 8002d08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d0c:	3330      	adds	r3, #48	@ 0x30
 8002d0e:	443b      	add	r3, r7
 8002d10:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002d14:	2b09      	cmp	r3, #9
 8002d16:	d108      	bne.n	8002d2a <ip_screen_func+0xce>
					temp_addr[m_cfg.ip_digit] = 0;
 8002d18:	4b85      	ldr	r3, [pc, #532]	@ (8002f30 <ip_screen_func+0x2d4>)
 8002d1a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d1e:	3330      	adds	r3, #48	@ 0x30
 8002d20:	443b      	add	r3, r7
 8002d22:	2200      	movs	r2, #0
 8002d24:	f803 2c10 	strb.w	r2, [r3, #-16]
 8002d28:	e00d      	b.n	8002d46 <ip_screen_func+0xea>
				}else{
					temp_addr[m_cfg.ip_digit]++;
 8002d2a:	4b81      	ldr	r3, [pc, #516]	@ (8002f30 <ip_screen_func+0x2d4>)
 8002d2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d30:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8002d34:	443a      	add	r2, r7
 8002d36:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8002d3a:	3201      	adds	r2, #1
 8002d3c:	b2d2      	uxtb	r2, r2
 8002d3e:	3330      	adds	r3, #48	@ 0x30
 8002d40:	443b      	add	r3, r7
 8002d42:	f803 2c10 	strb.w	r2, [r3, #-16]
				}
				is_up = 1;
 8002d46:	2301      	movs	r3, #1
 8002d48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002d4c:	e01f      	b.n	8002d8e <ip_screen_func+0x132>
			}else{
				if(temp_addr[m_cfg.ip_digit] == 0){
 8002d4e:	4b78      	ldr	r3, [pc, #480]	@ (8002f30 <ip_screen_func+0x2d4>)
 8002d50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d54:	3330      	adds	r3, #48	@ 0x30
 8002d56:	443b      	add	r3, r7
 8002d58:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d108      	bne.n	8002d72 <ip_screen_func+0x116>
					temp_addr[m_cfg.ip_digit] = 9;
 8002d60:	4b73      	ldr	r3, [pc, #460]	@ (8002f30 <ip_screen_func+0x2d4>)
 8002d62:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d66:	3330      	adds	r3, #48	@ 0x30
 8002d68:	443b      	add	r3, r7
 8002d6a:	2209      	movs	r2, #9
 8002d6c:	f803 2c10 	strb.w	r2, [r3, #-16]
 8002d70:	e00d      	b.n	8002d8e <ip_screen_func+0x132>
				}else{
					temp_addr[m_cfg.ip_digit]--;
 8002d72:	4b6f      	ldr	r3, [pc, #444]	@ (8002f30 <ip_screen_func+0x2d4>)
 8002d74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d78:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8002d7c:	443a      	add	r2, r7
 8002d7e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8002d82:	3a01      	subs	r2, #1
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	3330      	adds	r3, #48	@ 0x30
 8002d88:	443b      	add	r3, r7
 8002d8a:	f803 2c10 	strb.w	r2, [r3, #-16]
				}
			}
			check_octet(temp_addr, is_up);
 8002d8e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002d92:	f107 0320 	add.w	r3, r7, #32
 8002d96:	4611      	mov	r1, r2
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff ff23 	bl	8002be4 <check_octet>
			memcpy(m_cfg.ipaddr[m_cfg.ip_idx], temp_addr, 3);
 8002d9e:	4b64      	ldr	r3, [pc, #400]	@ (8002f30 <ip_screen_func+0x2d4>)
 8002da0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002da4:	461a      	mov	r2, r3
 8002da6:	4613      	mov	r3, r2
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	4413      	add	r3, r2
 8002dac:	3330      	adds	r3, #48	@ 0x30
 8002dae:	4a60      	ldr	r2, [pc, #384]	@ (8002f30 <ip_screen_func+0x2d4>)
 8002db0:	4413      	add	r3, r2
 8002db2:	3307      	adds	r3, #7
 8002db4:	461a      	mov	r2, r3
 8002db6:	f107 0320 	add.w	r3, r7, #32
 8002dba:	8819      	ldrh	r1, [r3, #0]
 8002dbc:	789b      	ldrb	r3, [r3, #2]
 8002dbe:	8011      	strh	r1, [r2, #0]
 8002dc0:	7093      	strb	r3, [r2, #2]
			sprintf(line_buf, "%03d.%03d.%03d.%03d \n",	(uint8_t)combine_array(m_cfg.ipaddr[0]),
 8002dc2:	485c      	ldr	r0, [pc, #368]	@ (8002f34 <ip_screen_func+0x2d8>)
 8002dc4:	f7ff fa52 	bl	800226c <combine_array>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	461d      	mov	r5, r3
														(uint8_t)combine_array(m_cfg.ipaddr[1]),
 8002dce:	485a      	ldr	r0, [pc, #360]	@ (8002f38 <ip_screen_func+0x2dc>)
 8002dd0:	f7ff fa4c 	bl	800226c <combine_array>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	b2db      	uxtb	r3, r3
			sprintf(line_buf, "%03d.%03d.%03d.%03d \n",	(uint8_t)combine_array(m_cfg.ipaddr[0]),
 8002dd8:	461e      	mov	r6, r3
														(uint8_t)combine_array(m_cfg.ipaddr[2]),
 8002dda:	4858      	ldr	r0, [pc, #352]	@ (8002f3c <ip_screen_func+0x2e0>)
 8002ddc:	f7ff fa46 	bl	800226c <combine_array>
 8002de0:	4603      	mov	r3, r0
 8002de2:	b2db      	uxtb	r3, r3
			sprintf(line_buf, "%03d.%03d.%03d.%03d \n",	(uint8_t)combine_array(m_cfg.ipaddr[0]),
 8002de4:	461c      	mov	r4, r3
														(uint8_t)combine_array(m_cfg.ipaddr[3]));
 8002de6:	4856      	ldr	r0, [pc, #344]	@ (8002f40 <ip_screen_func+0x2e4>)
 8002de8:	f7ff fa40 	bl	800226c <combine_array>
 8002dec:	4603      	mov	r3, r0
 8002dee:	b2db      	uxtb	r3, r3
			sprintf(line_buf, "%03d.%03d.%03d.%03d \n",	(uint8_t)combine_array(m_cfg.ipaddr[0]),
 8002df0:	f107 000c 	add.w	r0, r7, #12
 8002df4:	9301      	str	r3, [sp, #4]
 8002df6:	9400      	str	r4, [sp, #0]
 8002df8:	4633      	mov	r3, r6
 8002dfa:	462a      	mov	r2, r5
 8002dfc:	4951      	ldr	r1, [pc, #324]	@ (8002f44 <ip_screen_func+0x2e8>)
 8002dfe:	f005 ff2b 	bl	8008c58 <siprintf>
			LCD_LOCATE(2,1);
 8002e02:	2101      	movs	r1, #1
 8002e04:	2002      	movs	r0, #2
 8002e06:	f7fe fea7 	bl	8001b58 <LCD_LOCATE>
			LCD_printstring(line_buf);
 8002e0a:	f107 030c 	add.w	r3, r7, #12
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fe fe76 	bl	8001b00 <LCD_printstring>
			LCD_LOCATE(2,m_cfg.cursor);
 8002e14:	4b46      	ldr	r3, [pc, #280]	@ (8002f30 <ip_screen_func+0x2d4>)
 8002e16:	78db      	ldrb	r3, [r3, #3]
 8002e18:	4619      	mov	r1, r3
 8002e1a:	2002      	movs	r0, #2
 8002e1c:	f7fe fe9c 	bl	8001b58 <LCD_LOCATE>
			break;
 8002e20:	e10d      	b.n	800303e <ip_screen_func+0x3e2>
		case eKey_CursorUp:
			if(m_cfg.set_mode == 0){
 8002e22:	4b43      	ldr	r3, [pc, #268]	@ (8002f30 <ip_screen_func+0x2d4>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d102      	bne.n	8002e30 <ip_screen_func+0x1d4>
				return ret_sc;
 8002e2a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002e2e:	e114      	b.n	800305a <ip_screen_func+0x3fe>
			}
			m_cfg.cursor--;
 8002e30:	4b3f      	ldr	r3, [pc, #252]	@ (8002f30 <ip_screen_func+0x2d4>)
 8002e32:	78db      	ldrb	r3, [r3, #3]
 8002e34:	3b01      	subs	r3, #1
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	4b3d      	ldr	r3, [pc, #244]	@ (8002f30 <ip_screen_func+0x2d4>)
 8002e3a:	70da      	strb	r2, [r3, #3]
			if(m_cfg.cursor<=0){
 8002e3c:	4b3c      	ldr	r3, [pc, #240]	@ (8002f30 <ip_screen_func+0x2d4>)
 8002e3e:	78db      	ldrb	r3, [r3, #3]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10a      	bne.n	8002e5a <ip_screen_func+0x1fe>
				m_cfg.cursor = 15;
 8002e44:	4b3a      	ldr	r3, [pc, #232]	@ (8002f30 <ip_screen_func+0x2d4>)
 8002e46:	220f      	movs	r2, #15
 8002e48:	70da      	strb	r2, [r3, #3]
				m_cfg.ip_idx = 3;
 8002e4a:	4b39      	ldr	r3, [pc, #228]	@ (8002f30 <ip_screen_func+0x2d4>)
 8002e4c:	2203      	movs	r2, #3
 8002e4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
				m_cfg.ip_digit=2;
 8002e52:	4b37      	ldr	r3, [pc, #220]	@ (8002f30 <ip_screen_func+0x2d4>)
 8002e54:	2202      	movs	r2, #2
 8002e56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}
			m_cfg.ip_digit--;
 8002e5a:	4b35      	ldr	r3, [pc, #212]	@ (8002f30 <ip_screen_func+0x2d4>)
 8002e5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e60:	3b01      	subs	r3, #1
 8002e62:	b2da      	uxtb	r2, r3
 8002e64:	4b32      	ldr	r3, [pc, #200]	@ (8002f30 <ip_screen_func+0x2d4>)
 8002e66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			if(m_cfg.cursor%4 == 0){
 8002e6a:	4b31      	ldr	r3, [pc, #196]	@ (8002f30 <ip_screen_func+0x2d4>)
 8002e6c:	78db      	ldrb	r3, [r3, #3]
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f040 80dd 	bne.w	8003034 <ip_screen_func+0x3d8>
				m_cfg.cursor--;
 8002e7a:	4b2d      	ldr	r3, [pc, #180]	@ (8002f30 <ip_screen_func+0x2d4>)
 8002e7c:	78db      	ldrb	r3, [r3, #3]
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	4b2b      	ldr	r3, [pc, #172]	@ (8002f30 <ip_screen_func+0x2d4>)
 8002e84:	70da      	strb	r2, [r3, #3]
				m_cfg.ip_idx--;
 8002e86:	4b2a      	ldr	r3, [pc, #168]	@ (8002f30 <ip_screen_func+0x2d4>)
 8002e88:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	4b27      	ldr	r3, [pc, #156]	@ (8002f30 <ip_screen_func+0x2d4>)
 8002e92:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
				m_cfg.ip_digit=2;
 8002e96:	4b26      	ldr	r3, [pc, #152]	@ (8002f30 <ip_screen_func+0x2d4>)
 8002e98:	2202      	movs	r2, #2
 8002e9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}
			break;
 8002e9e:	e0c9      	b.n	8003034 <ip_screen_func+0x3d8>
		case eKey_CursorDown:
			if(m_cfg.set_mode == 0){
 8002ea0:	4b23      	ldr	r3, [pc, #140]	@ (8002f30 <ip_screen_func+0x2d4>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d102      	bne.n	8002eae <ip_screen_func+0x252>
				return ret_sc;
 8002ea8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002eac:	e0d5      	b.n	800305a <ip_screen_func+0x3fe>
			}
			m_cfg.cursor++;
 8002eae:	4b20      	ldr	r3, [pc, #128]	@ (8002f30 <ip_screen_func+0x2d4>)
 8002eb0:	78db      	ldrb	r3, [r3, #3]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	4b1e      	ldr	r3, [pc, #120]	@ (8002f30 <ip_screen_func+0x2d4>)
 8002eb8:	70da      	strb	r2, [r3, #3]
			if(m_cfg.cursor>=15){
 8002eba:	4b1d      	ldr	r3, [pc, #116]	@ (8002f30 <ip_screen_func+0x2d4>)
 8002ebc:	78db      	ldrb	r3, [r3, #3]
 8002ebe:	2b0e      	cmp	r3, #14
 8002ec0:	d90a      	bls.n	8002ed8 <ip_screen_func+0x27c>
				m_cfg.cursor = 1;
 8002ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8002f30 <ip_screen_func+0x2d4>)
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	70da      	strb	r2, [r3, #3]
				m_cfg.ip_idx = 0;
 8002ec8:	4b19      	ldr	r3, [pc, #100]	@ (8002f30 <ip_screen_func+0x2d4>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
				m_cfg.ip_digit =0;
 8002ed0:	4b17      	ldr	r3, [pc, #92]	@ (8002f30 <ip_screen_func+0x2d4>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}
			m_cfg.ip_digit++;
 8002ed8:	4b15      	ldr	r3, [pc, #84]	@ (8002f30 <ip_screen_func+0x2d4>)
 8002eda:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002ede:	3301      	adds	r3, #1
 8002ee0:	b2da      	uxtb	r2, r3
 8002ee2:	4b13      	ldr	r3, [pc, #76]	@ (8002f30 <ip_screen_func+0x2d4>)
 8002ee4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			if(m_cfg.cursor%4 == 0){
 8002ee8:	4b11      	ldr	r3, [pc, #68]	@ (8002f30 <ip_screen_func+0x2d4>)
 8002eea:	78db      	ldrb	r3, [r3, #3]
 8002eec:	f003 0303 	and.w	r3, r3, #3
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f040 80a0 	bne.w	8003038 <ip_screen_func+0x3dc>
				m_cfg.cursor++;
 8002ef8:	4b0d      	ldr	r3, [pc, #52]	@ (8002f30 <ip_screen_func+0x2d4>)
 8002efa:	78db      	ldrb	r3, [r3, #3]
 8002efc:	3301      	adds	r3, #1
 8002efe:	b2da      	uxtb	r2, r3
 8002f00:	4b0b      	ldr	r3, [pc, #44]	@ (8002f30 <ip_screen_func+0x2d4>)
 8002f02:	70da      	strb	r2, [r3, #3]
				m_cfg.ip_idx++;
 8002f04:	4b0a      	ldr	r3, [pc, #40]	@ (8002f30 <ip_screen_func+0x2d4>)
 8002f06:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	b2da      	uxtb	r2, r3
 8002f0e:	4b08      	ldr	r3, [pc, #32]	@ (8002f30 <ip_screen_func+0x2d4>)
 8002f10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
				m_cfg.ip_digit = 0;
 8002f14:	4b06      	ldr	r3, [pc, #24]	@ (8002f30 <ip_screen_func+0x2d4>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}
			break;
 8002f1c:	e08c      	b.n	8003038 <ip_screen_func+0x3dc>
		case eKey_Enter:
			if(m_cfg.set_mode){
 8002f1e:	4b04      	ldr	r3, [pc, #16]	@ (8002f30 <ip_screen_func+0x2d4>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d03c      	beq.n	8002fa0 <ip_screen_func+0x344>
				LCD_DISP_ON();	// Cursor off
 8002f26:	f7fe fe09 	bl	8001b3c <LCD_DISP_ON>
				for(i = 0; i < 4; i++){
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f2e:	e021      	b.n	8002f74 <ip_screen_func+0x318>
 8002f30:	20000be4 	.word	0x20000be4
 8002f34:	20000c1b 	.word	0x20000c1b
 8002f38:	20000c1e 	.word	0x20000c1e
 8002f3c:	20000c21 	.word	0x20000c21
 8002f40:	20000c24 	.word	0x20000c24
 8002f44:	08009f08 	.word	0x08009f08
					load_cfg.ether.ipaddr[i] = combine_array(m_cfg.ipaddr[i]);
 8002f48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	4413      	add	r3, r2
 8002f50:	3330      	adds	r3, #48	@ 0x30
 8002f52:	4a44      	ldr	r2, [pc, #272]	@ (8003064 <ip_screen_func+0x408>)
 8002f54:	4413      	add	r3, r2
 8002f56:	3307      	adds	r3, #7
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff f987 	bl	800226c <combine_array>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	b2d9      	uxtb	r1, r3
 8002f62:	4a41      	ldr	r2, [pc, #260]	@ (8003068 <ip_screen_func+0x40c>)
 8002f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f66:	4413      	add	r3, r2
 8002f68:	332f      	adds	r3, #47	@ 0x2f
 8002f6a:	460a      	mov	r2, r1
 8002f6c:	701a      	strb	r2, [r3, #0]
				for(i = 0; i < 4; i++){
 8002f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f70:	3301      	adds	r3, #1
 8002f72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f76:	2b03      	cmp	r3, #3
 8002f78:	dde6      	ble.n	8002f48 <ip_screen_func+0x2ec>
				}
				ret_sc = save_data();
 8002f7a:	f7ff fc53 	bl	8002824 <save_data>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				m_cfg.set_mode = 0;
 8002f84:	4b37      	ldr	r3, [pc, #220]	@ (8003064 <ip_screen_func+0x408>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	701a      	strb	r2, [r3, #0]
				if(ret_sc == eERROR_SC){
 8002f8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002f8e:	2b10      	cmp	r3, #16
 8002f90:	d102      	bne.n	8002f98 <ip_screen_func+0x33c>
					return ret_sc;
 8002f92:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002f96:	e060      	b.n	800305a <ip_screen_func+0x3fe>
				}
				ret_sc = eETH_PORT_SC;
 8002f98:	2308      	movs	r3, #8
 8002f9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				//push_event0(EVT_Remote_Ether);
				m_cfg.remote_mode = eREMOTE_ETHER;
				ret_sc = eREMOTE_SC;
				run_remote_mode();
			}
			break;			
 8002f9e:	e04e      	b.n	800303e <ip_screen_func+0x3e2>
				m_cfg.remote_mode = eREMOTE_ETHER;
 8002fa0:	4b30      	ldr	r3, [pc, #192]	@ (8003064 <ip_screen_func+0x408>)
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	705a      	strb	r2, [r3, #1]
				ret_sc = eREMOTE_SC;
 8002fa6:	230a      	movs	r3, #10
 8002fa8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				run_remote_mode();
 8002fac:	f7ff fc54 	bl	8002858 <run_remote_mode>
			break;			
 8002fb0:	e045      	b.n	800303e <ip_screen_func+0x3e2>
		case eKey_SetMode:
			m_cfg.digit_num = 2;
 8002fb2:	4b2c      	ldr	r3, [pc, #176]	@ (8003064 <ip_screen_func+0x408>)
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	725a      	strb	r2, [r3, #9]
			for(i = 0; i < 4; i++){
 8002fb8:	2300      	movs	r3, #0
 8002fba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fbc:	e013      	b.n	8002fe6 <ip_screen_func+0x38a>
				split_num(load_cfg.ether.ipaddr[i], m_cfg.ipaddr[i]);
 8002fbe:	4a2a      	ldr	r2, [pc, #168]	@ (8003068 <ip_screen_func+0x40c>)
 8002fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fc2:	4413      	add	r3, r2
 8002fc4:	332f      	adds	r3, #47	@ 0x2f
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002fcc:	4613      	mov	r3, r2
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	4413      	add	r3, r2
 8002fd2:	3330      	adds	r3, #48	@ 0x30
 8002fd4:	4a23      	ldr	r2, [pc, #140]	@ (8003064 <ip_screen_func+0x408>)
 8002fd6:	4413      	add	r3, r2
 8002fd8:	3307      	adds	r3, #7
 8002fda:	4619      	mov	r1, r3
 8002fdc:	f7ff f900 	bl	80021e0 <split_num>
			for(i = 0; i < 4; i++){
 8002fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fe8:	2b03      	cmp	r3, #3
 8002fea:	dde8      	ble.n	8002fbe <ip_screen_func+0x362>
			}
			m_cfg.cursor = 15;
 8002fec:	4b1d      	ldr	r3, [pc, #116]	@ (8003064 <ip_screen_func+0x408>)
 8002fee:	220f      	movs	r2, #15
 8002ff0:	70da      	strb	r2, [r3, #3]
			m_cfg.ip_idx = 3;
 8002ff2:	4b1c      	ldr	r3, [pc, #112]	@ (8003064 <ip_screen_func+0x408>)
 8002ff4:	2203      	movs	r2, #3
 8002ff6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
			m_cfg.ip_digit = 2;
 8002ffa:	4b1a      	ldr	r3, [pc, #104]	@ (8003064 <ip_screen_func+0x408>)
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			m_cfg.set_mode = 1;
 8003002:	4b18      	ldr	r3, [pc, #96]	@ (8003064 <ip_screen_func+0x408>)
 8003004:	2201      	movs	r2, #1
 8003006:	701a      	strb	r2, [r3, #0]
			LCD_LOCATE(2, m_cfg.cursor);
 8003008:	4b16      	ldr	r3, [pc, #88]	@ (8003064 <ip_screen_func+0x408>)
 800300a:	78db      	ldrb	r3, [r3, #3]
 800300c:	4619      	mov	r1, r3
 800300e:	2002      	movs	r0, #2
 8003010:	f7fe fda2 	bl	8001b58 <LCD_LOCATE>
			LCD_DISP_CURSOR();  // Cursor on		
 8003014:	f7fe fd99 	bl	8001b4a <LCD_DISP_CURSOR>
			draw_title(eIP_Set);			
 8003018:	2007      	movs	r0, #7
 800301a:	f7fe febf 	bl	8001d9c <draw_title>
			break;
 800301e:	e00e      	b.n	800303e <ip_screen_func+0x3e2>
		case eKey_Mode:
		case eKey_Idle:
			if(m_cfg.set_mode == 0){
 8003020:	4b10      	ldr	r3, [pc, #64]	@ (8003064 <ip_screen_func+0x408>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d109      	bne.n	800303c <ip_screen_func+0x3e0>
				draw_title(eIP_Set);
 8003028:	2007      	movs	r0, #7
 800302a:	f7fe feb7 	bl	8001d9c <draw_title>
			}
			break;
 800302e:	e005      	b.n	800303c <ip_screen_func+0x3e0>
		default:
			break;
 8003030:	bf00      	nop
 8003032:	e004      	b.n	800303e <ip_screen_func+0x3e2>
			break;
 8003034:	bf00      	nop
 8003036:	e002      	b.n	800303e <ip_screen_func+0x3e2>
			break;
 8003038:	bf00      	nop
 800303a:	e000      	b.n	800303e <ip_screen_func+0x3e2>
			break;
 800303c:	bf00      	nop
	}

	if(m_cfg.cursor != old_cursor){
 800303e:	4b09      	ldr	r3, [pc, #36]	@ (8003064 <ip_screen_func+0x408>)
 8003040:	78db      	ldrb	r3, [r3, #3]
 8003042:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003046:	429a      	cmp	r2, r3
 8003048:	d005      	beq.n	8003056 <ip_screen_func+0x3fa>
		LCD_LOCATE(2, m_cfg.cursor);
 800304a:	4b06      	ldr	r3, [pc, #24]	@ (8003064 <ip_screen_func+0x408>)
 800304c:	78db      	ldrb	r3, [r3, #3]
 800304e:	4619      	mov	r1, r3
 8003050:	2002      	movs	r0, #2
 8003052:	f7fe fd81 	bl	8001b58 <LCD_LOCATE>
	}
	return ret_sc;
 8003056:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800305a:	4618      	mov	r0, r3
 800305c:	3734      	adds	r7, #52	@ 0x34
 800305e:	46bd      	mov	sp, r7
 8003060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003062:	bf00      	nop
 8003064:	20000be4 	.word	0x20000be4
 8003068:	20000c30 	.word	0x20000c30

0800306c <port_screen_func>:

ScreenID_t port_screen_func(Screen_param_t param)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b08c      	sub	sp, #48	@ 0x30
 8003070:	af00      	add	r7, sp, #0
 8003072:	463b      	mov	r3, r7
 8003074:	e883 0003 	stmia.w	r3, {r0, r1}
	ScreenID_t ret_sc = param.sc_id;
 8003078:	783b      	ldrb	r3, [r7, #0]
 800307a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t old_cursor = m_cfg.cursor;
 800307e:	4bb7      	ldr	r3, [pc, #732]	@ (800335c <port_screen_func+0x2f0>)
 8003080:	78db      	ldrb	r3, [r3, #3]
 8003082:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	int8_t temp_port[5];
	char line_buf[LCD_PRINT_MAX];
	int	new_port, direction = 1;
 8003086:	2301      	movs	r3, #1
 8003088:	627b      	str	r3, [r7, #36]	@ 0x24
	
	switch(param.key){
 800308a:	887b      	ldrh	r3, [r7, #2]
 800308c:	2b10      	cmp	r3, #16
 800308e:	f200 8177 	bhi.w	8003380 <port_screen_func+0x314>
 8003092:	a201      	add	r2, pc, #4	@ (adr r2, 8003098 <port_screen_func+0x2c>)
 8003094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003098:	08003371 	.word	0x08003371
 800309c:	080032d5 	.word	0x080032d5
 80030a0:	080030dd 	.word	0x080030dd
 80030a4:	08003381 	.word	0x08003381
 80030a8:	080030dd 	.word	0x080030dd
 80030ac:	08003381 	.word	0x08003381
 80030b0:	08003381 	.word	0x08003381
 80030b4:	08003381 	.word	0x08003381
 80030b8:	08003371 	.word	0x08003371
 80030bc:	08003381 	.word	0x08003381
 80030c0:	0800324d 	.word	0x0800324d
 80030c4:	08003381 	.word	0x08003381
 80030c8:	08003291 	.word	0x08003291
 80030cc:	08003381 	.word	0x08003381
 80030d0:	08003381 	.word	0x08003381
 80030d4:	08003381 	.word	0x08003381
 80030d8:	08003321 	.word	0x08003321
		case eKey_Up:
		case eKey_Down:
			if(m_cfg.set_mode == 0){
 80030dc:	4b9f      	ldr	r3, [pc, #636]	@ (800335c <port_screen_func+0x2f0>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d102      	bne.n	80030ea <port_screen_func+0x7e>
				return ret_sc;
 80030e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80030e8:	e158      	b.n	800339c <port_screen_func+0x330>
			}
			memcpy(temp_port, m_cfg.port, 5);
 80030ea:	4a9c      	ldr	r2, [pc, #624]	@ (800335c <port_screen_func+0x2f0>)
 80030ec:	f107 031c 	add.w	r3, r7, #28
 80030f0:	3245      	adds	r2, #69	@ 0x45
 80030f2:	6810      	ldr	r0, [r2, #0]
 80030f4:	6018      	str	r0, [r3, #0]
 80030f6:	7912      	ldrb	r2, [r2, #4]
 80030f8:	711a      	strb	r2, [r3, #4]

			if(param.key == eKey_Up){
 80030fa:	887b      	ldrh	r3, [r7, #2]
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d11b      	bne.n	8003138 <port_screen_func+0xcc>
				temp_port[m_cfg.ip_digit] = (temp_port[m_cfg.ip_digit]+1)%10;
 8003100:	4b96      	ldr	r3, [pc, #600]	@ (800335c <port_screen_func+0x2f0>)
 8003102:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003106:	3330      	adds	r3, #48	@ 0x30
 8003108:	443b      	add	r3, r7
 800310a:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800310e:	1c5a      	adds	r2, r3, #1
 8003110:	4b93      	ldr	r3, [pc, #588]	@ (8003360 <port_screen_func+0x2f4>)
 8003112:	fb83 1302 	smull	r1, r3, r3, r2
 8003116:	1099      	asrs	r1, r3, #2
 8003118:	17d3      	asrs	r3, r2, #31
 800311a:	1ac9      	subs	r1, r1, r3
 800311c:	460b      	mov	r3, r1
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	1ad1      	subs	r1, r2, r3
 8003126:	4b8d      	ldr	r3, [pc, #564]	@ (800335c <port_screen_func+0x2f0>)
 8003128:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800312c:	b24a      	sxtb	r2, r1
 800312e:	3330      	adds	r3, #48	@ 0x30
 8003130:	443b      	add	r3, r7
 8003132:	f803 2c14 	strb.w	r2, [r3, #-20]
 8003136:	e01e      	b.n	8003176 <port_screen_func+0x10a>
			}else{
				temp_port[m_cfg.ip_digit] = (temp_port[m_cfg.ip_digit]-1+10)%10;
 8003138:	4b88      	ldr	r3, [pc, #544]	@ (800335c <port_screen_func+0x2f0>)
 800313a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800313e:	3330      	adds	r3, #48	@ 0x30
 8003140:	443b      	add	r3, r7
 8003142:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8003146:	f103 0209 	add.w	r2, r3, #9
 800314a:	4b85      	ldr	r3, [pc, #532]	@ (8003360 <port_screen_func+0x2f4>)
 800314c:	fb83 1302 	smull	r1, r3, r3, r2
 8003150:	1099      	asrs	r1, r3, #2
 8003152:	17d3      	asrs	r3, r2, #31
 8003154:	1ac9      	subs	r1, r1, r3
 8003156:	460b      	mov	r3, r1
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	440b      	add	r3, r1
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	1ad1      	subs	r1, r2, r3
 8003160:	4b7e      	ldr	r3, [pc, #504]	@ (800335c <port_screen_func+0x2f0>)
 8003162:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003166:	b24a      	sxtb	r2, r1
 8003168:	3330      	adds	r3, #48	@ 0x30
 800316a:	443b      	add	r3, r7
 800316c:	f803 2c14 	strb.w	r2, [r3, #-20]
				direction = -1;
 8003170:	f04f 33ff 	mov.w	r3, #4294967295
 8003174:	627b      	str	r3, [r7, #36]	@ 0x24
			}

			new_port = combine_array(temp_port);
 8003176:	f107 031c 	add.w	r3, r7, #28
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff f876 	bl	800226c <combine_array>
 8003180:	62b8      	str	r0, [r7, #40]	@ 0x28
//			LOG_DBG("New port[%05d] digit[%d] Value[%d]", new_port, m_cfg.ip_digit, temp_port[m_cfg.ip_digit]);
			while((new_port < MIN_PORT)||(new_port > MAX_PORT)){
 8003182:	e03c      	b.n	80031fe <port_screen_func+0x192>
				temp_port[m_cfg.ip_digit] = temp_port[m_cfg.ip_digit] + direction;
 8003184:	4b75      	ldr	r3, [pc, #468]	@ (800335c <port_screen_func+0x2f0>)
 8003186:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800318a:	3330      	adds	r3, #48	@ 0x30
 800318c:	443b      	add	r3, r7
 800318e:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8003192:	b2da      	uxtb	r2, r3
 8003194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003196:	b2db      	uxtb	r3, r3
 8003198:	4413      	add	r3, r2
 800319a:	b2da      	uxtb	r2, r3
 800319c:	4b6f      	ldr	r3, [pc, #444]	@ (800335c <port_screen_func+0x2f0>)
 800319e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80031a2:	b252      	sxtb	r2, r2
 80031a4:	3330      	adds	r3, #48	@ 0x30
 80031a6:	443b      	add	r3, r7
 80031a8:	f803 2c14 	strb.w	r2, [r3, #-20]
				if(temp_port[m_cfg.ip_digit] > 9){
 80031ac:	4b6b      	ldr	r3, [pc, #428]	@ (800335c <port_screen_func+0x2f0>)
 80031ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80031b2:	3330      	adds	r3, #48	@ 0x30
 80031b4:	443b      	add	r3, r7
 80031b6:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80031ba:	2b09      	cmp	r3, #9
 80031bc:	dd08      	ble.n	80031d0 <port_screen_func+0x164>
					temp_port[m_cfg.ip_digit] = 0;
 80031be:	4b67      	ldr	r3, [pc, #412]	@ (800335c <port_screen_func+0x2f0>)
 80031c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80031c4:	3330      	adds	r3, #48	@ 0x30
 80031c6:	443b      	add	r3, r7
 80031c8:	2200      	movs	r2, #0
 80031ca:	f803 2c14 	strb.w	r2, [r3, #-20]
 80031ce:	e010      	b.n	80031f2 <port_screen_func+0x186>
				}else if(temp_port[m_cfg.ip_digit] < 0){
 80031d0:	4b62      	ldr	r3, [pc, #392]	@ (800335c <port_screen_func+0x2f0>)
 80031d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80031d6:	3330      	adds	r3, #48	@ 0x30
 80031d8:	443b      	add	r3, r7
 80031da:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	da07      	bge.n	80031f2 <port_screen_func+0x186>
					temp_port[m_cfg.ip_digit] = 9;
 80031e2:	4b5e      	ldr	r3, [pc, #376]	@ (800335c <port_screen_func+0x2f0>)
 80031e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80031e8:	3330      	adds	r3, #48	@ 0x30
 80031ea:	443b      	add	r3, r7
 80031ec:	2209      	movs	r2, #9
 80031ee:	f803 2c14 	strb.w	r2, [r3, #-20]
				}
				new_port = combine_array(temp_port);
 80031f2:	f107 031c 	add.w	r3, r7, #28
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff f838 	bl	800226c <combine_array>
 80031fc:	62b8      	str	r0, [r7, #40]	@ 0x28
			while((new_port < MIN_PORT)||(new_port > MAX_PORT)){
 80031fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003200:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003204:	dbbe      	blt.n	8003184 <port_screen_func+0x118>
 8003206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800320c:	dcba      	bgt.n	8003184 <port_screen_func+0x118>
			}

			memcpy(m_cfg.port, temp_port, 5);
 800320e:	4b53      	ldr	r3, [pc, #332]	@ (800335c <port_screen_func+0x2f0>)
 8003210:	3345      	adds	r3, #69	@ 0x45
 8003212:	f107 021c 	add.w	r2, r7, #28
 8003216:	6810      	ldr	r0, [r2, #0]
 8003218:	6018      	str	r0, [r3, #0]
 800321a:	7912      	ldrb	r2, [r2, #4]
 800321c:	711a      	strb	r2, [r3, #4]
			sprintf(line_buf, "Port : %05d    \n", new_port);
 800321e:	f107 0308 	add.w	r3, r7, #8
 8003222:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003224:	494f      	ldr	r1, [pc, #316]	@ (8003364 <port_screen_func+0x2f8>)
 8003226:	4618      	mov	r0, r3
 8003228:	f005 fd16 	bl	8008c58 <siprintf>
			LCD_LOCATE(2,1);
 800322c:	2101      	movs	r1, #1
 800322e:	2002      	movs	r0, #2
 8003230:	f7fe fc92 	bl	8001b58 <LCD_LOCATE>
			LCD_printstring(line_buf);
 8003234:	f107 0308 	add.w	r3, r7, #8
 8003238:	4618      	mov	r0, r3
 800323a:	f7fe fc61 	bl	8001b00 <LCD_printstring>
			LCD_LOCATE(2,m_cfg.cursor);
 800323e:	4b47      	ldr	r3, [pc, #284]	@ (800335c <port_screen_func+0x2f0>)
 8003240:	78db      	ldrb	r3, [r3, #3]
 8003242:	4619      	mov	r1, r3
 8003244:	2002      	movs	r0, #2
 8003246:	f7fe fc87 	bl	8001b58 <LCD_LOCATE>
			break;
 800324a:	e099      	b.n	8003380 <port_screen_func+0x314>
		case eKey_CursorUp:
			if(m_cfg.set_mode == 0){
 800324c:	4b43      	ldr	r3, [pc, #268]	@ (800335c <port_screen_func+0x2f0>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d102      	bne.n	800325a <port_screen_func+0x1ee>
				return ret_sc;
 8003254:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003258:	e0a0      	b.n	800339c <port_screen_func+0x330>
			}
			m_cfg.cursor--;
 800325a:	4b40      	ldr	r3, [pc, #256]	@ (800335c <port_screen_func+0x2f0>)
 800325c:	78db      	ldrb	r3, [r3, #3]
 800325e:	3b01      	subs	r3, #1
 8003260:	b2da      	uxtb	r2, r3
 8003262:	4b3e      	ldr	r3, [pc, #248]	@ (800335c <port_screen_func+0x2f0>)
 8003264:	70da      	strb	r2, [r3, #3]
			if(m_cfg.cursor<8){
 8003266:	4b3d      	ldr	r3, [pc, #244]	@ (800335c <port_screen_func+0x2f0>)
 8003268:	78db      	ldrb	r3, [r3, #3]
 800326a:	2b07      	cmp	r3, #7
 800326c:	d807      	bhi.n	800327e <port_screen_func+0x212>
				m_cfg.cursor = 12;
 800326e:	4b3b      	ldr	r3, [pc, #236]	@ (800335c <port_screen_func+0x2f0>)
 8003270:	220c      	movs	r2, #12
 8003272:	70da      	strb	r2, [r3, #3]
				m_cfg.ip_digit=4;
 8003274:	4b39      	ldr	r3, [pc, #228]	@ (800335c <port_screen_func+0x2f0>)
 8003276:	2204      	movs	r2, #4
 8003278:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}else{
				m_cfg.ip_digit--;
			}
			break;
 800327c:	e080      	b.n	8003380 <port_screen_func+0x314>
				m_cfg.ip_digit--;
 800327e:	4b37      	ldr	r3, [pc, #220]	@ (800335c <port_screen_func+0x2f0>)
 8003280:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003284:	3b01      	subs	r3, #1
 8003286:	b2da      	uxtb	r2, r3
 8003288:	4b34      	ldr	r3, [pc, #208]	@ (800335c <port_screen_func+0x2f0>)
 800328a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			break;
 800328e:	e077      	b.n	8003380 <port_screen_func+0x314>
		case eKey_CursorDown:
			if(m_cfg.set_mode == 0){
 8003290:	4b32      	ldr	r3, [pc, #200]	@ (800335c <port_screen_func+0x2f0>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d102      	bne.n	800329e <port_screen_func+0x232>
				return ret_sc;
 8003298:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800329c:	e07e      	b.n	800339c <port_screen_func+0x330>
			}
			m_cfg.cursor++;
 800329e:	4b2f      	ldr	r3, [pc, #188]	@ (800335c <port_screen_func+0x2f0>)
 80032a0:	78db      	ldrb	r3, [r3, #3]
 80032a2:	3301      	adds	r3, #1
 80032a4:	b2da      	uxtb	r2, r3
 80032a6:	4b2d      	ldr	r3, [pc, #180]	@ (800335c <port_screen_func+0x2f0>)
 80032a8:	70da      	strb	r2, [r3, #3]
			if(m_cfg.cursor>12){
 80032aa:	4b2c      	ldr	r3, [pc, #176]	@ (800335c <port_screen_func+0x2f0>)
 80032ac:	78db      	ldrb	r3, [r3, #3]
 80032ae:	2b0c      	cmp	r3, #12
 80032b0:	d907      	bls.n	80032c2 <port_screen_func+0x256>
				m_cfg.cursor = 8;
 80032b2:	4b2a      	ldr	r3, [pc, #168]	@ (800335c <port_screen_func+0x2f0>)
 80032b4:	2208      	movs	r2, #8
 80032b6:	70da      	strb	r2, [r3, #3]
				m_cfg.ip_digit =0;
 80032b8:	4b28      	ldr	r3, [pc, #160]	@ (800335c <port_screen_func+0x2f0>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}else{
				m_cfg.ip_digit++;
			}
			break;
 80032c0:	e05e      	b.n	8003380 <port_screen_func+0x314>
				m_cfg.ip_digit++;
 80032c2:	4b26      	ldr	r3, [pc, #152]	@ (800335c <port_screen_func+0x2f0>)
 80032c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80032c8:	3301      	adds	r3, #1
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	4b23      	ldr	r3, [pc, #140]	@ (800335c <port_screen_func+0x2f0>)
 80032ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			break;
 80032d2:	e055      	b.n	8003380 <port_screen_func+0x314>
		case eKey_Enter:
			if(m_cfg.set_mode){
 80032d4:	4b21      	ldr	r3, [pc, #132]	@ (800335c <port_screen_func+0x2f0>)
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d018      	beq.n	800330e <port_screen_func+0x2a2>
				LCD_DISP_ON();	// Cursor off
 80032dc:	f7fe fc2e 	bl	8001b3c <LCD_DISP_ON>
				load_cfg.ether.port = combine_array(m_cfg.port);
 80032e0:	4821      	ldr	r0, [pc, #132]	@ (8003368 <port_screen_func+0x2fc>)
 80032e2:	f7fe ffc3 	bl	800226c <combine_array>
 80032e6:	4603      	mov	r3, r0
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	4b20      	ldr	r3, [pc, #128]	@ (800336c <port_screen_func+0x300>)
 80032ec:	f8a3 2033 	strh.w	r2, [r3, #51]	@ 0x33
				m_cfg.set_mode = 0;
 80032f0:	4b1a      	ldr	r3, [pc, #104]	@ (800335c <port_screen_func+0x2f0>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	701a      	strb	r2, [r3, #0]
				ret_sc = save_data();
 80032f6:	f7ff fa95 	bl	8002824 <save_data>
 80032fa:	4603      	mov	r3, r0
 80032fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if(ret_sc == eERROR_SC){
 8003300:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003304:	2b10      	cmp	r3, #16
 8003306:	d102      	bne.n	800330e <port_screen_func+0x2a2>
					return ret_sc;
 8003308:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800330c:	e046      	b.n	800339c <port_screen_func+0x330>
				}
			}

			m_cfg.remote_mode = eREMOTE_ETHER;
 800330e:	4b13      	ldr	r3, [pc, #76]	@ (800335c <port_screen_func+0x2f0>)
 8003310:	2202      	movs	r2, #2
 8003312:	705a      	strb	r2, [r3, #1]
			ret_sc = eREMOTE_SC;
 8003314:	230a      	movs	r3, #10
 8003316:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			run_remote_mode();
 800331a:	f7ff fa9d 	bl	8002858 <run_remote_mode>
			break;
 800331e:	e02f      	b.n	8003380 <port_screen_func+0x314>
		case eKey_SetMode:
			m_cfg.set_mode = 1;
 8003320:	4b0e      	ldr	r3, [pc, #56]	@ (800335c <port_screen_func+0x2f0>)
 8003322:	2201      	movs	r2, #1
 8003324:	701a      	strb	r2, [r3, #0]
			m_cfg.cursor = 12;
 8003326:	4b0d      	ldr	r3, [pc, #52]	@ (800335c <port_screen_func+0x2f0>)
 8003328:	220c      	movs	r2, #12
 800332a:	70da      	strb	r2, [r3, #3]
			m_cfg.digit_num = 4;
 800332c:	4b0b      	ldr	r3, [pc, #44]	@ (800335c <port_screen_func+0x2f0>)
 800332e:	2204      	movs	r2, #4
 8003330:	725a      	strb	r2, [r3, #9]
			m_cfg.ip_digit = 4;
 8003332:	4b0a      	ldr	r3, [pc, #40]	@ (800335c <port_screen_func+0x2f0>)
 8003334:	2204      	movs	r2, #4
 8003336:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			split_num(load_cfg.ether.port, m_cfg.port);
 800333a:	4b0c      	ldr	r3, [pc, #48]	@ (800336c <port_screen_func+0x300>)
 800333c:	f8b3 3033 	ldrh.w	r3, [r3, #51]	@ 0x33
 8003340:	b29b      	uxth	r3, r3
 8003342:	4909      	ldr	r1, [pc, #36]	@ (8003368 <port_screen_func+0x2fc>)
 8003344:	4618      	mov	r0, r3
 8003346:	f7fe ff4b 	bl	80021e0 <split_num>
			LCD_LOCATE(2, m_cfg.cursor);
 800334a:	4b04      	ldr	r3, [pc, #16]	@ (800335c <port_screen_func+0x2f0>)
 800334c:	78db      	ldrb	r3, [r3, #3]
 800334e:	4619      	mov	r1, r3
 8003350:	2002      	movs	r0, #2
 8003352:	f7fe fc01 	bl	8001b58 <LCD_LOCATE>
			LCD_DISP_CURSOR();  // Cursor on		
 8003356:	f7fe fbf8 	bl	8001b4a <LCD_DISP_CURSOR>
			//draw_title(ePORT_Set);
			break;
 800335a:	e011      	b.n	8003380 <port_screen_func+0x314>
 800335c:	20000be4 	.word	0x20000be4
 8003360:	66666667 	.word	0x66666667
 8003364:	08009f20 	.word	0x08009f20
 8003368:	20000c29 	.word	0x20000c29
 800336c:	20000c30 	.word	0x20000c30
		case eKey_Mode:
		case eKey_Idle:
			if(m_cfg.set_mode == 0){
 8003370:	4b0c      	ldr	r3, [pc, #48]	@ (80033a4 <port_screen_func+0x338>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d102      	bne.n	800337e <port_screen_func+0x312>
				draw_title(ePORT_Set);
 8003378:	2008      	movs	r0, #8
 800337a:	f7fe fd0f 	bl	8001d9c <draw_title>
			}
			break;
 800337e:	bf00      	nop
	}
	
	if(m_cfg.cursor != old_cursor){
 8003380:	4b08      	ldr	r3, [pc, #32]	@ (80033a4 <port_screen_func+0x338>)
 8003382:	78db      	ldrb	r3, [r3, #3]
 8003384:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8003388:	429a      	cmp	r2, r3
 800338a:	d005      	beq.n	8003398 <port_screen_func+0x32c>
		LCD_LOCATE(2, m_cfg.cursor);
 800338c:	4b05      	ldr	r3, [pc, #20]	@ (80033a4 <port_screen_func+0x338>)
 800338e:	78db      	ldrb	r3, [r3, #3]
 8003390:	4619      	mov	r1, r3
 8003392:	2002      	movs	r0, #2
 8003394:	f7fe fbe0 	bl	8001b58 <LCD_LOCATE>
	}	
	return ret_sc;
 8003398:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800339c:	4618      	mov	r0, r3
 800339e:	3730      	adds	r7, #48	@ 0x30
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	20000be4 	.word	0x20000be4

080033a8 <self_test_screen_func>:

ScreenID_t self_test_screen_func(Screen_param_t param)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	463b      	mov	r3, r7
 80033b0:	e883 0003 	stmia.w	r3, {r0, r1}
	ScreenID_t ret_sc = eMAX_SCREEN_ID;
 80033b4:	230f      	movs	r3, #15
 80033b6:	73fb      	strb	r3, [r7, #15]

	switch(param.key){
 80033b8:	887b      	ldrh	r3, [r7, #2]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d005      	beq.n	80033ca <self_test_screen_func+0x22>
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d109      	bne.n	80033d6 <self_test_screen_func+0x2e>
		case eKey_Mode:
			draw_title(eSelf_Test);
 80033c2:	2009      	movs	r0, #9
 80033c4:	f7fe fcea 	bl	8001d9c <draw_title>
			break;
 80033c8:	e005      	b.n	80033d6 <self_test_screen_func+0x2e>
		case eKey_Enter:
			send_cmd_2_backend(eCMD_FR_SelfTest, 0, 0);
 80033ca:	2200      	movs	r2, #0
 80033cc:	2100      	movs	r1, #0
 80033ce:	20c1      	movs	r0, #193	@ 0xc1
 80033d0:	f7fe fc8a 	bl	8001ce8 <send_cmd_2_backend>
			break;
 80033d4:	bf00      	nop
	}
	return ret_sc;
 80033d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <remote_screen_func>:

ScreenID_t remote_screen_func(Screen_param_t param)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	463b      	mov	r3, r7
 80033e8:	e883 0003 	stmia.w	r3, {r0, r1}
	ScreenID_t ret_sc = param.sc_id;
 80033ec:	783b      	ldrb	r3, [r7, #0]
 80033ee:	73fb      	strb	r3, [r7, #15]

	switch(param.key){
 80033f0:	887b      	ldrh	r3, [r7, #2]
 80033f2:	2b20      	cmp	r3, #32
 80033f4:	d006      	beq.n	8003404 <remote_screen_func+0x24>
 80033f6:	2b20      	cmp	r3, #32
 80033f8:	dc10      	bgt.n	800341c <remote_screen_func+0x3c>
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00a      	beq.n	8003414 <remote_screen_func+0x34>
 80033fe:	2b08      	cmp	r3, #8
 8003400:	d008      	beq.n	8003414 <remote_screen_func+0x34>
 8003402:	e00b      	b.n	800341c <remote_screen_func+0x3c>
		case eKey_ExitRemote:
			send_cmd_2_backend(eCMD_CloseRemote, 0, 0);
 8003404:	2200      	movs	r2, #0
 8003406:	2100      	movs	r1, #0
 8003408:	20bb      	movs	r0, #187	@ 0xbb
 800340a:	f7fe fc6d 	bl	8001ce8 <send_cmd_2_backend>
			ret_sc = eCHANNEL_SC;
 800340e:	2301      	movs	r3, #1
 8003410:	73fb      	strb	r3, [r7, #15]
			break;
 8003412:	e003      	b.n	800341c <remote_screen_func+0x3c>
		case eKey_Mode:
		case eKey_Idle:
			draw_title(eRemote_Mode);
 8003414:	200a      	movs	r0, #10
 8003416:	f7fe fcc1 	bl	8001d9c <draw_title>
			break;
 800341a:	bf00      	nop
	}
	
	return ret_sc;
 800341c:	7bfb      	ldrb	r3, [r7, #15]
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
	...

08003428 <findCharIndex>:

static int findCharIndex(char c) {
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	4603      	mov	r3, r0
 8003430:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < CHARSET_LENGTH; i++) {
 8003432:	2300      	movs	r3, #0
 8003434:	60fb      	str	r3, [r7, #12]
 8003436:	e00b      	b.n	8003450 <findCharIndex+0x28>
        if (charSet[i] == c) return i;
 8003438:	4a0a      	ldr	r2, [pc, #40]	@ (8003464 <findCharIndex+0x3c>)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	4413      	add	r3, r2
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	79fa      	ldrb	r2, [r7, #7]
 8003442:	429a      	cmp	r2, r3
 8003444:	d101      	bne.n	800344a <findCharIndex+0x22>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	e006      	b.n	8003458 <findCharIndex+0x30>
    for (int i = 0; i < CHARSET_LENGTH; i++) {
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	3301      	adds	r3, #1
 800344e:	60fb      	str	r3, [r7, #12]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2b40      	cmp	r3, #64	@ 0x40
 8003454:	d9f0      	bls.n	8003438 <findCharIndex+0x10>
    }
    return 0;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	bc80      	pop	{r7}
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	0800a0fc 	.word	0x0800a0fc

08003468 <increaseChar>:

static void increaseChar(char *ch) {
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
    int idx = findCharIndex(*ch);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff ffd7 	bl	8003428 <findCharIndex>
 800347a:	60f8      	str	r0, [r7, #12]

    *ch = charSet[(idx + 1) % CHARSET_LENGTH];
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	3301      	adds	r3, #1
 8003480:	4619      	mov	r1, r3
 8003482:	4b08      	ldr	r3, [pc, #32]	@ (80034a4 <increaseChar+0x3c>)
 8003484:	fba3 2301 	umull	r2, r3, r3, r1
 8003488:	099a      	lsrs	r2, r3, #6
 800348a:	4613      	mov	r3, r2
 800348c:	019b      	lsls	r3, r3, #6
 800348e:	4413      	add	r3, r2
 8003490:	1aca      	subs	r2, r1, r3
 8003492:	4b05      	ldr	r3, [pc, #20]	@ (80034a8 <increaseChar+0x40>)
 8003494:	5c9a      	ldrb	r2, [r3, r2]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	701a      	strb	r2, [r3, #0]
}
 800349a:	bf00      	nop
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	fc0fc0fd 	.word	0xfc0fc0fd
 80034a8:	0800a0fc 	.word	0x0800a0fc

080034ac <user_screen_func>:
    int idx = findCharIndex(*ch);
    *ch = charSet[(idx - 1 + CHARSET_LENGTH) % CHARSET_LENGTH];
}

ScreenID_t user_screen_func(Screen_param_t param)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b088      	sub	sp, #32
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	463b      	mov	r3, r7
 80034b4:	e883 0003 	stmia.w	r3, {r0, r1}
	ScreenID_t ret_sc = param.sc_id;
 80034b8:	783b      	ldrb	r3, [r7, #0]
 80034ba:	77fb      	strb	r3, [r7, #31]
	uint8_t old_cursor = m_cfg.cursor;
 80034bc:	4b47      	ldr	r3, [pc, #284]	@ (80035dc <user_screen_func+0x130>)
 80034be:	78db      	ldrb	r3, [r3, #3]
 80034c0:	77bb      	strb	r3, [r7, #30]
	char line_buf[LCD_PRINT_MAX];

	switch(param.key){
 80034c2:	887b      	ldrh	r3, [r7, #2]
 80034c4:	3b01      	subs	r3, #1
 80034c6:	2b0b      	cmp	r3, #11
 80034c8:	d877      	bhi.n	80035ba <user_screen_func+0x10e>
 80034ca:	a201      	add	r2, pc, #4	@ (adr r2, 80034d0 <user_screen_func+0x24>)
 80034cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d0:	08003579 	.word	0x08003579
 80034d4:	08003501 	.word	0x08003501
 80034d8:	08003595 	.word	0x08003595
 80034dc:	08003501 	.word	0x08003501
 80034e0:	080035bb 	.word	0x080035bb
 80034e4:	080035bb 	.word	0x080035bb
 80034e8:	080035bb 	.word	0x080035bb
 80034ec:	080035bb 	.word	0x080035bb
 80034f0:	080035bb 	.word	0x080035bb
 80034f4:	08003541 	.word	0x08003541
 80034f8:	080035bb 	.word	0x080035bb
 80034fc:	0800355d 	.word	0x0800355d
		case eKey_Up:
		case eKey_Down:
			if(eKey_Up){
				increaseChar((char *)&load_cfg.company[m_cfg.cursor]);
 8003500:	4b36      	ldr	r3, [pc, #216]	@ (80035dc <user_screen_func+0x130>)
 8003502:	78db      	ldrb	r3, [r3, #3]
 8003504:	3330      	adds	r3, #48	@ 0x30
 8003506:	4a36      	ldr	r2, [pc, #216]	@ (80035e0 <user_screen_func+0x134>)
 8003508:	4413      	add	r3, r2
 800350a:	3305      	adds	r3, #5
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff ffab 	bl	8003468 <increaseChar>
			}else{
				decreaseChar((char *)&load_cfg.company[m_cfg.cursor]);
			}
			sprintf(line_buf, "%s\n", load_cfg.company);
 8003512:	f107 0308 	add.w	r3, r7, #8
 8003516:	4a33      	ldr	r2, [pc, #204]	@ (80035e4 <user_screen_func+0x138>)
 8003518:	4933      	ldr	r1, [pc, #204]	@ (80035e8 <user_screen_func+0x13c>)
 800351a:	4618      	mov	r0, r3
 800351c:	f005 fb9c 	bl	8008c58 <siprintf>
			LCD_LOCATE(1,1);
 8003520:	2101      	movs	r1, #1
 8003522:	2001      	movs	r0, #1
 8003524:	f7fe fb18 	bl	8001b58 <LCD_LOCATE>
			LCD_printstring(line_buf);
 8003528:	f107 0308 	add.w	r3, r7, #8
 800352c:	4618      	mov	r0, r3
 800352e:	f7fe fae7 	bl	8001b00 <LCD_printstring>
			LCD_LOCATE(1,m_cfg.cursor);
 8003532:	4b2a      	ldr	r3, [pc, #168]	@ (80035dc <user_screen_func+0x130>)
 8003534:	78db      	ldrb	r3, [r3, #3]
 8003536:	4619      	mov	r1, r3
 8003538:	2001      	movs	r0, #1
 800353a:	f7fe fb0d 	bl	8001b58 <LCD_LOCATE>
			break;
 800353e:	e03c      	b.n	80035ba <user_screen_func+0x10e>
		case eKey_CursorUp:
			m_cfg.cursor = (m_cfg.cursor - 1 + LINE_CHARACTER_MAX) % LINE_CHARACTER_MAX;
 8003540:	4b26      	ldr	r3, [pc, #152]	@ (80035dc <user_screen_func+0x130>)
 8003542:	78db      	ldrb	r3, [r3, #3]
 8003544:	330f      	adds	r3, #15
 8003546:	425a      	negs	r2, r3
 8003548:	f003 030f 	and.w	r3, r3, #15
 800354c:	f002 020f 	and.w	r2, r2, #15
 8003550:	bf58      	it	pl
 8003552:	4253      	negpl	r3, r2
 8003554:	b2da      	uxtb	r2, r3
 8003556:	4b21      	ldr	r3, [pc, #132]	@ (80035dc <user_screen_func+0x130>)
 8003558:	70da      	strb	r2, [r3, #3]
			break;
 800355a:	e02e      	b.n	80035ba <user_screen_func+0x10e>
		case eKey_CursorDown:
			m_cfg.cursor = (m_cfg.cursor + 1 ) % LINE_CHARACTER_MAX;
 800355c:	4b1f      	ldr	r3, [pc, #124]	@ (80035dc <user_screen_func+0x130>)
 800355e:	78db      	ldrb	r3, [r3, #3]
 8003560:	3301      	adds	r3, #1
 8003562:	425a      	negs	r2, r3
 8003564:	f003 030f 	and.w	r3, r3, #15
 8003568:	f002 020f 	and.w	r2, r2, #15
 800356c:	bf58      	it	pl
 800356e:	4253      	negpl	r3, r2
 8003570:	b2da      	uxtb	r2, r3
 8003572:	4b1a      	ldr	r3, [pc, #104]	@ (80035dc <user_screen_func+0x130>)
 8003574:	70da      	strb	r2, [r3, #3]
			break;
 8003576:	e020      	b.n	80035ba <user_screen_func+0x10e>
		case eKey_Enter:
			LCD_DISP_ON();	// Cursor off
 8003578:	f7fe fae0 	bl	8001b3c <LCD_DISP_ON>
			m_cfg.set_mode = 0;
 800357c:	4b17      	ldr	r3, [pc, #92]	@ (80035dc <user_screen_func+0x130>)
 800357e:	2200      	movs	r2, #0
 8003580:	701a      	strb	r2, [r3, #0]
			ret_sc = save_data();
 8003582:	f7ff f94f 	bl	8002824 <save_data>
 8003586:	4603      	mov	r3, r0
 8003588:	77fb      	strb	r3, [r7, #31]
			if(ret_sc == eERROR_SC){
 800358a:	7ffb      	ldrb	r3, [r7, #31]
 800358c:	2b10      	cmp	r3, #16
 800358e:	d113      	bne.n	80035b8 <user_screen_func+0x10c>
				return ret_sc;
 8003590:	7ffb      	ldrb	r3, [r7, #31]
 8003592:	e01e      	b.n	80035d2 <user_screen_func+0x126>
			}
			break;
		case eKey_User:
			m_cfg.set_mode = 1;
 8003594:	4b11      	ldr	r3, [pc, #68]	@ (80035dc <user_screen_func+0x130>)
 8003596:	2201      	movs	r2, #1
 8003598:	701a      	strb	r2, [r3, #0]
			m_cfg.cursor = 2;
 800359a:	4b10      	ldr	r3, [pc, #64]	@ (80035dc <user_screen_func+0x130>)
 800359c:	2202      	movs	r2, #2
 800359e:	70da      	strb	r2, [r3, #3]
			LCD_LOCATE(1, m_cfg.cursor);
 80035a0:	4b0e      	ldr	r3, [pc, #56]	@ (80035dc <user_screen_func+0x130>)
 80035a2:	78db      	ldrb	r3, [r3, #3]
 80035a4:	4619      	mov	r1, r3
 80035a6:	2001      	movs	r0, #1
 80035a8:	f7fe fad6 	bl	8001b58 <LCD_LOCATE>
			LCD_DISP_CURSOR();  // Cursor on
 80035ac:	f7fe facd 	bl	8001b4a <LCD_DISP_CURSOR>
			draw_title(eUSER_Mode);
 80035b0:	200b      	movs	r0, #11
 80035b2:	f7fe fbf3 	bl	8001d9c <draw_title>
			break;
 80035b6:	e000      	b.n	80035ba <user_screen_func+0x10e>
			break;
 80035b8:	bf00      	nop
	}
	if(m_cfg.cursor != old_cursor){
 80035ba:	4b08      	ldr	r3, [pc, #32]	@ (80035dc <user_screen_func+0x130>)
 80035bc:	78db      	ldrb	r3, [r3, #3]
 80035be:	7fba      	ldrb	r2, [r7, #30]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d005      	beq.n	80035d0 <user_screen_func+0x124>
		LCD_LOCATE(1, m_cfg.cursor);
 80035c4:	4b05      	ldr	r3, [pc, #20]	@ (80035dc <user_screen_func+0x130>)
 80035c6:	78db      	ldrb	r3, [r3, #3]
 80035c8:	4619      	mov	r1, r3
 80035ca:	2001      	movs	r0, #1
 80035cc:	f7fe fac4 	bl	8001b58 <LCD_LOCATE>
	}
	return ret_sc;
 80035d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3720      	adds	r7, #32
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	20000be4 	.word	0x20000be4
 80035e0:	20000c30 	.word	0x20000c30
 80035e4:	20000c65 	.word	0x20000c65
 80035e8:	08009d68 	.word	0x08009d68

080035ec <factory_screen_func>:

ScreenID_t factory_screen_func(Screen_param_t param)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	463b      	mov	r3, r7
 80035f4:	e883 0003 	stmia.w	r3, {r0, r1}
	ScreenID_t ret_sc = eMAX_SCREEN_ID;
 80035f8:	230f      	movs	r3, #15
 80035fa:	73fb      	strb	r3, [r7, #15]
	
	switch(param.key){
 80035fc:	887b      	ldrh	r3, [r7, #2]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d002      	beq.n	8003608 <factory_screen_func+0x1c>
 8003602:	2b09      	cmp	r3, #9
 8003604:	d019      	beq.n	800363a <factory_screen_func+0x4e>
 8003606:	e01c      	b.n	8003642 <factory_screen_func+0x56>
		case eKey_Enter:
			send_cmd_2_backend(eCMD_Factory, 0, 0);
 8003608:	2200      	movs	r2, #0
 800360a:	2100      	movs	r1, #0
 800360c:	20b9      	movs	r0, #185	@ 0xb9
 800360e:	f7fe fb6b 	bl	8001ce8 <send_cmd_2_backend>
			app_set_default_config();
 8003612:	f7fd f8b7 	bl	8000784 <app_set_default_config>
			memset(&m_cfg, 0, sizeof(m_cfg));
 8003616:	224a      	movs	r2, #74	@ 0x4a
 8003618:	2100      	movs	r1, #0
 800361a:	480c      	ldr	r0, [pc, #48]	@ (800364c <factory_screen_func+0x60>)
 800361c:	f005 fb7a 	bl	8008d14 <memset>
			memcpy(&load_cfg, m_app_config, sizeof(config_t));
 8003620:	4b0b      	ldr	r3, [pc, #44]	@ (8003650 <factory_screen_func+0x64>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a0b      	ldr	r2, [pc, #44]	@ (8003654 <factory_screen_func+0x68>)
 8003626:	4610      	mov	r0, r2
 8003628:	4619      	mov	r1, r3
 800362a:	2347      	movs	r3, #71	@ 0x47
 800362c:	461a      	mov	r2, r3
 800362e:	f005 fc03 	bl	8008e38 <memcpy>
			draw_title(eCH_CHSelect);
 8003632:	2000      	movs	r0, #0
 8003634:	f7fe fbb2 	bl	8001d9c <draw_title>
			break;
 8003638:	e003      	b.n	8003642 <factory_screen_func+0x56>
		case eKey_Factory:
			draw_title(eFactor_Mode);
 800363a:	200c      	movs	r0, #12
 800363c:	f7fe fbae 	bl	8001d9c <draw_title>
			break;
 8003640:	bf00      	nop
	}
	return ret_sc;
 8003642:	7bfb      	ldrb	r3, [r7, #15]
}
 8003644:	4618      	mov	r0, r3
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	20000be4 	.word	0x20000be4
 8003650:	20000218 	.word	0x20000218
 8003654:	20000c30 	.word	0x20000c30

08003658 <select_ch_set_blink>:

static void select_ch_set_blink(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b094      	sub	sp, #80	@ 0x50
 800365c:	af00      	add	r7, sp, #0
	uint8_t ch_disp[4][LCD_PRINT_MAX] = {{"    CH2 CH4 CH6 \n"}, {"CH1     CH4 CH6 \n"},
 800365e:	4a18      	ldr	r2, [pc, #96]	@ (80036c0 <select_ch_set_blink+0x68>)
 8003660:	463b      	mov	r3, r7
 8003662:	4611      	mov	r1, r2
 8003664:	2250      	movs	r2, #80	@ 0x50
 8003666:	4618      	mov	r0, r3
 8003668:	f005 fbe6 	bl	8008e38 <memcpy>
										 {"CH1 CH2     CH6 \n"}, {"CH1 CH2 CH4     \n"}};

	if(m_cfg.cursor == 4){
 800366c:	4b15      	ldr	r3, [pc, #84]	@ (80036c4 <select_ch_set_blink+0x6c>)
 800366e:	78db      	ldrb	r3, [r3, #3]
 8003670:	2b04      	cmp	r3, #4
 8003672:	d10b      	bne.n	800368c <select_ch_set_blink+0x34>
		sprintf(m_cfg.blink_text[0], "CH8             \n");
 8003674:	4914      	ldr	r1, [pc, #80]	@ (80036c8 <select_ch_set_blink+0x70>)
 8003676:	4815      	ldr	r0, [pc, #84]	@ (80036cc <select_ch_set_blink+0x74>)
 8003678:	f005 faee 	bl	8008c58 <siprintf>
		sprintf(m_cfg.blink_text[1], "                \n");
 800367c:	4914      	ldr	r1, [pc, #80]	@ (80036d0 <select_ch_set_blink+0x78>)
 800367e:	4815      	ldr	r0, [pc, #84]	@ (80036d4 <select_ch_set_blink+0x7c>)
 8003680:	f005 faea 	bl	8008c58 <siprintf>
		m_cfg.blink_row = 2;
 8003684:	4b0f      	ldr	r3, [pc, #60]	@ (80036c4 <select_ch_set_blink+0x6c>)
 8003686:	2202      	movs	r2, #2
 8003688:	739a      	strb	r2, [r3, #14]
	}else{
		sprintf(m_cfg.blink_text[0], "CH1 CH2 CH4 CH6 \n");
		sprintf(m_cfg.blink_text[1], "%s", ch_disp[m_cfg.cursor]);
		m_cfg.blink_row = 1;
	}
}
 800368a:	e014      	b.n	80036b6 <select_ch_set_blink+0x5e>
		sprintf(m_cfg.blink_text[0], "CH1 CH2 CH4 CH6 \n");
 800368c:	4912      	ldr	r1, [pc, #72]	@ (80036d8 <select_ch_set_blink+0x80>)
 800368e:	480f      	ldr	r0, [pc, #60]	@ (80036cc <select_ch_set_blink+0x74>)
 8003690:	f005 fae2 	bl	8008c58 <siprintf>
		sprintf(m_cfg.blink_text[1], "%s", ch_disp[m_cfg.cursor]);
 8003694:	4b0b      	ldr	r3, [pc, #44]	@ (80036c4 <select_ch_set_blink+0x6c>)
 8003696:	78db      	ldrb	r3, [r3, #3]
 8003698:	4619      	mov	r1, r3
 800369a:	463a      	mov	r2, r7
 800369c:	460b      	mov	r3, r1
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4413      	add	r3, r2
 80036a6:	461a      	mov	r2, r3
 80036a8:	490c      	ldr	r1, [pc, #48]	@ (80036dc <select_ch_set_blink+0x84>)
 80036aa:	480a      	ldr	r0, [pc, #40]	@ (80036d4 <select_ch_set_blink+0x7c>)
 80036ac:	f005 fad4 	bl	8008c58 <siprintf>
		m_cfg.blink_row = 1;
 80036b0:	4b04      	ldr	r3, [pc, #16]	@ (80036c4 <select_ch_set_blink+0x6c>)
 80036b2:	2201      	movs	r2, #1
 80036b4:	739a      	strb	r2, [r3, #14]
}
 80036b6:	bf00      	nop
 80036b8:	3750      	adds	r7, #80	@ 0x50
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	0800a078 	.word	0x0800a078
 80036c4:	20000be4 	.word	0x20000be4
 80036c8:	08009fc8 	.word	0x08009fc8
 80036cc:	20000bf3 	.word	0x20000bf3
 80036d0:	0800a060 	.word	0x0800a060
 80036d4:	20000c07 	.word	0x20000c07
 80036d8:	08009fb4 	.word	0x08009fb4
 80036dc:	0800a074 	.word	0x0800a074

080036e0 <select_ch_screen_func>:

ScreenID_t select_ch_screen_func(Screen_param_t param)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	463b      	mov	r3, r7
 80036e8:	e883 0003 	stmia.w	r3, {r0, r1}
	ScreenID_t ret_sc = param.sc_id;
 80036ec:	783b      	ldrb	r3, [r7, #0]
 80036ee:	73fb      	strb	r3, [r7, #15]

	switch(param.key){
 80036f0:	887b      	ldrh	r3, [r7, #2]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	2b05      	cmp	r3, #5
 80036f6:	d862      	bhi.n	80037be <select_ch_screen_func+0xde>
 80036f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003700 <select_ch_screen_func+0x20>)
 80036fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fe:	bf00      	nop
 8003700:	0800375d 	.word	0x0800375d
 8003704:	08003719 	.word	0x08003719
 8003708:	080037bf 	.word	0x080037bf
 800370c:	0800373b 	.word	0x0800373b
 8003710:	080037bf 	.word	0x080037bf
 8003714:	0800378d 	.word	0x0800378d
		case eKey_Up:
			m_cfg.cursor = (m_cfg.cursor - 1 + SEL_MAX_CH) % SEL_MAX_CH;
 8003718:	4b2b      	ldr	r3, [pc, #172]	@ (80037c8 <select_ch_screen_func+0xe8>)
 800371a:	78db      	ldrb	r3, [r3, #3]
 800371c:	1d1a      	adds	r2, r3, #4
 800371e:	4b2b      	ldr	r3, [pc, #172]	@ (80037cc <select_ch_screen_func+0xec>)
 8003720:	fb83 1302 	smull	r1, r3, r3, r2
 8003724:	1059      	asrs	r1, r3, #1
 8003726:	17d3      	asrs	r3, r2, #31
 8003728:	1ac9      	subs	r1, r1, r3
 800372a:	460b      	mov	r3, r1
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	440b      	add	r3, r1
 8003730:	1ad1      	subs	r1, r2, r3
 8003732:	b2ca      	uxtb	r2, r1
 8003734:	4b24      	ldr	r3, [pc, #144]	@ (80037c8 <select_ch_screen_func+0xe8>)
 8003736:	70da      	strb	r2, [r3, #3]
			break;
 8003738:	e041      	b.n	80037be <select_ch_screen_func+0xde>
		case eKey_Down:
			m_cfg.cursor = (m_cfg.cursor + 1 ) % SEL_MAX_CH;
 800373a:	4b23      	ldr	r3, [pc, #140]	@ (80037c8 <select_ch_screen_func+0xe8>)
 800373c:	78db      	ldrb	r3, [r3, #3]
 800373e:	1c5a      	adds	r2, r3, #1
 8003740:	4b22      	ldr	r3, [pc, #136]	@ (80037cc <select_ch_screen_func+0xec>)
 8003742:	fb83 1302 	smull	r1, r3, r3, r2
 8003746:	1059      	asrs	r1, r3, #1
 8003748:	17d3      	asrs	r3, r2, #31
 800374a:	1ac9      	subs	r1, r1, r3
 800374c:	460b      	mov	r3, r1
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	440b      	add	r3, r1
 8003752:	1ad1      	subs	r1, r2, r3
 8003754:	b2ca      	uxtb	r2, r1
 8003756:	4b1c      	ldr	r3, [pc, #112]	@ (80037c8 <select_ch_screen_func+0xe8>)
 8003758:	70da      	strb	r2, [r3, #3]
			break;
 800375a:	e030      	b.n	80037be <select_ch_screen_func+0xde>
		case eKey_Enter:
			m_cfg.enable_blink = 0;
 800375c:	4b1a      	ldr	r3, [pc, #104]	@ (80037c8 <select_ch_screen_func+0xe8>)
 800375e:	2200      	movs	r2, #0
 8003760:	731a      	strb	r2, [r3, #12]
			apps_set_blink_enable(m_cfg.enable_blink);
 8003762:	4b19      	ldr	r3, [pc, #100]	@ (80037c8 <select_ch_screen_func+0xe8>)
 8003764:	7b1b      	ldrb	r3, [r3, #12]
 8003766:	4618      	mov	r0, r3
 8003768:	f7fc ffd6 	bl	8000718 <apps_set_blink_enable>
			load_cfg.ch_num = m_cfg.cursor ;
 800376c:	4b16      	ldr	r3, [pc, #88]	@ (80037c8 <select_ch_screen_func+0xe8>)
 800376e:	78da      	ldrb	r2, [r3, #3]
 8003770:	4b17      	ldr	r3, [pc, #92]	@ (80037d0 <select_ch_screen_func+0xf0>)
 8003772:	719a      	strb	r2, [r3, #6]
			m_cfg.set_mode = 0;
 8003774:	4b14      	ldr	r3, [pc, #80]	@ (80037c8 <select_ch_screen_func+0xe8>)
 8003776:	2200      	movs	r2, #0
 8003778:	701a      	strb	r2, [r3, #0]
			ret_sc = save_data();
 800377a:	f7ff f853 	bl	8002824 <save_data>
 800377e:	4603      	mov	r3, r0
 8003780:	73fb      	strb	r3, [r7, #15]
			if(ret_sc == eERROR_SC){
 8003782:	7bfb      	ldrb	r3, [r7, #15]
 8003784:	2b10      	cmp	r3, #16
 8003786:	d119      	bne.n	80037bc <select_ch_screen_func+0xdc>
				return ret_sc;
 8003788:	7bfb      	ldrb	r3, [r7, #15]
 800378a:	e019      	b.n	80037c0 <select_ch_screen_func+0xe0>
			}
			break;
		case eKey_ChSel:
			m_cfg.cursor = load_cfg.ch_num;
 800378c:	4b10      	ldr	r3, [pc, #64]	@ (80037d0 <select_ch_screen_func+0xf0>)
 800378e:	799a      	ldrb	r2, [r3, #6]
 8003790:	4b0d      	ldr	r3, [pc, #52]	@ (80037c8 <select_ch_screen_func+0xe8>)
 8003792:	70da      	strb	r2, [r3, #3]
			m_cfg.blink = 0;
 8003794:	4b0c      	ldr	r3, [pc, #48]	@ (80037c8 <select_ch_screen_func+0xe8>)
 8003796:	2200      	movs	r2, #0
 8003798:	735a      	strb	r2, [r3, #13]
			m_cfg.enable_blink = 1;
 800379a:	4b0b      	ldr	r3, [pc, #44]	@ (80037c8 <select_ch_screen_func+0xe8>)
 800379c:	2201      	movs	r2, #1
 800379e:	731a      	strb	r2, [r3, #12]
			m_cfg.set_mode = 1;
 80037a0:	4b09      	ldr	r3, [pc, #36]	@ (80037c8 <select_ch_screen_func+0xe8>)
 80037a2:	2201      	movs	r2, #1
 80037a4:	701a      	strb	r2, [r3, #0]
			apps_set_blink_enable(m_cfg.enable_blink);
 80037a6:	4b08      	ldr	r3, [pc, #32]	@ (80037c8 <select_ch_screen_func+0xe8>)
 80037a8:	7b1b      	ldrb	r3, [r3, #12]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fc ffb4 	bl	8000718 <apps_set_blink_enable>
			select_ch_set_blink();
 80037b0:	f7ff ff52 	bl	8003658 <select_ch_set_blink>
			draw_title(eSEL_OP_Ch);
 80037b4:	200d      	movs	r0, #13
 80037b6:	f7fe faf1 	bl	8001d9c <draw_title>
			break;
 80037ba:	e000      	b.n	80037be <select_ch_screen_func+0xde>
			break;
 80037bc:	bf00      	nop
	}

	return ret_sc;
 80037be:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	20000be4 	.word	0x20000be4
 80037cc:	66666667 	.word	0x66666667
 80037d0:	20000c30 	.word	0x20000c30

080037d4 <version_screen_func>:

ScreenID_t version_screen_func(Screen_param_t param)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	463b      	mov	r3, r7
 80037dc:	e883 0003 	stmia.w	r3, {r0, r1}
	ScreenID_t ret_sc = eMAX_SCREEN_ID;
 80037e0:	230f      	movs	r3, #15
 80037e2:	73fb      	strb	r3, [r7, #15]
	
	switch(param.key){
 80037e4:	887b      	ldrh	r3, [r7, #2]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d002      	beq.n	80037f0 <version_screen_func+0x1c>
 80037ea:	2b05      	cmp	r3, #5
 80037ec:	d004      	beq.n	80037f8 <version_screen_func+0x24>
 80037ee:	e007      	b.n	8003800 <version_screen_func+0x2c>
		case eKey_Enter:
			draw_title(eCH_CHSelect);
 80037f0:	2000      	movs	r0, #0
 80037f2:	f7fe fad3 	bl	8001d9c <draw_title>
			break;
 80037f6:	e003      	b.n	8003800 <version_screen_func+0x2c>
		case eKey_Version:
			draw_title(eKey_Version);
 80037f8:	2005      	movs	r0, #5
 80037fa:	f7fe facf 	bl	8001d9c <draw_title>
			break;
 80037fe:	bf00      	nop
	}
	return ret_sc;
 8003800:	7bfb      	ldrb	r3, [r7, #15]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
	...

0800380c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800380c:	f7fe f8ba 	bl	8001984 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003810:	480b      	ldr	r0, [pc, #44]	@ (8003840 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003812:	490c      	ldr	r1, [pc, #48]	@ (8003844 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003814:	4a0c      	ldr	r2, [pc, #48]	@ (8003848 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003816:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003818:	e002      	b.n	8003820 <LoopCopyDataInit>

0800381a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800381a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800381c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800381e:	3304      	adds	r3, #4

08003820 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003820:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003822:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003824:	d3f9      	bcc.n	800381a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003826:	4a09      	ldr	r2, [pc, #36]	@ (800384c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003828:	4c09      	ldr	r4, [pc, #36]	@ (8003850 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800382a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800382c:	e001      	b.n	8003832 <LoopFillZerobss>

0800382e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800382e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003830:	3204      	adds	r2, #4

08003832 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003832:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003834:	d3fb      	bcc.n	800382e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003836:	f005 fad9 	bl	8008dec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800383a:	f7fd fccf 	bl	80011dc <main>
  bx lr
 800383e:	4770      	bx	lr
  ldr r0, =_sdata
 8003840:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003844:	200001a8 	.word	0x200001a8
  ldr r2, =_sidata
 8003848:	0800a198 	.word	0x0800a198
  ldr r2, =_sbss
 800384c:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 8003850:	20003878 	.word	0x20003878

08003854 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003854:	e7fe      	b.n	8003854 <ADC1_2_IRQHandler>
	...

08003858 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800385c:	4b08      	ldr	r3, [pc, #32]	@ (8003880 <HAL_Init+0x28>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a07      	ldr	r2, [pc, #28]	@ (8003880 <HAL_Init+0x28>)
 8003862:	f043 0310 	orr.w	r3, r3, #16
 8003866:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003868:	2003      	movs	r0, #3
 800386a:	f000 f8d1 	bl	8003a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800386e:	200f      	movs	r0, #15
 8003870:	f7fd ffa6 	bl	80017c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003874:	f7fd fee0 	bl	8001638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	40022000 	.word	0x40022000

08003884 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003888:	4b05      	ldr	r3, [pc, #20]	@ (80038a0 <HAL_IncTick+0x1c>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	461a      	mov	r2, r3
 800388e:	4b05      	ldr	r3, [pc, #20]	@ (80038a4 <HAL_IncTick+0x20>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4413      	add	r3, r2
 8003894:	4a03      	ldr	r2, [pc, #12]	@ (80038a4 <HAL_IncTick+0x20>)
 8003896:	6013      	str	r3, [r2, #0]
}
 8003898:	bf00      	nop
 800389a:	46bd      	mov	sp, r7
 800389c:	bc80      	pop	{r7}
 800389e:	4770      	bx	lr
 80038a0:	20000150 	.word	0x20000150
 80038a4:	20000c78 	.word	0x20000c78

080038a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
  return uwTick;
 80038ac:	4b02      	ldr	r3, [pc, #8]	@ (80038b8 <HAL_GetTick+0x10>)
 80038ae:	681b      	ldr	r3, [r3, #0]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bc80      	pop	{r7}
 80038b6:	4770      	bx	lr
 80038b8:	20000c78 	.word	0x20000c78

080038bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003900 <__NVIC_SetPriorityGrouping+0x44>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038d8:	4013      	ands	r3, r2
 80038da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80038e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038ee:	4a04      	ldr	r2, [pc, #16]	@ (8003900 <__NVIC_SetPriorityGrouping+0x44>)
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	60d3      	str	r3, [r2, #12]
}
 80038f4:	bf00      	nop
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bc80      	pop	{r7}
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	e000ed00 	.word	0xe000ed00

08003904 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003908:	4b04      	ldr	r3, [pc, #16]	@ (800391c <__NVIC_GetPriorityGrouping+0x18>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	0a1b      	lsrs	r3, r3, #8
 800390e:	f003 0307 	and.w	r3, r3, #7
}
 8003912:	4618      	mov	r0, r3
 8003914:	46bd      	mov	sp, r7
 8003916:	bc80      	pop	{r7}
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	e000ed00 	.word	0xe000ed00

08003920 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	4603      	mov	r3, r0
 8003928:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800392a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392e:	2b00      	cmp	r3, #0
 8003930:	db0b      	blt.n	800394a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003932:	79fb      	ldrb	r3, [r7, #7]
 8003934:	f003 021f 	and.w	r2, r3, #31
 8003938:	4906      	ldr	r1, [pc, #24]	@ (8003954 <__NVIC_EnableIRQ+0x34>)
 800393a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393e:	095b      	lsrs	r3, r3, #5
 8003940:	2001      	movs	r0, #1
 8003942:	fa00 f202 	lsl.w	r2, r0, r2
 8003946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	bc80      	pop	{r7}
 8003952:	4770      	bx	lr
 8003954:	e000e100 	.word	0xe000e100

08003958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	4603      	mov	r3, r0
 8003960:	6039      	str	r1, [r7, #0]
 8003962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003968:	2b00      	cmp	r3, #0
 800396a:	db0a      	blt.n	8003982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	b2da      	uxtb	r2, r3
 8003970:	490c      	ldr	r1, [pc, #48]	@ (80039a4 <__NVIC_SetPriority+0x4c>)
 8003972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003976:	0112      	lsls	r2, r2, #4
 8003978:	b2d2      	uxtb	r2, r2
 800397a:	440b      	add	r3, r1
 800397c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003980:	e00a      	b.n	8003998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	b2da      	uxtb	r2, r3
 8003986:	4908      	ldr	r1, [pc, #32]	@ (80039a8 <__NVIC_SetPriority+0x50>)
 8003988:	79fb      	ldrb	r3, [r7, #7]
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	3b04      	subs	r3, #4
 8003990:	0112      	lsls	r2, r2, #4
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	440b      	add	r3, r1
 8003996:	761a      	strb	r2, [r3, #24]
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	bc80      	pop	{r7}
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	e000e100 	.word	0xe000e100
 80039a8:	e000ed00 	.word	0xe000ed00

080039ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b089      	sub	sp, #36	@ 0x24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	f1c3 0307 	rsb	r3, r3, #7
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	bf28      	it	cs
 80039ca:	2304      	movcs	r3, #4
 80039cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	3304      	adds	r3, #4
 80039d2:	2b06      	cmp	r3, #6
 80039d4:	d902      	bls.n	80039dc <NVIC_EncodePriority+0x30>
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	3b03      	subs	r3, #3
 80039da:	e000      	b.n	80039de <NVIC_EncodePriority+0x32>
 80039dc:	2300      	movs	r3, #0
 80039de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039e0:	f04f 32ff 	mov.w	r2, #4294967295
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ea:	43da      	mvns	r2, r3
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	401a      	ands	r2, r3
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039f4:	f04f 31ff 	mov.w	r1, #4294967295
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	fa01 f303 	lsl.w	r3, r1, r3
 80039fe:	43d9      	mvns	r1, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a04:	4313      	orrs	r3, r2
         );
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3724      	adds	r7, #36	@ 0x24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bc80      	pop	{r7}
 8003a0e:	4770      	bx	lr

08003a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f7ff ff4f 	bl	80038bc <__NVIC_SetPriorityGrouping>
}
 8003a1e:	bf00      	nop
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b086      	sub	sp, #24
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	60b9      	str	r1, [r7, #8]
 8003a30:	607a      	str	r2, [r7, #4]
 8003a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a34:	2300      	movs	r3, #0
 8003a36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a38:	f7ff ff64 	bl	8003904 <__NVIC_GetPriorityGrouping>
 8003a3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	68b9      	ldr	r1, [r7, #8]
 8003a42:	6978      	ldr	r0, [r7, #20]
 8003a44:	f7ff ffb2 	bl	80039ac <NVIC_EncodePriority>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a4e:	4611      	mov	r1, r2
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7ff ff81 	bl	8003958 <__NVIC_SetPriority>
}
 8003a56:	bf00      	nop
 8003a58:	3718      	adds	r7, #24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b082      	sub	sp, #8
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	4603      	mov	r3, r0
 8003a66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7ff ff57 	bl	8003920 <__NVIC_EnableIRQ>
}
 8003a72:	bf00      	nop
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b085      	sub	sp, #20
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a82:	2300      	movs	r3, #0
 8003a84:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d008      	beq.n	8003aa4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2204      	movs	r2, #4
 8003a96:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e020      	b.n	8003ae6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 020e 	bic.w	r2, r2, #14
 8003ab2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 0201 	bic.w	r2, r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003acc:	2101      	movs	r1, #1
 8003ace:	fa01 f202 	lsl.w	r2, r1, r2
 8003ad2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bc80      	pop	{r7}
 8003aee:	4770      	bx	lr

08003af0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003af8:	2300      	movs	r3, #0
 8003afa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d005      	beq.n	8003b14 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2204      	movs	r2, #4
 8003b0c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	73fb      	strb	r3, [r7, #15]
 8003b12:	e051      	b.n	8003bb8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f022 020e 	bic.w	r2, r2, #14
 8003b22:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 0201 	bic.w	r2, r2, #1
 8003b32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a22      	ldr	r2, [pc, #136]	@ (8003bc4 <HAL_DMA_Abort_IT+0xd4>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d029      	beq.n	8003b92 <HAL_DMA_Abort_IT+0xa2>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a21      	ldr	r2, [pc, #132]	@ (8003bc8 <HAL_DMA_Abort_IT+0xd8>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d022      	beq.n	8003b8e <HAL_DMA_Abort_IT+0x9e>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a1f      	ldr	r2, [pc, #124]	@ (8003bcc <HAL_DMA_Abort_IT+0xdc>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d01a      	beq.n	8003b88 <HAL_DMA_Abort_IT+0x98>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a1e      	ldr	r2, [pc, #120]	@ (8003bd0 <HAL_DMA_Abort_IT+0xe0>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d012      	beq.n	8003b82 <HAL_DMA_Abort_IT+0x92>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a1c      	ldr	r2, [pc, #112]	@ (8003bd4 <HAL_DMA_Abort_IT+0xe4>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d00a      	beq.n	8003b7c <HAL_DMA_Abort_IT+0x8c>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a1b      	ldr	r2, [pc, #108]	@ (8003bd8 <HAL_DMA_Abort_IT+0xe8>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d102      	bne.n	8003b76 <HAL_DMA_Abort_IT+0x86>
 8003b70:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003b74:	e00e      	b.n	8003b94 <HAL_DMA_Abort_IT+0xa4>
 8003b76:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b7a:	e00b      	b.n	8003b94 <HAL_DMA_Abort_IT+0xa4>
 8003b7c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b80:	e008      	b.n	8003b94 <HAL_DMA_Abort_IT+0xa4>
 8003b82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b86:	e005      	b.n	8003b94 <HAL_DMA_Abort_IT+0xa4>
 8003b88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b8c:	e002      	b.n	8003b94 <HAL_DMA_Abort_IT+0xa4>
 8003b8e:	2310      	movs	r3, #16
 8003b90:	e000      	b.n	8003b94 <HAL_DMA_Abort_IT+0xa4>
 8003b92:	2301      	movs	r3, #1
 8003b94:	4a11      	ldr	r2, [pc, #68]	@ (8003bdc <HAL_DMA_Abort_IT+0xec>)
 8003b96:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d003      	beq.n	8003bb8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	4798      	blx	r3
    } 
  }
  return status;
 8003bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40020008 	.word	0x40020008
 8003bc8:	4002001c 	.word	0x4002001c
 8003bcc:	40020030 	.word	0x40020030
 8003bd0:	40020044 	.word	0x40020044
 8003bd4:	40020058 	.word	0x40020058
 8003bd8:	4002006c 	.word	0x4002006c
 8003bdc:	40020000 	.word	0x40020000

08003be0 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003be2:	b087      	sub	sp, #28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003bfa:	4b2f      	ldr	r3, [pc, #188]	@ (8003cb8 <HAL_FLASH_Program+0xd8>)
 8003bfc:	7e1b      	ldrb	r3, [r3, #24]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d101      	bne.n	8003c06 <HAL_FLASH_Program+0x26>
 8003c02:	2302      	movs	r3, #2
 8003c04:	e054      	b.n	8003cb0 <HAL_FLASH_Program+0xd0>
 8003c06:	4b2c      	ldr	r3, [pc, #176]	@ (8003cb8 <HAL_FLASH_Program+0xd8>)
 8003c08:	2201      	movs	r2, #1
 8003c0a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003c0c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003c10:	f000 f8b2 	bl	8003d78 <FLASH_WaitForLastOperation>
 8003c14:	4603      	mov	r3, r0
 8003c16:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8003c18:	7dfb      	ldrb	r3, [r7, #23]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d144      	bne.n	8003ca8 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d102      	bne.n	8003c2a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003c24:	2301      	movs	r3, #1
 8003c26:	757b      	strb	r3, [r7, #21]
 8003c28:	e007      	b.n	8003c3a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d102      	bne.n	8003c36 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003c30:	2302      	movs	r3, #2
 8003c32:	757b      	strb	r3, [r7, #21]
 8003c34:	e001      	b.n	8003c3a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003c36:	2304      	movs	r3, #4
 8003c38:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	75bb      	strb	r3, [r7, #22]
 8003c3e:	e02d      	b.n	8003c9c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003c40:	7dbb      	ldrb	r3, [r7, #22]
 8003c42:	005a      	lsls	r2, r3, #1
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	eb02 0c03 	add.w	ip, r2, r3
 8003c4a:	7dbb      	ldrb	r3, [r7, #22]
 8003c4c:	0119      	lsls	r1, r3, #4
 8003c4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c52:	f1c1 0620 	rsb	r6, r1, #32
 8003c56:	f1a1 0020 	sub.w	r0, r1, #32
 8003c5a:	fa22 f401 	lsr.w	r4, r2, r1
 8003c5e:	fa03 f606 	lsl.w	r6, r3, r6
 8003c62:	4334      	orrs	r4, r6
 8003c64:	fa23 f000 	lsr.w	r0, r3, r0
 8003c68:	4304      	orrs	r4, r0
 8003c6a:	fa23 f501 	lsr.w	r5, r3, r1
 8003c6e:	b2a3      	uxth	r3, r4
 8003c70:	4619      	mov	r1, r3
 8003c72:	4660      	mov	r0, ip
 8003c74:	f000 f864 	bl	8003d40 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003c78:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003c7c:	f000 f87c 	bl	8003d78 <FLASH_WaitForLastOperation>
 8003c80:	4603      	mov	r3, r0
 8003c82:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003c84:	4b0d      	ldr	r3, [pc, #52]	@ (8003cbc <HAL_FLASH_Program+0xdc>)
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	4a0c      	ldr	r2, [pc, #48]	@ (8003cbc <HAL_FLASH_Program+0xdc>)
 8003c8a:	f023 0301 	bic.w	r3, r3, #1
 8003c8e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003c90:	7dfb      	ldrb	r3, [r7, #23]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d107      	bne.n	8003ca6 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003c96:	7dbb      	ldrb	r3, [r7, #22]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	75bb      	strb	r3, [r7, #22]
 8003c9c:	7dba      	ldrb	r2, [r7, #22]
 8003c9e:	7d7b      	ldrb	r3, [r7, #21]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d3cd      	bcc.n	8003c40 <HAL_FLASH_Program+0x60>
 8003ca4:	e000      	b.n	8003ca8 <HAL_FLASH_Program+0xc8>
      {
        break;
 8003ca6:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003ca8:	4b03      	ldr	r3, [pc, #12]	@ (8003cb8 <HAL_FLASH_Program+0xd8>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	761a      	strb	r2, [r3, #24]

  return status;
 8003cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	371c      	adds	r7, #28
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cb8:	20000c80 	.word	0x20000c80
 8003cbc:	40022000 	.word	0x40022000

08003cc0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003cca:	4b0d      	ldr	r3, [pc, #52]	@ (8003d00 <HAL_FLASH_Unlock+0x40>)
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00d      	beq.n	8003cf2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8003d00 <HAL_FLASH_Unlock+0x40>)
 8003cd8:	4a0a      	ldr	r2, [pc, #40]	@ (8003d04 <HAL_FLASH_Unlock+0x44>)
 8003cda:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003cdc:	4b08      	ldr	r3, [pc, #32]	@ (8003d00 <HAL_FLASH_Unlock+0x40>)
 8003cde:	4a0a      	ldr	r2, [pc, #40]	@ (8003d08 <HAL_FLASH_Unlock+0x48>)
 8003ce0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003ce2:	4b07      	ldr	r3, [pc, #28]	@ (8003d00 <HAL_FLASH_Unlock+0x40>)
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8003cf2:	79fb      	ldrb	r3, [r7, #7]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bc80      	pop	{r7}
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	40022000 	.word	0x40022000
 8003d04:	45670123 	.word	0x45670123
 8003d08:	cdef89ab 	.word	0xcdef89ab

08003d0c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003d10:	4b05      	ldr	r3, [pc, #20]	@ (8003d28 <HAL_FLASH_Lock+0x1c>)
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	4a04      	ldr	r2, [pc, #16]	@ (8003d28 <HAL_FLASH_Lock+0x1c>)
 8003d16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d1a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bc80      	pop	{r7}
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	40022000 	.word	0x40022000

08003d2c <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8003d30:	4b02      	ldr	r3, [pc, #8]	@ (8003d3c <HAL_FLASH_GetError+0x10>)
 8003d32:	69db      	ldr	r3, [r3, #28]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bc80      	pop	{r7}
 8003d3a:	4770      	bx	lr
 8003d3c:	20000c80 	.word	0x20000c80

08003d40 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	460b      	mov	r3, r1
 8003d4a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003d4c:	4b08      	ldr	r3, [pc, #32]	@ (8003d70 <FLASH_Program_HalfWord+0x30>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003d52:	4b08      	ldr	r3, [pc, #32]	@ (8003d74 <FLASH_Program_HalfWord+0x34>)
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	4a07      	ldr	r2, [pc, #28]	@ (8003d74 <FLASH_Program_HalfWord+0x34>)
 8003d58:	f043 0301 	orr.w	r3, r3, #1
 8003d5c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	887a      	ldrh	r2, [r7, #2]
 8003d62:	801a      	strh	r2, [r3, #0]
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bc80      	pop	{r7}
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	20000c80 	.word	0x20000c80
 8003d74:	40022000 	.word	0x40022000

08003d78 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003d80:	f7ff fd92 	bl	80038a8 <HAL_GetTick>
 8003d84:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003d86:	e010      	b.n	8003daa <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8e:	d00c      	beq.n	8003daa <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d007      	beq.n	8003da6 <FLASH_WaitForLastOperation+0x2e>
 8003d96:	f7ff fd87 	bl	80038a8 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d201      	bcs.n	8003daa <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e025      	b.n	8003df6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003daa:	4b15      	ldr	r3, [pc, #84]	@ (8003e00 <FLASH_WaitForLastOperation+0x88>)
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1e8      	bne.n	8003d88 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003db6:	4b12      	ldr	r3, [pc, #72]	@ (8003e00 <FLASH_WaitForLastOperation+0x88>)
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	f003 0320 	and.w	r3, r3, #32
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d002      	beq.n	8003dc8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8003e00 <FLASH_WaitForLastOperation+0x88>)
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003dc8:	4b0d      	ldr	r3, [pc, #52]	@ (8003e00 <FLASH_WaitForLastOperation+0x88>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	f003 0310 	and.w	r3, r3, #16
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d10b      	bne.n	8003dec <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8003e00 <FLASH_WaitForLastOperation+0x88>)
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d105      	bne.n	8003dec <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003de0:	4b07      	ldr	r3, [pc, #28]	@ (8003e00 <FLASH_WaitForLastOperation+0x88>)
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d003      	beq.n	8003df4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003dec:	f000 f80a 	bl	8003e04 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e000      	b.n	8003df6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	40022000 	.word	0x40022000

08003e04 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003e0e:	4b23      	ldr	r3, [pc, #140]	@ (8003e9c <FLASH_SetErrorCode+0x98>)
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	f003 0310 	and.w	r3, r3, #16
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d009      	beq.n	8003e2e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003e1a:	4b21      	ldr	r3, [pc, #132]	@ (8003ea0 <FLASH_SetErrorCode+0x9c>)
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	f043 0302 	orr.w	r3, r3, #2
 8003e22:	4a1f      	ldr	r2, [pc, #124]	@ (8003ea0 <FLASH_SetErrorCode+0x9c>)
 8003e24:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f043 0310 	orr.w	r3, r3, #16
 8003e2c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003e2e:	4b1b      	ldr	r3, [pc, #108]	@ (8003e9c <FLASH_SetErrorCode+0x98>)
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	f003 0304 	and.w	r3, r3, #4
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d009      	beq.n	8003e4e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003e3a:	4b19      	ldr	r3, [pc, #100]	@ (8003ea0 <FLASH_SetErrorCode+0x9c>)
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	f043 0301 	orr.w	r3, r3, #1
 8003e42:	4a17      	ldr	r2, [pc, #92]	@ (8003ea0 <FLASH_SetErrorCode+0x9c>)
 8003e44:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f043 0304 	orr.w	r3, r3, #4
 8003e4c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003e4e:	4b13      	ldr	r3, [pc, #76]	@ (8003e9c <FLASH_SetErrorCode+0x98>)
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00b      	beq.n	8003e72 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003e5a:	4b11      	ldr	r3, [pc, #68]	@ (8003ea0 <FLASH_SetErrorCode+0x9c>)
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	f043 0304 	orr.w	r3, r3, #4
 8003e62:	4a0f      	ldr	r2, [pc, #60]	@ (8003ea0 <FLASH_SetErrorCode+0x9c>)
 8003e64:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003e66:	4b0d      	ldr	r3, [pc, #52]	@ (8003e9c <FLASH_SetErrorCode+0x98>)
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	4a0c      	ldr	r2, [pc, #48]	@ (8003e9c <FLASH_SetErrorCode+0x98>)
 8003e6c:	f023 0301 	bic.w	r3, r3, #1
 8003e70:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f240 1201 	movw	r2, #257	@ 0x101
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d106      	bne.n	8003e8a <FLASH_SetErrorCode+0x86>
 8003e7c:	4b07      	ldr	r3, [pc, #28]	@ (8003e9c <FLASH_SetErrorCode+0x98>)
 8003e7e:	69db      	ldr	r3, [r3, #28]
 8003e80:	4a06      	ldr	r2, [pc, #24]	@ (8003e9c <FLASH_SetErrorCode+0x98>)
 8003e82:	f023 0301 	bic.w	r3, r3, #1
 8003e86:	61d3      	str	r3, [r2, #28]
}  
 8003e88:	e002      	b.n	8003e90 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003e8a:	4a04      	ldr	r2, [pc, #16]	@ (8003e9c <FLASH_SetErrorCode+0x98>)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	60d3      	str	r3, [r2, #12]
}  
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bc80      	pop	{r7}
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	40022000 	.word	0x40022000
 8003ea0:	20000c80 	.word	0x20000c80

08003ea4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003eb6:	4b2f      	ldr	r3, [pc, #188]	@ (8003f74 <HAL_FLASHEx_Erase+0xd0>)
 8003eb8:	7e1b      	ldrb	r3, [r3, #24]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d101      	bne.n	8003ec2 <HAL_FLASHEx_Erase+0x1e>
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	e053      	b.n	8003f6a <HAL_FLASHEx_Erase+0xc6>
 8003ec2:	4b2c      	ldr	r3, [pc, #176]	@ (8003f74 <HAL_FLASHEx_Erase+0xd0>)
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d116      	bne.n	8003efe <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003ed0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003ed4:	f7ff ff50 	bl	8003d78 <FLASH_WaitForLastOperation>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d141      	bne.n	8003f62 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8003ede:	2001      	movs	r0, #1
 8003ee0:	f000 f84c 	bl	8003f7c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003ee4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003ee8:	f7ff ff46 	bl	8003d78 <FLASH_WaitForLastOperation>
 8003eec:	4603      	mov	r3, r0
 8003eee:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003ef0:	4b21      	ldr	r3, [pc, #132]	@ (8003f78 <HAL_FLASHEx_Erase+0xd4>)
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	4a20      	ldr	r2, [pc, #128]	@ (8003f78 <HAL_FLASHEx_Erase+0xd4>)
 8003ef6:	f023 0304 	bic.w	r3, r3, #4
 8003efa:	6113      	str	r3, [r2, #16]
 8003efc:	e031      	b.n	8003f62 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003efe:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003f02:	f7ff ff39 	bl	8003d78 <FLASH_WaitForLastOperation>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d12a      	bne.n	8003f62 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f12:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	60bb      	str	r3, [r7, #8]
 8003f1a:	e019      	b.n	8003f50 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003f1c:	68b8      	ldr	r0, [r7, #8]
 8003f1e:	f000 f849 	bl	8003fb4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003f22:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003f26:	f7ff ff27 	bl	8003d78 <FLASH_WaitForLastOperation>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003f2e:	4b12      	ldr	r3, [pc, #72]	@ (8003f78 <HAL_FLASHEx_Erase+0xd4>)
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	4a11      	ldr	r2, [pc, #68]	@ (8003f78 <HAL_FLASHEx_Erase+0xd4>)
 8003f34:	f023 0302 	bic.w	r3, r3, #2
 8003f38:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003f3a:	7bfb      	ldrb	r3, [r7, #15]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d003      	beq.n	8003f48 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	68ba      	ldr	r2, [r7, #8]
 8003f44:	601a      	str	r2, [r3, #0]
            break;
 8003f46:	e00c      	b.n	8003f62 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003f4e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	029a      	lsls	r2, r3, #10
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d3dc      	bcc.n	8003f1c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003f62:	4b04      	ldr	r3, [pc, #16]	@ (8003f74 <HAL_FLASHEx_Erase+0xd0>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	761a      	strb	r2, [r3, #24]

  return status;
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	20000c80 	.word	0x20000c80
 8003f78:	40022000 	.word	0x40022000

08003f7c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003f84:	4b09      	ldr	r3, [pc, #36]	@ (8003fac <FLASH_MassErase+0x30>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003f8a:	4b09      	ldr	r3, [pc, #36]	@ (8003fb0 <FLASH_MassErase+0x34>)
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	4a08      	ldr	r2, [pc, #32]	@ (8003fb0 <FLASH_MassErase+0x34>)
 8003f90:	f043 0304 	orr.w	r3, r3, #4
 8003f94:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003f96:	4b06      	ldr	r3, [pc, #24]	@ (8003fb0 <FLASH_MassErase+0x34>)
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	4a05      	ldr	r2, [pc, #20]	@ (8003fb0 <FLASH_MassErase+0x34>)
 8003f9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fa0:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003fa2:	bf00      	nop
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bc80      	pop	{r7}
 8003faa:	4770      	bx	lr
 8003fac:	20000c80 	.word	0x20000c80
 8003fb0:	40022000 	.word	0x40022000

08003fb4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8003fec <FLASH_PageErase+0x38>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff0 <FLASH_PageErase+0x3c>)
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8003ff0 <FLASH_PageErase+0x3c>)
 8003fc8:	f043 0302 	orr.w	r3, r3, #2
 8003fcc:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003fce:	4a08      	ldr	r2, [pc, #32]	@ (8003ff0 <FLASH_PageErase+0x3c>)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003fd4:	4b06      	ldr	r3, [pc, #24]	@ (8003ff0 <FLASH_PageErase+0x3c>)
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	4a05      	ldr	r2, [pc, #20]	@ (8003ff0 <FLASH_PageErase+0x3c>)
 8003fda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fde:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bc80      	pop	{r7}
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	20000c80 	.word	0x20000c80
 8003ff0:	40022000 	.word	0x40022000

08003ff4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b08b      	sub	sp, #44	@ 0x2c
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ffe:	2300      	movs	r3, #0
 8004000:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004002:	2300      	movs	r3, #0
 8004004:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004006:	e169      	b.n	80042dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004008:	2201      	movs	r2, #1
 800400a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400c:	fa02 f303 	lsl.w	r3, r2, r3
 8004010:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	69fa      	ldr	r2, [r7, #28]
 8004018:	4013      	ands	r3, r2
 800401a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	429a      	cmp	r2, r3
 8004022:	f040 8158 	bne.w	80042d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	4a9a      	ldr	r2, [pc, #616]	@ (8004294 <HAL_GPIO_Init+0x2a0>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d05e      	beq.n	80040ee <HAL_GPIO_Init+0xfa>
 8004030:	4a98      	ldr	r2, [pc, #608]	@ (8004294 <HAL_GPIO_Init+0x2a0>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d875      	bhi.n	8004122 <HAL_GPIO_Init+0x12e>
 8004036:	4a98      	ldr	r2, [pc, #608]	@ (8004298 <HAL_GPIO_Init+0x2a4>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d058      	beq.n	80040ee <HAL_GPIO_Init+0xfa>
 800403c:	4a96      	ldr	r2, [pc, #600]	@ (8004298 <HAL_GPIO_Init+0x2a4>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d86f      	bhi.n	8004122 <HAL_GPIO_Init+0x12e>
 8004042:	4a96      	ldr	r2, [pc, #600]	@ (800429c <HAL_GPIO_Init+0x2a8>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d052      	beq.n	80040ee <HAL_GPIO_Init+0xfa>
 8004048:	4a94      	ldr	r2, [pc, #592]	@ (800429c <HAL_GPIO_Init+0x2a8>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d869      	bhi.n	8004122 <HAL_GPIO_Init+0x12e>
 800404e:	4a94      	ldr	r2, [pc, #592]	@ (80042a0 <HAL_GPIO_Init+0x2ac>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d04c      	beq.n	80040ee <HAL_GPIO_Init+0xfa>
 8004054:	4a92      	ldr	r2, [pc, #584]	@ (80042a0 <HAL_GPIO_Init+0x2ac>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d863      	bhi.n	8004122 <HAL_GPIO_Init+0x12e>
 800405a:	4a92      	ldr	r2, [pc, #584]	@ (80042a4 <HAL_GPIO_Init+0x2b0>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d046      	beq.n	80040ee <HAL_GPIO_Init+0xfa>
 8004060:	4a90      	ldr	r2, [pc, #576]	@ (80042a4 <HAL_GPIO_Init+0x2b0>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d85d      	bhi.n	8004122 <HAL_GPIO_Init+0x12e>
 8004066:	2b12      	cmp	r3, #18
 8004068:	d82a      	bhi.n	80040c0 <HAL_GPIO_Init+0xcc>
 800406a:	2b12      	cmp	r3, #18
 800406c:	d859      	bhi.n	8004122 <HAL_GPIO_Init+0x12e>
 800406e:	a201      	add	r2, pc, #4	@ (adr r2, 8004074 <HAL_GPIO_Init+0x80>)
 8004070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004074:	080040ef 	.word	0x080040ef
 8004078:	080040c9 	.word	0x080040c9
 800407c:	080040db 	.word	0x080040db
 8004080:	0800411d 	.word	0x0800411d
 8004084:	08004123 	.word	0x08004123
 8004088:	08004123 	.word	0x08004123
 800408c:	08004123 	.word	0x08004123
 8004090:	08004123 	.word	0x08004123
 8004094:	08004123 	.word	0x08004123
 8004098:	08004123 	.word	0x08004123
 800409c:	08004123 	.word	0x08004123
 80040a0:	08004123 	.word	0x08004123
 80040a4:	08004123 	.word	0x08004123
 80040a8:	08004123 	.word	0x08004123
 80040ac:	08004123 	.word	0x08004123
 80040b0:	08004123 	.word	0x08004123
 80040b4:	08004123 	.word	0x08004123
 80040b8:	080040d1 	.word	0x080040d1
 80040bc:	080040e5 	.word	0x080040e5
 80040c0:	4a79      	ldr	r2, [pc, #484]	@ (80042a8 <HAL_GPIO_Init+0x2b4>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d013      	beq.n	80040ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80040c6:	e02c      	b.n	8004122 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	623b      	str	r3, [r7, #32]
          break;
 80040ce:	e029      	b.n	8004124 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	3304      	adds	r3, #4
 80040d6:	623b      	str	r3, [r7, #32]
          break;
 80040d8:	e024      	b.n	8004124 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	3308      	adds	r3, #8
 80040e0:	623b      	str	r3, [r7, #32]
          break;
 80040e2:	e01f      	b.n	8004124 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	330c      	adds	r3, #12
 80040ea:	623b      	str	r3, [r7, #32]
          break;
 80040ec:	e01a      	b.n	8004124 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d102      	bne.n	80040fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80040f6:	2304      	movs	r3, #4
 80040f8:	623b      	str	r3, [r7, #32]
          break;
 80040fa:	e013      	b.n	8004124 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d105      	bne.n	8004110 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004104:	2308      	movs	r3, #8
 8004106:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	69fa      	ldr	r2, [r7, #28]
 800410c:	611a      	str	r2, [r3, #16]
          break;
 800410e:	e009      	b.n	8004124 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004110:	2308      	movs	r3, #8
 8004112:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	69fa      	ldr	r2, [r7, #28]
 8004118:	615a      	str	r2, [r3, #20]
          break;
 800411a:	e003      	b.n	8004124 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800411c:	2300      	movs	r3, #0
 800411e:	623b      	str	r3, [r7, #32]
          break;
 8004120:	e000      	b.n	8004124 <HAL_GPIO_Init+0x130>
          break;
 8004122:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	2bff      	cmp	r3, #255	@ 0xff
 8004128:	d801      	bhi.n	800412e <HAL_GPIO_Init+0x13a>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	e001      	b.n	8004132 <HAL_GPIO_Init+0x13e>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	3304      	adds	r3, #4
 8004132:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	2bff      	cmp	r3, #255	@ 0xff
 8004138:	d802      	bhi.n	8004140 <HAL_GPIO_Init+0x14c>
 800413a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	e002      	b.n	8004146 <HAL_GPIO_Init+0x152>
 8004140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004142:	3b08      	subs	r3, #8
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	210f      	movs	r1, #15
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	fa01 f303 	lsl.w	r3, r1, r3
 8004154:	43db      	mvns	r3, r3
 8004156:	401a      	ands	r2, r3
 8004158:	6a39      	ldr	r1, [r7, #32]
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	fa01 f303 	lsl.w	r3, r1, r3
 8004160:	431a      	orrs	r2, r3
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800416e:	2b00      	cmp	r3, #0
 8004170:	f000 80b1 	beq.w	80042d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004174:	4b4d      	ldr	r3, [pc, #308]	@ (80042ac <HAL_GPIO_Init+0x2b8>)
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	4a4c      	ldr	r2, [pc, #304]	@ (80042ac <HAL_GPIO_Init+0x2b8>)
 800417a:	f043 0301 	orr.w	r3, r3, #1
 800417e:	6193      	str	r3, [r2, #24]
 8004180:	4b4a      	ldr	r3, [pc, #296]	@ (80042ac <HAL_GPIO_Init+0x2b8>)
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	60bb      	str	r3, [r7, #8]
 800418a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800418c:	4a48      	ldr	r2, [pc, #288]	@ (80042b0 <HAL_GPIO_Init+0x2bc>)
 800418e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004190:	089b      	lsrs	r3, r3, #2
 8004192:	3302      	adds	r3, #2
 8004194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004198:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800419a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419c:	f003 0303 	and.w	r3, r3, #3
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	220f      	movs	r2, #15
 80041a4:	fa02 f303 	lsl.w	r3, r2, r3
 80041a8:	43db      	mvns	r3, r3
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	4013      	ands	r3, r2
 80041ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a40      	ldr	r2, [pc, #256]	@ (80042b4 <HAL_GPIO_Init+0x2c0>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d013      	beq.n	80041e0 <HAL_GPIO_Init+0x1ec>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a3f      	ldr	r2, [pc, #252]	@ (80042b8 <HAL_GPIO_Init+0x2c4>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d00d      	beq.n	80041dc <HAL_GPIO_Init+0x1e8>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a3e      	ldr	r2, [pc, #248]	@ (80042bc <HAL_GPIO_Init+0x2c8>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d007      	beq.n	80041d8 <HAL_GPIO_Init+0x1e4>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a3d      	ldr	r2, [pc, #244]	@ (80042c0 <HAL_GPIO_Init+0x2cc>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d101      	bne.n	80041d4 <HAL_GPIO_Init+0x1e0>
 80041d0:	2303      	movs	r3, #3
 80041d2:	e006      	b.n	80041e2 <HAL_GPIO_Init+0x1ee>
 80041d4:	2304      	movs	r3, #4
 80041d6:	e004      	b.n	80041e2 <HAL_GPIO_Init+0x1ee>
 80041d8:	2302      	movs	r3, #2
 80041da:	e002      	b.n	80041e2 <HAL_GPIO_Init+0x1ee>
 80041dc:	2301      	movs	r3, #1
 80041de:	e000      	b.n	80041e2 <HAL_GPIO_Init+0x1ee>
 80041e0:	2300      	movs	r3, #0
 80041e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041e4:	f002 0203 	and.w	r2, r2, #3
 80041e8:	0092      	lsls	r2, r2, #2
 80041ea:	4093      	lsls	r3, r2
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80041f2:	492f      	ldr	r1, [pc, #188]	@ (80042b0 <HAL_GPIO_Init+0x2bc>)
 80041f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f6:	089b      	lsrs	r3, r3, #2
 80041f8:	3302      	adds	r3, #2
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d006      	beq.n	800421a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800420c:	4b2d      	ldr	r3, [pc, #180]	@ (80042c4 <HAL_GPIO_Init+0x2d0>)
 800420e:	689a      	ldr	r2, [r3, #8]
 8004210:	492c      	ldr	r1, [pc, #176]	@ (80042c4 <HAL_GPIO_Init+0x2d0>)
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	4313      	orrs	r3, r2
 8004216:	608b      	str	r3, [r1, #8]
 8004218:	e006      	b.n	8004228 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800421a:	4b2a      	ldr	r3, [pc, #168]	@ (80042c4 <HAL_GPIO_Init+0x2d0>)
 800421c:	689a      	ldr	r2, [r3, #8]
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	43db      	mvns	r3, r3
 8004222:	4928      	ldr	r1, [pc, #160]	@ (80042c4 <HAL_GPIO_Init+0x2d0>)
 8004224:	4013      	ands	r3, r2
 8004226:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d006      	beq.n	8004242 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004234:	4b23      	ldr	r3, [pc, #140]	@ (80042c4 <HAL_GPIO_Init+0x2d0>)
 8004236:	68da      	ldr	r2, [r3, #12]
 8004238:	4922      	ldr	r1, [pc, #136]	@ (80042c4 <HAL_GPIO_Init+0x2d0>)
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	4313      	orrs	r3, r2
 800423e:	60cb      	str	r3, [r1, #12]
 8004240:	e006      	b.n	8004250 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004242:	4b20      	ldr	r3, [pc, #128]	@ (80042c4 <HAL_GPIO_Init+0x2d0>)
 8004244:	68da      	ldr	r2, [r3, #12]
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	43db      	mvns	r3, r3
 800424a:	491e      	ldr	r1, [pc, #120]	@ (80042c4 <HAL_GPIO_Init+0x2d0>)
 800424c:	4013      	ands	r3, r2
 800424e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d006      	beq.n	800426a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800425c:	4b19      	ldr	r3, [pc, #100]	@ (80042c4 <HAL_GPIO_Init+0x2d0>)
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	4918      	ldr	r1, [pc, #96]	@ (80042c4 <HAL_GPIO_Init+0x2d0>)
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	4313      	orrs	r3, r2
 8004266:	604b      	str	r3, [r1, #4]
 8004268:	e006      	b.n	8004278 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800426a:	4b16      	ldr	r3, [pc, #88]	@ (80042c4 <HAL_GPIO_Init+0x2d0>)
 800426c:	685a      	ldr	r2, [r3, #4]
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	43db      	mvns	r3, r3
 8004272:	4914      	ldr	r1, [pc, #80]	@ (80042c4 <HAL_GPIO_Init+0x2d0>)
 8004274:	4013      	ands	r3, r2
 8004276:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d021      	beq.n	80042c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004284:	4b0f      	ldr	r3, [pc, #60]	@ (80042c4 <HAL_GPIO_Init+0x2d0>)
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	490e      	ldr	r1, [pc, #56]	@ (80042c4 <HAL_GPIO_Init+0x2d0>)
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	4313      	orrs	r3, r2
 800428e:	600b      	str	r3, [r1, #0]
 8004290:	e021      	b.n	80042d6 <HAL_GPIO_Init+0x2e2>
 8004292:	bf00      	nop
 8004294:	10320000 	.word	0x10320000
 8004298:	10310000 	.word	0x10310000
 800429c:	10220000 	.word	0x10220000
 80042a0:	10210000 	.word	0x10210000
 80042a4:	10120000 	.word	0x10120000
 80042a8:	10110000 	.word	0x10110000
 80042ac:	40021000 	.word	0x40021000
 80042b0:	40010000 	.word	0x40010000
 80042b4:	40010800 	.word	0x40010800
 80042b8:	40010c00 	.word	0x40010c00
 80042bc:	40011000 	.word	0x40011000
 80042c0:	40011400 	.word	0x40011400
 80042c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80042c8:	4b0b      	ldr	r3, [pc, #44]	@ (80042f8 <HAL_GPIO_Init+0x304>)
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	43db      	mvns	r3, r3
 80042d0:	4909      	ldr	r1, [pc, #36]	@ (80042f8 <HAL_GPIO_Init+0x304>)
 80042d2:	4013      	ands	r3, r2
 80042d4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80042d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d8:	3301      	adds	r3, #1
 80042da:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e2:	fa22 f303 	lsr.w	r3, r2, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f47f ae8e 	bne.w	8004008 <HAL_GPIO_Init+0x14>
  }
}
 80042ec:	bf00      	nop
 80042ee:	bf00      	nop
 80042f0:	372c      	adds	r7, #44	@ 0x2c
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bc80      	pop	{r7}
 80042f6:	4770      	bx	lr
 80042f8:	40010400 	.word	0x40010400

080042fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	460b      	mov	r3, r1
 8004306:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	887b      	ldrh	r3, [r7, #2]
 800430e:	4013      	ands	r3, r2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d002      	beq.n	800431a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004314:	2301      	movs	r3, #1
 8004316:	73fb      	strb	r3, [r7, #15]
 8004318:	e001      	b.n	800431e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800431a:	2300      	movs	r3, #0
 800431c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800431e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004320:	4618      	mov	r0, r3
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	bc80      	pop	{r7}
 8004328:	4770      	bx	lr

0800432a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
 8004332:	460b      	mov	r3, r1
 8004334:	807b      	strh	r3, [r7, #2]
 8004336:	4613      	mov	r3, r2
 8004338:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800433a:	787b      	ldrb	r3, [r7, #1]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d003      	beq.n	8004348 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004340:	887a      	ldrh	r2, [r7, #2]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004346:	e003      	b.n	8004350 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004348:	887b      	ldrh	r3, [r7, #2]
 800434a:	041a      	lsls	r2, r3, #16
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	611a      	str	r2, [r3, #16]
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	bc80      	pop	{r7}
 8004358:	4770      	bx	lr

0800435a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800435a:	b480      	push	{r7}
 800435c:	b085      	sub	sp, #20
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
 8004362:	460b      	mov	r3, r1
 8004364:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800436c:	887a      	ldrh	r2, [r7, #2]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	4013      	ands	r3, r2
 8004372:	041a      	lsls	r2, r3, #16
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	43d9      	mvns	r1, r3
 8004378:	887b      	ldrh	r3, [r7, #2]
 800437a:	400b      	ands	r3, r1
 800437c:	431a      	orrs	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	611a      	str	r2, [r3, #16]
}
 8004382:	bf00      	nop
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	bc80      	pop	{r7}
 800438a:	4770      	bx	lr

0800438c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e272      	b.n	8004884 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f000 8087 	beq.w	80044ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043ac:	4b92      	ldr	r3, [pc, #584]	@ (80045f8 <HAL_RCC_OscConfig+0x26c>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f003 030c 	and.w	r3, r3, #12
 80043b4:	2b04      	cmp	r3, #4
 80043b6:	d00c      	beq.n	80043d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80043b8:	4b8f      	ldr	r3, [pc, #572]	@ (80045f8 <HAL_RCC_OscConfig+0x26c>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f003 030c 	and.w	r3, r3, #12
 80043c0:	2b08      	cmp	r3, #8
 80043c2:	d112      	bne.n	80043ea <HAL_RCC_OscConfig+0x5e>
 80043c4:	4b8c      	ldr	r3, [pc, #560]	@ (80045f8 <HAL_RCC_OscConfig+0x26c>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043d0:	d10b      	bne.n	80043ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d2:	4b89      	ldr	r3, [pc, #548]	@ (80045f8 <HAL_RCC_OscConfig+0x26c>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d06c      	beq.n	80044b8 <HAL_RCC_OscConfig+0x12c>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d168      	bne.n	80044b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e24c      	b.n	8004884 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043f2:	d106      	bne.n	8004402 <HAL_RCC_OscConfig+0x76>
 80043f4:	4b80      	ldr	r3, [pc, #512]	@ (80045f8 <HAL_RCC_OscConfig+0x26c>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a7f      	ldr	r2, [pc, #508]	@ (80045f8 <HAL_RCC_OscConfig+0x26c>)
 80043fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043fe:	6013      	str	r3, [r2, #0]
 8004400:	e02e      	b.n	8004460 <HAL_RCC_OscConfig+0xd4>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10c      	bne.n	8004424 <HAL_RCC_OscConfig+0x98>
 800440a:	4b7b      	ldr	r3, [pc, #492]	@ (80045f8 <HAL_RCC_OscConfig+0x26c>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a7a      	ldr	r2, [pc, #488]	@ (80045f8 <HAL_RCC_OscConfig+0x26c>)
 8004410:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004414:	6013      	str	r3, [r2, #0]
 8004416:	4b78      	ldr	r3, [pc, #480]	@ (80045f8 <HAL_RCC_OscConfig+0x26c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a77      	ldr	r2, [pc, #476]	@ (80045f8 <HAL_RCC_OscConfig+0x26c>)
 800441c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004420:	6013      	str	r3, [r2, #0]
 8004422:	e01d      	b.n	8004460 <HAL_RCC_OscConfig+0xd4>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800442c:	d10c      	bne.n	8004448 <HAL_RCC_OscConfig+0xbc>
 800442e:	4b72      	ldr	r3, [pc, #456]	@ (80045f8 <HAL_RCC_OscConfig+0x26c>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a71      	ldr	r2, [pc, #452]	@ (80045f8 <HAL_RCC_OscConfig+0x26c>)
 8004434:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004438:	6013      	str	r3, [r2, #0]
 800443a:	4b6f      	ldr	r3, [pc, #444]	@ (80045f8 <HAL_RCC_OscConfig+0x26c>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a6e      	ldr	r2, [pc, #440]	@ (80045f8 <HAL_RCC_OscConfig+0x26c>)
 8004440:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004444:	6013      	str	r3, [r2, #0]
 8004446:	e00b      	b.n	8004460 <HAL_RCC_OscConfig+0xd4>
 8004448:	4b6b      	ldr	r3, [pc, #428]	@ (80045f8 <HAL_RCC_OscConfig+0x26c>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a6a      	ldr	r2, [pc, #424]	@ (80045f8 <HAL_RCC_OscConfig+0x26c>)
 800444e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004452:	6013      	str	r3, [r2, #0]
 8004454:	4b68      	ldr	r3, [pc, #416]	@ (80045f8 <HAL_RCC_OscConfig+0x26c>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a67      	ldr	r2, [pc, #412]	@ (80045f8 <HAL_RCC_OscConfig+0x26c>)
 800445a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800445e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d013      	beq.n	8004490 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004468:	f7ff fa1e 	bl	80038a8 <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800446e:	e008      	b.n	8004482 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004470:	f7ff fa1a 	bl	80038a8 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b64      	cmp	r3, #100	@ 0x64
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e200      	b.n	8004884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004482:	4b5d      	ldr	r3, [pc, #372]	@ (80045f8 <HAL_RCC_OscConfig+0x26c>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d0f0      	beq.n	8004470 <HAL_RCC_OscConfig+0xe4>
 800448e:	e014      	b.n	80044ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004490:	f7ff fa0a 	bl	80038a8 <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004498:	f7ff fa06 	bl	80038a8 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b64      	cmp	r3, #100	@ 0x64
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e1ec      	b.n	8004884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044aa:	4b53      	ldr	r3, [pc, #332]	@ (80045f8 <HAL_RCC_OscConfig+0x26c>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1f0      	bne.n	8004498 <HAL_RCC_OscConfig+0x10c>
 80044b6:	e000      	b.n	80044ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d063      	beq.n	800458e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044c6:	4b4c      	ldr	r3, [pc, #304]	@ (80045f8 <HAL_RCC_OscConfig+0x26c>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f003 030c 	and.w	r3, r3, #12
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00b      	beq.n	80044ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80044d2:	4b49      	ldr	r3, [pc, #292]	@ (80045f8 <HAL_RCC_OscConfig+0x26c>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f003 030c 	and.w	r3, r3, #12
 80044da:	2b08      	cmp	r3, #8
 80044dc:	d11c      	bne.n	8004518 <HAL_RCC_OscConfig+0x18c>
 80044de:	4b46      	ldr	r3, [pc, #280]	@ (80045f8 <HAL_RCC_OscConfig+0x26c>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d116      	bne.n	8004518 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ea:	4b43      	ldr	r3, [pc, #268]	@ (80045f8 <HAL_RCC_OscConfig+0x26c>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d005      	beq.n	8004502 <HAL_RCC_OscConfig+0x176>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d001      	beq.n	8004502 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e1c0      	b.n	8004884 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004502:	4b3d      	ldr	r3, [pc, #244]	@ (80045f8 <HAL_RCC_OscConfig+0x26c>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	4939      	ldr	r1, [pc, #228]	@ (80045f8 <HAL_RCC_OscConfig+0x26c>)
 8004512:	4313      	orrs	r3, r2
 8004514:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004516:	e03a      	b.n	800458e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d020      	beq.n	8004562 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004520:	4b36      	ldr	r3, [pc, #216]	@ (80045fc <HAL_RCC_OscConfig+0x270>)
 8004522:	2201      	movs	r2, #1
 8004524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004526:	f7ff f9bf 	bl	80038a8 <HAL_GetTick>
 800452a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800452c:	e008      	b.n	8004540 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800452e:	f7ff f9bb 	bl	80038a8 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d901      	bls.n	8004540 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e1a1      	b.n	8004884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004540:	4b2d      	ldr	r3, [pc, #180]	@ (80045f8 <HAL_RCC_OscConfig+0x26c>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d0f0      	beq.n	800452e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800454c:	4b2a      	ldr	r3, [pc, #168]	@ (80045f8 <HAL_RCC_OscConfig+0x26c>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	695b      	ldr	r3, [r3, #20]
 8004558:	00db      	lsls	r3, r3, #3
 800455a:	4927      	ldr	r1, [pc, #156]	@ (80045f8 <HAL_RCC_OscConfig+0x26c>)
 800455c:	4313      	orrs	r3, r2
 800455e:	600b      	str	r3, [r1, #0]
 8004560:	e015      	b.n	800458e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004562:	4b26      	ldr	r3, [pc, #152]	@ (80045fc <HAL_RCC_OscConfig+0x270>)
 8004564:	2200      	movs	r2, #0
 8004566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004568:	f7ff f99e 	bl	80038a8 <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004570:	f7ff f99a 	bl	80038a8 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e180      	b.n	8004884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004582:	4b1d      	ldr	r3, [pc, #116]	@ (80045f8 <HAL_RCC_OscConfig+0x26c>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1f0      	bne.n	8004570 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0308 	and.w	r3, r3, #8
 8004596:	2b00      	cmp	r3, #0
 8004598:	d03a      	beq.n	8004610 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d019      	beq.n	80045d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045a2:	4b17      	ldr	r3, [pc, #92]	@ (8004600 <HAL_RCC_OscConfig+0x274>)
 80045a4:	2201      	movs	r2, #1
 80045a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045a8:	f7ff f97e 	bl	80038a8 <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045b0:	f7ff f97a 	bl	80038a8 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e160      	b.n	8004884 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045c2:	4b0d      	ldr	r3, [pc, #52]	@ (80045f8 <HAL_RCC_OscConfig+0x26c>)
 80045c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0f0      	beq.n	80045b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80045ce:	2001      	movs	r0, #1
 80045d0:	f000 fafe 	bl	8004bd0 <RCC_Delay>
 80045d4:	e01c      	b.n	8004610 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004600 <HAL_RCC_OscConfig+0x274>)
 80045d8:	2200      	movs	r2, #0
 80045da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045dc:	f7ff f964 	bl	80038a8 <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045e2:	e00f      	b.n	8004604 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045e4:	f7ff f960 	bl	80038a8 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d908      	bls.n	8004604 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e146      	b.n	8004884 <HAL_RCC_OscConfig+0x4f8>
 80045f6:	bf00      	nop
 80045f8:	40021000 	.word	0x40021000
 80045fc:	42420000 	.word	0x42420000
 8004600:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004604:	4b92      	ldr	r3, [pc, #584]	@ (8004850 <HAL_RCC_OscConfig+0x4c4>)
 8004606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1e9      	bne.n	80045e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0304 	and.w	r3, r3, #4
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 80a6 	beq.w	800476a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800461e:	2300      	movs	r3, #0
 8004620:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004622:	4b8b      	ldr	r3, [pc, #556]	@ (8004850 <HAL_RCC_OscConfig+0x4c4>)
 8004624:	69db      	ldr	r3, [r3, #28]
 8004626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d10d      	bne.n	800464a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800462e:	4b88      	ldr	r3, [pc, #544]	@ (8004850 <HAL_RCC_OscConfig+0x4c4>)
 8004630:	69db      	ldr	r3, [r3, #28]
 8004632:	4a87      	ldr	r2, [pc, #540]	@ (8004850 <HAL_RCC_OscConfig+0x4c4>)
 8004634:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004638:	61d3      	str	r3, [r2, #28]
 800463a:	4b85      	ldr	r3, [pc, #532]	@ (8004850 <HAL_RCC_OscConfig+0x4c4>)
 800463c:	69db      	ldr	r3, [r3, #28]
 800463e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004642:	60bb      	str	r3, [r7, #8]
 8004644:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004646:	2301      	movs	r3, #1
 8004648:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800464a:	4b82      	ldr	r3, [pc, #520]	@ (8004854 <HAL_RCC_OscConfig+0x4c8>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004652:	2b00      	cmp	r3, #0
 8004654:	d118      	bne.n	8004688 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004656:	4b7f      	ldr	r3, [pc, #508]	@ (8004854 <HAL_RCC_OscConfig+0x4c8>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a7e      	ldr	r2, [pc, #504]	@ (8004854 <HAL_RCC_OscConfig+0x4c8>)
 800465c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004660:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004662:	f7ff f921 	bl	80038a8 <HAL_GetTick>
 8004666:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004668:	e008      	b.n	800467c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800466a:	f7ff f91d 	bl	80038a8 <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	2b64      	cmp	r3, #100	@ 0x64
 8004676:	d901      	bls.n	800467c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e103      	b.n	8004884 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800467c:	4b75      	ldr	r3, [pc, #468]	@ (8004854 <HAL_RCC_OscConfig+0x4c8>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0f0      	beq.n	800466a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d106      	bne.n	800469e <HAL_RCC_OscConfig+0x312>
 8004690:	4b6f      	ldr	r3, [pc, #444]	@ (8004850 <HAL_RCC_OscConfig+0x4c4>)
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	4a6e      	ldr	r2, [pc, #440]	@ (8004850 <HAL_RCC_OscConfig+0x4c4>)
 8004696:	f043 0301 	orr.w	r3, r3, #1
 800469a:	6213      	str	r3, [r2, #32]
 800469c:	e02d      	b.n	80046fa <HAL_RCC_OscConfig+0x36e>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10c      	bne.n	80046c0 <HAL_RCC_OscConfig+0x334>
 80046a6:	4b6a      	ldr	r3, [pc, #424]	@ (8004850 <HAL_RCC_OscConfig+0x4c4>)
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	4a69      	ldr	r2, [pc, #420]	@ (8004850 <HAL_RCC_OscConfig+0x4c4>)
 80046ac:	f023 0301 	bic.w	r3, r3, #1
 80046b0:	6213      	str	r3, [r2, #32]
 80046b2:	4b67      	ldr	r3, [pc, #412]	@ (8004850 <HAL_RCC_OscConfig+0x4c4>)
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	4a66      	ldr	r2, [pc, #408]	@ (8004850 <HAL_RCC_OscConfig+0x4c4>)
 80046b8:	f023 0304 	bic.w	r3, r3, #4
 80046bc:	6213      	str	r3, [r2, #32]
 80046be:	e01c      	b.n	80046fa <HAL_RCC_OscConfig+0x36e>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	2b05      	cmp	r3, #5
 80046c6:	d10c      	bne.n	80046e2 <HAL_RCC_OscConfig+0x356>
 80046c8:	4b61      	ldr	r3, [pc, #388]	@ (8004850 <HAL_RCC_OscConfig+0x4c4>)
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	4a60      	ldr	r2, [pc, #384]	@ (8004850 <HAL_RCC_OscConfig+0x4c4>)
 80046ce:	f043 0304 	orr.w	r3, r3, #4
 80046d2:	6213      	str	r3, [r2, #32]
 80046d4:	4b5e      	ldr	r3, [pc, #376]	@ (8004850 <HAL_RCC_OscConfig+0x4c4>)
 80046d6:	6a1b      	ldr	r3, [r3, #32]
 80046d8:	4a5d      	ldr	r2, [pc, #372]	@ (8004850 <HAL_RCC_OscConfig+0x4c4>)
 80046da:	f043 0301 	orr.w	r3, r3, #1
 80046de:	6213      	str	r3, [r2, #32]
 80046e0:	e00b      	b.n	80046fa <HAL_RCC_OscConfig+0x36e>
 80046e2:	4b5b      	ldr	r3, [pc, #364]	@ (8004850 <HAL_RCC_OscConfig+0x4c4>)
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	4a5a      	ldr	r2, [pc, #360]	@ (8004850 <HAL_RCC_OscConfig+0x4c4>)
 80046e8:	f023 0301 	bic.w	r3, r3, #1
 80046ec:	6213      	str	r3, [r2, #32]
 80046ee:	4b58      	ldr	r3, [pc, #352]	@ (8004850 <HAL_RCC_OscConfig+0x4c4>)
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	4a57      	ldr	r2, [pc, #348]	@ (8004850 <HAL_RCC_OscConfig+0x4c4>)
 80046f4:	f023 0304 	bic.w	r3, r3, #4
 80046f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d015      	beq.n	800472e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004702:	f7ff f8d1 	bl	80038a8 <HAL_GetTick>
 8004706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004708:	e00a      	b.n	8004720 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800470a:	f7ff f8cd 	bl	80038a8 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004718:	4293      	cmp	r3, r2
 800471a:	d901      	bls.n	8004720 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e0b1      	b.n	8004884 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004720:	4b4b      	ldr	r3, [pc, #300]	@ (8004850 <HAL_RCC_OscConfig+0x4c4>)
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	f003 0302 	and.w	r3, r3, #2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d0ee      	beq.n	800470a <HAL_RCC_OscConfig+0x37e>
 800472c:	e014      	b.n	8004758 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800472e:	f7ff f8bb 	bl	80038a8 <HAL_GetTick>
 8004732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004734:	e00a      	b.n	800474c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004736:	f7ff f8b7 	bl	80038a8 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004744:	4293      	cmp	r3, r2
 8004746:	d901      	bls.n	800474c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e09b      	b.n	8004884 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800474c:	4b40      	ldr	r3, [pc, #256]	@ (8004850 <HAL_RCC_OscConfig+0x4c4>)
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1ee      	bne.n	8004736 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004758:	7dfb      	ldrb	r3, [r7, #23]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d105      	bne.n	800476a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800475e:	4b3c      	ldr	r3, [pc, #240]	@ (8004850 <HAL_RCC_OscConfig+0x4c4>)
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	4a3b      	ldr	r2, [pc, #236]	@ (8004850 <HAL_RCC_OscConfig+0x4c4>)
 8004764:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004768:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	69db      	ldr	r3, [r3, #28]
 800476e:	2b00      	cmp	r3, #0
 8004770:	f000 8087 	beq.w	8004882 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004774:	4b36      	ldr	r3, [pc, #216]	@ (8004850 <HAL_RCC_OscConfig+0x4c4>)
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f003 030c 	and.w	r3, r3, #12
 800477c:	2b08      	cmp	r3, #8
 800477e:	d061      	beq.n	8004844 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	69db      	ldr	r3, [r3, #28]
 8004784:	2b02      	cmp	r3, #2
 8004786:	d146      	bne.n	8004816 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004788:	4b33      	ldr	r3, [pc, #204]	@ (8004858 <HAL_RCC_OscConfig+0x4cc>)
 800478a:	2200      	movs	r2, #0
 800478c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800478e:	f7ff f88b 	bl	80038a8 <HAL_GetTick>
 8004792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004794:	e008      	b.n	80047a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004796:	f7ff f887 	bl	80038a8 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d901      	bls.n	80047a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e06d      	b.n	8004884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047a8:	4b29      	ldr	r3, [pc, #164]	@ (8004850 <HAL_RCC_OscConfig+0x4c4>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1f0      	bne.n	8004796 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047bc:	d108      	bne.n	80047d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80047be:	4b24      	ldr	r3, [pc, #144]	@ (8004850 <HAL_RCC_OscConfig+0x4c4>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	4921      	ldr	r1, [pc, #132]	@ (8004850 <HAL_RCC_OscConfig+0x4c4>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047d0:	4b1f      	ldr	r3, [pc, #124]	@ (8004850 <HAL_RCC_OscConfig+0x4c4>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a19      	ldr	r1, [r3, #32]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e0:	430b      	orrs	r3, r1
 80047e2:	491b      	ldr	r1, [pc, #108]	@ (8004850 <HAL_RCC_OscConfig+0x4c4>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004858 <HAL_RCC_OscConfig+0x4cc>)
 80047ea:	2201      	movs	r2, #1
 80047ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ee:	f7ff f85b 	bl	80038a8 <HAL_GetTick>
 80047f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047f4:	e008      	b.n	8004808 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047f6:	f7ff f857 	bl	80038a8 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	2b02      	cmp	r3, #2
 8004802:	d901      	bls.n	8004808 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e03d      	b.n	8004884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004808:	4b11      	ldr	r3, [pc, #68]	@ (8004850 <HAL_RCC_OscConfig+0x4c4>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d0f0      	beq.n	80047f6 <HAL_RCC_OscConfig+0x46a>
 8004814:	e035      	b.n	8004882 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004816:	4b10      	ldr	r3, [pc, #64]	@ (8004858 <HAL_RCC_OscConfig+0x4cc>)
 8004818:	2200      	movs	r2, #0
 800481a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800481c:	f7ff f844 	bl	80038a8 <HAL_GetTick>
 8004820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004822:	e008      	b.n	8004836 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004824:	f7ff f840 	bl	80038a8 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b02      	cmp	r3, #2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e026      	b.n	8004884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004836:	4b06      	ldr	r3, [pc, #24]	@ (8004850 <HAL_RCC_OscConfig+0x4c4>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1f0      	bne.n	8004824 <HAL_RCC_OscConfig+0x498>
 8004842:	e01e      	b.n	8004882 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	69db      	ldr	r3, [r3, #28]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d107      	bne.n	800485c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e019      	b.n	8004884 <HAL_RCC_OscConfig+0x4f8>
 8004850:	40021000 	.word	0x40021000
 8004854:	40007000 	.word	0x40007000
 8004858:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800485c:	4b0b      	ldr	r3, [pc, #44]	@ (800488c <HAL_RCC_OscConfig+0x500>)
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	429a      	cmp	r2, r3
 800486e:	d106      	bne.n	800487e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800487a:	429a      	cmp	r2, r3
 800487c:	d001      	beq.n	8004882 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e000      	b.n	8004884 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3718      	adds	r7, #24
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	40021000 	.word	0x40021000

08004890 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d101      	bne.n	80048a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e0d0      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048a4:	4b6a      	ldr	r3, [pc, #424]	@ (8004a50 <HAL_RCC_ClockConfig+0x1c0>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0307 	and.w	r3, r3, #7
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d910      	bls.n	80048d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048b2:	4b67      	ldr	r3, [pc, #412]	@ (8004a50 <HAL_RCC_ClockConfig+0x1c0>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f023 0207 	bic.w	r2, r3, #7
 80048ba:	4965      	ldr	r1, [pc, #404]	@ (8004a50 <HAL_RCC_ClockConfig+0x1c0>)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	4313      	orrs	r3, r2
 80048c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048c2:	4b63      	ldr	r3, [pc, #396]	@ (8004a50 <HAL_RCC_ClockConfig+0x1c0>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0307 	and.w	r3, r3, #7
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d001      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e0b8      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0302 	and.w	r3, r3, #2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d020      	beq.n	8004922 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d005      	beq.n	80048f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048ec:	4b59      	ldr	r3, [pc, #356]	@ (8004a54 <HAL_RCC_ClockConfig+0x1c4>)
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	4a58      	ldr	r2, [pc, #352]	@ (8004a54 <HAL_RCC_ClockConfig+0x1c4>)
 80048f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80048f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0308 	and.w	r3, r3, #8
 8004900:	2b00      	cmp	r3, #0
 8004902:	d005      	beq.n	8004910 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004904:	4b53      	ldr	r3, [pc, #332]	@ (8004a54 <HAL_RCC_ClockConfig+0x1c4>)
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	4a52      	ldr	r2, [pc, #328]	@ (8004a54 <HAL_RCC_ClockConfig+0x1c4>)
 800490a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800490e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004910:	4b50      	ldr	r3, [pc, #320]	@ (8004a54 <HAL_RCC_ClockConfig+0x1c4>)
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	494d      	ldr	r1, [pc, #308]	@ (8004a54 <HAL_RCC_ClockConfig+0x1c4>)
 800491e:	4313      	orrs	r3, r2
 8004920:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d040      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d107      	bne.n	8004946 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004936:	4b47      	ldr	r3, [pc, #284]	@ (8004a54 <HAL_RCC_ClockConfig+0x1c4>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d115      	bne.n	800496e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e07f      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	2b02      	cmp	r3, #2
 800494c:	d107      	bne.n	800495e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800494e:	4b41      	ldr	r3, [pc, #260]	@ (8004a54 <HAL_RCC_ClockConfig+0x1c4>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d109      	bne.n	800496e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e073      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800495e:	4b3d      	ldr	r3, [pc, #244]	@ (8004a54 <HAL_RCC_ClockConfig+0x1c4>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e06b      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800496e:	4b39      	ldr	r3, [pc, #228]	@ (8004a54 <HAL_RCC_ClockConfig+0x1c4>)
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f023 0203 	bic.w	r2, r3, #3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	4936      	ldr	r1, [pc, #216]	@ (8004a54 <HAL_RCC_ClockConfig+0x1c4>)
 800497c:	4313      	orrs	r3, r2
 800497e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004980:	f7fe ff92 	bl	80038a8 <HAL_GetTick>
 8004984:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004986:	e00a      	b.n	800499e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004988:	f7fe ff8e 	bl	80038a8 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004996:	4293      	cmp	r3, r2
 8004998:	d901      	bls.n	800499e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e053      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800499e:	4b2d      	ldr	r3, [pc, #180]	@ (8004a54 <HAL_RCC_ClockConfig+0x1c4>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f003 020c 	and.w	r2, r3, #12
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d1eb      	bne.n	8004988 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049b0:	4b27      	ldr	r3, [pc, #156]	@ (8004a50 <HAL_RCC_ClockConfig+0x1c0>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0307 	and.w	r3, r3, #7
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d210      	bcs.n	80049e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049be:	4b24      	ldr	r3, [pc, #144]	@ (8004a50 <HAL_RCC_ClockConfig+0x1c0>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f023 0207 	bic.w	r2, r3, #7
 80049c6:	4922      	ldr	r1, [pc, #136]	@ (8004a50 <HAL_RCC_ClockConfig+0x1c0>)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ce:	4b20      	ldr	r3, [pc, #128]	@ (8004a50 <HAL_RCC_ClockConfig+0x1c0>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0307 	and.w	r3, r3, #7
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d001      	beq.n	80049e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e032      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d008      	beq.n	80049fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049ec:	4b19      	ldr	r3, [pc, #100]	@ (8004a54 <HAL_RCC_ClockConfig+0x1c4>)
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	4916      	ldr	r1, [pc, #88]	@ (8004a54 <HAL_RCC_ClockConfig+0x1c4>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0308 	and.w	r3, r3, #8
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d009      	beq.n	8004a1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a0a:	4b12      	ldr	r3, [pc, #72]	@ (8004a54 <HAL_RCC_ClockConfig+0x1c4>)
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	490e      	ldr	r1, [pc, #56]	@ (8004a54 <HAL_RCC_ClockConfig+0x1c4>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a1e:	f000 f821 	bl	8004a64 <HAL_RCC_GetSysClockFreq>
 8004a22:	4602      	mov	r2, r0
 8004a24:	4b0b      	ldr	r3, [pc, #44]	@ (8004a54 <HAL_RCC_ClockConfig+0x1c4>)
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	091b      	lsrs	r3, r3, #4
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	490a      	ldr	r1, [pc, #40]	@ (8004a58 <HAL_RCC_ClockConfig+0x1c8>)
 8004a30:	5ccb      	ldrb	r3, [r1, r3]
 8004a32:	fa22 f303 	lsr.w	r3, r2, r3
 8004a36:	4a09      	ldr	r2, [pc, #36]	@ (8004a5c <HAL_RCC_ClockConfig+0x1cc>)
 8004a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a3a:	4b09      	ldr	r3, [pc, #36]	@ (8004a60 <HAL_RCC_ClockConfig+0x1d0>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7fc febe 	bl	80017c0 <HAL_InitTick>

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	40022000 	.word	0x40022000
 8004a54:	40021000 	.word	0x40021000
 8004a58:	0800a0e4 	.word	0x0800a0e4
 8004a5c:	200000a4 	.word	0x200000a4
 8004a60:	2000014c 	.word	0x2000014c

08004a64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b087      	sub	sp, #28
 8004a68:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	60fb      	str	r3, [r7, #12]
 8004a6e:	2300      	movs	r3, #0
 8004a70:	60bb      	str	r3, [r7, #8]
 8004a72:	2300      	movs	r3, #0
 8004a74:	617b      	str	r3, [r7, #20]
 8004a76:	2300      	movs	r3, #0
 8004a78:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8004af8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f003 030c 	and.w	r3, r3, #12
 8004a8a:	2b04      	cmp	r3, #4
 8004a8c:	d002      	beq.n	8004a94 <HAL_RCC_GetSysClockFreq+0x30>
 8004a8e:	2b08      	cmp	r3, #8
 8004a90:	d003      	beq.n	8004a9a <HAL_RCC_GetSysClockFreq+0x36>
 8004a92:	e027      	b.n	8004ae4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a94:	4b19      	ldr	r3, [pc, #100]	@ (8004afc <HAL_RCC_GetSysClockFreq+0x98>)
 8004a96:	613b      	str	r3, [r7, #16]
      break;
 8004a98:	e027      	b.n	8004aea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	0c9b      	lsrs	r3, r3, #18
 8004a9e:	f003 030f 	and.w	r3, r3, #15
 8004aa2:	4a17      	ldr	r2, [pc, #92]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004aa4:	5cd3      	ldrb	r3, [r2, r3]
 8004aa6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d010      	beq.n	8004ad4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004ab2:	4b11      	ldr	r3, [pc, #68]	@ (8004af8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	0c5b      	lsrs	r3, r3, #17
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	4a11      	ldr	r2, [pc, #68]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004abe:	5cd3      	ldrb	r3, [r2, r3]
 8004ac0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a0d      	ldr	r2, [pc, #52]	@ (8004afc <HAL_RCC_GetSysClockFreq+0x98>)
 8004ac6:	fb03 f202 	mul.w	r2, r3, r2
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad0:	617b      	str	r3, [r7, #20]
 8004ad2:	e004      	b.n	8004ade <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a0c      	ldr	r2, [pc, #48]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004ad8:	fb02 f303 	mul.w	r3, r2, r3
 8004adc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	613b      	str	r3, [r7, #16]
      break;
 8004ae2:	e002      	b.n	8004aea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ae4:	4b05      	ldr	r3, [pc, #20]	@ (8004afc <HAL_RCC_GetSysClockFreq+0x98>)
 8004ae6:	613b      	str	r3, [r7, #16]
      break;
 8004ae8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004aea:	693b      	ldr	r3, [r7, #16]
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	371c      	adds	r7, #28
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bc80      	pop	{r7}
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	40021000 	.word	0x40021000
 8004afc:	007a1200 	.word	0x007a1200
 8004b00:	0800a140 	.word	0x0800a140
 8004b04:	0800a150 	.word	0x0800a150
 8004b08:	003d0900 	.word	0x003d0900

08004b0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b10:	4b02      	ldr	r3, [pc, #8]	@ (8004b1c <HAL_RCC_GetHCLKFreq+0x10>)
 8004b12:	681b      	ldr	r3, [r3, #0]
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bc80      	pop	{r7}
 8004b1a:	4770      	bx	lr
 8004b1c:	200000a4 	.word	0x200000a4

08004b20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b24:	f7ff fff2 	bl	8004b0c <HAL_RCC_GetHCLKFreq>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	4b05      	ldr	r3, [pc, #20]	@ (8004b40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	0a1b      	lsrs	r3, r3, #8
 8004b30:	f003 0307 	and.w	r3, r3, #7
 8004b34:	4903      	ldr	r1, [pc, #12]	@ (8004b44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b36:	5ccb      	ldrb	r3, [r1, r3]
 8004b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	40021000 	.word	0x40021000
 8004b44:	0800a0f4 	.word	0x0800a0f4

08004b48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b4c:	f7ff ffde 	bl	8004b0c <HAL_RCC_GetHCLKFreq>
 8004b50:	4602      	mov	r2, r0
 8004b52:	4b05      	ldr	r3, [pc, #20]	@ (8004b68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	0adb      	lsrs	r3, r3, #11
 8004b58:	f003 0307 	and.w	r3, r3, #7
 8004b5c:	4903      	ldr	r1, [pc, #12]	@ (8004b6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b5e:	5ccb      	ldrb	r3, [r1, r3]
 8004b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	40021000 	.word	0x40021000
 8004b6c:	0800a0f4 	.word	0x0800a0f4

08004b70 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	220f      	movs	r2, #15
 8004b7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b80:	4b11      	ldr	r3, [pc, #68]	@ (8004bc8 <HAL_RCC_GetClockConfig+0x58>)
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f003 0203 	and.w	r2, r3, #3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8004bc8 <HAL_RCC_GetClockConfig+0x58>)
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004b98:	4b0b      	ldr	r3, [pc, #44]	@ (8004bc8 <HAL_RCC_GetClockConfig+0x58>)
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004ba4:	4b08      	ldr	r3, [pc, #32]	@ (8004bc8 <HAL_RCC_GetClockConfig+0x58>)
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	08db      	lsrs	r3, r3, #3
 8004baa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004bb2:	4b06      	ldr	r3, [pc, #24]	@ (8004bcc <HAL_RCC_GetClockConfig+0x5c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0207 	and.w	r2, r3, #7
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004bbe:	bf00      	nop
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bc80      	pop	{r7}
 8004bc6:	4770      	bx	lr
 8004bc8:	40021000 	.word	0x40021000
 8004bcc:	40022000 	.word	0x40022000

08004bd0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8004c04 <RCC_Delay+0x34>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a0a      	ldr	r2, [pc, #40]	@ (8004c08 <RCC_Delay+0x38>)
 8004bde:	fba2 2303 	umull	r2, r3, r2, r3
 8004be2:	0a5b      	lsrs	r3, r3, #9
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	fb02 f303 	mul.w	r3, r2, r3
 8004bea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004bec:	bf00      	nop
  }
  while (Delay --);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	1e5a      	subs	r2, r3, #1
 8004bf2:	60fa      	str	r2, [r7, #12]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1f9      	bne.n	8004bec <RCC_Delay+0x1c>
}
 8004bf8:	bf00      	nop
 8004bfa:	bf00      	nop
 8004bfc:	3714      	adds	r7, #20
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bc80      	pop	{r7}
 8004c02:	4770      	bx	lr
 8004c04:	200000a4 	.word	0x200000a4
 8004c08:	10624dd3 	.word	0x10624dd3

08004c0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e041      	b.n	8004ca2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d106      	bne.n	8004c38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f839 	bl	8004caa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	3304      	adds	r3, #4
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	f000 f99c 	bl	8004f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3708      	adds	r7, #8
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b083      	sub	sp, #12
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004cb2:	bf00      	nop
 8004cb4:	370c      	adds	r7, #12
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bc80      	pop	{r7}
 8004cba:	4770      	bx	lr

08004cbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d001      	beq.n	8004cd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e03a      	b.n	8004d4a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68da      	ldr	r2, [r3, #12]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f042 0201 	orr.w	r2, r2, #1
 8004cea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a18      	ldr	r2, [pc, #96]	@ (8004d54 <HAL_TIM_Base_Start_IT+0x98>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d00e      	beq.n	8004d14 <HAL_TIM_Base_Start_IT+0x58>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cfe:	d009      	beq.n	8004d14 <HAL_TIM_Base_Start_IT+0x58>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a14      	ldr	r2, [pc, #80]	@ (8004d58 <HAL_TIM_Base_Start_IT+0x9c>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d004      	beq.n	8004d14 <HAL_TIM_Base_Start_IT+0x58>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a13      	ldr	r2, [pc, #76]	@ (8004d5c <HAL_TIM_Base_Start_IT+0xa0>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d111      	bne.n	8004d38 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f003 0307 	and.w	r3, r3, #7
 8004d1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2b06      	cmp	r3, #6
 8004d24:	d010      	beq.n	8004d48 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f042 0201 	orr.w	r2, r2, #1
 8004d34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d36:	e007      	b.n	8004d48 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f042 0201 	orr.w	r2, r2, #1
 8004d46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3714      	adds	r7, #20
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bc80      	pop	{r7}
 8004d52:	4770      	bx	lr
 8004d54:	40012c00 	.word	0x40012c00
 8004d58:	40000400 	.word	0x40000400
 8004d5c:	40000800 	.word	0x40000800

08004d60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d020      	beq.n	8004dc4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d01b      	beq.n	8004dc4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f06f 0202 	mvn.w	r2, #2
 8004d94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	f003 0303 	and.w	r3, r3, #3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d003      	beq.n	8004db2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f8d1 	bl	8004f52 <HAL_TIM_IC_CaptureCallback>
 8004db0:	e005      	b.n	8004dbe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 f8c4 	bl	8004f40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 f8d3 	bl	8004f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	f003 0304 	and.w	r3, r3, #4
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d020      	beq.n	8004e10 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f003 0304 	and.w	r3, r3, #4
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d01b      	beq.n	8004e10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f06f 0204 	mvn.w	r2, #4
 8004de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2202      	movs	r2, #2
 8004de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f8ab 	bl	8004f52 <HAL_TIM_IC_CaptureCallback>
 8004dfc:	e005      	b.n	8004e0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 f89e 	bl	8004f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 f8ad 	bl	8004f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	f003 0308 	and.w	r3, r3, #8
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d020      	beq.n	8004e5c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f003 0308 	and.w	r3, r3, #8
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d01b      	beq.n	8004e5c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f06f 0208 	mvn.w	r2, #8
 8004e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2204      	movs	r2, #4
 8004e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	69db      	ldr	r3, [r3, #28]
 8004e3a:	f003 0303 	and.w	r3, r3, #3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d003      	beq.n	8004e4a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f885 	bl	8004f52 <HAL_TIM_IC_CaptureCallback>
 8004e48:	e005      	b.n	8004e56 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f878 	bl	8004f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f000 f887 	bl	8004f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	f003 0310 	and.w	r3, r3, #16
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d020      	beq.n	8004ea8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f003 0310 	and.w	r3, r3, #16
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d01b      	beq.n	8004ea8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f06f 0210 	mvn.w	r2, #16
 8004e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2208      	movs	r2, #8
 8004e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d003      	beq.n	8004e96 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f85f 	bl	8004f52 <HAL_TIM_IC_CaptureCallback>
 8004e94:	e005      	b.n	8004ea2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f852 	bl	8004f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 f861 	bl	8004f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00c      	beq.n	8004ecc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d007      	beq.n	8004ecc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f06f 0201 	mvn.w	r2, #1
 8004ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7fc fb9e 	bl	8001608 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00c      	beq.n	8004ef0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d007      	beq.n	8004ef0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f8c3 	bl	8005076 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00c      	beq.n	8004f14 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d007      	beq.n	8004f14 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f831 	bl	8004f76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	f003 0320 	and.w	r3, r3, #32
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00c      	beq.n	8004f38 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f003 0320 	and.w	r3, r3, #32
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d007      	beq.n	8004f38 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f06f 0220 	mvn.w	r2, #32
 8004f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f896 	bl	8005064 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f38:	bf00      	nop
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bc80      	pop	{r7}
 8004f50:	4770      	bx	lr

08004f52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f52:	b480      	push	{r7}
 8004f54:	b083      	sub	sp, #12
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f5a:	bf00      	nop
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bc80      	pop	{r7}
 8004f62:	4770      	bx	lr

08004f64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bc80      	pop	{r7}
 8004f74:	4770      	bx	lr

08004f76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b083      	sub	sp, #12
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f7e:	bf00      	nop
 8004f80:	370c      	adds	r7, #12
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bc80      	pop	{r7}
 8004f86:	4770      	bx	lr

08004f88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a2f      	ldr	r2, [pc, #188]	@ (8005058 <TIM_Base_SetConfig+0xd0>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d00b      	beq.n	8004fb8 <TIM_Base_SetConfig+0x30>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fa6:	d007      	beq.n	8004fb8 <TIM_Base_SetConfig+0x30>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a2c      	ldr	r2, [pc, #176]	@ (800505c <TIM_Base_SetConfig+0xd4>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d003      	beq.n	8004fb8 <TIM_Base_SetConfig+0x30>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a2b      	ldr	r2, [pc, #172]	@ (8005060 <TIM_Base_SetConfig+0xd8>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d108      	bne.n	8004fca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a22      	ldr	r2, [pc, #136]	@ (8005058 <TIM_Base_SetConfig+0xd0>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d00b      	beq.n	8004fea <TIM_Base_SetConfig+0x62>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fd8:	d007      	beq.n	8004fea <TIM_Base_SetConfig+0x62>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a1f      	ldr	r2, [pc, #124]	@ (800505c <TIM_Base_SetConfig+0xd4>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d003      	beq.n	8004fea <TIM_Base_SetConfig+0x62>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a1e      	ldr	r2, [pc, #120]	@ (8005060 <TIM_Base_SetConfig+0xd8>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d108      	bne.n	8004ffc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ff0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	4313      	orrs	r3, r2
 8005008:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	689a      	ldr	r2, [r3, #8]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a0d      	ldr	r2, [pc, #52]	@ (8005058 <TIM_Base_SetConfig+0xd0>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d103      	bne.n	8005030 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	691a      	ldr	r2, [r3, #16]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d005      	beq.n	800504e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	f023 0201 	bic.w	r2, r3, #1
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	611a      	str	r2, [r3, #16]
  }
}
 800504e:	bf00      	nop
 8005050:	3714      	adds	r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	bc80      	pop	{r7}
 8005056:	4770      	bx	lr
 8005058:	40012c00 	.word	0x40012c00
 800505c:	40000400 	.word	0x40000400
 8005060:	40000800 	.word	0x40000800

08005064 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	bc80      	pop	{r7}
 8005074:	4770      	bx	lr

08005076 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005076:	b480      	push	{r7}
 8005078:	b083      	sub	sp, #12
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800507e:	bf00      	nop
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	bc80      	pop	{r7}
 8005086:	4770      	bx	lr

08005088 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e042      	b.n	8005120 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d106      	bne.n	80050b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f7fc fafa 	bl	80016a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2224      	movs	r2, #36	@ 0x24
 80050b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68da      	ldr	r2, [r3, #12]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 fdb7 	bl	8005c40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	691a      	ldr	r2, [r3, #16]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80050e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	695a      	ldr	r2, [r3, #20]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80050f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68da      	ldr	r2, [r3, #12]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005100:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2220      	movs	r2, #32
 800510c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2220      	movs	r2, #32
 8005114:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3708      	adds	r7, #8
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b08a      	sub	sp, #40	@ 0x28
 800512c:	af02      	add	r7, sp, #8
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	603b      	str	r3, [r7, #0]
 8005134:	4613      	mov	r3, r2
 8005136:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005138:	2300      	movs	r3, #0
 800513a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2b20      	cmp	r3, #32
 8005146:	d175      	bne.n	8005234 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d002      	beq.n	8005154 <HAL_UART_Transmit+0x2c>
 800514e:	88fb      	ldrh	r3, [r7, #6]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d101      	bne.n	8005158 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e06e      	b.n	8005236 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2221      	movs	r2, #33	@ 0x21
 8005162:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005166:	f7fe fb9f 	bl	80038a8 <HAL_GetTick>
 800516a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	88fa      	ldrh	r2, [r7, #6]
 8005170:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	88fa      	ldrh	r2, [r7, #6]
 8005176:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005180:	d108      	bne.n	8005194 <HAL_UART_Transmit+0x6c>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d104      	bne.n	8005194 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800518a:	2300      	movs	r3, #0
 800518c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	61bb      	str	r3, [r7, #24]
 8005192:	e003      	b.n	800519c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005198:	2300      	movs	r3, #0
 800519a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800519c:	e02e      	b.n	80051fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	9300      	str	r3, [sp, #0]
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	2200      	movs	r2, #0
 80051a6:	2180      	movs	r1, #128	@ 0x80
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 fb1c 	bl	80057e6 <UART_WaitOnFlagUntilTimeout>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d005      	beq.n	80051c0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2220      	movs	r2, #32
 80051b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e03a      	b.n	8005236 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d10b      	bne.n	80051de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	881b      	ldrh	r3, [r3, #0]
 80051ca:	461a      	mov	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	3302      	adds	r3, #2
 80051da:	61bb      	str	r3, [r7, #24]
 80051dc:	e007      	b.n	80051ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	781a      	ldrb	r2, [r3, #0]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	3301      	adds	r3, #1
 80051ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	3b01      	subs	r3, #1
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005200:	b29b      	uxth	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1cb      	bne.n	800519e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	9300      	str	r3, [sp, #0]
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	2200      	movs	r2, #0
 800520e:	2140      	movs	r1, #64	@ 0x40
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f000 fae8 	bl	80057e6 <UART_WaitOnFlagUntilTimeout>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d005      	beq.n	8005228 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2220      	movs	r2, #32
 8005220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e006      	b.n	8005236 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2220      	movs	r2, #32
 800522c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005230:	2300      	movs	r3, #0
 8005232:	e000      	b.n	8005236 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005234:	2302      	movs	r3, #2
  }
}
 8005236:	4618      	mov	r0, r3
 8005238:	3720      	adds	r7, #32
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b084      	sub	sp, #16
 8005242:	af00      	add	r7, sp, #0
 8005244:	60f8      	str	r0, [r7, #12]
 8005246:	60b9      	str	r1, [r7, #8]
 8005248:	4613      	mov	r3, r2
 800524a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b20      	cmp	r3, #32
 8005256:	d112      	bne.n	800527e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d002      	beq.n	8005264 <HAL_UART_Receive_IT+0x26>
 800525e:	88fb      	ldrh	r3, [r7, #6]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e00b      	b.n	8005280 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800526e:	88fb      	ldrh	r3, [r7, #6]
 8005270:	461a      	mov	r2, r3
 8005272:	68b9      	ldr	r1, [r7, #8]
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f000 fb0f 	bl	8005898 <UART_Start_Receive_IT>
 800527a:	4603      	mov	r3, r0
 800527c:	e000      	b.n	8005280 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800527e:	2302      	movs	r3, #2
  }
}
 8005280:	4618      	mov	r0, r3
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b0ba      	sub	sp, #232	@ 0xe8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80052ae:	2300      	movs	r3, #0
 80052b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80052b4:	2300      	movs	r3, #0
 80052b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80052ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052be:	f003 030f 	and.w	r3, r3, #15
 80052c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80052c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10f      	bne.n	80052ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052d2:	f003 0320 	and.w	r3, r3, #32
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d009      	beq.n	80052ee <HAL_UART_IRQHandler+0x66>
 80052da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052de:	f003 0320 	and.w	r3, r3, #32
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d003      	beq.n	80052ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 fbec 	bl	8005ac4 <UART_Receive_IT>
      return;
 80052ec:	e25b      	b.n	80057a6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80052ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	f000 80de 	beq.w	80054b4 <HAL_UART_IRQHandler+0x22c>
 80052f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052fc:	f003 0301 	and.w	r3, r3, #1
 8005300:	2b00      	cmp	r3, #0
 8005302:	d106      	bne.n	8005312 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005308:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800530c:	2b00      	cmp	r3, #0
 800530e:	f000 80d1 	beq.w	80054b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00b      	beq.n	8005336 <HAL_UART_IRQHandler+0xae>
 800531e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005322:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005326:	2b00      	cmp	r3, #0
 8005328:	d005      	beq.n	8005336 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800532e:	f043 0201 	orr.w	r2, r3, #1
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800533a:	f003 0304 	and.w	r3, r3, #4
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00b      	beq.n	800535a <HAL_UART_IRQHandler+0xd2>
 8005342:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005346:	f003 0301 	and.w	r3, r3, #1
 800534a:	2b00      	cmp	r3, #0
 800534c:	d005      	beq.n	800535a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005352:	f043 0202 	orr.w	r2, r3, #2
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800535a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00b      	beq.n	800537e <HAL_UART_IRQHandler+0xf6>
 8005366:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d005      	beq.n	800537e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005376:	f043 0204 	orr.w	r2, r3, #4
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800537e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005382:	f003 0308 	and.w	r3, r3, #8
 8005386:	2b00      	cmp	r3, #0
 8005388:	d011      	beq.n	80053ae <HAL_UART_IRQHandler+0x126>
 800538a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800538e:	f003 0320 	and.w	r3, r3, #32
 8005392:	2b00      	cmp	r3, #0
 8005394:	d105      	bne.n	80053a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005396:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800539a:	f003 0301 	and.w	r3, r3, #1
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d005      	beq.n	80053ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053a6:	f043 0208 	orr.w	r2, r3, #8
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f000 81f2 	beq.w	800579c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053bc:	f003 0320 	and.w	r3, r3, #32
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d008      	beq.n	80053d6 <HAL_UART_IRQHandler+0x14e>
 80053c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053c8:	f003 0320 	and.w	r3, r3, #32
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d002      	beq.n	80053d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 fb77 	bl	8005ac4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	695b      	ldr	r3, [r3, #20]
 80053dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	bf14      	ite	ne
 80053e4:	2301      	movne	r3, #1
 80053e6:	2300      	moveq	r3, #0
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053f2:	f003 0308 	and.w	r3, r3, #8
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d103      	bne.n	8005402 <HAL_UART_IRQHandler+0x17a>
 80053fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d04f      	beq.n	80054a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 fa81 	bl	800590a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005412:	2b00      	cmp	r3, #0
 8005414:	d041      	beq.n	800549a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	3314      	adds	r3, #20
 800541c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005420:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005424:	e853 3f00 	ldrex	r3, [r3]
 8005428:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800542c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005430:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005434:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	3314      	adds	r3, #20
 800543e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005442:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005446:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800544e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005452:	e841 2300 	strex	r3, r2, [r1]
 8005456:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800545a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1d9      	bne.n	8005416 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005466:	2b00      	cmp	r3, #0
 8005468:	d013      	beq.n	8005492 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800546e:	4a7e      	ldr	r2, [pc, #504]	@ (8005668 <HAL_UART_IRQHandler+0x3e0>)
 8005470:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005476:	4618      	mov	r0, r3
 8005478:	f7fe fb3a 	bl	8003af0 <HAL_DMA_Abort_IT>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d016      	beq.n	80054b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005486:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800548c:	4610      	mov	r0, r2
 800548e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005490:	e00e      	b.n	80054b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f993 	bl	80057be <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005498:	e00a      	b.n	80054b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 f98f 	bl	80057be <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a0:	e006      	b.n	80054b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f98b 	bl	80057be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80054ae:	e175      	b.n	800579c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054b0:	bf00      	nop
    return;
 80054b2:	e173      	b.n	800579c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	f040 814f 	bne.w	800575c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80054be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054c2:	f003 0310 	and.w	r3, r3, #16
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	f000 8148 	beq.w	800575c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80054cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054d0:	f003 0310 	and.w	r3, r3, #16
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f000 8141 	beq.w	800575c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054da:	2300      	movs	r3, #0
 80054dc:	60bb      	str	r3, [r7, #8]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	60bb      	str	r3, [r7, #8]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	60bb      	str	r3, [r7, #8]
 80054ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f000 80b6 	beq.w	800566c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800550c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005510:	2b00      	cmp	r3, #0
 8005512:	f000 8145 	beq.w	80057a0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800551a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800551e:	429a      	cmp	r2, r3
 8005520:	f080 813e 	bcs.w	80057a0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800552a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	2b20      	cmp	r3, #32
 8005534:	f000 8088 	beq.w	8005648 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	330c      	adds	r3, #12
 800553e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005542:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005546:	e853 3f00 	ldrex	r3, [r3]
 800554a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800554e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005552:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005556:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	330c      	adds	r3, #12
 8005560:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005564:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005568:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005570:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005574:	e841 2300 	strex	r3, r2, [r1]
 8005578:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800557c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1d9      	bne.n	8005538 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	3314      	adds	r3, #20
 800558a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800558e:	e853 3f00 	ldrex	r3, [r3]
 8005592:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005594:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005596:	f023 0301 	bic.w	r3, r3, #1
 800559a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	3314      	adds	r3, #20
 80055a4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80055a8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80055ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ae:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80055b0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80055b4:	e841 2300 	strex	r3, r2, [r1]
 80055b8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80055ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1e1      	bne.n	8005584 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	3314      	adds	r3, #20
 80055c6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80055ca:	e853 3f00 	ldrex	r3, [r3]
 80055ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80055d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	3314      	adds	r3, #20
 80055e0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80055e4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80055e6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80055ea:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80055ec:	e841 2300 	strex	r3, r2, [r1]
 80055f0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80055f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1e3      	bne.n	80055c0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2220      	movs	r2, #32
 80055fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	330c      	adds	r3, #12
 800560c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005610:	e853 3f00 	ldrex	r3, [r3]
 8005614:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005616:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005618:	f023 0310 	bic.w	r3, r3, #16
 800561c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	330c      	adds	r3, #12
 8005626:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800562a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800562c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005630:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005632:	e841 2300 	strex	r3, r2, [r1]
 8005636:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005638:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1e3      	bne.n	8005606 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005642:	4618      	mov	r0, r3
 8005644:	f7fe fa19 	bl	8003a7a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2202      	movs	r2, #2
 800564c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005656:	b29b      	uxth	r3, r3
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	b29b      	uxth	r3, r3
 800565c:	4619      	mov	r1, r3
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f8b6 	bl	80057d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005664:	e09c      	b.n	80057a0 <HAL_UART_IRQHandler+0x518>
 8005666:	bf00      	nop
 8005668:	080059cf 	.word	0x080059cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005674:	b29b      	uxth	r3, r3
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005680:	b29b      	uxth	r3, r3
 8005682:	2b00      	cmp	r3, #0
 8005684:	f000 808e 	beq.w	80057a4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005688:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800568c:	2b00      	cmp	r3, #0
 800568e:	f000 8089 	beq.w	80057a4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	330c      	adds	r3, #12
 8005698:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800569c:	e853 3f00 	ldrex	r3, [r3]
 80056a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80056a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	330c      	adds	r3, #12
 80056b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80056b6:	647a      	str	r2, [r7, #68]	@ 0x44
 80056b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80056bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056be:	e841 2300 	strex	r3, r2, [r1]
 80056c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80056c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1e3      	bne.n	8005692 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	3314      	adds	r3, #20
 80056d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d4:	e853 3f00 	ldrex	r3, [r3]
 80056d8:	623b      	str	r3, [r7, #32]
   return(result);
 80056da:	6a3b      	ldr	r3, [r7, #32]
 80056dc:	f023 0301 	bic.w	r3, r3, #1
 80056e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	3314      	adds	r3, #20
 80056ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80056ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80056f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056f6:	e841 2300 	strex	r3, r2, [r1]
 80056fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1e3      	bne.n	80056ca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2220      	movs	r2, #32
 8005706:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	330c      	adds	r3, #12
 8005716:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	e853 3f00 	ldrex	r3, [r3]
 800571e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f023 0310 	bic.w	r3, r3, #16
 8005726:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	330c      	adds	r3, #12
 8005730:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005734:	61fa      	str	r2, [r7, #28]
 8005736:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005738:	69b9      	ldr	r1, [r7, #24]
 800573a:	69fa      	ldr	r2, [r7, #28]
 800573c:	e841 2300 	strex	r3, r2, [r1]
 8005740:	617b      	str	r3, [r7, #20]
   return(result);
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1e3      	bne.n	8005710 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2202      	movs	r2, #2
 800574c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800574e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005752:	4619      	mov	r1, r3
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 f83b 	bl	80057d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800575a:	e023      	b.n	80057a4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800575c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005760:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005764:	2b00      	cmp	r3, #0
 8005766:	d009      	beq.n	800577c <HAL_UART_IRQHandler+0x4f4>
 8005768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800576c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005770:	2b00      	cmp	r3, #0
 8005772:	d003      	beq.n	800577c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 f93e 	bl	80059f6 <UART_Transmit_IT>
    return;
 800577a:	e014      	b.n	80057a6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800577c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00e      	beq.n	80057a6 <HAL_UART_IRQHandler+0x51e>
 8005788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800578c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005790:	2b00      	cmp	r3, #0
 8005792:	d008      	beq.n	80057a6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 f97d 	bl	8005a94 <UART_EndTransmit_IT>
    return;
 800579a:	e004      	b.n	80057a6 <HAL_UART_IRQHandler+0x51e>
    return;
 800579c:	bf00      	nop
 800579e:	e002      	b.n	80057a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80057a0:	bf00      	nop
 80057a2:	e000      	b.n	80057a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80057a4:	bf00      	nop
  }
}
 80057a6:	37e8      	adds	r7, #232	@ 0xe8
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80057b4:	bf00      	nop
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bc80      	pop	{r7}
 80057bc:	4770      	bx	lr

080057be <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057be:	b480      	push	{r7}
 80057c0:	b083      	sub	sp, #12
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80057c6:	bf00      	nop
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bc80      	pop	{r7}
 80057ce:	4770      	bx	lr

080057d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	460b      	mov	r3, r1
 80057da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bc80      	pop	{r7}
 80057e4:	4770      	bx	lr

080057e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b086      	sub	sp, #24
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	60f8      	str	r0, [r7, #12]
 80057ee:	60b9      	str	r1, [r7, #8]
 80057f0:	603b      	str	r3, [r7, #0]
 80057f2:	4613      	mov	r3, r2
 80057f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057f6:	e03b      	b.n	8005870 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057fe:	d037      	beq.n	8005870 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005800:	f7fe f852 	bl	80038a8 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	6a3a      	ldr	r2, [r7, #32]
 800580c:	429a      	cmp	r2, r3
 800580e:	d302      	bcc.n	8005816 <UART_WaitOnFlagUntilTimeout+0x30>
 8005810:	6a3b      	ldr	r3, [r7, #32]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d101      	bne.n	800581a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e03a      	b.n	8005890 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	f003 0304 	and.w	r3, r3, #4
 8005824:	2b00      	cmp	r3, #0
 8005826:	d023      	beq.n	8005870 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	2b80      	cmp	r3, #128	@ 0x80
 800582c:	d020      	beq.n	8005870 <UART_WaitOnFlagUntilTimeout+0x8a>
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	2b40      	cmp	r3, #64	@ 0x40
 8005832:	d01d      	beq.n	8005870 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0308 	and.w	r3, r3, #8
 800583e:	2b08      	cmp	r3, #8
 8005840:	d116      	bne.n	8005870 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005842:	2300      	movs	r3, #0
 8005844:	617b      	str	r3, [r7, #20]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	617b      	str	r3, [r7, #20]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	617b      	str	r3, [r7, #20]
 8005856:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f000 f856 	bl	800590a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2208      	movs	r2, #8
 8005862:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e00f      	b.n	8005890 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	4013      	ands	r3, r2
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	429a      	cmp	r2, r3
 800587e:	bf0c      	ite	eq
 8005880:	2301      	moveq	r3, #1
 8005882:	2300      	movne	r3, #0
 8005884:	b2db      	uxtb	r3, r3
 8005886:	461a      	mov	r2, r3
 8005888:	79fb      	ldrb	r3, [r7, #7]
 800588a:	429a      	cmp	r2, r3
 800588c:	d0b4      	beq.n	80057f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3718      	adds	r7, #24
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	4613      	mov	r3, r2
 80058a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	88fa      	ldrh	r2, [r7, #6]
 80058b0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	88fa      	ldrh	r2, [r7, #6]
 80058b6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2222      	movs	r2, #34	@ 0x22
 80058c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d007      	beq.n	80058de <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68da      	ldr	r2, [r3, #12]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058dc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	695a      	ldr	r2, [r3, #20]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f042 0201 	orr.w	r2, r2, #1
 80058ec:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68da      	ldr	r2, [r3, #12]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f042 0220 	orr.w	r2, r2, #32
 80058fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3714      	adds	r7, #20
 8005904:	46bd      	mov	sp, r7
 8005906:	bc80      	pop	{r7}
 8005908:	4770      	bx	lr

0800590a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800590a:	b480      	push	{r7}
 800590c:	b095      	sub	sp, #84	@ 0x54
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	330c      	adds	r3, #12
 8005918:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800591c:	e853 3f00 	ldrex	r3, [r3]
 8005920:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005924:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005928:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	330c      	adds	r3, #12
 8005930:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005932:	643a      	str	r2, [r7, #64]	@ 0x40
 8005934:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005936:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005938:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800593a:	e841 2300 	strex	r3, r2, [r1]
 800593e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1e5      	bne.n	8005912 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	3314      	adds	r3, #20
 800594c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	e853 3f00 	ldrex	r3, [r3]
 8005954:	61fb      	str	r3, [r7, #28]
   return(result);
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	f023 0301 	bic.w	r3, r3, #1
 800595c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	3314      	adds	r3, #20
 8005964:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005966:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005968:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800596c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800596e:	e841 2300 	strex	r3, r2, [r1]
 8005972:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1e5      	bne.n	8005946 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800597e:	2b01      	cmp	r3, #1
 8005980:	d119      	bne.n	80059b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	330c      	adds	r3, #12
 8005988:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	e853 3f00 	ldrex	r3, [r3]
 8005990:	60bb      	str	r3, [r7, #8]
   return(result);
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	f023 0310 	bic.w	r3, r3, #16
 8005998:	647b      	str	r3, [r7, #68]	@ 0x44
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	330c      	adds	r3, #12
 80059a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059a2:	61ba      	str	r2, [r7, #24]
 80059a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a6:	6979      	ldr	r1, [r7, #20]
 80059a8:	69ba      	ldr	r2, [r7, #24]
 80059aa:	e841 2300 	strex	r3, r2, [r1]
 80059ae:	613b      	str	r3, [r7, #16]
   return(result);
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1e5      	bne.n	8005982 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2220      	movs	r2, #32
 80059ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80059c4:	bf00      	nop
 80059c6:	3754      	adds	r7, #84	@ 0x54
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bc80      	pop	{r7}
 80059cc:	4770      	bx	lr

080059ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b084      	sub	sp, #16
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f7ff fee8 	bl	80057be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059ee:	bf00      	nop
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80059f6:	b480      	push	{r7}
 80059f8:	b085      	sub	sp, #20
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b21      	cmp	r3, #33	@ 0x21
 8005a08:	d13e      	bne.n	8005a88 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a12:	d114      	bne.n	8005a3e <UART_Transmit_IT+0x48>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d110      	bne.n	8005a3e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a1b      	ldr	r3, [r3, #32]
 8005a20:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	881b      	ldrh	r3, [r3, #0]
 8005a26:	461a      	mov	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a30:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	1c9a      	adds	r2, r3, #2
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	621a      	str	r2, [r3, #32]
 8005a3c:	e008      	b.n	8005a50 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	1c59      	adds	r1, r3, #1
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	6211      	str	r1, [r2, #32]
 8005a48:	781a      	ldrb	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	3b01      	subs	r3, #1
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10f      	bne.n	8005a84 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68da      	ldr	r2, [r3, #12]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a72:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68da      	ldr	r2, [r3, #12]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a82:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a84:	2300      	movs	r3, #0
 8005a86:	e000      	b.n	8005a8a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a88:	2302      	movs	r3, #2
  }
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3714      	adds	r7, #20
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bc80      	pop	{r7}
 8005a92:	4770      	bx	lr

08005a94 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68da      	ldr	r2, [r3, #12]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005aaa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2220      	movs	r2, #32
 8005ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f7ff fe79 	bl	80057ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3708      	adds	r7, #8
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b08c      	sub	sp, #48	@ 0x30
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	2b22      	cmp	r3, #34	@ 0x22
 8005ad6:	f040 80ae 	bne.w	8005c36 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ae2:	d117      	bne.n	8005b14 <UART_Receive_IT+0x50>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d113      	bne.n	8005b14 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005aec:	2300      	movs	r3, #0
 8005aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005af4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b06:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b0c:	1c9a      	adds	r2, r3, #2
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	629a      	str	r2, [r3, #40]	@ 0x28
 8005b12:	e026      	b.n	8005b62 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b26:	d007      	beq.n	8005b38 <UART_Receive_IT+0x74>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10a      	bne.n	8005b46 <UART_Receive_IT+0x82>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d106      	bne.n	8005b46 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	b2da      	uxtb	r2, r3
 8005b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b42:	701a      	strb	r2, [r3, #0]
 8005b44:	e008      	b.n	8005b58 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b52:	b2da      	uxtb	r2, r3
 8005b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b56:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b5c:	1c5a      	adds	r2, r3, #1
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	4619      	mov	r1, r3
 8005b70:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d15d      	bne.n	8005c32 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68da      	ldr	r2, [r3, #12]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 0220 	bic.w	r2, r2, #32
 8005b84:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68da      	ldr	r2, [r3, #12]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b94:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	695a      	ldr	r2, [r3, #20]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f022 0201 	bic.w	r2, r2, #1
 8005ba4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2220      	movs	r2, #32
 8005baa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d135      	bne.n	8005c28 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	330c      	adds	r3, #12
 8005bc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	e853 3f00 	ldrex	r3, [r3]
 8005bd0:	613b      	str	r3, [r7, #16]
   return(result);
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	f023 0310 	bic.w	r3, r3, #16
 8005bd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	330c      	adds	r3, #12
 8005be0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005be2:	623a      	str	r2, [r7, #32]
 8005be4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be6:	69f9      	ldr	r1, [r7, #28]
 8005be8:	6a3a      	ldr	r2, [r7, #32]
 8005bea:	e841 2300 	strex	r3, r2, [r1]
 8005bee:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1e5      	bne.n	8005bc2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0310 	and.w	r3, r3, #16
 8005c00:	2b10      	cmp	r3, #16
 8005c02:	d10a      	bne.n	8005c1a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c04:	2300      	movs	r3, #0
 8005c06:	60fb      	str	r3, [r7, #12]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	60fb      	str	r3, [r7, #12]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	60fb      	str	r3, [r7, #12]
 8005c18:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005c1e:	4619      	mov	r1, r3
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f7ff fdd5 	bl	80057d0 <HAL_UARTEx_RxEventCallback>
 8005c26:	e002      	b.n	8005c2e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f7fa ff95 	bl	8000b58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	e002      	b.n	8005c38 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005c32:	2300      	movs	r3, #0
 8005c34:	e000      	b.n	8005c38 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005c36:	2302      	movs	r3, #2
  }
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3730      	adds	r7, #48	@ 0x30
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	68da      	ldr	r2, [r3, #12]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	689a      	ldr	r2, [r3, #8]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	431a      	orrs	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	695b      	ldr	r3, [r3, #20]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005c7a:	f023 030c 	bic.w	r3, r3, #12
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	6812      	ldr	r2, [r2, #0]
 8005c82:	68b9      	ldr	r1, [r7, #8]
 8005c84:	430b      	orrs	r3, r1
 8005c86:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	699a      	ldr	r2, [r3, #24]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a2c      	ldr	r2, [pc, #176]	@ (8005d54 <UART_SetConfig+0x114>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d103      	bne.n	8005cb0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005ca8:	f7fe ff4e 	bl	8004b48 <HAL_RCC_GetPCLK2Freq>
 8005cac:	60f8      	str	r0, [r7, #12]
 8005cae:	e002      	b.n	8005cb6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005cb0:	f7fe ff36 	bl	8004b20 <HAL_RCC_GetPCLK1Freq>
 8005cb4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4413      	add	r3, r2
 8005cbe:	009a      	lsls	r2, r3, #2
 8005cc0:	441a      	add	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ccc:	4a22      	ldr	r2, [pc, #136]	@ (8005d58 <UART_SetConfig+0x118>)
 8005cce:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd2:	095b      	lsrs	r3, r3, #5
 8005cd4:	0119      	lsls	r1, r3, #4
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	4613      	mov	r3, r2
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	4413      	add	r3, r2
 8005cde:	009a      	lsls	r2, r3, #2
 8005ce0:	441a      	add	r2, r3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cec:	4b1a      	ldr	r3, [pc, #104]	@ (8005d58 <UART_SetConfig+0x118>)
 8005cee:	fba3 0302 	umull	r0, r3, r3, r2
 8005cf2:	095b      	lsrs	r3, r3, #5
 8005cf4:	2064      	movs	r0, #100	@ 0x64
 8005cf6:	fb00 f303 	mul.w	r3, r0, r3
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	011b      	lsls	r3, r3, #4
 8005cfe:	3332      	adds	r3, #50	@ 0x32
 8005d00:	4a15      	ldr	r2, [pc, #84]	@ (8005d58 <UART_SetConfig+0x118>)
 8005d02:	fba2 2303 	umull	r2, r3, r2, r3
 8005d06:	095b      	lsrs	r3, r3, #5
 8005d08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d0c:	4419      	add	r1, r3
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	4613      	mov	r3, r2
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4413      	add	r3, r2
 8005d16:	009a      	lsls	r2, r3, #2
 8005d18:	441a      	add	r2, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d24:	4b0c      	ldr	r3, [pc, #48]	@ (8005d58 <UART_SetConfig+0x118>)
 8005d26:	fba3 0302 	umull	r0, r3, r3, r2
 8005d2a:	095b      	lsrs	r3, r3, #5
 8005d2c:	2064      	movs	r0, #100	@ 0x64
 8005d2e:	fb00 f303 	mul.w	r3, r0, r3
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	011b      	lsls	r3, r3, #4
 8005d36:	3332      	adds	r3, #50	@ 0x32
 8005d38:	4a07      	ldr	r2, [pc, #28]	@ (8005d58 <UART_SetConfig+0x118>)
 8005d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d3e:	095b      	lsrs	r3, r3, #5
 8005d40:	f003 020f 	and.w	r2, r3, #15
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	440a      	add	r2, r1
 8005d4a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005d4c:	bf00      	nop
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	40013800 	.word	0x40013800
 8005d58:	51eb851f 	.word	0x51eb851f

08005d5c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	4603      	mov	r3, r0
 8005d64:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005d66:	2300      	movs	r3, #0
 8005d68:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005d6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d6e:	2b84      	cmp	r3, #132	@ 0x84
 8005d70:	d005      	beq.n	8005d7e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005d72:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	4413      	add	r3, r2
 8005d7a:	3303      	adds	r3, #3
 8005d7c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3714      	adds	r7, #20
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bc80      	pop	{r7}
 8005d88:	4770      	bx	lr

08005d8a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b083      	sub	sp, #12
 8005d8e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d90:	f3ef 8305 	mrs	r3, IPSR
 8005d94:	607b      	str	r3, [r7, #4]
  return(result);
 8005d96:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	bf14      	ite	ne
 8005d9c:	2301      	movne	r3, #1
 8005d9e:	2300      	moveq	r3, #0
 8005da0:	b2db      	uxtb	r3, r3
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	370c      	adds	r7, #12
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bc80      	pop	{r7}
 8005daa:	4770      	bx	lr

08005dac <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005db0:	f001 fa08 	bl	80071c4 <vTaskStartScheduler>
  
  return osOK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	bd80      	pop	{r7, pc}

08005dba <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005dba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dbc:	b089      	sub	sp, #36	@ 0x24
 8005dbe:	af04      	add	r7, sp, #16
 8005dc0:	6078      	str	r0, [r7, #4]
 8005dc2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	695b      	ldr	r3, [r3, #20]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d020      	beq.n	8005e0e <osThreadCreate+0x54>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	699b      	ldr	r3, [r3, #24]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d01c      	beq.n	8005e0e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685c      	ldr	r4, [r3, #4]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	691e      	ldr	r6, [r3, #16]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7ff ffb8 	bl	8005d5c <makeFreeRtosPriority>
 8005dec:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005df6:	9202      	str	r2, [sp, #8]
 8005df8:	9301      	str	r3, [sp, #4]
 8005dfa:	9100      	str	r1, [sp, #0]
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	4632      	mov	r2, r6
 8005e00:	4629      	mov	r1, r5
 8005e02:	4620      	mov	r0, r4
 8005e04:	f000 fff0 	bl	8006de8 <xTaskCreateStatic>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	60fb      	str	r3, [r7, #12]
 8005e0c:	e01c      	b.n	8005e48 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685c      	ldr	r4, [r3, #4]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e1a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7ff ff9a 	bl	8005d5c <makeFreeRtosPriority>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	f107 030c 	add.w	r3, r7, #12
 8005e2e:	9301      	str	r3, [sp, #4]
 8005e30:	9200      	str	r2, [sp, #0]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	4632      	mov	r2, r6
 8005e36:	4629      	mov	r1, r5
 8005e38:	4620      	mov	r0, r4
 8005e3a:	f001 f835 	bl	8006ea8 <xTaskCreate>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d001      	beq.n	8005e48 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005e44:	2300      	movs	r3, #0
 8005e46:	e000      	b.n	8005e4a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005e48:	68fb      	ldr	r3, [r7, #12]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3714      	adds	r7, #20
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e52 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b084      	sub	sp, #16
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d001      	beq.n	8005e68 <osDelay+0x16>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	e000      	b.n	8005e6a <osDelay+0x18>
 8005e68:	2301      	movs	r3, #1
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f001 f974 	bl	8007158 <vTaskDelay>
  
  return osOK;
 8005e70:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3710      	adds	r7, #16
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
	...

08005e7c <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b086      	sub	sp, #24
 8005e80:	af02      	add	r7, sp, #8
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	460b      	mov	r3, r1
 8005e86:	607a      	str	r2, [r7, #4]
 8005e88:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d013      	beq.n	8005eba <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8005e92:	7afb      	ldrb	r3, [r7, #11]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d101      	bne.n	8005e9c <osTimerCreate+0x20>
 8005e98:	2101      	movs	r1, #1
 8005e9a:	e000      	b.n	8005e9e <osTimerCreate+0x22>
 8005e9c:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8005ea6:	9201      	str	r2, [sp, #4]
 8005ea8:	9300      	str	r3, [sp, #0]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	460a      	mov	r2, r1
 8005eae:	2101      	movs	r1, #1
 8005eb0:	480b      	ldr	r0, [pc, #44]	@ (8005ee0 <osTimerCreate+0x64>)
 8005eb2:	f001 ff82 	bl	8007dba <xTimerCreateStatic>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	e00e      	b.n	8005ed8 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8005eba:	7afb      	ldrb	r3, [r7, #11]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d101      	bne.n	8005ec4 <osTimerCreate+0x48>
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	e000      	b.n	8005ec6 <osTimerCreate+0x4a>
 8005ec4:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8005eca:	9300      	str	r3, [sp, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2101      	movs	r1, #1
 8005ed0:	4803      	ldr	r0, [pc, #12]	@ (8005ee0 <osTimerCreate+0x64>)
 8005ed2:	f001 ff51 	bl	8007d78 <xTimerCreate>
 8005ed6:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	0800a0c8 	.word	0x0800a0c8

08005ee4 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b088      	sub	sp, #32
 8005ee8:	af02      	add	r7, sp, #8
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d101      	bne.n	8005f04 <osTimerStart+0x20>
    ticks = 1;
 8005f00:	2301      	movs	r3, #1
 8005f02:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8005f04:	f7ff ff41 	bl	8005d8a <inHandlerMode>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d01a      	beq.n	8005f44 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8005f0e:	f107 030c 	add.w	r3, r7, #12
 8005f12:	2200      	movs	r2, #0
 8005f14:	9200      	str	r2, [sp, #0]
 8005f16:	693a      	ldr	r2, [r7, #16]
 8005f18:	2109      	movs	r1, #9
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f001 ffca 	bl	8007eb4 <xTimerGenericCommand>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d002      	beq.n	8005f2c <osTimerStart+0x48>
    {
      result = osErrorOS;
 8005f26:	23ff      	movs	r3, #255	@ 0xff
 8005f28:	617b      	str	r3, [r7, #20]
 8005f2a:	e018      	b.n	8005f5e <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d015      	beq.n	8005f5e <osTimerStart+0x7a>
 8005f32:	4b0d      	ldr	r3, [pc, #52]	@ (8005f68 <osTimerStart+0x84>)
 8005f34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f38:	601a      	str	r2, [r3, #0]
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	f3bf 8f6f 	isb	sy
 8005f42:	e00c      	b.n	8005f5e <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8005f44:	2300      	movs	r3, #0
 8005f46:	9300      	str	r3, [sp, #0]
 8005f48:	2300      	movs	r3, #0
 8005f4a:	693a      	ldr	r2, [r7, #16]
 8005f4c:	2104      	movs	r1, #4
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f001 ffb0 	bl	8007eb4 <xTimerGenericCommand>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d001      	beq.n	8005f5e <osTimerStart+0x7a>
      result = osErrorOS;
 8005f5a:	23ff      	movs	r3, #255	@ 0xff
 8005f5c:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8005f5e:	697b      	ldr	r3, [r7, #20]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3718      	adds	r7, #24
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	e000ed04 	.word	0xe000ed04

08005f6c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005f6c:	b590      	push	{r4, r7, lr}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af02      	add	r7, sp, #8
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d011      	beq.n	8005fa2 <osMessageCreate+0x36>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00d      	beq.n	8005fa2 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6818      	ldr	r0, [r3, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6859      	ldr	r1, [r3, #4]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	689a      	ldr	r2, [r3, #8]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	2400      	movs	r4, #0
 8005f98:	9400      	str	r4, [sp, #0]
 8005f9a:	f000 f9dd 	bl	8006358 <xQueueGenericCreateStatic>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	e008      	b.n	8005fb4 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6818      	ldr	r0, [r3, #0]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	4619      	mov	r1, r3
 8005fae:	f000 fa50 	bl	8006452 <xQueueGenericCreate>
 8005fb2:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd90      	pop	{r4, r7, pc}

08005fbc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d101      	bne.n	8005fda <osMessagePut+0x1e>
    ticks = 1;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8005fda:	f7ff fed6 	bl	8005d8a <inHandlerMode>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d018      	beq.n	8006016 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005fe4:	f107 0210 	add.w	r2, r7, #16
 8005fe8:	f107 0108 	add.w	r1, r7, #8
 8005fec:	2300      	movs	r3, #0
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f000 fb8c 	bl	800670c <xQueueGenericSendFromISR>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d001      	beq.n	8005ffe <osMessagePut+0x42>
      return osErrorOS;
 8005ffa:	23ff      	movs	r3, #255	@ 0xff
 8005ffc:	e018      	b.n	8006030 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d014      	beq.n	800602e <osMessagePut+0x72>
 8006004:	4b0c      	ldr	r3, [pc, #48]	@ (8006038 <osMessagePut+0x7c>)
 8006006:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800600a:	601a      	str	r2, [r3, #0]
 800600c:	f3bf 8f4f 	dsb	sy
 8006010:	f3bf 8f6f 	isb	sy
 8006014:	e00b      	b.n	800602e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8006016:	f107 0108 	add.w	r1, r7, #8
 800601a:	2300      	movs	r3, #0
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f000 fa72 	bl	8006508 <xQueueGenericSend>
 8006024:	4603      	mov	r3, r0
 8006026:	2b01      	cmp	r3, #1
 8006028:	d001      	beq.n	800602e <osMessagePut+0x72>
      return osErrorOS;
 800602a:	23ff      	movs	r3, #255	@ 0xff
 800602c:	e000      	b.n	8006030 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800602e:	2300      	movs	r3, #0
}
 8006030:	4618      	mov	r0, r3
 8006032:	3718      	adds	r7, #24
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	e000ed04 	.word	0xe000ed04

0800603c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800603c:	b590      	push	{r4, r7, lr}
 800603e:	b08b      	sub	sp, #44	@ 0x2c
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800604c:	2300      	movs	r3, #0
 800604e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10a      	bne.n	800606c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8006056:	2380      	movs	r3, #128	@ 0x80
 8006058:	617b      	str	r3, [r7, #20]
    return event;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	461c      	mov	r4, r3
 800605e:	f107 0314 	add.w	r3, r7, #20
 8006062:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006066:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800606a:	e054      	b.n	8006116 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800606c:	2300      	movs	r3, #0
 800606e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8006070:	2300      	movs	r3, #0
 8006072:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607a:	d103      	bne.n	8006084 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800607c:	f04f 33ff 	mov.w	r3, #4294967295
 8006080:	627b      	str	r3, [r7, #36]	@ 0x24
 8006082:	e009      	b.n	8006098 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d006      	beq.n	8006098 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800608e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006090:	2b00      	cmp	r3, #0
 8006092:	d101      	bne.n	8006098 <osMessageGet+0x5c>
      ticks = 1;
 8006094:	2301      	movs	r3, #1
 8006096:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8006098:	f7ff fe77 	bl	8005d8a <inHandlerMode>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d01c      	beq.n	80060dc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80060a2:	f107 0220 	add.w	r2, r7, #32
 80060a6:	f107 0314 	add.w	r3, r7, #20
 80060aa:	3304      	adds	r3, #4
 80060ac:	4619      	mov	r1, r3
 80060ae:	68b8      	ldr	r0, [r7, #8]
 80060b0:	f000 fcac 	bl	8006a0c <xQueueReceiveFromISR>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d102      	bne.n	80060c0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80060ba:	2310      	movs	r3, #16
 80060bc:	617b      	str	r3, [r7, #20]
 80060be:	e001      	b.n	80060c4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80060c0:	2300      	movs	r3, #0
 80060c2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80060c4:	6a3b      	ldr	r3, [r7, #32]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d01d      	beq.n	8006106 <osMessageGet+0xca>
 80060ca:	4b15      	ldr	r3, [pc, #84]	@ (8006120 <osMessageGet+0xe4>)
 80060cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060d0:	601a      	str	r2, [r3, #0]
 80060d2:	f3bf 8f4f 	dsb	sy
 80060d6:	f3bf 8f6f 	isb	sy
 80060da:	e014      	b.n	8006106 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80060dc:	f107 0314 	add.w	r3, r7, #20
 80060e0:	3304      	adds	r3, #4
 80060e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060e4:	4619      	mov	r1, r3
 80060e6:	68b8      	ldr	r0, [r7, #8]
 80060e8:	f000 fbae 	bl	8006848 <xQueueReceive>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d102      	bne.n	80060f8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80060f2:	2310      	movs	r3, #16
 80060f4:	617b      	str	r3, [r7, #20]
 80060f6:	e006      	b.n	8006106 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80060f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <osMessageGet+0xc6>
 80060fe:	2300      	movs	r3, #0
 8006100:	e000      	b.n	8006104 <osMessageGet+0xc8>
 8006102:	2340      	movs	r3, #64	@ 0x40
 8006104:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	461c      	mov	r4, r3
 800610a:	f107 0314 	add.w	r3, r7, #20
 800610e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006112:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	372c      	adds	r7, #44	@ 0x2c
 800611a:	46bd      	mov	sp, r7
 800611c:	bd90      	pop	{r4, r7, pc}
 800611e:	bf00      	nop
 8006120:	e000ed04 	.word	0xe000ed04

08006124 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f103 0208 	add.w	r2, r3, #8
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f04f 32ff 	mov.w	r2, #4294967295
 800613c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f103 0208 	add.w	r2, r3, #8
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f103 0208 	add.w	r2, r3, #8
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006158:	bf00      	nop
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	bc80      	pop	{r7}
 8006160:	4770      	bx	lr

08006162 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006162:	b480      	push	{r7}
 8006164:	b083      	sub	sp, #12
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	bc80      	pop	{r7}
 8006178:	4770      	bx	lr

0800617a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800617a:	b480      	push	{r7}
 800617c:	b085      	sub	sp, #20
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	689a      	ldr	r2, [r3, #8]
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	683a      	ldr	r2, [r7, #0]
 800619e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	1c5a      	adds	r2, r3, #1
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	601a      	str	r2, [r3, #0]
}
 80061b6:	bf00      	nop
 80061b8:	3714      	adds	r7, #20
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bc80      	pop	{r7}
 80061be:	4770      	bx	lr

080061c0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80061c0:	b480      	push	{r7}
 80061c2:	b085      	sub	sp, #20
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d6:	d103      	bne.n	80061e0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	60fb      	str	r3, [r7, #12]
 80061de:	e00c      	b.n	80061fa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	3308      	adds	r3, #8
 80061e4:	60fb      	str	r3, [r7, #12]
 80061e6:	e002      	b.n	80061ee <vListInsert+0x2e>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	60fb      	str	r3, [r7, #12]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68ba      	ldr	r2, [r7, #8]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d2f6      	bcs.n	80061e8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	685a      	ldr	r2, [r3, #4]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	683a      	ldr	r2, [r7, #0]
 8006208:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	1c5a      	adds	r2, r3, #1
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	601a      	str	r2, [r3, #0]
}
 8006226:	bf00      	nop
 8006228:	3714      	adds	r7, #20
 800622a:	46bd      	mov	sp, r7
 800622c:	bc80      	pop	{r7}
 800622e:	4770      	bx	lr

08006230 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006230:	b480      	push	{r7}
 8006232:	b085      	sub	sp, #20
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	6892      	ldr	r2, [r2, #8]
 8006246:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	6852      	ldr	r2, [r2, #4]
 8006250:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	429a      	cmp	r2, r3
 800625a:	d103      	bne.n	8006264 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	689a      	ldr	r2, [r3, #8]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	1e5a      	subs	r2, r3, #1
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
}
 8006278:	4618      	mov	r0, r3
 800627a:	3714      	adds	r7, #20
 800627c:	46bd      	mov	sp, r7
 800627e:	bc80      	pop	{r7}
 8006280:	4770      	bx	lr
	...

08006284 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d10b      	bne.n	80062b0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800629c:	f383 8811 	msr	BASEPRI, r3
 80062a0:	f3bf 8f6f 	isb	sy
 80062a4:	f3bf 8f4f 	dsb	sy
 80062a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80062aa:	bf00      	nop
 80062ac:	bf00      	nop
 80062ae:	e7fd      	b.n	80062ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80062b0:	f002 f9e4 	bl	800867c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062bc:	68f9      	ldr	r1, [r7, #12]
 80062be:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80062c0:	fb01 f303 	mul.w	r3, r1, r3
 80062c4:	441a      	add	r2, r3
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062e0:	3b01      	subs	r3, #1
 80062e2:	68f9      	ldr	r1, [r7, #12]
 80062e4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80062e6:	fb01 f303 	mul.w	r3, r1, r3
 80062ea:	441a      	add	r2, r3
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	22ff      	movs	r2, #255	@ 0xff
 80062f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	22ff      	movs	r2, #255	@ 0xff
 80062fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d114      	bne.n	8006330 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d01a      	beq.n	8006344 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	3310      	adds	r3, #16
 8006312:	4618      	mov	r0, r3
 8006314:	f001 fa14 	bl	8007740 <xTaskRemoveFromEventList>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d012      	beq.n	8006344 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800631e:	4b0d      	ldr	r3, [pc, #52]	@ (8006354 <xQueueGenericReset+0xd0>)
 8006320:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006324:	601a      	str	r2, [r3, #0]
 8006326:	f3bf 8f4f 	dsb	sy
 800632a:	f3bf 8f6f 	isb	sy
 800632e:	e009      	b.n	8006344 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	3310      	adds	r3, #16
 8006334:	4618      	mov	r0, r3
 8006336:	f7ff fef5 	bl	8006124 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	3324      	adds	r3, #36	@ 0x24
 800633e:	4618      	mov	r0, r3
 8006340:	f7ff fef0 	bl	8006124 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006344:	f002 f9ca 	bl	80086dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006348:	2301      	movs	r3, #1
}
 800634a:	4618      	mov	r0, r3
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	e000ed04 	.word	0xe000ed04

08006358 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006358:	b580      	push	{r7, lr}
 800635a:	b08e      	sub	sp, #56	@ 0x38
 800635c:	af02      	add	r7, sp, #8
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
 8006364:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d10b      	bne.n	8006384 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800636c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006370:	f383 8811 	msr	BASEPRI, r3
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	f3bf 8f4f 	dsb	sy
 800637c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800637e:	bf00      	nop
 8006380:	bf00      	nop
 8006382:	e7fd      	b.n	8006380 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10b      	bne.n	80063a2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800638a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800638e:	f383 8811 	msr	BASEPRI, r3
 8006392:	f3bf 8f6f 	isb	sy
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800639c:	bf00      	nop
 800639e:	bf00      	nop
 80063a0:	e7fd      	b.n	800639e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d002      	beq.n	80063ae <xQueueGenericCreateStatic+0x56>
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d001      	beq.n	80063b2 <xQueueGenericCreateStatic+0x5a>
 80063ae:	2301      	movs	r3, #1
 80063b0:	e000      	b.n	80063b4 <xQueueGenericCreateStatic+0x5c>
 80063b2:	2300      	movs	r3, #0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d10b      	bne.n	80063d0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80063b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063bc:	f383 8811 	msr	BASEPRI, r3
 80063c0:	f3bf 8f6f 	isb	sy
 80063c4:	f3bf 8f4f 	dsb	sy
 80063c8:	623b      	str	r3, [r7, #32]
}
 80063ca:	bf00      	nop
 80063cc:	bf00      	nop
 80063ce:	e7fd      	b.n	80063cc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d102      	bne.n	80063dc <xQueueGenericCreateStatic+0x84>
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d101      	bne.n	80063e0 <xQueueGenericCreateStatic+0x88>
 80063dc:	2301      	movs	r3, #1
 80063de:	e000      	b.n	80063e2 <xQueueGenericCreateStatic+0x8a>
 80063e0:	2300      	movs	r3, #0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d10b      	bne.n	80063fe <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80063e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ea:	f383 8811 	msr	BASEPRI, r3
 80063ee:	f3bf 8f6f 	isb	sy
 80063f2:	f3bf 8f4f 	dsb	sy
 80063f6:	61fb      	str	r3, [r7, #28]
}
 80063f8:	bf00      	nop
 80063fa:	bf00      	nop
 80063fc:	e7fd      	b.n	80063fa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80063fe:	2348      	movs	r3, #72	@ 0x48
 8006400:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	2b48      	cmp	r3, #72	@ 0x48
 8006406:	d00b      	beq.n	8006420 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800640c:	f383 8811 	msr	BASEPRI, r3
 8006410:	f3bf 8f6f 	isb	sy
 8006414:	f3bf 8f4f 	dsb	sy
 8006418:	61bb      	str	r3, [r7, #24]
}
 800641a:	bf00      	nop
 800641c:	bf00      	nop
 800641e:	e7fd      	b.n	800641c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006420:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00d      	beq.n	8006448 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800642c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800642e:	2201      	movs	r2, #1
 8006430:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006434:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800643a:	9300      	str	r3, [sp, #0]
 800643c:	4613      	mov	r3, r2
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	68b9      	ldr	r1, [r7, #8]
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f000 f840 	bl	80064c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800644a:	4618      	mov	r0, r3
 800644c:	3730      	adds	r7, #48	@ 0x30
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006452:	b580      	push	{r7, lr}
 8006454:	b08a      	sub	sp, #40	@ 0x28
 8006456:	af02      	add	r7, sp, #8
 8006458:	60f8      	str	r0, [r7, #12]
 800645a:	60b9      	str	r1, [r7, #8]
 800645c:	4613      	mov	r3, r2
 800645e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10b      	bne.n	800647e <xQueueGenericCreate+0x2c>
	__asm volatile
 8006466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800646a:	f383 8811 	msr	BASEPRI, r3
 800646e:	f3bf 8f6f 	isb	sy
 8006472:	f3bf 8f4f 	dsb	sy
 8006476:	613b      	str	r3, [r7, #16]
}
 8006478:	bf00      	nop
 800647a:	bf00      	nop
 800647c:	e7fd      	b.n	800647a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	68ba      	ldr	r2, [r7, #8]
 8006482:	fb02 f303 	mul.w	r3, r2, r3
 8006486:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	3348      	adds	r3, #72	@ 0x48
 800648c:	4618      	mov	r0, r3
 800648e:	f002 f9f7 	bl	8008880 <pvPortMalloc>
 8006492:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d011      	beq.n	80064be <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	3348      	adds	r3, #72	@ 0x48
 80064a2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80064ac:	79fa      	ldrb	r2, [r7, #7]
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	9300      	str	r3, [sp, #0]
 80064b2:	4613      	mov	r3, r2
 80064b4:	697a      	ldr	r2, [r7, #20]
 80064b6:	68b9      	ldr	r1, [r7, #8]
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	f000 f805 	bl	80064c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80064be:	69bb      	ldr	r3, [r7, #24]
	}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3720      	adds	r7, #32
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
 80064d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d103      	bne.n	80064e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	69ba      	ldr	r2, [r7, #24]
 80064e0:	601a      	str	r2, [r3, #0]
 80064e2:	e002      	b.n	80064ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80064f6:	2101      	movs	r1, #1
 80064f8:	69b8      	ldr	r0, [r7, #24]
 80064fa:	f7ff fec3 	bl	8006284 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80064fe:	bf00      	nop
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
	...

08006508 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b08e      	sub	sp, #56	@ 0x38
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]
 8006514:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006516:	2300      	movs	r3, #0
 8006518:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800651e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006520:	2b00      	cmp	r3, #0
 8006522:	d10b      	bne.n	800653c <xQueueGenericSend+0x34>
	__asm volatile
 8006524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006528:	f383 8811 	msr	BASEPRI, r3
 800652c:	f3bf 8f6f 	isb	sy
 8006530:	f3bf 8f4f 	dsb	sy
 8006534:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006536:	bf00      	nop
 8006538:	bf00      	nop
 800653a:	e7fd      	b.n	8006538 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d103      	bne.n	800654a <xQueueGenericSend+0x42>
 8006542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006546:	2b00      	cmp	r3, #0
 8006548:	d101      	bne.n	800654e <xQueueGenericSend+0x46>
 800654a:	2301      	movs	r3, #1
 800654c:	e000      	b.n	8006550 <xQueueGenericSend+0x48>
 800654e:	2300      	movs	r3, #0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d10b      	bne.n	800656c <xQueueGenericSend+0x64>
	__asm volatile
 8006554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006558:	f383 8811 	msr	BASEPRI, r3
 800655c:	f3bf 8f6f 	isb	sy
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006566:	bf00      	nop
 8006568:	bf00      	nop
 800656a:	e7fd      	b.n	8006568 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	2b02      	cmp	r3, #2
 8006570:	d103      	bne.n	800657a <xQueueGenericSend+0x72>
 8006572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006576:	2b01      	cmp	r3, #1
 8006578:	d101      	bne.n	800657e <xQueueGenericSend+0x76>
 800657a:	2301      	movs	r3, #1
 800657c:	e000      	b.n	8006580 <xQueueGenericSend+0x78>
 800657e:	2300      	movs	r3, #0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10b      	bne.n	800659c <xQueueGenericSend+0x94>
	__asm volatile
 8006584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006588:	f383 8811 	msr	BASEPRI, r3
 800658c:	f3bf 8f6f 	isb	sy
 8006590:	f3bf 8f4f 	dsb	sy
 8006594:	623b      	str	r3, [r7, #32]
}
 8006596:	bf00      	nop
 8006598:	bf00      	nop
 800659a:	e7fd      	b.n	8006598 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800659c:	f001 fa96 	bl	8007acc <xTaskGetSchedulerState>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d102      	bne.n	80065ac <xQueueGenericSend+0xa4>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d101      	bne.n	80065b0 <xQueueGenericSend+0xa8>
 80065ac:	2301      	movs	r3, #1
 80065ae:	e000      	b.n	80065b2 <xQueueGenericSend+0xaa>
 80065b0:	2300      	movs	r3, #0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d10b      	bne.n	80065ce <xQueueGenericSend+0xc6>
	__asm volatile
 80065b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ba:	f383 8811 	msr	BASEPRI, r3
 80065be:	f3bf 8f6f 	isb	sy
 80065c2:	f3bf 8f4f 	dsb	sy
 80065c6:	61fb      	str	r3, [r7, #28]
}
 80065c8:	bf00      	nop
 80065ca:	bf00      	nop
 80065cc:	e7fd      	b.n	80065ca <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80065ce:	f002 f855 	bl	800867c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065da:	429a      	cmp	r2, r3
 80065dc:	d302      	bcc.n	80065e4 <xQueueGenericSend+0xdc>
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d129      	bne.n	8006638 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065e4:	683a      	ldr	r2, [r7, #0]
 80065e6:	68b9      	ldr	r1, [r7, #8]
 80065e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80065ea:	f000 fa91 	bl	8006b10 <prvCopyDataToQueue>
 80065ee:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d010      	beq.n	800661a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065fa:	3324      	adds	r3, #36	@ 0x24
 80065fc:	4618      	mov	r0, r3
 80065fe:	f001 f89f 	bl	8007740 <xTaskRemoveFromEventList>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d013      	beq.n	8006630 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006608:	4b3f      	ldr	r3, [pc, #252]	@ (8006708 <xQueueGenericSend+0x200>)
 800660a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800660e:	601a      	str	r2, [r3, #0]
 8006610:	f3bf 8f4f 	dsb	sy
 8006614:	f3bf 8f6f 	isb	sy
 8006618:	e00a      	b.n	8006630 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800661a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800661c:	2b00      	cmp	r3, #0
 800661e:	d007      	beq.n	8006630 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006620:	4b39      	ldr	r3, [pc, #228]	@ (8006708 <xQueueGenericSend+0x200>)
 8006622:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006626:	601a      	str	r2, [r3, #0]
 8006628:	f3bf 8f4f 	dsb	sy
 800662c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006630:	f002 f854 	bl	80086dc <vPortExitCritical>
				return pdPASS;
 8006634:	2301      	movs	r3, #1
 8006636:	e063      	b.n	8006700 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d103      	bne.n	8006646 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800663e:	f002 f84d 	bl	80086dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006642:	2300      	movs	r3, #0
 8006644:	e05c      	b.n	8006700 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006648:	2b00      	cmp	r3, #0
 800664a:	d106      	bne.n	800665a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800664c:	f107 0314 	add.w	r3, r7, #20
 8006650:	4618      	mov	r0, r3
 8006652:	f001 f8d9 	bl	8007808 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006656:	2301      	movs	r3, #1
 8006658:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800665a:	f002 f83f 	bl	80086dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800665e:	f000 fe21 	bl	80072a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006662:	f002 f80b 	bl	800867c <vPortEnterCritical>
 8006666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006668:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800666c:	b25b      	sxtb	r3, r3
 800666e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006672:	d103      	bne.n	800667c <xQueueGenericSend+0x174>
 8006674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006676:	2200      	movs	r2, #0
 8006678:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800667c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800667e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006682:	b25b      	sxtb	r3, r3
 8006684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006688:	d103      	bne.n	8006692 <xQueueGenericSend+0x18a>
 800668a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800668c:	2200      	movs	r2, #0
 800668e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006692:	f002 f823 	bl	80086dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006696:	1d3a      	adds	r2, r7, #4
 8006698:	f107 0314 	add.w	r3, r7, #20
 800669c:	4611      	mov	r1, r2
 800669e:	4618      	mov	r0, r3
 80066a0:	f001 f8c8 	bl	8007834 <xTaskCheckForTimeOut>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d124      	bne.n	80066f4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80066aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80066ac:	f000 fb28 	bl	8006d00 <prvIsQueueFull>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d018      	beq.n	80066e8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80066b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b8:	3310      	adds	r3, #16
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	4611      	mov	r1, r2
 80066be:	4618      	mov	r0, r3
 80066c0:	f000 ffec 	bl	800769c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80066c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80066c6:	f000 fab3 	bl	8006c30 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80066ca:	f000 fdf9 	bl	80072c0 <xTaskResumeAll>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f47f af7c 	bne.w	80065ce <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80066d6:	4b0c      	ldr	r3, [pc, #48]	@ (8006708 <xQueueGenericSend+0x200>)
 80066d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066dc:	601a      	str	r2, [r3, #0]
 80066de:	f3bf 8f4f 	dsb	sy
 80066e2:	f3bf 8f6f 	isb	sy
 80066e6:	e772      	b.n	80065ce <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80066e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80066ea:	f000 faa1 	bl	8006c30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066ee:	f000 fde7 	bl	80072c0 <xTaskResumeAll>
 80066f2:	e76c      	b.n	80065ce <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80066f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80066f6:	f000 fa9b 	bl	8006c30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066fa:	f000 fde1 	bl	80072c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80066fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006700:	4618      	mov	r0, r3
 8006702:	3738      	adds	r7, #56	@ 0x38
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}
 8006708:	e000ed04 	.word	0xe000ed04

0800670c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b090      	sub	sp, #64	@ 0x40
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	607a      	str	r2, [r7, #4]
 8006718:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800671e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006720:	2b00      	cmp	r3, #0
 8006722:	d10b      	bne.n	800673c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006728:	f383 8811 	msr	BASEPRI, r3
 800672c:	f3bf 8f6f 	isb	sy
 8006730:	f3bf 8f4f 	dsb	sy
 8006734:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006736:	bf00      	nop
 8006738:	bf00      	nop
 800673a:	e7fd      	b.n	8006738 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d103      	bne.n	800674a <xQueueGenericSendFromISR+0x3e>
 8006742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006746:	2b00      	cmp	r3, #0
 8006748:	d101      	bne.n	800674e <xQueueGenericSendFromISR+0x42>
 800674a:	2301      	movs	r3, #1
 800674c:	e000      	b.n	8006750 <xQueueGenericSendFromISR+0x44>
 800674e:	2300      	movs	r3, #0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d10b      	bne.n	800676c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006758:	f383 8811 	msr	BASEPRI, r3
 800675c:	f3bf 8f6f 	isb	sy
 8006760:	f3bf 8f4f 	dsb	sy
 8006764:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006766:	bf00      	nop
 8006768:	bf00      	nop
 800676a:	e7fd      	b.n	8006768 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	2b02      	cmp	r3, #2
 8006770:	d103      	bne.n	800677a <xQueueGenericSendFromISR+0x6e>
 8006772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006776:	2b01      	cmp	r3, #1
 8006778:	d101      	bne.n	800677e <xQueueGenericSendFromISR+0x72>
 800677a:	2301      	movs	r3, #1
 800677c:	e000      	b.n	8006780 <xQueueGenericSendFromISR+0x74>
 800677e:	2300      	movs	r3, #0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d10b      	bne.n	800679c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006788:	f383 8811 	msr	BASEPRI, r3
 800678c:	f3bf 8f6f 	isb	sy
 8006790:	f3bf 8f4f 	dsb	sy
 8006794:	623b      	str	r3, [r7, #32]
}
 8006796:	bf00      	nop
 8006798:	bf00      	nop
 800679a:	e7fd      	b.n	8006798 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800679c:	f002 f830 	bl	8008800 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80067a0:	f3ef 8211 	mrs	r2, BASEPRI
 80067a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067a8:	f383 8811 	msr	BASEPRI, r3
 80067ac:	f3bf 8f6f 	isb	sy
 80067b0:	f3bf 8f4f 	dsb	sy
 80067b4:	61fa      	str	r2, [r7, #28]
 80067b6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80067b8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80067ba:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80067bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d302      	bcc.n	80067ce <xQueueGenericSendFromISR+0xc2>
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d12f      	bne.n	800682e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80067ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80067d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80067de:	683a      	ldr	r2, [r7, #0]
 80067e0:	68b9      	ldr	r1, [r7, #8]
 80067e2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80067e4:	f000 f994 	bl	8006b10 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80067e8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80067ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f0:	d112      	bne.n	8006818 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d016      	beq.n	8006828 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067fc:	3324      	adds	r3, #36	@ 0x24
 80067fe:	4618      	mov	r0, r3
 8006800:	f000 ff9e 	bl	8007740 <xTaskRemoveFromEventList>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00e      	beq.n	8006828 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00b      	beq.n	8006828 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	601a      	str	r2, [r3, #0]
 8006816:	e007      	b.n	8006828 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006818:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800681c:	3301      	adds	r3, #1
 800681e:	b2db      	uxtb	r3, r3
 8006820:	b25a      	sxtb	r2, r3
 8006822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006824:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006828:	2301      	movs	r3, #1
 800682a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800682c:	e001      	b.n	8006832 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800682e:	2300      	movs	r3, #0
 8006830:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006834:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800683c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800683e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006840:	4618      	mov	r0, r3
 8006842:	3740      	adds	r7, #64	@ 0x40
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b08c      	sub	sp, #48	@ 0x30
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006854:	2300      	movs	r3, #0
 8006856:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800685c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800685e:	2b00      	cmp	r3, #0
 8006860:	d10b      	bne.n	800687a <xQueueReceive+0x32>
	__asm volatile
 8006862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006866:	f383 8811 	msr	BASEPRI, r3
 800686a:	f3bf 8f6f 	isb	sy
 800686e:	f3bf 8f4f 	dsb	sy
 8006872:	623b      	str	r3, [r7, #32]
}
 8006874:	bf00      	nop
 8006876:	bf00      	nop
 8006878:	e7fd      	b.n	8006876 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d103      	bne.n	8006888 <xQueueReceive+0x40>
 8006880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006884:	2b00      	cmp	r3, #0
 8006886:	d101      	bne.n	800688c <xQueueReceive+0x44>
 8006888:	2301      	movs	r3, #1
 800688a:	e000      	b.n	800688e <xQueueReceive+0x46>
 800688c:	2300      	movs	r3, #0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d10b      	bne.n	80068aa <xQueueReceive+0x62>
	__asm volatile
 8006892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006896:	f383 8811 	msr	BASEPRI, r3
 800689a:	f3bf 8f6f 	isb	sy
 800689e:	f3bf 8f4f 	dsb	sy
 80068a2:	61fb      	str	r3, [r7, #28]
}
 80068a4:	bf00      	nop
 80068a6:	bf00      	nop
 80068a8:	e7fd      	b.n	80068a6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80068aa:	f001 f90f 	bl	8007acc <xTaskGetSchedulerState>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d102      	bne.n	80068ba <xQueueReceive+0x72>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d101      	bne.n	80068be <xQueueReceive+0x76>
 80068ba:	2301      	movs	r3, #1
 80068bc:	e000      	b.n	80068c0 <xQueueReceive+0x78>
 80068be:	2300      	movs	r3, #0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d10b      	bne.n	80068dc <xQueueReceive+0x94>
	__asm volatile
 80068c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068c8:	f383 8811 	msr	BASEPRI, r3
 80068cc:	f3bf 8f6f 	isb	sy
 80068d0:	f3bf 8f4f 	dsb	sy
 80068d4:	61bb      	str	r3, [r7, #24]
}
 80068d6:	bf00      	nop
 80068d8:	bf00      	nop
 80068da:	e7fd      	b.n	80068d8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80068dc:	f001 fece 	bl	800867c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068e4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d01f      	beq.n	800692c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80068ec:	68b9      	ldr	r1, [r7, #8]
 80068ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068f0:	f000 f978 	bl	8006be4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80068f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f6:	1e5a      	subs	r2, r3, #1
 80068f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068fa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d00f      	beq.n	8006924 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006906:	3310      	adds	r3, #16
 8006908:	4618      	mov	r0, r3
 800690a:	f000 ff19 	bl	8007740 <xTaskRemoveFromEventList>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d007      	beq.n	8006924 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006914:	4b3c      	ldr	r3, [pc, #240]	@ (8006a08 <xQueueReceive+0x1c0>)
 8006916:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800691a:	601a      	str	r2, [r3, #0]
 800691c:	f3bf 8f4f 	dsb	sy
 8006920:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006924:	f001 feda 	bl	80086dc <vPortExitCritical>
				return pdPASS;
 8006928:	2301      	movs	r3, #1
 800692a:	e069      	b.n	8006a00 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d103      	bne.n	800693a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006932:	f001 fed3 	bl	80086dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006936:	2300      	movs	r3, #0
 8006938:	e062      	b.n	8006a00 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800693a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800693c:	2b00      	cmp	r3, #0
 800693e:	d106      	bne.n	800694e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006940:	f107 0310 	add.w	r3, r7, #16
 8006944:	4618      	mov	r0, r3
 8006946:	f000 ff5f 	bl	8007808 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800694a:	2301      	movs	r3, #1
 800694c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800694e:	f001 fec5 	bl	80086dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006952:	f000 fca7 	bl	80072a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006956:	f001 fe91 	bl	800867c <vPortEnterCritical>
 800695a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800695c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006960:	b25b      	sxtb	r3, r3
 8006962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006966:	d103      	bne.n	8006970 <xQueueReceive+0x128>
 8006968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800696a:	2200      	movs	r2, #0
 800696c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006972:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006976:	b25b      	sxtb	r3, r3
 8006978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800697c:	d103      	bne.n	8006986 <xQueueReceive+0x13e>
 800697e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006980:	2200      	movs	r2, #0
 8006982:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006986:	f001 fea9 	bl	80086dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800698a:	1d3a      	adds	r2, r7, #4
 800698c:	f107 0310 	add.w	r3, r7, #16
 8006990:	4611      	mov	r1, r2
 8006992:	4618      	mov	r0, r3
 8006994:	f000 ff4e 	bl	8007834 <xTaskCheckForTimeOut>
 8006998:	4603      	mov	r3, r0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d123      	bne.n	80069e6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800699e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069a0:	f000 f998 	bl	8006cd4 <prvIsQueueEmpty>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d017      	beq.n	80069da <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80069aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ac:	3324      	adds	r3, #36	@ 0x24
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	4611      	mov	r1, r2
 80069b2:	4618      	mov	r0, r3
 80069b4:	f000 fe72 	bl	800769c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80069b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069ba:	f000 f939 	bl	8006c30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80069be:	f000 fc7f 	bl	80072c0 <xTaskResumeAll>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d189      	bne.n	80068dc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80069c8:	4b0f      	ldr	r3, [pc, #60]	@ (8006a08 <xQueueReceive+0x1c0>)
 80069ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069ce:	601a      	str	r2, [r3, #0]
 80069d0:	f3bf 8f4f 	dsb	sy
 80069d4:	f3bf 8f6f 	isb	sy
 80069d8:	e780      	b.n	80068dc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80069da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069dc:	f000 f928 	bl	8006c30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069e0:	f000 fc6e 	bl	80072c0 <xTaskResumeAll>
 80069e4:	e77a      	b.n	80068dc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80069e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069e8:	f000 f922 	bl	8006c30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069ec:	f000 fc68 	bl	80072c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069f2:	f000 f96f 	bl	8006cd4 <prvIsQueueEmpty>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f43f af6f 	beq.w	80068dc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80069fe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3730      	adds	r7, #48	@ 0x30
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	e000ed04 	.word	0xe000ed04

08006a0c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b08e      	sub	sp, #56	@ 0x38
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d10b      	bne.n	8006a3a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a26:	f383 8811 	msr	BASEPRI, r3
 8006a2a:	f3bf 8f6f 	isb	sy
 8006a2e:	f3bf 8f4f 	dsb	sy
 8006a32:	623b      	str	r3, [r7, #32]
}
 8006a34:	bf00      	nop
 8006a36:	bf00      	nop
 8006a38:	e7fd      	b.n	8006a36 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d103      	bne.n	8006a48 <xQueueReceiveFromISR+0x3c>
 8006a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d101      	bne.n	8006a4c <xQueueReceiveFromISR+0x40>
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e000      	b.n	8006a4e <xQueueReceiveFromISR+0x42>
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10b      	bne.n	8006a6a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a56:	f383 8811 	msr	BASEPRI, r3
 8006a5a:	f3bf 8f6f 	isb	sy
 8006a5e:	f3bf 8f4f 	dsb	sy
 8006a62:	61fb      	str	r3, [r7, #28]
}
 8006a64:	bf00      	nop
 8006a66:	bf00      	nop
 8006a68:	e7fd      	b.n	8006a66 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a6a:	f001 fec9 	bl	8008800 <vPortValidateInterruptPriority>
	__asm volatile
 8006a6e:	f3ef 8211 	mrs	r2, BASEPRI
 8006a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a76:	f383 8811 	msr	BASEPRI, r3
 8006a7a:	f3bf 8f6f 	isb	sy
 8006a7e:	f3bf 8f4f 	dsb	sy
 8006a82:	61ba      	str	r2, [r7, #24]
 8006a84:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006a86:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a8e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d02f      	beq.n	8006af6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006aa0:	68b9      	ldr	r1, [r7, #8]
 8006aa2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006aa4:	f000 f89e 	bl	8006be4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aaa:	1e5a      	subs	r2, r3, #1
 8006aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aae:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006ab0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab8:	d112      	bne.n	8006ae0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d016      	beq.n	8006af0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac4:	3310      	adds	r3, #16
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f000 fe3a 	bl	8007740 <xTaskRemoveFromEventList>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00e      	beq.n	8006af0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00b      	beq.n	8006af0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	601a      	str	r2, [r3, #0]
 8006ade:	e007      	b.n	8006af0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006ae0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	b25a      	sxtb	r2, r3
 8006aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006af0:	2301      	movs	r3, #1
 8006af2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006af4:	e001      	b.n	8006afa <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006af6:	2300      	movs	r3, #0
 8006af8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006afa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006afc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	f383 8811 	msr	BASEPRI, r3
}
 8006b04:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3738      	adds	r7, #56	@ 0x38
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b086      	sub	sp, #24
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b24:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10d      	bne.n	8006b4a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d14d      	bne.n	8006bd2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f000 ffe4 	bl	8007b08 <xTaskPriorityDisinherit>
 8006b40:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	609a      	str	r2, [r3, #8]
 8006b48:	e043      	b.n	8006bd2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d119      	bne.n	8006b84 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6858      	ldr	r0, [r3, #4]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b58:	461a      	mov	r2, r3
 8006b5a:	68b9      	ldr	r1, [r7, #8]
 8006b5c:	f002 f96c 	bl	8008e38 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	685a      	ldr	r2, [r3, #4]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b68:	441a      	add	r2, r3
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	685a      	ldr	r2, [r3, #4]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d32b      	bcc.n	8006bd2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	605a      	str	r2, [r3, #4]
 8006b82:	e026      	b.n	8006bd2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	68d8      	ldr	r0, [r3, #12]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	68b9      	ldr	r1, [r7, #8]
 8006b90:	f002 f952 	bl	8008e38 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	68da      	ldr	r2, [r3, #12]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b9c:	425b      	negs	r3, r3
 8006b9e:	441a      	add	r2, r3
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	68da      	ldr	r2, [r3, #12]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d207      	bcs.n	8006bc0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	689a      	ldr	r2, [r3, #8]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bb8:	425b      	negs	r3, r3
 8006bba:	441a      	add	r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d105      	bne.n	8006bd2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d002      	beq.n	8006bd2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	1c5a      	adds	r2, r3, #1
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006bda:	697b      	ldr	r3, [r7, #20]
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3718      	adds	r7, #24
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d018      	beq.n	8006c28 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	68da      	ldr	r2, [r3, #12]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bfe:	441a      	add	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	68da      	ldr	r2, [r3, #12]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d303      	bcc.n	8006c18 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	68d9      	ldr	r1, [r3, #12]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c20:	461a      	mov	r2, r3
 8006c22:	6838      	ldr	r0, [r7, #0]
 8006c24:	f002 f908 	bl	8008e38 <memcpy>
	}
}
 8006c28:	bf00      	nop
 8006c2a:	3708      	adds	r7, #8
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006c38:	f001 fd20 	bl	800867c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c42:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c44:	e011      	b.n	8006c6a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d012      	beq.n	8006c74 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	3324      	adds	r3, #36	@ 0x24
 8006c52:	4618      	mov	r0, r3
 8006c54:	f000 fd74 	bl	8007740 <xTaskRemoveFromEventList>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d001      	beq.n	8006c62 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006c5e:	f000 fe4d 	bl	80078fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006c62:	7bfb      	ldrb	r3, [r7, #15]
 8006c64:	3b01      	subs	r3, #1
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	dce9      	bgt.n	8006c46 <prvUnlockQueue+0x16>
 8006c72:	e000      	b.n	8006c76 <prvUnlockQueue+0x46>
					break;
 8006c74:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	22ff      	movs	r2, #255	@ 0xff
 8006c7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006c7e:	f001 fd2d 	bl	80086dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006c82:	f001 fcfb 	bl	800867c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c8c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c8e:	e011      	b.n	8006cb4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d012      	beq.n	8006cbe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	3310      	adds	r3, #16
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f000 fd4f 	bl	8007740 <xTaskRemoveFromEventList>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d001      	beq.n	8006cac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006ca8:	f000 fe28 	bl	80078fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006cac:	7bbb      	ldrb	r3, [r7, #14]
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006cb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	dce9      	bgt.n	8006c90 <prvUnlockQueue+0x60>
 8006cbc:	e000      	b.n	8006cc0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006cbe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	22ff      	movs	r2, #255	@ 0xff
 8006cc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006cc8:	f001 fd08 	bl	80086dc <vPortExitCritical>
}
 8006ccc:	bf00      	nop
 8006cce:	3710      	adds	r7, #16
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006cdc:	f001 fcce 	bl	800867c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d102      	bne.n	8006cee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	60fb      	str	r3, [r7, #12]
 8006cec:	e001      	b.n	8006cf2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006cf2:	f001 fcf3 	bl	80086dc <vPortExitCritical>

	return xReturn;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3710      	adds	r7, #16
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d08:	f001 fcb8 	bl	800867c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d102      	bne.n	8006d1e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	60fb      	str	r3, [r7, #12]
 8006d1c:	e001      	b.n	8006d22 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d22:	f001 fcdb 	bl	80086dc <vPortExitCritical>

	return xReturn;
 8006d26:	68fb      	ldr	r3, [r7, #12]
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	60fb      	str	r3, [r7, #12]
 8006d3e:	e014      	b.n	8006d6a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006d40:	4a0e      	ldr	r2, [pc, #56]	@ (8006d7c <vQueueAddToRegistry+0x4c>)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d10b      	bne.n	8006d64 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006d4c:	490b      	ldr	r1, [pc, #44]	@ (8006d7c <vQueueAddToRegistry+0x4c>)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	683a      	ldr	r2, [r7, #0]
 8006d52:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006d56:	4a09      	ldr	r2, [pc, #36]	@ (8006d7c <vQueueAddToRegistry+0x4c>)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	00db      	lsls	r3, r3, #3
 8006d5c:	4413      	add	r3, r2
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006d62:	e006      	b.n	8006d72 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	3301      	adds	r3, #1
 8006d68:	60fb      	str	r3, [r7, #12]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2b07      	cmp	r3, #7
 8006d6e:	d9e7      	bls.n	8006d40 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006d70:	bf00      	nop
 8006d72:	bf00      	nop
 8006d74:	3714      	adds	r7, #20
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bc80      	pop	{r7}
 8006d7a:	4770      	bx	lr
 8006d7c:	20000ca0 	.word	0x20000ca0

08006d80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b086      	sub	sp, #24
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006d90:	f001 fc74 	bl	800867c <vPortEnterCritical>
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006d9a:	b25b      	sxtb	r3, r3
 8006d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da0:	d103      	bne.n	8006daa <vQueueWaitForMessageRestricted+0x2a>
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006db0:	b25b      	sxtb	r3, r3
 8006db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db6:	d103      	bne.n	8006dc0 <vQueueWaitForMessageRestricted+0x40>
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006dc0:	f001 fc8c 	bl	80086dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d106      	bne.n	8006dda <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	3324      	adds	r3, #36	@ 0x24
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	68b9      	ldr	r1, [r7, #8]
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f000 fc87 	bl	80076e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006dda:	6978      	ldr	r0, [r7, #20]
 8006ddc:	f7ff ff28 	bl	8006c30 <prvUnlockQueue>
	}
 8006de0:	bf00      	nop
 8006de2:	3718      	adds	r7, #24
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b08e      	sub	sp, #56	@ 0x38
 8006dec:	af04      	add	r7, sp, #16
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	607a      	str	r2, [r7, #4]
 8006df4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d10b      	bne.n	8006e14 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e00:	f383 8811 	msr	BASEPRI, r3
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	623b      	str	r3, [r7, #32]
}
 8006e0e:	bf00      	nop
 8006e10:	bf00      	nop
 8006e12:	e7fd      	b.n	8006e10 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d10b      	bne.n	8006e32 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e1e:	f383 8811 	msr	BASEPRI, r3
 8006e22:	f3bf 8f6f 	isb	sy
 8006e26:	f3bf 8f4f 	dsb	sy
 8006e2a:	61fb      	str	r3, [r7, #28]
}
 8006e2c:	bf00      	nop
 8006e2e:	bf00      	nop
 8006e30:	e7fd      	b.n	8006e2e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006e32:	23a0      	movs	r3, #160	@ 0xa0
 8006e34:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	2ba0      	cmp	r3, #160	@ 0xa0
 8006e3a:	d00b      	beq.n	8006e54 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e40:	f383 8811 	msr	BASEPRI, r3
 8006e44:	f3bf 8f6f 	isb	sy
 8006e48:	f3bf 8f4f 	dsb	sy
 8006e4c:	61bb      	str	r3, [r7, #24]
}
 8006e4e:	bf00      	nop
 8006e50:	bf00      	nop
 8006e52:	e7fd      	b.n	8006e50 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006e54:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d01e      	beq.n	8006e9a <xTaskCreateStatic+0xb2>
 8006e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d01b      	beq.n	8006e9a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e64:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006e6a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6e:	2202      	movs	r2, #2
 8006e70:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006e74:	2300      	movs	r3, #0
 8006e76:	9303      	str	r3, [sp, #12]
 8006e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7a:	9302      	str	r3, [sp, #8]
 8006e7c:	f107 0314 	add.w	r3, r7, #20
 8006e80:	9301      	str	r3, [sp, #4]
 8006e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e84:	9300      	str	r3, [sp, #0]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	68b9      	ldr	r1, [r7, #8]
 8006e8c:	68f8      	ldr	r0, [r7, #12]
 8006e8e:	f000 f851 	bl	8006f34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e92:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006e94:	f000 f8f6 	bl	8007084 <prvAddNewTaskToReadyList>
 8006e98:	e001      	b.n	8006e9e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006e9e:	697b      	ldr	r3, [r7, #20]
	}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3728      	adds	r7, #40	@ 0x28
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b08c      	sub	sp, #48	@ 0x30
 8006eac:	af04      	add	r7, sp, #16
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	603b      	str	r3, [r7, #0]
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006eb8:	88fb      	ldrh	r3, [r7, #6]
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f001 fcdf 	bl	8008880 <pvPortMalloc>
 8006ec2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d00e      	beq.n	8006ee8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006eca:	20a0      	movs	r0, #160	@ 0xa0
 8006ecc:	f001 fcd8 	bl	8008880 <pvPortMalloc>
 8006ed0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d003      	beq.n	8006ee0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	697a      	ldr	r2, [r7, #20]
 8006edc:	631a      	str	r2, [r3, #48]	@ 0x30
 8006ede:	e005      	b.n	8006eec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006ee0:	6978      	ldr	r0, [r7, #20]
 8006ee2:	f001 fd9b 	bl	8008a1c <vPortFree>
 8006ee6:	e001      	b.n	8006eec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d017      	beq.n	8006f22 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006efa:	88fa      	ldrh	r2, [r7, #6]
 8006efc:	2300      	movs	r3, #0
 8006efe:	9303      	str	r3, [sp, #12]
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	9302      	str	r3, [sp, #8]
 8006f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f06:	9301      	str	r3, [sp, #4]
 8006f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f0a:	9300      	str	r3, [sp, #0]
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	68b9      	ldr	r1, [r7, #8]
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	f000 f80f 	bl	8006f34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f16:	69f8      	ldr	r0, [r7, #28]
 8006f18:	f000 f8b4 	bl	8007084 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	61bb      	str	r3, [r7, #24]
 8006f20:	e002      	b.n	8006f28 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006f22:	f04f 33ff 	mov.w	r3, #4294967295
 8006f26:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006f28:	69bb      	ldr	r3, [r7, #24]
	}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3720      	adds	r7, #32
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
	...

08006f34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b088      	sub	sp, #32
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	607a      	str	r2, [r7, #4]
 8006f40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f44:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	21a5      	movs	r1, #165	@ 0xa5
 8006f4e:	f001 fee1 	bl	8008d14 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4413      	add	r3, r2
 8006f62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	f023 0307 	bic.w	r3, r3, #7
 8006f6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	f003 0307 	and.w	r3, r3, #7
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00b      	beq.n	8006f8e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f7a:	f383 8811 	msr	BASEPRI, r3
 8006f7e:	f3bf 8f6f 	isb	sy
 8006f82:	f3bf 8f4f 	dsb	sy
 8006f86:	617b      	str	r3, [r7, #20]
}
 8006f88:	bf00      	nop
 8006f8a:	bf00      	nop
 8006f8c:	e7fd      	b.n	8006f8a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d01f      	beq.n	8006fd4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f94:	2300      	movs	r3, #0
 8006f96:	61fb      	str	r3, [r7, #28]
 8006f98:	e012      	b.n	8006fc0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	7819      	ldrb	r1, [r3, #0]
 8006fa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	3334      	adds	r3, #52	@ 0x34
 8006faa:	460a      	mov	r2, r1
 8006fac:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006fae:	68ba      	ldr	r2, [r7, #8]
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d006      	beq.n	8006fc8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	61fb      	str	r3, [r7, #28]
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	2b0f      	cmp	r3, #15
 8006fc4:	d9e9      	bls.n	8006f9a <prvInitialiseNewTask+0x66>
 8006fc6:	e000      	b.n	8006fca <prvInitialiseNewTask+0x96>
			{
				break;
 8006fc8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006fd2:	e003      	b.n	8006fdc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fde:	2b06      	cmp	r3, #6
 8006fe0:	d901      	bls.n	8006fe6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006fe2:	2306      	movs	r3, #6
 8006fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006fea:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ff0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ffa:	3304      	adds	r3, #4
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7ff f8b0 	bl	8006162 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007004:	3318      	adds	r3, #24
 8007006:	4618      	mov	r0, r3
 8007008:	f7ff f8ab 	bl	8006162 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800700c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800700e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007010:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007014:	f1c3 0207 	rsb	r2, r3, #7
 8007018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800701a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800701c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800701e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007020:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007024:	2200      	movs	r2, #0
 8007026:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800702a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800702c:	2200      	movs	r2, #0
 800702e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007034:	334c      	adds	r3, #76	@ 0x4c
 8007036:	224c      	movs	r2, #76	@ 0x4c
 8007038:	2100      	movs	r1, #0
 800703a:	4618      	mov	r0, r3
 800703c:	f001 fe6a 	bl	8008d14 <memset>
 8007040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007042:	4a0d      	ldr	r2, [pc, #52]	@ (8007078 <prvInitialiseNewTask+0x144>)
 8007044:	651a      	str	r2, [r3, #80]	@ 0x50
 8007046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007048:	4a0c      	ldr	r2, [pc, #48]	@ (800707c <prvInitialiseNewTask+0x148>)
 800704a:	655a      	str	r2, [r3, #84]	@ 0x54
 800704c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800704e:	4a0c      	ldr	r2, [pc, #48]	@ (8007080 <prvInitialiseNewTask+0x14c>)
 8007050:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007052:	683a      	ldr	r2, [r7, #0]
 8007054:	68f9      	ldr	r1, [r7, #12]
 8007056:	69b8      	ldr	r0, [r7, #24]
 8007058:	f001 fa1e 	bl	8008498 <pxPortInitialiseStack>
 800705c:	4602      	mov	r2, r0
 800705e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007060:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007064:	2b00      	cmp	r3, #0
 8007066:	d002      	beq.n	800706e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800706a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800706c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800706e:	bf00      	nop
 8007070:	3720      	adds	r7, #32
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	20003730 	.word	0x20003730
 800707c:	20003798 	.word	0x20003798
 8007080:	20003800 	.word	0x20003800

08007084 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800708c:	f001 faf6 	bl	800867c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007090:	4b2a      	ldr	r3, [pc, #168]	@ (800713c <prvAddNewTaskToReadyList+0xb8>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	3301      	adds	r3, #1
 8007096:	4a29      	ldr	r2, [pc, #164]	@ (800713c <prvAddNewTaskToReadyList+0xb8>)
 8007098:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800709a:	4b29      	ldr	r3, [pc, #164]	@ (8007140 <prvAddNewTaskToReadyList+0xbc>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d109      	bne.n	80070b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80070a2:	4a27      	ldr	r2, [pc, #156]	@ (8007140 <prvAddNewTaskToReadyList+0xbc>)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80070a8:	4b24      	ldr	r3, [pc, #144]	@ (800713c <prvAddNewTaskToReadyList+0xb8>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d110      	bne.n	80070d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80070b0:	f000 fc48 	bl	8007944 <prvInitialiseTaskLists>
 80070b4:	e00d      	b.n	80070d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80070b6:	4b23      	ldr	r3, [pc, #140]	@ (8007144 <prvAddNewTaskToReadyList+0xc0>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d109      	bne.n	80070d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80070be:	4b20      	ldr	r3, [pc, #128]	@ (8007140 <prvAddNewTaskToReadyList+0xbc>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d802      	bhi.n	80070d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80070cc:	4a1c      	ldr	r2, [pc, #112]	@ (8007140 <prvAddNewTaskToReadyList+0xbc>)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80070d2:	4b1d      	ldr	r3, [pc, #116]	@ (8007148 <prvAddNewTaskToReadyList+0xc4>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	3301      	adds	r3, #1
 80070d8:	4a1b      	ldr	r2, [pc, #108]	@ (8007148 <prvAddNewTaskToReadyList+0xc4>)
 80070da:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070e0:	2201      	movs	r2, #1
 80070e2:	409a      	lsls	r2, r3
 80070e4:	4b19      	ldr	r3, [pc, #100]	@ (800714c <prvAddNewTaskToReadyList+0xc8>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	4a18      	ldr	r2, [pc, #96]	@ (800714c <prvAddNewTaskToReadyList+0xc8>)
 80070ec:	6013      	str	r3, [r2, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070f2:	4613      	mov	r3, r2
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	4413      	add	r3, r2
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	4a15      	ldr	r2, [pc, #84]	@ (8007150 <prvAddNewTaskToReadyList+0xcc>)
 80070fc:	441a      	add	r2, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	3304      	adds	r3, #4
 8007102:	4619      	mov	r1, r3
 8007104:	4610      	mov	r0, r2
 8007106:	f7ff f838 	bl	800617a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800710a:	f001 fae7 	bl	80086dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800710e:	4b0d      	ldr	r3, [pc, #52]	@ (8007144 <prvAddNewTaskToReadyList+0xc0>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00e      	beq.n	8007134 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007116:	4b0a      	ldr	r3, [pc, #40]	@ (8007140 <prvAddNewTaskToReadyList+0xbc>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007120:	429a      	cmp	r2, r3
 8007122:	d207      	bcs.n	8007134 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007124:	4b0b      	ldr	r3, [pc, #44]	@ (8007154 <prvAddNewTaskToReadyList+0xd0>)
 8007126:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800712a:	601a      	str	r2, [r3, #0]
 800712c:	f3bf 8f4f 	dsb	sy
 8007130:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007134:	bf00      	nop
 8007136:	3708      	adds	r7, #8
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}
 800713c:	20000de0 	.word	0x20000de0
 8007140:	20000ce0 	.word	0x20000ce0
 8007144:	20000dec 	.word	0x20000dec
 8007148:	20000dfc 	.word	0x20000dfc
 800714c:	20000de8 	.word	0x20000de8
 8007150:	20000ce4 	.word	0x20000ce4
 8007154:	e000ed04 	.word	0xe000ed04

08007158 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007160:	2300      	movs	r3, #0
 8007162:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d018      	beq.n	800719c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800716a:	4b14      	ldr	r3, [pc, #80]	@ (80071bc <vTaskDelay+0x64>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00b      	beq.n	800718a <vTaskDelay+0x32>
	__asm volatile
 8007172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007176:	f383 8811 	msr	BASEPRI, r3
 800717a:	f3bf 8f6f 	isb	sy
 800717e:	f3bf 8f4f 	dsb	sy
 8007182:	60bb      	str	r3, [r7, #8]
}
 8007184:	bf00      	nop
 8007186:	bf00      	nop
 8007188:	e7fd      	b.n	8007186 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800718a:	f000 f88b 	bl	80072a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800718e:	2100      	movs	r1, #0
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 fd41 	bl	8007c18 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007196:	f000 f893 	bl	80072c0 <xTaskResumeAll>
 800719a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d107      	bne.n	80071b2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80071a2:	4b07      	ldr	r3, [pc, #28]	@ (80071c0 <vTaskDelay+0x68>)
 80071a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071a8:	601a      	str	r2, [r3, #0]
 80071aa:	f3bf 8f4f 	dsb	sy
 80071ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80071b2:	bf00      	nop
 80071b4:	3710      	adds	r7, #16
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	20000e08 	.word	0x20000e08
 80071c0:	e000ed04 	.word	0xe000ed04

080071c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b08a      	sub	sp, #40	@ 0x28
 80071c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80071ca:	2300      	movs	r3, #0
 80071cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80071ce:	2300      	movs	r3, #0
 80071d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80071d2:	463a      	mov	r2, r7
 80071d4:	1d39      	adds	r1, r7, #4
 80071d6:	f107 0308 	add.w	r3, r7, #8
 80071da:	4618      	mov	r0, r3
 80071dc:	f7f9 fd24 	bl	8000c28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80071e0:	6839      	ldr	r1, [r7, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	68ba      	ldr	r2, [r7, #8]
 80071e6:	9202      	str	r2, [sp, #8]
 80071e8:	9301      	str	r3, [sp, #4]
 80071ea:	2300      	movs	r3, #0
 80071ec:	9300      	str	r3, [sp, #0]
 80071ee:	2300      	movs	r3, #0
 80071f0:	460a      	mov	r2, r1
 80071f2:	4924      	ldr	r1, [pc, #144]	@ (8007284 <vTaskStartScheduler+0xc0>)
 80071f4:	4824      	ldr	r0, [pc, #144]	@ (8007288 <vTaskStartScheduler+0xc4>)
 80071f6:	f7ff fdf7 	bl	8006de8 <xTaskCreateStatic>
 80071fa:	4603      	mov	r3, r0
 80071fc:	4a23      	ldr	r2, [pc, #140]	@ (800728c <vTaskStartScheduler+0xc8>)
 80071fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007200:	4b22      	ldr	r3, [pc, #136]	@ (800728c <vTaskStartScheduler+0xc8>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d002      	beq.n	800720e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007208:	2301      	movs	r3, #1
 800720a:	617b      	str	r3, [r7, #20]
 800720c:	e001      	b.n	8007212 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800720e:	2300      	movs	r3, #0
 8007210:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	2b01      	cmp	r3, #1
 8007216:	d102      	bne.n	800721e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007218:	f000 fd64 	bl	8007ce4 <xTimerCreateTimerTask>
 800721c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d11b      	bne.n	800725c <vTaskStartScheduler+0x98>
	__asm volatile
 8007224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007228:	f383 8811 	msr	BASEPRI, r3
 800722c:	f3bf 8f6f 	isb	sy
 8007230:	f3bf 8f4f 	dsb	sy
 8007234:	613b      	str	r3, [r7, #16]
}
 8007236:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007238:	4b15      	ldr	r3, [pc, #84]	@ (8007290 <vTaskStartScheduler+0xcc>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	334c      	adds	r3, #76	@ 0x4c
 800723e:	4a15      	ldr	r2, [pc, #84]	@ (8007294 <vTaskStartScheduler+0xd0>)
 8007240:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007242:	4b15      	ldr	r3, [pc, #84]	@ (8007298 <vTaskStartScheduler+0xd4>)
 8007244:	f04f 32ff 	mov.w	r2, #4294967295
 8007248:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800724a:	4b14      	ldr	r3, [pc, #80]	@ (800729c <vTaskStartScheduler+0xd8>)
 800724c:	2201      	movs	r2, #1
 800724e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007250:	4b13      	ldr	r3, [pc, #76]	@ (80072a0 <vTaskStartScheduler+0xdc>)
 8007252:	2200      	movs	r2, #0
 8007254:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007256:	f001 f99f 	bl	8008598 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800725a:	e00f      	b.n	800727c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007262:	d10b      	bne.n	800727c <vTaskStartScheduler+0xb8>
	__asm volatile
 8007264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007268:	f383 8811 	msr	BASEPRI, r3
 800726c:	f3bf 8f6f 	isb	sy
 8007270:	f3bf 8f4f 	dsb	sy
 8007274:	60fb      	str	r3, [r7, #12]
}
 8007276:	bf00      	nop
 8007278:	bf00      	nop
 800727a:	e7fd      	b.n	8007278 <vTaskStartScheduler+0xb4>
}
 800727c:	bf00      	nop
 800727e:	3718      	adds	r7, #24
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	0800a0cc 	.word	0x0800a0cc
 8007288:	08007915 	.word	0x08007915
 800728c:	20000e04 	.word	0x20000e04
 8007290:	20000ce0 	.word	0x20000ce0
 8007294:	20000158 	.word	0x20000158
 8007298:	20000e00 	.word	0x20000e00
 800729c:	20000dec 	.word	0x20000dec
 80072a0:	20000de4 	.word	0x20000de4

080072a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80072a4:	b480      	push	{r7}
 80072a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80072a8:	4b04      	ldr	r3, [pc, #16]	@ (80072bc <vTaskSuspendAll+0x18>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	3301      	adds	r3, #1
 80072ae:	4a03      	ldr	r2, [pc, #12]	@ (80072bc <vTaskSuspendAll+0x18>)
 80072b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80072b2:	bf00      	nop
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bc80      	pop	{r7}
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	20000e08 	.word	0x20000e08

080072c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80072c6:	2300      	movs	r3, #0
 80072c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80072ca:	2300      	movs	r3, #0
 80072cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80072ce:	4b42      	ldr	r3, [pc, #264]	@ (80073d8 <xTaskResumeAll+0x118>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d10b      	bne.n	80072ee <xTaskResumeAll+0x2e>
	__asm volatile
 80072d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072da:	f383 8811 	msr	BASEPRI, r3
 80072de:	f3bf 8f6f 	isb	sy
 80072e2:	f3bf 8f4f 	dsb	sy
 80072e6:	603b      	str	r3, [r7, #0]
}
 80072e8:	bf00      	nop
 80072ea:	bf00      	nop
 80072ec:	e7fd      	b.n	80072ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80072ee:	f001 f9c5 	bl	800867c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80072f2:	4b39      	ldr	r3, [pc, #228]	@ (80073d8 <xTaskResumeAll+0x118>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	3b01      	subs	r3, #1
 80072f8:	4a37      	ldr	r2, [pc, #220]	@ (80073d8 <xTaskResumeAll+0x118>)
 80072fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072fc:	4b36      	ldr	r3, [pc, #216]	@ (80073d8 <xTaskResumeAll+0x118>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d161      	bne.n	80073c8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007304:	4b35      	ldr	r3, [pc, #212]	@ (80073dc <xTaskResumeAll+0x11c>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d05d      	beq.n	80073c8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800730c:	e02e      	b.n	800736c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800730e:	4b34      	ldr	r3, [pc, #208]	@ (80073e0 <xTaskResumeAll+0x120>)
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	3318      	adds	r3, #24
 800731a:	4618      	mov	r0, r3
 800731c:	f7fe ff88 	bl	8006230 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	3304      	adds	r3, #4
 8007324:	4618      	mov	r0, r3
 8007326:	f7fe ff83 	bl	8006230 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800732e:	2201      	movs	r2, #1
 8007330:	409a      	lsls	r2, r3
 8007332:	4b2c      	ldr	r3, [pc, #176]	@ (80073e4 <xTaskResumeAll+0x124>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4313      	orrs	r3, r2
 8007338:	4a2a      	ldr	r2, [pc, #168]	@ (80073e4 <xTaskResumeAll+0x124>)
 800733a:	6013      	str	r3, [r2, #0]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007340:	4613      	mov	r3, r2
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	4413      	add	r3, r2
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	4a27      	ldr	r2, [pc, #156]	@ (80073e8 <xTaskResumeAll+0x128>)
 800734a:	441a      	add	r2, r3
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	3304      	adds	r3, #4
 8007350:	4619      	mov	r1, r3
 8007352:	4610      	mov	r0, r2
 8007354:	f7fe ff11 	bl	800617a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800735c:	4b23      	ldr	r3, [pc, #140]	@ (80073ec <xTaskResumeAll+0x12c>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007362:	429a      	cmp	r2, r3
 8007364:	d302      	bcc.n	800736c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007366:	4b22      	ldr	r3, [pc, #136]	@ (80073f0 <xTaskResumeAll+0x130>)
 8007368:	2201      	movs	r2, #1
 800736a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800736c:	4b1c      	ldr	r3, [pc, #112]	@ (80073e0 <xTaskResumeAll+0x120>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1cc      	bne.n	800730e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d001      	beq.n	800737e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800737a:	f000 fb87 	bl	8007a8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800737e:	4b1d      	ldr	r3, [pc, #116]	@ (80073f4 <xTaskResumeAll+0x134>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d010      	beq.n	80073ac <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800738a:	f000 f845 	bl	8007418 <xTaskIncrementTick>
 800738e:	4603      	mov	r3, r0
 8007390:	2b00      	cmp	r3, #0
 8007392:	d002      	beq.n	800739a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007394:	4b16      	ldr	r3, [pc, #88]	@ (80073f0 <xTaskResumeAll+0x130>)
 8007396:	2201      	movs	r2, #1
 8007398:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	3b01      	subs	r3, #1
 800739e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1f1      	bne.n	800738a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80073a6:	4b13      	ldr	r3, [pc, #76]	@ (80073f4 <xTaskResumeAll+0x134>)
 80073a8:	2200      	movs	r2, #0
 80073aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80073ac:	4b10      	ldr	r3, [pc, #64]	@ (80073f0 <xTaskResumeAll+0x130>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d009      	beq.n	80073c8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80073b4:	2301      	movs	r3, #1
 80073b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80073b8:	4b0f      	ldr	r3, [pc, #60]	@ (80073f8 <xTaskResumeAll+0x138>)
 80073ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073be:	601a      	str	r2, [r3, #0]
 80073c0:	f3bf 8f4f 	dsb	sy
 80073c4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80073c8:	f001 f988 	bl	80086dc <vPortExitCritical>

	return xAlreadyYielded;
 80073cc:	68bb      	ldr	r3, [r7, #8]
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	20000e08 	.word	0x20000e08
 80073dc:	20000de0 	.word	0x20000de0
 80073e0:	20000da0 	.word	0x20000da0
 80073e4:	20000de8 	.word	0x20000de8
 80073e8:	20000ce4 	.word	0x20000ce4
 80073ec:	20000ce0 	.word	0x20000ce0
 80073f0:	20000df4 	.word	0x20000df4
 80073f4:	20000df0 	.word	0x20000df0
 80073f8:	e000ed04 	.word	0xe000ed04

080073fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007402:	4b04      	ldr	r3, [pc, #16]	@ (8007414 <xTaskGetTickCount+0x18>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007408:	687b      	ldr	r3, [r7, #4]
}
 800740a:	4618      	mov	r0, r3
 800740c:	370c      	adds	r7, #12
 800740e:	46bd      	mov	sp, r7
 8007410:	bc80      	pop	{r7}
 8007412:	4770      	bx	lr
 8007414:	20000de4 	.word	0x20000de4

08007418 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b086      	sub	sp, #24
 800741c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800741e:	2300      	movs	r3, #0
 8007420:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007422:	4b4f      	ldr	r3, [pc, #316]	@ (8007560 <xTaskIncrementTick+0x148>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	f040 808f 	bne.w	800754a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800742c:	4b4d      	ldr	r3, [pc, #308]	@ (8007564 <xTaskIncrementTick+0x14c>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	3301      	adds	r3, #1
 8007432:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007434:	4a4b      	ldr	r2, [pc, #300]	@ (8007564 <xTaskIncrementTick+0x14c>)
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d121      	bne.n	8007484 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007440:	4b49      	ldr	r3, [pc, #292]	@ (8007568 <xTaskIncrementTick+0x150>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00b      	beq.n	8007462 <xTaskIncrementTick+0x4a>
	__asm volatile
 800744a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800744e:	f383 8811 	msr	BASEPRI, r3
 8007452:	f3bf 8f6f 	isb	sy
 8007456:	f3bf 8f4f 	dsb	sy
 800745a:	603b      	str	r3, [r7, #0]
}
 800745c:	bf00      	nop
 800745e:	bf00      	nop
 8007460:	e7fd      	b.n	800745e <xTaskIncrementTick+0x46>
 8007462:	4b41      	ldr	r3, [pc, #260]	@ (8007568 <xTaskIncrementTick+0x150>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	60fb      	str	r3, [r7, #12]
 8007468:	4b40      	ldr	r3, [pc, #256]	@ (800756c <xTaskIncrementTick+0x154>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a3e      	ldr	r2, [pc, #248]	@ (8007568 <xTaskIncrementTick+0x150>)
 800746e:	6013      	str	r3, [r2, #0]
 8007470:	4a3e      	ldr	r2, [pc, #248]	@ (800756c <xTaskIncrementTick+0x154>)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6013      	str	r3, [r2, #0]
 8007476:	4b3e      	ldr	r3, [pc, #248]	@ (8007570 <xTaskIncrementTick+0x158>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	3301      	adds	r3, #1
 800747c:	4a3c      	ldr	r2, [pc, #240]	@ (8007570 <xTaskIncrementTick+0x158>)
 800747e:	6013      	str	r3, [r2, #0]
 8007480:	f000 fb04 	bl	8007a8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007484:	4b3b      	ldr	r3, [pc, #236]	@ (8007574 <xTaskIncrementTick+0x15c>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	693a      	ldr	r2, [r7, #16]
 800748a:	429a      	cmp	r2, r3
 800748c:	d348      	bcc.n	8007520 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800748e:	4b36      	ldr	r3, [pc, #216]	@ (8007568 <xTaskIncrementTick+0x150>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d104      	bne.n	80074a2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007498:	4b36      	ldr	r3, [pc, #216]	@ (8007574 <xTaskIncrementTick+0x15c>)
 800749a:	f04f 32ff 	mov.w	r2, #4294967295
 800749e:	601a      	str	r2, [r3, #0]
					break;
 80074a0:	e03e      	b.n	8007520 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074a2:	4b31      	ldr	r3, [pc, #196]	@ (8007568 <xTaskIncrementTick+0x150>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80074b2:	693a      	ldr	r2, [r7, #16]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d203      	bcs.n	80074c2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80074ba:	4a2e      	ldr	r2, [pc, #184]	@ (8007574 <xTaskIncrementTick+0x15c>)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80074c0:	e02e      	b.n	8007520 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	3304      	adds	r3, #4
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7fe feb2 	bl	8006230 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d004      	beq.n	80074de <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	3318      	adds	r3, #24
 80074d8:	4618      	mov	r0, r3
 80074da:	f7fe fea9 	bl	8006230 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074e2:	2201      	movs	r2, #1
 80074e4:	409a      	lsls	r2, r3
 80074e6:	4b24      	ldr	r3, [pc, #144]	@ (8007578 <xTaskIncrementTick+0x160>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	4a22      	ldr	r2, [pc, #136]	@ (8007578 <xTaskIncrementTick+0x160>)
 80074ee:	6013      	str	r3, [r2, #0]
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074f4:	4613      	mov	r3, r2
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	4413      	add	r3, r2
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	4a1f      	ldr	r2, [pc, #124]	@ (800757c <xTaskIncrementTick+0x164>)
 80074fe:	441a      	add	r2, r3
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	3304      	adds	r3, #4
 8007504:	4619      	mov	r1, r3
 8007506:	4610      	mov	r0, r2
 8007508:	f7fe fe37 	bl	800617a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007510:	4b1b      	ldr	r3, [pc, #108]	@ (8007580 <xTaskIncrementTick+0x168>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007516:	429a      	cmp	r2, r3
 8007518:	d3b9      	bcc.n	800748e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800751a:	2301      	movs	r3, #1
 800751c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800751e:	e7b6      	b.n	800748e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007520:	4b17      	ldr	r3, [pc, #92]	@ (8007580 <xTaskIncrementTick+0x168>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007526:	4915      	ldr	r1, [pc, #84]	@ (800757c <xTaskIncrementTick+0x164>)
 8007528:	4613      	mov	r3, r2
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	4413      	add	r3, r2
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	440b      	add	r3, r1
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2b01      	cmp	r3, #1
 8007536:	d901      	bls.n	800753c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007538:	2301      	movs	r3, #1
 800753a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800753c:	4b11      	ldr	r3, [pc, #68]	@ (8007584 <xTaskIncrementTick+0x16c>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d007      	beq.n	8007554 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007544:	2301      	movs	r3, #1
 8007546:	617b      	str	r3, [r7, #20]
 8007548:	e004      	b.n	8007554 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800754a:	4b0f      	ldr	r3, [pc, #60]	@ (8007588 <xTaskIncrementTick+0x170>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	3301      	adds	r3, #1
 8007550:	4a0d      	ldr	r2, [pc, #52]	@ (8007588 <xTaskIncrementTick+0x170>)
 8007552:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007554:	697b      	ldr	r3, [r7, #20]
}
 8007556:	4618      	mov	r0, r3
 8007558:	3718      	adds	r7, #24
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	20000e08 	.word	0x20000e08
 8007564:	20000de4 	.word	0x20000de4
 8007568:	20000d98 	.word	0x20000d98
 800756c:	20000d9c 	.word	0x20000d9c
 8007570:	20000df8 	.word	0x20000df8
 8007574:	20000e00 	.word	0x20000e00
 8007578:	20000de8 	.word	0x20000de8
 800757c:	20000ce4 	.word	0x20000ce4
 8007580:	20000ce0 	.word	0x20000ce0
 8007584:	20000df4 	.word	0x20000df4
 8007588:	20000df0 	.word	0x20000df0

0800758c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b088      	sub	sp, #32
 8007590:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007592:	4b3c      	ldr	r3, [pc, #240]	@ (8007684 <vTaskSwitchContext+0xf8>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d003      	beq.n	80075a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800759a:	4b3b      	ldr	r3, [pc, #236]	@ (8007688 <vTaskSwitchContext+0xfc>)
 800759c:	2201      	movs	r2, #1
 800759e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80075a0:	e06c      	b.n	800767c <vTaskSwitchContext+0xf0>
		xYieldPending = pdFALSE;
 80075a2:	4b39      	ldr	r3, [pc, #228]	@ (8007688 <vTaskSwitchContext+0xfc>)
 80075a4:	2200      	movs	r2, #0
 80075a6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80075a8:	4b38      	ldr	r3, [pc, #224]	@ (800768c <vTaskSwitchContext+0x100>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075ae:	61fb      	str	r3, [r7, #28]
 80075b0:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 80075b4:	61bb      	str	r3, [r7, #24]
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	69ba      	ldr	r2, [r7, #24]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d111      	bne.n	80075e4 <vTaskSwitchContext+0x58>
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	3304      	adds	r3, #4
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	69ba      	ldr	r2, [r7, #24]
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d10b      	bne.n	80075e4 <vTaskSwitchContext+0x58>
 80075cc:	69fb      	ldr	r3, [r7, #28]
 80075ce:	3308      	adds	r3, #8
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	69ba      	ldr	r2, [r7, #24]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d105      	bne.n	80075e4 <vTaskSwitchContext+0x58>
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	330c      	adds	r3, #12
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	69ba      	ldr	r2, [r7, #24]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d008      	beq.n	80075f6 <vTaskSwitchContext+0x6a>
 80075e4:	4b29      	ldr	r3, [pc, #164]	@ (800768c <vTaskSwitchContext+0x100>)
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	4b28      	ldr	r3, [pc, #160]	@ (800768c <vTaskSwitchContext+0x100>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	3334      	adds	r3, #52	@ 0x34
 80075ee:	4619      	mov	r1, r3
 80075f0:	4610      	mov	r0, r2
 80075f2:	f7f9 fde3 	bl	80011bc <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075f6:	4b26      	ldr	r3, [pc, #152]	@ (8007690 <vTaskSwitchContext+0x104>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	fab3 f383 	clz	r3, r3
 8007602:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007604:	7afb      	ldrb	r3, [r7, #11]
 8007606:	f1c3 031f 	rsb	r3, r3, #31
 800760a:	617b      	str	r3, [r7, #20]
 800760c:	4921      	ldr	r1, [pc, #132]	@ (8007694 <vTaskSwitchContext+0x108>)
 800760e:	697a      	ldr	r2, [r7, #20]
 8007610:	4613      	mov	r3, r2
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	4413      	add	r3, r2
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	440b      	add	r3, r1
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d10b      	bne.n	8007638 <vTaskSwitchContext+0xac>
	__asm volatile
 8007620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007624:	f383 8811 	msr	BASEPRI, r3
 8007628:	f3bf 8f6f 	isb	sy
 800762c:	f3bf 8f4f 	dsb	sy
 8007630:	607b      	str	r3, [r7, #4]
}
 8007632:	bf00      	nop
 8007634:	bf00      	nop
 8007636:	e7fd      	b.n	8007634 <vTaskSwitchContext+0xa8>
 8007638:	697a      	ldr	r2, [r7, #20]
 800763a:	4613      	mov	r3, r2
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	4413      	add	r3, r2
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	4a14      	ldr	r2, [pc, #80]	@ (8007694 <vTaskSwitchContext+0x108>)
 8007644:	4413      	add	r3, r2
 8007646:	613b      	str	r3, [r7, #16]
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	685a      	ldr	r2, [r3, #4]
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	605a      	str	r2, [r3, #4]
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	685a      	ldr	r2, [r3, #4]
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	3308      	adds	r3, #8
 800765a:	429a      	cmp	r2, r3
 800765c:	d104      	bne.n	8007668 <vTaskSwitchContext+0xdc>
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	685a      	ldr	r2, [r3, #4]
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	605a      	str	r2, [r3, #4]
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	4a07      	ldr	r2, [pc, #28]	@ (800768c <vTaskSwitchContext+0x100>)
 8007670:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007672:	4b06      	ldr	r3, [pc, #24]	@ (800768c <vTaskSwitchContext+0x100>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	334c      	adds	r3, #76	@ 0x4c
 8007678:	4a07      	ldr	r2, [pc, #28]	@ (8007698 <vTaskSwitchContext+0x10c>)
 800767a:	6013      	str	r3, [r2, #0]
}
 800767c:	bf00      	nop
 800767e:	3720      	adds	r7, #32
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}
 8007684:	20000e08 	.word	0x20000e08
 8007688:	20000df4 	.word	0x20000df4
 800768c:	20000ce0 	.word	0x20000ce0
 8007690:	20000de8 	.word	0x20000de8
 8007694:	20000ce4 	.word	0x20000ce4
 8007698:	20000158 	.word	0x20000158

0800769c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d10b      	bne.n	80076c4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80076ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b0:	f383 8811 	msr	BASEPRI, r3
 80076b4:	f3bf 8f6f 	isb	sy
 80076b8:	f3bf 8f4f 	dsb	sy
 80076bc:	60fb      	str	r3, [r7, #12]
}
 80076be:	bf00      	nop
 80076c0:	bf00      	nop
 80076c2:	e7fd      	b.n	80076c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80076c4:	4b07      	ldr	r3, [pc, #28]	@ (80076e4 <vTaskPlaceOnEventList+0x48>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	3318      	adds	r3, #24
 80076ca:	4619      	mov	r1, r3
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f7fe fd77 	bl	80061c0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80076d2:	2101      	movs	r1, #1
 80076d4:	6838      	ldr	r0, [r7, #0]
 80076d6:	f000 fa9f 	bl	8007c18 <prvAddCurrentTaskToDelayedList>
}
 80076da:	bf00      	nop
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	20000ce0 	.word	0x20000ce0

080076e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b086      	sub	sp, #24
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d10b      	bne.n	8007712 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80076fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076fe:	f383 8811 	msr	BASEPRI, r3
 8007702:	f3bf 8f6f 	isb	sy
 8007706:	f3bf 8f4f 	dsb	sy
 800770a:	617b      	str	r3, [r7, #20]
}
 800770c:	bf00      	nop
 800770e:	bf00      	nop
 8007710:	e7fd      	b.n	800770e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007712:	4b0a      	ldr	r3, [pc, #40]	@ (800773c <vTaskPlaceOnEventListRestricted+0x54>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	3318      	adds	r3, #24
 8007718:	4619      	mov	r1, r3
 800771a:	68f8      	ldr	r0, [r7, #12]
 800771c:	f7fe fd2d 	bl	800617a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d002      	beq.n	800772c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007726:	f04f 33ff 	mov.w	r3, #4294967295
 800772a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800772c:	6879      	ldr	r1, [r7, #4]
 800772e:	68b8      	ldr	r0, [r7, #8]
 8007730:	f000 fa72 	bl	8007c18 <prvAddCurrentTaskToDelayedList>
	}
 8007734:	bf00      	nop
 8007736:	3718      	adds	r7, #24
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	20000ce0 	.word	0x20000ce0

08007740 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b086      	sub	sp, #24
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d10b      	bne.n	800776e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800775a:	f383 8811 	msr	BASEPRI, r3
 800775e:	f3bf 8f6f 	isb	sy
 8007762:	f3bf 8f4f 	dsb	sy
 8007766:	60fb      	str	r3, [r7, #12]
}
 8007768:	bf00      	nop
 800776a:	bf00      	nop
 800776c:	e7fd      	b.n	800776a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	3318      	adds	r3, #24
 8007772:	4618      	mov	r0, r3
 8007774:	f7fe fd5c 	bl	8006230 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007778:	4b1d      	ldr	r3, [pc, #116]	@ (80077f0 <xTaskRemoveFromEventList+0xb0>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d11c      	bne.n	80077ba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	3304      	adds	r3, #4
 8007784:	4618      	mov	r0, r3
 8007786:	f7fe fd53 	bl	8006230 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800778e:	2201      	movs	r2, #1
 8007790:	409a      	lsls	r2, r3
 8007792:	4b18      	ldr	r3, [pc, #96]	@ (80077f4 <xTaskRemoveFromEventList+0xb4>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4313      	orrs	r3, r2
 8007798:	4a16      	ldr	r2, [pc, #88]	@ (80077f4 <xTaskRemoveFromEventList+0xb4>)
 800779a:	6013      	str	r3, [r2, #0]
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077a0:	4613      	mov	r3, r2
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	4413      	add	r3, r2
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	4a13      	ldr	r2, [pc, #76]	@ (80077f8 <xTaskRemoveFromEventList+0xb8>)
 80077aa:	441a      	add	r2, r3
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	3304      	adds	r3, #4
 80077b0:	4619      	mov	r1, r3
 80077b2:	4610      	mov	r0, r2
 80077b4:	f7fe fce1 	bl	800617a <vListInsertEnd>
 80077b8:	e005      	b.n	80077c6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	3318      	adds	r3, #24
 80077be:	4619      	mov	r1, r3
 80077c0:	480e      	ldr	r0, [pc, #56]	@ (80077fc <xTaskRemoveFromEventList+0xbc>)
 80077c2:	f7fe fcda 	bl	800617a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007800 <xTaskRemoveFromEventList+0xc0>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d905      	bls.n	80077e0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80077d4:	2301      	movs	r3, #1
 80077d6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80077d8:	4b0a      	ldr	r3, [pc, #40]	@ (8007804 <xTaskRemoveFromEventList+0xc4>)
 80077da:	2201      	movs	r2, #1
 80077dc:	601a      	str	r2, [r3, #0]
 80077de:	e001      	b.n	80077e4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80077e0:	2300      	movs	r3, #0
 80077e2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80077e4:	697b      	ldr	r3, [r7, #20]
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3718      	adds	r7, #24
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	20000e08 	.word	0x20000e08
 80077f4:	20000de8 	.word	0x20000de8
 80077f8:	20000ce4 	.word	0x20000ce4
 80077fc:	20000da0 	.word	0x20000da0
 8007800:	20000ce0 	.word	0x20000ce0
 8007804:	20000df4 	.word	0x20000df4

08007808 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007810:	4b06      	ldr	r3, [pc, #24]	@ (800782c <vTaskInternalSetTimeOutState+0x24>)
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007818:	4b05      	ldr	r3, [pc, #20]	@ (8007830 <vTaskInternalSetTimeOutState+0x28>)
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	605a      	str	r2, [r3, #4]
}
 8007820:	bf00      	nop
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	bc80      	pop	{r7}
 8007828:	4770      	bx	lr
 800782a:	bf00      	nop
 800782c:	20000df8 	.word	0x20000df8
 8007830:	20000de4 	.word	0x20000de4

08007834 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b088      	sub	sp, #32
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d10b      	bne.n	800785c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007848:	f383 8811 	msr	BASEPRI, r3
 800784c:	f3bf 8f6f 	isb	sy
 8007850:	f3bf 8f4f 	dsb	sy
 8007854:	613b      	str	r3, [r7, #16]
}
 8007856:	bf00      	nop
 8007858:	bf00      	nop
 800785a:	e7fd      	b.n	8007858 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d10b      	bne.n	800787a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007866:	f383 8811 	msr	BASEPRI, r3
 800786a:	f3bf 8f6f 	isb	sy
 800786e:	f3bf 8f4f 	dsb	sy
 8007872:	60fb      	str	r3, [r7, #12]
}
 8007874:	bf00      	nop
 8007876:	bf00      	nop
 8007878:	e7fd      	b.n	8007876 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800787a:	f000 feff 	bl	800867c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800787e:	4b1d      	ldr	r3, [pc, #116]	@ (80078f4 <xTaskCheckForTimeOut+0xc0>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	69ba      	ldr	r2, [r7, #24]
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007896:	d102      	bne.n	800789e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007898:	2300      	movs	r3, #0
 800789a:	61fb      	str	r3, [r7, #28]
 800789c:	e023      	b.n	80078e6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	4b15      	ldr	r3, [pc, #84]	@ (80078f8 <xTaskCheckForTimeOut+0xc4>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d007      	beq.n	80078ba <xTaskCheckForTimeOut+0x86>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	69ba      	ldr	r2, [r7, #24]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d302      	bcc.n	80078ba <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80078b4:	2301      	movs	r3, #1
 80078b6:	61fb      	str	r3, [r7, #28]
 80078b8:	e015      	b.n	80078e6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	697a      	ldr	r2, [r7, #20]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d20b      	bcs.n	80078dc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	1ad2      	subs	r2, r2, r3
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f7ff ff99 	bl	8007808 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80078d6:	2300      	movs	r3, #0
 80078d8:	61fb      	str	r3, [r7, #28]
 80078da:	e004      	b.n	80078e6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	2200      	movs	r2, #0
 80078e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80078e2:	2301      	movs	r3, #1
 80078e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80078e6:	f000 fef9 	bl	80086dc <vPortExitCritical>

	return xReturn;
 80078ea:	69fb      	ldr	r3, [r7, #28]
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3720      	adds	r7, #32
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	20000de4 	.word	0x20000de4
 80078f8:	20000df8 	.word	0x20000df8

080078fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80078fc:	b480      	push	{r7}
 80078fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007900:	4b03      	ldr	r3, [pc, #12]	@ (8007910 <vTaskMissedYield+0x14>)
 8007902:	2201      	movs	r2, #1
 8007904:	601a      	str	r2, [r3, #0]
}
 8007906:	bf00      	nop
 8007908:	46bd      	mov	sp, r7
 800790a:	bc80      	pop	{r7}
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop
 8007910:	20000df4 	.word	0x20000df4

08007914 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800791c:	f000 f852 	bl	80079c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007920:	4b06      	ldr	r3, [pc, #24]	@ (800793c <prvIdleTask+0x28>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2b01      	cmp	r3, #1
 8007926:	d9f9      	bls.n	800791c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007928:	4b05      	ldr	r3, [pc, #20]	@ (8007940 <prvIdleTask+0x2c>)
 800792a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800792e:	601a      	str	r2, [r3, #0]
 8007930:	f3bf 8f4f 	dsb	sy
 8007934:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007938:	e7f0      	b.n	800791c <prvIdleTask+0x8>
 800793a:	bf00      	nop
 800793c:	20000ce4 	.word	0x20000ce4
 8007940:	e000ed04 	.word	0xe000ed04

08007944 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800794a:	2300      	movs	r3, #0
 800794c:	607b      	str	r3, [r7, #4]
 800794e:	e00c      	b.n	800796a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	4613      	mov	r3, r2
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	4413      	add	r3, r2
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	4a12      	ldr	r2, [pc, #72]	@ (80079a4 <prvInitialiseTaskLists+0x60>)
 800795c:	4413      	add	r3, r2
 800795e:	4618      	mov	r0, r3
 8007960:	f7fe fbe0 	bl	8006124 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	3301      	adds	r3, #1
 8007968:	607b      	str	r3, [r7, #4]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2b06      	cmp	r3, #6
 800796e:	d9ef      	bls.n	8007950 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007970:	480d      	ldr	r0, [pc, #52]	@ (80079a8 <prvInitialiseTaskLists+0x64>)
 8007972:	f7fe fbd7 	bl	8006124 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007976:	480d      	ldr	r0, [pc, #52]	@ (80079ac <prvInitialiseTaskLists+0x68>)
 8007978:	f7fe fbd4 	bl	8006124 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800797c:	480c      	ldr	r0, [pc, #48]	@ (80079b0 <prvInitialiseTaskLists+0x6c>)
 800797e:	f7fe fbd1 	bl	8006124 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007982:	480c      	ldr	r0, [pc, #48]	@ (80079b4 <prvInitialiseTaskLists+0x70>)
 8007984:	f7fe fbce 	bl	8006124 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007988:	480b      	ldr	r0, [pc, #44]	@ (80079b8 <prvInitialiseTaskLists+0x74>)
 800798a:	f7fe fbcb 	bl	8006124 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800798e:	4b0b      	ldr	r3, [pc, #44]	@ (80079bc <prvInitialiseTaskLists+0x78>)
 8007990:	4a05      	ldr	r2, [pc, #20]	@ (80079a8 <prvInitialiseTaskLists+0x64>)
 8007992:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007994:	4b0a      	ldr	r3, [pc, #40]	@ (80079c0 <prvInitialiseTaskLists+0x7c>)
 8007996:	4a05      	ldr	r2, [pc, #20]	@ (80079ac <prvInitialiseTaskLists+0x68>)
 8007998:	601a      	str	r2, [r3, #0]
}
 800799a:	bf00      	nop
 800799c:	3708      	adds	r7, #8
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	20000ce4 	.word	0x20000ce4
 80079a8:	20000d70 	.word	0x20000d70
 80079ac:	20000d84 	.word	0x20000d84
 80079b0:	20000da0 	.word	0x20000da0
 80079b4:	20000db4 	.word	0x20000db4
 80079b8:	20000dcc 	.word	0x20000dcc
 80079bc:	20000d98 	.word	0x20000d98
 80079c0:	20000d9c 	.word	0x20000d9c

080079c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80079ca:	e019      	b.n	8007a00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80079cc:	f000 fe56 	bl	800867c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079d0:	4b10      	ldr	r3, [pc, #64]	@ (8007a14 <prvCheckTasksWaitingTermination+0x50>)
 80079d2:	68db      	ldr	r3, [r3, #12]
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	3304      	adds	r3, #4
 80079dc:	4618      	mov	r0, r3
 80079de:	f7fe fc27 	bl	8006230 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80079e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007a18 <prvCheckTasksWaitingTermination+0x54>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	3b01      	subs	r3, #1
 80079e8:	4a0b      	ldr	r2, [pc, #44]	@ (8007a18 <prvCheckTasksWaitingTermination+0x54>)
 80079ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80079ec:	4b0b      	ldr	r3, [pc, #44]	@ (8007a1c <prvCheckTasksWaitingTermination+0x58>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	3b01      	subs	r3, #1
 80079f2:	4a0a      	ldr	r2, [pc, #40]	@ (8007a1c <prvCheckTasksWaitingTermination+0x58>)
 80079f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80079f6:	f000 fe71 	bl	80086dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 f810 	bl	8007a20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a00:	4b06      	ldr	r3, [pc, #24]	@ (8007a1c <prvCheckTasksWaitingTermination+0x58>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1e1      	bne.n	80079cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007a08:	bf00      	nop
 8007a0a:	bf00      	nop
 8007a0c:	3708      	adds	r7, #8
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	20000db4 	.word	0x20000db4
 8007a18:	20000de0 	.word	0x20000de0
 8007a1c:	20000dc8 	.word	0x20000dc8

08007a20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	334c      	adds	r3, #76	@ 0x4c
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f001 f979 	bl	8008d24 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d108      	bne.n	8007a4e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a40:	4618      	mov	r0, r3
 8007a42:	f000 ffeb 	bl	8008a1c <vPortFree>
				vPortFree( pxTCB );
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 ffe8 	bl	8008a1c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007a4c:	e019      	b.n	8007a82 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d103      	bne.n	8007a60 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 ffdf 	bl	8008a1c <vPortFree>
	}
 8007a5e:	e010      	b.n	8007a82 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d00b      	beq.n	8007a82 <prvDeleteTCB+0x62>
	__asm volatile
 8007a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a6e:	f383 8811 	msr	BASEPRI, r3
 8007a72:	f3bf 8f6f 	isb	sy
 8007a76:	f3bf 8f4f 	dsb	sy
 8007a7a:	60fb      	str	r3, [r7, #12]
}
 8007a7c:	bf00      	nop
 8007a7e:	bf00      	nop
 8007a80:	e7fd      	b.n	8007a7e <prvDeleteTCB+0x5e>
	}
 8007a82:	bf00      	nop
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
	...

08007a8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a92:	4b0c      	ldr	r3, [pc, #48]	@ (8007ac4 <prvResetNextTaskUnblockTime+0x38>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d104      	bne.n	8007aa6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8007ac8 <prvResetNextTaskUnblockTime+0x3c>)
 8007a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8007aa2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007aa4:	e008      	b.n	8007ab8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007aa6:	4b07      	ldr	r3, [pc, #28]	@ (8007ac4 <prvResetNextTaskUnblockTime+0x38>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	4a04      	ldr	r2, [pc, #16]	@ (8007ac8 <prvResetNextTaskUnblockTime+0x3c>)
 8007ab6:	6013      	str	r3, [r2, #0]
}
 8007ab8:	bf00      	nop
 8007aba:	370c      	adds	r7, #12
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bc80      	pop	{r7}
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	20000d98 	.word	0x20000d98
 8007ac8:	20000e00 	.word	0x20000e00

08007acc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8007b00 <xTaskGetSchedulerState+0x34>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d102      	bne.n	8007ae0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007ada:	2301      	movs	r3, #1
 8007adc:	607b      	str	r3, [r7, #4]
 8007ade:	e008      	b.n	8007af2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ae0:	4b08      	ldr	r3, [pc, #32]	@ (8007b04 <xTaskGetSchedulerState+0x38>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d102      	bne.n	8007aee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007ae8:	2302      	movs	r3, #2
 8007aea:	607b      	str	r3, [r7, #4]
 8007aec:	e001      	b.n	8007af2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007aee:	2300      	movs	r3, #0
 8007af0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007af2:	687b      	ldr	r3, [r7, #4]
	}
 8007af4:	4618      	mov	r0, r3
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bc80      	pop	{r7}
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	20000dec 	.word	0x20000dec
 8007b04:	20000e08 	.word	0x20000e08

08007b08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b086      	sub	sp, #24
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007b14:	2300      	movs	r3, #0
 8007b16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d070      	beq.n	8007c00 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007b1e:	4b3b      	ldr	r3, [pc, #236]	@ (8007c0c <xTaskPriorityDisinherit+0x104>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	693a      	ldr	r2, [r7, #16]
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d00b      	beq.n	8007b40 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b2c:	f383 8811 	msr	BASEPRI, r3
 8007b30:	f3bf 8f6f 	isb	sy
 8007b34:	f3bf 8f4f 	dsb	sy
 8007b38:	60fb      	str	r3, [r7, #12]
}
 8007b3a:	bf00      	nop
 8007b3c:	bf00      	nop
 8007b3e:	e7fd      	b.n	8007b3c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d10b      	bne.n	8007b60 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b4c:	f383 8811 	msr	BASEPRI, r3
 8007b50:	f3bf 8f6f 	isb	sy
 8007b54:	f3bf 8f4f 	dsb	sy
 8007b58:	60bb      	str	r3, [r7, #8]
}
 8007b5a:	bf00      	nop
 8007b5c:	bf00      	nop
 8007b5e:	e7fd      	b.n	8007b5c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b64:	1e5a      	subs	r2, r3, #1
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d044      	beq.n	8007c00 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d140      	bne.n	8007c00 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	3304      	adds	r3, #4
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7fe fb54 	bl	8006230 <uxListRemove>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d115      	bne.n	8007bba <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b92:	491f      	ldr	r1, [pc, #124]	@ (8007c10 <xTaskPriorityDisinherit+0x108>)
 8007b94:	4613      	mov	r3, r2
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	4413      	add	r3, r2
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	440b      	add	r3, r1
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d10a      	bne.n	8007bba <xTaskPriorityDisinherit+0xb2>
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ba8:	2201      	movs	r2, #1
 8007baa:	fa02 f303 	lsl.w	r3, r2, r3
 8007bae:	43da      	mvns	r2, r3
 8007bb0:	4b18      	ldr	r3, [pc, #96]	@ (8007c14 <xTaskPriorityDisinherit+0x10c>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4013      	ands	r3, r2
 8007bb6:	4a17      	ldr	r2, [pc, #92]	@ (8007c14 <xTaskPriorityDisinherit+0x10c>)
 8007bb8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bc6:	f1c3 0207 	rsb	r2, r3, #7
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	409a      	lsls	r2, r3
 8007bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8007c14 <xTaskPriorityDisinherit+0x10c>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	4a0d      	ldr	r2, [pc, #52]	@ (8007c14 <xTaskPriorityDisinherit+0x10c>)
 8007bde:	6013      	str	r3, [r2, #0]
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007be4:	4613      	mov	r3, r2
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	4413      	add	r3, r2
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	4a08      	ldr	r2, [pc, #32]	@ (8007c10 <xTaskPriorityDisinherit+0x108>)
 8007bee:	441a      	add	r2, r3
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	3304      	adds	r3, #4
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	4610      	mov	r0, r2
 8007bf8:	f7fe fabf 	bl	800617a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007c00:	697b      	ldr	r3, [r7, #20]
	}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3718      	adds	r7, #24
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	20000ce0 	.word	0x20000ce0
 8007c10:	20000ce4 	.word	0x20000ce4
 8007c14:	20000de8 	.word	0x20000de8

08007c18 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007c22:	4b29      	ldr	r3, [pc, #164]	@ (8007cc8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c28:	4b28      	ldr	r3, [pc, #160]	@ (8007ccc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	3304      	adds	r3, #4
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7fe fafe 	bl	8006230 <uxListRemove>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d10b      	bne.n	8007c52 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007c3a:	4b24      	ldr	r3, [pc, #144]	@ (8007ccc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c40:	2201      	movs	r2, #1
 8007c42:	fa02 f303 	lsl.w	r3, r2, r3
 8007c46:	43da      	mvns	r2, r3
 8007c48:	4b21      	ldr	r3, [pc, #132]	@ (8007cd0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4013      	ands	r3, r2
 8007c4e:	4a20      	ldr	r2, [pc, #128]	@ (8007cd0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007c50:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c58:	d10a      	bne.n	8007c70 <prvAddCurrentTaskToDelayedList+0x58>
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d007      	beq.n	8007c70 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c60:	4b1a      	ldr	r3, [pc, #104]	@ (8007ccc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	3304      	adds	r3, #4
 8007c66:	4619      	mov	r1, r3
 8007c68:	481a      	ldr	r0, [pc, #104]	@ (8007cd4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007c6a:	f7fe fa86 	bl	800617a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007c6e:	e026      	b.n	8007cbe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007c70:	68fa      	ldr	r2, [r7, #12]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4413      	add	r3, r2
 8007c76:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007c78:	4b14      	ldr	r3, [pc, #80]	@ (8007ccc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	68ba      	ldr	r2, [r7, #8]
 8007c7e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007c80:	68ba      	ldr	r2, [r7, #8]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d209      	bcs.n	8007c9c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c88:	4b13      	ldr	r3, [pc, #76]	@ (8007cd8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8007ccc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	3304      	adds	r3, #4
 8007c92:	4619      	mov	r1, r3
 8007c94:	4610      	mov	r0, r2
 8007c96:	f7fe fa93 	bl	80061c0 <vListInsert>
}
 8007c9a:	e010      	b.n	8007cbe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8007cdc <prvAddCurrentTaskToDelayedList+0xc4>)
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8007ccc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	3304      	adds	r3, #4
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	4610      	mov	r0, r2
 8007caa:	f7fe fa89 	bl	80061c0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007cae:	4b0c      	ldr	r3, [pc, #48]	@ (8007ce0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	68ba      	ldr	r2, [r7, #8]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d202      	bcs.n	8007cbe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007cb8:	4a09      	ldr	r2, [pc, #36]	@ (8007ce0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	6013      	str	r3, [r2, #0]
}
 8007cbe:	bf00      	nop
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	20000de4 	.word	0x20000de4
 8007ccc:	20000ce0 	.word	0x20000ce0
 8007cd0:	20000de8 	.word	0x20000de8
 8007cd4:	20000dcc 	.word	0x20000dcc
 8007cd8:	20000d9c 	.word	0x20000d9c
 8007cdc:	20000d98 	.word	0x20000d98
 8007ce0:	20000e00 	.word	0x20000e00

08007ce4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b08a      	sub	sp, #40	@ 0x28
 8007ce8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007cea:	2300      	movs	r3, #0
 8007cec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007cee:	f000 fb93 	bl	8008418 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007cf2:	4b1d      	ldr	r3, [pc, #116]	@ (8007d68 <xTimerCreateTimerTask+0x84>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d021      	beq.n	8007d3e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007d02:	1d3a      	adds	r2, r7, #4
 8007d04:	f107 0108 	add.w	r1, r7, #8
 8007d08:	f107 030c 	add.w	r3, r7, #12
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7f8 ffa3 	bl	8000c58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007d12:	6879      	ldr	r1, [r7, #4]
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	68fa      	ldr	r2, [r7, #12]
 8007d18:	9202      	str	r2, [sp, #8]
 8007d1a:	9301      	str	r3, [sp, #4]
 8007d1c:	2302      	movs	r3, #2
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	2300      	movs	r3, #0
 8007d22:	460a      	mov	r2, r1
 8007d24:	4911      	ldr	r1, [pc, #68]	@ (8007d6c <xTimerCreateTimerTask+0x88>)
 8007d26:	4812      	ldr	r0, [pc, #72]	@ (8007d70 <xTimerCreateTimerTask+0x8c>)
 8007d28:	f7ff f85e 	bl	8006de8 <xTaskCreateStatic>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	4a11      	ldr	r2, [pc, #68]	@ (8007d74 <xTimerCreateTimerTask+0x90>)
 8007d30:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007d32:	4b10      	ldr	r3, [pc, #64]	@ (8007d74 <xTimerCreateTimerTask+0x90>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d001      	beq.n	8007d3e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d10b      	bne.n	8007d5c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d48:	f383 8811 	msr	BASEPRI, r3
 8007d4c:	f3bf 8f6f 	isb	sy
 8007d50:	f3bf 8f4f 	dsb	sy
 8007d54:	613b      	str	r3, [r7, #16]
}
 8007d56:	bf00      	nop
 8007d58:	bf00      	nop
 8007d5a:	e7fd      	b.n	8007d58 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007d5c:	697b      	ldr	r3, [r7, #20]
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3718      	adds	r7, #24
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	20000e3c 	.word	0x20000e3c
 8007d6c:	0800a0d4 	.word	0x0800a0d4
 8007d70:	08007fed 	.word	0x08007fed
 8007d74:	20000e40 	.word	0x20000e40

08007d78 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b088      	sub	sp, #32
 8007d7c:	af02      	add	r7, sp, #8
 8007d7e:	60f8      	str	r0, [r7, #12]
 8007d80:	60b9      	str	r1, [r7, #8]
 8007d82:	607a      	str	r2, [r7, #4]
 8007d84:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8007d86:	2028      	movs	r0, #40	@ 0x28
 8007d88:	f000 fd7a 	bl	8008880 <pvPortMalloc>
 8007d8c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00d      	beq.n	8007db0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	9301      	str	r3, [sp, #4]
 8007da0:	6a3b      	ldr	r3, [r7, #32]
 8007da2:	9300      	str	r3, [sp, #0]
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	68b9      	ldr	r1, [r7, #8]
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	f000 f845 	bl	8007e3a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007db0:	697b      	ldr	r3, [r7, #20]
	}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3718      	adds	r7, #24
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}

08007dba <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b08a      	sub	sp, #40	@ 0x28
 8007dbe:	af02      	add	r7, sp, #8
 8007dc0:	60f8      	str	r0, [r7, #12]
 8007dc2:	60b9      	str	r1, [r7, #8]
 8007dc4:	607a      	str	r2, [r7, #4]
 8007dc6:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8007dc8:	2328      	movs	r3, #40	@ 0x28
 8007dca:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	2b28      	cmp	r3, #40	@ 0x28
 8007dd0:	d00b      	beq.n	8007dea <xTimerCreateStatic+0x30>
	__asm volatile
 8007dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dd6:	f383 8811 	msr	BASEPRI, r3
 8007dda:	f3bf 8f6f 	isb	sy
 8007dde:	f3bf 8f4f 	dsb	sy
 8007de2:	61bb      	str	r3, [r7, #24]
}
 8007de4:	bf00      	nop
 8007de6:	bf00      	nop
 8007de8:	e7fd      	b.n	8007de6 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007dea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8007dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d10b      	bne.n	8007e0a <xTimerCreateStatic+0x50>
	__asm volatile
 8007df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df6:	f383 8811 	msr	BASEPRI, r3
 8007dfa:	f3bf 8f6f 	isb	sy
 8007dfe:	f3bf 8f4f 	dsb	sy
 8007e02:	617b      	str	r3, [r7, #20]
}
 8007e04:	bf00      	nop
 8007e06:	bf00      	nop
 8007e08:	e7fd      	b.n	8007e06 <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8007e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e0c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d00d      	beq.n	8007e30 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8007e14:	69fb      	ldr	r3, [r7, #28]
 8007e16:	2202      	movs	r2, #2
 8007e18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	9301      	str	r3, [sp, #4]
 8007e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e22:	9300      	str	r3, [sp, #0]
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	68b9      	ldr	r1, [r7, #8]
 8007e2a:	68f8      	ldr	r0, [r7, #12]
 8007e2c:	f000 f805 	bl	8007e3a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007e30:	69fb      	ldr	r3, [r7, #28]
	}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3720      	adds	r7, #32
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}

08007e3a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8007e3a:	b580      	push	{r7, lr}
 8007e3c:	b086      	sub	sp, #24
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	60f8      	str	r0, [r7, #12]
 8007e42:	60b9      	str	r1, [r7, #8]
 8007e44:	607a      	str	r2, [r7, #4]
 8007e46:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d10b      	bne.n	8007e66 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8007e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e52:	f383 8811 	msr	BASEPRI, r3
 8007e56:	f3bf 8f6f 	isb	sy
 8007e5a:	f3bf 8f4f 	dsb	sy
 8007e5e:	617b      	str	r3, [r7, #20]
}
 8007e60:	bf00      	nop
 8007e62:	bf00      	nop
 8007e64:	e7fd      	b.n	8007e62 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8007e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d01e      	beq.n	8007eaa <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007e6c:	f000 fad4 	bl	8008418 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e78:	68ba      	ldr	r2, [r7, #8]
 8007e7a:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8007e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e7e:	683a      	ldr	r2, [r7, #0]
 8007e80:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e84:	6a3a      	ldr	r2, [r7, #32]
 8007e86:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e8a:	3304      	adds	r3, #4
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f7fe f968 	bl	8006162 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d008      	beq.n	8007eaa <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8007e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e9a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007e9e:	f043 0304 	orr.w	r3, r3, #4
 8007ea2:	b2da      	uxtb	r2, r3
 8007ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8007eaa:	bf00      	nop
 8007eac:	3718      	adds	r7, #24
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
	...

08007eb4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b08a      	sub	sp, #40	@ 0x28
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	60b9      	str	r1, [r7, #8]
 8007ebe:	607a      	str	r2, [r7, #4]
 8007ec0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d10b      	bne.n	8007ee4 <xTimerGenericCommand+0x30>
	__asm volatile
 8007ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ed0:	f383 8811 	msr	BASEPRI, r3
 8007ed4:	f3bf 8f6f 	isb	sy
 8007ed8:	f3bf 8f4f 	dsb	sy
 8007edc:	623b      	str	r3, [r7, #32]
}
 8007ede:	bf00      	nop
 8007ee0:	bf00      	nop
 8007ee2:	e7fd      	b.n	8007ee0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007ee4:	4b19      	ldr	r3, [pc, #100]	@ (8007f4c <xTimerGenericCommand+0x98>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d02a      	beq.n	8007f42 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	2b05      	cmp	r3, #5
 8007efc:	dc18      	bgt.n	8007f30 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007efe:	f7ff fde5 	bl	8007acc <xTaskGetSchedulerState>
 8007f02:	4603      	mov	r3, r0
 8007f04:	2b02      	cmp	r3, #2
 8007f06:	d109      	bne.n	8007f1c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007f08:	4b10      	ldr	r3, [pc, #64]	@ (8007f4c <xTimerGenericCommand+0x98>)
 8007f0a:	6818      	ldr	r0, [r3, #0]
 8007f0c:	f107 0114 	add.w	r1, r7, #20
 8007f10:	2300      	movs	r3, #0
 8007f12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f14:	f7fe faf8 	bl	8006508 <xQueueGenericSend>
 8007f18:	6278      	str	r0, [r7, #36]	@ 0x24
 8007f1a:	e012      	b.n	8007f42 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8007f4c <xTimerGenericCommand+0x98>)
 8007f1e:	6818      	ldr	r0, [r3, #0]
 8007f20:	f107 0114 	add.w	r1, r7, #20
 8007f24:	2300      	movs	r3, #0
 8007f26:	2200      	movs	r2, #0
 8007f28:	f7fe faee 	bl	8006508 <xQueueGenericSend>
 8007f2c:	6278      	str	r0, [r7, #36]	@ 0x24
 8007f2e:	e008      	b.n	8007f42 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007f30:	4b06      	ldr	r3, [pc, #24]	@ (8007f4c <xTimerGenericCommand+0x98>)
 8007f32:	6818      	ldr	r0, [r3, #0]
 8007f34:	f107 0114 	add.w	r1, r7, #20
 8007f38:	2300      	movs	r3, #0
 8007f3a:	683a      	ldr	r2, [r7, #0]
 8007f3c:	f7fe fbe6 	bl	800670c <xQueueGenericSendFromISR>
 8007f40:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3728      	adds	r7, #40	@ 0x28
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	20000e3c 	.word	0x20000e3c

08007f50 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b088      	sub	sp, #32
 8007f54:	af02      	add	r7, sp, #8
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f5a:	4b23      	ldr	r3, [pc, #140]	@ (8007fe8 <prvProcessExpiredTimer+0x98>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	3304      	adds	r3, #4
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f7fe f961 	bl	8006230 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007f74:	f003 0304 	and.w	r3, r3, #4
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d023      	beq.n	8007fc4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	699a      	ldr	r2, [r3, #24]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	18d1      	adds	r1, r2, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	683a      	ldr	r2, [r7, #0]
 8007f88:	6978      	ldr	r0, [r7, #20]
 8007f8a:	f000 f8d3 	bl	8008134 <prvInsertTimerInActiveList>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d020      	beq.n	8007fd6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f94:	2300      	movs	r3, #0
 8007f96:	9300      	str	r3, [sp, #0]
 8007f98:	2300      	movs	r3, #0
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	6978      	ldr	r0, [r7, #20]
 8007fa0:	f7ff ff88 	bl	8007eb4 <xTimerGenericCommand>
 8007fa4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d114      	bne.n	8007fd6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb0:	f383 8811 	msr	BASEPRI, r3
 8007fb4:	f3bf 8f6f 	isb	sy
 8007fb8:	f3bf 8f4f 	dsb	sy
 8007fbc:	60fb      	str	r3, [r7, #12]
}
 8007fbe:	bf00      	nop
 8007fc0:	bf00      	nop
 8007fc2:	e7fd      	b.n	8007fc0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007fca:	f023 0301 	bic.w	r3, r3, #1
 8007fce:	b2da      	uxtb	r2, r3
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	6a1b      	ldr	r3, [r3, #32]
 8007fda:	6978      	ldr	r0, [r7, #20]
 8007fdc:	4798      	blx	r3
}
 8007fde:	bf00      	nop
 8007fe0:	3718      	adds	r7, #24
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	20000e34 	.word	0x20000e34

08007fec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007ff4:	f107 0308 	add.w	r3, r7, #8
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f000 f859 	bl	80080b0 <prvGetNextExpireTime>
 8007ffe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	4619      	mov	r1, r3
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	f000 f805 	bl	8008014 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800800a:	f000 f8d5 	bl	80081b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800800e:	bf00      	nop
 8008010:	e7f0      	b.n	8007ff4 <prvTimerTask+0x8>
	...

08008014 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800801e:	f7ff f941 	bl	80072a4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008022:	f107 0308 	add.w	r3, r7, #8
 8008026:	4618      	mov	r0, r3
 8008028:	f000 f864 	bl	80080f4 <prvSampleTimeNow>
 800802c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d130      	bne.n	8008096 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d10a      	bne.n	8008050 <prvProcessTimerOrBlockTask+0x3c>
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	429a      	cmp	r2, r3
 8008040:	d806      	bhi.n	8008050 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008042:	f7ff f93d 	bl	80072c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008046:	68f9      	ldr	r1, [r7, #12]
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f7ff ff81 	bl	8007f50 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800804e:	e024      	b.n	800809a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d008      	beq.n	8008068 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008056:	4b13      	ldr	r3, [pc, #76]	@ (80080a4 <prvProcessTimerOrBlockTask+0x90>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d101      	bne.n	8008064 <prvProcessTimerOrBlockTask+0x50>
 8008060:	2301      	movs	r3, #1
 8008062:	e000      	b.n	8008066 <prvProcessTimerOrBlockTask+0x52>
 8008064:	2300      	movs	r3, #0
 8008066:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008068:	4b0f      	ldr	r3, [pc, #60]	@ (80080a8 <prvProcessTimerOrBlockTask+0x94>)
 800806a:	6818      	ldr	r0, [r3, #0]
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	1ad3      	subs	r3, r2, r3
 8008072:	683a      	ldr	r2, [r7, #0]
 8008074:	4619      	mov	r1, r3
 8008076:	f7fe fe83 	bl	8006d80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800807a:	f7ff f921 	bl	80072c0 <xTaskResumeAll>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d10a      	bne.n	800809a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008084:	4b09      	ldr	r3, [pc, #36]	@ (80080ac <prvProcessTimerOrBlockTask+0x98>)
 8008086:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800808a:	601a      	str	r2, [r3, #0]
 800808c:	f3bf 8f4f 	dsb	sy
 8008090:	f3bf 8f6f 	isb	sy
}
 8008094:	e001      	b.n	800809a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008096:	f7ff f913 	bl	80072c0 <xTaskResumeAll>
}
 800809a:	bf00      	nop
 800809c:	3710      	adds	r7, #16
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	20000e38 	.word	0x20000e38
 80080a8:	20000e3c 	.word	0x20000e3c
 80080ac:	e000ed04 	.word	0xe000ed04

080080b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80080b0:	b480      	push	{r7}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80080b8:	4b0d      	ldr	r3, [pc, #52]	@ (80080f0 <prvGetNextExpireTime+0x40>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d101      	bne.n	80080c6 <prvGetNextExpireTime+0x16>
 80080c2:	2201      	movs	r2, #1
 80080c4:	e000      	b.n	80080c8 <prvGetNextExpireTime+0x18>
 80080c6:	2200      	movs	r2, #0
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d105      	bne.n	80080e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80080d4:	4b06      	ldr	r3, [pc, #24]	@ (80080f0 <prvGetNextExpireTime+0x40>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	60fb      	str	r3, [r7, #12]
 80080de:	e001      	b.n	80080e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80080e0:	2300      	movs	r3, #0
 80080e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80080e4:	68fb      	ldr	r3, [r7, #12]
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3714      	adds	r7, #20
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bc80      	pop	{r7}
 80080ee:	4770      	bx	lr
 80080f0:	20000e34 	.word	0x20000e34

080080f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80080fc:	f7ff f97e 	bl	80073fc <xTaskGetTickCount>
 8008100:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008102:	4b0b      	ldr	r3, [pc, #44]	@ (8008130 <prvSampleTimeNow+0x3c>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	68fa      	ldr	r2, [r7, #12]
 8008108:	429a      	cmp	r2, r3
 800810a:	d205      	bcs.n	8008118 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800810c:	f000 f91e 	bl	800834c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	601a      	str	r2, [r3, #0]
 8008116:	e002      	b.n	800811e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800811e:	4a04      	ldr	r2, [pc, #16]	@ (8008130 <prvSampleTimeNow+0x3c>)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008124:	68fb      	ldr	r3, [r7, #12]
}
 8008126:	4618      	mov	r0, r3
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	20000e44 	.word	0x20000e44

08008134 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b086      	sub	sp, #24
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	607a      	str	r2, [r7, #4]
 8008140:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008142:	2300      	movs	r3, #0
 8008144:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	68ba      	ldr	r2, [r7, #8]
 800814a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	68fa      	ldr	r2, [r7, #12]
 8008150:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008152:	68ba      	ldr	r2, [r7, #8]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	429a      	cmp	r2, r3
 8008158:	d812      	bhi.n	8008180 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	1ad2      	subs	r2, r2, r3
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	699b      	ldr	r3, [r3, #24]
 8008164:	429a      	cmp	r2, r3
 8008166:	d302      	bcc.n	800816e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008168:	2301      	movs	r3, #1
 800816a:	617b      	str	r3, [r7, #20]
 800816c:	e01b      	b.n	80081a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800816e:	4b10      	ldr	r3, [pc, #64]	@ (80081b0 <prvInsertTimerInActiveList+0x7c>)
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	3304      	adds	r3, #4
 8008176:	4619      	mov	r1, r3
 8008178:	4610      	mov	r0, r2
 800817a:	f7fe f821 	bl	80061c0 <vListInsert>
 800817e:	e012      	b.n	80081a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	429a      	cmp	r2, r3
 8008186:	d206      	bcs.n	8008196 <prvInsertTimerInActiveList+0x62>
 8008188:	68ba      	ldr	r2, [r7, #8]
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	429a      	cmp	r2, r3
 800818e:	d302      	bcc.n	8008196 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008190:	2301      	movs	r3, #1
 8008192:	617b      	str	r3, [r7, #20]
 8008194:	e007      	b.n	80081a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008196:	4b07      	ldr	r3, [pc, #28]	@ (80081b4 <prvInsertTimerInActiveList+0x80>)
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	3304      	adds	r3, #4
 800819e:	4619      	mov	r1, r3
 80081a0:	4610      	mov	r0, r2
 80081a2:	f7fe f80d 	bl	80061c0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80081a6:	697b      	ldr	r3, [r7, #20]
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3718      	adds	r7, #24
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	20000e38 	.word	0x20000e38
 80081b4:	20000e34 	.word	0x20000e34

080081b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b08c      	sub	sp, #48	@ 0x30
 80081bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80081be:	e0b2      	b.n	8008326 <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	f2c0 80af 	blt.w	8008326 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80081cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ce:	695b      	ldr	r3, [r3, #20]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d004      	beq.n	80081de <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80081d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d6:	3304      	adds	r3, #4
 80081d8:	4618      	mov	r0, r3
 80081da:	f7fe f829 	bl	8006230 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80081de:	1d3b      	adds	r3, r7, #4
 80081e0:	4618      	mov	r0, r3
 80081e2:	f7ff ff87 	bl	80080f4 <prvSampleTimeNow>
 80081e6:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	2b09      	cmp	r3, #9
 80081ec:	f200 8098 	bhi.w	8008320 <prvProcessReceivedCommands+0x168>
 80081f0:	a201      	add	r2, pc, #4	@ (adr r2, 80081f8 <prvProcessReceivedCommands+0x40>)
 80081f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f6:	bf00      	nop
 80081f8:	08008221 	.word	0x08008221
 80081fc:	08008221 	.word	0x08008221
 8008200:	08008221 	.word	0x08008221
 8008204:	08008297 	.word	0x08008297
 8008208:	080082ab 	.word	0x080082ab
 800820c:	080082f7 	.word	0x080082f7
 8008210:	08008221 	.word	0x08008221
 8008214:	08008221 	.word	0x08008221
 8008218:	08008297 	.word	0x08008297
 800821c:	080082ab 	.word	0x080082ab
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008222:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008226:	f043 0301 	orr.w	r3, r3, #1
 800822a:	b2da      	uxtb	r2, r3
 800822c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800822e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008232:	68fa      	ldr	r2, [r7, #12]
 8008234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008236:	699b      	ldr	r3, [r3, #24]
 8008238:	18d1      	adds	r1, r2, r3
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6a3a      	ldr	r2, [r7, #32]
 800823e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008240:	f7ff ff78 	bl	8008134 <prvInsertTimerInActiveList>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d06c      	beq.n	8008324 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800824a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800824c:	6a1b      	ldr	r3, [r3, #32]
 800824e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008250:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008254:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008258:	f003 0304 	and.w	r3, r3, #4
 800825c:	2b00      	cmp	r3, #0
 800825e:	d061      	beq.n	8008324 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008260:	68fa      	ldr	r2, [r7, #12]
 8008262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008264:	699b      	ldr	r3, [r3, #24]
 8008266:	441a      	add	r2, r3
 8008268:	2300      	movs	r3, #0
 800826a:	9300      	str	r3, [sp, #0]
 800826c:	2300      	movs	r3, #0
 800826e:	2100      	movs	r1, #0
 8008270:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008272:	f7ff fe1f 	bl	8007eb4 <xTimerGenericCommand>
 8008276:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d152      	bne.n	8008324 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 800827e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008282:	f383 8811 	msr	BASEPRI, r3
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	61bb      	str	r3, [r7, #24]
}
 8008290:	bf00      	nop
 8008292:	bf00      	nop
 8008294:	e7fd      	b.n	8008292 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008298:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800829c:	f023 0301 	bic.w	r3, r3, #1
 80082a0:	b2da      	uxtb	r2, r3
 80082a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 80082a8:	e03d      	b.n	8008326 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80082aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80082b0:	f043 0301 	orr.w	r3, r3, #1
 80082b4:	b2da      	uxtb	r2, r3
 80082b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80082bc:	68fa      	ldr	r2, [r7, #12]
 80082be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80082c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c4:	699b      	ldr	r3, [r3, #24]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d10b      	bne.n	80082e2 <prvProcessReceivedCommands+0x12a>
	__asm volatile
 80082ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ce:	f383 8811 	msr	BASEPRI, r3
 80082d2:	f3bf 8f6f 	isb	sy
 80082d6:	f3bf 8f4f 	dsb	sy
 80082da:	617b      	str	r3, [r7, #20]
}
 80082dc:	bf00      	nop
 80082de:	bf00      	nop
 80082e0:	e7fd      	b.n	80082de <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80082e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e4:	699a      	ldr	r2, [r3, #24]
 80082e6:	6a3b      	ldr	r3, [r7, #32]
 80082e8:	18d1      	adds	r1, r2, r3
 80082ea:	6a3b      	ldr	r3, [r7, #32]
 80082ec:	6a3a      	ldr	r2, [r7, #32]
 80082ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80082f0:	f7ff ff20 	bl	8008134 <prvInsertTimerInActiveList>
					break;
 80082f4:	e017      	b.n	8008326 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80082f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80082fc:	f003 0302 	and.w	r3, r3, #2
 8008300:	2b00      	cmp	r3, #0
 8008302:	d103      	bne.n	800830c <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 8008304:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008306:	f000 fb89 	bl	8008a1c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800830a:	e00c      	b.n	8008326 <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800830c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800830e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008312:	f023 0301 	bic.w	r3, r3, #1
 8008316:	b2da      	uxtb	r2, r3
 8008318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800831a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 800831e:	e002      	b.n	8008326 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8008320:	bf00      	nop
 8008322:	e000      	b.n	8008326 <prvProcessReceivedCommands+0x16e>
					break;
 8008324:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008326:	4b08      	ldr	r3, [pc, #32]	@ (8008348 <prvProcessReceivedCommands+0x190>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f107 0108 	add.w	r1, r7, #8
 800832e:	2200      	movs	r2, #0
 8008330:	4618      	mov	r0, r3
 8008332:	f7fe fa89 	bl	8006848 <xQueueReceive>
 8008336:	4603      	mov	r3, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	f47f af41 	bne.w	80081c0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800833e:	bf00      	nop
 8008340:	bf00      	nop
 8008342:	3728      	adds	r7, #40	@ 0x28
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}
 8008348:	20000e3c 	.word	0x20000e3c

0800834c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b088      	sub	sp, #32
 8008350:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008352:	e049      	b.n	80083e8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008354:	4b2e      	ldr	r3, [pc, #184]	@ (8008410 <prvSwitchTimerLists+0xc4>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	68db      	ldr	r3, [r3, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800835e:	4b2c      	ldr	r3, [pc, #176]	@ (8008410 <prvSwitchTimerLists+0xc4>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	68db      	ldr	r3, [r3, #12]
 8008364:	68db      	ldr	r3, [r3, #12]
 8008366:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	3304      	adds	r3, #4
 800836c:	4618      	mov	r0, r3
 800836e:	f7fd ff5f 	bl	8006230 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	6a1b      	ldr	r3, [r3, #32]
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008380:	f003 0304 	and.w	r3, r3, #4
 8008384:	2b00      	cmp	r3, #0
 8008386:	d02f      	beq.n	80083e8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	699b      	ldr	r3, [r3, #24]
 800838c:	693a      	ldr	r2, [r7, #16]
 800838e:	4413      	add	r3, r2
 8008390:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008392:	68ba      	ldr	r2, [r7, #8]
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	429a      	cmp	r2, r3
 8008398:	d90e      	bls.n	80083b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	68ba      	ldr	r2, [r7, #8]
 800839e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80083a6:	4b1a      	ldr	r3, [pc, #104]	@ (8008410 <prvSwitchTimerLists+0xc4>)
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	3304      	adds	r3, #4
 80083ae:	4619      	mov	r1, r3
 80083b0:	4610      	mov	r0, r2
 80083b2:	f7fd ff05 	bl	80061c0 <vListInsert>
 80083b6:	e017      	b.n	80083e8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80083b8:	2300      	movs	r3, #0
 80083ba:	9300      	str	r3, [sp, #0]
 80083bc:	2300      	movs	r3, #0
 80083be:	693a      	ldr	r2, [r7, #16]
 80083c0:	2100      	movs	r1, #0
 80083c2:	68f8      	ldr	r0, [r7, #12]
 80083c4:	f7ff fd76 	bl	8007eb4 <xTimerGenericCommand>
 80083c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10b      	bne.n	80083e8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80083d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083d4:	f383 8811 	msr	BASEPRI, r3
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	603b      	str	r3, [r7, #0]
}
 80083e2:	bf00      	nop
 80083e4:	bf00      	nop
 80083e6:	e7fd      	b.n	80083e4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80083e8:	4b09      	ldr	r3, [pc, #36]	@ (8008410 <prvSwitchTimerLists+0xc4>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d1b0      	bne.n	8008354 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80083f2:	4b07      	ldr	r3, [pc, #28]	@ (8008410 <prvSwitchTimerLists+0xc4>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80083f8:	4b06      	ldr	r3, [pc, #24]	@ (8008414 <prvSwitchTimerLists+0xc8>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a04      	ldr	r2, [pc, #16]	@ (8008410 <prvSwitchTimerLists+0xc4>)
 80083fe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008400:	4a04      	ldr	r2, [pc, #16]	@ (8008414 <prvSwitchTimerLists+0xc8>)
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	6013      	str	r3, [r2, #0]
}
 8008406:	bf00      	nop
 8008408:	3718      	adds	r7, #24
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	20000e34 	.word	0x20000e34
 8008414:	20000e38 	.word	0x20000e38

08008418 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800841e:	f000 f92d 	bl	800867c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008422:	4b15      	ldr	r3, [pc, #84]	@ (8008478 <prvCheckForValidListAndQueue+0x60>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d120      	bne.n	800846c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800842a:	4814      	ldr	r0, [pc, #80]	@ (800847c <prvCheckForValidListAndQueue+0x64>)
 800842c:	f7fd fe7a 	bl	8006124 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008430:	4813      	ldr	r0, [pc, #76]	@ (8008480 <prvCheckForValidListAndQueue+0x68>)
 8008432:	f7fd fe77 	bl	8006124 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008436:	4b13      	ldr	r3, [pc, #76]	@ (8008484 <prvCheckForValidListAndQueue+0x6c>)
 8008438:	4a10      	ldr	r2, [pc, #64]	@ (800847c <prvCheckForValidListAndQueue+0x64>)
 800843a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800843c:	4b12      	ldr	r3, [pc, #72]	@ (8008488 <prvCheckForValidListAndQueue+0x70>)
 800843e:	4a10      	ldr	r2, [pc, #64]	@ (8008480 <prvCheckForValidListAndQueue+0x68>)
 8008440:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008442:	2300      	movs	r3, #0
 8008444:	9300      	str	r3, [sp, #0]
 8008446:	4b11      	ldr	r3, [pc, #68]	@ (800848c <prvCheckForValidListAndQueue+0x74>)
 8008448:	4a11      	ldr	r2, [pc, #68]	@ (8008490 <prvCheckForValidListAndQueue+0x78>)
 800844a:	210c      	movs	r1, #12
 800844c:	200a      	movs	r0, #10
 800844e:	f7fd ff83 	bl	8006358 <xQueueGenericCreateStatic>
 8008452:	4603      	mov	r3, r0
 8008454:	4a08      	ldr	r2, [pc, #32]	@ (8008478 <prvCheckForValidListAndQueue+0x60>)
 8008456:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008458:	4b07      	ldr	r3, [pc, #28]	@ (8008478 <prvCheckForValidListAndQueue+0x60>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d005      	beq.n	800846c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008460:	4b05      	ldr	r3, [pc, #20]	@ (8008478 <prvCheckForValidListAndQueue+0x60>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	490b      	ldr	r1, [pc, #44]	@ (8008494 <prvCheckForValidListAndQueue+0x7c>)
 8008466:	4618      	mov	r0, r3
 8008468:	f7fe fc62 	bl	8006d30 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800846c:	f000 f936 	bl	80086dc <vPortExitCritical>
}
 8008470:	bf00      	nop
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop
 8008478:	20000e3c 	.word	0x20000e3c
 800847c:	20000e0c 	.word	0x20000e0c
 8008480:	20000e20 	.word	0x20000e20
 8008484:	20000e34 	.word	0x20000e34
 8008488:	20000e38 	.word	0x20000e38
 800848c:	20000ec0 	.word	0x20000ec0
 8008490:	20000e48 	.word	0x20000e48
 8008494:	0800a0dc 	.word	0x0800a0dc

08008498 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008498:	b480      	push	{r7}
 800849a:	b085      	sub	sp, #20
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	3b04      	subs	r3, #4
 80084a8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80084b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	3b04      	subs	r3, #4
 80084b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	f023 0201 	bic.w	r2, r3, #1
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	3b04      	subs	r3, #4
 80084c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80084c8:	4a08      	ldr	r2, [pc, #32]	@ (80084ec <pxPortInitialiseStack+0x54>)
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	3b14      	subs	r3, #20
 80084d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	3b20      	subs	r3, #32
 80084de:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80084e0:	68fb      	ldr	r3, [r7, #12]
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3714      	adds	r7, #20
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bc80      	pop	{r7}
 80084ea:	4770      	bx	lr
 80084ec:	080084f1 	.word	0x080084f1

080084f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80084f0:	b480      	push	{r7}
 80084f2:	b085      	sub	sp, #20
 80084f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80084f6:	2300      	movs	r3, #0
 80084f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80084fa:	4b12      	ldr	r3, [pc, #72]	@ (8008544 <prvTaskExitError+0x54>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008502:	d00b      	beq.n	800851c <prvTaskExitError+0x2c>
	__asm volatile
 8008504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008508:	f383 8811 	msr	BASEPRI, r3
 800850c:	f3bf 8f6f 	isb	sy
 8008510:	f3bf 8f4f 	dsb	sy
 8008514:	60fb      	str	r3, [r7, #12]
}
 8008516:	bf00      	nop
 8008518:	bf00      	nop
 800851a:	e7fd      	b.n	8008518 <prvTaskExitError+0x28>
	__asm volatile
 800851c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008520:	f383 8811 	msr	BASEPRI, r3
 8008524:	f3bf 8f6f 	isb	sy
 8008528:	f3bf 8f4f 	dsb	sy
 800852c:	60bb      	str	r3, [r7, #8]
}
 800852e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008530:	bf00      	nop
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d0fc      	beq.n	8008532 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008538:	bf00      	nop
 800853a:	bf00      	nop
 800853c:	3714      	adds	r7, #20
 800853e:	46bd      	mov	sp, r7
 8008540:	bc80      	pop	{r7}
 8008542:	4770      	bx	lr
 8008544:	20000154 	.word	0x20000154
	...

08008550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008550:	4b07      	ldr	r3, [pc, #28]	@ (8008570 <pxCurrentTCBConst2>)
 8008552:	6819      	ldr	r1, [r3, #0]
 8008554:	6808      	ldr	r0, [r1, #0]
 8008556:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800855a:	f380 8809 	msr	PSP, r0
 800855e:	f3bf 8f6f 	isb	sy
 8008562:	f04f 0000 	mov.w	r0, #0
 8008566:	f380 8811 	msr	BASEPRI, r0
 800856a:	f04e 0e0d 	orr.w	lr, lr, #13
 800856e:	4770      	bx	lr

08008570 <pxCurrentTCBConst2>:
 8008570:	20000ce0 	.word	0x20000ce0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008574:	bf00      	nop
 8008576:	bf00      	nop

08008578 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008578:	4806      	ldr	r0, [pc, #24]	@ (8008594 <prvPortStartFirstTask+0x1c>)
 800857a:	6800      	ldr	r0, [r0, #0]
 800857c:	6800      	ldr	r0, [r0, #0]
 800857e:	f380 8808 	msr	MSP, r0
 8008582:	b662      	cpsie	i
 8008584:	b661      	cpsie	f
 8008586:	f3bf 8f4f 	dsb	sy
 800858a:	f3bf 8f6f 	isb	sy
 800858e:	df00      	svc	0
 8008590:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008592:	bf00      	nop
 8008594:	e000ed08 	.word	0xe000ed08

08008598 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800859e:	4b32      	ldr	r3, [pc, #200]	@ (8008668 <xPortStartScheduler+0xd0>)
 80085a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	22ff      	movs	r2, #255	@ 0xff
 80085ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80085b8:	78fb      	ldrb	r3, [r7, #3]
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80085c0:	b2da      	uxtb	r2, r3
 80085c2:	4b2a      	ldr	r3, [pc, #168]	@ (800866c <xPortStartScheduler+0xd4>)
 80085c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80085c6:	4b2a      	ldr	r3, [pc, #168]	@ (8008670 <xPortStartScheduler+0xd8>)
 80085c8:	2207      	movs	r2, #7
 80085ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085cc:	e009      	b.n	80085e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80085ce:	4b28      	ldr	r3, [pc, #160]	@ (8008670 <xPortStartScheduler+0xd8>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	3b01      	subs	r3, #1
 80085d4:	4a26      	ldr	r2, [pc, #152]	@ (8008670 <xPortStartScheduler+0xd8>)
 80085d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80085d8:	78fb      	ldrb	r3, [r7, #3]
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	005b      	lsls	r3, r3, #1
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085e2:	78fb      	ldrb	r3, [r7, #3]
 80085e4:	b2db      	uxtb	r3, r3
 80085e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085ea:	2b80      	cmp	r3, #128	@ 0x80
 80085ec:	d0ef      	beq.n	80085ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80085ee:	4b20      	ldr	r3, [pc, #128]	@ (8008670 <xPortStartScheduler+0xd8>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f1c3 0307 	rsb	r3, r3, #7
 80085f6:	2b04      	cmp	r3, #4
 80085f8:	d00b      	beq.n	8008612 <xPortStartScheduler+0x7a>
	__asm volatile
 80085fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085fe:	f383 8811 	msr	BASEPRI, r3
 8008602:	f3bf 8f6f 	isb	sy
 8008606:	f3bf 8f4f 	dsb	sy
 800860a:	60bb      	str	r3, [r7, #8]
}
 800860c:	bf00      	nop
 800860e:	bf00      	nop
 8008610:	e7fd      	b.n	800860e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008612:	4b17      	ldr	r3, [pc, #92]	@ (8008670 <xPortStartScheduler+0xd8>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	021b      	lsls	r3, r3, #8
 8008618:	4a15      	ldr	r2, [pc, #84]	@ (8008670 <xPortStartScheduler+0xd8>)
 800861a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800861c:	4b14      	ldr	r3, [pc, #80]	@ (8008670 <xPortStartScheduler+0xd8>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008624:	4a12      	ldr	r2, [pc, #72]	@ (8008670 <xPortStartScheduler+0xd8>)
 8008626:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	b2da      	uxtb	r2, r3
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008630:	4b10      	ldr	r3, [pc, #64]	@ (8008674 <xPortStartScheduler+0xdc>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a0f      	ldr	r2, [pc, #60]	@ (8008674 <xPortStartScheduler+0xdc>)
 8008636:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800863a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800863c:	4b0d      	ldr	r3, [pc, #52]	@ (8008674 <xPortStartScheduler+0xdc>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a0c      	ldr	r2, [pc, #48]	@ (8008674 <xPortStartScheduler+0xdc>)
 8008642:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008646:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008648:	f000 f8b8 	bl	80087bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800864c:	4b0a      	ldr	r3, [pc, #40]	@ (8008678 <xPortStartScheduler+0xe0>)
 800864e:	2200      	movs	r2, #0
 8008650:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008652:	f7ff ff91 	bl	8008578 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008656:	f7fe ff99 	bl	800758c <vTaskSwitchContext>
	prvTaskExitError();
 800865a:	f7ff ff49 	bl	80084f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800865e:	2300      	movs	r3, #0
}
 8008660:	4618      	mov	r0, r3
 8008662:	3710      	adds	r7, #16
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}
 8008668:	e000e400 	.word	0xe000e400
 800866c:	20000f08 	.word	0x20000f08
 8008670:	20000f0c 	.word	0x20000f0c
 8008674:	e000ed20 	.word	0xe000ed20
 8008678:	20000154 	.word	0x20000154

0800867c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800867c:	b480      	push	{r7}
 800867e:	b083      	sub	sp, #12
 8008680:	af00      	add	r7, sp, #0
	__asm volatile
 8008682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008686:	f383 8811 	msr	BASEPRI, r3
 800868a:	f3bf 8f6f 	isb	sy
 800868e:	f3bf 8f4f 	dsb	sy
 8008692:	607b      	str	r3, [r7, #4]
}
 8008694:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008696:	4b0f      	ldr	r3, [pc, #60]	@ (80086d4 <vPortEnterCritical+0x58>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	3301      	adds	r3, #1
 800869c:	4a0d      	ldr	r2, [pc, #52]	@ (80086d4 <vPortEnterCritical+0x58>)
 800869e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80086a0:	4b0c      	ldr	r3, [pc, #48]	@ (80086d4 <vPortEnterCritical+0x58>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d110      	bne.n	80086ca <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80086a8:	4b0b      	ldr	r3, [pc, #44]	@ (80086d8 <vPortEnterCritical+0x5c>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d00b      	beq.n	80086ca <vPortEnterCritical+0x4e>
	__asm volatile
 80086b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086b6:	f383 8811 	msr	BASEPRI, r3
 80086ba:	f3bf 8f6f 	isb	sy
 80086be:	f3bf 8f4f 	dsb	sy
 80086c2:	603b      	str	r3, [r7, #0]
}
 80086c4:	bf00      	nop
 80086c6:	bf00      	nop
 80086c8:	e7fd      	b.n	80086c6 <vPortEnterCritical+0x4a>
	}
}
 80086ca:	bf00      	nop
 80086cc:	370c      	adds	r7, #12
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bc80      	pop	{r7}
 80086d2:	4770      	bx	lr
 80086d4:	20000154 	.word	0x20000154
 80086d8:	e000ed04 	.word	0xe000ed04

080086dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80086e2:	4b12      	ldr	r3, [pc, #72]	@ (800872c <vPortExitCritical+0x50>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d10b      	bne.n	8008702 <vPortExitCritical+0x26>
	__asm volatile
 80086ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ee:	f383 8811 	msr	BASEPRI, r3
 80086f2:	f3bf 8f6f 	isb	sy
 80086f6:	f3bf 8f4f 	dsb	sy
 80086fa:	607b      	str	r3, [r7, #4]
}
 80086fc:	bf00      	nop
 80086fe:	bf00      	nop
 8008700:	e7fd      	b.n	80086fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008702:	4b0a      	ldr	r3, [pc, #40]	@ (800872c <vPortExitCritical+0x50>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	3b01      	subs	r3, #1
 8008708:	4a08      	ldr	r2, [pc, #32]	@ (800872c <vPortExitCritical+0x50>)
 800870a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800870c:	4b07      	ldr	r3, [pc, #28]	@ (800872c <vPortExitCritical+0x50>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d105      	bne.n	8008720 <vPortExitCritical+0x44>
 8008714:	2300      	movs	r3, #0
 8008716:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	f383 8811 	msr	BASEPRI, r3
}
 800871e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008720:	bf00      	nop
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	bc80      	pop	{r7}
 8008728:	4770      	bx	lr
 800872a:	bf00      	nop
 800872c:	20000154 	.word	0x20000154

08008730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008730:	f3ef 8009 	mrs	r0, PSP
 8008734:	f3bf 8f6f 	isb	sy
 8008738:	4b0d      	ldr	r3, [pc, #52]	@ (8008770 <pxCurrentTCBConst>)
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008740:	6010      	str	r0, [r2, #0]
 8008742:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008746:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800874a:	f380 8811 	msr	BASEPRI, r0
 800874e:	f7fe ff1d 	bl	800758c <vTaskSwitchContext>
 8008752:	f04f 0000 	mov.w	r0, #0
 8008756:	f380 8811 	msr	BASEPRI, r0
 800875a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800875e:	6819      	ldr	r1, [r3, #0]
 8008760:	6808      	ldr	r0, [r1, #0]
 8008762:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008766:	f380 8809 	msr	PSP, r0
 800876a:	f3bf 8f6f 	isb	sy
 800876e:	4770      	bx	lr

08008770 <pxCurrentTCBConst>:
 8008770:	20000ce0 	.word	0x20000ce0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008774:	bf00      	nop
 8008776:	bf00      	nop

08008778 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b082      	sub	sp, #8
 800877c:	af00      	add	r7, sp, #0
	__asm volatile
 800877e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008782:	f383 8811 	msr	BASEPRI, r3
 8008786:	f3bf 8f6f 	isb	sy
 800878a:	f3bf 8f4f 	dsb	sy
 800878e:	607b      	str	r3, [r7, #4]
}
 8008790:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008792:	f7fe fe41 	bl	8007418 <xTaskIncrementTick>
 8008796:	4603      	mov	r3, r0
 8008798:	2b00      	cmp	r3, #0
 800879a:	d003      	beq.n	80087a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800879c:	4b06      	ldr	r3, [pc, #24]	@ (80087b8 <SysTick_Handler+0x40>)
 800879e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087a2:	601a      	str	r2, [r3, #0]
 80087a4:	2300      	movs	r3, #0
 80087a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	f383 8811 	msr	BASEPRI, r3
}
 80087ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80087b0:	bf00      	nop
 80087b2:	3708      	adds	r7, #8
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	e000ed04 	.word	0xe000ed04

080087bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80087bc:	b480      	push	{r7}
 80087be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80087c0:	4b0a      	ldr	r3, [pc, #40]	@ (80087ec <vPortSetupTimerInterrupt+0x30>)
 80087c2:	2200      	movs	r2, #0
 80087c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80087c6:	4b0a      	ldr	r3, [pc, #40]	@ (80087f0 <vPortSetupTimerInterrupt+0x34>)
 80087c8:	2200      	movs	r2, #0
 80087ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80087cc:	4b09      	ldr	r3, [pc, #36]	@ (80087f4 <vPortSetupTimerInterrupt+0x38>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a09      	ldr	r2, [pc, #36]	@ (80087f8 <vPortSetupTimerInterrupt+0x3c>)
 80087d2:	fba2 2303 	umull	r2, r3, r2, r3
 80087d6:	099b      	lsrs	r3, r3, #6
 80087d8:	4a08      	ldr	r2, [pc, #32]	@ (80087fc <vPortSetupTimerInterrupt+0x40>)
 80087da:	3b01      	subs	r3, #1
 80087dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80087de:	4b03      	ldr	r3, [pc, #12]	@ (80087ec <vPortSetupTimerInterrupt+0x30>)
 80087e0:	2207      	movs	r2, #7
 80087e2:	601a      	str	r2, [r3, #0]
}
 80087e4:	bf00      	nop
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bc80      	pop	{r7}
 80087ea:	4770      	bx	lr
 80087ec:	e000e010 	.word	0xe000e010
 80087f0:	e000e018 	.word	0xe000e018
 80087f4:	200000a4 	.word	0x200000a4
 80087f8:	10624dd3 	.word	0x10624dd3
 80087fc:	e000e014 	.word	0xe000e014

08008800 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008800:	b480      	push	{r7}
 8008802:	b085      	sub	sp, #20
 8008804:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008806:	f3ef 8305 	mrs	r3, IPSR
 800880a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2b0f      	cmp	r3, #15
 8008810:	d915      	bls.n	800883e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008812:	4a17      	ldr	r2, [pc, #92]	@ (8008870 <vPortValidateInterruptPriority+0x70>)
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	4413      	add	r3, r2
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800881c:	4b15      	ldr	r3, [pc, #84]	@ (8008874 <vPortValidateInterruptPriority+0x74>)
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	7afa      	ldrb	r2, [r7, #11]
 8008822:	429a      	cmp	r2, r3
 8008824:	d20b      	bcs.n	800883e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800882a:	f383 8811 	msr	BASEPRI, r3
 800882e:	f3bf 8f6f 	isb	sy
 8008832:	f3bf 8f4f 	dsb	sy
 8008836:	607b      	str	r3, [r7, #4]
}
 8008838:	bf00      	nop
 800883a:	bf00      	nop
 800883c:	e7fd      	b.n	800883a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800883e:	4b0e      	ldr	r3, [pc, #56]	@ (8008878 <vPortValidateInterruptPriority+0x78>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008846:	4b0d      	ldr	r3, [pc, #52]	@ (800887c <vPortValidateInterruptPriority+0x7c>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	429a      	cmp	r2, r3
 800884c:	d90b      	bls.n	8008866 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800884e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008852:	f383 8811 	msr	BASEPRI, r3
 8008856:	f3bf 8f6f 	isb	sy
 800885a:	f3bf 8f4f 	dsb	sy
 800885e:	603b      	str	r3, [r7, #0]
}
 8008860:	bf00      	nop
 8008862:	bf00      	nop
 8008864:	e7fd      	b.n	8008862 <vPortValidateInterruptPriority+0x62>
	}
 8008866:	bf00      	nop
 8008868:	3714      	adds	r7, #20
 800886a:	46bd      	mov	sp, r7
 800886c:	bc80      	pop	{r7}
 800886e:	4770      	bx	lr
 8008870:	e000e3f0 	.word	0xe000e3f0
 8008874:	20000f08 	.word	0x20000f08
 8008878:	e000ed0c 	.word	0xe000ed0c
 800887c:	20000f0c 	.word	0x20000f0c

08008880 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b08a      	sub	sp, #40	@ 0x28
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008888:	2300      	movs	r3, #0
 800888a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800888c:	f7fe fd0a 	bl	80072a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008890:	4b5c      	ldr	r3, [pc, #368]	@ (8008a04 <pvPortMalloc+0x184>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d101      	bne.n	800889c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008898:	f000 f924 	bl	8008ae4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800889c:	4b5a      	ldr	r3, [pc, #360]	@ (8008a08 <pvPortMalloc+0x188>)
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	4013      	ands	r3, r2
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	f040 8095 	bne.w	80089d4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d01e      	beq.n	80088ee <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80088b0:	2208      	movs	r2, #8
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	4413      	add	r3, r2
 80088b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f003 0307 	and.w	r3, r3, #7
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d015      	beq.n	80088ee <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f023 0307 	bic.w	r3, r3, #7
 80088c8:	3308      	adds	r3, #8
 80088ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f003 0307 	and.w	r3, r3, #7
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d00b      	beq.n	80088ee <pvPortMalloc+0x6e>
	__asm volatile
 80088d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088da:	f383 8811 	msr	BASEPRI, r3
 80088de:	f3bf 8f6f 	isb	sy
 80088e2:	f3bf 8f4f 	dsb	sy
 80088e6:	617b      	str	r3, [r7, #20]
}
 80088e8:	bf00      	nop
 80088ea:	bf00      	nop
 80088ec:	e7fd      	b.n	80088ea <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d06f      	beq.n	80089d4 <pvPortMalloc+0x154>
 80088f4:	4b45      	ldr	r3, [pc, #276]	@ (8008a0c <pvPortMalloc+0x18c>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d86a      	bhi.n	80089d4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80088fe:	4b44      	ldr	r3, [pc, #272]	@ (8008a10 <pvPortMalloc+0x190>)
 8008900:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008902:	4b43      	ldr	r3, [pc, #268]	@ (8008a10 <pvPortMalloc+0x190>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008908:	e004      	b.n	8008914 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800890a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800890c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800890e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	429a      	cmp	r2, r3
 800891c:	d903      	bls.n	8008926 <pvPortMalloc+0xa6>
 800891e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d1f1      	bne.n	800890a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008926:	4b37      	ldr	r3, [pc, #220]	@ (8008a04 <pvPortMalloc+0x184>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800892c:	429a      	cmp	r2, r3
 800892e:	d051      	beq.n	80089d4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008930:	6a3b      	ldr	r3, [r7, #32]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2208      	movs	r2, #8
 8008936:	4413      	add	r3, r2
 8008938:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800893a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	6a3b      	ldr	r3, [r7, #32]
 8008940:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008944:	685a      	ldr	r2, [r3, #4]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	1ad2      	subs	r2, r2, r3
 800894a:	2308      	movs	r3, #8
 800894c:	005b      	lsls	r3, r3, #1
 800894e:	429a      	cmp	r2, r3
 8008950:	d920      	bls.n	8008994 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008952:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	4413      	add	r3, r2
 8008958:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800895a:	69bb      	ldr	r3, [r7, #24]
 800895c:	f003 0307 	and.w	r3, r3, #7
 8008960:	2b00      	cmp	r3, #0
 8008962:	d00b      	beq.n	800897c <pvPortMalloc+0xfc>
	__asm volatile
 8008964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008968:	f383 8811 	msr	BASEPRI, r3
 800896c:	f3bf 8f6f 	isb	sy
 8008970:	f3bf 8f4f 	dsb	sy
 8008974:	613b      	str	r3, [r7, #16]
}
 8008976:	bf00      	nop
 8008978:	bf00      	nop
 800897a:	e7fd      	b.n	8008978 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800897c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800897e:	685a      	ldr	r2, [r3, #4]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	1ad2      	subs	r2, r2, r3
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800898e:	69b8      	ldr	r0, [r7, #24]
 8008990:	f000 f90a 	bl	8008ba8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008994:	4b1d      	ldr	r3, [pc, #116]	@ (8008a0c <pvPortMalloc+0x18c>)
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	1ad3      	subs	r3, r2, r3
 800899e:	4a1b      	ldr	r2, [pc, #108]	@ (8008a0c <pvPortMalloc+0x18c>)
 80089a0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80089a2:	4b1a      	ldr	r3, [pc, #104]	@ (8008a0c <pvPortMalloc+0x18c>)
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	4b1b      	ldr	r3, [pc, #108]	@ (8008a14 <pvPortMalloc+0x194>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d203      	bcs.n	80089b6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80089ae:	4b17      	ldr	r3, [pc, #92]	@ (8008a0c <pvPortMalloc+0x18c>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a18      	ldr	r2, [pc, #96]	@ (8008a14 <pvPortMalloc+0x194>)
 80089b4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80089b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b8:	685a      	ldr	r2, [r3, #4]
 80089ba:	4b13      	ldr	r3, [pc, #76]	@ (8008a08 <pvPortMalloc+0x188>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	431a      	orrs	r2, r3
 80089c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80089c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c6:	2200      	movs	r2, #0
 80089c8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80089ca:	4b13      	ldr	r3, [pc, #76]	@ (8008a18 <pvPortMalloc+0x198>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	3301      	adds	r3, #1
 80089d0:	4a11      	ldr	r2, [pc, #68]	@ (8008a18 <pvPortMalloc+0x198>)
 80089d2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80089d4:	f7fe fc74 	bl	80072c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	f003 0307 	and.w	r3, r3, #7
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d00b      	beq.n	80089fa <pvPortMalloc+0x17a>
	__asm volatile
 80089e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089e6:	f383 8811 	msr	BASEPRI, r3
 80089ea:	f3bf 8f6f 	isb	sy
 80089ee:	f3bf 8f4f 	dsb	sy
 80089f2:	60fb      	str	r3, [r7, #12]
}
 80089f4:	bf00      	nop
 80089f6:	bf00      	nop
 80089f8:	e7fd      	b.n	80089f6 <pvPortMalloc+0x176>
	return pvReturn;
 80089fa:	69fb      	ldr	r3, [r7, #28]
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3728      	adds	r7, #40	@ 0x28
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}
 8008a04:	20003718 	.word	0x20003718
 8008a08:	2000372c 	.word	0x2000372c
 8008a0c:	2000371c 	.word	0x2000371c
 8008a10:	20003710 	.word	0x20003710
 8008a14:	20003720 	.word	0x20003720
 8008a18:	20003724 	.word	0x20003724

08008a1c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b086      	sub	sp, #24
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d04f      	beq.n	8008ace <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008a2e:	2308      	movs	r3, #8
 8008a30:	425b      	negs	r3, r3
 8008a32:	697a      	ldr	r2, [r7, #20]
 8008a34:	4413      	add	r3, r2
 8008a36:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	685a      	ldr	r2, [r3, #4]
 8008a40:	4b25      	ldr	r3, [pc, #148]	@ (8008ad8 <vPortFree+0xbc>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4013      	ands	r3, r2
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d10b      	bne.n	8008a62 <vPortFree+0x46>
	__asm volatile
 8008a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a4e:	f383 8811 	msr	BASEPRI, r3
 8008a52:	f3bf 8f6f 	isb	sy
 8008a56:	f3bf 8f4f 	dsb	sy
 8008a5a:	60fb      	str	r3, [r7, #12]
}
 8008a5c:	bf00      	nop
 8008a5e:	bf00      	nop
 8008a60:	e7fd      	b.n	8008a5e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d00b      	beq.n	8008a82 <vPortFree+0x66>
	__asm volatile
 8008a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a6e:	f383 8811 	msr	BASEPRI, r3
 8008a72:	f3bf 8f6f 	isb	sy
 8008a76:	f3bf 8f4f 	dsb	sy
 8008a7a:	60bb      	str	r3, [r7, #8]
}
 8008a7c:	bf00      	nop
 8008a7e:	bf00      	nop
 8008a80:	e7fd      	b.n	8008a7e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	685a      	ldr	r2, [r3, #4]
 8008a86:	4b14      	ldr	r3, [pc, #80]	@ (8008ad8 <vPortFree+0xbc>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4013      	ands	r3, r2
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d01e      	beq.n	8008ace <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d11a      	bne.n	8008ace <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	685a      	ldr	r2, [r3, #4]
 8008a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8008ad8 <vPortFree+0xbc>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	43db      	mvns	r3, r3
 8008aa2:	401a      	ands	r2, r3
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008aa8:	f7fe fbfc 	bl	80072a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	685a      	ldr	r2, [r3, #4]
 8008ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8008adc <vPortFree+0xc0>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	4a09      	ldr	r2, [pc, #36]	@ (8008adc <vPortFree+0xc0>)
 8008ab8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008aba:	6938      	ldr	r0, [r7, #16]
 8008abc:	f000 f874 	bl	8008ba8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008ac0:	4b07      	ldr	r3, [pc, #28]	@ (8008ae0 <vPortFree+0xc4>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	4a06      	ldr	r2, [pc, #24]	@ (8008ae0 <vPortFree+0xc4>)
 8008ac8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008aca:	f7fe fbf9 	bl	80072c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008ace:	bf00      	nop
 8008ad0:	3718      	adds	r7, #24
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	bf00      	nop
 8008ad8:	2000372c 	.word	0x2000372c
 8008adc:	2000371c 	.word	0x2000371c
 8008ae0:	20003728 	.word	0x20003728

08008ae4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b085      	sub	sp, #20
 8008ae8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008aea:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8008aee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008af0:	4b27      	ldr	r3, [pc, #156]	@ (8008b90 <prvHeapInit+0xac>)
 8008af2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f003 0307 	and.w	r3, r3, #7
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d00c      	beq.n	8008b18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	3307      	adds	r3, #7
 8008b02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f023 0307 	bic.w	r3, r3, #7
 8008b0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b0c:	68ba      	ldr	r2, [r7, #8]
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	1ad3      	subs	r3, r2, r3
 8008b12:	4a1f      	ldr	r2, [pc, #124]	@ (8008b90 <prvHeapInit+0xac>)
 8008b14:	4413      	add	r3, r2
 8008b16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b1c:	4a1d      	ldr	r2, [pc, #116]	@ (8008b94 <prvHeapInit+0xb0>)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008b22:	4b1c      	ldr	r3, [pc, #112]	@ (8008b94 <prvHeapInit+0xb0>)
 8008b24:	2200      	movs	r2, #0
 8008b26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	68ba      	ldr	r2, [r7, #8]
 8008b2c:	4413      	add	r3, r2
 8008b2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008b30:	2208      	movs	r2, #8
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	1a9b      	subs	r3, r3, r2
 8008b36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f023 0307 	bic.w	r3, r3, #7
 8008b3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	4a15      	ldr	r2, [pc, #84]	@ (8008b98 <prvHeapInit+0xb4>)
 8008b44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008b46:	4b14      	ldr	r3, [pc, #80]	@ (8008b98 <prvHeapInit+0xb4>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008b4e:	4b12      	ldr	r3, [pc, #72]	@ (8008b98 <prvHeapInit+0xb4>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	2200      	movs	r2, #0
 8008b54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	1ad2      	subs	r2, r2, r3
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008b64:	4b0c      	ldr	r3, [pc, #48]	@ (8008b98 <prvHeapInit+0xb4>)
 8008b66:	681a      	ldr	r2, [r3, #0]
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	4a0a      	ldr	r2, [pc, #40]	@ (8008b9c <prvHeapInit+0xb8>)
 8008b72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	4a09      	ldr	r2, [pc, #36]	@ (8008ba0 <prvHeapInit+0xbc>)
 8008b7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008b7c:	4b09      	ldr	r3, [pc, #36]	@ (8008ba4 <prvHeapInit+0xc0>)
 8008b7e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008b82:	601a      	str	r2, [r3, #0]
}
 8008b84:	bf00      	nop
 8008b86:	3714      	adds	r7, #20
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bc80      	pop	{r7}
 8008b8c:	4770      	bx	lr
 8008b8e:	bf00      	nop
 8008b90:	20000f10 	.word	0x20000f10
 8008b94:	20003710 	.word	0x20003710
 8008b98:	20003718 	.word	0x20003718
 8008b9c:	20003720 	.word	0x20003720
 8008ba0:	2000371c 	.word	0x2000371c
 8008ba4:	2000372c 	.word	0x2000372c

08008ba8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b085      	sub	sp, #20
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008bb0:	4b27      	ldr	r3, [pc, #156]	@ (8008c50 <prvInsertBlockIntoFreeList+0xa8>)
 8008bb2:	60fb      	str	r3, [r7, #12]
 8008bb4:	e002      	b.n	8008bbc <prvInsertBlockIntoFreeList+0x14>
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	60fb      	str	r3, [r7, #12]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d8f7      	bhi.n	8008bb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	68ba      	ldr	r2, [r7, #8]
 8008bd0:	4413      	add	r3, r2
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d108      	bne.n	8008bea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	685a      	ldr	r2, [r3, #4]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	441a      	add	r2, r3
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	68ba      	ldr	r2, [r7, #8]
 8008bf4:	441a      	add	r2, r3
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d118      	bne.n	8008c30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	4b14      	ldr	r3, [pc, #80]	@ (8008c54 <prvInsertBlockIntoFreeList+0xac>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d00d      	beq.n	8008c26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	685a      	ldr	r2, [r3, #4]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	441a      	add	r2, r3
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	601a      	str	r2, [r3, #0]
 8008c24:	e008      	b.n	8008c38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008c26:	4b0b      	ldr	r3, [pc, #44]	@ (8008c54 <prvInsertBlockIntoFreeList+0xac>)
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	601a      	str	r2, [r3, #0]
 8008c2e:	e003      	b.n	8008c38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681a      	ldr	r2, [r3, #0]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008c38:	68fa      	ldr	r2, [r7, #12]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d002      	beq.n	8008c46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c46:	bf00      	nop
 8008c48:	3714      	adds	r7, #20
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bc80      	pop	{r7}
 8008c4e:	4770      	bx	lr
 8008c50:	20003710 	.word	0x20003710
 8008c54:	20003718 	.word	0x20003718

08008c58 <siprintf>:
 8008c58:	b40e      	push	{r1, r2, r3}
 8008c5a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008c5e:	b510      	push	{r4, lr}
 8008c60:	2400      	movs	r4, #0
 8008c62:	b09d      	sub	sp, #116	@ 0x74
 8008c64:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008c66:	9002      	str	r0, [sp, #8]
 8008c68:	9006      	str	r0, [sp, #24]
 8008c6a:	9107      	str	r1, [sp, #28]
 8008c6c:	9104      	str	r1, [sp, #16]
 8008c6e:	4809      	ldr	r0, [pc, #36]	@ (8008c94 <siprintf+0x3c>)
 8008c70:	4909      	ldr	r1, [pc, #36]	@ (8008c98 <siprintf+0x40>)
 8008c72:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c76:	9105      	str	r1, [sp, #20]
 8008c78:	6800      	ldr	r0, [r0, #0]
 8008c7a:	a902      	add	r1, sp, #8
 8008c7c:	9301      	str	r3, [sp, #4]
 8008c7e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008c80:	f000 fa3a 	bl	80090f8 <_svfiprintf_r>
 8008c84:	9b02      	ldr	r3, [sp, #8]
 8008c86:	701c      	strb	r4, [r3, #0]
 8008c88:	b01d      	add	sp, #116	@ 0x74
 8008c8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c8e:	b003      	add	sp, #12
 8008c90:	4770      	bx	lr
 8008c92:	bf00      	nop
 8008c94:	20000158 	.word	0x20000158
 8008c98:	ffff0208 	.word	0xffff0208

08008c9c <_vsniprintf_r>:
 8008c9c:	b530      	push	{r4, r5, lr}
 8008c9e:	4614      	mov	r4, r2
 8008ca0:	2c00      	cmp	r4, #0
 8008ca2:	4605      	mov	r5, r0
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	b09b      	sub	sp, #108	@ 0x6c
 8008ca8:	da05      	bge.n	8008cb6 <_vsniprintf_r+0x1a>
 8008caa:	238b      	movs	r3, #139	@ 0x8b
 8008cac:	6003      	str	r3, [r0, #0]
 8008cae:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb2:	b01b      	add	sp, #108	@ 0x6c
 8008cb4:	bd30      	pop	{r4, r5, pc}
 8008cb6:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008cba:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008cbe:	f04f 0300 	mov.w	r3, #0
 8008cc2:	9319      	str	r3, [sp, #100]	@ 0x64
 8008cc4:	bf0c      	ite	eq
 8008cc6:	4623      	moveq	r3, r4
 8008cc8:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008ccc:	9302      	str	r3, [sp, #8]
 8008cce:	9305      	str	r3, [sp, #20]
 8008cd0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008cd4:	9100      	str	r1, [sp, #0]
 8008cd6:	9104      	str	r1, [sp, #16]
 8008cd8:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008cdc:	4669      	mov	r1, sp
 8008cde:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8008ce0:	f000 fa0a 	bl	80090f8 <_svfiprintf_r>
 8008ce4:	1c43      	adds	r3, r0, #1
 8008ce6:	bfbc      	itt	lt
 8008ce8:	238b      	movlt	r3, #139	@ 0x8b
 8008cea:	602b      	strlt	r3, [r5, #0]
 8008cec:	2c00      	cmp	r4, #0
 8008cee:	d0e0      	beq.n	8008cb2 <_vsniprintf_r+0x16>
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	9b00      	ldr	r3, [sp, #0]
 8008cf4:	701a      	strb	r2, [r3, #0]
 8008cf6:	e7dc      	b.n	8008cb2 <_vsniprintf_r+0x16>

08008cf8 <vsniprintf>:
 8008cf8:	b507      	push	{r0, r1, r2, lr}
 8008cfa:	9300      	str	r3, [sp, #0]
 8008cfc:	4613      	mov	r3, r2
 8008cfe:	460a      	mov	r2, r1
 8008d00:	4601      	mov	r1, r0
 8008d02:	4803      	ldr	r0, [pc, #12]	@ (8008d10 <vsniprintf+0x18>)
 8008d04:	6800      	ldr	r0, [r0, #0]
 8008d06:	f7ff ffc9 	bl	8008c9c <_vsniprintf_r>
 8008d0a:	b003      	add	sp, #12
 8008d0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008d10:	20000158 	.word	0x20000158

08008d14 <memset>:
 8008d14:	4603      	mov	r3, r0
 8008d16:	4402      	add	r2, r0
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d100      	bne.n	8008d1e <memset+0xa>
 8008d1c:	4770      	bx	lr
 8008d1e:	f803 1b01 	strb.w	r1, [r3], #1
 8008d22:	e7f9      	b.n	8008d18 <memset+0x4>

08008d24 <_reclaim_reent>:
 8008d24:	4b2d      	ldr	r3, [pc, #180]	@ (8008ddc <_reclaim_reent+0xb8>)
 8008d26:	b570      	push	{r4, r5, r6, lr}
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4604      	mov	r4, r0
 8008d2c:	4283      	cmp	r3, r0
 8008d2e:	d053      	beq.n	8008dd8 <_reclaim_reent+0xb4>
 8008d30:	69c3      	ldr	r3, [r0, #28]
 8008d32:	b31b      	cbz	r3, 8008d7c <_reclaim_reent+0x58>
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	b163      	cbz	r3, 8008d52 <_reclaim_reent+0x2e>
 8008d38:	2500      	movs	r5, #0
 8008d3a:	69e3      	ldr	r3, [r4, #28]
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	5959      	ldr	r1, [r3, r5]
 8008d40:	b9b1      	cbnz	r1, 8008d70 <_reclaim_reent+0x4c>
 8008d42:	3504      	adds	r5, #4
 8008d44:	2d80      	cmp	r5, #128	@ 0x80
 8008d46:	d1f8      	bne.n	8008d3a <_reclaim_reent+0x16>
 8008d48:	69e3      	ldr	r3, [r4, #28]
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	68d9      	ldr	r1, [r3, #12]
 8008d4e:	f000 f881 	bl	8008e54 <_free_r>
 8008d52:	69e3      	ldr	r3, [r4, #28]
 8008d54:	6819      	ldr	r1, [r3, #0]
 8008d56:	b111      	cbz	r1, 8008d5e <_reclaim_reent+0x3a>
 8008d58:	4620      	mov	r0, r4
 8008d5a:	f000 f87b 	bl	8008e54 <_free_r>
 8008d5e:	69e3      	ldr	r3, [r4, #28]
 8008d60:	689d      	ldr	r5, [r3, #8]
 8008d62:	b15d      	cbz	r5, 8008d7c <_reclaim_reent+0x58>
 8008d64:	4629      	mov	r1, r5
 8008d66:	4620      	mov	r0, r4
 8008d68:	682d      	ldr	r5, [r5, #0]
 8008d6a:	f000 f873 	bl	8008e54 <_free_r>
 8008d6e:	e7f8      	b.n	8008d62 <_reclaim_reent+0x3e>
 8008d70:	680e      	ldr	r6, [r1, #0]
 8008d72:	4620      	mov	r0, r4
 8008d74:	f000 f86e 	bl	8008e54 <_free_r>
 8008d78:	4631      	mov	r1, r6
 8008d7a:	e7e1      	b.n	8008d40 <_reclaim_reent+0x1c>
 8008d7c:	6961      	ldr	r1, [r4, #20]
 8008d7e:	b111      	cbz	r1, 8008d86 <_reclaim_reent+0x62>
 8008d80:	4620      	mov	r0, r4
 8008d82:	f000 f867 	bl	8008e54 <_free_r>
 8008d86:	69e1      	ldr	r1, [r4, #28]
 8008d88:	b111      	cbz	r1, 8008d90 <_reclaim_reent+0x6c>
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	f000 f862 	bl	8008e54 <_free_r>
 8008d90:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008d92:	b111      	cbz	r1, 8008d9a <_reclaim_reent+0x76>
 8008d94:	4620      	mov	r0, r4
 8008d96:	f000 f85d 	bl	8008e54 <_free_r>
 8008d9a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d9c:	b111      	cbz	r1, 8008da4 <_reclaim_reent+0x80>
 8008d9e:	4620      	mov	r0, r4
 8008da0:	f000 f858 	bl	8008e54 <_free_r>
 8008da4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008da6:	b111      	cbz	r1, 8008dae <_reclaim_reent+0x8a>
 8008da8:	4620      	mov	r0, r4
 8008daa:	f000 f853 	bl	8008e54 <_free_r>
 8008dae:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008db0:	b111      	cbz	r1, 8008db8 <_reclaim_reent+0x94>
 8008db2:	4620      	mov	r0, r4
 8008db4:	f000 f84e 	bl	8008e54 <_free_r>
 8008db8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008dba:	b111      	cbz	r1, 8008dc2 <_reclaim_reent+0x9e>
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	f000 f849 	bl	8008e54 <_free_r>
 8008dc2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008dc4:	b111      	cbz	r1, 8008dcc <_reclaim_reent+0xa8>
 8008dc6:	4620      	mov	r0, r4
 8008dc8:	f000 f844 	bl	8008e54 <_free_r>
 8008dcc:	6a23      	ldr	r3, [r4, #32]
 8008dce:	b11b      	cbz	r3, 8008dd8 <_reclaim_reent+0xb4>
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008dd6:	4718      	bx	r3
 8008dd8:	bd70      	pop	{r4, r5, r6, pc}
 8008dda:	bf00      	nop
 8008ddc:	20000158 	.word	0x20000158

08008de0 <__errno>:
 8008de0:	4b01      	ldr	r3, [pc, #4]	@ (8008de8 <__errno+0x8>)
 8008de2:	6818      	ldr	r0, [r3, #0]
 8008de4:	4770      	bx	lr
 8008de6:	bf00      	nop
 8008de8:	20000158 	.word	0x20000158

08008dec <__libc_init_array>:
 8008dec:	b570      	push	{r4, r5, r6, lr}
 8008dee:	2600      	movs	r6, #0
 8008df0:	4d0c      	ldr	r5, [pc, #48]	@ (8008e24 <__libc_init_array+0x38>)
 8008df2:	4c0d      	ldr	r4, [pc, #52]	@ (8008e28 <__libc_init_array+0x3c>)
 8008df4:	1b64      	subs	r4, r4, r5
 8008df6:	10a4      	asrs	r4, r4, #2
 8008df8:	42a6      	cmp	r6, r4
 8008dfa:	d109      	bne.n	8008e10 <__libc_init_array+0x24>
 8008dfc:	f000 fc76 	bl	80096ec <_init>
 8008e00:	2600      	movs	r6, #0
 8008e02:	4d0a      	ldr	r5, [pc, #40]	@ (8008e2c <__libc_init_array+0x40>)
 8008e04:	4c0a      	ldr	r4, [pc, #40]	@ (8008e30 <__libc_init_array+0x44>)
 8008e06:	1b64      	subs	r4, r4, r5
 8008e08:	10a4      	asrs	r4, r4, #2
 8008e0a:	42a6      	cmp	r6, r4
 8008e0c:	d105      	bne.n	8008e1a <__libc_init_array+0x2e>
 8008e0e:	bd70      	pop	{r4, r5, r6, pc}
 8008e10:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e14:	4798      	blx	r3
 8008e16:	3601      	adds	r6, #1
 8008e18:	e7ee      	b.n	8008df8 <__libc_init_array+0xc>
 8008e1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e1e:	4798      	blx	r3
 8008e20:	3601      	adds	r6, #1
 8008e22:	e7f2      	b.n	8008e0a <__libc_init_array+0x1e>
 8008e24:	0800a190 	.word	0x0800a190
 8008e28:	0800a190 	.word	0x0800a190
 8008e2c:	0800a190 	.word	0x0800a190
 8008e30:	0800a194 	.word	0x0800a194

08008e34 <__retarget_lock_acquire_recursive>:
 8008e34:	4770      	bx	lr

08008e36 <__retarget_lock_release_recursive>:
 8008e36:	4770      	bx	lr

08008e38 <memcpy>:
 8008e38:	440a      	add	r2, r1
 8008e3a:	4291      	cmp	r1, r2
 8008e3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e40:	d100      	bne.n	8008e44 <memcpy+0xc>
 8008e42:	4770      	bx	lr
 8008e44:	b510      	push	{r4, lr}
 8008e46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e4a:	4291      	cmp	r1, r2
 8008e4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e50:	d1f9      	bne.n	8008e46 <memcpy+0xe>
 8008e52:	bd10      	pop	{r4, pc}

08008e54 <_free_r>:
 8008e54:	b538      	push	{r3, r4, r5, lr}
 8008e56:	4605      	mov	r5, r0
 8008e58:	2900      	cmp	r1, #0
 8008e5a:	d040      	beq.n	8008ede <_free_r+0x8a>
 8008e5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e60:	1f0c      	subs	r4, r1, #4
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	bfb8      	it	lt
 8008e66:	18e4      	addlt	r4, r4, r3
 8008e68:	f000 f8de 	bl	8009028 <__malloc_lock>
 8008e6c:	4a1c      	ldr	r2, [pc, #112]	@ (8008ee0 <_free_r+0x8c>)
 8008e6e:	6813      	ldr	r3, [r2, #0]
 8008e70:	b933      	cbnz	r3, 8008e80 <_free_r+0x2c>
 8008e72:	6063      	str	r3, [r4, #4]
 8008e74:	6014      	str	r4, [r2, #0]
 8008e76:	4628      	mov	r0, r5
 8008e78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e7c:	f000 b8da 	b.w	8009034 <__malloc_unlock>
 8008e80:	42a3      	cmp	r3, r4
 8008e82:	d908      	bls.n	8008e96 <_free_r+0x42>
 8008e84:	6820      	ldr	r0, [r4, #0]
 8008e86:	1821      	adds	r1, r4, r0
 8008e88:	428b      	cmp	r3, r1
 8008e8a:	bf01      	itttt	eq
 8008e8c:	6819      	ldreq	r1, [r3, #0]
 8008e8e:	685b      	ldreq	r3, [r3, #4]
 8008e90:	1809      	addeq	r1, r1, r0
 8008e92:	6021      	streq	r1, [r4, #0]
 8008e94:	e7ed      	b.n	8008e72 <_free_r+0x1e>
 8008e96:	461a      	mov	r2, r3
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	b10b      	cbz	r3, 8008ea0 <_free_r+0x4c>
 8008e9c:	42a3      	cmp	r3, r4
 8008e9e:	d9fa      	bls.n	8008e96 <_free_r+0x42>
 8008ea0:	6811      	ldr	r1, [r2, #0]
 8008ea2:	1850      	adds	r0, r2, r1
 8008ea4:	42a0      	cmp	r0, r4
 8008ea6:	d10b      	bne.n	8008ec0 <_free_r+0x6c>
 8008ea8:	6820      	ldr	r0, [r4, #0]
 8008eaa:	4401      	add	r1, r0
 8008eac:	1850      	adds	r0, r2, r1
 8008eae:	4283      	cmp	r3, r0
 8008eb0:	6011      	str	r1, [r2, #0]
 8008eb2:	d1e0      	bne.n	8008e76 <_free_r+0x22>
 8008eb4:	6818      	ldr	r0, [r3, #0]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	4408      	add	r0, r1
 8008eba:	6010      	str	r0, [r2, #0]
 8008ebc:	6053      	str	r3, [r2, #4]
 8008ebe:	e7da      	b.n	8008e76 <_free_r+0x22>
 8008ec0:	d902      	bls.n	8008ec8 <_free_r+0x74>
 8008ec2:	230c      	movs	r3, #12
 8008ec4:	602b      	str	r3, [r5, #0]
 8008ec6:	e7d6      	b.n	8008e76 <_free_r+0x22>
 8008ec8:	6820      	ldr	r0, [r4, #0]
 8008eca:	1821      	adds	r1, r4, r0
 8008ecc:	428b      	cmp	r3, r1
 8008ece:	bf01      	itttt	eq
 8008ed0:	6819      	ldreq	r1, [r3, #0]
 8008ed2:	685b      	ldreq	r3, [r3, #4]
 8008ed4:	1809      	addeq	r1, r1, r0
 8008ed6:	6021      	streq	r1, [r4, #0]
 8008ed8:	6063      	str	r3, [r4, #4]
 8008eda:	6054      	str	r4, [r2, #4]
 8008edc:	e7cb      	b.n	8008e76 <_free_r+0x22>
 8008ede:	bd38      	pop	{r3, r4, r5, pc}
 8008ee0:	20003874 	.word	0x20003874

08008ee4 <sbrk_aligned>:
 8008ee4:	b570      	push	{r4, r5, r6, lr}
 8008ee6:	4e0f      	ldr	r6, [pc, #60]	@ (8008f24 <sbrk_aligned+0x40>)
 8008ee8:	460c      	mov	r4, r1
 8008eea:	6831      	ldr	r1, [r6, #0]
 8008eec:	4605      	mov	r5, r0
 8008eee:	b911      	cbnz	r1, 8008ef6 <sbrk_aligned+0x12>
 8008ef0:	f000 fba8 	bl	8009644 <_sbrk_r>
 8008ef4:	6030      	str	r0, [r6, #0]
 8008ef6:	4621      	mov	r1, r4
 8008ef8:	4628      	mov	r0, r5
 8008efa:	f000 fba3 	bl	8009644 <_sbrk_r>
 8008efe:	1c43      	adds	r3, r0, #1
 8008f00:	d103      	bne.n	8008f0a <sbrk_aligned+0x26>
 8008f02:	f04f 34ff 	mov.w	r4, #4294967295
 8008f06:	4620      	mov	r0, r4
 8008f08:	bd70      	pop	{r4, r5, r6, pc}
 8008f0a:	1cc4      	adds	r4, r0, #3
 8008f0c:	f024 0403 	bic.w	r4, r4, #3
 8008f10:	42a0      	cmp	r0, r4
 8008f12:	d0f8      	beq.n	8008f06 <sbrk_aligned+0x22>
 8008f14:	1a21      	subs	r1, r4, r0
 8008f16:	4628      	mov	r0, r5
 8008f18:	f000 fb94 	bl	8009644 <_sbrk_r>
 8008f1c:	3001      	adds	r0, #1
 8008f1e:	d1f2      	bne.n	8008f06 <sbrk_aligned+0x22>
 8008f20:	e7ef      	b.n	8008f02 <sbrk_aligned+0x1e>
 8008f22:	bf00      	nop
 8008f24:	20003870 	.word	0x20003870

08008f28 <_malloc_r>:
 8008f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f2c:	1ccd      	adds	r5, r1, #3
 8008f2e:	f025 0503 	bic.w	r5, r5, #3
 8008f32:	3508      	adds	r5, #8
 8008f34:	2d0c      	cmp	r5, #12
 8008f36:	bf38      	it	cc
 8008f38:	250c      	movcc	r5, #12
 8008f3a:	2d00      	cmp	r5, #0
 8008f3c:	4606      	mov	r6, r0
 8008f3e:	db01      	blt.n	8008f44 <_malloc_r+0x1c>
 8008f40:	42a9      	cmp	r1, r5
 8008f42:	d904      	bls.n	8008f4e <_malloc_r+0x26>
 8008f44:	230c      	movs	r3, #12
 8008f46:	6033      	str	r3, [r6, #0]
 8008f48:	2000      	movs	r0, #0
 8008f4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009024 <_malloc_r+0xfc>
 8008f52:	f000 f869 	bl	8009028 <__malloc_lock>
 8008f56:	f8d8 3000 	ldr.w	r3, [r8]
 8008f5a:	461c      	mov	r4, r3
 8008f5c:	bb44      	cbnz	r4, 8008fb0 <_malloc_r+0x88>
 8008f5e:	4629      	mov	r1, r5
 8008f60:	4630      	mov	r0, r6
 8008f62:	f7ff ffbf 	bl	8008ee4 <sbrk_aligned>
 8008f66:	1c43      	adds	r3, r0, #1
 8008f68:	4604      	mov	r4, r0
 8008f6a:	d158      	bne.n	800901e <_malloc_r+0xf6>
 8008f6c:	f8d8 4000 	ldr.w	r4, [r8]
 8008f70:	4627      	mov	r7, r4
 8008f72:	2f00      	cmp	r7, #0
 8008f74:	d143      	bne.n	8008ffe <_malloc_r+0xd6>
 8008f76:	2c00      	cmp	r4, #0
 8008f78:	d04b      	beq.n	8009012 <_malloc_r+0xea>
 8008f7a:	6823      	ldr	r3, [r4, #0]
 8008f7c:	4639      	mov	r1, r7
 8008f7e:	4630      	mov	r0, r6
 8008f80:	eb04 0903 	add.w	r9, r4, r3
 8008f84:	f000 fb5e 	bl	8009644 <_sbrk_r>
 8008f88:	4581      	cmp	r9, r0
 8008f8a:	d142      	bne.n	8009012 <_malloc_r+0xea>
 8008f8c:	6821      	ldr	r1, [r4, #0]
 8008f8e:	4630      	mov	r0, r6
 8008f90:	1a6d      	subs	r5, r5, r1
 8008f92:	4629      	mov	r1, r5
 8008f94:	f7ff ffa6 	bl	8008ee4 <sbrk_aligned>
 8008f98:	3001      	adds	r0, #1
 8008f9a:	d03a      	beq.n	8009012 <_malloc_r+0xea>
 8008f9c:	6823      	ldr	r3, [r4, #0]
 8008f9e:	442b      	add	r3, r5
 8008fa0:	6023      	str	r3, [r4, #0]
 8008fa2:	f8d8 3000 	ldr.w	r3, [r8]
 8008fa6:	685a      	ldr	r2, [r3, #4]
 8008fa8:	bb62      	cbnz	r2, 8009004 <_malloc_r+0xdc>
 8008faa:	f8c8 7000 	str.w	r7, [r8]
 8008fae:	e00f      	b.n	8008fd0 <_malloc_r+0xa8>
 8008fb0:	6822      	ldr	r2, [r4, #0]
 8008fb2:	1b52      	subs	r2, r2, r5
 8008fb4:	d420      	bmi.n	8008ff8 <_malloc_r+0xd0>
 8008fb6:	2a0b      	cmp	r2, #11
 8008fb8:	d917      	bls.n	8008fea <_malloc_r+0xc2>
 8008fba:	1961      	adds	r1, r4, r5
 8008fbc:	42a3      	cmp	r3, r4
 8008fbe:	6025      	str	r5, [r4, #0]
 8008fc0:	bf18      	it	ne
 8008fc2:	6059      	strne	r1, [r3, #4]
 8008fc4:	6863      	ldr	r3, [r4, #4]
 8008fc6:	bf08      	it	eq
 8008fc8:	f8c8 1000 	streq.w	r1, [r8]
 8008fcc:	5162      	str	r2, [r4, r5]
 8008fce:	604b      	str	r3, [r1, #4]
 8008fd0:	4630      	mov	r0, r6
 8008fd2:	f000 f82f 	bl	8009034 <__malloc_unlock>
 8008fd6:	f104 000b 	add.w	r0, r4, #11
 8008fda:	1d23      	adds	r3, r4, #4
 8008fdc:	f020 0007 	bic.w	r0, r0, #7
 8008fe0:	1ac2      	subs	r2, r0, r3
 8008fe2:	bf1c      	itt	ne
 8008fe4:	1a1b      	subne	r3, r3, r0
 8008fe6:	50a3      	strne	r3, [r4, r2]
 8008fe8:	e7af      	b.n	8008f4a <_malloc_r+0x22>
 8008fea:	6862      	ldr	r2, [r4, #4]
 8008fec:	42a3      	cmp	r3, r4
 8008fee:	bf0c      	ite	eq
 8008ff0:	f8c8 2000 	streq.w	r2, [r8]
 8008ff4:	605a      	strne	r2, [r3, #4]
 8008ff6:	e7eb      	b.n	8008fd0 <_malloc_r+0xa8>
 8008ff8:	4623      	mov	r3, r4
 8008ffa:	6864      	ldr	r4, [r4, #4]
 8008ffc:	e7ae      	b.n	8008f5c <_malloc_r+0x34>
 8008ffe:	463c      	mov	r4, r7
 8009000:	687f      	ldr	r7, [r7, #4]
 8009002:	e7b6      	b.n	8008f72 <_malloc_r+0x4a>
 8009004:	461a      	mov	r2, r3
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	42a3      	cmp	r3, r4
 800900a:	d1fb      	bne.n	8009004 <_malloc_r+0xdc>
 800900c:	2300      	movs	r3, #0
 800900e:	6053      	str	r3, [r2, #4]
 8009010:	e7de      	b.n	8008fd0 <_malloc_r+0xa8>
 8009012:	230c      	movs	r3, #12
 8009014:	4630      	mov	r0, r6
 8009016:	6033      	str	r3, [r6, #0]
 8009018:	f000 f80c 	bl	8009034 <__malloc_unlock>
 800901c:	e794      	b.n	8008f48 <_malloc_r+0x20>
 800901e:	6005      	str	r5, [r0, #0]
 8009020:	e7d6      	b.n	8008fd0 <_malloc_r+0xa8>
 8009022:	bf00      	nop
 8009024:	20003874 	.word	0x20003874

08009028 <__malloc_lock>:
 8009028:	4801      	ldr	r0, [pc, #4]	@ (8009030 <__malloc_lock+0x8>)
 800902a:	f7ff bf03 	b.w	8008e34 <__retarget_lock_acquire_recursive>
 800902e:	bf00      	nop
 8009030:	2000386c 	.word	0x2000386c

08009034 <__malloc_unlock>:
 8009034:	4801      	ldr	r0, [pc, #4]	@ (800903c <__malloc_unlock+0x8>)
 8009036:	f7ff befe 	b.w	8008e36 <__retarget_lock_release_recursive>
 800903a:	bf00      	nop
 800903c:	2000386c 	.word	0x2000386c

08009040 <__ssputs_r>:
 8009040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009044:	461f      	mov	r7, r3
 8009046:	688e      	ldr	r6, [r1, #8]
 8009048:	4682      	mov	sl, r0
 800904a:	42be      	cmp	r6, r7
 800904c:	460c      	mov	r4, r1
 800904e:	4690      	mov	r8, r2
 8009050:	680b      	ldr	r3, [r1, #0]
 8009052:	d82d      	bhi.n	80090b0 <__ssputs_r+0x70>
 8009054:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009058:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800905c:	d026      	beq.n	80090ac <__ssputs_r+0x6c>
 800905e:	6965      	ldr	r5, [r4, #20]
 8009060:	6909      	ldr	r1, [r1, #16]
 8009062:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009066:	eba3 0901 	sub.w	r9, r3, r1
 800906a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800906e:	1c7b      	adds	r3, r7, #1
 8009070:	444b      	add	r3, r9
 8009072:	106d      	asrs	r5, r5, #1
 8009074:	429d      	cmp	r5, r3
 8009076:	bf38      	it	cc
 8009078:	461d      	movcc	r5, r3
 800907a:	0553      	lsls	r3, r2, #21
 800907c:	d527      	bpl.n	80090ce <__ssputs_r+0x8e>
 800907e:	4629      	mov	r1, r5
 8009080:	f7ff ff52 	bl	8008f28 <_malloc_r>
 8009084:	4606      	mov	r6, r0
 8009086:	b360      	cbz	r0, 80090e2 <__ssputs_r+0xa2>
 8009088:	464a      	mov	r2, r9
 800908a:	6921      	ldr	r1, [r4, #16]
 800908c:	f7ff fed4 	bl	8008e38 <memcpy>
 8009090:	89a3      	ldrh	r3, [r4, #12]
 8009092:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009096:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800909a:	81a3      	strh	r3, [r4, #12]
 800909c:	6126      	str	r6, [r4, #16]
 800909e:	444e      	add	r6, r9
 80090a0:	6026      	str	r6, [r4, #0]
 80090a2:	463e      	mov	r6, r7
 80090a4:	6165      	str	r5, [r4, #20]
 80090a6:	eba5 0509 	sub.w	r5, r5, r9
 80090aa:	60a5      	str	r5, [r4, #8]
 80090ac:	42be      	cmp	r6, r7
 80090ae:	d900      	bls.n	80090b2 <__ssputs_r+0x72>
 80090b0:	463e      	mov	r6, r7
 80090b2:	4632      	mov	r2, r6
 80090b4:	4641      	mov	r1, r8
 80090b6:	6820      	ldr	r0, [r4, #0]
 80090b8:	f000 faaa 	bl	8009610 <memmove>
 80090bc:	2000      	movs	r0, #0
 80090be:	68a3      	ldr	r3, [r4, #8]
 80090c0:	1b9b      	subs	r3, r3, r6
 80090c2:	60a3      	str	r3, [r4, #8]
 80090c4:	6823      	ldr	r3, [r4, #0]
 80090c6:	4433      	add	r3, r6
 80090c8:	6023      	str	r3, [r4, #0]
 80090ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090ce:	462a      	mov	r2, r5
 80090d0:	f000 fad6 	bl	8009680 <_realloc_r>
 80090d4:	4606      	mov	r6, r0
 80090d6:	2800      	cmp	r0, #0
 80090d8:	d1e0      	bne.n	800909c <__ssputs_r+0x5c>
 80090da:	4650      	mov	r0, sl
 80090dc:	6921      	ldr	r1, [r4, #16]
 80090de:	f7ff feb9 	bl	8008e54 <_free_r>
 80090e2:	230c      	movs	r3, #12
 80090e4:	f8ca 3000 	str.w	r3, [sl]
 80090e8:	89a3      	ldrh	r3, [r4, #12]
 80090ea:	f04f 30ff 	mov.w	r0, #4294967295
 80090ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090f2:	81a3      	strh	r3, [r4, #12]
 80090f4:	e7e9      	b.n	80090ca <__ssputs_r+0x8a>
	...

080090f8 <_svfiprintf_r>:
 80090f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090fc:	4698      	mov	r8, r3
 80090fe:	898b      	ldrh	r3, [r1, #12]
 8009100:	4607      	mov	r7, r0
 8009102:	061b      	lsls	r3, r3, #24
 8009104:	460d      	mov	r5, r1
 8009106:	4614      	mov	r4, r2
 8009108:	b09d      	sub	sp, #116	@ 0x74
 800910a:	d510      	bpl.n	800912e <_svfiprintf_r+0x36>
 800910c:	690b      	ldr	r3, [r1, #16]
 800910e:	b973      	cbnz	r3, 800912e <_svfiprintf_r+0x36>
 8009110:	2140      	movs	r1, #64	@ 0x40
 8009112:	f7ff ff09 	bl	8008f28 <_malloc_r>
 8009116:	6028      	str	r0, [r5, #0]
 8009118:	6128      	str	r0, [r5, #16]
 800911a:	b930      	cbnz	r0, 800912a <_svfiprintf_r+0x32>
 800911c:	230c      	movs	r3, #12
 800911e:	603b      	str	r3, [r7, #0]
 8009120:	f04f 30ff 	mov.w	r0, #4294967295
 8009124:	b01d      	add	sp, #116	@ 0x74
 8009126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800912a:	2340      	movs	r3, #64	@ 0x40
 800912c:	616b      	str	r3, [r5, #20]
 800912e:	2300      	movs	r3, #0
 8009130:	9309      	str	r3, [sp, #36]	@ 0x24
 8009132:	2320      	movs	r3, #32
 8009134:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009138:	2330      	movs	r3, #48	@ 0x30
 800913a:	f04f 0901 	mov.w	r9, #1
 800913e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009142:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80092dc <_svfiprintf_r+0x1e4>
 8009146:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800914a:	4623      	mov	r3, r4
 800914c:	469a      	mov	sl, r3
 800914e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009152:	b10a      	cbz	r2, 8009158 <_svfiprintf_r+0x60>
 8009154:	2a25      	cmp	r2, #37	@ 0x25
 8009156:	d1f9      	bne.n	800914c <_svfiprintf_r+0x54>
 8009158:	ebba 0b04 	subs.w	fp, sl, r4
 800915c:	d00b      	beq.n	8009176 <_svfiprintf_r+0x7e>
 800915e:	465b      	mov	r3, fp
 8009160:	4622      	mov	r2, r4
 8009162:	4629      	mov	r1, r5
 8009164:	4638      	mov	r0, r7
 8009166:	f7ff ff6b 	bl	8009040 <__ssputs_r>
 800916a:	3001      	adds	r0, #1
 800916c:	f000 80a7 	beq.w	80092be <_svfiprintf_r+0x1c6>
 8009170:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009172:	445a      	add	r2, fp
 8009174:	9209      	str	r2, [sp, #36]	@ 0x24
 8009176:	f89a 3000 	ldrb.w	r3, [sl]
 800917a:	2b00      	cmp	r3, #0
 800917c:	f000 809f 	beq.w	80092be <_svfiprintf_r+0x1c6>
 8009180:	2300      	movs	r3, #0
 8009182:	f04f 32ff 	mov.w	r2, #4294967295
 8009186:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800918a:	f10a 0a01 	add.w	sl, sl, #1
 800918e:	9304      	str	r3, [sp, #16]
 8009190:	9307      	str	r3, [sp, #28]
 8009192:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009196:	931a      	str	r3, [sp, #104]	@ 0x68
 8009198:	4654      	mov	r4, sl
 800919a:	2205      	movs	r2, #5
 800919c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091a0:	484e      	ldr	r0, [pc, #312]	@ (80092dc <_svfiprintf_r+0x1e4>)
 80091a2:	f000 fa5f 	bl	8009664 <memchr>
 80091a6:	9a04      	ldr	r2, [sp, #16]
 80091a8:	b9d8      	cbnz	r0, 80091e2 <_svfiprintf_r+0xea>
 80091aa:	06d0      	lsls	r0, r2, #27
 80091ac:	bf44      	itt	mi
 80091ae:	2320      	movmi	r3, #32
 80091b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091b4:	0711      	lsls	r1, r2, #28
 80091b6:	bf44      	itt	mi
 80091b8:	232b      	movmi	r3, #43	@ 0x2b
 80091ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091be:	f89a 3000 	ldrb.w	r3, [sl]
 80091c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80091c4:	d015      	beq.n	80091f2 <_svfiprintf_r+0xfa>
 80091c6:	4654      	mov	r4, sl
 80091c8:	2000      	movs	r0, #0
 80091ca:	f04f 0c0a 	mov.w	ip, #10
 80091ce:	9a07      	ldr	r2, [sp, #28]
 80091d0:	4621      	mov	r1, r4
 80091d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091d6:	3b30      	subs	r3, #48	@ 0x30
 80091d8:	2b09      	cmp	r3, #9
 80091da:	d94b      	bls.n	8009274 <_svfiprintf_r+0x17c>
 80091dc:	b1b0      	cbz	r0, 800920c <_svfiprintf_r+0x114>
 80091de:	9207      	str	r2, [sp, #28]
 80091e0:	e014      	b.n	800920c <_svfiprintf_r+0x114>
 80091e2:	eba0 0308 	sub.w	r3, r0, r8
 80091e6:	fa09 f303 	lsl.w	r3, r9, r3
 80091ea:	4313      	orrs	r3, r2
 80091ec:	46a2      	mov	sl, r4
 80091ee:	9304      	str	r3, [sp, #16]
 80091f0:	e7d2      	b.n	8009198 <_svfiprintf_r+0xa0>
 80091f2:	9b03      	ldr	r3, [sp, #12]
 80091f4:	1d19      	adds	r1, r3, #4
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	9103      	str	r1, [sp, #12]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	bfbb      	ittet	lt
 80091fe:	425b      	neglt	r3, r3
 8009200:	f042 0202 	orrlt.w	r2, r2, #2
 8009204:	9307      	strge	r3, [sp, #28]
 8009206:	9307      	strlt	r3, [sp, #28]
 8009208:	bfb8      	it	lt
 800920a:	9204      	strlt	r2, [sp, #16]
 800920c:	7823      	ldrb	r3, [r4, #0]
 800920e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009210:	d10a      	bne.n	8009228 <_svfiprintf_r+0x130>
 8009212:	7863      	ldrb	r3, [r4, #1]
 8009214:	2b2a      	cmp	r3, #42	@ 0x2a
 8009216:	d132      	bne.n	800927e <_svfiprintf_r+0x186>
 8009218:	9b03      	ldr	r3, [sp, #12]
 800921a:	3402      	adds	r4, #2
 800921c:	1d1a      	adds	r2, r3, #4
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	9203      	str	r2, [sp, #12]
 8009222:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009226:	9305      	str	r3, [sp, #20]
 8009228:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80092e0 <_svfiprintf_r+0x1e8>
 800922c:	2203      	movs	r2, #3
 800922e:	4650      	mov	r0, sl
 8009230:	7821      	ldrb	r1, [r4, #0]
 8009232:	f000 fa17 	bl	8009664 <memchr>
 8009236:	b138      	cbz	r0, 8009248 <_svfiprintf_r+0x150>
 8009238:	2240      	movs	r2, #64	@ 0x40
 800923a:	9b04      	ldr	r3, [sp, #16]
 800923c:	eba0 000a 	sub.w	r0, r0, sl
 8009240:	4082      	lsls	r2, r0
 8009242:	4313      	orrs	r3, r2
 8009244:	3401      	adds	r4, #1
 8009246:	9304      	str	r3, [sp, #16]
 8009248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800924c:	2206      	movs	r2, #6
 800924e:	4825      	ldr	r0, [pc, #148]	@ (80092e4 <_svfiprintf_r+0x1ec>)
 8009250:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009254:	f000 fa06 	bl	8009664 <memchr>
 8009258:	2800      	cmp	r0, #0
 800925a:	d036      	beq.n	80092ca <_svfiprintf_r+0x1d2>
 800925c:	4b22      	ldr	r3, [pc, #136]	@ (80092e8 <_svfiprintf_r+0x1f0>)
 800925e:	bb1b      	cbnz	r3, 80092a8 <_svfiprintf_r+0x1b0>
 8009260:	9b03      	ldr	r3, [sp, #12]
 8009262:	3307      	adds	r3, #7
 8009264:	f023 0307 	bic.w	r3, r3, #7
 8009268:	3308      	adds	r3, #8
 800926a:	9303      	str	r3, [sp, #12]
 800926c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800926e:	4433      	add	r3, r6
 8009270:	9309      	str	r3, [sp, #36]	@ 0x24
 8009272:	e76a      	b.n	800914a <_svfiprintf_r+0x52>
 8009274:	460c      	mov	r4, r1
 8009276:	2001      	movs	r0, #1
 8009278:	fb0c 3202 	mla	r2, ip, r2, r3
 800927c:	e7a8      	b.n	80091d0 <_svfiprintf_r+0xd8>
 800927e:	2300      	movs	r3, #0
 8009280:	f04f 0c0a 	mov.w	ip, #10
 8009284:	4619      	mov	r1, r3
 8009286:	3401      	adds	r4, #1
 8009288:	9305      	str	r3, [sp, #20]
 800928a:	4620      	mov	r0, r4
 800928c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009290:	3a30      	subs	r2, #48	@ 0x30
 8009292:	2a09      	cmp	r2, #9
 8009294:	d903      	bls.n	800929e <_svfiprintf_r+0x1a6>
 8009296:	2b00      	cmp	r3, #0
 8009298:	d0c6      	beq.n	8009228 <_svfiprintf_r+0x130>
 800929a:	9105      	str	r1, [sp, #20]
 800929c:	e7c4      	b.n	8009228 <_svfiprintf_r+0x130>
 800929e:	4604      	mov	r4, r0
 80092a0:	2301      	movs	r3, #1
 80092a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80092a6:	e7f0      	b.n	800928a <_svfiprintf_r+0x192>
 80092a8:	ab03      	add	r3, sp, #12
 80092aa:	9300      	str	r3, [sp, #0]
 80092ac:	462a      	mov	r2, r5
 80092ae:	4638      	mov	r0, r7
 80092b0:	4b0e      	ldr	r3, [pc, #56]	@ (80092ec <_svfiprintf_r+0x1f4>)
 80092b2:	a904      	add	r1, sp, #16
 80092b4:	f3af 8000 	nop.w
 80092b8:	1c42      	adds	r2, r0, #1
 80092ba:	4606      	mov	r6, r0
 80092bc:	d1d6      	bne.n	800926c <_svfiprintf_r+0x174>
 80092be:	89ab      	ldrh	r3, [r5, #12]
 80092c0:	065b      	lsls	r3, r3, #25
 80092c2:	f53f af2d 	bmi.w	8009120 <_svfiprintf_r+0x28>
 80092c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80092c8:	e72c      	b.n	8009124 <_svfiprintf_r+0x2c>
 80092ca:	ab03      	add	r3, sp, #12
 80092cc:	9300      	str	r3, [sp, #0]
 80092ce:	462a      	mov	r2, r5
 80092d0:	4638      	mov	r0, r7
 80092d2:	4b06      	ldr	r3, [pc, #24]	@ (80092ec <_svfiprintf_r+0x1f4>)
 80092d4:	a904      	add	r1, sp, #16
 80092d6:	f000 f87d 	bl	80093d4 <_printf_i>
 80092da:	e7ed      	b.n	80092b8 <_svfiprintf_r+0x1c0>
 80092dc:	0800a152 	.word	0x0800a152
 80092e0:	0800a158 	.word	0x0800a158
 80092e4:	0800a15c 	.word	0x0800a15c
 80092e8:	00000000 	.word	0x00000000
 80092ec:	08009041 	.word	0x08009041

080092f0 <_printf_common>:
 80092f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092f4:	4616      	mov	r6, r2
 80092f6:	4698      	mov	r8, r3
 80092f8:	688a      	ldr	r2, [r1, #8]
 80092fa:	690b      	ldr	r3, [r1, #16]
 80092fc:	4607      	mov	r7, r0
 80092fe:	4293      	cmp	r3, r2
 8009300:	bfb8      	it	lt
 8009302:	4613      	movlt	r3, r2
 8009304:	6033      	str	r3, [r6, #0]
 8009306:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800930a:	460c      	mov	r4, r1
 800930c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009310:	b10a      	cbz	r2, 8009316 <_printf_common+0x26>
 8009312:	3301      	adds	r3, #1
 8009314:	6033      	str	r3, [r6, #0]
 8009316:	6823      	ldr	r3, [r4, #0]
 8009318:	0699      	lsls	r1, r3, #26
 800931a:	bf42      	ittt	mi
 800931c:	6833      	ldrmi	r3, [r6, #0]
 800931e:	3302      	addmi	r3, #2
 8009320:	6033      	strmi	r3, [r6, #0]
 8009322:	6825      	ldr	r5, [r4, #0]
 8009324:	f015 0506 	ands.w	r5, r5, #6
 8009328:	d106      	bne.n	8009338 <_printf_common+0x48>
 800932a:	f104 0a19 	add.w	sl, r4, #25
 800932e:	68e3      	ldr	r3, [r4, #12]
 8009330:	6832      	ldr	r2, [r6, #0]
 8009332:	1a9b      	subs	r3, r3, r2
 8009334:	42ab      	cmp	r3, r5
 8009336:	dc2b      	bgt.n	8009390 <_printf_common+0xa0>
 8009338:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800933c:	6822      	ldr	r2, [r4, #0]
 800933e:	3b00      	subs	r3, #0
 8009340:	bf18      	it	ne
 8009342:	2301      	movne	r3, #1
 8009344:	0692      	lsls	r2, r2, #26
 8009346:	d430      	bmi.n	80093aa <_printf_common+0xba>
 8009348:	4641      	mov	r1, r8
 800934a:	4638      	mov	r0, r7
 800934c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009350:	47c8      	blx	r9
 8009352:	3001      	adds	r0, #1
 8009354:	d023      	beq.n	800939e <_printf_common+0xae>
 8009356:	6823      	ldr	r3, [r4, #0]
 8009358:	6922      	ldr	r2, [r4, #16]
 800935a:	f003 0306 	and.w	r3, r3, #6
 800935e:	2b04      	cmp	r3, #4
 8009360:	bf14      	ite	ne
 8009362:	2500      	movne	r5, #0
 8009364:	6833      	ldreq	r3, [r6, #0]
 8009366:	f04f 0600 	mov.w	r6, #0
 800936a:	bf08      	it	eq
 800936c:	68e5      	ldreq	r5, [r4, #12]
 800936e:	f104 041a 	add.w	r4, r4, #26
 8009372:	bf08      	it	eq
 8009374:	1aed      	subeq	r5, r5, r3
 8009376:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800937a:	bf08      	it	eq
 800937c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009380:	4293      	cmp	r3, r2
 8009382:	bfc4      	itt	gt
 8009384:	1a9b      	subgt	r3, r3, r2
 8009386:	18ed      	addgt	r5, r5, r3
 8009388:	42b5      	cmp	r5, r6
 800938a:	d11a      	bne.n	80093c2 <_printf_common+0xd2>
 800938c:	2000      	movs	r0, #0
 800938e:	e008      	b.n	80093a2 <_printf_common+0xb2>
 8009390:	2301      	movs	r3, #1
 8009392:	4652      	mov	r2, sl
 8009394:	4641      	mov	r1, r8
 8009396:	4638      	mov	r0, r7
 8009398:	47c8      	blx	r9
 800939a:	3001      	adds	r0, #1
 800939c:	d103      	bne.n	80093a6 <_printf_common+0xb6>
 800939e:	f04f 30ff 	mov.w	r0, #4294967295
 80093a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093a6:	3501      	adds	r5, #1
 80093a8:	e7c1      	b.n	800932e <_printf_common+0x3e>
 80093aa:	2030      	movs	r0, #48	@ 0x30
 80093ac:	18e1      	adds	r1, r4, r3
 80093ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80093b2:	1c5a      	adds	r2, r3, #1
 80093b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80093b8:	4422      	add	r2, r4
 80093ba:	3302      	adds	r3, #2
 80093bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80093c0:	e7c2      	b.n	8009348 <_printf_common+0x58>
 80093c2:	2301      	movs	r3, #1
 80093c4:	4622      	mov	r2, r4
 80093c6:	4641      	mov	r1, r8
 80093c8:	4638      	mov	r0, r7
 80093ca:	47c8      	blx	r9
 80093cc:	3001      	adds	r0, #1
 80093ce:	d0e6      	beq.n	800939e <_printf_common+0xae>
 80093d0:	3601      	adds	r6, #1
 80093d2:	e7d9      	b.n	8009388 <_printf_common+0x98>

080093d4 <_printf_i>:
 80093d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093d8:	7e0f      	ldrb	r7, [r1, #24]
 80093da:	4691      	mov	r9, r2
 80093dc:	2f78      	cmp	r7, #120	@ 0x78
 80093de:	4680      	mov	r8, r0
 80093e0:	460c      	mov	r4, r1
 80093e2:	469a      	mov	sl, r3
 80093e4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80093e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80093ea:	d807      	bhi.n	80093fc <_printf_i+0x28>
 80093ec:	2f62      	cmp	r7, #98	@ 0x62
 80093ee:	d80a      	bhi.n	8009406 <_printf_i+0x32>
 80093f0:	2f00      	cmp	r7, #0
 80093f2:	f000 80d1 	beq.w	8009598 <_printf_i+0x1c4>
 80093f6:	2f58      	cmp	r7, #88	@ 0x58
 80093f8:	f000 80b8 	beq.w	800956c <_printf_i+0x198>
 80093fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009400:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009404:	e03a      	b.n	800947c <_printf_i+0xa8>
 8009406:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800940a:	2b15      	cmp	r3, #21
 800940c:	d8f6      	bhi.n	80093fc <_printf_i+0x28>
 800940e:	a101      	add	r1, pc, #4	@ (adr r1, 8009414 <_printf_i+0x40>)
 8009410:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009414:	0800946d 	.word	0x0800946d
 8009418:	08009481 	.word	0x08009481
 800941c:	080093fd 	.word	0x080093fd
 8009420:	080093fd 	.word	0x080093fd
 8009424:	080093fd 	.word	0x080093fd
 8009428:	080093fd 	.word	0x080093fd
 800942c:	08009481 	.word	0x08009481
 8009430:	080093fd 	.word	0x080093fd
 8009434:	080093fd 	.word	0x080093fd
 8009438:	080093fd 	.word	0x080093fd
 800943c:	080093fd 	.word	0x080093fd
 8009440:	0800957f 	.word	0x0800957f
 8009444:	080094ab 	.word	0x080094ab
 8009448:	08009539 	.word	0x08009539
 800944c:	080093fd 	.word	0x080093fd
 8009450:	080093fd 	.word	0x080093fd
 8009454:	080095a1 	.word	0x080095a1
 8009458:	080093fd 	.word	0x080093fd
 800945c:	080094ab 	.word	0x080094ab
 8009460:	080093fd 	.word	0x080093fd
 8009464:	080093fd 	.word	0x080093fd
 8009468:	08009541 	.word	0x08009541
 800946c:	6833      	ldr	r3, [r6, #0]
 800946e:	1d1a      	adds	r2, r3, #4
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	6032      	str	r2, [r6, #0]
 8009474:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009478:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800947c:	2301      	movs	r3, #1
 800947e:	e09c      	b.n	80095ba <_printf_i+0x1e6>
 8009480:	6833      	ldr	r3, [r6, #0]
 8009482:	6820      	ldr	r0, [r4, #0]
 8009484:	1d19      	adds	r1, r3, #4
 8009486:	6031      	str	r1, [r6, #0]
 8009488:	0606      	lsls	r6, r0, #24
 800948a:	d501      	bpl.n	8009490 <_printf_i+0xbc>
 800948c:	681d      	ldr	r5, [r3, #0]
 800948e:	e003      	b.n	8009498 <_printf_i+0xc4>
 8009490:	0645      	lsls	r5, r0, #25
 8009492:	d5fb      	bpl.n	800948c <_printf_i+0xb8>
 8009494:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009498:	2d00      	cmp	r5, #0
 800949a:	da03      	bge.n	80094a4 <_printf_i+0xd0>
 800949c:	232d      	movs	r3, #45	@ 0x2d
 800949e:	426d      	negs	r5, r5
 80094a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094a4:	230a      	movs	r3, #10
 80094a6:	4858      	ldr	r0, [pc, #352]	@ (8009608 <_printf_i+0x234>)
 80094a8:	e011      	b.n	80094ce <_printf_i+0xfa>
 80094aa:	6821      	ldr	r1, [r4, #0]
 80094ac:	6833      	ldr	r3, [r6, #0]
 80094ae:	0608      	lsls	r0, r1, #24
 80094b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80094b4:	d402      	bmi.n	80094bc <_printf_i+0xe8>
 80094b6:	0649      	lsls	r1, r1, #25
 80094b8:	bf48      	it	mi
 80094ba:	b2ad      	uxthmi	r5, r5
 80094bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80094be:	6033      	str	r3, [r6, #0]
 80094c0:	bf14      	ite	ne
 80094c2:	230a      	movne	r3, #10
 80094c4:	2308      	moveq	r3, #8
 80094c6:	4850      	ldr	r0, [pc, #320]	@ (8009608 <_printf_i+0x234>)
 80094c8:	2100      	movs	r1, #0
 80094ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80094ce:	6866      	ldr	r6, [r4, #4]
 80094d0:	2e00      	cmp	r6, #0
 80094d2:	60a6      	str	r6, [r4, #8]
 80094d4:	db05      	blt.n	80094e2 <_printf_i+0x10e>
 80094d6:	6821      	ldr	r1, [r4, #0]
 80094d8:	432e      	orrs	r6, r5
 80094da:	f021 0104 	bic.w	r1, r1, #4
 80094de:	6021      	str	r1, [r4, #0]
 80094e0:	d04b      	beq.n	800957a <_printf_i+0x1a6>
 80094e2:	4616      	mov	r6, r2
 80094e4:	fbb5 f1f3 	udiv	r1, r5, r3
 80094e8:	fb03 5711 	mls	r7, r3, r1, r5
 80094ec:	5dc7      	ldrb	r7, [r0, r7]
 80094ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80094f2:	462f      	mov	r7, r5
 80094f4:	42bb      	cmp	r3, r7
 80094f6:	460d      	mov	r5, r1
 80094f8:	d9f4      	bls.n	80094e4 <_printf_i+0x110>
 80094fa:	2b08      	cmp	r3, #8
 80094fc:	d10b      	bne.n	8009516 <_printf_i+0x142>
 80094fe:	6823      	ldr	r3, [r4, #0]
 8009500:	07df      	lsls	r7, r3, #31
 8009502:	d508      	bpl.n	8009516 <_printf_i+0x142>
 8009504:	6923      	ldr	r3, [r4, #16]
 8009506:	6861      	ldr	r1, [r4, #4]
 8009508:	4299      	cmp	r1, r3
 800950a:	bfde      	ittt	le
 800950c:	2330      	movle	r3, #48	@ 0x30
 800950e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009512:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009516:	1b92      	subs	r2, r2, r6
 8009518:	6122      	str	r2, [r4, #16]
 800951a:	464b      	mov	r3, r9
 800951c:	4621      	mov	r1, r4
 800951e:	4640      	mov	r0, r8
 8009520:	f8cd a000 	str.w	sl, [sp]
 8009524:	aa03      	add	r2, sp, #12
 8009526:	f7ff fee3 	bl	80092f0 <_printf_common>
 800952a:	3001      	adds	r0, #1
 800952c:	d14a      	bne.n	80095c4 <_printf_i+0x1f0>
 800952e:	f04f 30ff 	mov.w	r0, #4294967295
 8009532:	b004      	add	sp, #16
 8009534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009538:	6823      	ldr	r3, [r4, #0]
 800953a:	f043 0320 	orr.w	r3, r3, #32
 800953e:	6023      	str	r3, [r4, #0]
 8009540:	2778      	movs	r7, #120	@ 0x78
 8009542:	4832      	ldr	r0, [pc, #200]	@ (800960c <_printf_i+0x238>)
 8009544:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009548:	6823      	ldr	r3, [r4, #0]
 800954a:	6831      	ldr	r1, [r6, #0]
 800954c:	061f      	lsls	r7, r3, #24
 800954e:	f851 5b04 	ldr.w	r5, [r1], #4
 8009552:	d402      	bmi.n	800955a <_printf_i+0x186>
 8009554:	065f      	lsls	r7, r3, #25
 8009556:	bf48      	it	mi
 8009558:	b2ad      	uxthmi	r5, r5
 800955a:	6031      	str	r1, [r6, #0]
 800955c:	07d9      	lsls	r1, r3, #31
 800955e:	bf44      	itt	mi
 8009560:	f043 0320 	orrmi.w	r3, r3, #32
 8009564:	6023      	strmi	r3, [r4, #0]
 8009566:	b11d      	cbz	r5, 8009570 <_printf_i+0x19c>
 8009568:	2310      	movs	r3, #16
 800956a:	e7ad      	b.n	80094c8 <_printf_i+0xf4>
 800956c:	4826      	ldr	r0, [pc, #152]	@ (8009608 <_printf_i+0x234>)
 800956e:	e7e9      	b.n	8009544 <_printf_i+0x170>
 8009570:	6823      	ldr	r3, [r4, #0]
 8009572:	f023 0320 	bic.w	r3, r3, #32
 8009576:	6023      	str	r3, [r4, #0]
 8009578:	e7f6      	b.n	8009568 <_printf_i+0x194>
 800957a:	4616      	mov	r6, r2
 800957c:	e7bd      	b.n	80094fa <_printf_i+0x126>
 800957e:	6833      	ldr	r3, [r6, #0]
 8009580:	6825      	ldr	r5, [r4, #0]
 8009582:	1d18      	adds	r0, r3, #4
 8009584:	6961      	ldr	r1, [r4, #20]
 8009586:	6030      	str	r0, [r6, #0]
 8009588:	062e      	lsls	r6, r5, #24
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	d501      	bpl.n	8009592 <_printf_i+0x1be>
 800958e:	6019      	str	r1, [r3, #0]
 8009590:	e002      	b.n	8009598 <_printf_i+0x1c4>
 8009592:	0668      	lsls	r0, r5, #25
 8009594:	d5fb      	bpl.n	800958e <_printf_i+0x1ba>
 8009596:	8019      	strh	r1, [r3, #0]
 8009598:	2300      	movs	r3, #0
 800959a:	4616      	mov	r6, r2
 800959c:	6123      	str	r3, [r4, #16]
 800959e:	e7bc      	b.n	800951a <_printf_i+0x146>
 80095a0:	6833      	ldr	r3, [r6, #0]
 80095a2:	2100      	movs	r1, #0
 80095a4:	1d1a      	adds	r2, r3, #4
 80095a6:	6032      	str	r2, [r6, #0]
 80095a8:	681e      	ldr	r6, [r3, #0]
 80095aa:	6862      	ldr	r2, [r4, #4]
 80095ac:	4630      	mov	r0, r6
 80095ae:	f000 f859 	bl	8009664 <memchr>
 80095b2:	b108      	cbz	r0, 80095b8 <_printf_i+0x1e4>
 80095b4:	1b80      	subs	r0, r0, r6
 80095b6:	6060      	str	r0, [r4, #4]
 80095b8:	6863      	ldr	r3, [r4, #4]
 80095ba:	6123      	str	r3, [r4, #16]
 80095bc:	2300      	movs	r3, #0
 80095be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095c2:	e7aa      	b.n	800951a <_printf_i+0x146>
 80095c4:	4632      	mov	r2, r6
 80095c6:	4649      	mov	r1, r9
 80095c8:	4640      	mov	r0, r8
 80095ca:	6923      	ldr	r3, [r4, #16]
 80095cc:	47d0      	blx	sl
 80095ce:	3001      	adds	r0, #1
 80095d0:	d0ad      	beq.n	800952e <_printf_i+0x15a>
 80095d2:	6823      	ldr	r3, [r4, #0]
 80095d4:	079b      	lsls	r3, r3, #30
 80095d6:	d413      	bmi.n	8009600 <_printf_i+0x22c>
 80095d8:	68e0      	ldr	r0, [r4, #12]
 80095da:	9b03      	ldr	r3, [sp, #12]
 80095dc:	4298      	cmp	r0, r3
 80095de:	bfb8      	it	lt
 80095e0:	4618      	movlt	r0, r3
 80095e2:	e7a6      	b.n	8009532 <_printf_i+0x15e>
 80095e4:	2301      	movs	r3, #1
 80095e6:	4632      	mov	r2, r6
 80095e8:	4649      	mov	r1, r9
 80095ea:	4640      	mov	r0, r8
 80095ec:	47d0      	blx	sl
 80095ee:	3001      	adds	r0, #1
 80095f0:	d09d      	beq.n	800952e <_printf_i+0x15a>
 80095f2:	3501      	adds	r5, #1
 80095f4:	68e3      	ldr	r3, [r4, #12]
 80095f6:	9903      	ldr	r1, [sp, #12]
 80095f8:	1a5b      	subs	r3, r3, r1
 80095fa:	42ab      	cmp	r3, r5
 80095fc:	dcf2      	bgt.n	80095e4 <_printf_i+0x210>
 80095fe:	e7eb      	b.n	80095d8 <_printf_i+0x204>
 8009600:	2500      	movs	r5, #0
 8009602:	f104 0619 	add.w	r6, r4, #25
 8009606:	e7f5      	b.n	80095f4 <_printf_i+0x220>
 8009608:	0800a163 	.word	0x0800a163
 800960c:	0800a174 	.word	0x0800a174

08009610 <memmove>:
 8009610:	4288      	cmp	r0, r1
 8009612:	b510      	push	{r4, lr}
 8009614:	eb01 0402 	add.w	r4, r1, r2
 8009618:	d902      	bls.n	8009620 <memmove+0x10>
 800961a:	4284      	cmp	r4, r0
 800961c:	4623      	mov	r3, r4
 800961e:	d807      	bhi.n	8009630 <memmove+0x20>
 8009620:	1e43      	subs	r3, r0, #1
 8009622:	42a1      	cmp	r1, r4
 8009624:	d008      	beq.n	8009638 <memmove+0x28>
 8009626:	f811 2b01 	ldrb.w	r2, [r1], #1
 800962a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800962e:	e7f8      	b.n	8009622 <memmove+0x12>
 8009630:	4601      	mov	r1, r0
 8009632:	4402      	add	r2, r0
 8009634:	428a      	cmp	r2, r1
 8009636:	d100      	bne.n	800963a <memmove+0x2a>
 8009638:	bd10      	pop	{r4, pc}
 800963a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800963e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009642:	e7f7      	b.n	8009634 <memmove+0x24>

08009644 <_sbrk_r>:
 8009644:	b538      	push	{r3, r4, r5, lr}
 8009646:	2300      	movs	r3, #0
 8009648:	4d05      	ldr	r5, [pc, #20]	@ (8009660 <_sbrk_r+0x1c>)
 800964a:	4604      	mov	r4, r0
 800964c:	4608      	mov	r0, r1
 800964e:	602b      	str	r3, [r5, #0]
 8009650:	f7f8 f962 	bl	8001918 <_sbrk>
 8009654:	1c43      	adds	r3, r0, #1
 8009656:	d102      	bne.n	800965e <_sbrk_r+0x1a>
 8009658:	682b      	ldr	r3, [r5, #0]
 800965a:	b103      	cbz	r3, 800965e <_sbrk_r+0x1a>
 800965c:	6023      	str	r3, [r4, #0]
 800965e:	bd38      	pop	{r3, r4, r5, pc}
 8009660:	20003868 	.word	0x20003868

08009664 <memchr>:
 8009664:	4603      	mov	r3, r0
 8009666:	b510      	push	{r4, lr}
 8009668:	b2c9      	uxtb	r1, r1
 800966a:	4402      	add	r2, r0
 800966c:	4293      	cmp	r3, r2
 800966e:	4618      	mov	r0, r3
 8009670:	d101      	bne.n	8009676 <memchr+0x12>
 8009672:	2000      	movs	r0, #0
 8009674:	e003      	b.n	800967e <memchr+0x1a>
 8009676:	7804      	ldrb	r4, [r0, #0]
 8009678:	3301      	adds	r3, #1
 800967a:	428c      	cmp	r4, r1
 800967c:	d1f6      	bne.n	800966c <memchr+0x8>
 800967e:	bd10      	pop	{r4, pc}

08009680 <_realloc_r>:
 8009680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009684:	4607      	mov	r7, r0
 8009686:	4614      	mov	r4, r2
 8009688:	460d      	mov	r5, r1
 800968a:	b921      	cbnz	r1, 8009696 <_realloc_r+0x16>
 800968c:	4611      	mov	r1, r2
 800968e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009692:	f7ff bc49 	b.w	8008f28 <_malloc_r>
 8009696:	b92a      	cbnz	r2, 80096a4 <_realloc_r+0x24>
 8009698:	f7ff fbdc 	bl	8008e54 <_free_r>
 800969c:	4625      	mov	r5, r4
 800969e:	4628      	mov	r0, r5
 80096a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096a4:	f000 f81a 	bl	80096dc <_malloc_usable_size_r>
 80096a8:	4284      	cmp	r4, r0
 80096aa:	4606      	mov	r6, r0
 80096ac:	d802      	bhi.n	80096b4 <_realloc_r+0x34>
 80096ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80096b2:	d8f4      	bhi.n	800969e <_realloc_r+0x1e>
 80096b4:	4621      	mov	r1, r4
 80096b6:	4638      	mov	r0, r7
 80096b8:	f7ff fc36 	bl	8008f28 <_malloc_r>
 80096bc:	4680      	mov	r8, r0
 80096be:	b908      	cbnz	r0, 80096c4 <_realloc_r+0x44>
 80096c0:	4645      	mov	r5, r8
 80096c2:	e7ec      	b.n	800969e <_realloc_r+0x1e>
 80096c4:	42b4      	cmp	r4, r6
 80096c6:	4622      	mov	r2, r4
 80096c8:	4629      	mov	r1, r5
 80096ca:	bf28      	it	cs
 80096cc:	4632      	movcs	r2, r6
 80096ce:	f7ff fbb3 	bl	8008e38 <memcpy>
 80096d2:	4629      	mov	r1, r5
 80096d4:	4638      	mov	r0, r7
 80096d6:	f7ff fbbd 	bl	8008e54 <_free_r>
 80096da:	e7f1      	b.n	80096c0 <_realloc_r+0x40>

080096dc <_malloc_usable_size_r>:
 80096dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096e0:	1f18      	subs	r0, r3, #4
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	bfbc      	itt	lt
 80096e6:	580b      	ldrlt	r3, [r1, r0]
 80096e8:	18c0      	addlt	r0, r0, r3
 80096ea:	4770      	bx	lr

080096ec <_init>:
 80096ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ee:	bf00      	nop
 80096f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096f2:	bc08      	pop	{r3}
 80096f4:	469e      	mov	lr, r3
 80096f6:	4770      	bx	lr

080096f8 <_fini>:
 80096f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096fa:	bf00      	nop
 80096fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096fe:	bc08      	pop	{r3}
 8009700:	469e      	mov	lr, r3
 8009702:	4770      	bx	lr
