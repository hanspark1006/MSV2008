
Frontend.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e44  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000874  08008f54  08008f54  00009f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097c8  080097c8  0000b1a8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080097c8  080097c8  0000a7c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097d0  080097d0  0000b1a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097d0  080097d0  0000a7d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080097d4  080097d4  0000a7d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001a8  20000000  080097d8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ec8  200001a8  08009980  0000b1a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002070  08009980  0000c070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019c63  00000000  00000000  0000b1d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a19  00000000  00000000  00024e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001710  00000000  00000000  00029850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011ba  00000000  00000000  0002af60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cc90  00000000  00000000  0002c11a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d0ee  00000000  00000000  00048daa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096c79  00000000  00000000  00065e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fcb11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062c0  00000000  00000000  000fcb54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  00102e14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001a8 	.word	0x200001a8
 800012c:	00000000 	.word	0x00000000
 8000130:	08008f3c 	.word	0x08008f3c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ac 	.word	0x200001ac
 800014c:	08008f3c 	.word	0x08008f3c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <key_check>:

/* Private function prototypes -----------------------------------------------*/
//static void AppsTask(void const * argument);
/* Private functions ---------------------------------------------------------*/
uint8_t key_check(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
	uint8_t read_key = 0;
 8000166:	2300      	movs	r3, #0
 8000168:	71fb      	strb	r3, [r7, #7]

	if(HAL_GPIO_ReadPin(ENTER_SW_GPIO_Port, ENTER_SW_Pin) == GPIO_PIN_RESET){
 800016a:	2101      	movs	r1, #1
 800016c:	4817      	ldr	r0, [pc, #92]	@ (80001cc <key_check+0x6c>)
 800016e:	f003 feb7 	bl	8003ee0 <HAL_GPIO_ReadPin>
 8000172:	4603      	mov	r3, r0
 8000174:	2b00      	cmp	r3, #0
 8000176:	d103      	bne.n	8000180 <key_check+0x20>
		//LOG_INF("Enter\r\n");
		read_key |= KEY_ENTER_PIN;
 8000178:	79fb      	ldrb	r3, [r7, #7]
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	71fb      	strb	r3, [r7, #7]
	}
	if(HAL_GPIO_ReadPin(UP_SW_GPIO_Port, UP_SW_Pin) == GPIO_PIN_RESET){
 8000180:	2180      	movs	r1, #128	@ 0x80
 8000182:	4813      	ldr	r0, [pc, #76]	@ (80001d0 <key_check+0x70>)
 8000184:	f003 feac 	bl	8003ee0 <HAL_GPIO_ReadPin>
 8000188:	4603      	mov	r3, r0
 800018a:	2b00      	cmp	r3, #0
 800018c:	d103      	bne.n	8000196 <key_check+0x36>
		//LOG_INF("UP\r\n");
		read_key |= KEY_UP_PIN;
 800018e:	79fb      	ldrb	r3, [r7, #7]
 8000190:	f043 0302 	orr.w	r3, r3, #2
 8000194:	71fb      	strb	r3, [r7, #7]
	}
	if(HAL_GPIO_ReadPin(DOWN_SW_GPIO_Port, DOWN_SW_Pin) == GPIO_PIN_RESET){
 8000196:	2140      	movs	r1, #64	@ 0x40
 8000198:	480d      	ldr	r0, [pc, #52]	@ (80001d0 <key_check+0x70>)
 800019a:	f003 fea1 	bl	8003ee0 <HAL_GPIO_ReadPin>
 800019e:	4603      	mov	r3, r0
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d103      	bne.n	80001ac <key_check+0x4c>
		//LOG_INF("DOWN\r\n");
		read_key |= KEY_DOWN_PIN;
 80001a4:	79fb      	ldrb	r3, [r7, #7]
 80001a6:	f043 0304 	orr.w	r3, r3, #4
 80001aa:	71fb      	strb	r3, [r7, #7]
	}
	if(HAL_GPIO_ReadPin(MODE_SW_GPIO_Port, MODE_SW_Pin) == GPIO_PIN_RESET){
 80001ac:	2102      	movs	r1, #2
 80001ae:	4807      	ldr	r0, [pc, #28]	@ (80001cc <key_check+0x6c>)
 80001b0:	f003 fe96 	bl	8003ee0 <HAL_GPIO_ReadPin>
 80001b4:	4603      	mov	r3, r0
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d103      	bne.n	80001c2 <key_check+0x62>
		//LOG_INF("MODE\r\n");
		read_key |= KEY_MODE_PIN;
 80001ba:	79fb      	ldrb	r3, [r7, #7]
 80001bc:	f043 0308 	orr.w	r3, r3, #8
 80001c0:	71fb      	strb	r3, [r7, #7]
	}
	return read_key;
 80001c2:	79fb      	ldrb	r3, [r7, #7]
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	40010c00 	.word	0x40010c00
 80001d0:	40010800 	.word	0x40010800

080001d4 <btn_tmr_callback>:

static uint8_t proc_blink = 0;

void btn_tmr_callback(void const *argument)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	if(m_cfg.btn_status == eBTN_PRESS){
 80001dc:	4b0b      	ldr	r3, [pc, #44]	@ (800020c <btn_tmr_callback+0x38>)
 80001de:	789b      	ldrb	r3, [r3, #2]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d104      	bne.n	80001ee <btn_tmr_callback+0x1a>
		m_cfg.key_tick++;
 80001e4:	4b09      	ldr	r3, [pc, #36]	@ (800020c <btn_tmr_callback+0x38>)
 80001e6:	689b      	ldr	r3, [r3, #8]
 80001e8:	3301      	adds	r3, #1
 80001ea:	4a08      	ldr	r2, [pc, #32]	@ (800020c <btn_tmr_callback+0x38>)
 80001ec:	6093      	str	r3, [r2, #8]
	}

	if(m_cfg.blink_enable){
 80001ee:	4b07      	ldr	r3, [pc, #28]	@ (800020c <btn_tmr_callback+0x38>)
 80001f0:	7b1b      	ldrb	r3, [r3, #12]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d005      	beq.n	8000202 <btn_tmr_callback+0x2e>
		m_cfg.blink_tick++;
 80001f6:	4b05      	ldr	r3, [pc, #20]	@ (800020c <btn_tmr_callback+0x38>)
 80001f8:	89db      	ldrh	r3, [r3, #14]
 80001fa:	3301      	adds	r3, #1
 80001fc:	b29a      	uxth	r2, r3
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <btn_tmr_callback+0x38>)
 8000200:	81da      	strh	r2, [r3, #14]
	}
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000000 	.word	0x20000000

08000210 <set_skip_key>:

void set_skip_key(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
	m_cfg.key_tick = 0;
 8000214:	4b06      	ldr	r3, [pc, #24]	@ (8000230 <set_skip_key+0x20>)
 8000216:	2200      	movs	r2, #0
 8000218:	609a      	str	r2, [r3, #8]
	m_cfg.btn_status = eBTN_RELEASE;
 800021a:	4b05      	ldr	r3, [pc, #20]	@ (8000230 <set_skip_key+0x20>)
 800021c:	2201      	movs	r2, #1
 800021e:	709a      	strb	r2, [r3, #2]
	m_cfg.skip_press = 1;
 8000220:	4b03      	ldr	r3, [pc, #12]	@ (8000230 <set_skip_key+0x20>)
 8000222:	2201      	movs	r2, #1
 8000224:	715a      	strb	r2, [r3, #5]
	LOG_DBG("Set skip Key");
 8000226:	4803      	ldr	r0, [pc, #12]	@ (8000234 <set_skip_key+0x24>)
 8000228:	f000 fcb0 	bl	8000b8c <Printf>
}
 800022c:	bf00      	nop
 800022e:	bd80      	pop	{r7, pc}
 8000230:	20000000 	.word	0x20000000
 8000234:	08008f54 	.word	0x08008f54

08000238 <key_process>:

Key_t key_process(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
	uint8_t read_key;
	static Key_t multi_key=eKey_Idle, get_key = eKey_Idle,  old_key = eKey_Idle, release_old = eKey_Idle;
	Key_t press_key = eKey_Idle;
 800023e:	2300      	movs	r3, #0
 8000240:	71fb      	strb	r3, [r7, #7]

	read_key = key_check();
 8000242:	f7ff ff8d 	bl	8000160 <key_check>
 8000246:	4603      	mov	r3, r0
 8000248:	71bb      	strb	r3, [r7, #6]
	if(read_key & 0x0F){ // down key
 800024a:	79bb      	ldrb	r3, [r7, #6]
 800024c:	f003 030f 	and.w	r3, r3, #15
 8000250:	2b00      	cmp	r3, #0
 8000252:	d07f      	beq.n	8000354 <key_process+0x11c>
		//LOG_DBG("Read key[%s] skip key[%d]", key_id_2_str(read_key), m_cfg.skip_press);
		if(m_cfg.skip_press){
 8000254:	4b59      	ldr	r3, [pc, #356]	@ (80003bc <key_process+0x184>)
 8000256:	795b      	ldrb	r3, [r3, #5]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <key_process+0x28>
			return press_key;
 800025c:	79fb      	ldrb	r3, [r7, #7]
 800025e:	e0a9      	b.n	80003b4 <key_process+0x17c>
		}
		m_cfg.btn_status = eBTN_PRESS;
 8000260:	4b56      	ldr	r3, [pc, #344]	@ (80003bc <key_process+0x184>)
 8000262:	2200      	movs	r2, #0
 8000264:	709a      	strb	r2, [r3, #2]
		switch(read_key){
 8000266:	79bb      	ldrb	r3, [r7, #6]
 8000268:	3b03      	subs	r3, #3
 800026a:	2b09      	cmp	r3, #9
 800026c:	bf8c      	ite	hi
 800026e:	2201      	movhi	r2, #1
 8000270:	2200      	movls	r2, #0
 8000272:	b2d2      	uxtb	r2, r2
 8000274:	2a00      	cmp	r2, #0
 8000276:	d110      	bne.n	800029a <key_process+0x62>
 8000278:	f240 22cd 	movw	r2, #717	@ 0x2cd
 800027c:	fa22 f303 	lsr.w	r3, r2, r3
 8000280:	f003 0301 	and.w	r3, r3, #1
 8000284:	2b00      	cmp	r3, #0
 8000286:	bf14      	ite	ne
 8000288:	2301      	movne	r3, #1
 800028a:	2300      	moveq	r3, #0
 800028c:	b2db      	uxtb	r3, r3
 800028e:	2b00      	cmp	r3, #0
 8000290:	d003      	beq.n	800029a <key_process+0x62>
			case KEY_CUR_DOWN_PIN:
			case KEY_FACTORY_PIN:
			case KEY_USER_PIN:
			case KEY_VERSION_PIN:
			case KEY_CHSEL_PIN:
				multi_key = read_key;
 8000292:	4a4b      	ldr	r2, [pc, #300]	@ (80003c0 <key_process+0x188>)
 8000294:	79bb      	ldrb	r3, [r7, #6]
 8000296:	7013      	strb	r3, [r2, #0]
				break;
 8000298:	e003      	b.n	80002a2 <key_process+0x6a>
			default:
				get_key = read_key;
 800029a:	4a4a      	ldr	r2, [pc, #296]	@ (80003c4 <key_process+0x18c>)
 800029c:	79bb      	ldrb	r3, [r7, #6]
 800029e:	7013      	strb	r3, [r2, #0]
				break;
 80002a0:	bf00      	nop
		}
		if(old_key != read_key){
 80002a2:	4b49      	ldr	r3, [pc, #292]	@ (80003c8 <key_process+0x190>)
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	79ba      	ldrb	r2, [r7, #6]
 80002a8:	429a      	cmp	r2, r3
 80002aa:	d002      	beq.n	80002b2 <key_process+0x7a>
			//LOG_DBG("tick[%d] %s", m_cfg.key_tick, key_id_2_str(read_key));
			old_key = read_key;
 80002ac:	4a46      	ldr	r2, [pc, #280]	@ (80003c8 <key_process+0x190>)
 80002ae:	79bb      	ldrb	r3, [r7, #6]
 80002b0:	7013      	strb	r3, [r2, #0]
		}
		if(get_key == eKey_Mode){
 80002b2:	4b44      	ldr	r3, [pc, #272]	@ (80003c4 <key_process+0x18c>)
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	2b08      	cmp	r3, #8
 80002b8:	d13a      	bne.n	8000330 <key_process+0xf8>
			if((m_cfg.setting_mode) && (m_cfg.key_tick > TIMER_50_MSEC)){
 80002ba:	4b40      	ldr	r3, [pc, #256]	@ (80003bc <key_process+0x184>)
 80002bc:	78db      	ldrb	r3, [r3, #3]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d014      	beq.n	80002ec <key_process+0xb4>
 80002c2:	4b3e      	ldr	r3, [pc, #248]	@ (80003bc <key_process+0x184>)
 80002c4:	689b      	ldr	r3, [r3, #8]
 80002c6:	2b32      	cmp	r3, #50	@ 0x32
 80002c8:	d910      	bls.n	80002ec <key_process+0xb4>
				if(multi_key != eKey_Idle){
 80002ca:	4b3d      	ldr	r3, [pc, #244]	@ (80003c0 <key_process+0x188>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d002      	beq.n	80002d8 <key_process+0xa0>
					m_cfg.mul_press = 1;
 80002d2:	4b3a      	ldr	r3, [pc, #232]	@ (80003bc <key_process+0x184>)
 80002d4:	2201      	movs	r2, #1
 80002d6:	711a      	strb	r2, [r3, #4]
				}
				press_key = multi_key;
 80002d8:	4b39      	ldr	r3, [pc, #228]	@ (80003c0 <key_process+0x188>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	71fb      	strb	r3, [r7, #7]
				multi_key = eKey_Idle;
 80002de:	4b38      	ldr	r3, [pc, #224]	@ (80003c0 <key_process+0x188>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	701a      	strb	r2, [r3, #0]
				m_cfg.key_tick = 0;
 80002e4:	4b35      	ldr	r3, [pc, #212]	@ (80003bc <key_process+0x184>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	e01f      	b.n	800032c <key_process+0xf4>
			}else if(m_cfg.key_tick >= TIMER_2_SEC){
 80002ec:	4b33      	ldr	r3, [pc, #204]	@ (80003bc <key_process+0x184>)
 80002ee:	689b      	ldr	r3, [r3, #8]
 80002f0:	2bc7      	cmp	r3, #199	@ 0xc7
 80002f2:	d919      	bls.n	8000328 <key_process+0xf0>
				if((m_cfg.setting_mode == 0) && (m_cfg.remote_ctrl == 0)){
 80002f4:	4b31      	ldr	r3, [pc, #196]	@ (80003bc <key_process+0x184>)
 80002f6:	78db      	ldrb	r3, [r3, #3]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d10c      	bne.n	8000316 <key_process+0xde>
 80002fc:	4b2f      	ldr	r3, [pc, #188]	@ (80003bc <key_process+0x184>)
 80002fe:	7c1b      	ldrb	r3, [r3, #16]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d108      	bne.n	8000316 <key_process+0xde>
					press_key = eKey_SetMode;
 8000304:	2310      	movs	r3, #16
 8000306:	71fb      	strb	r3, [r7, #7]
					m_cfg.setting_mode = 1;
 8000308:	4b2c      	ldr	r3, [pc, #176]	@ (80003bc <key_process+0x184>)
 800030a:	2201      	movs	r2, #1
 800030c:	70da      	strb	r2, [r3, #3]
					m_cfg.blink_tick = 0;
 800030e:	4b2b      	ldr	r3, [pc, #172]	@ (80003bc <key_process+0x184>)
 8000310:	2200      	movs	r2, #0
 8000312:	81da      	strh	r2, [r3, #14]
 8000314:	e005      	b.n	8000322 <key_process+0xea>
				}else if(m_cfg.remote_ctrl){
 8000316:	4b29      	ldr	r3, [pc, #164]	@ (80003bc <key_process+0x184>)
 8000318:	7c1b      	ldrb	r3, [r3, #16]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <key_process+0xea>
					press_key = eKey_ExitRemote;
 800031e:	2320      	movs	r3, #32
 8000320:	71fb      	strb	r3, [r7, #7]
				}
				//LOG_DBG("1.tick[%d] %s", m_cfg.key_tick, key_id_2_str(press_key));
				set_skip_key();
 8000322:	f7ff ff75 	bl	8000210 <set_skip_key>
 8000326:	e001      	b.n	800032c <key_process+0xf4>
			}else{
				return eKey_Idle;
 8000328:	2300      	movs	r3, #0
 800032a:	e043      	b.n	80003b4 <key_process+0x17c>
			}

			return press_key;
 800032c:	79fb      	ldrb	r3, [r7, #7]
 800032e:	e041      	b.n	80003b4 <key_process+0x17c>
		}

		if((multi_key!=eKey_Idle) && (m_cfg.key_tick > TIMER_5_SEC)){
 8000330:	4b23      	ldr	r3, [pc, #140]	@ (80003c0 <key_process+0x188>)
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d03c      	beq.n	80003b2 <key_process+0x17a>
 8000338:	4b20      	ldr	r3, [pc, #128]	@ (80003bc <key_process+0x184>)
 800033a:	689b      	ldr	r3, [r3, #8]
 800033c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000340:	d937      	bls.n	80003b2 <key_process+0x17a>
			press_key = multi_key;
 8000342:	4b1f      	ldr	r3, [pc, #124]	@ (80003c0 <key_process+0x188>)
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	71fb      	strb	r3, [r7, #7]
			multi_key = eKey_Idle;
 8000348:	4b1d      	ldr	r3, [pc, #116]	@ (80003c0 <key_process+0x188>)
 800034a:	2200      	movs	r2, #0
 800034c:	701a      	strb	r2, [r3, #0]
			//LOG_DBG("2.tick[%d] %s", m_cfg.key_tick, key_id_2_str(press_key));
			set_skip_key();
 800034e:	f7ff ff5f 	bl	8000210 <set_skip_key>
 8000352:	e02e      	b.n	80003b2 <key_process+0x17a>
		}
	}else{  // up key
		if((get_key != eKey_Idle)&& (release_old != get_key)){
 8000354:	4b1b      	ldr	r3, [pc, #108]	@ (80003c4 <key_process+0x18c>)
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d009      	beq.n	8000370 <key_process+0x138>
 800035c:	4b1b      	ldr	r3, [pc, #108]	@ (80003cc <key_process+0x194>)
 800035e:	781a      	ldrb	r2, [r3, #0]
 8000360:	4b18      	ldr	r3, [pc, #96]	@ (80003c4 <key_process+0x18c>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	429a      	cmp	r2, r3
 8000366:	d003      	beq.n	8000370 <key_process+0x138>
			//LOG_DBG("Release[%s] tick[%d]", key_id_2_str(get_key), m_cfg.key_tick);
			release_old = get_key;
 8000368:	4b16      	ldr	r3, [pc, #88]	@ (80003c4 <key_process+0x18c>)
 800036a:	781a      	ldrb	r2, [r3, #0]
 800036c:	4b17      	ldr	r3, [pc, #92]	@ (80003cc <key_process+0x194>)
 800036e:	701a      	strb	r2, [r3, #0]
		}
		m_cfg.btn_status = eBTN_RELEASE;
 8000370:	4b12      	ldr	r3, [pc, #72]	@ (80003bc <key_process+0x184>)
 8000372:	2201      	movs	r2, #1
 8000374:	709a      	strb	r2, [r3, #2]
		if((m_cfg.key_tick > TIMER_20_MSEC) && (m_cfg.key_tick < TIMER_50_MSEC)){
 8000376:	4b11      	ldr	r3, [pc, #68]	@ (80003bc <key_process+0x184>)
 8000378:	689b      	ldr	r3, [r3, #8]
 800037a:	2b14      	cmp	r3, #20
 800037c:	d90d      	bls.n	800039a <key_process+0x162>
 800037e:	4b0f      	ldr	r3, [pc, #60]	@ (80003bc <key_process+0x184>)
 8000380:	689b      	ldr	r3, [r3, #8]
 8000382:	2b31      	cmp	r3, #49	@ 0x31
 8000384:	d809      	bhi.n	800039a <key_process+0x162>
			if(m_cfg.mul_press == 0){
 8000386:	4b0d      	ldr	r3, [pc, #52]	@ (80003bc <key_process+0x184>)
 8000388:	791b      	ldrb	r3, [r3, #4]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d105      	bne.n	800039a <key_process+0x162>
				press_key = get_key;
 800038e:	4b0d      	ldr	r3, [pc, #52]	@ (80003c4 <key_process+0x18c>)
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	71fb      	strb	r3, [r7, #7]
				get_key = eKey_Idle;
 8000394:	4b0b      	ldr	r3, [pc, #44]	@ (80003c4 <key_process+0x18c>)
 8000396:	2200      	movs	r2, #0
 8000398:	701a      	strb	r2, [r3, #0]
			}
		}
		old_key = eKey_Idle;
 800039a:	4b0b      	ldr	r3, [pc, #44]	@ (80003c8 <key_process+0x190>)
 800039c:	2200      	movs	r2, #0
 800039e:	701a      	strb	r2, [r3, #0]
		m_cfg.skip_press = 0;
 80003a0:	4b06      	ldr	r3, [pc, #24]	@ (80003bc <key_process+0x184>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	715a      	strb	r2, [r3, #5]
		m_cfg.key_tick = 0;
 80003a6:	4b05      	ldr	r3, [pc, #20]	@ (80003bc <key_process+0x184>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	609a      	str	r2, [r3, #8]
		m_cfg.mul_press = 0;
 80003ac:	4b03      	ldr	r3, [pc, #12]	@ (80003bc <key_process+0x184>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	711a      	strb	r2, [r3, #4]
	}

	return press_key;
 80003b2:	79fb      	ldrb	r3, [r7, #7]
}
 80003b4:	4618      	mov	r0, r3
 80003b6:	3708      	adds	r7, #8
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	20000000 	.word	0x20000000
 80003c0:	200001c9 	.word	0x200001c9
 80003c4:	200001ca 	.word	0x200001ca
 80003c8:	200001cb 	.word	0x200001cb
 80003cc:	200001cc 	.word	0x200001cc

080003d0 <run_menu>:

void run_menu(Key_t input_key)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b084      	sub	sp, #16
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	4603      	mov	r3, r0
 80003d8:	71fb      	strb	r3, [r7, #7]
	ScreenID_t next_sc = eMAX_SCREEN_ID;
 80003da:	230f      	movs	r3, #15
 80003dc:	73fb      	strb	r3, [r7, #15]

	//LOG_DBG("Old SC[%d] Key[%x]", m_cfg.sc_id, input_key);
	if(m_cfg.setting_mode == 0){
 80003de:	4b57      	ldr	r3, [pc, #348]	@ (800053c <run_menu+0x16c>)
 80003e0:	78db      	ldrb	r3, [r3, #3]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d170      	bne.n	80004c8 <run_menu+0xf8>
		switch(input_key){
 80003e6:	79fb      	ldrb	r3, [r7, #7]
 80003e8:	3b01      	subs	r3, #1
 80003ea:	2b1f      	cmp	r3, #31
 80003ec:	d86b      	bhi.n	80004c6 <run_menu+0xf6>
 80003ee:	a201      	add	r2, pc, #4	@ (adr r2, 80003f4 <run_menu+0x24>)
 80003f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003f4:	080004c7 	.word	0x080004c7
 80003f8:	080004c7 	.word	0x080004c7
 80003fc:	080004af 	.word	0x080004af
 8000400:	080004c7 	.word	0x080004c7
 8000404:	080004b7 	.word	0x080004b7
 8000408:	0800049f 	.word	0x0800049f
 800040c:	080004c7 	.word	0x080004c7
 8000410:	08000475 	.word	0x08000475
 8000414:	080004a7 	.word	0x080004a7
 8000418:	080004c7 	.word	0x080004c7
 800041c:	080004c7 	.word	0x080004c7
 8000420:	080004c7 	.word	0x080004c7
 8000424:	080004c7 	.word	0x080004c7
 8000428:	080004c7 	.word	0x080004c7
 800042c:	080004c7 	.word	0x080004c7
 8000430:	080004c7 	.word	0x080004c7
 8000434:	080004c7 	.word	0x080004c7
 8000438:	080004c7 	.word	0x080004c7
 800043c:	080004c7 	.word	0x080004c7
 8000440:	080004c7 	.word	0x080004c7
 8000444:	080004c7 	.word	0x080004c7
 8000448:	080004c7 	.word	0x080004c7
 800044c:	080004c7 	.word	0x080004c7
 8000450:	080004c7 	.word	0x080004c7
 8000454:	080004c7 	.word	0x080004c7
 8000458:	080004c7 	.word	0x080004c7
 800045c:	080004c7 	.word	0x080004c7
 8000460:	080004c7 	.word	0x080004c7
 8000464:	080004c7 	.word	0x080004c7
 8000468:	080004c7 	.word	0x080004c7
 800046c:	080004c7 	.word	0x080004c7
 8000470:	080004bf 	.word	0x080004bf
			case eKey_Enter:
				break;
			case eKey_Mode:
				if(++m_cfg.list_idx >= MAX_SCREEN_STEP){
 8000474:	4b31      	ldr	r3, [pc, #196]	@ (800053c <run_menu+0x16c>)
 8000476:	785b      	ldrb	r3, [r3, #1]
 8000478:	3301      	adds	r3, #1
 800047a:	b2da      	uxtb	r2, r3
 800047c:	4b2f      	ldr	r3, [pc, #188]	@ (800053c <run_menu+0x16c>)
 800047e:	705a      	strb	r2, [r3, #1]
 8000480:	4b2e      	ldr	r3, [pc, #184]	@ (800053c <run_menu+0x16c>)
 8000482:	785b      	ldrb	r3, [r3, #1]
 8000484:	2b05      	cmp	r3, #5
 8000486:	d902      	bls.n	800048e <run_menu+0xbe>
					m_cfg.list_idx = 0;
 8000488:	4b2c      	ldr	r3, [pc, #176]	@ (800053c <run_menu+0x16c>)
 800048a:	2200      	movs	r2, #0
 800048c:	705a      	strb	r2, [r3, #1]
				}
				m_cfg.sc_id = screen_list[m_cfg.list_idx];
 800048e:	4b2b      	ldr	r3, [pc, #172]	@ (800053c <run_menu+0x16c>)
 8000490:	785b      	ldrb	r3, [r3, #1]
 8000492:	461a      	mov	r2, r3
 8000494:	4b2a      	ldr	r3, [pc, #168]	@ (8000540 <run_menu+0x170>)
 8000496:	5c9a      	ldrb	r2, [r3, r2]
 8000498:	4b28      	ldr	r3, [pc, #160]	@ (800053c <run_menu+0x16c>)
 800049a:	701a      	strb	r2, [r3, #0]
				break;
 800049c:	e014      	b.n	80004c8 <run_menu+0xf8>
			case eKey_ChSel:
				m_cfg.sc_id = eCHSELECT_SC;
 800049e:	4b27      	ldr	r3, [pc, #156]	@ (800053c <run_menu+0x16c>)
 80004a0:	220d      	movs	r2, #13
 80004a2:	701a      	strb	r2, [r3, #0]
				break;
 80004a4:	e010      	b.n	80004c8 <run_menu+0xf8>
			case eKey_Factory:
				m_cfg.sc_id = eFACTORY_SC;
 80004a6:	4b25      	ldr	r3, [pc, #148]	@ (800053c <run_menu+0x16c>)
 80004a8:	220c      	movs	r2, #12
 80004aa:	701a      	strb	r2, [r3, #0]
				break;
 80004ac:	e00c      	b.n	80004c8 <run_menu+0xf8>
			case eKey_User:
				m_cfg.sc_id = eUSERMODE_SC;
 80004ae:	4b23      	ldr	r3, [pc, #140]	@ (800053c <run_menu+0x16c>)
 80004b0:	220b      	movs	r2, #11
 80004b2:	701a      	strb	r2, [r3, #0]
				break;
 80004b4:	e008      	b.n	80004c8 <run_menu+0xf8>
			case eKey_Version:
				m_cfg.sc_id = eVERSION_SC;
 80004b6:	4b21      	ldr	r3, [pc, #132]	@ (800053c <run_menu+0x16c>)
 80004b8:	220e      	movs	r2, #14
 80004ba:	701a      	strb	r2, [r3, #0]
				break;
 80004bc:	e004      	b.n	80004c8 <run_menu+0xf8>
			case eKey_ExitRemote:
				m_cfg.sc_id = eCHANNEL_SC;
 80004be:	4b1f      	ldr	r3, [pc, #124]	@ (800053c <run_menu+0x16c>)
 80004c0:	2201      	movs	r2, #1
 80004c2:	701a      	strb	r2, [r3, #0]
				break;
 80004c4:	e000      	b.n	80004c8 <run_menu+0xf8>
			default:
				break;
 80004c6:	bf00      	nop
		}
	}
	//LOG_DBG("Change SC[%d]", m_cfg.sc_id);
	//LOG_DBG("Setting mode[%d]", m_cfg.setting_mode);
	next_sc = screen_process(m_cfg.sc_id, input_key);
 80004c8:	4b1c      	ldr	r3, [pc, #112]	@ (800053c <run_menu+0x16c>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	79fa      	ldrb	r2, [r7, #7]
 80004ce:	4611      	mov	r1, r2
 80004d0:	4618      	mov	r0, r3
 80004d2:	f001 fa4d 	bl	8001970 <screen_process>
 80004d6:	4603      	mov	r3, r0
 80004d8:	73fb      	strb	r3, [r7, #15]
	if(next_sc < eMAX_SCREEN_ID ){
 80004da:	7bfb      	ldrb	r3, [r7, #15]
 80004dc:	2b0e      	cmp	r3, #14
 80004de:	d812      	bhi.n	8000506 <run_menu+0x136>
		//LOG_INF("Next Sc[%s] Cur SC[%s]", screen_id_2_str(next_sc), screen_id_2_str(m_cfg.sc_id));
		if(next_sc != m_cfg.sc_id){
 80004e0:	4b16      	ldr	r3, [pc, #88]	@ (800053c <run_menu+0x16c>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	7bfa      	ldrb	r2, [r7, #15]
 80004e6:	429a      	cmp	r2, r3
 80004e8:	d00d      	beq.n	8000506 <run_menu+0x136>
			m_cfg.sc_id = next_sc;
 80004ea:	4a14      	ldr	r2, [pc, #80]	@ (800053c <run_menu+0x16c>)
 80004ec:	7bfb      	ldrb	r3, [r7, #15]
 80004ee:	7013      	strb	r3, [r2, #0]
			next_sc = screen_process(m_cfg.sc_id, eKey_Idle);
 80004f0:	4b12      	ldr	r3, [pc, #72]	@ (800053c <run_menu+0x16c>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f001 fa3a 	bl	8001970 <screen_process>
 80004fc:	4603      	mov	r3, r0
 80004fe:	73fb      	strb	r3, [r7, #15]
			m_cfg.setting_mode = 0;
 8000500:	4b0e      	ldr	r3, [pc, #56]	@ (800053c <run_menu+0x16c>)
 8000502:	2200      	movs	r2, #0
 8000504:	70da      	strb	r2, [r3, #3]
			//LOG_ERR("Change screen clear setting mode");
		}
	}

	//LOG_DBG("next Screen = %s[%d] setting mode[%d]", screen_id_2_str(next_sc), next_sc, m_cfg.setting_mode);
	if(next_sc == eMAX_SCREEN_ID){
 8000506:	7bfb      	ldrb	r3, [r7, #15]
 8000508:	2b0f      	cmp	r3, #15
 800050a:	d113      	bne.n	8000534 <run_menu+0x164>
		if(m_cfg.setting_mode || m_cfg.remote_ctrl){
 800050c:	4b0b      	ldr	r3, [pc, #44]	@ (800053c <run_menu+0x16c>)
 800050e:	78db      	ldrb	r3, [r3, #3]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d103      	bne.n	800051c <run_menu+0x14c>
 8000514:	4b09      	ldr	r3, [pc, #36]	@ (800053c <run_menu+0x16c>)
 8000516:	7c1b      	ldrb	r3, [r3, #16]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d00b      	beq.n	8000534 <run_menu+0x164>
			//LOG_DBG("Release setting mode");
			m_cfg.setting_mode = 0;
 800051c:	4b07      	ldr	r3, [pc, #28]	@ (800053c <run_menu+0x16c>)
 800051e:	2200      	movs	r2, #0
 8000520:	70da      	strb	r2, [r3, #3]
			m_cfg.remote_ctrl = 0;
 8000522:	4b06      	ldr	r3, [pc, #24]	@ (800053c <run_menu+0x16c>)
 8000524:	2200      	movs	r2, #0
 8000526:	741a      	strb	r2, [r3, #16]
			m_cfg.sc_id = eCHANNEL_SC;
 8000528:	4b04      	ldr	r3, [pc, #16]	@ (800053c <run_menu+0x16c>)
 800052a:	2201      	movs	r2, #1
 800052c:	701a      	strb	r2, [r3, #0]
			m_cfg.list_idx = 0;
 800052e:	4b03      	ldr	r3, [pc, #12]	@ (800053c <run_menu+0x16c>)
 8000530:	2200      	movs	r2, #0
 8000532:	705a      	strb	r2, [r3, #1]
		}
	}
}
 8000534:	bf00      	nop
 8000536:	3710      	adds	r7, #16
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20000000 	.word	0x20000000
 8000540:	20000014 	.word	0x20000014

08000544 <AppsTask>:

//void AppsTask(void const * argument)
void AppsTask(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
	Key_t read_key;

	osTimerStart(btn_TimerHandle, (TIMER_10_MSEC));
 800054a:	4b29      	ldr	r3, [pc, #164]	@ (80005f0 <AppsTask+0xac>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	210a      	movs	r1, #10
 8000550:	4618      	mov	r0, r3
 8000552:	f005 fab9 	bl	8005ac8 <osTimerStart>
	m_cfg.btn_status = eBTN_PRESS;
 8000556:	4b27      	ldr	r3, [pc, #156]	@ (80005f4 <AppsTask+0xb0>)
 8000558:	2200      	movs	r2, #0
 800055a:	709a      	strb	r2, [r3, #2]
	while(1){
		if(m_cfg.key_tick >= TIMER_3_SEC){
 800055c:	4b25      	ldr	r3, [pc, #148]	@ (80005f4 <AppsTask+0xb0>)
 800055e:	689b      	ldr	r3, [r3, #8]
 8000560:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000564:	d30f      	bcc.n	8000586 <AppsTask+0x42>
			m_cfg.sc_id = eCHANNEL_SC;
 8000566:	4b23      	ldr	r3, [pc, #140]	@ (80005f4 <AppsTask+0xb0>)
 8000568:	2201      	movs	r2, #1
 800056a:	701a      	strb	r2, [r3, #0]
			screen_process(m_cfg.sc_id, eKey_Idle);
 800056c:	4b21      	ldr	r3, [pc, #132]	@ (80005f4 <AppsTask+0xb0>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f001 f9fc 	bl	8001970 <screen_process>
			m_cfg.btn_status = eBTN_RELEASE;
 8000578:	4b1e      	ldr	r3, [pc, #120]	@ (80005f4 <AppsTask+0xb0>)
 800057a:	2201      	movs	r2, #1
 800057c:	709a      	strb	r2, [r3, #2]
			m_cfg.key_tick = 0;
 800057e:	4b1d      	ldr	r3, [pc, #116]	@ (80005f4 <AppsTask+0xb0>)
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
			break;
 8000584:	e003      	b.n	800058e <AppsTask+0x4a>
		}
		osDelay(10);
 8000586:	200a      	movs	r0, #10
 8000588:	f005 fa55 	bl	8005a36 <osDelay>
		if(m_cfg.key_tick >= TIMER_3_SEC){
 800058c:	e7e6      	b.n	800055c <AppsTask+0x18>
	}

	while(1){
		read_key = key_process();
 800058e:	f7ff fe53 	bl	8000238 <key_process>
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]
		if(read_key != eKey_Idle){
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d00e      	beq.n	80005ba <AppsTask+0x76>
//			if(m_cfg.remote_ctrl){
//				LOG_DBG("read key[%s]", key_id_2_str(read_key));
//			}
			if(m_cfg.remote_ctrl && (read_key != eKey_ExitRemote)){
 800059c:	4b15      	ldr	r3, [pc, #84]	@ (80005f4 <AppsTask+0xb0>)
 800059e:	7c1b      	ldrb	r3, [r3, #16]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d006      	beq.n	80005b2 <AppsTask+0x6e>
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	2b20      	cmp	r3, #32
 80005a8:	d003      	beq.n	80005b2 <AppsTask+0x6e>
				osDelay(5);
 80005aa:	2005      	movs	r0, #5
 80005ac:	f005 fa43 	bl	8005a36 <osDelay>
				continue;
 80005b0:	e01d      	b.n	80005ee <AppsTask+0xaa>
			}
			run_menu(read_key);
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f7ff ff0b 	bl	80003d0 <run_menu>
		}
		if(m_cfg.blink_enable && (m_cfg.blink_tick >= TIMER_50_MSEC) && (proc_blink == 0)){
 80005ba:	4b0e      	ldr	r3, [pc, #56]	@ (80005f4 <AppsTask+0xb0>)
 80005bc:	7b1b      	ldrb	r3, [r3, #12]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d012      	beq.n	80005e8 <AppsTask+0xa4>
 80005c2:	4b0c      	ldr	r3, [pc, #48]	@ (80005f4 <AppsTask+0xb0>)
 80005c4:	89db      	ldrh	r3, [r3, #14]
 80005c6:	2b31      	cmp	r3, #49	@ 0x31
 80005c8:	d90e      	bls.n	80005e8 <AppsTask+0xa4>
 80005ca:	4b0b      	ldr	r3, [pc, #44]	@ (80005f8 <AppsTask+0xb4>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d10a      	bne.n	80005e8 <AppsTask+0xa4>
			proc_blink = 1;
 80005d2:	4b09      	ldr	r3, [pc, #36]	@ (80005f8 <AppsTask+0xb4>)
 80005d4:	2201      	movs	r2, #1
 80005d6:	701a      	strb	r2, [r3, #0]
			screen_blink();
 80005d8:	f001 f990 	bl	80018fc <screen_blink>
			m_cfg.blink_tick = 0;
 80005dc:	4b05      	ldr	r3, [pc, #20]	@ (80005f4 <AppsTask+0xb0>)
 80005de:	2200      	movs	r2, #0
 80005e0:	81da      	strh	r2, [r3, #14]
			proc_blink = 0;
 80005e2:	4b05      	ldr	r3, [pc, #20]	@ (80005f8 <AppsTask+0xb4>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	701a      	strb	r2, [r3, #0]
		}
		osDelay(5);
 80005e8:	2005      	movs	r0, #5
 80005ea:	f005 fa24 	bl	8005a36 <osDelay>
		read_key = key_process();
 80005ee:	e7ce      	b.n	800058e <AppsTask+0x4a>
 80005f0:	200001c4 	.word	0x200001c4
 80005f4:	20000000 	.word	0x20000000
 80005f8:	200001c8 	.word	0x200001c8

080005fc <apps_set_remote_mode>:
	}
}

void apps_set_remote_mode(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	LOG_DBG("Set remote mode");
 8000600:	4803      	ldr	r0, [pc, #12]	@ (8000610 <apps_set_remote_mode+0x14>)
 8000602:	f000 fac3 	bl	8000b8c <Printf>
	m_cfg.remote_ctrl = 1;
 8000606:	4b03      	ldr	r3, [pc, #12]	@ (8000614 <apps_set_remote_mode+0x18>)
 8000608:	2201      	movs	r2, #1
 800060a:	741a      	strb	r2, [r3, #16]
}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	08008f68 	.word	0x08008f68
 8000614:	20000000 	.word	0x20000000

08000618 <apps_set_blink_enable>:

void apps_set_blink_enable(uint8_t enable)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	71fb      	strb	r3, [r7, #7]
	m_cfg.blink_enable = enable;
 8000622:	4a04      	ldr	r2, [pc, #16]	@ (8000634 <apps_set_blink_enable+0x1c>)
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	7313      	strb	r3, [r2, #12]
}
 8000628:	bf00      	nop
 800062a:	370c      	adds	r7, #12
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	20000000 	.word	0x20000000

08000638 <apps_init>:

int apps_init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
	osTimerDef(btn_Timer, btn_tmr_callback);
 800063e:	4b0e      	ldr	r3, [pc, #56]	@ (8000678 <apps_init+0x40>)
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	2300      	movs	r3, #0
 8000644:	607b      	str	r3, [r7, #4]
	btn_TimerHandle = osTimerCreate(osTimer(btn_Timer), osTimerPeriodic, NULL);
 8000646:	463b      	mov	r3, r7
 8000648:	2200      	movs	r2, #0
 800064a:	2101      	movs	r1, #1
 800064c:	4618      	mov	r0, r3
 800064e:	f005 fa07 	bl	8005a60 <osTimerCreate>
 8000652:	4603      	mov	r3, r0
 8000654:	4a09      	ldr	r2, [pc, #36]	@ (800067c <apps_init+0x44>)
 8000656:	6013      	str	r3, [r2, #0]
	if(btn_TimerHandle == NULL){
 8000658:	4b08      	ldr	r3, [pc, #32]	@ (800067c <apps_init+0x44>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d105      	bne.n	800066c <apps_init+0x34>
		LOG_ERR("Front Key timer Create Error");
 8000660:	4807      	ldr	r0, [pc, #28]	@ (8000680 <apps_init+0x48>)
 8000662:	f000 fa93 	bl	8000b8c <Printf>
		return -1;
 8000666:	f04f 33ff 	mov.w	r3, #4294967295
 800066a:	e000      	b.n	800066e <apps_init+0x36>
	if(AppsTaskHandle == NULL){
		LOG_ERR("Front Apps Task Create Error");
		return -1;
	}
#endif
	return 0;
 800066c:	2300      	movs	r3, #0
}
 800066e:	4618      	mov	r0, r3
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	080001d5 	.word	0x080001d5
 800067c:	200001c4 	.word	0x200001c4
 8000680:	08008f80 	.word	0x08008f80

08000684 <app_set_default_config>:

config_t m_flash_cfg, *m_app_config;
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
void app_set_default_config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	LOG_INF("Set Default Configuration...");
 8000688:	4808      	ldr	r0, [pc, #32]	@ (80006ac <app_set_default_config+0x28>)
 800068a:	f000 fa7f 	bl	8000b8c <Printf>
	//LOG_HEX_DUMP(&m_flash_cfg, sizeof(config_t), "Before Config Data");
	memcpy(&m_flash_cfg, &def_config, sizeof(config_t));
 800068e:	4a08      	ldr	r2, [pc, #32]	@ (80006b0 <app_set_default_config+0x2c>)
 8000690:	4b08      	ldr	r3, [pc, #32]	@ (80006b4 <app_set_default_config+0x30>)
 8000692:	4610      	mov	r0, r2
 8000694:	4619      	mov	r1, r3
 8000696:	2347      	movs	r3, #71	@ 0x47
 8000698:	461a      	mov	r2, r3
 800069a:	f007 fff5 	bl	8008688 <memcpy>
	m_flash_config_write((void *)&m_flash_cfg, sizeof(config_t));
 800069e:	2147      	movs	r1, #71	@ 0x47
 80006a0:	4803      	ldr	r0, [pc, #12]	@ (80006b0 <app_set_default_config+0x2c>)
 80006a2:	f000 f899 	bl	80007d8 <m_flash_config_write>
	//LOG_HEX_DUMP(&m_flash_cfg, sizeof(config_t), "After Config Data");
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	08008fa4 	.word	0x08008fa4
 80006b0:	200001d0 	.word	0x200001d0
 80006b4:	2000001c 	.word	0x2000001c

080006b8 <app_config_init>:

void app_config_init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	if(app_read_config(&m_flash_cfg)){
 80006bc:	4808      	ldr	r0, [pc, #32]	@ (80006e0 <app_config_init+0x28>)
 80006be:	f000 f821 	bl	8000704 <app_read_config>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <app_config_init+0x14>
		app_set_default_config();
 80006c8:	f7ff ffdc 	bl	8000684 <app_set_default_config>
	}
	m_app_config = &m_flash_cfg;
 80006cc:	4b05      	ldr	r3, [pc, #20]	@ (80006e4 <app_config_init+0x2c>)
 80006ce:	4a04      	ldr	r2, [pc, #16]	@ (80006e0 <app_config_init+0x28>)
 80006d0:	601a      	str	r2, [r3, #0]
	LOG_HEX_DUMP(&m_flash_cfg, sizeof(config_t), "Config Data");
 80006d2:	4a05      	ldr	r2, [pc, #20]	@ (80006e8 <app_config_init+0x30>)
 80006d4:	2147      	movs	r1, #71	@ 0x47
 80006d6:	4802      	ldr	r0, [pc, #8]	@ (80006e0 <app_config_init+0x28>)
 80006d8:	f000 faaa 	bl	8000c30 <dump_printf>
}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	200001d0 	.word	0x200001d0
 80006e4:	20000218 	.word	0x20000218
 80006e8:	08008fc8 	.word	0x08008fc8

080006ec <app_save_config>:

int app_save_config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	return m_flash_config_write((void *)&m_flash_cfg, sizeof(config_t));
 80006f0:	2147      	movs	r1, #71	@ 0x47
 80006f2:	4803      	ldr	r0, [pc, #12]	@ (8000700 <app_save_config+0x14>)
 80006f4:	f000 f870 	bl	80007d8 <m_flash_config_write>
 80006f8:	4603      	mov	r3, r0
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	200001d0 	.word	0x200001d0

08000704 <app_read_config>:

uint8_t app_read_config(config_t *pConfig)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	m_flash_config_read((void *)pConfig, sizeof(config_t));
 800070c:	2147      	movs	r1, #71	@ 0x47
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f000 f84e 	bl	80007b0 <m_flash_config_read>
	if(pConfig->valid != CONFIG_VALID){
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b10      	cmp	r3, #16
 800071a:	d004      	beq.n	8000726 <app_read_config+0x22>
		LOG_ERR("Configuration is not valid!!!");
 800071c:	4804      	ldr	r0, [pc, #16]	@ (8000730 <app_read_config+0x2c>)
 800071e:	f000 fa35 	bl	8000b8c <Printf>
		return 1;
 8000722:	2301      	movs	r3, #1
 8000724:	e000      	b.n	8000728 <app_read_config+0x24>
	}
	return 0;
 8000726:	2300      	movs	r3, #0
}
 8000728:	4618      	mov	r0, r3
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	08008fd4 	.word	0x08008fd4

08000734 <m_flash_config_erase>:
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/

/* Private function prototypes -----------------------------------------------*/
int m_flash_config_erase(void)
{
 8000734:	b590      	push	{r4, r7, lr}
 8000736:	b087      	sub	sp, #28
 8000738:	af00      	add	r7, sp, #0
	int err_code;
	uint32_t PageError;
	FLASH_EraseInitTypeDef EraseInitStruct;

	HAL_FLASH_Unlock();
 800073a:	f003 f8b3 	bl	80038a4 <HAL_FLASH_Unlock>

	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 800073e:	2300      	movs	r3, #0
 8000740:	603b      	str	r3, [r7, #0]
	EraseInitStruct.PageAddress = FRONT_CONFIG_ADDRESS;
 8000742:	4b17      	ldr	r3, [pc, #92]	@ (80007a0 <m_flash_config_erase+0x6c>)
 8000744:	60bb      	str	r3, [r7, #8]
	EraseInitStruct.NbPages     = 1;
 8000746:	2301      	movs	r3, #1
 8000748:	60fb      	str	r3, [r7, #12]

	err_code = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 800074a:	f107 0210 	add.w	r2, r7, #16
 800074e:	463b      	mov	r3, r7
 8000750:	4611      	mov	r1, r2
 8000752:	4618      	mov	r0, r3
 8000754:	f003 f998 	bl	8003a88 <HAL_FLASHEx_Erase>
 8000758:	4603      	mov	r3, r0
 800075a:	617b      	str	r3, [r7, #20]
	if (err_code != HAL_OK)
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d017      	beq.n	8000792 <m_flash_config_erase+0x5e>
	{
		LOG_ERR("Page Error[%x] Flash Error[%x]", PageError, HAL_FLASH_GetError());
 8000762:	693c      	ldr	r4, [r7, #16]
 8000764:	f003 f8d4 	bl	8003910 <HAL_FLASH_GetError>
 8000768:	4603      	mov	r3, r0
 800076a:	461a      	mov	r2, r3
 800076c:	4621      	mov	r1, r4
 800076e:	480d      	ldr	r0, [pc, #52]	@ (80007a4 <m_flash_config_erase+0x70>)
 8000770:	f000 fa0c 	bl	8000b8c <Printf>
		HAL_FLASH_Lock();
 8000774:	f003 f8bc 	bl	80038f0 <HAL_FLASH_Lock>
		RETURN_IF_ERROR(err_code);
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d009      	beq.n	8000792 <m_flash_config_erase+0x5e>
 800077e:	480a      	ldr	r0, [pc, #40]	@ (80007a8 <m_flash_config_erase+0x74>)
 8000780:	f000 fa04 	bl	8000b8c <Printf>
 8000784:	697a      	ldr	r2, [r7, #20]
 8000786:	2122      	movs	r1, #34	@ 0x22
 8000788:	4808      	ldr	r0, [pc, #32]	@ (80007ac <m_flash_config_erase+0x78>)
 800078a:	f000 f9ff 	bl	8000b8c <Printf>
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	e002      	b.n	8000798 <m_flash_config_erase+0x64>
	}

	HAL_FLASH_Lock();
 8000792:	f003 f8ad 	bl	80038f0 <HAL_FLASH_Lock>
	return 0;
 8000796:	2300      	movs	r3, #0
}
 8000798:	4618      	mov	r0, r3
 800079a:	371c      	adds	r7, #28
 800079c:	46bd      	mov	sp, r7
 800079e:	bd90      	pop	{r4, r7, pc}
 80007a0:	0800f800 	.word	0x0800f800
 80007a4:	08008ffc 	.word	0x08008ffc
 80007a8:	08009024 	.word	0x08009024
 80007ac:	08009048 	.word	0x08009048

080007b0 <m_flash_config_read>:

void m_flash_config_read(void *pBuffer, int size)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	6039      	str	r1, [r7, #0]
	uint32_t address;

	address = FRONT_CONFIG_ADDRESS;
 80007ba:	4b06      	ldr	r3, [pc, #24]	@ (80007d4 <m_flash_config_read+0x24>)
 80007bc:	60fb      	str	r3, [r7, #12]

	memcpy(pBuffer, (uint32_t *)address, size);
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	683a      	ldr	r2, [r7, #0]
 80007c2:	4619      	mov	r1, r3
 80007c4:	6878      	ldr	r0, [r7, #4]
 80007c6:	f007 ff5f 	bl	8008688 <memcpy>
	//LOG_HEX_DUMP(pBuffer, size, "Dump DB");
}
 80007ca:	bf00      	nop
 80007cc:	3710      	adds	r7, #16
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	0800f800 	.word	0x0800f800

080007d8 <m_flash_config_write>:

int m_flash_config_write(void *Data_p, int size)
{
 80007d8:	b5b0      	push	{r4, r5, r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	6039      	str	r1, [r7, #0]
	unsigned int write_size =0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
	uint32_t Address, write_data;
	uint16_t *pData;

	Address = FRONT_CONFIG_ADDRESS;
 80007e6:	4b20      	ldr	r3, [pc, #128]	@ (8000868 <m_flash_config_write+0x90>)
 80007e8:	613b      	str	r3, [r7, #16]

	pData = (uint16_t *)Data_p;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	60fb      	str	r3, [r7, #12]

	if(m_flash_config_erase()){
 80007ee:	f7ff ffa1 	bl	8000734 <m_flash_config_erase>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d002      	beq.n	80007fe <m_flash_config_write+0x26>
		return -1;
 80007f8:	f04f 33ff 	mov.w	r3, #4294967295
 80007fc:	e02f      	b.n	800085e <m_flash_config_write+0x86>
	}

	HAL_FLASH_Unlock();
 80007fe:	f003 f851 	bl	80038a4 <HAL_FLASH_Unlock>

	while(write_size < size)
 8000802:	e025      	b.n	8000850 <m_flash_config_write+0x78>
	{
		write_data = (uint16_t)*pData;
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	881b      	ldrh	r3, [r3, #0]
 8000808:	60bb      	str	r3, [r7, #8]
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Address, write_data) != HAL_OK)
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	2200      	movs	r2, #0
 800080e:	461c      	mov	r4, r3
 8000810:	4615      	mov	r5, r2
 8000812:	4622      	mov	r2, r4
 8000814:	462b      	mov	r3, r5
 8000816:	6939      	ldr	r1, [r7, #16]
 8000818:	2001      	movs	r0, #1
 800081a:	f002 ffd3 	bl	80037c4 <HAL_FLASH_Program>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d00c      	beq.n	800083e <m_flash_config_write+0x66>
		{

			LOG_ERR("Flash Write Error [%lx] TotSize[%d] WriteSize[%d]", HAL_FLASH_GetError(), size, write_size);
 8000824:	f003 f874 	bl	8003910 <HAL_FLASH_GetError>
 8000828:	4601      	mov	r1, r0
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	683a      	ldr	r2, [r7, #0]
 800082e:	480f      	ldr	r0, [pc, #60]	@ (800086c <m_flash_config_write+0x94>)
 8000830:	f000 f9ac 	bl	8000b8c <Printf>

			HAL_FLASH_Lock();
 8000834:	f003 f85c 	bl	80038f0 <HAL_FLASH_Lock>
			return -1;
 8000838:	f04f 33ff 	mov.w	r3, #4294967295
 800083c:	e00f      	b.n	800085e <m_flash_config_write+0x86>
		}
		pData++;
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	3302      	adds	r3, #2
 8000842:	60fb      	str	r3, [r7, #12]
		write_size+=2;
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	3302      	adds	r3, #2
 8000848:	617b      	str	r3, [r7, #20]
		Address +=2;
 800084a:	693b      	ldr	r3, [r7, #16]
 800084c:	3302      	adds	r3, #2
 800084e:	613b      	str	r3, [r7, #16]
	while(write_size < size)
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	697a      	ldr	r2, [r7, #20]
 8000854:	429a      	cmp	r2, r3
 8000856:	d3d5      	bcc.n	8000804 <m_flash_config_write+0x2c>
	}

	HAL_FLASH_Lock();
 8000858:	f003 f84a 	bl	80038f0 <HAL_FLASH_Lock>
	return 0;
 800085c:	2300      	movs	r3, #0
}
 800085e:	4618      	mov	r0, r3
 8000860:	3718      	adds	r7, #24
 8000862:	46bd      	mov	sp, r7
 8000864:	bdb0      	pop	{r4, r5, r7, pc}
 8000866:	bf00      	nop
 8000868:	0800f800 	.word	0x0800f800
 800086c:	0800907c 	.word	0x0800907c

08000870 <trigger_set>:
		HAL_GPIO_WritePin(trigger[cnt].Port, trigger[cnt].pin, GPIO_PIN_SET);
	}
}

void trigger_set(uint8_t signal)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
	int cnt;
	
	if(signal == 0){
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d116      	bne.n	80008ae <trigger_set+0x3e>
		for(cnt = 0; cnt < MAX_CHANNEL; cnt++){
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	e00f      	b.n	80008a6 <trigger_set+0x36>
			HAL_GPIO_WritePin(trigger[cnt].Port, trigger[cnt].pin, GPIO_PIN_SET);
 8000886:	4a1a      	ldr	r2, [pc, #104]	@ (80008f0 <trigger_set+0x80>)
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800088e:	4a18      	ldr	r2, [pc, #96]	@ (80008f0 <trigger_set+0x80>)
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	00db      	lsls	r3, r3, #3
 8000894:	4413      	add	r3, r2
 8000896:	889b      	ldrh	r3, [r3, #4]
 8000898:	2201      	movs	r2, #1
 800089a:	4619      	mov	r1, r3
 800089c:	f003 fb37 	bl	8003f0e <HAL_GPIO_WritePin>
		for(cnt = 0; cnt < MAX_CHANNEL; cnt++){
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	3301      	adds	r3, #1
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	2b07      	cmp	r3, #7
 80008aa:	ddec      	ble.n	8000886 <trigger_set+0x16>
		}
		return ;
 80008ac:	e01d      	b.n	80008ea <trigger_set+0x7a>
	}
	
	for(cnt = 0; cnt < MAX_CHANNEL; cnt++){
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	e017      	b.n	80008e4 <trigger_set+0x74>
		if((signal >> cnt) & 0x01){
 80008b4:	79fa      	ldrb	r2, [r7, #7]
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	fa42 f303 	asr.w	r3, r2, r3
 80008bc:	f003 0301 	and.w	r3, r3, #1
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d00c      	beq.n	80008de <trigger_set+0x6e>
			HAL_GPIO_WritePin(trigger[cnt].Port, trigger[cnt].pin, GPIO_PIN_RESET);
 80008c4:	4a0a      	ldr	r2, [pc, #40]	@ (80008f0 <trigger_set+0x80>)
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80008cc:	4a08      	ldr	r2, [pc, #32]	@ (80008f0 <trigger_set+0x80>)
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	00db      	lsls	r3, r3, #3
 80008d2:	4413      	add	r3, r2
 80008d4:	889b      	ldrh	r3, [r3, #4]
 80008d6:	2200      	movs	r2, #0
 80008d8:	4619      	mov	r1, r3
 80008da:	f003 fb18 	bl	8003f0e <HAL_GPIO_WritePin>
	for(cnt = 0; cnt < MAX_CHANNEL; cnt++){
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	3301      	adds	r3, #1
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	2b07      	cmp	r3, #7
 80008e8:	dde4      	ble.n	80008b4 <trigger_set+0x44>
		}
	}
}
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000064 	.word	0x20000064

080008f4 <push_buf>:
static serial_cfg_t config;
/* Private function prototypes -----------------------------------------------*/
//static void SerialTask(void const * argument);
/* Private functions ---------------------------------------------------------*/
static void push_buf(uint8_t ch)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	71fb      	strb	r3, [r7, #7]
	int pos = (que._head + 1) % MAX_QUEUE_SIZE;
 80008fe:	4b11      	ldr	r3, [pc, #68]	@ (8000944 <push_buf+0x50>)
 8000900:	881b      	ldrh	r3, [r3, #0]
 8000902:	3301      	adds	r3, #1
 8000904:	425a      	negs	r2, r3
 8000906:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800090a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800090e:	bf58      	it	pl
 8000910:	4253      	negpl	r3, r2
 8000912:	60fb      	str	r3, [r7, #12]

	if(pos == que._tail) return ;
 8000914:	4b0b      	ldr	r3, [pc, #44]	@ (8000944 <push_buf+0x50>)
 8000916:	885b      	ldrh	r3, [r3, #2]
 8000918:	461a      	mov	r2, r3
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	4293      	cmp	r3, r2
 800091e:	d00b      	beq.n	8000938 <push_buf+0x44>

	que._data[que._head] = ch;
 8000920:	4b08      	ldr	r3, [pc, #32]	@ (8000944 <push_buf+0x50>)
 8000922:	881b      	ldrh	r3, [r3, #0]
 8000924:	461a      	mov	r2, r3
 8000926:	4b07      	ldr	r3, [pc, #28]	@ (8000944 <push_buf+0x50>)
 8000928:	4413      	add	r3, r2
 800092a:	79fa      	ldrb	r2, [r7, #7]
 800092c:	711a      	strb	r2, [r3, #4]
	que._head = pos;
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	b29a      	uxth	r2, r3
 8000932:	4b04      	ldr	r3, [pc, #16]	@ (8000944 <push_buf+0x50>)
 8000934:	801a      	strh	r2, [r3, #0]
 8000936:	e000      	b.n	800093a <push_buf+0x46>
	if(pos == que._tail) return ;
 8000938:	bf00      	nop
}
 800093a:	3714      	adds	r7, #20
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	20000220 	.word	0x20000220

08000948 <pop_buf>:

static uint8_t pop_buf(uint8_t *ch)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	if(que._head == que._tail) return 0;
 8000950:	4b11      	ldr	r3, [pc, #68]	@ (8000998 <pop_buf+0x50>)
 8000952:	881a      	ldrh	r2, [r3, #0]
 8000954:	4b10      	ldr	r3, [pc, #64]	@ (8000998 <pop_buf+0x50>)
 8000956:	885b      	ldrh	r3, [r3, #2]
 8000958:	429a      	cmp	r2, r3
 800095a:	d101      	bne.n	8000960 <pop_buf+0x18>
 800095c:	2300      	movs	r3, #0
 800095e:	e015      	b.n	800098c <pop_buf+0x44>

	*ch = que._data[que._tail];
 8000960:	4b0d      	ldr	r3, [pc, #52]	@ (8000998 <pop_buf+0x50>)
 8000962:	885b      	ldrh	r3, [r3, #2]
 8000964:	461a      	mov	r2, r3
 8000966:	4b0c      	ldr	r3, [pc, #48]	@ (8000998 <pop_buf+0x50>)
 8000968:	4413      	add	r3, r2
 800096a:	791a      	ldrb	r2, [r3, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	701a      	strb	r2, [r3, #0]
	que._tail = (que._tail + 1)%MAX_QUEUE_SIZE;
 8000970:	4b09      	ldr	r3, [pc, #36]	@ (8000998 <pop_buf+0x50>)
 8000972:	885b      	ldrh	r3, [r3, #2]
 8000974:	3301      	adds	r3, #1
 8000976:	425a      	negs	r2, r3
 8000978:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800097c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8000980:	bf58      	it	pl
 8000982:	4253      	negpl	r3, r2
 8000984:	b29a      	uxth	r2, r3
 8000986:	4b04      	ldr	r3, [pc, #16]	@ (8000998 <pop_buf+0x50>)
 8000988:	805a      	strh	r2, [r3, #2]

	return 1;
 800098a:	2301      	movs	r3, #1
}
 800098c:	4618      	mov	r0, r3
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	bc80      	pop	{r7}
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	20000220 	.word	0x20000220

0800099c <find_cmd>:

static uint8_t find_cmd(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
	uint8_t data = 0, len = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	71bb      	strb	r3, [r7, #6]
 80009a6:	2300      	movs	r3, #0
 80009a8:	71fb      	strb	r3, [r7, #7]

	while(pop_buf(&data)){
 80009aa:	e02c      	b.n	8000a06 <find_cmd+0x6a>
		if((config.cmd_pos == 0)&&(data != CMD_HEAD)){
 80009ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000a20 <find_cmd+0x84>)
 80009ae:	895b      	ldrh	r3, [r3, #10]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d102      	bne.n	80009ba <find_cmd+0x1e>
 80009b4:	79bb      	ldrb	r3, [r7, #6]
 80009b6:	2bdf      	cmp	r3, #223	@ 0xdf
 80009b8:	d124      	bne.n	8000a04 <find_cmd+0x68>
			continue;
		}
		if(config.cmd_pos < CMD_MAX_SIZE){
 80009ba:	4b19      	ldr	r3, [pc, #100]	@ (8000a20 <find_cmd+0x84>)
 80009bc:	895b      	ldrh	r3, [r3, #10]
 80009be:	2b09      	cmp	r3, #9
 80009c0:	d809      	bhi.n	80009d6 <find_cmd+0x3a>
			config.cmd_buffer[config.cmd_pos++] = data;
 80009c2:	4b17      	ldr	r3, [pc, #92]	@ (8000a20 <find_cmd+0x84>)
 80009c4:	895b      	ldrh	r3, [r3, #10]
 80009c6:	1c5a      	adds	r2, r3, #1
 80009c8:	b291      	uxth	r1, r2
 80009ca:	4a15      	ldr	r2, [pc, #84]	@ (8000a20 <find_cmd+0x84>)
 80009cc:	8151      	strh	r1, [r2, #10]
 80009ce:	461a      	mov	r2, r3
 80009d0:	79b9      	ldrb	r1, [r7, #6]
 80009d2:	4b13      	ldr	r3, [pc, #76]	@ (8000a20 <find_cmd+0x84>)
 80009d4:	5499      	strb	r1, [r3, r2]
		}
		config.cmd_state = ((config.cmd_state<<8)|data);
 80009d6:	4b12      	ldr	r3, [pc, #72]	@ (8000a20 <find_cmd+0x84>)
 80009d8:	68db      	ldr	r3, [r3, #12]
 80009da:	021b      	lsls	r3, r3, #8
 80009dc:	79ba      	ldrb	r2, [r7, #6]
 80009de:	4313      	orrs	r3, r2
 80009e0:	4a0f      	ldr	r2, [pc, #60]	@ (8000a20 <find_cmd+0x84>)
 80009e2:	60d3      	str	r3, [r2, #12]
		if(config.cmd_state == CMD_TAIL){
 80009e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000a20 <find_cmd+0x84>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d10a      	bne.n	8000a06 <find_cmd+0x6a>
			len = config.cmd_pos;
 80009f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000a20 <find_cmd+0x84>)
 80009f2:	895b      	ldrh	r3, [r3, #10]
 80009f4:	71fb      	strb	r3, [r7, #7]
			config.cmd_state = 0;
 80009f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a20 <find_cmd+0x84>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	60da      	str	r2, [r3, #12]
			config.cmd_pos = 0;
 80009fc:	4b08      	ldr	r3, [pc, #32]	@ (8000a20 <find_cmd+0x84>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	815a      	strh	r2, [r3, #10]
 8000a02:	e000      	b.n	8000a06 <find_cmd+0x6a>
			continue;
 8000a04:	bf00      	nop
	while(pop_buf(&data)){
 8000a06:	1dbb      	adds	r3, r7, #6
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff ff9d 	bl	8000948 <pop_buf>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d1cb      	bne.n	80009ac <find_cmd+0x10>
		}
	}
	return len;
 8000a14:	79fb      	ldrb	r3, [r7, #7]
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200002a4 	.word	0x200002a4

08000a24 <uart_task>:

//static void SerialTask(void const * argument)
void uart_task(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
	uint16_t cmd_size;
	while(1){
		cmd_size = find_cmd();
 8000a2a:	f7ff ffb7 	bl	800099c <find_cmd>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	80fb      	strh	r3, [r7, #6]
		if(cmd_size){
 8000a32:	88fb      	ldrh	r3, [r7, #6]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d008      	beq.n	8000a4a <uart_task+0x26>
			if(config.cmd_buffer[1] == TRIGGER_EVT_CMD){
 8000a38:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <uart_task+0x30>)
 8000a3a:	785b      	ldrb	r3, [r3, #1]
 8000a3c:	2b33      	cmp	r3, #51	@ 0x33
 8000a3e:	d104      	bne.n	8000a4a <uart_task+0x26>
				trigger_set(config.cmd_buffer[TRIGGER_DATA_IDX]);
 8000a40:	4b04      	ldr	r3, [pc, #16]	@ (8000a54 <uart_task+0x30>)
 8000a42:	789b      	ldrb	r3, [r3, #2]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff ff13 	bl	8000870 <trigger_set>
			}else if(config.cmd_buffer[1] == RES_ERROR){
				// todo : error 처리
			}
		}
		osDelay(10);
 8000a4a:	200a      	movs	r0, #10
 8000a4c:	f004 fff3 	bl	8005a36 <osDelay>
		cmd_size = find_cmd();
 8000a50:	e7eb      	b.n	8000a2a <uart_task+0x6>
 8000a52:	bf00      	nop
 8000a54:	200002a4 	.word	0x200002a4

08000a58 <HAL_UART_RxCpltCallback>:
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	/* Console */
	if ( huart->Instance == USART1 ){
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a08      	ldr	r2, [pc, #32]	@ (8000a88 <HAL_UART_RxCpltCallback+0x30>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d109      	bne.n	8000a7e <HAL_UART_RxCpltCallback+0x26>
		push_buf(Front_rx_buf[0]);
 8000a6a:	4b08      	ldr	r3, [pc, #32]	@ (8000a8c <HAL_UART_RxCpltCallback+0x34>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff ff40 	bl	80008f4 <push_buf>
		HAL_UART_Receive_IT(FRONT_UART, &Front_rx_buf[0], 1 );
 8000a74:	2201      	movs	r2, #1
 8000a76:	4905      	ldr	r1, [pc, #20]	@ (8000a8c <HAL_UART_RxCpltCallback+0x34>)
 8000a78:	4805      	ldr	r0, [pc, #20]	@ (8000a90 <HAL_UART_RxCpltCallback+0x38>)
 8000a7a:	f004 f9d2 	bl	8004e22 <HAL_UART_Receive_IT>
	}
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40013800 	.word	0x40013800
 8000a8c:	2000021c 	.word	0x2000021c
 8000a90:	20000af4 	.word	0x20000af4

08000a94 <uart_SendFront>:

int uart_SendFront(uint8_t cmd, uint8_t ch, uint32_t data)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	603a      	str	r2, [r7, #0]
 8000a9e:	71fb      	strb	r3, [r7, #7]
 8000aa0:	460b      	mov	r3, r1
 8000aa2:	71bb      	strb	r3, [r7, #6]
	int error;
	uint8_t send_data[CMD_MAX_SIZE]={0xEF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF};
 8000aa4:	4a16      	ldr	r2, [pc, #88]	@ (8000b00 <uart_SendFront+0x6c>)
 8000aa6:	f107 0308 	add.w	r3, r7, #8
 8000aaa:	ca07      	ldmia	r2, {r0, r1, r2}
 8000aac:	c303      	stmia	r3!, {r0, r1}
 8000aae:	801a      	strh	r2, [r3, #0]

	send_data[2] = cmd;
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	72bb      	strb	r3, [r7, #10]
	send_data[3] = ch;
 8000ab4:	79bb      	ldrb	r3, [r7, #6]
 8000ab6:	72fb      	strb	r3, [r7, #11]
	send_data[4] = ((data & 0xFF00) >> 24);
 8000ab8:	2300      	movs	r3, #0
 8000aba:	733b      	strb	r3, [r7, #12]
	send_data[5] = ((data & 0xFF00) >> 16);
 8000abc:	2300      	movs	r3, #0
 8000abe:	737b      	strb	r3, [r7, #13]
	send_data[6] = ((data & 0xFF00) >> 8);
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	0a1b      	lsrs	r3, r3, #8
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	73bb      	strb	r3, [r7, #14]
	send_data[7] = (data & 0x00FF);
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	73fb      	strb	r3, [r7, #15]

	error  = HAL_UART_Transmit(FRONT_UART, send_data, CMD_MAX_SIZE, 1000);
 8000ace:	f107 0108 	add.w	r1, r7, #8
 8000ad2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ad6:	220a      	movs	r2, #10
 8000ad8:	480a      	ldr	r0, [pc, #40]	@ (8000b04 <uart_SendFront+0x70>)
 8000ada:	f004 f917 	bl	8004d0c <HAL_UART_Transmit>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	617b      	str	r3, [r7, #20]
	if(error != HAL_OK){
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d005      	beq.n	8000af4 <uart_SendFront+0x60>
		LOG_ERR("Send Command Error");
 8000ae8:	4807      	ldr	r0, [pc, #28]	@ (8000b08 <uart_SendFront+0x74>)
 8000aea:	f000 f84f 	bl	8000b8c <Printf>
		return -EIO;
 8000aee:	f06f 0304 	mvn.w	r3, #4
 8000af2:	e000      	b.n	8000af6 <uart_SendFront+0x62>
	}

	return 0;
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	080090d4 	.word	0x080090d4
 8000b04:	20000af4 	.word	0x20000af4
 8000b08:	080090b8 	.word	0x080090b8

08000b0c <uart_init>:

int uart_init(void)
{	
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(FRONT_UART, &Front_rx_buf[0], 1);
 8000b10:	2201      	movs	r2, #1
 8000b12:	4903      	ldr	r1, [pc, #12]	@ (8000b20 <uart_init+0x14>)
 8000b14:	4803      	ldr	r0, [pc, #12]	@ (8000b24 <uart_init+0x18>)
 8000b16:	f004 f984 	bl	8004e22 <HAL_UART_Receive_IT>
//	serialTaskHandle = osThreadCreate(osThread(serialTask), NULL);
//	if(serialTaskHandle == NULL){
//		LOG_ERR("Front Serial Task Create Error");
//		return -1;
//	}
	return 0;
 8000b1a:	2300      	movs	r3, #0
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	2000021c 	.word	0x2000021c
 8000b24:	20000af4 	.word	0x20000af4

08000b28 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	4a06      	ldr	r2, [pc, #24]	@ (8000b50 <vApplicationGetIdleTaskMemory+0x28>)
 8000b38:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	4a05      	ldr	r2, [pc, #20]	@ (8000b54 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b3e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2280      	movs	r2, #128	@ 0x80
 8000b44:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b46:	bf00      	nop
 8000b48:	3714      	adds	r7, #20
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr
 8000b50:	200002b4 	.word	0x200002b4
 8000b54:	20000354 	.word	0x20000354

08000b58 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	4a07      	ldr	r2, [pc, #28]	@ (8000b84 <vApplicationGetTimerTaskMemory+0x2c>)
 8000b68:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	4a06      	ldr	r2, [pc, #24]	@ (8000b88 <vApplicationGetTimerTaskMemory+0x30>)
 8000b6e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b76:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b78:	bf00      	nop
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	20000554 	.word	0x20000554
 8000b88:	200005f4 	.word	0x200005f4

08000b8c <Printf>:
/* Private variables ---------------------------------------------------------*/
char debug_buf[MAX_PRINT_BUF];
/* Private function prototypes -----------------------------------------------*/

void Printf(const char *fmt, ...)
{
 8000b8c:	b40f      	push	{r0, r1, r2, r3}
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b082      	sub	sp, #8
 8000b92:	af00      	add	r7, sp, #0
	va_list args = {0};
 8000b94:	2300      	movs	r3, #0
 8000b96:	607b      	str	r3, [r7, #4]

	va_start(args, fmt);
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	607b      	str	r3, [r7, #4]
	vsnprintf(debug_buf, MAX_PRINT_BUF, fmt, args);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	21ff      	movs	r1, #255	@ 0xff
 8000ba4:	480a      	ldr	r0, [pc, #40]	@ (8000bd0 <Printf+0x44>)
 8000ba6:	f007 fccf 	bl	8008548 <vsniprintf>
	va_end(args);

	HAL_UART_Transmit(DBG_UART, (uint8_t *)debug_buf, strlen(debug_buf), 0xFFFFFF);
 8000baa:	4809      	ldr	r0, [pc, #36]	@ (8000bd0 <Printf+0x44>)
 8000bac:	f7ff fad0 	bl	8000150 <strlen>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8000bb8:	4905      	ldr	r1, [pc, #20]	@ (8000bd0 <Printf+0x44>)
 8000bba:	4806      	ldr	r0, [pc, #24]	@ (8000bd4 <Printf+0x48>)
 8000bbc:	f004 f8a6 	bl	8004d0c <HAL_UART_Transmit>
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bca:	b004      	add	sp, #16
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	200009f4 	.word	0x200009f4
 8000bd4:	20000b3c 	.word	0x20000b3c

08000bd8 <hex_dump_line_print>:

static void hex_dump_line_print(const char *data, int length)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
	for (int i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	e012      	b.n	8000c0e <hex_dump_line_print+0x36>
		if (i < length) {
 8000be8:	68fa      	ldr	r2, [r7, #12]
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	da08      	bge.n	8000c02 <hex_dump_line_print+0x2a>
			Printf("%02x ", (unsigned char)data[i] & 0xFFu);
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	480a      	ldr	r0, [pc, #40]	@ (8000c24 <hex_dump_line_print+0x4c>)
 8000bfc:	f7ff ffc6 	bl	8000b8c <Printf>
 8000c00:	e002      	b.n	8000c08 <hex_dump_line_print+0x30>
		} else {
			Printf("   ");
 8000c02:	4809      	ldr	r0, [pc, #36]	@ (8000c28 <hex_dump_line_print+0x50>)
 8000c04:	f7ff ffc2 	bl	8000b8c <Printf>
	for (int i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	2b07      	cmp	r3, #7
 8000c12:	d9e9      	bls.n	8000be8 <hex_dump_line_print+0x10>
		}
	}
	Printf("\r\n");
 8000c14:	4805      	ldr	r0, [pc, #20]	@ (8000c2c <hex_dump_line_print+0x54>)
 8000c16:	f7ff ffb9 	bl	8000b8c <Printf>
}
 8000c1a:	bf00      	nop
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	080090e0 	.word	0x080090e0
 8000c28:	080090e8 	.word	0x080090e8
 8000c2c:	080090ec 	.word	0x080090ec

08000c30 <dump_printf>:

void dump_printf(const void *data, int size, const char* str)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
	const char *data_buf = (const char *)data;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	617b      	str	r3, [r7, #20]

	Printf(str);
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff ffa3 	bl	8000b8c <Printf>
	Printf("\r\n");
 8000c46:	480d      	ldr	r0, [pc, #52]	@ (8000c7c <dump_printf+0x4c>)
 8000c48:	f7ff ffa0 	bl	8000b8c <Printf>

	while(size > 0){
 8000c4c:	e00c      	b.n	8000c68 <dump_printf+0x38>
		hex_dump_line_print(data_buf, size);
 8000c4e:	68b9      	ldr	r1, [r7, #8]
 8000c50:	6978      	ldr	r0, [r7, #20]
 8000c52:	f7ff ffc1 	bl	8000bd8 <hex_dump_line_print>
		if(size < HEXDUMP_BYTES_IN_LINE){
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	2b07      	cmp	r3, #7
 8000c5a:	d909      	bls.n	8000c70 <dump_printf+0x40>
			break;
		}
		size -= HEXDUMP_BYTES_IN_LINE;
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	3b08      	subs	r3, #8
 8000c60:	60bb      	str	r3, [r7, #8]
		data_buf += HEXDUMP_BYTES_IN_LINE;
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	3308      	adds	r3, #8
 8000c66:	617b      	str	r3, [r7, #20]
	while(size > 0){
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	dcef      	bgt.n	8000c4e <dump_printf+0x1e>
	}
}
 8000c6e:	e000      	b.n	8000c72 <dump_printf+0x42>
			break;
 8000c70:	bf00      	nop
}
 8000c72:	bf00      	nop
 8000c74:	3718      	adds	r7, #24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	080090ec 	.word	0x080090ec

08000c80 <get_model>:
    __set_MSP(*(__IO uint32_t *)SYSTEMBOOT_ADDR);
    Jump_To_Application();
}

const char* get_model(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
	return "MSV2008_Front panel";
 8000c84:	4b02      	ldr	r3, [pc, #8]	@ (8000c90 <get_model+0x10>)
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	080092a4 	.word	0x080092a4

08000c94 <banner>:

static void banner(void)
{
 8000c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af04      	add	r7, sp, #16
	LOG_INF("======================================================");
 8000c9a:	4877      	ldr	r0, [pc, #476]	@ (8000e78 <banner+0x1e4>)
 8000c9c:	f7ff ff76 	bl	8000b8c <Printf>
	LOG_INF("\t YNS Vision LED Controller");
 8000ca0:	4876      	ldr	r0, [pc, #472]	@ (8000e7c <banner+0x1e8>)
 8000ca2:	f7ff ff73 	bl	8000b8c <Printf>
	LOG_INF("\t Build Data	: %04d-%02d-%02d %02d:%02d:%02d", BUILD_YEAR, BUILD_MONTH, BUILD_DAY,
 8000ca6:	234d      	movs	r3, #77	@ 0x4d
 8000ca8:	2b3f      	cmp	r3, #63	@ 0x3f
 8000caa:	d017      	beq.n	8000cdc <banner+0x48>
 8000cac:	2332      	movs	r3, #50	@ 0x32
 8000cae:	3b30      	subs	r3, #48	@ 0x30
 8000cb0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000cb4:	fb03 f202 	mul.w	r2, r3, r2
 8000cb8:	2330      	movs	r3, #48	@ 0x30
 8000cba:	3b30      	subs	r3, #48	@ 0x30
 8000cbc:	2164      	movs	r1, #100	@ 0x64
 8000cbe:	fb01 f303 	mul.w	r3, r1, r3
 8000cc2:	18d1      	adds	r1, r2, r3
 8000cc4:	2332      	movs	r3, #50	@ 0x32
 8000cc6:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8000cca:	4613      	mov	r3, r2
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	4413      	add	r3, r2
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	18ca      	adds	r2, r1, r3
 8000cd4:	2335      	movs	r3, #53	@ 0x35
 8000cd6:	3b30      	subs	r3, #48	@ 0x30
 8000cd8:	18d4      	adds	r4, r2, r3
 8000cda:	e000      	b.n	8000cde <banner+0x4a>
 8000cdc:	2463      	movs	r4, #99	@ 0x63
 8000cde:	234d      	movs	r3, #77	@ 0x4d
 8000ce0:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ce2:	d067      	beq.n	8000db4 <banner+0x120>
 8000ce4:	234d      	movs	r3, #77	@ 0x4d
 8000ce6:	2b4a      	cmp	r3, #74	@ 0x4a
 8000ce8:	d105      	bne.n	8000cf6 <banner+0x62>
 8000cea:	2361      	movs	r3, #97	@ 0x61
 8000cec:	2b61      	cmp	r3, #97	@ 0x61
 8000cee:	d102      	bne.n	8000cf6 <banner+0x62>
 8000cf0:	2372      	movs	r3, #114	@ 0x72
 8000cf2:	2b6e      	cmp	r3, #110	@ 0x6e
 8000cf4:	d05c      	beq.n	8000db0 <banner+0x11c>
 8000cf6:	234d      	movs	r3, #77	@ 0x4d
 8000cf8:	2b46      	cmp	r3, #70	@ 0x46
 8000cfa:	d056      	beq.n	8000daa <banner+0x116>
 8000cfc:	234d      	movs	r3, #77	@ 0x4d
 8000cfe:	2b4d      	cmp	r3, #77	@ 0x4d
 8000d00:	d105      	bne.n	8000d0e <banner+0x7a>
 8000d02:	2361      	movs	r3, #97	@ 0x61
 8000d04:	2b61      	cmp	r3, #97	@ 0x61
 8000d06:	d102      	bne.n	8000d0e <banner+0x7a>
 8000d08:	2372      	movs	r3, #114	@ 0x72
 8000d0a:	2b72      	cmp	r3, #114	@ 0x72
 8000d0c:	d04b      	beq.n	8000da6 <banner+0x112>
 8000d0e:	234d      	movs	r3, #77	@ 0x4d
 8000d10:	2b41      	cmp	r3, #65	@ 0x41
 8000d12:	d102      	bne.n	8000d1a <banner+0x86>
 8000d14:	2361      	movs	r3, #97	@ 0x61
 8000d16:	2b70      	cmp	r3, #112	@ 0x70
 8000d18:	d042      	beq.n	8000da0 <banner+0x10c>
 8000d1a:	234d      	movs	r3, #77	@ 0x4d
 8000d1c:	2b4d      	cmp	r3, #77	@ 0x4d
 8000d1e:	d105      	bne.n	8000d2c <banner+0x98>
 8000d20:	2361      	movs	r3, #97	@ 0x61
 8000d22:	2b61      	cmp	r3, #97	@ 0x61
 8000d24:	d102      	bne.n	8000d2c <banner+0x98>
 8000d26:	2372      	movs	r3, #114	@ 0x72
 8000d28:	2b79      	cmp	r3, #121	@ 0x79
 8000d2a:	d036      	beq.n	8000d9a <banner+0x106>
 8000d2c:	234d      	movs	r3, #77	@ 0x4d
 8000d2e:	2b4a      	cmp	r3, #74	@ 0x4a
 8000d30:	d105      	bne.n	8000d3e <banner+0xaa>
 8000d32:	2361      	movs	r3, #97	@ 0x61
 8000d34:	2b75      	cmp	r3, #117	@ 0x75
 8000d36:	d102      	bne.n	8000d3e <banner+0xaa>
 8000d38:	2372      	movs	r3, #114	@ 0x72
 8000d3a:	2b6e      	cmp	r3, #110	@ 0x6e
 8000d3c:	d02a      	beq.n	8000d94 <banner+0x100>
 8000d3e:	234d      	movs	r3, #77	@ 0x4d
 8000d40:	2b4a      	cmp	r3, #74	@ 0x4a
 8000d42:	d105      	bne.n	8000d50 <banner+0xbc>
 8000d44:	2361      	movs	r3, #97	@ 0x61
 8000d46:	2b75      	cmp	r3, #117	@ 0x75
 8000d48:	d102      	bne.n	8000d50 <banner+0xbc>
 8000d4a:	2372      	movs	r3, #114	@ 0x72
 8000d4c:	2b6c      	cmp	r3, #108	@ 0x6c
 8000d4e:	d01e      	beq.n	8000d8e <banner+0xfa>
 8000d50:	234d      	movs	r3, #77	@ 0x4d
 8000d52:	2b41      	cmp	r3, #65	@ 0x41
 8000d54:	d102      	bne.n	8000d5c <banner+0xc8>
 8000d56:	2361      	movs	r3, #97	@ 0x61
 8000d58:	2b75      	cmp	r3, #117	@ 0x75
 8000d5a:	d015      	beq.n	8000d88 <banner+0xf4>
 8000d5c:	234d      	movs	r3, #77	@ 0x4d
 8000d5e:	2b53      	cmp	r3, #83	@ 0x53
 8000d60:	d010      	beq.n	8000d84 <banner+0xf0>
 8000d62:	234d      	movs	r3, #77	@ 0x4d
 8000d64:	2b4f      	cmp	r3, #79	@ 0x4f
 8000d66:	d00b      	beq.n	8000d80 <banner+0xec>
 8000d68:	234d      	movs	r3, #77	@ 0x4d
 8000d6a:	2b4e      	cmp	r3, #78	@ 0x4e
 8000d6c:	d006      	beq.n	8000d7c <banner+0xe8>
 8000d6e:	234d      	movs	r3, #77	@ 0x4d
 8000d70:	2b44      	cmp	r3, #68	@ 0x44
 8000d72:	d101      	bne.n	8000d78 <banner+0xe4>
 8000d74:	220c      	movs	r2, #12
 8000d76:	e009      	b.n	8000d8c <banner+0xf8>
 8000d78:	2263      	movs	r2, #99	@ 0x63
 8000d7a:	e007      	b.n	8000d8c <banner+0xf8>
 8000d7c:	220b      	movs	r2, #11
 8000d7e:	e005      	b.n	8000d8c <banner+0xf8>
 8000d80:	220a      	movs	r2, #10
 8000d82:	e003      	b.n	8000d8c <banner+0xf8>
 8000d84:	2209      	movs	r2, #9
 8000d86:	e001      	b.n	8000d8c <banner+0xf8>
 8000d88:	2208      	movs	r2, #8
 8000d8a:	e002      	b.n	8000d92 <banner+0xfe>
 8000d8c:	e001      	b.n	8000d92 <banner+0xfe>
 8000d8e:	2207      	movs	r2, #7
 8000d90:	e002      	b.n	8000d98 <banner+0x104>
 8000d92:	e001      	b.n	8000d98 <banner+0x104>
 8000d94:	2206      	movs	r2, #6
 8000d96:	e002      	b.n	8000d9e <banner+0x10a>
 8000d98:	e001      	b.n	8000d9e <banner+0x10a>
 8000d9a:	2205      	movs	r2, #5
 8000d9c:	e002      	b.n	8000da4 <banner+0x110>
 8000d9e:	e001      	b.n	8000da4 <banner+0x110>
 8000da0:	2204      	movs	r2, #4
 8000da2:	e004      	b.n	8000dae <banner+0x11a>
 8000da4:	e003      	b.n	8000dae <banner+0x11a>
 8000da6:	2203      	movs	r2, #3
 8000da8:	e005      	b.n	8000db6 <banner+0x122>
 8000daa:	2202      	movs	r2, #2
 8000dac:	e003      	b.n	8000db6 <banner+0x122>
 8000dae:	e002      	b.n	8000db6 <banner+0x122>
 8000db0:	2201      	movs	r2, #1
 8000db2:	e000      	b.n	8000db6 <banner+0x122>
 8000db4:	2263      	movs	r2, #99	@ 0x63
 8000db6:	234d      	movs	r3, #77	@ 0x4d
 8000db8:	2b3f      	cmp	r3, #63	@ 0x3f
 8000dba:	d010      	beq.n	8000dde <banner+0x14a>
 8000dbc:	2332      	movs	r3, #50	@ 0x32
 8000dbe:	2b2f      	cmp	r3, #47	@ 0x2f
 8000dc0:	d908      	bls.n	8000dd4 <banner+0x140>
 8000dc2:	2332      	movs	r3, #50	@ 0x32
 8000dc4:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8000dc8:	460b      	mov	r3, r1
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	440b      	add	r3, r1
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	e000      	b.n	8000dd6 <banner+0x142>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2330      	movs	r3, #48	@ 0x30
 8000dd8:	3b30      	subs	r3, #48	@ 0x30
 8000dda:	18cd      	adds	r5, r1, r3
 8000ddc:	e000      	b.n	8000de0 <banner+0x14c>
 8000dde:	2563      	movs	r5, #99	@ 0x63
 8000de0:	2330      	movs	r3, #48	@ 0x30
 8000de2:	2b3f      	cmp	r3, #63	@ 0x3f
 8000de4:	d00c      	beq.n	8000e00 <banner+0x16c>
 8000de6:	2330      	movs	r3, #48	@ 0x30
 8000de8:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8000dec:	460b      	mov	r3, r1
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	440b      	add	r3, r1
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	4619      	mov	r1, r3
 8000df6:	2339      	movs	r3, #57	@ 0x39
 8000df8:	440b      	add	r3, r1
 8000dfa:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8000dfe:	e000      	b.n	8000e02 <banner+0x16e>
 8000e00:	2163      	movs	r1, #99	@ 0x63
 8000e02:	2330      	movs	r3, #48	@ 0x30
 8000e04:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e06:	d00c      	beq.n	8000e22 <banner+0x18e>
 8000e08:	2333      	movs	r3, #51	@ 0x33
 8000e0a:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 8000e0e:	4603      	mov	r3, r0
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	4403      	add	r3, r0
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	4618      	mov	r0, r3
 8000e18:	2334      	movs	r3, #52	@ 0x34
 8000e1a:	4403      	add	r3, r0
 8000e1c:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 8000e20:	e000      	b.n	8000e24 <banner+0x190>
 8000e22:	2063      	movs	r0, #99	@ 0x63
 8000e24:	2330      	movs	r3, #48	@ 0x30
 8000e26:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e28:	d00b      	beq.n	8000e42 <banner+0x1ae>
 8000e2a:	2331      	movs	r3, #49	@ 0x31
 8000e2c:	f1a3 0630 	sub.w	r6, r3, #48	@ 0x30
 8000e30:	4633      	mov	r3, r6
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	4433      	add	r3, r6
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	461e      	mov	r6, r3
 8000e3a:	2337      	movs	r3, #55	@ 0x37
 8000e3c:	4433      	add	r3, r6
 8000e3e:	3b30      	subs	r3, #48	@ 0x30
 8000e40:	e000      	b.n	8000e44 <banner+0x1b0>
 8000e42:	2363      	movs	r3, #99	@ 0x63
 8000e44:	9302      	str	r3, [sp, #8]
 8000e46:	9001      	str	r0, [sp, #4]
 8000e48:	9100      	str	r1, [sp, #0]
 8000e4a:	462b      	mov	r3, r5
 8000e4c:	4621      	mov	r1, r4
 8000e4e:	480c      	ldr	r0, [pc, #48]	@ (8000e80 <banner+0x1ec>)
 8000e50:	f7ff fe9c 	bl	8000b8c <Printf>
			BUILD_HOUR, BUILD_MIN, BUILD_SEC);
	LOG_INF("\tModel		: %s", get_model());
 8000e54:	f7ff ff14 	bl	8000c80 <get_model>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4809      	ldr	r0, [pc, #36]	@ (8000e84 <banner+0x1f0>)
 8000e5e:	f7ff fe95 	bl	8000b8c <Printf>
	LOG_INF("\tVersion		: %s", _VERSION_);
 8000e62:	4909      	ldr	r1, [pc, #36]	@ (8000e88 <banner+0x1f4>)
 8000e64:	4809      	ldr	r0, [pc, #36]	@ (8000e8c <banner+0x1f8>)
 8000e66:	f7ff fe91 	bl	8000b8c <Printf>
	LOG_INF("======================================================");
 8000e6a:	4803      	ldr	r0, [pc, #12]	@ (8000e78 <banner+0x1e4>)
 8000e6c:	f7ff fe8e 	bl	8000b8c <Printf>
}
 8000e70:	bf00      	nop
 8000e72:	3704      	adds	r7, #4
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e78:	080092b8 	.word	0x080092b8
 8000e7c:	080092f8 	.word	0x080092f8
 8000e80:	0800931c 	.word	0x0800931c
 8000e84:	08009350 	.word	0x08009350
 8000e88:	08009364 	.word	0x08009364
 8000e8c:	0800936c 	.word	0x0800936c

08000e90 <Init_device>:

static int Init_device(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
	do{
		if(uart_init()){
 8000e94:	f7ff fe3a 	bl	8000b0c <uart_init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d002      	beq.n	8000ea4 <Init_device+0x14>
			return -1;
 8000e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea2:	e00a      	b.n	8000eba <Init_device+0x2a>
		}
		app_config_init();
 8000ea4:	f7ff fc08 	bl	80006b8 <app_config_init>

		if(apps_init()){
 8000ea8:	f7ff fbc6 	bl	8000638 <apps_init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d002      	beq.n	8000eb8 <Init_device+0x28>
			return -1;
 8000eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb6:	e000      	b.n	8000eba <Init_device+0x2a>
		}
	}while(0);

	return 0;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec0:	b5b0      	push	{r4, r5, r7, lr}
 8000ec2:	b090      	sub	sp, #64	@ 0x40
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec6:	f002 fab9 	bl	800343c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eca:	f000 f85f 	bl	8000f8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ece:	f000 f8f9 	bl	80010c4 <MX_GPIO_Init>
#if ENABLE_WATCHDOG
  MX_IWDG_Init();
#endif
  MX_USART1_UART_Init();
 8000ed2:	f000 f8a3 	bl	800101c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000ed6:	f000 f8cb 	bl	8001070 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  banner();
 8000eda:	f7ff fedb 	bl	8000c94 <banner>
  Init_device();
 8000ede:	f7ff ffd7 	bl	8000e90 <Init_device>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of opLedTimer */
  osTimerDef(opLedTimer, opLedCb);
 8000ee2:	4b22      	ldr	r3, [pc, #136]	@ (8000f6c <main+0xac>)
 8000ee4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  opLedTimerHandle = osTimerCreate(osTimer(opLedTimer), osTimerPeriodic, NULL);
 8000eea:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f004 fdb4 	bl	8005a60 <osTimerCreate>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	4a1d      	ldr	r2, [pc, #116]	@ (8000f70 <main+0xb0>)
 8000efc:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of EventTask */
  osThreadDef(EventTask, eventTask, osPriorityNormal, 0, 512);
 8000efe:	4b1d      	ldr	r3, [pc, #116]	@ (8000f74 <main+0xb4>)
 8000f00:	f107 041c 	add.w	r4, r7, #28
 8000f04:	461d      	mov	r5, r3
 8000f06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f0a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EventTaskHandle = osThreadCreate(osThread(EventTask), NULL);
 8000f12:	f107 031c 	add.w	r3, r7, #28
 8000f16:	2100      	movs	r1, #0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f004 fd40 	bl	800599e <osThreadCreate>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	4a15      	ldr	r2, [pc, #84]	@ (8000f78 <main+0xb8>)
 8000f22:	6013      	str	r3, [r2, #0]

  /* definition and creation of seriaTask */
  osThreadDef(seriaTask, SerialTask, osPriorityIdle, 0, 128);
 8000f24:	4b15      	ldr	r3, [pc, #84]	@ (8000f7c <main+0xbc>)
 8000f26:	463c      	mov	r4, r7
 8000f28:	461d      	mov	r5, r3
 8000f2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  seriaTaskHandle = osThreadCreate(osThread(seriaTask), NULL);
 8000f36:	463b      	mov	r3, r7
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f004 fd2f 	bl	800599e <osThreadCreate>
 8000f40:	4603      	mov	r3, r0
 8000f42:	4a0f      	ldr	r2, [pc, #60]	@ (8000f80 <main+0xc0>)
 8000f44:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  if(EventTaskHandle == NULL){
 8000f46:	4b0c      	ldr	r3, [pc, #48]	@ (8000f78 <main+0xb8>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d102      	bne.n	8000f54 <main+0x94>
	  LOG_ERR("Event Task Create Error!!");
 8000f4e:	480d      	ldr	r0, [pc, #52]	@ (8000f84 <main+0xc4>)
 8000f50:	f7ff fe1c 	bl	8000b8c <Printf>
  }
  if(seriaTaskHandle == NULL){
 8000f54:	4b0a      	ldr	r3, [pc, #40]	@ (8000f80 <main+0xc0>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d102      	bne.n	8000f62 <main+0xa2>
	  LOG_ERR("Serial Task Create Error!!");
 8000f5c:	480a      	ldr	r0, [pc, #40]	@ (8000f88 <main+0xc8>)
 8000f5e:	f7ff fe15 	bl	8000b8c <Printf>
  }
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f62:	f004 fd15 	bl	8005990 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f66:	bf00      	nop
 8000f68:	e7fd      	b.n	8000f66 <main+0xa6>
 8000f6a:	bf00      	nop
 8000f6c:	08001249 	.word	0x08001249
 8000f70:	20000b8c 	.word	0x20000b8c
 8000f74:	080093d8 	.word	0x080093d8
 8000f78:	20000b84 	.word	0x20000b84
 8000f7c:	08009400 	.word	0x08009400
 8000f80:	20000b88 	.word	0x20000b88
 8000f84:	08009384 	.word	0x08009384
 8000f88:	080093a8 	.word	0x080093a8

08000f8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b090      	sub	sp, #64	@ 0x40
 8000f90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f92:	f107 0318 	add.w	r3, r7, #24
 8000f96:	2228      	movs	r2, #40	@ 0x28
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f007 fae2 	bl	8008564 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
 8000fac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000fae:	2309      	movs	r3, #9
 8000fb0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fb2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fb6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fc8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fcc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fce:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd4:	f107 0318 	add.w	r3, r7, #24
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f002 ffc9 	bl	8003f70 <HAL_RCC_OscConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000fe4:	f000 f952 	bl	800128c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe8:	230f      	movs	r3, #15
 8000fea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fec:	2302      	movs	r3, #2
 8000fee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ff4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ff8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	2102      	movs	r1, #2
 8001002:	4618      	mov	r0, r3
 8001004:	f003 fa36 	bl	8004474 <HAL_RCC_ClockConfig>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800100e:	f000 f93d 	bl	800128c <Error_Handler>
  }
}
 8001012:	bf00      	nop
 8001014:	3740      	adds	r7, #64	@ 0x40
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001020:	4b11      	ldr	r3, [pc, #68]	@ (8001068 <MX_USART1_UART_Init+0x4c>)
 8001022:	4a12      	ldr	r2, [pc, #72]	@ (800106c <MX_USART1_UART_Init+0x50>)
 8001024:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001026:	4b10      	ldr	r3, [pc, #64]	@ (8001068 <MX_USART1_UART_Init+0x4c>)
 8001028:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800102c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800102e:	4b0e      	ldr	r3, [pc, #56]	@ (8001068 <MX_USART1_UART_Init+0x4c>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001034:	4b0c      	ldr	r3, [pc, #48]	@ (8001068 <MX_USART1_UART_Init+0x4c>)
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800103a:	4b0b      	ldr	r3, [pc, #44]	@ (8001068 <MX_USART1_UART_Init+0x4c>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001040:	4b09      	ldr	r3, [pc, #36]	@ (8001068 <MX_USART1_UART_Init+0x4c>)
 8001042:	220c      	movs	r2, #12
 8001044:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001046:	4b08      	ldr	r3, [pc, #32]	@ (8001068 <MX_USART1_UART_Init+0x4c>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800104c:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <MX_USART1_UART_Init+0x4c>)
 800104e:	2200      	movs	r2, #0
 8001050:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001052:	4805      	ldr	r0, [pc, #20]	@ (8001068 <MX_USART1_UART_Init+0x4c>)
 8001054:	f003 fe0a 	bl	8004c6c <HAL_UART_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800105e:	f000 f915 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000af4 	.word	0x20000af4
 800106c:	40013800 	.word	0x40013800

08001070 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001074:	4b11      	ldr	r3, [pc, #68]	@ (80010bc <MX_USART2_UART_Init+0x4c>)
 8001076:	4a12      	ldr	r2, [pc, #72]	@ (80010c0 <MX_USART2_UART_Init+0x50>)
 8001078:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800107a:	4b10      	ldr	r3, [pc, #64]	@ (80010bc <MX_USART2_UART_Init+0x4c>)
 800107c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001080:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001082:	4b0e      	ldr	r3, [pc, #56]	@ (80010bc <MX_USART2_UART_Init+0x4c>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001088:	4b0c      	ldr	r3, [pc, #48]	@ (80010bc <MX_USART2_UART_Init+0x4c>)
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800108e:	4b0b      	ldr	r3, [pc, #44]	@ (80010bc <MX_USART2_UART_Init+0x4c>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001094:	4b09      	ldr	r3, [pc, #36]	@ (80010bc <MX_USART2_UART_Init+0x4c>)
 8001096:	220c      	movs	r2, #12
 8001098:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800109a:	4b08      	ldr	r3, [pc, #32]	@ (80010bc <MX_USART2_UART_Init+0x4c>)
 800109c:	2200      	movs	r2, #0
 800109e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a0:	4b06      	ldr	r3, [pc, #24]	@ (80010bc <MX_USART2_UART_Init+0x4c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010a6:	4805      	ldr	r0, [pc, #20]	@ (80010bc <MX_USART2_UART_Init+0x4c>)
 80010a8:	f003 fde0 	bl	8004c6c <HAL_UART_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010b2:	f000 f8eb 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000b3c 	.word	0x20000b3c
 80010c0:	40004400 	.word	0x40004400

080010c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ca:	f107 0310 	add.w	r3, r7, #16
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d8:	4b45      	ldr	r3, [pc, #276]	@ (80011f0 <MX_GPIO_Init+0x12c>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	4a44      	ldr	r2, [pc, #272]	@ (80011f0 <MX_GPIO_Init+0x12c>)
 80010de:	f043 0310 	orr.w	r3, r3, #16
 80010e2:	6193      	str	r3, [r2, #24]
 80010e4:	4b42      	ldr	r3, [pc, #264]	@ (80011f0 <MX_GPIO_Init+0x12c>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	f003 0310 	and.w	r3, r3, #16
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010f0:	4b3f      	ldr	r3, [pc, #252]	@ (80011f0 <MX_GPIO_Init+0x12c>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	4a3e      	ldr	r2, [pc, #248]	@ (80011f0 <MX_GPIO_Init+0x12c>)
 80010f6:	f043 0320 	orr.w	r3, r3, #32
 80010fa:	6193      	str	r3, [r2, #24]
 80010fc:	4b3c      	ldr	r3, [pc, #240]	@ (80011f0 <MX_GPIO_Init+0x12c>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	f003 0320 	and.w	r3, r3, #32
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001108:	4b39      	ldr	r3, [pc, #228]	@ (80011f0 <MX_GPIO_Init+0x12c>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	4a38      	ldr	r2, [pc, #224]	@ (80011f0 <MX_GPIO_Init+0x12c>)
 800110e:	f043 0304 	orr.w	r3, r3, #4
 8001112:	6193      	str	r3, [r2, #24]
 8001114:	4b36      	ldr	r3, [pc, #216]	@ (80011f0 <MX_GPIO_Init+0x12c>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	f003 0304 	and.w	r3, r3, #4
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001120:	4b33      	ldr	r3, [pc, #204]	@ (80011f0 <MX_GPIO_Init+0x12c>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	4a32      	ldr	r2, [pc, #200]	@ (80011f0 <MX_GPIO_Init+0x12c>)
 8001126:	f043 0308 	orr.w	r3, r3, #8
 800112a:	6193      	str	r3, [r2, #24]
 800112c:	4b30      	ldr	r3, [pc, #192]	@ (80011f0 <MX_GPIO_Init+0x12c>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	f003 0308 	and.w	r3, r3, #8
 8001134:	603b      	str	r3, [r7, #0]
 8001136:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, GPIO_PIN_RESET);
 8001138:	2200      	movs	r2, #0
 800113a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800113e:	482d      	ldr	r0, [pc, #180]	@ (80011f4 <MX_GPIO_Init+0x130>)
 8001140:	f002 fee5 	bl	8003f0e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin
 8001144:	2200      	movs	r2, #0
 8001146:	f24f 31f8 	movw	r1, #62456	@ 0xf3f8
 800114a:	482b      	ldr	r0, [pc, #172]	@ (80011f8 <MX_GPIO_Init+0x134>)
 800114c:	f002 fedf 	bl	8003f0e <HAL_GPIO_WritePin>
                          |TRG2_Pin|TRG3_Pin|TRG4_Pin|TRG5_Pin
                          |TRG6_Pin|TRG7_Pin|TRG8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_EN_Pin|LCD_RW_Pin|LCD_RS_Pin|TRG1_Pin, GPIO_PIN_RESET);
 8001150:	2200      	movs	r2, #0
 8001152:	f44f 4119 	mov.w	r1, #39168	@ 0x9900
 8001156:	4829      	ldr	r0, [pc, #164]	@ (80011fc <MX_GPIO_Init+0x138>)
 8001158:	f002 fed9 	bl	8003f0e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : STATUS_LED_Pin */
  GPIO_InitStruct.Pin = STATUS_LED_Pin;
 800115c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001160:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001162:	2301      	movs	r3, #1
 8001164:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116a:	2302      	movs	r3, #2
 800116c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(STATUS_LED_GPIO_Port, &GPIO_InitStruct);
 800116e:	f107 0310 	add.w	r3, r7, #16
 8001172:	4619      	mov	r1, r3
 8001174:	481f      	ldr	r0, [pc, #124]	@ (80011f4 <MX_GPIO_Init+0x130>)
 8001176:	f002 fd2f 	bl	8003bd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DOWN_SW_Pin UP_SW_Pin */
  GPIO_InitStruct.Pin = DOWN_SW_Pin|UP_SW_Pin;
 800117a:	23c0      	movs	r3, #192	@ 0xc0
 800117c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001186:	f107 0310 	add.w	r3, r7, #16
 800118a:	4619      	mov	r1, r3
 800118c:	481b      	ldr	r0, [pc, #108]	@ (80011fc <MX_GPIO_Init+0x138>)
 800118e:	f002 fd23 	bl	8003bd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENTER_SW_Pin MODE_SW_Pin */
  GPIO_InitStruct.Pin = ENTER_SW_Pin|MODE_SW_Pin;
 8001192:	2303      	movs	r3, #3
 8001194:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119e:	f107 0310 	add.w	r3, r7, #16
 80011a2:	4619      	mov	r1, r3
 80011a4:	4814      	ldr	r0, [pc, #80]	@ (80011f8 <MX_GPIO_Init+0x134>)
 80011a6:	f002 fd17 	bl	8003bd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D7_Pin LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin
                           TRG2_Pin TRG3_Pin TRG4_Pin TRG5_Pin
                           TRG6_Pin TRG7_Pin TRG8_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin
 80011aa:	f24f 33f8 	movw	r3, #62456	@ 0xf3f8
 80011ae:	613b      	str	r3, [r7, #16]
                          |TRG2_Pin|TRG3_Pin|TRG4_Pin|TRG5_Pin
                          |TRG6_Pin|TRG7_Pin|TRG8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b0:	2301      	movs	r3, #1
 80011b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b8:	2302      	movs	r3, #2
 80011ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011bc:	f107 0310 	add.w	r3, r7, #16
 80011c0:	4619      	mov	r1, r3
 80011c2:	480d      	ldr	r0, [pc, #52]	@ (80011f8 <MX_GPIO_Init+0x134>)
 80011c4:	f002 fd08 	bl	8003bd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_EN_Pin LCD_RW_Pin LCD_RS_Pin TRG1_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin|LCD_RW_Pin|LCD_RS_Pin|TRG1_Pin;
 80011c8:	f44f 4319 	mov.w	r3, #39168	@ 0x9900
 80011cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ce:	2301      	movs	r3, #1
 80011d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2302      	movs	r3, #2
 80011d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011da:	f107 0310 	add.w	r3, r7, #16
 80011de:	4619      	mov	r1, r3
 80011e0:	4806      	ldr	r0, [pc, #24]	@ (80011fc <MX_GPIO_Init+0x138>)
 80011e2:	f002 fcf9 	bl	8003bd8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011e6:	bf00      	nop
 80011e8:	3720      	adds	r7, #32
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40021000 	.word	0x40021000
 80011f4:	40011000 	.word	0x40011000
 80011f8:	40010c00 	.word	0x40010c00
 80011fc:	40010800 	.word	0x40010800

08001200 <eventTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_eventTask */
void eventTask(void const * argument)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	//event_queue_observer_t main_evt;

	LOG_INF("Run Event Task");
 8001208:	4809      	ldr	r0, [pc, #36]	@ (8001230 <eventTask+0x30>)
 800120a:	f7ff fcbf 	bl	8000b8c <Printf>

	LCD_INIT();  // for osDelay
 800120e:	f000 fafb 	bl	8001808 <LCD_INIT>

	screen_init();
 8001212:	f000 fb35 	bl	8001880 <screen_init>

	osTimerStart(opLedTimerHandle, OP_LED_TIMER_TICK);
 8001216:	4b07      	ldr	r3, [pc, #28]	@ (8001234 <eventTask+0x34>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800121e:	4618      	mov	r0, r3
 8001220:	f004 fc52 	bl	8005ac8 <osTimerStart>
  /* Infinite loop */
	AppsTask();
 8001224:	f7ff f98e 	bl	8000544 <AppsTask>
  /* USER CODE END 5 */
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	0800941c 	.word	0x0800941c
 8001234:	20000b8c 	.word	0x20000b8c

08001238 <SerialTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SerialTask */
void SerialTask(void const * argument)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SerialTask */
  /* Infinite loop */
  for(;;)
  {
	  uart_task();
 8001240:	f7ff fbf0 	bl	8000a24 <uart_task>
 8001244:	e7fc      	b.n	8001240 <SerialTask+0x8>
	...

08001248 <opLedCb>:
  /* USER CODE END SerialTask */
}

/* opLedCb function */
void opLedCb(void const * argument)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN opLedCb */
	HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 8001250:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001254:	4803      	ldr	r0, [pc, #12]	@ (8001264 <opLedCb+0x1c>)
 8001256:	f002 fe72 	bl	8003f3e <HAL_GPIO_TogglePin>
  /* USER CODE END opLedCb */
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40011000 	.word	0x40011000

08001268 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a04      	ldr	r2, [pc, #16]	@ (8001288 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d101      	bne.n	800127e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800127a:	f002 f8f5 	bl	8003468 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40000800 	.word	0x40000800

0800128c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001290:	b672      	cpsid	i
}
 8001292:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001294:	bf00      	nop
 8001296:	e7fd      	b.n	8001294 <Error_Handler+0x8>

08001298 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800129e:	4b18      	ldr	r3, [pc, #96]	@ (8001300 <HAL_MspInit+0x68>)
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	4a17      	ldr	r2, [pc, #92]	@ (8001300 <HAL_MspInit+0x68>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6193      	str	r3, [r2, #24]
 80012aa:	4b15      	ldr	r3, [pc, #84]	@ (8001300 <HAL_MspInit+0x68>)
 80012ac:	699b      	ldr	r3, [r3, #24]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b6:	4b12      	ldr	r3, [pc, #72]	@ (8001300 <HAL_MspInit+0x68>)
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	4a11      	ldr	r2, [pc, #68]	@ (8001300 <HAL_MspInit+0x68>)
 80012bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012c0:	61d3      	str	r3, [r2, #28]
 80012c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001300 <HAL_MspInit+0x68>)
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012ce:	2200      	movs	r2, #0
 80012d0:	210f      	movs	r1, #15
 80012d2:	f06f 0001 	mvn.w	r0, #1
 80012d6:	f002 f998 	bl	800360a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012da:	4b0a      	ldr	r3, [pc, #40]	@ (8001304 <HAL_MspInit+0x6c>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	4a04      	ldr	r2, [pc, #16]	@ (8001304 <HAL_MspInit+0x6c>)
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012f6:	bf00      	nop
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40021000 	.word	0x40021000
 8001304:	40010000 	.word	0x40010000

08001308 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	@ 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0318 	add.w	r3, r7, #24
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a3b      	ldr	r2, [pc, #236]	@ (8001410 <HAL_UART_MspInit+0x108>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d13a      	bne.n	800139e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001328:	4b3a      	ldr	r3, [pc, #232]	@ (8001414 <HAL_UART_MspInit+0x10c>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	4a39      	ldr	r2, [pc, #228]	@ (8001414 <HAL_UART_MspInit+0x10c>)
 800132e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001332:	6193      	str	r3, [r2, #24]
 8001334:	4b37      	ldr	r3, [pc, #220]	@ (8001414 <HAL_UART_MspInit+0x10c>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800133c:	617b      	str	r3, [r7, #20]
 800133e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001340:	4b34      	ldr	r3, [pc, #208]	@ (8001414 <HAL_UART_MspInit+0x10c>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	4a33      	ldr	r2, [pc, #204]	@ (8001414 <HAL_UART_MspInit+0x10c>)
 8001346:	f043 0304 	orr.w	r3, r3, #4
 800134a:	6193      	str	r3, [r2, #24]
 800134c:	4b31      	ldr	r3, [pc, #196]	@ (8001414 <HAL_UART_MspInit+0x10c>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f003 0304 	and.w	r3, r3, #4
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001358:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800135c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001362:	2303      	movs	r3, #3
 8001364:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	f107 0318 	add.w	r3, r7, #24
 800136a:	4619      	mov	r1, r3
 800136c:	482a      	ldr	r0, [pc, #168]	@ (8001418 <HAL_UART_MspInit+0x110>)
 800136e:	f002 fc33 	bl	8003bd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001372:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001376:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001380:	f107 0318 	add.w	r3, r7, #24
 8001384:	4619      	mov	r1, r3
 8001386:	4824      	ldr	r0, [pc, #144]	@ (8001418 <HAL_UART_MspInit+0x110>)
 8001388:	f002 fc26 	bl	8003bd8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800138c:	2200      	movs	r2, #0
 800138e:	2105      	movs	r1, #5
 8001390:	2025      	movs	r0, #37	@ 0x25
 8001392:	f002 f93a 	bl	800360a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001396:	2025      	movs	r0, #37	@ 0x25
 8001398:	f002 f953 	bl	8003642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800139c:	e034      	b.n	8001408 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a1e      	ldr	r2, [pc, #120]	@ (800141c <HAL_UART_MspInit+0x114>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d12f      	bne.n	8001408 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80013a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001414 <HAL_UART_MspInit+0x10c>)
 80013aa:	69db      	ldr	r3, [r3, #28]
 80013ac:	4a19      	ldr	r2, [pc, #100]	@ (8001414 <HAL_UART_MspInit+0x10c>)
 80013ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013b2:	61d3      	str	r3, [r2, #28]
 80013b4:	4b17      	ldr	r3, [pc, #92]	@ (8001414 <HAL_UART_MspInit+0x10c>)
 80013b6:	69db      	ldr	r3, [r3, #28]
 80013b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c0:	4b14      	ldr	r3, [pc, #80]	@ (8001414 <HAL_UART_MspInit+0x10c>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	4a13      	ldr	r2, [pc, #76]	@ (8001414 <HAL_UART_MspInit+0x10c>)
 80013c6:	f043 0304 	orr.w	r3, r3, #4
 80013ca:	6193      	str	r3, [r2, #24]
 80013cc:	4b11      	ldr	r3, [pc, #68]	@ (8001414 <HAL_UART_MspInit+0x10c>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013d8:	2304      	movs	r3, #4
 80013da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013dc:	2302      	movs	r3, #2
 80013de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013e0:	2303      	movs	r3, #3
 80013e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e4:	f107 0318 	add.w	r3, r7, #24
 80013e8:	4619      	mov	r1, r3
 80013ea:	480b      	ldr	r0, [pc, #44]	@ (8001418 <HAL_UART_MspInit+0x110>)
 80013ec:	f002 fbf4 	bl	8003bd8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013f0:	2308      	movs	r3, #8
 80013f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f4:	2300      	movs	r3, #0
 80013f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fc:	f107 0318 	add.w	r3, r7, #24
 8001400:	4619      	mov	r1, r3
 8001402:	4805      	ldr	r0, [pc, #20]	@ (8001418 <HAL_UART_MspInit+0x110>)
 8001404:	f002 fbe8 	bl	8003bd8 <HAL_GPIO_Init>
}
 8001408:	bf00      	nop
 800140a:	3728      	adds	r7, #40	@ 0x28
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40013800 	.word	0x40013800
 8001414:	40021000 	.word	0x40021000
 8001418:	40010800 	.word	0x40010800
 800141c:	40004400 	.word	0x40004400

08001420 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08e      	sub	sp, #56	@ 0x38
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001428:	2300      	movs	r3, #0
 800142a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800142c:	2300      	movs	r3, #0
 800142e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001430:	2300      	movs	r3, #0
 8001432:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001436:	4b34      	ldr	r3, [pc, #208]	@ (8001508 <HAL_InitTick+0xe8>)
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	4a33      	ldr	r2, [pc, #204]	@ (8001508 <HAL_InitTick+0xe8>)
 800143c:	f043 0304 	orr.w	r3, r3, #4
 8001440:	61d3      	str	r3, [r2, #28]
 8001442:	4b31      	ldr	r3, [pc, #196]	@ (8001508 <HAL_InitTick+0xe8>)
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	f003 0304 	and.w	r3, r3, #4
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800144e:	f107 0210 	add.w	r2, r7, #16
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	4611      	mov	r1, r2
 8001458:	4618      	mov	r0, r3
 800145a:	f003 f97b 	bl	8004754 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800145e:	6a3b      	ldr	r3, [r7, #32]
 8001460:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001464:	2b00      	cmp	r3, #0
 8001466:	d103      	bne.n	8001470 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001468:	f003 f94c 	bl	8004704 <HAL_RCC_GetPCLK1Freq>
 800146c:	6378      	str	r0, [r7, #52]	@ 0x34
 800146e:	e004      	b.n	800147a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001470:	f003 f948 	bl	8004704 <HAL_RCC_GetPCLK1Freq>
 8001474:	4603      	mov	r3, r0
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800147a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800147c:	4a23      	ldr	r2, [pc, #140]	@ (800150c <HAL_InitTick+0xec>)
 800147e:	fba2 2303 	umull	r2, r3, r2, r3
 8001482:	0c9b      	lsrs	r3, r3, #18
 8001484:	3b01      	subs	r3, #1
 8001486:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001488:	4b21      	ldr	r3, [pc, #132]	@ (8001510 <HAL_InitTick+0xf0>)
 800148a:	4a22      	ldr	r2, [pc, #136]	@ (8001514 <HAL_InitTick+0xf4>)
 800148c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800148e:	4b20      	ldr	r3, [pc, #128]	@ (8001510 <HAL_InitTick+0xf0>)
 8001490:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001494:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001496:	4a1e      	ldr	r2, [pc, #120]	@ (8001510 <HAL_InitTick+0xf0>)
 8001498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800149a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800149c:	4b1c      	ldr	r3, [pc, #112]	@ (8001510 <HAL_InitTick+0xf0>)
 800149e:	2200      	movs	r2, #0
 80014a0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001510 <HAL_InitTick+0xf0>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a8:	4b19      	ldr	r3, [pc, #100]	@ (8001510 <HAL_InitTick+0xf0>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80014ae:	4818      	ldr	r0, [pc, #96]	@ (8001510 <HAL_InitTick+0xf0>)
 80014b0:	f003 f99e 	bl	80047f0 <HAL_TIM_Base_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80014ba:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d11b      	bne.n	80014fa <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80014c2:	4813      	ldr	r0, [pc, #76]	@ (8001510 <HAL_InitTick+0xf0>)
 80014c4:	f003 f9ec 	bl	80048a0 <HAL_TIM_Base_Start_IT>
 80014c8:	4603      	mov	r3, r0
 80014ca:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80014ce:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d111      	bne.n	80014fa <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80014d6:	201e      	movs	r0, #30
 80014d8:	f002 f8b3 	bl	8003642 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b0f      	cmp	r3, #15
 80014e0:	d808      	bhi.n	80014f4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80014e2:	2200      	movs	r2, #0
 80014e4:	6879      	ldr	r1, [r7, #4]
 80014e6:	201e      	movs	r0, #30
 80014e8:	f002 f88f 	bl	800360a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001518 <HAL_InitTick+0xf8>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6013      	str	r3, [r2, #0]
 80014f2:	e002      	b.n	80014fa <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80014fa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3738      	adds	r7, #56	@ 0x38
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40021000 	.word	0x40021000
 800150c:	431bde83 	.word	0x431bde83
 8001510:	20000b90 	.word	0x20000b90
 8001514:	40000800 	.word	0x40000800
 8001518:	2000014c 	.word	0x2000014c

0800151c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001520:	bf00      	nop
 8001522:	e7fd      	b.n	8001520 <NMI_Handler+0x4>

08001524 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001528:	bf00      	nop
 800152a:	e7fd      	b.n	8001528 <HardFault_Handler+0x4>

0800152c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001530:	bf00      	nop
 8001532:	e7fd      	b.n	8001530 <MemManage_Handler+0x4>

08001534 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001538:	bf00      	nop
 800153a:	e7fd      	b.n	8001538 <BusFault_Handler+0x4>

0800153c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001540:	bf00      	nop
 8001542:	e7fd      	b.n	8001540 <UsageFault_Handler+0x4>

08001544 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr

08001550 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001554:	4802      	ldr	r0, [pc, #8]	@ (8001560 <TIM4_IRQHandler+0x10>)
 8001556:	f003 f9f5 	bl	8004944 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000b90 	.word	0x20000b90

08001564 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001568:	4802      	ldr	r0, [pc, #8]	@ (8001574 <USART1_IRQHandler+0x10>)
 800156a:	f003 fc7f 	bl	8004e6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000af4 	.word	0x20000af4

08001578 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001580:	4a14      	ldr	r2, [pc, #80]	@ (80015d4 <_sbrk+0x5c>)
 8001582:	4b15      	ldr	r3, [pc, #84]	@ (80015d8 <_sbrk+0x60>)
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800158c:	4b13      	ldr	r3, [pc, #76]	@ (80015dc <_sbrk+0x64>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d102      	bne.n	800159a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001594:	4b11      	ldr	r3, [pc, #68]	@ (80015dc <_sbrk+0x64>)
 8001596:	4a12      	ldr	r2, [pc, #72]	@ (80015e0 <_sbrk+0x68>)
 8001598:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800159a:	4b10      	ldr	r3, [pc, #64]	@ (80015dc <_sbrk+0x64>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d207      	bcs.n	80015b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a8:	f007 f842 	bl	8008630 <__errno>
 80015ac:	4603      	mov	r3, r0
 80015ae:	220c      	movs	r2, #12
 80015b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015b2:	f04f 33ff 	mov.w	r3, #4294967295
 80015b6:	e009      	b.n	80015cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b8:	4b08      	ldr	r3, [pc, #32]	@ (80015dc <_sbrk+0x64>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015be:	4b07      	ldr	r3, [pc, #28]	@ (80015dc <_sbrk+0x64>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	4a05      	ldr	r2, [pc, #20]	@ (80015dc <_sbrk+0x64>)
 80015c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ca:	68fb      	ldr	r3, [r7, #12]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20005000 	.word	0x20005000
 80015d8:	00000400 	.word	0x00000400
 80015dc:	20000bd8 	.word	0x20000bd8
 80015e0:	20002070 	.word	0x20002070

080015e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr

080015f0 <LCD_LOAD_CGRAM>:
	0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, // 4columns ||||
	0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, // 5columns |||||
};
/* Private function prototypes -----------------------------------------------*/
void LCD_LOAD_CGRAM(char tab[], uint8_t charnum)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	460b      	mov	r3, r1
 80015fa:	70fb      	strb	r3, [r7, #3]
	uint8_t index;
	/* Each character contains 8 definition values*/
	charnum = (uint8_t)(charnum * 8);
 80015fc:	78fb      	ldrb	r3, [r7, #3]
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	70fb      	strb	r3, [r7, #3]
	for (index = 0;index < charnum;index++)
 8001602:	2300      	movs	r3, #0
 8001604:	73fb      	strb	r3, [r7, #15]
 8001606:	e00c      	b.n	8001622 <LCD_LOAD_CGRAM+0x32>
	{
		/* Store values in LCD*/
		LCD_printchar(tab[index]);
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	4413      	add	r3, r2
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f000 f883 	bl	800171c <LCD_printchar>
		osDelay(1);
 8001616:	2001      	movs	r0, #1
 8001618:	f004 fa0d 	bl	8005a36 <osDelay>
	for (index = 0;index < charnum;index++)
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	3301      	adds	r3, #1
 8001620:	73fb      	strb	r3, [r7, #15]
 8001622:	7bfa      	ldrb	r2, [r7, #15]
 8001624:	78fb      	ldrb	r3, [r7, #3]
 8001626:	429a      	cmp	r2, r3
 8001628:	d3ee      	bcc.n	8001608 <LCD_LOAD_CGRAM+0x18>
	}
}
 800162a:	bf00      	nop
 800162c:	bf00      	nop
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <LCD_ENABLE>:

void LCD_ENABLE (void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 8001638:	2201      	movs	r2, #1
 800163a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800163e:	4807      	ldr	r0, [pc, #28]	@ (800165c <LCD_ENABLE+0x28>)
 8001640:	f002 fc65 	bl	8003f0e <HAL_GPIO_WritePin>
	osDelay(2);
 8001644:	2002      	movs	r0, #2
 8001646:	f004 f9f6 	bl	8005a36 <osDelay>
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 800164a:	2200      	movs	r2, #0
 800164c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001650:	4802      	ldr	r0, [pc, #8]	@ (800165c <LCD_ENABLE+0x28>)
 8001652:	f002 fc5c 	bl	8003f0e <HAL_GPIO_WritePin>
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40010800 	.word	0x40010800

08001660 <Send4Bit>:

static void Send4Bit(uint8_t data)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_Data_Port, LCD_D4_Pin, (data & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	b2db      	uxtb	r3, r3
 8001672:	461a      	mov	r2, r3
 8001674:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001678:	4816      	ldr	r0, [pc, #88]	@ (80016d4 <Send4Bit+0x74>)
 800167a:	f002 fc48 	bl	8003f0e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_Data_Port, LCD_D5_Pin, (data & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	105b      	asrs	r3, r3, #1
 8001682:	b2db      	uxtb	r3, r3
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	b2db      	uxtb	r3, r3
 800168a:	461a      	mov	r2, r3
 800168c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001690:	4810      	ldr	r0, [pc, #64]	@ (80016d4 <Send4Bit+0x74>)
 8001692:	f002 fc3c 	bl	8003f0e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_Data_Port, LCD_D6_Pin, (data & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	109b      	asrs	r3, r3, #2
 800169a:	b2db      	uxtb	r3, r3
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	461a      	mov	r2, r3
 80016a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016a8:	480a      	ldr	r0, [pc, #40]	@ (80016d4 <Send4Bit+0x74>)
 80016aa:	f002 fc30 	bl	8003f0e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_Data_Port, LCD_D7_Pin, (data & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	10db      	asrs	r3, r3, #3
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	461a      	mov	r2, r3
 80016bc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016c0:	4804      	ldr	r0, [pc, #16]	@ (80016d4 <Send4Bit+0x74>)
 80016c2:	f002 fc24 	bl	8003f0e <HAL_GPIO_WritePin>
    LCD_ENABLE();
 80016c6:	f7ff ffb5 	bl	8001634 <LCD_ENABLE>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40010c00 	.word	0x40010c00

080016d8 <LCD_CMD>:

void LCD_CMD(unsigned char cmd_data)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80016e2:	2200      	movs	r2, #0
 80016e4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016e8:	480b      	ldr	r0, [pc, #44]	@ (8001718 <LCD_CMD+0x40>)
 80016ea:	f002 fc10 	bl	8003f0e <HAL_GPIO_WritePin>

	Send4Bit((cmd_data>>4)&0x0F);
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	091b      	lsrs	r3, r3, #4
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ffb3 	bl	8001660 <Send4Bit>
	Send4Bit(cmd_data & 0x0F);
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	f003 030f 	and.w	r3, r3, #15
 8001700:	b2db      	uxtb	r3, r3
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff ffac 	bl	8001660 <Send4Bit>

	osDelay(2);
 8001708:	2002      	movs	r0, #2
 800170a:	f004 f994 	bl	8005a36 <osDelay>
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40010800 	.word	0x40010800

0800171c <LCD_printchar>:

void LCD_printchar(unsigned char ascode)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8001726:	2201      	movs	r2, #1
 8001728:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800172c:	480b      	ldr	r0, [pc, #44]	@ (800175c <LCD_printchar+0x40>)
 800172e:	f002 fbee 	bl	8003f0e <HAL_GPIO_WritePin>

	Send4Bit((ascode>>4)&0x0F);
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	091b      	lsrs	r3, r3, #4
 8001736:	b2db      	uxtb	r3, r3
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff91 	bl	8001660 <Send4Bit>
	Send4Bit(ascode & 0x0F);
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	f003 030f 	and.w	r3, r3, #15
 8001744:	b2db      	uxtb	r3, r3
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff ff8a 	bl	8001660 <Send4Bit>

	osDelay(2);
 800174c:	2002      	movs	r0, #2
 800174e:	f004 f972 	bl	8005a36 <osDelay>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40010800 	.word	0x40010800

08001760 <LCD_printstring>:

void LCD_printstring(char *text)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
	//LOG_DBG("Print String[%s]", text);
	do
	{
		LCD_printchar(*text++);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	1c5a      	adds	r2, r3, #1
 800176c:	607a      	str	r2, [r7, #4]
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ffd3 	bl	800171c <LCD_printchar>
	}while (*text != '\n');
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2b0a      	cmp	r3, #10
 800177c:	d1f4      	bne.n	8001768 <LCD_printstring+0x8>
}
 800177e:	bf00      	nop
 8001780:	bf00      	nop
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <LCD_CLEAR_DISPLAY>:

void LCD_CLEAR_DISPLAY(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
	LCD_CMD(0x01);
 800178c:	2001      	movs	r0, #1
 800178e:	f7ff ffa3 	bl	80016d8 <LCD_CMD>
	osDelay(2);
 8001792:	2002      	movs	r0, #2
 8001794:	f004 f94f 	bl	8005a36 <osDelay>
}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}

0800179c <LCD_DISP_ON>:
{
	LCD_CMD(0x1C);
}

void LCD_DISP_ON(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
	LCD_CMD(0x0C);
 80017a0:	200c      	movs	r0, #12
 80017a2:	f7ff ff99 	bl	80016d8 <LCD_CMD>
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}

080017aa <LCD_DISP_CURSOR>:
{
	LCD_CMD(0x08);
}

void LCD_DISP_CURSOR(void)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	af00      	add	r7, sp, #0
	LCD_CMD(0x0E); // Cursor ON / Blink ON
 80017ae:	200e      	movs	r0, #14
 80017b0:	f7ff ff92 	bl	80016d8 <LCD_CMD>
}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <LCD_LOCATE>:

void LCD_LOCATE(uint8_t row, uint8_t column)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	460a      	mov	r2, r1
 80017c2:	71fb      	strb	r3, [r7, #7]
 80017c4:	4613      	mov	r3, r2
 80017c6:	71bb      	strb	r3, [r7, #6]
	column--;
 80017c8:	79bb      	ldrb	r3, [r7, #6]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	71bb      	strb	r3, [r7, #6]
	switch (row)
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d002      	beq.n	80017da <LCD_LOCATE+0x22>
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d009      	beq.n	80017ec <LCD_LOCATE+0x34>
		case 2:
			/* Set cursor to 2nd row address and add index*/
			LCD_CMD(column |= 0x40 | 0x80);
			break;
		default:
			break;
 80017d8:	e011      	b.n	80017fe <LCD_LOCATE+0x46>
			LCD_CMD(column |= 0x80);
 80017da:	79bb      	ldrb	r3, [r7, #6]
 80017dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80017e0:	71bb      	strb	r3, [r7, #6]
 80017e2:	79bb      	ldrb	r3, [r7, #6]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ff77 	bl	80016d8 <LCD_CMD>
			break;
 80017ea:	e008      	b.n	80017fe <LCD_LOCATE+0x46>
			LCD_CMD(column |= 0x40 | 0x80);
 80017ec:	79bb      	ldrb	r3, [r7, #6]
 80017ee:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80017f2:	71bb      	strb	r3, [r7, #6]
 80017f4:	79bb      	ldrb	r3, [r7, #6]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff ff6e 	bl	80016d8 <LCD_CMD>
			break;
 80017fc:	bf00      	nop
	}
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <LCD_INIT>:
		}
	}
}

void LCD_INIT(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 800180c:	2201      	movs	r2, #1
 800180e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001812:	4819      	ldr	r0, [pc, #100]	@ (8001878 <LCD_INIT+0x70>)
 8001814:	f002 fb7b 	bl	8003f0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8001818:	2200      	movs	r2, #0
 800181a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800181e:	4816      	ldr	r0, [pc, #88]	@ (8001878 <LCD_INIT+0x70>)
 8001820:	f002 fb75 	bl	8003f0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 8001824:	2200      	movs	r2, #0
 8001826:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800182a:	4813      	ldr	r0, [pc, #76]	@ (8001878 <LCD_INIT+0x70>)
 800182c:	f002 fb6f 	bl	8003f0e <HAL_GPIO_WritePin>

	//Initialization of HD44780-based LCD (4-bit HW)
	LCD_CMD(0x33);
 8001830:	2033      	movs	r0, #51	@ 0x33
 8001832:	f7ff ff51 	bl	80016d8 <LCD_CMD>
	osDelay(4);
 8001836:	2004      	movs	r0, #4
 8001838:	f004 f8fd 	bl	8005a36 <osDelay>
	LCD_CMD(0x32);
 800183c:	2032      	movs	r0, #50	@ 0x32
 800183e:	f7ff ff4b 	bl	80016d8 <LCD_CMD>
	osDelay(4);
 8001842:	2004      	movs	r0, #4
 8001844:	f004 f8f7 	bl	8005a36 <osDelay>
	//Function Set 4-bit mode DL=0 N=1(2Lie 5*8 dots) F=0(Don't care)
	LCD_CMD(0x28);
 8001848:	2028      	movs	r0, #40	@ 0x28
 800184a:	f7ff ff45 	bl	80016d8 <LCD_CMD>
	//Display On/Off Control curso x, blink x
	LCD_CMD(0x0C);
 800184e:	200c      	movs	r0, #12
 8001850:	f7ff ff42 	bl	80016d8 <LCD_CMD>

	//Entry mode set, Increment, display not shift
	LCD_CMD(0x06);
 8001854:	2006      	movs	r0, #6
 8001856:	f7ff ff3f 	bl	80016d8 <LCD_CMD>

	LCD_CLEAR_DISPLAY();
 800185a:	f7ff ff95 	bl	8001788 <LCD_CLEAR_DISPLAY>
	//Minimum delay to wait before driving LCD module
	osDelay(200);
 800185e:	20c8      	movs	r0, #200	@ 0xc8
 8001860:	f004 f8e9 	bl	8005a36 <osDelay>

	LCD_CMD(CGRAM_address_start);
 8001864:	2040      	movs	r0, #64	@ 0x40
 8001866:	f7ff ff37 	bl	80016d8 <LCD_CMD>
	LCD_LOAD_CGRAM(Custom, 6);
 800186a:	2106      	movs	r1, #6
 800186c:	4803      	ldr	r0, [pc, #12]	@ (800187c <LCD_INIT+0x74>)
 800186e:	f7ff febf 	bl	80015f0 <LCD_LOAD_CGRAM>
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40010800 	.word	0x40010800
 800187c:	200000a8 	.word	0x200000a8

08001880 <screen_init>:
};

config_t load_cfg;
/* Private functions ---------------------------------------------------------*/
void screen_init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
	char line_buf[LCD_PRINT_MAX];

	memset(&m_cfg, 0, sizeof(m_cfg));
 8001886:	224a      	movs	r2, #74	@ 0x4a
 8001888:	2100      	movs	r1, #0
 800188a:	4815      	ldr	r0, [pc, #84]	@ (80018e0 <screen_init+0x60>)
 800188c:	f006 fe6a 	bl	8008564 <memset>
	memcpy(&load_cfg, m_app_config, sizeof(config_t));
 8001890:	4b14      	ldr	r3, [pc, #80]	@ (80018e4 <screen_init+0x64>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a14      	ldr	r2, [pc, #80]	@ (80018e8 <screen_init+0x68>)
 8001896:	4610      	mov	r0, r2
 8001898:	4619      	mov	r1, r3
 800189a:	2347      	movs	r3, #71	@ 0x47
 800189c:	461a      	mov	r2, r3
 800189e:	f006 fef3 	bl	8008688 <memcpy>

	sprintf(line_buf,"%s\n", load_cfg.company);
 80018a2:	1d3b      	adds	r3, r7, #4
 80018a4:	4a11      	ldr	r2, [pc, #68]	@ (80018ec <screen_init+0x6c>)
 80018a6:	4912      	ldr	r1, [pc, #72]	@ (80018f0 <screen_init+0x70>)
 80018a8:	4618      	mov	r0, r3
 80018aa:	f006 fdfd 	bl	80084a8 <siprintf>
	LOG_DBG("Model : %s", line_buf);
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	4619      	mov	r1, r3
 80018b2:	4810      	ldr	r0, [pc, #64]	@ (80018f4 <screen_init+0x74>)
 80018b4:	f7ff f96a 	bl	8000b8c <Printf>
	LCD_LOCATE(1,2);
 80018b8:	2102      	movs	r1, #2
 80018ba:	2001      	movs	r0, #1
 80018bc:	f7ff ff7c 	bl	80017b8 <LCD_LOCATE>
	LCD_printstring(line_buf);
 80018c0:	1d3b      	adds	r3, r7, #4
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff ff4c 	bl	8001760 <LCD_printstring>
	LCD_LOCATE(2,1);
 80018c8:	2101      	movs	r1, #1
 80018ca:	2002      	movs	r0, #2
 80018cc:	f7ff ff74 	bl	80017b8 <LCD_LOCATE>
	LCD_printstring("StrobeController\n");
 80018d0:	4809      	ldr	r0, [pc, #36]	@ (80018f8 <screen_init+0x78>)
 80018d2:	f7ff ff45 	bl	8001760 <LCD_printstring>
}
 80018d6:	bf00      	nop
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000bdc 	.word	0x20000bdc
 80018e4:	20000218 	.word	0x20000218
 80018e8:	20000c28 	.word	0x20000c28
 80018ec:	20000c5d 	.word	0x20000c5d
 80018f0:	08009434 	.word	0x08009434
 80018f4:	08009438 	.word	0x08009438
 80018f8:	0800944c 	.word	0x0800944c

080018fc <screen_blink>:

void screen_blink(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
	if(m_cfg.enable_blink){
 8001900:	4b10      	ldr	r3, [pc, #64]	@ (8001944 <screen_blink+0x48>)
 8001902:	7b1b      	ldrb	r3, [r3, #12]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d01a      	beq.n	800193e <screen_blink+0x42>
		LCD_LOCATE(m_cfg.blink_row,1);
 8001908:	4b0e      	ldr	r3, [pc, #56]	@ (8001944 <screen_blink+0x48>)
 800190a:	7b9b      	ldrb	r3, [r3, #14]
 800190c:	2101      	movs	r1, #1
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff ff52 	bl	80017b8 <LCD_LOCATE>
		m_cfg.blink ^= 1;
 8001914:	4b0b      	ldr	r3, [pc, #44]	@ (8001944 <screen_blink+0x48>)
 8001916:	7b5b      	ldrb	r3, [r3, #13]
 8001918:	f083 0301 	eor.w	r3, r3, #1
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4b09      	ldr	r3, [pc, #36]	@ (8001944 <screen_blink+0x48>)
 8001920:	735a      	strb	r2, [r3, #13]
		//LOG_DBG("Blink%d: %s", m_cfg.blink, m_cfg.blink_text[m_cfg.blink]);
		LCD_printstring(m_cfg.blink_text[m_cfg.blink]);
 8001922:	4b08      	ldr	r3, [pc, #32]	@ (8001944 <screen_blink+0x48>)
 8001924:	7b5b      	ldrb	r3, [r3, #13]
 8001926:	461a      	mov	r2, r3
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	3308      	adds	r3, #8
 8001932:	4a04      	ldr	r2, [pc, #16]	@ (8001944 <screen_blink+0x48>)
 8001934:	4413      	add	r3, r2
 8001936:	3307      	adds	r3, #7
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff11 	bl	8001760 <LCD_printstring>
	}
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000bdc 	.word	0x20000bdc

08001948 <send_cmd_2_backend>:

static void send_cmd_2_backend(BackEnd_Cmd_t cmd, uint8_t ch, uint16_t value)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	71fb      	strb	r3, [r7, #7]
 8001952:	460b      	mov	r3, r1
 8001954:	71bb      	strb	r3, [r7, #6]
 8001956:	4613      	mov	r3, r2
 8001958:	80bb      	strh	r3, [r7, #4]
	// Todo : Send Cmd
	uart_SendFront(cmd, ch, (uint32_t)value);
 800195a:	88ba      	ldrh	r2, [r7, #4]
 800195c:	79b9      	ldrb	r1, [r7, #6]
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff f897 	bl	8000a94 <uart_SendFront>
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <screen_process>:

ScreenID_t screen_process(ScreenID_t screen_id, Key_t key)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	460a      	mov	r2, r1
 800197a:	71fb      	strb	r3, [r7, #7]
 800197c:	4613      	mov	r3, r2
 800197e:	71bb      	strb	r3, [r7, #6]
	int menu_list_size = MAX_SC_LIST_NUM;
 8001980:	230d      	movs	r3, #13
 8001982:	613b      	str	r3, [r7, #16]
	int i;	
	Screen_param_t sc_param;

	//LOG_INF("%s : key[%s] Set_mode[%d]", screen_id_2_str(screen_id), key_id_2_str(key), m_cfg.set_mode);
	sc_param.sc_id = screen_id;
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	723b      	strb	r3, [r7, #8]
	sc_param.key = key;
 8001988:	79bb      	ldrb	r3, [r7, #6]
 800198a:	b29b      	uxth	r3, r3
 800198c:	817b      	strh	r3, [r7, #10]
	for(i = 0; menu_list_size; i++){
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
 8001992:	e015      	b.n	80019c0 <screen_process+0x50>
		if(screen_id == screen_func_list[i].id){
 8001994:	4a0e      	ldr	r2, [pc, #56]	@ (80019d0 <screen_process+0x60>)
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800199c:	79fa      	ldrb	r2, [r7, #7]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d10b      	bne.n	80019ba <screen_process+0x4a>
			return screen_func_list[i].func(sc_param);			
 80019a2:	4a0b      	ldr	r2, [pc, #44]	@ (80019d0 <screen_process+0x60>)
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	4413      	add	r3, r2
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f107 0208 	add.w	r2, r7, #8
 80019b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019b4:	4798      	blx	r3
 80019b6:	4603      	mov	r3, r0
 80019b8:	e006      	b.n	80019c8 <screen_process+0x58>
	for(i = 0; menu_list_size; i++){
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	3301      	adds	r3, #1
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1e6      	bne.n	8001994 <screen_process+0x24>
		}
	}
	return eMAX_SCREEN_ID;
 80019c6:	230f      	movs	r3, #15
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	200000d8 	.word	0x200000d8

080019d4 <draw_title>:

static void draw_title(uint8_t step)
{
 80019d4:	b590      	push	{r4, r7, lr}
 80019d6:	b091      	sub	sp, #68	@ 0x44
 80019d8:	af02      	add	r7, sp, #8
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]
	char line_1_buf[LCD_PRINT_MAX]={0,}, line_2_buf[LCD_PRINT_MAX]={0,};
 80019de:	f107 0320 	add.w	r3, r7, #32
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	60da      	str	r2, [r3, #12]
 80019ec:	611a      	str	r2, [r3, #16]
 80019ee:	f107 030c 	add.w	r3, r7, #12
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]
 80019f8:	609a      	str	r2, [r3, #8]
 80019fa:	60da      	str	r2, [r3, #12]
 80019fc:	611a      	str	r2, [r3, #16]
	uint8_t ch = m_cfg.cur_ch;
 80019fe:	4ba9      	ldr	r3, [pc, #676]	@ (8001ca4 <draw_title+0x2d0>)
 8001a00:	789b      	ldrb	r3, [r3, #2]
 8001a02:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t disp_ch = m_cfg.cur_ch+1;
 8001a06:	4ba7      	ldr	r3, [pc, #668]	@ (8001ca4 <draw_title+0x2d0>)
 8001a08:	789b      	ldrb	r3, [r3, #2]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

	//LOG_INF("start Draw title [%d] ch[%d]\r\n", step, ch);

	switch(step){
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	2b0e      	cmp	r3, #14
 8001a14:	f200 81c5 	bhi.w	8001da2 <draw_title+0x3ce>
 8001a18:	a201      	add	r2, pc, #4	@ (adr r2, 8001a20 <draw_title+0x4c>)
 8001a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a1e:	bf00      	nop
 8001a20:	08001a5d 	.word	0x08001a5d
 8001a24:	08001a8d 	.word	0x08001a8d
 8001a28:	08001abd 	.word	0x08001abd
 8001a2c:	08001aef 	.word	0x08001aef
 8001a30:	08001b39 	.word	0x08001b39
 8001a34:	08001b61 	.word	0x08001b61
 8001a38:	08001b89 	.word	0x08001b89
 8001a3c:	08001ba9 	.word	0x08001ba9
 8001a40:	08001be7 	.word	0x08001be7
 8001a44:	08001c3b 	.word	0x08001c3b
 8001a48:	08001c0b 	.word	0x08001c0b
 8001a4c:	08001c55 	.word	0x08001c55
 8001a50:	08001c71 	.word	0x08001c71
 8001a54:	08001c8b 	.word	0x08001c8b
 8001a58:	08001d31 	.word	0x08001d31
		case eCH_CHSelect:
			sprintf(line_1_buf, "CH%d   Operation\n", disp_ch);
 8001a5c:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8001a60:	f107 0320 	add.w	r3, r7, #32
 8001a64:	4990      	ldr	r1, [pc, #576]	@ (8001ca8 <draw_title+0x2d4>)
 8001a66:	4618      	mov	r0, r3
 8001a68:	f006 fd1e 	bl	80084a8 <siprintf>
			sprintf(line_2_buf, "OnTime : %5dus\n", load_cfg.on_time[ch]);
 8001a6c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001a70:	4a8e      	ldr	r2, [pc, #568]	@ (8001cac <draw_title+0x2d8>)
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	4413      	add	r3, r2
 8001a76:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	f107 030c 	add.w	r3, r7, #12
 8001a82:	498b      	ldr	r1, [pc, #556]	@ (8001cb0 <draw_title+0x2dc>)
 8001a84:	4618      	mov	r0, r3
 8001a86:	f006 fd0f 	bl	80084a8 <siprintf>
			break;
 8001a8a:	e18a      	b.n	8001da2 <draw_title+0x3ce>
		case eCH_OnTIME:
			sprintf(line_1_buf, "CH%d On-Time     \n", disp_ch);
 8001a8c:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8001a90:	f107 0320 	add.w	r3, r7, #32
 8001a94:	4987      	ldr	r1, [pc, #540]	@ (8001cb4 <draw_title+0x2e0>)
 8001a96:	4618      	mov	r0, r3
 8001a98:	f006 fd06 	bl	80084a8 <siprintf>
			sprintf(line_2_buf, "Value : %5d us\n", load_cfg.on_time[ch]);
 8001a9c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001aa0:	4a82      	ldr	r2, [pc, #520]	@ (8001cac <draw_title+0x2d8>)
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	4413      	add	r3, r2
 8001aa6:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	461a      	mov	r2, r3
 8001aae:	f107 030c 	add.w	r3, r7, #12
 8001ab2:	4981      	ldr	r1, [pc, #516]	@ (8001cb8 <draw_title+0x2e4>)
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f006 fcf7 	bl	80084a8 <siprintf>
			break;
 8001aba:	e172      	b.n	8001da2 <draw_title+0x3ce>
		case eCH_DelayTIME:
			sprintf(line_1_buf, "CH%d Delay-Time  \n", disp_ch);
 8001abc:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8001ac0:	f107 0320 	add.w	r3, r7, #32
 8001ac4:	497d      	ldr	r1, [pc, #500]	@ (8001cbc <draw_title+0x2e8>)
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f006 fcee 	bl	80084a8 <siprintf>
			sprintf(line_2_buf, "Value : %5d us\n", load_cfg.delay_time[ch]);
 8001acc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001ad0:	4a76      	ldr	r2, [pc, #472]	@ (8001cac <draw_title+0x2d8>)
 8001ad2:	3308      	adds	r3, #8
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	4413      	add	r3, r2
 8001ad8:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	461a      	mov	r2, r3
 8001ae0:	f107 030c 	add.w	r3, r7, #12
 8001ae4:	4974      	ldr	r1, [pc, #464]	@ (8001cb8 <draw_title+0x2e4>)
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f006 fcde 	bl	80084a8 <siprintf>
			break;
 8001aec:	e159      	b.n	8001da2 <draw_title+0x3ce>
		case eCH_TriggerSet:
			sprintf(line_1_buf, "CH%d Trigger Set \n", disp_ch);
 8001aee:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8001af2:	f107 0320 	add.w	r3, r7, #32
 8001af6:	4972      	ldr	r1, [pc, #456]	@ (8001cc0 <draw_title+0x2ec>)
 8001af8:	4618      	mov	r0, r3
 8001afa:	f006 fcd5 	bl	80084a8 <siprintf>
			sprintf(line_2_buf, "Value : %s \n", load_cfg.edge[ch]?"Rising ":"Falling");
 8001afe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001b02:	4a6a      	ldr	r2, [pc, #424]	@ (8001cac <draw_title+0x2d8>)
 8001b04:	4413      	add	r3, r2
 8001b06:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <draw_title+0x13e>
 8001b0e:	4a6d      	ldr	r2, [pc, #436]	@ (8001cc4 <draw_title+0x2f0>)
 8001b10:	e000      	b.n	8001b14 <draw_title+0x140>
 8001b12:	4a6d      	ldr	r2, [pc, #436]	@ (8001cc8 <draw_title+0x2f4>)
 8001b14:	f107 030c 	add.w	r3, r7, #12
 8001b18:	496c      	ldr	r1, [pc, #432]	@ (8001ccc <draw_title+0x2f8>)
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f006 fcc4 	bl	80084a8 <siprintf>
			memcpy(m_cfg.blink_text[0], line_2_buf, 17);
 8001b20:	f107 030c 	add.w	r3, r7, #12
 8001b24:	2211      	movs	r2, #17
 8001b26:	4619      	mov	r1, r3
 8001b28:	4869      	ldr	r0, [pc, #420]	@ (8001cd0 <draw_title+0x2fc>)
 8001b2a:	f006 fdad 	bl	8008688 <memcpy>
			sprintf(m_cfg.blink_text[1],"Value :         \n");
 8001b2e:	4969      	ldr	r1, [pc, #420]	@ (8001cd4 <draw_title+0x300>)
 8001b30:	4869      	ldr	r0, [pc, #420]	@ (8001cd8 <draw_title+0x304>)
 8001b32:	f006 fcb9 	bl	80084a8 <siprintf>
			break;
 8001b36:	e134      	b.n	8001da2 <draw_title+0x3ce>
		case eSEL_OPMODE:
			sprintf(line_1_buf, "Mode Select     \n");
 8001b38:	f107 0320 	add.w	r3, r7, #32
 8001b3c:	4967      	ldr	r1, [pc, #412]	@ (8001cdc <draw_title+0x308>)
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f006 fcb2 	bl	80084a8 <siprintf>
			sprintf(line_2_buf, "      %s     \n", load_cfg.mode?"1 : N":"1 : 1");
 8001b44:	4b59      	ldr	r3, [pc, #356]	@ (8001cac <draw_title+0x2d8>)
 8001b46:	791b      	ldrb	r3, [r3, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <draw_title+0x17c>
 8001b4c:	4a64      	ldr	r2, [pc, #400]	@ (8001ce0 <draw_title+0x30c>)
 8001b4e:	e000      	b.n	8001b52 <draw_title+0x17e>
 8001b50:	4a64      	ldr	r2, [pc, #400]	@ (8001ce4 <draw_title+0x310>)
 8001b52:	f107 030c 	add.w	r3, r7, #12
 8001b56:	4964      	ldr	r1, [pc, #400]	@ (8001ce8 <draw_title+0x314>)
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f006 fca5 	bl	80084a8 <siprintf>
			break;
 8001b5e:	e120      	b.n	8001da2 <draw_title+0x3ce>
		case eSET_OPMODE:
			sprintf(line_1_buf, "Mode Selection  \n");
 8001b60:	f107 0320 	add.w	r3, r7, #32
 8001b64:	4961      	ldr	r1, [pc, #388]	@ (8001cec <draw_title+0x318>)
 8001b66:	4618      	mov	r0, r3
 8001b68:	f006 fc9e 	bl	80084a8 <siprintf>
			sprintf(line_2_buf, "      %s     \n", load_cfg.mode?"1 : N":"1 : 1");
 8001b6c:	4b4f      	ldr	r3, [pc, #316]	@ (8001cac <draw_title+0x2d8>)
 8001b6e:	791b      	ldrb	r3, [r3, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <draw_title+0x1a4>
 8001b74:	4a5a      	ldr	r2, [pc, #360]	@ (8001ce0 <draw_title+0x30c>)
 8001b76:	e000      	b.n	8001b7a <draw_title+0x1a6>
 8001b78:	4a5a      	ldr	r2, [pc, #360]	@ (8001ce4 <draw_title+0x310>)
 8001b7a:	f107 030c 	add.w	r3, r7, #12
 8001b7e:	495a      	ldr	r1, [pc, #360]	@ (8001ce8 <draw_title+0x314>)
 8001b80:	4618      	mov	r0, r3
 8001b82:	f006 fc91 	bl	80084a8 <siprintf>
			break;
 8001b86:	e10c      	b.n	8001da2 <draw_title+0x3ce>
		case eRS_DevID:
			sprintf(line_1_buf, "RS232 Operation  \n");
 8001b88:	f107 0320 	add.w	r3, r7, #32
 8001b8c:	4958      	ldr	r1, [pc, #352]	@ (8001cf0 <draw_title+0x31c>)
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f006 fc8a 	bl	80084a8 <siprintf>
			sprintf(line_2_buf, "Device ID : %02d  \n", load_cfg.dev_id);
 8001b94:	4b45      	ldr	r3, [pc, #276]	@ (8001cac <draw_title+0x2d8>)
 8001b96:	795b      	ldrb	r3, [r3, #5]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	f107 030c 	add.w	r3, r7, #12
 8001b9e:	4955      	ldr	r1, [pc, #340]	@ (8001cf4 <draw_title+0x320>)
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f006 fc81 	bl	80084a8 <siprintf>
			break;
 8001ba6:	e0fc      	b.n	8001da2 <draw_title+0x3ce>
		case eIP_Set:
			sprintf(line_1_buf, "Communication  \n");
 8001ba8:	f107 0320 	add.w	r3, r7, #32
 8001bac:	4952      	ldr	r1, [pc, #328]	@ (8001cf8 <draw_title+0x324>)
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f006 fc7a 	bl	80084a8 <siprintf>
			sprintf(line_2_buf, "%03d.%03d.%03d.%03d \n", load_cfg.ether.ipaddr[0], load_cfg.ether.ipaddr[1], load_cfg.ether.ipaddr[2], load_cfg.ether.ipaddr[3]);
 8001bb4:	4b3d      	ldr	r3, [pc, #244]	@ (8001cac <draw_title+0x2d8>)
 8001bb6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4b3b      	ldr	r3, [pc, #236]	@ (8001cac <draw_title+0x2d8>)
 8001bbe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001bc2:	461c      	mov	r4, r3
 8001bc4:	4b39      	ldr	r3, [pc, #228]	@ (8001cac <draw_title+0x2d8>)
 8001bc6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001bca:	461a      	mov	r2, r3
 8001bcc:	4b37      	ldr	r3, [pc, #220]	@ (8001cac <draw_title+0x2d8>)
 8001bce:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001bd2:	f107 000c 	add.w	r0, r7, #12
 8001bd6:	9301      	str	r3, [sp, #4]
 8001bd8:	9200      	str	r2, [sp, #0]
 8001bda:	4623      	mov	r3, r4
 8001bdc:	460a      	mov	r2, r1
 8001bde:	4947      	ldr	r1, [pc, #284]	@ (8001cfc <draw_title+0x328>)
 8001be0:	f006 fc62 	bl	80084a8 <siprintf>
			break;
 8001be4:	e0dd      	b.n	8001da2 <draw_title+0x3ce>
		case ePORT_Set:
			sprintf(line_1_buf, "Communication  \n");
 8001be6:	f107 0320 	add.w	r3, r7, #32
 8001bea:	4943      	ldr	r1, [pc, #268]	@ (8001cf8 <draw_title+0x324>)
 8001bec:	4618      	mov	r0, r3
 8001bee:	f006 fc5b 	bl	80084a8 <siprintf>
			sprintf(line_2_buf, "Port : %05d    \n", load_cfg.ether.port);
 8001bf2:	4b2e      	ldr	r3, [pc, #184]	@ (8001cac <draw_title+0x2d8>)
 8001bf4:	f8b3 3033 	ldrh.w	r3, [r3, #51]	@ 0x33
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	f107 030c 	add.w	r3, r7, #12
 8001c00:	493f      	ldr	r1, [pc, #252]	@ (8001d00 <draw_title+0x32c>)
 8001c02:	4618      	mov	r0, r3
 8001c04:	f006 fc50 	bl	80084a8 <siprintf>
			break;
 8001c08:	e0cb      	b.n	8001da2 <draw_title+0x3ce>
		case eRemote_Mode:
			sprintf(line_1_buf, "Communication  \n");
 8001c0a:	f107 0320 	add.w	r3, r7, #32
 8001c0e:	493a      	ldr	r1, [pc, #232]	@ (8001cf8 <draw_title+0x324>)
 8001c10:	4618      	mov	r0, r3
 8001c12:	f006 fc49 	bl	80084a8 <siprintf>
			if(m_cfg.remote_mode == eREMOTE_RS232){
 8001c16:	4b23      	ldr	r3, [pc, #140]	@ (8001ca4 <draw_title+0x2d0>)
 8001c18:	785b      	ldrb	r3, [r3, #1]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d106      	bne.n	8001c2c <draw_title+0x258>
				sprintf(line_2_buf, "RS232...       \n");
 8001c1e:	f107 030c 	add.w	r3, r7, #12
 8001c22:	4938      	ldr	r1, [pc, #224]	@ (8001d04 <draw_title+0x330>)
 8001c24:	4618      	mov	r0, r3
 8001c26:	f006 fc3f 	bl	80084a8 <siprintf>
			}else{
				sprintf(line_2_buf, "Ethernet...    \n");
			}
			break;
 8001c2a:	e0ba      	b.n	8001da2 <draw_title+0x3ce>
				sprintf(line_2_buf, "Ethernet...    \n");
 8001c2c:	f107 030c 	add.w	r3, r7, #12
 8001c30:	4935      	ldr	r1, [pc, #212]	@ (8001d08 <draw_title+0x334>)
 8001c32:	4618      	mov	r0, r3
 8001c34:	f006 fc38 	bl	80084a8 <siprintf>
			break;
 8001c38:	e0b3      	b.n	8001da2 <draw_title+0x3ce>
		case eSelf_Test:
			sprintf(line_1_buf, "Test Operation  \n");
 8001c3a:	f107 0320 	add.w	r3, r7, #32
 8001c3e:	4933      	ldr	r1, [pc, #204]	@ (8001d0c <draw_title+0x338>)
 8001c40:	4618      	mov	r0, r3
 8001c42:	f006 fc31 	bl	80084a8 <siprintf>
			sprintf(line_2_buf, "Testing...      \n");
 8001c46:	f107 030c 	add.w	r3, r7, #12
 8001c4a:	4931      	ldr	r1, [pc, #196]	@ (8001d10 <draw_title+0x33c>)
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f006 fc2b 	bl	80084a8 <siprintf>
			break;
 8001c52:	e0a6      	b.n	8001da2 <draw_title+0x3ce>
		case eUSER_Mode:
			sprintf(line_1_buf, " %s\n", load_cfg.company);
 8001c54:	f107 0320 	add.w	r3, r7, #32
 8001c58:	4a2e      	ldr	r2, [pc, #184]	@ (8001d14 <draw_title+0x340>)
 8001c5a:	492f      	ldr	r1, [pc, #188]	@ (8001d18 <draw_title+0x344>)
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f006 fc23 	bl	80084a8 <siprintf>
			sprintf(line_2_buf, "StrobeController\n");
 8001c62:	f107 030c 	add.w	r3, r7, #12
 8001c66:	492d      	ldr	r1, [pc, #180]	@ (8001d1c <draw_title+0x348>)
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f006 fc1d 	bl	80084a8 <siprintf>
			break;
 8001c6e:	e098      	b.n	8001da2 <draw_title+0x3ce>
		case eFactor_Mode:
			sprintf(line_1_buf, "Factory mode    \n");
 8001c70:	f107 0320 	add.w	r3, r7, #32
 8001c74:	492a      	ldr	r1, [pc, #168]	@ (8001d20 <draw_title+0x34c>)
 8001c76:	4618      	mov	r0, r3
 8001c78:	f006 fc16 	bl	80084a8 <siprintf>
			sprintf(line_2_buf, "Reset...        \n");
 8001c7c:	f107 030c 	add.w	r3, r7, #12
 8001c80:	4928      	ldr	r1, [pc, #160]	@ (8001d24 <draw_title+0x350>)
 8001c82:	4618      	mov	r0, r3
 8001c84:	f006 fc10 	bl	80084a8 <siprintf>
			break;
 8001c88:	e08b      	b.n	8001da2 <draw_title+0x3ce>
		case eSEL_OP_Ch:
			sprintf(line_1_buf, "CH1 CH2 CH4 CH6 \n");
 8001c8a:	f107 0320 	add.w	r3, r7, #32
 8001c8e:	4926      	ldr	r1, [pc, #152]	@ (8001d28 <draw_title+0x354>)
 8001c90:	4618      	mov	r0, r3
 8001c92:	f006 fc09 	bl	80084a8 <siprintf>
			sprintf(line_2_buf, "CH8             \n");
 8001c96:	f107 030c 	add.w	r3, r7, #12
 8001c9a:	4924      	ldr	r1, [pc, #144]	@ (8001d2c <draw_title+0x358>)
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f006 fc03 	bl	80084a8 <siprintf>
			break;
 8001ca2:	e07e      	b.n	8001da2 <draw_title+0x3ce>
 8001ca4:	20000bdc 	.word	0x20000bdc
 8001ca8:	08009460 	.word	0x08009460
 8001cac:	20000c28 	.word	0x20000c28
 8001cb0:	08009474 	.word	0x08009474
 8001cb4:	08009484 	.word	0x08009484
 8001cb8:	08009498 	.word	0x08009498
 8001cbc:	080094a8 	.word	0x080094a8
 8001cc0:	080094bc 	.word	0x080094bc
 8001cc4:	080094d0 	.word	0x080094d0
 8001cc8:	080094d8 	.word	0x080094d8
 8001ccc:	080094e0 	.word	0x080094e0
 8001cd0:	20000beb 	.word	0x20000beb
 8001cd4:	080094f0 	.word	0x080094f0
 8001cd8:	20000bff 	.word	0x20000bff
 8001cdc:	08009504 	.word	0x08009504
 8001ce0:	08009518 	.word	0x08009518
 8001ce4:	08009520 	.word	0x08009520
 8001ce8:	08009528 	.word	0x08009528
 8001cec:	08009538 	.word	0x08009538
 8001cf0:	0800954c 	.word	0x0800954c
 8001cf4:	08009560 	.word	0x08009560
 8001cf8:	08009574 	.word	0x08009574
 8001cfc:	08009588 	.word	0x08009588
 8001d00:	080095a0 	.word	0x080095a0
 8001d04:	080095b4 	.word	0x080095b4
 8001d08:	080095c8 	.word	0x080095c8
 8001d0c:	080095dc 	.word	0x080095dc
 8001d10:	080095f0 	.word	0x080095f0
 8001d14:	20000c5d 	.word	0x20000c5d
 8001d18:	08009604 	.word	0x08009604
 8001d1c:	0800944c 	.word	0x0800944c
 8001d20:	0800960c 	.word	0x0800960c
 8001d24:	08009620 	.word	0x08009620
 8001d28:	08009634 	.word	0x08009634
 8001d2c:	08009648 	.word	0x08009648
		case eVer_Disp:
			sprintf(line_1_buf, "F - FW : Ver %1d.%1d\n", load_cfg.frontVer/10, load_cfg.frontVer%10);
 8001d30:	4b27      	ldr	r3, [pc, #156]	@ (8001dd0 <draw_title+0x3fc>)
 8001d32:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001d36:	4a27      	ldr	r2, [pc, #156]	@ (8001dd4 <draw_title+0x400>)
 8001d38:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3c:	08db      	lsrs	r3, r3, #3
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	461c      	mov	r4, r3
 8001d42:	4b23      	ldr	r3, [pc, #140]	@ (8001dd0 <draw_title+0x3fc>)
 8001d44:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8001d48:	4b22      	ldr	r3, [pc, #136]	@ (8001dd4 <draw_title+0x400>)
 8001d4a:	fba3 1302 	umull	r1, r3, r3, r2
 8001d4e:	08d9      	lsrs	r1, r3, #3
 8001d50:	460b      	mov	r3, r1
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	440b      	add	r3, r1
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	f107 0020 	add.w	r0, r7, #32
 8001d60:	4622      	mov	r2, r4
 8001d62:	491d      	ldr	r1, [pc, #116]	@ (8001dd8 <draw_title+0x404>)
 8001d64:	f006 fba0 	bl	80084a8 <siprintf>
			sprintf(line_2_buf, "M - FW : Ver %1d.%1d\n", load_cfg.backendVer/10, load_cfg.backendVer%10);
 8001d68:	4b19      	ldr	r3, [pc, #100]	@ (8001dd0 <draw_title+0x3fc>)
 8001d6a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8001d6e:	4a19      	ldr	r2, [pc, #100]	@ (8001dd4 <draw_title+0x400>)
 8001d70:	fba2 2303 	umull	r2, r3, r2, r3
 8001d74:	08db      	lsrs	r3, r3, #3
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	461c      	mov	r4, r3
 8001d7a:	4b15      	ldr	r3, [pc, #84]	@ (8001dd0 <draw_title+0x3fc>)
 8001d7c:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8001d80:	4b14      	ldr	r3, [pc, #80]	@ (8001dd4 <draw_title+0x400>)
 8001d82:	fba3 1302 	umull	r1, r3, r3, r2
 8001d86:	08d9      	lsrs	r1, r3, #3
 8001d88:	460b      	mov	r3, r1
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	f107 000c 	add.w	r0, r7, #12
 8001d98:	4622      	mov	r2, r4
 8001d9a:	4910      	ldr	r1, [pc, #64]	@ (8001ddc <draw_title+0x408>)
 8001d9c:	f006 fb84 	bl	80084a8 <siprintf>
			break;
 8001da0:	bf00      	nop
	}
//	LOG_DBG("Line 1 [%s]", line_1_buf);
//	LOG_DBG("Line 2 [%s]", line_2_buf);
	LCD_LOCATE(1,1);
 8001da2:	2101      	movs	r1, #1
 8001da4:	2001      	movs	r0, #1
 8001da6:	f7ff fd07 	bl	80017b8 <LCD_LOCATE>
	LCD_printstring(line_1_buf);
 8001daa:	f107 0320 	add.w	r3, r7, #32
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff fcd6 	bl	8001760 <LCD_printstring>
	LCD_LOCATE(2,1);
 8001db4:	2101      	movs	r1, #1
 8001db6:	2002      	movs	r0, #2
 8001db8:	f7ff fcfe 	bl	80017b8 <LCD_LOCATE>
	LCD_printstring(line_2_buf);
 8001dbc:	f107 030c 	add.w	r3, r7, #12
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff fccd 	bl	8001760 <LCD_printstring>
	//LOG_INF("End Draw title\r\n");
}
 8001dc6:	bf00      	nop
 8001dc8:	373c      	adds	r7, #60	@ 0x3c
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd90      	pop	{r4, r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000c28 	.word	0x20000c28
 8001dd4:	cccccccd 	.word	0xcccccccd
 8001dd8:	0800965c 	.word	0x0800965c
 8001ddc:	08009674 	.word	0x08009674

08001de0 <split_num>:

static void split_num(uint16_t value, int8_t *array)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	6039      	str	r1, [r7, #0]
 8001dea:	80fb      	strh	r3, [r7, #6]
	int num = value, i;
 8001dec:	88fb      	ldrh	r3, [r7, #6]
 8001dee:	60fb      	str	r3, [r7, #12]

	//LOG_DBG("Value : %d", value);
	if(value == 0){
 8001df0:	88fb      	ldrh	r3, [r7, #6]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d108      	bne.n	8001e08 <split_num+0x28>
		memset(array, 0, m_cfg.digit_num+1);
 8001df6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e64 <split_num+0x84>)
 8001df8:	7a5b      	ldrb	r3, [r3, #9]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	2100      	movs	r1, #0
 8001e00:	6838      	ldr	r0, [r7, #0]
 8001e02:	f006 fbaf 	bl	8008564 <memset>
		return ;
 8001e06:	e02a      	b.n	8001e5e <split_num+0x7e>
	}
	for(i = m_cfg.digit_num; i >= 0; i--){
 8001e08:	4b16      	ldr	r3, [pc, #88]	@ (8001e64 <split_num+0x84>)
 8001e0a:	7a5b      	ldrb	r3, [r3, #9]
 8001e0c:	60bb      	str	r3, [r7, #8]
 8001e0e:	e023      	b.n	8001e58 <split_num+0x78>
		array[i] = -1;  // init value
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	4413      	add	r3, r2
 8001e16:	22ff      	movs	r2, #255	@ 0xff
 8001e18:	701a      	strb	r2, [r3, #0]
		if(num){
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d018      	beq.n	8001e52 <split_num+0x72>
			array[i] = num%10;
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	4b11      	ldr	r3, [pc, #68]	@ (8001e68 <split_num+0x88>)
 8001e24:	fb83 1302 	smull	r1, r3, r3, r2
 8001e28:	1099      	asrs	r1, r3, #2
 8001e2a:	17d3      	asrs	r3, r2, #31
 8001e2c:	1ac9      	subs	r1, r1, r3
 8001e2e:	460b      	mov	r3, r1
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	440b      	add	r3, r1
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	1ad1      	subs	r1, r2, r3
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	b24a      	sxtb	r2, r1
 8001e40:	701a      	strb	r2, [r3, #0]
			//LOG_DBG("Split num[%d] => %d", i, array[i]);
			num/=10;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	4a08      	ldr	r2, [pc, #32]	@ (8001e68 <split_num+0x88>)
 8001e46:	fb82 1203 	smull	r1, r2, r2, r3
 8001e4a:	1092      	asrs	r2, r2, #2
 8001e4c:	17db      	asrs	r3, r3, #31
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	60fb      	str	r3, [r7, #12]
	for(i = m_cfg.digit_num; i >= 0; i--){
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	3b01      	subs	r3, #1
 8001e56:	60bb      	str	r3, [r7, #8]
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	dad8      	bge.n	8001e10 <split_num+0x30>
		}
	}
}
 8001e5e:	3710      	adds	r7, #16
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20000bdc 	.word	0x20000bdc
 8001e68:	66666667 	.word	0x66666667

08001e6c <combine_array>:

static int combine_array(int8_t *array)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
	int i;
	int value = 0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60bb      	str	r3, [r7, #8]
	
	for(i = 0; i <= m_cfg.digit_num; i++){
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	e016      	b.n	8001eac <combine_array+0x40>
		//LOG_DBG("%d:%d", i, array[i]);
		if(array[i] >= 0){
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	4413      	add	r3, r2
 8001e84:	f993 3000 	ldrsb.w	r3, [r3]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	db0c      	blt.n	8001ea6 <combine_array+0x3a>
			value = (value*10)+array[i];
 8001e8c:	68ba      	ldr	r2, [r7, #8]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	4619      	mov	r1, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	f993 3000 	ldrsb.w	r3, [r3]
 8001ea2:	440b      	add	r3, r1
 8001ea4:	60bb      	str	r3, [r7, #8]
	for(i = 0; i <= m_cfg.digit_num; i++){
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	4b05      	ldr	r3, [pc, #20]	@ (8001ec4 <combine_array+0x58>)
 8001eae:	7a5b      	ldrb	r3, [r3, #9]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	dde2      	ble.n	8001e7e <combine_array+0x12>
			//LOG_DBG("Value[%d]", value);
		}
	}
	
	return value;
 8001eb8:	68bb      	ldr	r3, [r7, #8]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr
 8001ec4:	20000bdc 	.word	0x20000bdc

08001ec8 <channel_screen_func>:

ScreenID_t channel_screen_func(Screen_param_t param)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	463b      	mov	r3, r7
 8001ed0:	e883 0003 	stmia.w	r3, {r0, r1}
	static uint8_t Info_Ch = 0xFF, Info_idx = 0;
	uint8_t Info_list[]={eCH_OnTIME, eCH_DelayTIME, eCH_TriggerSet, eSEL_OPMODE};
 8001ed4:	4b62      	ldr	r3, [pc, #392]	@ (8002060 <channel_screen_func+0x198>)
 8001ed6:	60fb      	str	r3, [r7, #12]
	//LOG_INF("Enter ch screen\r\n");

	m_cfg.cursor = 0;
 8001ed8:	4b62      	ldr	r3, [pc, #392]	@ (8002064 <channel_screen_func+0x19c>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	70da      	strb	r2, [r3, #3]
	switch(param.key){
 8001ede:	887b      	ldrh	r3, [r7, #2]
 8001ee0:	2b20      	cmp	r3, #32
 8001ee2:	f200 80b1 	bhi.w	8002048 <channel_screen_func+0x180>
 8001ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8001eec <channel_screen_func+0x24>)
 8001ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eec:	08001f71 	.word	0x08001f71
 8001ef0:	08001fb9 	.word	0x08001fb9
 8001ef4:	08001f81 	.word	0x08001f81
 8001ef8:	08002049 	.word	0x08002049
 8001efc:	08001f9d 	.word	0x08001f9d
 8001f00:	08002049 	.word	0x08002049
 8001f04:	08002049 	.word	0x08002049
 8001f08:	08002049 	.word	0x08002049
 8001f0c:	08002049 	.word	0x08002049
 8001f10:	08002049 	.word	0x08002049
 8001f14:	08002049 	.word	0x08002049
 8001f18:	08002049 	.word	0x08002049
 8001f1c:	08002049 	.word	0x08002049
 8001f20:	08002049 	.word	0x08002049
 8001f24:	08002049 	.word	0x08002049
 8001f28:	08002049 	.word	0x08002049
 8001f2c:	08002003 	.word	0x08002003
 8001f30:	08002049 	.word	0x08002049
 8001f34:	08002049 	.word	0x08002049
 8001f38:	08002049 	.word	0x08002049
 8001f3c:	08002049 	.word	0x08002049
 8001f40:	08002049 	.word	0x08002049
 8001f44:	08002049 	.word	0x08002049
 8001f48:	08002049 	.word	0x08002049
 8001f4c:	08002049 	.word	0x08002049
 8001f50:	08002049 	.word	0x08002049
 8001f54:	08002049 	.word	0x08002049
 8001f58:	08002049 	.word	0x08002049
 8001f5c:	08002049 	.word	0x08002049
 8001f60:	08002049 	.word	0x08002049
 8001f64:	08002049 	.word	0x08002049
 8001f68:	08002049 	.word	0x08002049
 8001f6c:	08001f71 	.word	0x08001f71
		case eKey_Idle:
		case eKey_ExitRemote:
			if(m_cfg.cur_ch < eCH1 || m_cfg.cur_ch > eCH8){
 8001f70:	4b3c      	ldr	r3, [pc, #240]	@ (8002064 <channel_screen_func+0x19c>)
 8001f72:	789b      	ldrb	r3, [r3, #2]
 8001f74:	2b07      	cmp	r3, #7
 8001f76:	d969      	bls.n	800204c <channel_screen_func+0x184>
				m_cfg.cur_ch = eCH1;
 8001f78:	4b3a      	ldr	r3, [pc, #232]	@ (8002064 <channel_screen_func+0x19c>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	709a      	strb	r2, [r3, #2]
			}
			break;
 8001f7e:	e065      	b.n	800204c <channel_screen_func+0x184>
		case eKey_Up:
			m_cfg.cur_ch = (m_cfg.cur_ch + 1) % eCH_MAX;
 8001f80:	4b38      	ldr	r3, [pc, #224]	@ (8002064 <channel_screen_func+0x19c>)
 8001f82:	789b      	ldrb	r3, [r3, #2]
 8001f84:	3301      	adds	r3, #1
 8001f86:	425a      	negs	r2, r3
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	f002 0207 	and.w	r2, r2, #7
 8001f90:	bf58      	it	pl
 8001f92:	4253      	negpl	r3, r2
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	4b33      	ldr	r3, [pc, #204]	@ (8002064 <channel_screen_func+0x19c>)
 8001f98:	709a      	strb	r2, [r3, #2]
			break;
 8001f9a:	e058      	b.n	800204e <channel_screen_func+0x186>
		case eKey_Down:
			m_cfg.cur_ch = (m_cfg.cur_ch - 1 + eCH_MAX) % eCH_MAX;
 8001f9c:	4b31      	ldr	r3, [pc, #196]	@ (8002064 <channel_screen_func+0x19c>)
 8001f9e:	789b      	ldrb	r3, [r3, #2]
 8001fa0:	3307      	adds	r3, #7
 8001fa2:	425a      	negs	r2, r3
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	f002 0207 	and.w	r2, r2, #7
 8001fac:	bf58      	it	pl
 8001fae:	4253      	negpl	r3, r2
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	4b2c      	ldr	r3, [pc, #176]	@ (8002064 <channel_screen_func+0x19c>)
 8001fb4:	709a      	strb	r2, [r3, #2]
			break;
 8001fb6:	e04a      	b.n	800204e <channel_screen_func+0x186>
		case eKey_Enter:
			if(Info_Ch != m_cfg.cur_ch){
 8001fb8:	4b2a      	ldr	r3, [pc, #168]	@ (8002064 <channel_screen_func+0x19c>)
 8001fba:	789a      	ldrb	r2, [r3, #2]
 8001fbc:	4b2a      	ldr	r3, [pc, #168]	@ (8002068 <channel_screen_func+0x1a0>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d006      	beq.n	8001fd2 <channel_screen_func+0x10a>
				Info_idx = 0;
 8001fc4:	4b29      	ldr	r3, [pc, #164]	@ (800206c <channel_screen_func+0x1a4>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	701a      	strb	r2, [r3, #0]
				Info_Ch = m_cfg.cur_ch;
 8001fca:	4b26      	ldr	r3, [pc, #152]	@ (8002064 <channel_screen_func+0x19c>)
 8001fcc:	789a      	ldrb	r2, [r3, #2]
 8001fce:	4b26      	ldr	r3, [pc, #152]	@ (8002068 <channel_screen_func+0x1a0>)
 8001fd0:	701a      	strb	r2, [r3, #0]
			}

			draw_title(Info_list[Info_idx]);
 8001fd2:	4b26      	ldr	r3, [pc, #152]	@ (800206c <channel_screen_func+0x1a4>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	3310      	adds	r3, #16
 8001fd8:	443b      	add	r3, r7
 8001fda:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff fcf8 	bl	80019d4 <draw_title>
			Info_idx++;
 8001fe4:	4b21      	ldr	r3, [pc, #132]	@ (800206c <channel_screen_func+0x1a4>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	4b1f      	ldr	r3, [pc, #124]	@ (800206c <channel_screen_func+0x1a4>)
 8001fee:	701a      	strb	r2, [r3, #0]
			if(Info_idx > 3){
 8001ff0:	4b1e      	ldr	r3, [pc, #120]	@ (800206c <channel_screen_func+0x1a4>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b03      	cmp	r3, #3
 8001ff6:	d902      	bls.n	8001ffe <channel_screen_func+0x136>
				Info_idx = 0;
 8001ff8:	4b1c      	ldr	r3, [pc, #112]	@ (800206c <channel_screen_func+0x1a4>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	701a      	strb	r2, [r3, #0]
			}
			return eMAX_SCREEN_ID;
 8001ffe:	230f      	movs	r3, #15
 8002000:	e029      	b.n	8002056 <channel_screen_func+0x18e>
		case eKey_SetMode:
			draw_title(eCH_OnTIME);
 8002002:	2001      	movs	r0, #1
 8002004:	f7ff fce6 	bl	80019d4 <draw_title>
			m_cfg.set_time = load_cfg.on_time[m_cfg.cur_ch];
 8002008:	4b16      	ldr	r3, [pc, #88]	@ (8002064 <channel_screen_func+0x19c>)
 800200a:	789b      	ldrb	r3, [r3, #2]
 800200c:	4a18      	ldr	r2, [pc, #96]	@ (8002070 <channel_screen_func+0x1a8>)
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	4413      	add	r3, r2
 8002012:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8002016:	b29a      	uxth	r2, r3
 8002018:	4b12      	ldr	r3, [pc, #72]	@ (8002064 <channel_screen_func+0x19c>)
 800201a:	815a      	strh	r2, [r3, #10]
			m_cfg.cursor = 13;
 800201c:	4b11      	ldr	r3, [pc, #68]	@ (8002064 <channel_screen_func+0x19c>)
 800201e:	220d      	movs	r2, #13
 8002020:	70da      	strb	r2, [r3, #3]
			m_cfg.digit_num = 4;  // 0 ~ 4
 8002022:	4b10      	ldr	r3, [pc, #64]	@ (8002064 <channel_screen_func+0x19c>)
 8002024:	2204      	movs	r2, #4
 8002026:	725a      	strb	r2, [r3, #9]
			//m_cfg.set_mode =1;
			//LOG_DBG("Delay Set Ch[%d] time[%d]", m_cfg.cur_ch, m_cfg.set_time);
			split_num(m_cfg.set_time, m_cfg.input_num);			
 8002028:	4b0e      	ldr	r3, [pc, #56]	@ (8002064 <channel_screen_func+0x19c>)
 800202a:	895b      	ldrh	r3, [r3, #10]
 800202c:	4911      	ldr	r1, [pc, #68]	@ (8002074 <channel_screen_func+0x1ac>)
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff fed6 	bl	8001de0 <split_num>
			LCD_LOCATE(2, m_cfg.cursor);
 8002034:	4b0b      	ldr	r3, [pc, #44]	@ (8002064 <channel_screen_func+0x19c>)
 8002036:	78db      	ldrb	r3, [r3, #3]
 8002038:	4619      	mov	r1, r3
 800203a:	2002      	movs	r0, #2
 800203c:	f7ff fbbc 	bl	80017b8 <LCD_LOCATE>
			LCD_DISP_CURSOR();
 8002040:	f7ff fbb3 	bl	80017aa <LCD_DISP_CURSOR>
			return eSET_ON_TIME_SC;
 8002044:	2302      	movs	r3, #2
 8002046:	e006      	b.n	8002056 <channel_screen_func+0x18e>
		default:
			break;
 8002048:	bf00      	nop
 800204a:	e000      	b.n	800204e <channel_screen_func+0x186>
			break;
 800204c:	bf00      	nop
	}
	
	draw_title(eCH_CHSelect);	
 800204e:	2000      	movs	r0, #0
 8002050:	f7ff fcc0 	bl	80019d4 <draw_title>
	//LOG_INF("Return ch scree function\r\n");
	return eMAX_SCREEN_ID;
 8002054:	230f      	movs	r3, #15
}
 8002056:	4618      	mov	r0, r3
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	04030201 	.word	0x04030201
 8002064:	20000bdc 	.word	0x20000bdc
 8002068:	20000148 	.word	0x20000148
 800206c:	20000c6f 	.word	0x20000c6f
 8002070:	20000c28 	.word	0x20000c28
 8002074:	20000be0 	.word	0x20000be0

08002078 <set_changetime_func>:

ScreenID_t set_changetime_func(Screen_param_t param)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b090      	sub	sp, #64	@ 0x40
 800207c:	af00      	add	r7, sp, #0
 800207e:	463b      	mov	r3, r7
 8002080:	e883 0003 	stmia.w	r3, {r0, r1}
	char line_1_buf[LCD_PRINT_MAX], line_2_buf[LCD_PRINT_MAX];
	ScreenID_t ret_sc = param.sc_id;
 8002084:	783b      	ldrb	r3, [r7, #0]
 8002086:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t old_cursor = m_cfg.cursor;
 800208a:	4bba      	ldr	r3, [pc, #744]	@ (8002374 <set_changetime_func+0x2fc>)
 800208c:	78db      	ldrb	r3, [r3, #3]
 800208e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t digit_idx = (m_cfg.cursor - 9);
 8002092:	4bb8      	ldr	r3, [pc, #736]	@ (8002374 <set_changetime_func+0x2fc>)
 8002094:	78db      	ldrb	r3, [r3, #3]
 8002096:	3b09      	subs	r3, #9
 8002098:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	uint8_t change_value = 0, channel = m_cfg.cur_ch;
 800209c:	2300      	movs	r3, #0
 800209e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 80020a2:	4bb4      	ldr	r3, [pc, #720]	@ (8002374 <set_changetime_func+0x2fc>)
 80020a4:	789b      	ldrb	r3, [r3, #2]
 80020a6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	BackEnd_Cmd_t cmd;
	uint32_t set_time;
	
	//LOG_DBG("Cursor[%d] digit[%d] key[%s]", m_cfg.cursor, digit_idx, key_id_2_str(param.key));
	switch(param.key){
 80020aa:	887b      	ldrh	r3, [r7, #2]
 80020ac:	3b01      	subs	r3, #1
 80020ae:	2b0b      	cmp	r3, #11
 80020b0:	f200 8169 	bhi.w	8002386 <set_changetime_func+0x30e>
 80020b4:	a201      	add	r2, pc, #4	@ (adr r2, 80020bc <set_changetime_func+0x44>)
 80020b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ba:	bf00      	nop
 80020bc:	08002271 	.word	0x08002271
 80020c0:	080020ed 	.word	0x080020ed
 80020c4:	08002387 	.word	0x08002387
 80020c8:	08002191 	.word	0x08002191
 80020cc:	08002387 	.word	0x08002387
 80020d0:	08002387 	.word	0x08002387
 80020d4:	08002387 	.word	0x08002387
 80020d8:	08002309 	.word	0x08002309
 80020dc:	08002387 	.word	0x08002387
 80020e0:	08002235 	.word	0x08002235
 80020e4:	08002387 	.word	0x08002387
 80020e8:	08002253 	.word	0x08002253
		case eKey_Up:
			if((m_cfg.input_num[0] == 5) && (digit_idx != 0)){
 80020ec:	4ba1      	ldr	r3, [pc, #644]	@ (8002374 <set_changetime_func+0x2fc>)
 80020ee:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80020f2:	2b05      	cmp	r3, #5
 80020f4:	d106      	bne.n	8002104 <set_changetime_func+0x8c>
 80020f6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d002      	beq.n	8002104 <set_changetime_func+0x8c>
				return ret_sc;
 80020fe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002102:	e181      	b.n	8002408 <set_changetime_func+0x390>
			}
			if(digit_idx == 0){
 8002104:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002108:	2b00      	cmp	r3, #0
 800210a:	d121      	bne.n	8002150 <set_changetime_func+0xd8>
				m_cfg.input_num[digit_idx]++;
 800210c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002110:	4a98      	ldr	r2, [pc, #608]	@ (8002374 <set_changetime_func+0x2fc>)
 8002112:	441a      	add	r2, r3
 8002114:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8002118:	b2d2      	uxtb	r2, r2
 800211a:	3201      	adds	r2, #1
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	b251      	sxtb	r1, r2
 8002120:	4a94      	ldr	r2, [pc, #592]	@ (8002374 <set_changetime_func+0x2fc>)
 8002122:	4413      	add	r3, r2
 8002124:	460a      	mov	r2, r1
 8002126:	711a      	strb	r2, [r3, #4]
				if(m_cfg.input_num[digit_idx] > 5){
 8002128:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800212c:	4a91      	ldr	r2, [pc, #580]	@ (8002374 <set_changetime_func+0x2fc>)
 800212e:	4413      	add	r3, r2
 8002130:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002134:	2b05      	cmp	r3, #5
 8002136:	dd05      	ble.n	8002144 <set_changetime_func+0xcc>
					m_cfg.input_num[digit_idx] = 0;
 8002138:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800213c:	4a8d      	ldr	r2, [pc, #564]	@ (8002374 <set_changetime_func+0x2fc>)
 800213e:	4413      	add	r3, r2
 8002140:	2200      	movs	r2, #0
 8002142:	711a      	strb	r2, [r3, #4]
				}
				memset(&m_cfg.input_num[1], 0, 4);
 8002144:	2204      	movs	r2, #4
 8002146:	2100      	movs	r1, #0
 8002148:	488b      	ldr	r0, [pc, #556]	@ (8002378 <set_changetime_func+0x300>)
 800214a:	f006 fa0b 	bl	8008564 <memset>
 800214e:	e01b      	b.n	8002188 <set_changetime_func+0x110>
			}else{
				m_cfg.input_num[digit_idx]++;
 8002150:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002154:	4a87      	ldr	r2, [pc, #540]	@ (8002374 <set_changetime_func+0x2fc>)
 8002156:	441a      	add	r2, r3
 8002158:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	3201      	adds	r2, #1
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	b251      	sxtb	r1, r2
 8002164:	4a83      	ldr	r2, [pc, #524]	@ (8002374 <set_changetime_func+0x2fc>)
 8002166:	4413      	add	r3, r2
 8002168:	460a      	mov	r2, r1
 800216a:	711a      	strb	r2, [r3, #4]
				if(m_cfg.input_num[digit_idx] > 9){
 800216c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002170:	4a80      	ldr	r2, [pc, #512]	@ (8002374 <set_changetime_func+0x2fc>)
 8002172:	4413      	add	r3, r2
 8002174:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002178:	2b09      	cmp	r3, #9
 800217a:	dd05      	ble.n	8002188 <set_changetime_func+0x110>
					m_cfg.input_num[digit_idx] = 0;
 800217c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002180:	4a7c      	ldr	r2, [pc, #496]	@ (8002374 <set_changetime_func+0x2fc>)
 8002182:	4413      	add	r3, r2
 8002184:	2200      	movs	r2, #0
 8002186:	711a      	strb	r2, [r3, #4]
				}
			}
			//LOG_HEX_DUMP(m_cfg.input_num, 5, "Up");
			change_value=1;
 8002188:	2301      	movs	r3, #1
 800218a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
			break;
 800218e:	e0fa      	b.n	8002386 <set_changetime_func+0x30e>
		case eKey_Down:
			if((m_cfg.input_num[0] == 5) && (digit_idx != 0)){
 8002190:	4b78      	ldr	r3, [pc, #480]	@ (8002374 <set_changetime_func+0x2fc>)
 8002192:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002196:	2b05      	cmp	r3, #5
 8002198:	d106      	bne.n	80021a8 <set_changetime_func+0x130>
 800219a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d002      	beq.n	80021a8 <set_changetime_func+0x130>
				return ret_sc;
 80021a2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80021a6:	e12f      	b.n	8002408 <set_changetime_func+0x390>
			}
			if(digit_idx == 0){
 80021a8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d121      	bne.n	80021f4 <set_changetime_func+0x17c>
				m_cfg.input_num[digit_idx]--;
 80021b0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80021b4:	4a6f      	ldr	r2, [pc, #444]	@ (8002374 <set_changetime_func+0x2fc>)
 80021b6:	441a      	add	r2, r3
 80021b8:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80021bc:	b2d2      	uxtb	r2, r2
 80021be:	3a01      	subs	r2, #1
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	b251      	sxtb	r1, r2
 80021c4:	4a6b      	ldr	r2, [pc, #428]	@ (8002374 <set_changetime_func+0x2fc>)
 80021c6:	4413      	add	r3, r2
 80021c8:	460a      	mov	r2, r1
 80021ca:	711a      	strb	r2, [r3, #4]
				if(m_cfg.input_num[digit_idx] < 0){
 80021cc:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80021d0:	4a68      	ldr	r2, [pc, #416]	@ (8002374 <set_changetime_func+0x2fc>)
 80021d2:	4413      	add	r3, r2
 80021d4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	da05      	bge.n	80021e8 <set_changetime_func+0x170>
					m_cfg.input_num[digit_idx] = 5;
 80021dc:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80021e0:	4a64      	ldr	r2, [pc, #400]	@ (8002374 <set_changetime_func+0x2fc>)
 80021e2:	4413      	add	r3, r2
 80021e4:	2205      	movs	r2, #5
 80021e6:	711a      	strb	r2, [r3, #4]
				}
				memset(&m_cfg.input_num[1], 0, 4);
 80021e8:	2204      	movs	r2, #4
 80021ea:	2100      	movs	r1, #0
 80021ec:	4862      	ldr	r0, [pc, #392]	@ (8002378 <set_changetime_func+0x300>)
 80021ee:	f006 f9b9 	bl	8008564 <memset>
 80021f2:	e01b      	b.n	800222c <set_changetime_func+0x1b4>
			}else{
				m_cfg.input_num[digit_idx]--;
 80021f4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80021f8:	4a5e      	ldr	r2, [pc, #376]	@ (8002374 <set_changetime_func+0x2fc>)
 80021fa:	441a      	add	r2, r3
 80021fc:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8002200:	b2d2      	uxtb	r2, r2
 8002202:	3a01      	subs	r2, #1
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	b251      	sxtb	r1, r2
 8002208:	4a5a      	ldr	r2, [pc, #360]	@ (8002374 <set_changetime_func+0x2fc>)
 800220a:	4413      	add	r3, r2
 800220c:	460a      	mov	r2, r1
 800220e:	711a      	strb	r2, [r3, #4]
				if(m_cfg.input_num[digit_idx] < 0){
 8002210:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002214:	4a57      	ldr	r2, [pc, #348]	@ (8002374 <set_changetime_func+0x2fc>)
 8002216:	4413      	add	r3, r2
 8002218:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	da05      	bge.n	800222c <set_changetime_func+0x1b4>
					m_cfg.input_num[digit_idx] = 9;
 8002220:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002224:	4a53      	ldr	r2, [pc, #332]	@ (8002374 <set_changetime_func+0x2fc>)
 8002226:	4413      	add	r3, r2
 8002228:	2209      	movs	r2, #9
 800222a:	711a      	strb	r2, [r3, #4]
				}
			}
			//LOG_HEX_DUMP(m_cfg.input_num, 5, "Down");
			change_value=1;
 800222c:	2301      	movs	r3, #1
 800222e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
			break;
 8002232:	e0a8      	b.n	8002386 <set_changetime_func+0x30e>
		case eKey_CursorUp:
			m_cfg.cursor--;
 8002234:	4b4f      	ldr	r3, [pc, #316]	@ (8002374 <set_changetime_func+0x2fc>)
 8002236:	78db      	ldrb	r3, [r3, #3]
 8002238:	3b01      	subs	r3, #1
 800223a:	b2da      	uxtb	r2, r3
 800223c:	4b4d      	ldr	r3, [pc, #308]	@ (8002374 <set_changetime_func+0x2fc>)
 800223e:	70da      	strb	r2, [r3, #3]
			if(m_cfg.cursor < 9){
 8002240:	4b4c      	ldr	r3, [pc, #304]	@ (8002374 <set_changetime_func+0x2fc>)
 8002242:	78db      	ldrb	r3, [r3, #3]
 8002244:	2b08      	cmp	r3, #8
 8002246:	f200 8092 	bhi.w	800236e <set_changetime_func+0x2f6>
				m_cfg.cursor = 13;
 800224a:	4b4a      	ldr	r3, [pc, #296]	@ (8002374 <set_changetime_func+0x2fc>)
 800224c:	220d      	movs	r2, #13
 800224e:	70da      	strb	r2, [r3, #3]
			}
			break;
 8002250:	e08d      	b.n	800236e <set_changetime_func+0x2f6>
		case eKey_CursorDown:
			m_cfg.cursor++;
 8002252:	4b48      	ldr	r3, [pc, #288]	@ (8002374 <set_changetime_func+0x2fc>)
 8002254:	78db      	ldrb	r3, [r3, #3]
 8002256:	3301      	adds	r3, #1
 8002258:	b2da      	uxtb	r2, r3
 800225a:	4b46      	ldr	r3, [pc, #280]	@ (8002374 <set_changetime_func+0x2fc>)
 800225c:	70da      	strb	r2, [r3, #3]
			if(m_cfg.cursor > 13){
 800225e:	4b45      	ldr	r3, [pc, #276]	@ (8002374 <set_changetime_func+0x2fc>)
 8002260:	78db      	ldrb	r3, [r3, #3]
 8002262:	2b0d      	cmp	r3, #13
 8002264:	f240 808e 	bls.w	8002384 <set_changetime_func+0x30c>
				m_cfg.cursor = 9;
 8002268:	4b42      	ldr	r3, [pc, #264]	@ (8002374 <set_changetime_func+0x2fc>)
 800226a:	2209      	movs	r2, #9
 800226c:	70da      	strb	r2, [r3, #3]
			}		
			break;
 800226e:	e089      	b.n	8002384 <set_changetime_func+0x30c>
		case eKey_Enter:
			if(param.sc_id == eSET_ON_TIME_SC){
 8002270:	783b      	ldrb	r3, [r7, #0]
 8002272:	2b02      	cmp	r3, #2
 8002274:	d119      	bne.n	80022aa <set_changetime_func+0x232>
				load_cfg.on_time[channel] = combine_array(m_cfg.input_num);
 8002276:	4841      	ldr	r0, [pc, #260]	@ (800237c <set_changetime_func+0x304>)
 8002278:	f7ff fdf8 	bl	8001e6c <combine_array>
 800227c:	4602      	mov	r2, r0
 800227e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002282:	b291      	uxth	r1, r2
 8002284:	4a3e      	ldr	r2, [pc, #248]	@ (8002380 <set_changetime_func+0x308>)
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	4413      	add	r3, r2
 800228a:	460a      	mov	r2, r1
 800228c:	f8a3 2007 	strh.w	r2, [r3, #7]
				cmd = eCMD_Ontime;
 8002290:	23b2      	movs	r3, #178	@ 0xb2
 8002292:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
				set_time = (uint32_t)load_cfg.on_time[channel];
 8002296:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800229a:	4a39      	ldr	r2, [pc, #228]	@ (8002380 <set_changetime_func+0x308>)
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	4413      	add	r3, r2
 80022a0:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80022a8:	e01a      	b.n	80022e0 <set_changetime_func+0x268>
			}else{
				load_cfg.delay_time[channel] = combine_array(m_cfg.input_num);
 80022aa:	4834      	ldr	r0, [pc, #208]	@ (800237c <set_changetime_func+0x304>)
 80022ac:	f7ff fdde 	bl	8001e6c <combine_array>
 80022b0:	4602      	mov	r2, r0
 80022b2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80022b6:	b291      	uxth	r1, r2
 80022b8:	4a31      	ldr	r2, [pc, #196]	@ (8002380 <set_changetime_func+0x308>)
 80022ba:	3308      	adds	r3, #8
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	4413      	add	r3, r2
 80022c0:	460a      	mov	r2, r1
 80022c2:	f8a3 2007 	strh.w	r2, [r3, #7]
				cmd = eCMD_Delaytime;
 80022c6:	23b3      	movs	r3, #179	@ 0xb3
 80022c8:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
				set_time = (uint32_t)load_cfg.delay_time[channel];
 80022cc:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80022d0:	4a2b      	ldr	r2, [pc, #172]	@ (8002380 <set_changetime_func+0x308>)
 80022d2:	3308      	adds	r3, #8
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	4413      	add	r3, r2
 80022d8:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80022dc:	b29b      	uxth	r3, r3
 80022de:	63bb      	str	r3, [r7, #56]	@ 0x38
			}
			if(save_data() != eMAX_SCREEN_ID){
 80022e0:	f000 f8a0 	bl	8002424 <save_data>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b0f      	cmp	r3, #15
 80022e8:	d005      	beq.n	80022f6 <set_changetime_func+0x27e>
				ret_sc = eERROR_SC;
 80022ea:	2310      	movs	r3, #16
 80022ec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				return ret_sc;
 80022f0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80022f4:	e088      	b.n	8002408 <set_changetime_func+0x390>
			}else{
				send_cmd_2_backend(cmd, channel, set_time);
 80022f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 80022fe:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff fb20 	bl	8001948 <send_cmd_2_backend>
			}
		case eKey_Mode:
			if(param.sc_id == eSET_ON_TIME_SC){
 8002308:	783b      	ldrb	r3, [r7, #0]
 800230a:	2b02      	cmp	r3, #2
 800230c:	d126      	bne.n	800235c <set_changetime_func+0x2e4>
				draw_title(eCH_DelayTIME);
 800230e:	2002      	movs	r0, #2
 8002310:	f7ff fb60 	bl	80019d4 <draw_title>
				ret_sc = eSET_DELAY_TIME_SC;
 8002314:	2303      	movs	r3, #3
 8002316:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				m_cfg.set_time = load_cfg.delay_time[channel];
 800231a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800231e:	4a18      	ldr	r2, [pc, #96]	@ (8002380 <set_changetime_func+0x308>)
 8002320:	3308      	adds	r3, #8
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	4413      	add	r3, r2
 8002326:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800232a:	b29a      	uxth	r2, r3
 800232c:	4b11      	ldr	r3, [pc, #68]	@ (8002374 <set_changetime_func+0x2fc>)
 800232e:	815a      	strh	r2, [r3, #10]
				m_cfg.cursor = 13;
 8002330:	4b10      	ldr	r3, [pc, #64]	@ (8002374 <set_changetime_func+0x2fc>)
 8002332:	220d      	movs	r2, #13
 8002334:	70da      	strb	r2, [r3, #3]
				m_cfg.digit_num = 4;  // 0 ~ 4
 8002336:	4b0f      	ldr	r3, [pc, #60]	@ (8002374 <set_changetime_func+0x2fc>)
 8002338:	2204      	movs	r2, #4
 800233a:	725a      	strb	r2, [r3, #9]
				//LOG_DBG("Delay Set Ch[%d] time[%d]", channel, m_cfg.set_time);
				split_num(m_cfg.set_time, m_cfg.input_num);
 800233c:	4b0d      	ldr	r3, [pc, #52]	@ (8002374 <set_changetime_func+0x2fc>)
 800233e:	895b      	ldrh	r3, [r3, #10]
 8002340:	490e      	ldr	r1, [pc, #56]	@ (800237c <set_changetime_func+0x304>)
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff fd4c 	bl	8001de0 <split_num>
				//LOG_HEX_DUMP(m_cfg.input_num, m_cfg.digit_num, "Set delay");
				LCD_LOCATE(2, m_cfg.cursor);
 8002348:	4b0a      	ldr	r3, [pc, #40]	@ (8002374 <set_changetime_func+0x2fc>)
 800234a:	78db      	ldrb	r3, [r3, #3]
 800234c:	4619      	mov	r1, r3
 800234e:	2002      	movs	r0, #2
 8002350:	f7ff fa32 	bl	80017b8 <LCD_LOCATE>
				change_value = 1;
 8002354:	2301      	movs	r3, #1
 8002356:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
			}else{
				draw_title(eCH_TriggerSet);
				ret_sc = eSET_TRIGGER_SC;
				LCD_DISP_ON(); // Cursor off
			}
			break;
 800235a:	e014      	b.n	8002386 <set_changetime_func+0x30e>
				draw_title(eCH_TriggerSet);
 800235c:	2003      	movs	r0, #3
 800235e:	f7ff fb39 	bl	80019d4 <draw_title>
				ret_sc = eSET_TRIGGER_SC;
 8002362:	2304      	movs	r3, #4
 8002364:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				LCD_DISP_ON(); // Cursor off
 8002368:	f7ff fa18 	bl	800179c <LCD_DISP_ON>
			break;
 800236c:	e00b      	b.n	8002386 <set_changetime_func+0x30e>
			break;
 800236e:	bf00      	nop
 8002370:	e009      	b.n	8002386 <set_changetime_func+0x30e>
 8002372:	bf00      	nop
 8002374:	20000bdc 	.word	0x20000bdc
 8002378:	20000be1 	.word	0x20000be1
 800237c:	20000be0 	.word	0x20000be0
 8002380:	20000c28 	.word	0x20000c28
			break;
 8002384:	bf00      	nop
	}

	if(change_value){
 8002386:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800238a:	2b00      	cmp	r3, #0
 800238c:	d02e      	beq.n	80023ec <set_changetime_func+0x374>
		//LOG_DBG("Change Value Ch[%d] time[%d]", channel+1, combine_array(m_cfg.input_num));
		if(param.sc_id == eSET_ON_TIME_SC){
 800238e:	783b      	ldrb	r3, [r7, #0]
 8002390:	2b02      	cmp	r3, #2
 8002392:	d109      	bne.n	80023a8 <set_changetime_func+0x330>
			sprintf(line_1_buf, "CH%d On-Time     \n", channel+1);
 8002394:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002398:	1c5a      	adds	r2, r3, #1
 800239a:	f107 0320 	add.w	r3, r7, #32
 800239e:	491c      	ldr	r1, [pc, #112]	@ (8002410 <set_changetime_func+0x398>)
 80023a0:	4618      	mov	r0, r3
 80023a2:	f006 f881 	bl	80084a8 <siprintf>
 80023a6:	e008      	b.n	80023ba <set_changetime_func+0x342>
		}else{
			sprintf(line_1_buf, "CH%d Delay-Time  \n", channel+1);
 80023a8:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80023ac:	1c5a      	adds	r2, r3, #1
 80023ae:	f107 0320 	add.w	r3, r7, #32
 80023b2:	4918      	ldr	r1, [pc, #96]	@ (8002414 <set_changetime_func+0x39c>)
 80023b4:	4618      	mov	r0, r3
 80023b6:	f006 f877 	bl	80084a8 <siprintf>
		}
		sprintf(line_2_buf, "Value : %05d us\n", combine_array(m_cfg.input_num));
 80023ba:	4817      	ldr	r0, [pc, #92]	@ (8002418 <set_changetime_func+0x3a0>)
 80023bc:	f7ff fd56 	bl	8001e6c <combine_array>
 80023c0:	4602      	mov	r2, r0
 80023c2:	f107 030c 	add.w	r3, r7, #12
 80023c6:	4915      	ldr	r1, [pc, #84]	@ (800241c <set_changetime_func+0x3a4>)
 80023c8:	4618      	mov	r0, r3
 80023ca:	f006 f86d 	bl	80084a8 <siprintf>
		//LOG_DBG("Change Value[%s]", line_2_buf);
		LCD_LOCATE(2,1);
 80023ce:	2101      	movs	r1, #1
 80023d0:	2002      	movs	r0, #2
 80023d2:	f7ff f9f1 	bl	80017b8 <LCD_LOCATE>
		LCD_printstring(line_2_buf);
 80023d6:	f107 030c 	add.w	r3, r7, #12
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff f9c0 	bl	8001760 <LCD_printstring>
		LCD_LOCATE(2,m_cfg.cursor);
 80023e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002420 <set_changetime_func+0x3a8>)
 80023e2:	78db      	ldrb	r3, [r3, #3]
 80023e4:	4619      	mov	r1, r3
 80023e6:	2002      	movs	r0, #2
 80023e8:	f7ff f9e6 	bl	80017b8 <LCD_LOCATE>
	}
	if(m_cfg.cursor != old_cursor){
 80023ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002420 <set_changetime_func+0x3a8>)
 80023ee:	78db      	ldrb	r3, [r3, #3]
 80023f0:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d005      	beq.n	8002404 <set_changetime_func+0x38c>
		LCD_LOCATE(2, m_cfg.cursor);
 80023f8:	4b09      	ldr	r3, [pc, #36]	@ (8002420 <set_changetime_func+0x3a8>)
 80023fa:	78db      	ldrb	r3, [r3, #3]
 80023fc:	4619      	mov	r1, r3
 80023fe:	2002      	movs	r0, #2
 8002400:	f7ff f9da 	bl	80017b8 <LCD_LOCATE>
	}
	return ret_sc;
 8002404:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8002408:	4618      	mov	r0, r3
 800240a:	3740      	adds	r7, #64	@ 0x40
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	08009484 	.word	0x08009484
 8002414:	080094a8 	.word	0x080094a8
 8002418:	20000be0 	.word	0x20000be0
 800241c:	0800968c 	.word	0x0800968c
 8002420:	20000bdc 	.word	0x20000bdc

08002424 <save_data>:

static ScreenID_t save_data(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
	memcpy(m_app_config, &load_cfg, sizeof(config_t));
 8002428:	4b09      	ldr	r3, [pc, #36]	@ (8002450 <save_data+0x2c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a09      	ldr	r2, [pc, #36]	@ (8002454 <save_data+0x30>)
 800242e:	4618      	mov	r0, r3
 8002430:	4611      	mov	r1, r2
 8002432:	2347      	movs	r3, #71	@ 0x47
 8002434:	461a      	mov	r2, r3
 8002436:	f006 f927 	bl	8008688 <memcpy>
	if(app_save_config() < 0){
 800243a:	f7fe f957 	bl	80006ec <app_save_config>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	da01      	bge.n	8002448 <save_data+0x24>
		return eERROR_SC;
 8002444:	2310      	movs	r3, #16
 8002446:	e000      	b.n	800244a <save_data+0x26>
	}else{
		//draw_title(eCH_CHSelect);
		return eMAX_SCREEN_ID;
 8002448:	230f      	movs	r3, #15
	}
}
 800244a:	4618      	mov	r0, r3
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20000218 	.word	0x20000218
 8002454:	20000c28 	.word	0x20000c28

08002458 <run_remote_mode>:

static void run_remote_mode(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
	apps_set_remote_mode();
 800245c:	f7fe f8ce 	bl	80005fc <apps_set_remote_mode>
	send_cmd_2_backend(eCMD_FR_SetRemote, 0, m_cfg.remote_mode);
 8002460:	4b04      	ldr	r3, [pc, #16]	@ (8002474 <run_remote_mode+0x1c>)
 8002462:	785b      	ldrb	r3, [r3, #1]
 8002464:	461a      	mov	r2, r3
 8002466:	2100      	movs	r1, #0
 8002468:	20c0      	movs	r0, #192	@ 0xc0
 800246a:	f7ff fa6d 	bl	8001948 <send_cmd_2_backend>
}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000bdc 	.word	0x20000bdc

08002478 <blink_text_screen_func>:

ScreenID_t blink_text_screen_func(Screen_param_t param)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	463b      	mov	r3, r7
 8002480:	e883 0003 	stmia.w	r3, {r0, r1}
	ScreenID_t ret_sc = param.sc_id;
 8002484:	783b      	ldrb	r3, [r7, #0]
 8002486:	73fb      	strb	r3, [r7, #15]
	uint8_t old_value;
	BackEnd_Cmd_t cmd = 0;
 8002488:	2300      	movs	r3, #0
 800248a:	737b      	strb	r3, [r7, #13]
	
	if(ret_sc == eSET_TRIGGER_SC){
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	2b04      	cmp	r3, #4
 8002490:	d108      	bne.n	80024a4 <blink_text_screen_func+0x2c>
		old_value = load_cfg.edge[m_cfg.cur_ch];
 8002492:	4b79      	ldr	r3, [pc, #484]	@ (8002678 <blink_text_screen_func+0x200>)
 8002494:	789b      	ldrb	r3, [r3, #2]
 8002496:	461a      	mov	r2, r3
 8002498:	4b78      	ldr	r3, [pc, #480]	@ (800267c <blink_text_screen_func+0x204>)
 800249a:	4413      	add	r3, r2
 800249c:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 80024a0:	73bb      	strb	r3, [r7, #14]
 80024a2:	e002      	b.n	80024aa <blink_text_screen_func+0x32>
	}else{
		old_value = load_cfg.mode;
 80024a4:	4b75      	ldr	r3, [pc, #468]	@ (800267c <blink_text_screen_func+0x204>)
 80024a6:	791b      	ldrb	r3, [r3, #4]
 80024a8:	73bb      	strb	r3, [r7, #14]
	}

	switch(param.key){
 80024aa:	887b      	ldrh	r3, [r7, #2]
 80024ac:	3b01      	subs	r3, #1
 80024ae:	2b0f      	cmp	r3, #15
 80024b0:	f200 80d9 	bhi.w	8002666 <blink_text_screen_func+0x1ee>
 80024b4:	a201      	add	r2, pc, #4	@ (adr r2, 80024bc <blink_text_screen_func+0x44>)
 80024b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ba:	bf00      	nop
 80024bc:	0800258f 	.word	0x0800258f
 80024c0:	080024fd 	.word	0x080024fd
 80024c4:	08002667 	.word	0x08002667
 80024c8:	080024fd 	.word	0x080024fd
 80024cc:	08002667 	.word	0x08002667
 80024d0:	08002667 	.word	0x08002667
 80024d4:	08002667 	.word	0x08002667
 80024d8:	0800264b 	.word	0x0800264b
 80024dc:	08002667 	.word	0x08002667
 80024e0:	08002667 	.word	0x08002667
 80024e4:	08002667 	.word	0x08002667
 80024e8:	08002667 	.word	0x08002667
 80024ec:	08002667 	.word	0x08002667
 80024f0:	08002667 	.word	0x08002667
 80024f4:	08002667 	.word	0x08002667
 80024f8:	080025dd 	.word	0x080025dd
		case eKey_Up:
		case eKey_Down:
			if(m_cfg.set_mode == 0){
 80024fc:	4b5e      	ldr	r3, [pc, #376]	@ (8002678 <blink_text_screen_func+0x200>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <blink_text_screen_func+0x90>
				return ret_sc;
 8002504:	7bfb      	ldrb	r3, [r7, #15]
 8002506:	e0b2      	b.n	800266e <blink_text_screen_func+0x1f6>
			}
			old_value ^= 1;
 8002508:	7bbb      	ldrb	r3, [r7, #14]
 800250a:	f083 0301 	eor.w	r3, r3, #1
 800250e:	73bb      	strb	r3, [r7, #14]
			if(ret_sc == eSET_TRIGGER_SC){
 8002510:	7bfb      	ldrb	r3, [r7, #15]
 8002512:	2b04      	cmp	r3, #4
 8002514:	d11b      	bne.n	800254e <blink_text_screen_func+0xd6>
				sprintf(m_cfg.blink_text[0], "Value : %s \n", (old_value==eFALLING)?"Falling":"Rising ");
 8002516:	7bbb      	ldrb	r3, [r7, #14]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <blink_text_screen_func+0xa8>
 800251c:	4b58      	ldr	r3, [pc, #352]	@ (8002680 <blink_text_screen_func+0x208>)
 800251e:	e000      	b.n	8002522 <blink_text_screen_func+0xaa>
 8002520:	4b58      	ldr	r3, [pc, #352]	@ (8002684 <blink_text_screen_func+0x20c>)
 8002522:	461a      	mov	r2, r3
 8002524:	4958      	ldr	r1, [pc, #352]	@ (8002688 <blink_text_screen_func+0x210>)
 8002526:	4859      	ldr	r0, [pc, #356]	@ (800268c <blink_text_screen_func+0x214>)
 8002528:	f005 ffbe 	bl	80084a8 <siprintf>
				load_cfg.edge[m_cfg.cur_ch] = (old_value==eFALLING)?eFALLING:eRISING;
 800252c:	7bbb      	ldrb	r3, [r7, #14]
 800252e:	2b00      	cmp	r3, #0
 8002530:	bf14      	ite	ne
 8002532:	2301      	movne	r3, #1
 8002534:	2300      	moveq	r3, #0
 8002536:	b2d9      	uxtb	r1, r3
 8002538:	4b4f      	ldr	r3, [pc, #316]	@ (8002678 <blink_text_screen_func+0x200>)
 800253a:	789b      	ldrb	r3, [r3, #2]
 800253c:	461a      	mov	r2, r3
 800253e:	4b4f      	ldr	r3, [pc, #316]	@ (800267c <blink_text_screen_func+0x204>)
 8002540:	4413      	add	r3, r2
 8002542:	460a      	mov	r2, r1
 8002544:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
				cmd = eCMD_InputEdge;
 8002548:	23b8      	movs	r3, #184	@ 0xb8
 800254a:	737b      	strb	r3, [r7, #13]
 800254c:	e015      	b.n	800257a <blink_text_screen_func+0x102>
			}else{
				sprintf(m_cfg.blink_text[0], "      %s     \n", (old_value==eONE_ONE)?"1 : 1" : "1 : N");
 800254e:	7bbb      	ldrb	r3, [r7, #14]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <blink_text_screen_func+0xe0>
 8002554:	4b4e      	ldr	r3, [pc, #312]	@ (8002690 <blink_text_screen_func+0x218>)
 8002556:	e000      	b.n	800255a <blink_text_screen_func+0xe2>
 8002558:	4b4e      	ldr	r3, [pc, #312]	@ (8002694 <blink_text_screen_func+0x21c>)
 800255a:	461a      	mov	r2, r3
 800255c:	494e      	ldr	r1, [pc, #312]	@ (8002698 <blink_text_screen_func+0x220>)
 800255e:	484b      	ldr	r0, [pc, #300]	@ (800268c <blink_text_screen_func+0x214>)
 8002560:	f005 ffa2 	bl	80084a8 <siprintf>
				load_cfg.mode = (old_value==eONE_ONE)?eONE_ONE:eONE_N;
 8002564:	7bbb      	ldrb	r3, [r7, #14]
 8002566:	2b00      	cmp	r3, #0
 8002568:	bf14      	ite	ne
 800256a:	2301      	movne	r3, #1
 800256c:	2300      	moveq	r3, #0
 800256e:	b2db      	uxtb	r3, r3
 8002570:	461a      	mov	r2, r3
 8002572:	4b42      	ldr	r3, [pc, #264]	@ (800267c <blink_text_screen_func+0x204>)
 8002574:	711a      	strb	r2, [r3, #4]
				cmd = eCMD_OutMode;
 8002576:	23b1      	movs	r3, #177	@ 0xb1
 8002578:	737b      	strb	r3, [r7, #13]
			}
			//LOG_DBG("old[%d] %s", old_value, m_cfg.blink_text[0]);
			LCD_LOCATE(m_cfg.blink_row,1);
 800257a:	4b3f      	ldr	r3, [pc, #252]	@ (8002678 <blink_text_screen_func+0x200>)
 800257c:	7b9b      	ldrb	r3, [r3, #14]
 800257e:	2101      	movs	r1, #1
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff f919 	bl	80017b8 <LCD_LOCATE>
			LCD_printstring(m_cfg.blink_text[0]);
 8002586:	4841      	ldr	r0, [pc, #260]	@ (800268c <blink_text_screen_func+0x214>)
 8002588:	f7ff f8ea 	bl	8001760 <LCD_printstring>
			break;			
 800258c:	e06e      	b.n	800266c <blink_text_screen_func+0x1f4>
		case eKey_Enter:
			if(m_cfg.set_mode){
 800258e:	4b3a      	ldr	r3, [pc, #232]	@ (8002678 <blink_text_screen_func+0x200>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d01f      	beq.n	80025d6 <blink_text_screen_func+0x15e>
				m_cfg.enable_blink = 0;
 8002596:	4b38      	ldr	r3, [pc, #224]	@ (8002678 <blink_text_screen_func+0x200>)
 8002598:	2200      	movs	r2, #0
 800259a:	731a      	strb	r2, [r3, #12]
				m_cfg.set_mode = 0;
 800259c:	4b36      	ldr	r3, [pc, #216]	@ (8002678 <blink_text_screen_func+0x200>)
 800259e:	2200      	movs	r2, #0
 80025a0:	701a      	strb	r2, [r3, #0]
				apps_set_blink_enable(m_cfg.enable_blink);
 80025a2:	4b35      	ldr	r3, [pc, #212]	@ (8002678 <blink_text_screen_func+0x200>)
 80025a4:	7b1b      	ldrb	r3, [r3, #12]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fe f836 	bl	8000618 <apps_set_blink_enable>
				ret_sc = save_data();
 80025ac:	f7ff ff3a 	bl	8002424 <save_data>
 80025b0:	4603      	mov	r3, r0
 80025b2:	73fb      	strb	r3, [r7, #15]
				if(ret_sc != eMAX_SCREEN_ID){
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
 80025b6:	2b0f      	cmp	r3, #15
 80025b8:	d001      	beq.n	80025be <blink_text_screen_func+0x146>
					return eERROR_SC;
 80025ba:	2310      	movs	r3, #16
 80025bc:	e057      	b.n	800266e <blink_text_screen_func+0x1f6>
				}
				send_cmd_2_backend(cmd, m_cfg.cur_ch, old_value);
 80025be:	4b2e      	ldr	r3, [pc, #184]	@ (8002678 <blink_text_screen_func+0x200>)
 80025c0:	7899      	ldrb	r1, [r3, #2]
 80025c2:	7bbb      	ldrb	r3, [r7, #14]
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	7b7b      	ldrb	r3, [r7, #13]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff f9bd 	bl	8001948 <send_cmd_2_backend>
				draw_title(eCH_CHSelect);
 80025ce:	2000      	movs	r0, #0
 80025d0:	f7ff fa00 	bl	80019d4 <draw_title>
			}else{
				ret_sc = eCHANNEL_SC;
			}
			break;
 80025d4:	e04a      	b.n	800266c <blink_text_screen_func+0x1f4>
				ret_sc = eCHANNEL_SC;
 80025d6:	2301      	movs	r3, #1
 80025d8:	73fb      	strb	r3, [r7, #15]
			break;
 80025da:	e047      	b.n	800266c <blink_text_screen_func+0x1f4>
		case eKey_SetMode:
			if(ret_sc == eSET_TRIGGER_SC){
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d10f      	bne.n	8002602 <blink_text_screen_func+0x18a>
				sprintf(m_cfg.blink_text[0], "Value : %s \n", (old_value==eRISING)?"Rising ":"Falling");
 80025e2:	7bbb      	ldrb	r3, [r7, #14]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d101      	bne.n	80025ec <blink_text_screen_func+0x174>
 80025e8:	4b26      	ldr	r3, [pc, #152]	@ (8002684 <blink_text_screen_func+0x20c>)
 80025ea:	e000      	b.n	80025ee <blink_text_screen_func+0x176>
 80025ec:	4b24      	ldr	r3, [pc, #144]	@ (8002680 <blink_text_screen_func+0x208>)
 80025ee:	461a      	mov	r2, r3
 80025f0:	4925      	ldr	r1, [pc, #148]	@ (8002688 <blink_text_screen_func+0x210>)
 80025f2:	4826      	ldr	r0, [pc, #152]	@ (800268c <blink_text_screen_func+0x214>)
 80025f4:	f005 ff58 	bl	80084a8 <siprintf>
				sprintf(m_cfg.blink_text[1], "Value :         \n");
 80025f8:	4928      	ldr	r1, [pc, #160]	@ (800269c <blink_text_screen_func+0x224>)
 80025fa:	4829      	ldr	r0, [pc, #164]	@ (80026a0 <blink_text_screen_func+0x228>)
 80025fc:	f005 ff54 	bl	80084a8 <siprintf>
 8002600:	e011      	b.n	8002626 <blink_text_screen_func+0x1ae>
			}else{
				sprintf(m_cfg.blink_text[0], "      %s     \n", (old_value==eONE_N)?"1 : N" : "1 : 1");
 8002602:	7bbb      	ldrb	r3, [r7, #14]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d101      	bne.n	800260c <blink_text_screen_func+0x194>
 8002608:	4b22      	ldr	r3, [pc, #136]	@ (8002694 <blink_text_screen_func+0x21c>)
 800260a:	e000      	b.n	800260e <blink_text_screen_func+0x196>
 800260c:	4b20      	ldr	r3, [pc, #128]	@ (8002690 <blink_text_screen_func+0x218>)
 800260e:	461a      	mov	r2, r3
 8002610:	4921      	ldr	r1, [pc, #132]	@ (8002698 <blink_text_screen_func+0x220>)
 8002612:	481e      	ldr	r0, [pc, #120]	@ (800268c <blink_text_screen_func+0x214>)
 8002614:	f005 ff48 	bl	80084a8 <siprintf>
				sprintf(m_cfg.blink_text[1], "                \n");
 8002618:	4922      	ldr	r1, [pc, #136]	@ (80026a4 <blink_text_screen_func+0x22c>)
 800261a:	4821      	ldr	r0, [pc, #132]	@ (80026a0 <blink_text_screen_func+0x228>)
 800261c:	f005 ff44 	bl	80084a8 <siprintf>
				draw_title(eSET_OPMODE);
 8002620:	2005      	movs	r0, #5
 8002622:	f7ff f9d7 	bl	80019d4 <draw_title>
			}
			m_cfg.blink = 0;
 8002626:	4b14      	ldr	r3, [pc, #80]	@ (8002678 <blink_text_screen_func+0x200>)
 8002628:	2200      	movs	r2, #0
 800262a:	735a      	strb	r2, [r3, #13]
			m_cfg.blink_row = 2;
 800262c:	4b12      	ldr	r3, [pc, #72]	@ (8002678 <blink_text_screen_func+0x200>)
 800262e:	2202      	movs	r2, #2
 8002630:	739a      	strb	r2, [r3, #14]
			m_cfg.enable_blink = 1;
 8002632:	4b11      	ldr	r3, [pc, #68]	@ (8002678 <blink_text_screen_func+0x200>)
 8002634:	2201      	movs	r2, #1
 8002636:	731a      	strb	r2, [r3, #12]
			m_cfg.set_mode = 1;
 8002638:	4b0f      	ldr	r3, [pc, #60]	@ (8002678 <blink_text_screen_func+0x200>)
 800263a:	2201      	movs	r2, #1
 800263c:	701a      	strb	r2, [r3, #0]

			apps_set_blink_enable(m_cfg.enable_blink);
 800263e:	4b0e      	ldr	r3, [pc, #56]	@ (8002678 <blink_text_screen_func+0x200>)
 8002640:	7b1b      	ldrb	r3, [r3, #12]
 8002642:	4618      	mov	r0, r3
 8002644:	f7fd ffe8 	bl	8000618 <apps_set_blink_enable>
			break;
 8002648:	e010      	b.n	800266c <blink_text_screen_func+0x1f4>
		case eKey_Mode:
			if(ret_sc == eSET_TRIGGER_SC){
 800264a:	7bfb      	ldrb	r3, [r7, #15]
 800264c:	2b04      	cmp	r3, #4
 800264e:	d103      	bne.n	8002658 <blink_text_screen_func+0x1e0>
				draw_title(eCH_TriggerSet);
 8002650:	2003      	movs	r0, #3
 8002652:	f7ff f9bf 	bl	80019d4 <draw_title>
			}else if(ret_sc == eOPMODE_SC){
				draw_title(eSEL_OPMODE);
			}
			break;
 8002656:	e008      	b.n	800266a <blink_text_screen_func+0x1f2>
			}else if(ret_sc == eOPMODE_SC){
 8002658:	7bfb      	ldrb	r3, [r7, #15]
 800265a:	2b05      	cmp	r3, #5
 800265c:	d105      	bne.n	800266a <blink_text_screen_func+0x1f2>
				draw_title(eSEL_OPMODE);
 800265e:	2004      	movs	r0, #4
 8002660:	f7ff f9b8 	bl	80019d4 <draw_title>
			break;
 8002664:	e001      	b.n	800266a <blink_text_screen_func+0x1f2>
		default:
			break;
 8002666:	bf00      	nop
 8002668:	e000      	b.n	800266c <blink_text_screen_func+0x1f4>
			break;
 800266a:	bf00      	nop
	}	

	return ret_sc;
 800266c:	7bfb      	ldrb	r3, [r7, #15]
}
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20000bdc 	.word	0x20000bdc
 800267c:	20000c28 	.word	0x20000c28
 8002680:	080094d8 	.word	0x080094d8
 8002684:	080094d0 	.word	0x080094d0
 8002688:	080094e0 	.word	0x080094e0
 800268c:	20000beb 	.word	0x20000beb
 8002690:	08009520 	.word	0x08009520
 8002694:	08009518 	.word	0x08009518
 8002698:	08009528 	.word	0x08009528
 800269c:	080094f0 	.word	0x080094f0
 80026a0:	20000bff 	.word	0x20000bff
 80026a4:	080096a0 	.word	0x080096a0

080026a8 <uart_screen_func>:

ScreenID_t uart_screen_func(Screen_param_t param)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	463b      	mov	r3, r7
 80026b0:	e883 0003 	stmia.w	r3, {r0, r1}
	ScreenID_t ret_sc = param.sc_id;
 80026b4:	783b      	ldrb	r3, [r7, #0]
 80026b6:	73fb      	strb	r3, [r7, #15]
	uint8_t old_value = load_cfg.dev_id;
 80026b8:	4b49      	ldr	r3, [pc, #292]	@ (80027e0 <uart_screen_func+0x138>)
 80026ba:	795b      	ldrb	r3, [r3, #5]
 80026bc:	73bb      	strb	r3, [r7, #14]

	switch(param.key){
 80026be:	887b      	ldrh	r3, [r7, #2]
 80026c0:	3b01      	subs	r3, #1
 80026c2:	2b0f      	cmp	r3, #15
 80026c4:	d878      	bhi.n	80027b8 <uart_screen_func+0x110>
 80026c6:	a201      	add	r2, pc, #4	@ (adr r2, 80026cc <uart_screen_func+0x24>)
 80026c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026cc:	0800273d 	.word	0x0800273d
 80026d0:	0800270d 	.word	0x0800270d
 80026d4:	080027b9 	.word	0x080027b9
 80026d8:	08002725 	.word	0x08002725
 80026dc:	080027b9 	.word	0x080027b9
 80026e0:	080027b9 	.word	0x080027b9
 80026e4:	080027b9 	.word	0x080027b9
 80026e8:	080027a9 	.word	0x080027a9
 80026ec:	080027b9 	.word	0x080027b9
 80026f0:	080027b9 	.word	0x080027b9
 80026f4:	080027b9 	.word	0x080027b9
 80026f8:	080027b9 	.word	0x080027b9
 80026fc:	080027b9 	.word	0x080027b9
 8002700:	080027b9 	.word	0x080027b9
 8002704:	080027b9 	.word	0x080027b9
 8002708:	08002785 	.word	0x08002785
		case eKey_Up:
			if(load_cfg.dev_id++ >= MAX_DEV_ID){
 800270c:	4b34      	ldr	r3, [pc, #208]	@ (80027e0 <uart_screen_func+0x138>)
 800270e:	795b      	ldrb	r3, [r3, #5]
 8002710:	1c5a      	adds	r2, r3, #1
 8002712:	b2d1      	uxtb	r1, r2
 8002714:	4a32      	ldr	r2, [pc, #200]	@ (80027e0 <uart_screen_func+0x138>)
 8002716:	7151      	strb	r1, [r2, #5]
 8002718:	2b09      	cmp	r3, #9
 800271a:	d94f      	bls.n	80027bc <uart_screen_func+0x114>
				load_cfg.dev_id = 1;
 800271c:	4b30      	ldr	r3, [pc, #192]	@ (80027e0 <uart_screen_func+0x138>)
 800271e:	2201      	movs	r2, #1
 8002720:	715a      	strb	r2, [r3, #5]
			}			
			break;
 8002722:	e04b      	b.n	80027bc <uart_screen_func+0x114>
		case eKey_Down:
			if(load_cfg.dev_id-- <= 1){
 8002724:	4b2e      	ldr	r3, [pc, #184]	@ (80027e0 <uart_screen_func+0x138>)
 8002726:	795b      	ldrb	r3, [r3, #5]
 8002728:	1e5a      	subs	r2, r3, #1
 800272a:	b2d1      	uxtb	r1, r2
 800272c:	4a2c      	ldr	r2, [pc, #176]	@ (80027e0 <uart_screen_func+0x138>)
 800272e:	7151      	strb	r1, [r2, #5]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d845      	bhi.n	80027c0 <uart_screen_func+0x118>
				load_cfg.dev_id = MAX_DEV_ID;
 8002734:	4b2a      	ldr	r3, [pc, #168]	@ (80027e0 <uart_screen_func+0x138>)
 8002736:	220a      	movs	r2, #10
 8002738:	715a      	strb	r2, [r3, #5]
			}			
			break;
 800273a:	e041      	b.n	80027c0 <uart_screen_func+0x118>
		case eKey_Enter:
			if(m_cfg.set_mode){
 800273c:	4b29      	ldr	r3, [pc, #164]	@ (80027e4 <uart_screen_func+0x13c>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d017      	beq.n	8002774 <uart_screen_func+0xcc>
				LCD_DISP_ON();	// Cursor off
 8002744:	f7ff f82a 	bl	800179c <LCD_DISP_ON>

				ret_sc = save_data();
 8002748:	f7ff fe6c 	bl	8002424 <save_data>
 800274c:	4603      	mov	r3, r0
 800274e:	73fb      	strb	r3, [r7, #15]
				if(ret_sc == eERROR_SC){
 8002750:	7bfb      	ldrb	r3, [r7, #15]
 8002752:	2b10      	cmp	r3, #16
 8002754:	d101      	bne.n	800275a <uart_screen_func+0xb2>
					return ret_sc;
 8002756:	7bfb      	ldrb	r3, [r7, #15]
 8002758:	e03e      	b.n	80027d8 <uart_screen_func+0x130>
				}
				send_cmd_2_backend(eCMD_FR_SetDevID, 0, m_cfg.remote_mode);
 800275a:	4b22      	ldr	r3, [pc, #136]	@ (80027e4 <uart_screen_func+0x13c>)
 800275c:	785b      	ldrb	r3, [r3, #1]
 800275e:	461a      	mov	r2, r3
 8002760:	2100      	movs	r1, #0
 8002762:	20c2      	movs	r0, #194	@ 0xc2
 8002764:	f7ff f8f0 	bl	8001948 <send_cmd_2_backend>
				ret_sc = eETH_IP_SC;
 8002768:	2307      	movs	r3, #7
 800276a:	73fb      	strb	r3, [r7, #15]
				m_cfg.set_mode = 0;
 800276c:	4b1d      	ldr	r3, [pc, #116]	@ (80027e4 <uart_screen_func+0x13c>)
 800276e:	2200      	movs	r2, #0
 8002770:	701a      	strb	r2, [r3, #0]
			}else{
				m_cfg.remote_mode = eREMOTE_RS232;
				ret_sc = eREMOTE_SC;
				run_remote_mode();
			}
			break;			
 8002772:	e028      	b.n	80027c6 <uart_screen_func+0x11e>
				m_cfg.remote_mode = eREMOTE_RS232;
 8002774:	4b1b      	ldr	r3, [pc, #108]	@ (80027e4 <uart_screen_func+0x13c>)
 8002776:	2201      	movs	r2, #1
 8002778:	705a      	strb	r2, [r3, #1]
				ret_sc = eREMOTE_SC;
 800277a:	230a      	movs	r3, #10
 800277c:	73fb      	strb	r3, [r7, #15]
				run_remote_mode();
 800277e:	f7ff fe6b 	bl	8002458 <run_remote_mode>
			break;			
 8002782:	e020      	b.n	80027c6 <uart_screen_func+0x11e>
		case eKey_SetMode:
			m_cfg.set_mode = 1;
 8002784:	4b17      	ldr	r3, [pc, #92]	@ (80027e4 <uart_screen_func+0x13c>)
 8002786:	2201      	movs	r2, #1
 8002788:	701a      	strb	r2, [r3, #0]
			m_cfg.cursor = 14;
 800278a:	4b16      	ldr	r3, [pc, #88]	@ (80027e4 <uart_screen_func+0x13c>)
 800278c:	220e      	movs	r2, #14
 800278e:	70da      	strb	r2, [r3, #3]
			draw_title(eRS_DevID);
 8002790:	2006      	movs	r0, #6
 8002792:	f7ff f91f 	bl	80019d4 <draw_title>
			LCD_LOCATE(2, m_cfg.cursor);
 8002796:	4b13      	ldr	r3, [pc, #76]	@ (80027e4 <uart_screen_func+0x13c>)
 8002798:	78db      	ldrb	r3, [r3, #3]
 800279a:	4619      	mov	r1, r3
 800279c:	2002      	movs	r0, #2
 800279e:	f7ff f80b 	bl	80017b8 <LCD_LOCATE>
			LCD_DISP_CURSOR();  // Cursor on		
 80027a2:	f7ff f802 	bl	80017aa <LCD_DISP_CURSOR>
			break;
 80027a6:	e00e      	b.n	80027c6 <uart_screen_func+0x11e>
		case eKey_Mode:
			if(m_cfg.set_mode == 0){
 80027a8:	4b0e      	ldr	r3, [pc, #56]	@ (80027e4 <uart_screen_func+0x13c>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d109      	bne.n	80027c4 <uart_screen_func+0x11c>
				draw_title(eRS_DevID);
 80027b0:	2006      	movs	r0, #6
 80027b2:	f7ff f90f 	bl	80019d4 <draw_title>
			}
			break;
 80027b6:	e005      	b.n	80027c4 <uart_screen_func+0x11c>
		default:
			break;
 80027b8:	bf00      	nop
 80027ba:	e004      	b.n	80027c6 <uart_screen_func+0x11e>
			break;
 80027bc:	bf00      	nop
 80027be:	e002      	b.n	80027c6 <uart_screen_func+0x11e>
			break;
 80027c0:	bf00      	nop
 80027c2:	e000      	b.n	80027c6 <uart_screen_func+0x11e>
			break;
 80027c4:	bf00      	nop
	}
	if(old_value != load_cfg.dev_id){
 80027c6:	4b06      	ldr	r3, [pc, #24]	@ (80027e0 <uart_screen_func+0x138>)
 80027c8:	795b      	ldrb	r3, [r3, #5]
 80027ca:	7bba      	ldrb	r2, [r7, #14]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d002      	beq.n	80027d6 <uart_screen_func+0x12e>
		draw_title(eRS_DevID);
 80027d0:	2006      	movs	r0, #6
 80027d2:	f7ff f8ff 	bl	80019d4 <draw_title>
	}
	return ret_sc;
 80027d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	20000c28 	.word	0x20000c28
 80027e4:	20000bdc 	.word	0x20000bdc

080027e8 <check_octet>:

static void check_octet(uint8_t *check_value, uint8_t isUp)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	460b      	mov	r3, r1
 80027f2:	70fb      	strb	r3, [r7, #3]
	uint16_t addr = combine_array((int8_t *)check_value);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f7ff fb39 	bl	8001e6c <combine_array>
 80027fa:	4603      	mov	r3, r0
 80027fc:	81fb      	strh	r3, [r7, #14]
	uint8_t cur_digit = m_cfg.ip_digit;
 80027fe:	4b17      	ldr	r3, [pc, #92]	@ (800285c <check_octet+0x74>)
 8002800:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002804:	737b      	strb	r3, [r7, #13]

	//LOG_DBG("isup[%d] Addr[%x] cur_dig[%d]", isUp, addr, cur_digit);

	if(addr > 255){
 8002806:	89fb      	ldrh	r3, [r7, #14]
 8002808:	2bff      	cmp	r3, #255	@ 0xff
 800280a:	d922      	bls.n	8002852 <check_octet+0x6a>
		if(cur_digit == 0){
 800280c:	7b7b      	ldrb	r3, [r7, #13]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d103      	bne.n	800281a <check_octet+0x32>
			check_value[0] = 0;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	701a      	strb	r2, [r3, #0]
					check_value[cur_digit] = 5;
				}
			}
		}
	}	
}
 8002818:	e01b      	b.n	8002852 <check_octet+0x6a>
			if(isUp){
 800281a:	78fb      	ldrb	r3, [r7, #3]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d005      	beq.n	800282c <check_octet+0x44>
				check_value[cur_digit] = 0;
 8002820:	7b7b      	ldrb	r3, [r7, #13]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	4413      	add	r3, r2
 8002826:	2200      	movs	r2, #0
 8002828:	701a      	strb	r2, [r3, #0]
}
 800282a:	e012      	b.n	8002852 <check_octet+0x6a>
				if((cur_digit == 1) &&(check_value[2] > 5)){
 800282c:	7b7b      	ldrb	r3, [r7, #13]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d10a      	bne.n	8002848 <check_octet+0x60>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	3302      	adds	r3, #2
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b05      	cmp	r3, #5
 800283a:	d905      	bls.n	8002848 <check_octet+0x60>
					check_value[cur_digit] = 4;
 800283c:	7b7b      	ldrb	r3, [r7, #13]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	4413      	add	r3, r2
 8002842:	2204      	movs	r2, #4
 8002844:	701a      	strb	r2, [r3, #0]
}
 8002846:	e004      	b.n	8002852 <check_octet+0x6a>
					check_value[cur_digit] = 5;
 8002848:	7b7b      	ldrb	r3, [r7, #13]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	4413      	add	r3, r2
 800284e:	2205      	movs	r2, #5
 8002850:	701a      	strb	r2, [r3, #0]
}
 8002852:	bf00      	nop
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20000bdc 	.word	0x20000bdc

08002860 <ip_screen_func>:

ScreenID_t ip_screen_func(Screen_param_t param)
{
 8002860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002862:	b08f      	sub	sp, #60	@ 0x3c
 8002864:	af02      	add	r7, sp, #8
 8002866:	463b      	mov	r3, r7
 8002868:	e883 0003 	stmia.w	r3, {r0, r1}
	ScreenID_t ret_sc = param.sc_id;	
 800286c:	783b      	ldrb	r3, [r7, #0]
 800286e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t temp_addr[3];
	char line_buf[LCD_PRINT_MAX];
	int i;
	uint8_t is_up = 0;
 8002872:	2300      	movs	r3, #0
 8002874:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t old_cursor = m_cfg.cursor;
 8002878:	4bad      	ldr	r3, [pc, #692]	@ (8002b30 <ip_screen_func+0x2d0>)
 800287a:	78db      	ldrb	r3, [r3, #3]
 800287c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	
	//LOG_DBG("cursor[%d] digit[%d]", m_cfg.cursor, m_cfg.ip_idx);
	switch(param.key){
 8002880:	887b      	ldrh	r3, [r7, #2]
 8002882:	3b01      	subs	r3, #1
 8002884:	2b0f      	cmp	r3, #15
 8002886:	f200 81d3 	bhi.w	8002c30 <ip_screen_func+0x3d0>
 800288a:	a201      	add	r2, pc, #4	@ (adr r2, 8002890 <ip_screen_func+0x30>)
 800288c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002890:	08002b1f 	.word	0x08002b1f
 8002894:	080028d1 	.word	0x080028d1
 8002898:	08002c31 	.word	0x08002c31
 800289c:	080028d1 	.word	0x080028d1
 80028a0:	08002c31 	.word	0x08002c31
 80028a4:	08002c31 	.word	0x08002c31
 80028a8:	08002c31 	.word	0x08002c31
 80028ac:	08002c21 	.word	0x08002c21
 80028b0:	08002c31 	.word	0x08002c31
 80028b4:	08002a23 	.word	0x08002a23
 80028b8:	08002c31 	.word	0x08002c31
 80028bc:	08002aa1 	.word	0x08002aa1
 80028c0:	08002c31 	.word	0x08002c31
 80028c4:	08002c31 	.word	0x08002c31
 80028c8:	08002c31 	.word	0x08002c31
 80028cc:	08002bb3 	.word	0x08002bb3
		case eKey_Up:
		case eKey_Down:
			if(m_cfg.set_mode == 0){
 80028d0:	4b97      	ldr	r3, [pc, #604]	@ (8002b30 <ip_screen_func+0x2d0>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d102      	bne.n	80028de <ip_screen_func+0x7e>
				return ret_sc;
 80028d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80028dc:	e1bd      	b.n	8002c5a <ip_screen_func+0x3fa>
			}
			memcpy(temp_addr, m_cfg.ipaddr[m_cfg.ip_idx],3);
 80028de:	4b94      	ldr	r3, [pc, #592]	@ (8002b30 <ip_screen_func+0x2d0>)
 80028e0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80028e4:	461a      	mov	r2, r3
 80028e6:	4613      	mov	r3, r2
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	4413      	add	r3, r2
 80028ec:	3330      	adds	r3, #48	@ 0x30
 80028ee:	4a90      	ldr	r2, [pc, #576]	@ (8002b30 <ip_screen_func+0x2d0>)
 80028f0:	4413      	add	r3, r2
 80028f2:	1dda      	adds	r2, r3, #7
 80028f4:	f107 0320 	add.w	r3, r7, #32
 80028f8:	8811      	ldrh	r1, [r2, #0]
 80028fa:	7892      	ldrb	r2, [r2, #2]
 80028fc:	8019      	strh	r1, [r3, #0]
 80028fe:	709a      	strb	r2, [r3, #2]
			if(param.key == eKey_Up){
 8002900:	887b      	ldrh	r3, [r7, #2]
 8002902:	2b02      	cmp	r3, #2
 8002904:	d123      	bne.n	800294e <ip_screen_func+0xee>
				if(temp_addr[m_cfg.ip_digit] == 9){
 8002906:	4b8a      	ldr	r3, [pc, #552]	@ (8002b30 <ip_screen_func+0x2d0>)
 8002908:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800290c:	3330      	adds	r3, #48	@ 0x30
 800290e:	443b      	add	r3, r7
 8002910:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002914:	2b09      	cmp	r3, #9
 8002916:	d108      	bne.n	800292a <ip_screen_func+0xca>
					temp_addr[m_cfg.ip_digit] = 0;
 8002918:	4b85      	ldr	r3, [pc, #532]	@ (8002b30 <ip_screen_func+0x2d0>)
 800291a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800291e:	3330      	adds	r3, #48	@ 0x30
 8002920:	443b      	add	r3, r7
 8002922:	2200      	movs	r2, #0
 8002924:	f803 2c10 	strb.w	r2, [r3, #-16]
 8002928:	e00d      	b.n	8002946 <ip_screen_func+0xe6>
				}else{
					temp_addr[m_cfg.ip_digit]++;
 800292a:	4b81      	ldr	r3, [pc, #516]	@ (8002b30 <ip_screen_func+0x2d0>)
 800292c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002930:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8002934:	443a      	add	r2, r7
 8002936:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800293a:	3201      	adds	r2, #1
 800293c:	b2d2      	uxtb	r2, r2
 800293e:	3330      	adds	r3, #48	@ 0x30
 8002940:	443b      	add	r3, r7
 8002942:	f803 2c10 	strb.w	r2, [r3, #-16]
				}
				is_up = 1;
 8002946:	2301      	movs	r3, #1
 8002948:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800294c:	e01f      	b.n	800298e <ip_screen_func+0x12e>
			}else{
				if(temp_addr[m_cfg.ip_digit] == 0){
 800294e:	4b78      	ldr	r3, [pc, #480]	@ (8002b30 <ip_screen_func+0x2d0>)
 8002950:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002954:	3330      	adds	r3, #48	@ 0x30
 8002956:	443b      	add	r3, r7
 8002958:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d108      	bne.n	8002972 <ip_screen_func+0x112>
					temp_addr[m_cfg.ip_digit] = 9;
 8002960:	4b73      	ldr	r3, [pc, #460]	@ (8002b30 <ip_screen_func+0x2d0>)
 8002962:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002966:	3330      	adds	r3, #48	@ 0x30
 8002968:	443b      	add	r3, r7
 800296a:	2209      	movs	r2, #9
 800296c:	f803 2c10 	strb.w	r2, [r3, #-16]
 8002970:	e00d      	b.n	800298e <ip_screen_func+0x12e>
				}else{
					temp_addr[m_cfg.ip_digit]--;
 8002972:	4b6f      	ldr	r3, [pc, #444]	@ (8002b30 <ip_screen_func+0x2d0>)
 8002974:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002978:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800297c:	443a      	add	r2, r7
 800297e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8002982:	3a01      	subs	r2, #1
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	3330      	adds	r3, #48	@ 0x30
 8002988:	443b      	add	r3, r7
 800298a:	f803 2c10 	strb.w	r2, [r3, #-16]
				}
			}
			check_octet(temp_addr, is_up);
 800298e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002992:	f107 0320 	add.w	r3, r7, #32
 8002996:	4611      	mov	r1, r2
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff ff25 	bl	80027e8 <check_octet>
			memcpy(m_cfg.ipaddr[m_cfg.ip_idx], temp_addr, 3);
 800299e:	4b64      	ldr	r3, [pc, #400]	@ (8002b30 <ip_screen_func+0x2d0>)
 80029a0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80029a4:	461a      	mov	r2, r3
 80029a6:	4613      	mov	r3, r2
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	4413      	add	r3, r2
 80029ac:	3330      	adds	r3, #48	@ 0x30
 80029ae:	4a60      	ldr	r2, [pc, #384]	@ (8002b30 <ip_screen_func+0x2d0>)
 80029b0:	4413      	add	r3, r2
 80029b2:	3307      	adds	r3, #7
 80029b4:	461a      	mov	r2, r3
 80029b6:	f107 0320 	add.w	r3, r7, #32
 80029ba:	8819      	ldrh	r1, [r3, #0]
 80029bc:	789b      	ldrb	r3, [r3, #2]
 80029be:	8011      	strh	r1, [r2, #0]
 80029c0:	7093      	strb	r3, [r2, #2]
			sprintf(line_buf, "%03d.%03d.%03d.%03d \n",	(uint8_t)combine_array(m_cfg.ipaddr[0]),
 80029c2:	485c      	ldr	r0, [pc, #368]	@ (8002b34 <ip_screen_func+0x2d4>)
 80029c4:	f7ff fa52 	bl	8001e6c <combine_array>
 80029c8:	4603      	mov	r3, r0
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	461d      	mov	r5, r3
														(uint8_t)combine_array(m_cfg.ipaddr[1]),
 80029ce:	485a      	ldr	r0, [pc, #360]	@ (8002b38 <ip_screen_func+0x2d8>)
 80029d0:	f7ff fa4c 	bl	8001e6c <combine_array>
 80029d4:	4603      	mov	r3, r0
 80029d6:	b2db      	uxtb	r3, r3
			sprintf(line_buf, "%03d.%03d.%03d.%03d \n",	(uint8_t)combine_array(m_cfg.ipaddr[0]),
 80029d8:	461e      	mov	r6, r3
														(uint8_t)combine_array(m_cfg.ipaddr[2]),
 80029da:	4858      	ldr	r0, [pc, #352]	@ (8002b3c <ip_screen_func+0x2dc>)
 80029dc:	f7ff fa46 	bl	8001e6c <combine_array>
 80029e0:	4603      	mov	r3, r0
 80029e2:	b2db      	uxtb	r3, r3
			sprintf(line_buf, "%03d.%03d.%03d.%03d \n",	(uint8_t)combine_array(m_cfg.ipaddr[0]),
 80029e4:	461c      	mov	r4, r3
														(uint8_t)combine_array(m_cfg.ipaddr[3]));
 80029e6:	4856      	ldr	r0, [pc, #344]	@ (8002b40 <ip_screen_func+0x2e0>)
 80029e8:	f7ff fa40 	bl	8001e6c <combine_array>
 80029ec:	4603      	mov	r3, r0
 80029ee:	b2db      	uxtb	r3, r3
			sprintf(line_buf, "%03d.%03d.%03d.%03d \n",	(uint8_t)combine_array(m_cfg.ipaddr[0]),
 80029f0:	f107 000c 	add.w	r0, r7, #12
 80029f4:	9301      	str	r3, [sp, #4]
 80029f6:	9400      	str	r4, [sp, #0]
 80029f8:	4633      	mov	r3, r6
 80029fa:	462a      	mov	r2, r5
 80029fc:	4951      	ldr	r1, [pc, #324]	@ (8002b44 <ip_screen_func+0x2e4>)
 80029fe:	f005 fd53 	bl	80084a8 <siprintf>
			LCD_LOCATE(2,1);
 8002a02:	2101      	movs	r1, #1
 8002a04:	2002      	movs	r0, #2
 8002a06:	f7fe fed7 	bl	80017b8 <LCD_LOCATE>
			LCD_printstring(line_buf);
 8002a0a:	f107 030c 	add.w	r3, r7, #12
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7fe fea6 	bl	8001760 <LCD_printstring>
			LCD_LOCATE(2,m_cfg.cursor);
 8002a14:	4b46      	ldr	r3, [pc, #280]	@ (8002b30 <ip_screen_func+0x2d0>)
 8002a16:	78db      	ldrb	r3, [r3, #3]
 8002a18:	4619      	mov	r1, r3
 8002a1a:	2002      	movs	r0, #2
 8002a1c:	f7fe fecc 	bl	80017b8 <LCD_LOCATE>
			break;
 8002a20:	e10d      	b.n	8002c3e <ip_screen_func+0x3de>
		case eKey_CursorUp:
			if(m_cfg.set_mode == 0){
 8002a22:	4b43      	ldr	r3, [pc, #268]	@ (8002b30 <ip_screen_func+0x2d0>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d102      	bne.n	8002a30 <ip_screen_func+0x1d0>
				return ret_sc;
 8002a2a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002a2e:	e114      	b.n	8002c5a <ip_screen_func+0x3fa>
			}
			m_cfg.cursor--;
 8002a30:	4b3f      	ldr	r3, [pc, #252]	@ (8002b30 <ip_screen_func+0x2d0>)
 8002a32:	78db      	ldrb	r3, [r3, #3]
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	4b3d      	ldr	r3, [pc, #244]	@ (8002b30 <ip_screen_func+0x2d0>)
 8002a3a:	70da      	strb	r2, [r3, #3]
			if(m_cfg.cursor<=0){
 8002a3c:	4b3c      	ldr	r3, [pc, #240]	@ (8002b30 <ip_screen_func+0x2d0>)
 8002a3e:	78db      	ldrb	r3, [r3, #3]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10a      	bne.n	8002a5a <ip_screen_func+0x1fa>
				m_cfg.cursor = 15;
 8002a44:	4b3a      	ldr	r3, [pc, #232]	@ (8002b30 <ip_screen_func+0x2d0>)
 8002a46:	220f      	movs	r2, #15
 8002a48:	70da      	strb	r2, [r3, #3]
				m_cfg.ip_idx = 3;
 8002a4a:	4b39      	ldr	r3, [pc, #228]	@ (8002b30 <ip_screen_func+0x2d0>)
 8002a4c:	2203      	movs	r2, #3
 8002a4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
				m_cfg.ip_digit=2;
 8002a52:	4b37      	ldr	r3, [pc, #220]	@ (8002b30 <ip_screen_func+0x2d0>)
 8002a54:	2202      	movs	r2, #2
 8002a56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}
			m_cfg.ip_digit--;
 8002a5a:	4b35      	ldr	r3, [pc, #212]	@ (8002b30 <ip_screen_func+0x2d0>)
 8002a5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002a60:	3b01      	subs	r3, #1
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	4b32      	ldr	r3, [pc, #200]	@ (8002b30 <ip_screen_func+0x2d0>)
 8002a66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			if(m_cfg.cursor%4 == 0){
 8002a6a:	4b31      	ldr	r3, [pc, #196]	@ (8002b30 <ip_screen_func+0x2d0>)
 8002a6c:	78db      	ldrb	r3, [r3, #3]
 8002a6e:	f003 0303 	and.w	r3, r3, #3
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f040 80dd 	bne.w	8002c34 <ip_screen_func+0x3d4>
				m_cfg.cursor--;
 8002a7a:	4b2d      	ldr	r3, [pc, #180]	@ (8002b30 <ip_screen_func+0x2d0>)
 8002a7c:	78db      	ldrb	r3, [r3, #3]
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	4b2b      	ldr	r3, [pc, #172]	@ (8002b30 <ip_screen_func+0x2d0>)
 8002a84:	70da      	strb	r2, [r3, #3]
				m_cfg.ip_idx--;
 8002a86:	4b2a      	ldr	r3, [pc, #168]	@ (8002b30 <ip_screen_func+0x2d0>)
 8002a88:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	4b27      	ldr	r3, [pc, #156]	@ (8002b30 <ip_screen_func+0x2d0>)
 8002a92:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
				m_cfg.ip_digit=2;
 8002a96:	4b26      	ldr	r3, [pc, #152]	@ (8002b30 <ip_screen_func+0x2d0>)
 8002a98:	2202      	movs	r2, #2
 8002a9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}
			break;
 8002a9e:	e0c9      	b.n	8002c34 <ip_screen_func+0x3d4>
		case eKey_CursorDown:
			if(m_cfg.set_mode == 0){
 8002aa0:	4b23      	ldr	r3, [pc, #140]	@ (8002b30 <ip_screen_func+0x2d0>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d102      	bne.n	8002aae <ip_screen_func+0x24e>
				return ret_sc;
 8002aa8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002aac:	e0d5      	b.n	8002c5a <ip_screen_func+0x3fa>
			}
			m_cfg.cursor++;
 8002aae:	4b20      	ldr	r3, [pc, #128]	@ (8002b30 <ip_screen_func+0x2d0>)
 8002ab0:	78db      	ldrb	r3, [r3, #3]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	4b1e      	ldr	r3, [pc, #120]	@ (8002b30 <ip_screen_func+0x2d0>)
 8002ab8:	70da      	strb	r2, [r3, #3]
			if(m_cfg.cursor>=15){
 8002aba:	4b1d      	ldr	r3, [pc, #116]	@ (8002b30 <ip_screen_func+0x2d0>)
 8002abc:	78db      	ldrb	r3, [r3, #3]
 8002abe:	2b0e      	cmp	r3, #14
 8002ac0:	d90a      	bls.n	8002ad8 <ip_screen_func+0x278>
				m_cfg.cursor = 1;
 8002ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8002b30 <ip_screen_func+0x2d0>)
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	70da      	strb	r2, [r3, #3]
				m_cfg.ip_idx = 0;
 8002ac8:	4b19      	ldr	r3, [pc, #100]	@ (8002b30 <ip_screen_func+0x2d0>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
				m_cfg.ip_digit =0;
 8002ad0:	4b17      	ldr	r3, [pc, #92]	@ (8002b30 <ip_screen_func+0x2d0>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}
			m_cfg.ip_digit++;
 8002ad8:	4b15      	ldr	r3, [pc, #84]	@ (8002b30 <ip_screen_func+0x2d0>)
 8002ada:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002ade:	3301      	adds	r3, #1
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	4b13      	ldr	r3, [pc, #76]	@ (8002b30 <ip_screen_func+0x2d0>)
 8002ae4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			if(m_cfg.cursor%4 == 0){
 8002ae8:	4b11      	ldr	r3, [pc, #68]	@ (8002b30 <ip_screen_func+0x2d0>)
 8002aea:	78db      	ldrb	r3, [r3, #3]
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f040 80a0 	bne.w	8002c38 <ip_screen_func+0x3d8>
				m_cfg.cursor++;
 8002af8:	4b0d      	ldr	r3, [pc, #52]	@ (8002b30 <ip_screen_func+0x2d0>)
 8002afa:	78db      	ldrb	r3, [r3, #3]
 8002afc:	3301      	adds	r3, #1
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	4b0b      	ldr	r3, [pc, #44]	@ (8002b30 <ip_screen_func+0x2d0>)
 8002b02:	70da      	strb	r2, [r3, #3]
				m_cfg.ip_idx++;
 8002b04:	4b0a      	ldr	r3, [pc, #40]	@ (8002b30 <ip_screen_func+0x2d0>)
 8002b06:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	4b08      	ldr	r3, [pc, #32]	@ (8002b30 <ip_screen_func+0x2d0>)
 8002b10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
				m_cfg.ip_digit = 0;
 8002b14:	4b06      	ldr	r3, [pc, #24]	@ (8002b30 <ip_screen_func+0x2d0>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}
			break;
 8002b1c:	e08c      	b.n	8002c38 <ip_screen_func+0x3d8>
		case eKey_Enter:
			if(m_cfg.set_mode){
 8002b1e:	4b04      	ldr	r3, [pc, #16]	@ (8002b30 <ip_screen_func+0x2d0>)
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d03c      	beq.n	8002ba0 <ip_screen_func+0x340>
				LCD_DISP_ON();	// Cursor off
 8002b26:	f7fe fe39 	bl	800179c <LCD_DISP_ON>
				for(i = 0; i < 4; i++){
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b2e:	e021      	b.n	8002b74 <ip_screen_func+0x314>
 8002b30:	20000bdc 	.word	0x20000bdc
 8002b34:	20000c13 	.word	0x20000c13
 8002b38:	20000c16 	.word	0x20000c16
 8002b3c:	20000c19 	.word	0x20000c19
 8002b40:	20000c1c 	.word	0x20000c1c
 8002b44:	08009588 	.word	0x08009588
					load_cfg.ether.ipaddr[i] = combine_array(m_cfg.ipaddr[i]);
 8002b48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	4413      	add	r3, r2
 8002b50:	3330      	adds	r3, #48	@ 0x30
 8002b52:	4a44      	ldr	r2, [pc, #272]	@ (8002c64 <ip_screen_func+0x404>)
 8002b54:	4413      	add	r3, r2
 8002b56:	3307      	adds	r3, #7
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff f987 	bl	8001e6c <combine_array>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	b2d9      	uxtb	r1, r3
 8002b62:	4a41      	ldr	r2, [pc, #260]	@ (8002c68 <ip_screen_func+0x408>)
 8002b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b66:	4413      	add	r3, r2
 8002b68:	332f      	adds	r3, #47	@ 0x2f
 8002b6a:	460a      	mov	r2, r1
 8002b6c:	701a      	strb	r2, [r3, #0]
				for(i = 0; i < 4; i++){
 8002b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b70:	3301      	adds	r3, #1
 8002b72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b76:	2b03      	cmp	r3, #3
 8002b78:	dde6      	ble.n	8002b48 <ip_screen_func+0x2e8>
				}
				ret_sc = save_data();
 8002b7a:	f7ff fc53 	bl	8002424 <save_data>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				m_cfg.set_mode = 0;
 8002b84:	4b37      	ldr	r3, [pc, #220]	@ (8002c64 <ip_screen_func+0x404>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	701a      	strb	r2, [r3, #0]
				if(ret_sc == eERROR_SC){
 8002b8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002b8e:	2b10      	cmp	r3, #16
 8002b90:	d102      	bne.n	8002b98 <ip_screen_func+0x338>
					return ret_sc;
 8002b92:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002b96:	e060      	b.n	8002c5a <ip_screen_func+0x3fa>
				}
				ret_sc = eETH_PORT_SC;
 8002b98:	2308      	movs	r3, #8
 8002b9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				//push_event0(EVT_Remote_Ether);
				m_cfg.remote_mode = eREMOTE_ETHER;
				ret_sc = eREMOTE_SC;
				run_remote_mode();
			}
			break;			
 8002b9e:	e04e      	b.n	8002c3e <ip_screen_func+0x3de>
				m_cfg.remote_mode = eREMOTE_ETHER;
 8002ba0:	4b30      	ldr	r3, [pc, #192]	@ (8002c64 <ip_screen_func+0x404>)
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	705a      	strb	r2, [r3, #1]
				ret_sc = eREMOTE_SC;
 8002ba6:	230a      	movs	r3, #10
 8002ba8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				run_remote_mode();
 8002bac:	f7ff fc54 	bl	8002458 <run_remote_mode>
			break;			
 8002bb0:	e045      	b.n	8002c3e <ip_screen_func+0x3de>
		case eKey_SetMode:
			m_cfg.digit_num = 2;
 8002bb2:	4b2c      	ldr	r3, [pc, #176]	@ (8002c64 <ip_screen_func+0x404>)
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	725a      	strb	r2, [r3, #9]
			for(i = 0; i < 4; i++){
 8002bb8:	2300      	movs	r3, #0
 8002bba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bbc:	e013      	b.n	8002be6 <ip_screen_func+0x386>
				split_num(load_cfg.ether.ipaddr[i], m_cfg.ipaddr[i]);
 8002bbe:	4a2a      	ldr	r2, [pc, #168]	@ (8002c68 <ip_screen_func+0x408>)
 8002bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bc2:	4413      	add	r3, r2
 8002bc4:	332f      	adds	r3, #47	@ 0x2f
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002bcc:	4613      	mov	r3, r2
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	4413      	add	r3, r2
 8002bd2:	3330      	adds	r3, #48	@ 0x30
 8002bd4:	4a23      	ldr	r2, [pc, #140]	@ (8002c64 <ip_screen_func+0x404>)
 8002bd6:	4413      	add	r3, r2
 8002bd8:	3307      	adds	r3, #7
 8002bda:	4619      	mov	r1, r3
 8002bdc:	f7ff f900 	bl	8001de0 <split_num>
			for(i = 0; i < 4; i++){
 8002be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002be2:	3301      	adds	r3, #1
 8002be4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002be8:	2b03      	cmp	r3, #3
 8002bea:	dde8      	ble.n	8002bbe <ip_screen_func+0x35e>
			}
			m_cfg.cursor = 15;
 8002bec:	4b1d      	ldr	r3, [pc, #116]	@ (8002c64 <ip_screen_func+0x404>)
 8002bee:	220f      	movs	r2, #15
 8002bf0:	70da      	strb	r2, [r3, #3]
			m_cfg.ip_idx = 3;
 8002bf2:	4b1c      	ldr	r3, [pc, #112]	@ (8002c64 <ip_screen_func+0x404>)
 8002bf4:	2203      	movs	r2, #3
 8002bf6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
			m_cfg.ip_digit = 2;
 8002bfa:	4b1a      	ldr	r3, [pc, #104]	@ (8002c64 <ip_screen_func+0x404>)
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			m_cfg.set_mode = 1;
 8002c02:	4b18      	ldr	r3, [pc, #96]	@ (8002c64 <ip_screen_func+0x404>)
 8002c04:	2201      	movs	r2, #1
 8002c06:	701a      	strb	r2, [r3, #0]
			LCD_LOCATE(2, m_cfg.cursor);
 8002c08:	4b16      	ldr	r3, [pc, #88]	@ (8002c64 <ip_screen_func+0x404>)
 8002c0a:	78db      	ldrb	r3, [r3, #3]
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	2002      	movs	r0, #2
 8002c10:	f7fe fdd2 	bl	80017b8 <LCD_LOCATE>
			LCD_DISP_CURSOR();  // Cursor on		
 8002c14:	f7fe fdc9 	bl	80017aa <LCD_DISP_CURSOR>
			draw_title(eIP_Set);			
 8002c18:	2007      	movs	r0, #7
 8002c1a:	f7fe fedb 	bl	80019d4 <draw_title>
			break;
 8002c1e:	e00e      	b.n	8002c3e <ip_screen_func+0x3de>
		case eKey_Mode:
			if(m_cfg.set_mode == 0){
 8002c20:	4b10      	ldr	r3, [pc, #64]	@ (8002c64 <ip_screen_func+0x404>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d109      	bne.n	8002c3c <ip_screen_func+0x3dc>
				draw_title(eIP_Set);
 8002c28:	2007      	movs	r0, #7
 8002c2a:	f7fe fed3 	bl	80019d4 <draw_title>
			}
			break;
 8002c2e:	e005      	b.n	8002c3c <ip_screen_func+0x3dc>
		default:
			break;
 8002c30:	bf00      	nop
 8002c32:	e004      	b.n	8002c3e <ip_screen_func+0x3de>
			break;
 8002c34:	bf00      	nop
 8002c36:	e002      	b.n	8002c3e <ip_screen_func+0x3de>
			break;
 8002c38:	bf00      	nop
 8002c3a:	e000      	b.n	8002c3e <ip_screen_func+0x3de>
			break;
 8002c3c:	bf00      	nop
	}

	if(m_cfg.cursor != old_cursor){
 8002c3e:	4b09      	ldr	r3, [pc, #36]	@ (8002c64 <ip_screen_func+0x404>)
 8002c40:	78db      	ldrb	r3, [r3, #3]
 8002c42:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d005      	beq.n	8002c56 <ip_screen_func+0x3f6>
		LCD_LOCATE(2, m_cfg.cursor);
 8002c4a:	4b06      	ldr	r3, [pc, #24]	@ (8002c64 <ip_screen_func+0x404>)
 8002c4c:	78db      	ldrb	r3, [r3, #3]
 8002c4e:	4619      	mov	r1, r3
 8002c50:	2002      	movs	r0, #2
 8002c52:	f7fe fdb1 	bl	80017b8 <LCD_LOCATE>
	}
	return ret_sc;
 8002c56:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3734      	adds	r7, #52	@ 0x34
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c62:	bf00      	nop
 8002c64:	20000bdc 	.word	0x20000bdc
 8002c68:	20000c28 	.word	0x20000c28

08002c6c <port_screen_func>:

ScreenID_t port_screen_func(Screen_param_t param)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b08c      	sub	sp, #48	@ 0x30
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	463b      	mov	r3, r7
 8002c74:	e883 0003 	stmia.w	r3, {r0, r1}
	ScreenID_t ret_sc = param.sc_id;
 8002c78:	783b      	ldrb	r3, [r7, #0]
 8002c7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t old_cursor = m_cfg.cursor;
 8002c7e:	4bb7      	ldr	r3, [pc, #732]	@ (8002f5c <port_screen_func+0x2f0>)
 8002c80:	78db      	ldrb	r3, [r3, #3]
 8002c82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	int8_t temp_port[5];
	char line_buf[LCD_PRINT_MAX];
	int	new_port, direction = 1;
 8002c86:	2301      	movs	r3, #1
 8002c88:	627b      	str	r3, [r7, #36]	@ 0x24
	
	switch(param.key){
 8002c8a:	887b      	ldrh	r3, [r7, #2]
 8002c8c:	2b10      	cmp	r3, #16
 8002c8e:	f200 8177 	bhi.w	8002f80 <port_screen_func+0x314>
 8002c92:	a201      	add	r2, pc, #4	@ (adr r2, 8002c98 <port_screen_func+0x2c>)
 8002c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c98:	08002f71 	.word	0x08002f71
 8002c9c:	08002ed5 	.word	0x08002ed5
 8002ca0:	08002cdd 	.word	0x08002cdd
 8002ca4:	08002f81 	.word	0x08002f81
 8002ca8:	08002cdd 	.word	0x08002cdd
 8002cac:	08002f81 	.word	0x08002f81
 8002cb0:	08002f81 	.word	0x08002f81
 8002cb4:	08002f81 	.word	0x08002f81
 8002cb8:	08002f71 	.word	0x08002f71
 8002cbc:	08002f81 	.word	0x08002f81
 8002cc0:	08002e4d 	.word	0x08002e4d
 8002cc4:	08002f81 	.word	0x08002f81
 8002cc8:	08002e91 	.word	0x08002e91
 8002ccc:	08002f81 	.word	0x08002f81
 8002cd0:	08002f81 	.word	0x08002f81
 8002cd4:	08002f81 	.word	0x08002f81
 8002cd8:	08002f21 	.word	0x08002f21
		case eKey_Up:
		case eKey_Down:
			if(m_cfg.set_mode == 0){
 8002cdc:	4b9f      	ldr	r3, [pc, #636]	@ (8002f5c <port_screen_func+0x2f0>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d102      	bne.n	8002cea <port_screen_func+0x7e>
				return ret_sc;
 8002ce4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002ce8:	e158      	b.n	8002f9c <port_screen_func+0x330>
			}
			memcpy(temp_port, m_cfg.port, 5);
 8002cea:	4a9c      	ldr	r2, [pc, #624]	@ (8002f5c <port_screen_func+0x2f0>)
 8002cec:	f107 031c 	add.w	r3, r7, #28
 8002cf0:	3245      	adds	r2, #69	@ 0x45
 8002cf2:	6810      	ldr	r0, [r2, #0]
 8002cf4:	6018      	str	r0, [r3, #0]
 8002cf6:	7912      	ldrb	r2, [r2, #4]
 8002cf8:	711a      	strb	r2, [r3, #4]

			if(param.key == eKey_Up){
 8002cfa:	887b      	ldrh	r3, [r7, #2]
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d11b      	bne.n	8002d38 <port_screen_func+0xcc>
				temp_port[m_cfg.ip_digit] = (temp_port[m_cfg.ip_digit]+1)%10;
 8002d00:	4b96      	ldr	r3, [pc, #600]	@ (8002f5c <port_screen_func+0x2f0>)
 8002d02:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d06:	3330      	adds	r3, #48	@ 0x30
 8002d08:	443b      	add	r3, r7
 8002d0a:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8002d0e:	1c5a      	adds	r2, r3, #1
 8002d10:	4b93      	ldr	r3, [pc, #588]	@ (8002f60 <port_screen_func+0x2f4>)
 8002d12:	fb83 1302 	smull	r1, r3, r3, r2
 8002d16:	1099      	asrs	r1, r3, #2
 8002d18:	17d3      	asrs	r3, r2, #31
 8002d1a:	1ac9      	subs	r1, r1, r3
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	440b      	add	r3, r1
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	1ad1      	subs	r1, r2, r3
 8002d26:	4b8d      	ldr	r3, [pc, #564]	@ (8002f5c <port_screen_func+0x2f0>)
 8002d28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d2c:	b24a      	sxtb	r2, r1
 8002d2e:	3330      	adds	r3, #48	@ 0x30
 8002d30:	443b      	add	r3, r7
 8002d32:	f803 2c14 	strb.w	r2, [r3, #-20]
 8002d36:	e01e      	b.n	8002d76 <port_screen_func+0x10a>
			}else{
				temp_port[m_cfg.ip_digit] = (temp_port[m_cfg.ip_digit]-1+10)%10;
 8002d38:	4b88      	ldr	r3, [pc, #544]	@ (8002f5c <port_screen_func+0x2f0>)
 8002d3a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d3e:	3330      	adds	r3, #48	@ 0x30
 8002d40:	443b      	add	r3, r7
 8002d42:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8002d46:	f103 0209 	add.w	r2, r3, #9
 8002d4a:	4b85      	ldr	r3, [pc, #532]	@ (8002f60 <port_screen_func+0x2f4>)
 8002d4c:	fb83 1302 	smull	r1, r3, r3, r2
 8002d50:	1099      	asrs	r1, r3, #2
 8002d52:	17d3      	asrs	r3, r2, #31
 8002d54:	1ac9      	subs	r1, r1, r3
 8002d56:	460b      	mov	r3, r1
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	440b      	add	r3, r1
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	1ad1      	subs	r1, r2, r3
 8002d60:	4b7e      	ldr	r3, [pc, #504]	@ (8002f5c <port_screen_func+0x2f0>)
 8002d62:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d66:	b24a      	sxtb	r2, r1
 8002d68:	3330      	adds	r3, #48	@ 0x30
 8002d6a:	443b      	add	r3, r7
 8002d6c:	f803 2c14 	strb.w	r2, [r3, #-20]
				direction = -1;
 8002d70:	f04f 33ff 	mov.w	r3, #4294967295
 8002d74:	627b      	str	r3, [r7, #36]	@ 0x24
			}

			new_port = combine_array(temp_port);
 8002d76:	f107 031c 	add.w	r3, r7, #28
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff f876 	bl	8001e6c <combine_array>
 8002d80:	62b8      	str	r0, [r7, #40]	@ 0x28
//			LOG_DBG("New port[%05d] digit[%d] Value[%d]", new_port, m_cfg.ip_digit, temp_port[m_cfg.ip_digit]);
			while((new_port < MIN_PORT)||(new_port > MAX_PORT)){
 8002d82:	e03c      	b.n	8002dfe <port_screen_func+0x192>
				temp_port[m_cfg.ip_digit] = temp_port[m_cfg.ip_digit] + direction;
 8002d84:	4b75      	ldr	r3, [pc, #468]	@ (8002f5c <port_screen_func+0x2f0>)
 8002d86:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d8a:	3330      	adds	r3, #48	@ 0x30
 8002d8c:	443b      	add	r3, r7
 8002d8e:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	4413      	add	r3, r2
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	4b6f      	ldr	r3, [pc, #444]	@ (8002f5c <port_screen_func+0x2f0>)
 8002d9e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002da2:	b252      	sxtb	r2, r2
 8002da4:	3330      	adds	r3, #48	@ 0x30
 8002da6:	443b      	add	r3, r7
 8002da8:	f803 2c14 	strb.w	r2, [r3, #-20]
				if(temp_port[m_cfg.ip_digit] > 9){
 8002dac:	4b6b      	ldr	r3, [pc, #428]	@ (8002f5c <port_screen_func+0x2f0>)
 8002dae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002db2:	3330      	adds	r3, #48	@ 0x30
 8002db4:	443b      	add	r3, r7
 8002db6:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8002dba:	2b09      	cmp	r3, #9
 8002dbc:	dd08      	ble.n	8002dd0 <port_screen_func+0x164>
					temp_port[m_cfg.ip_digit] = 0;
 8002dbe:	4b67      	ldr	r3, [pc, #412]	@ (8002f5c <port_screen_func+0x2f0>)
 8002dc0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002dc4:	3330      	adds	r3, #48	@ 0x30
 8002dc6:	443b      	add	r3, r7
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f803 2c14 	strb.w	r2, [r3, #-20]
 8002dce:	e010      	b.n	8002df2 <port_screen_func+0x186>
				}else if(temp_port[m_cfg.ip_digit] < 0){
 8002dd0:	4b62      	ldr	r3, [pc, #392]	@ (8002f5c <port_screen_func+0x2f0>)
 8002dd2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002dd6:	3330      	adds	r3, #48	@ 0x30
 8002dd8:	443b      	add	r3, r7
 8002dda:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	da07      	bge.n	8002df2 <port_screen_func+0x186>
					temp_port[m_cfg.ip_digit] = 9;
 8002de2:	4b5e      	ldr	r3, [pc, #376]	@ (8002f5c <port_screen_func+0x2f0>)
 8002de4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002de8:	3330      	adds	r3, #48	@ 0x30
 8002dea:	443b      	add	r3, r7
 8002dec:	2209      	movs	r2, #9
 8002dee:	f803 2c14 	strb.w	r2, [r3, #-20]
				}
				new_port = combine_array(temp_port);
 8002df2:	f107 031c 	add.w	r3, r7, #28
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff f838 	bl	8001e6c <combine_array>
 8002dfc:	62b8      	str	r0, [r7, #40]	@ 0x28
			while((new_port < MIN_PORT)||(new_port > MAX_PORT)){
 8002dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e04:	dbbe      	blt.n	8002d84 <port_screen_func+0x118>
 8002e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e0c:	dcba      	bgt.n	8002d84 <port_screen_func+0x118>
			}

			memcpy(m_cfg.port, temp_port, 5);
 8002e0e:	4b53      	ldr	r3, [pc, #332]	@ (8002f5c <port_screen_func+0x2f0>)
 8002e10:	3345      	adds	r3, #69	@ 0x45
 8002e12:	f107 021c 	add.w	r2, r7, #28
 8002e16:	6810      	ldr	r0, [r2, #0]
 8002e18:	6018      	str	r0, [r3, #0]
 8002e1a:	7912      	ldrb	r2, [r2, #4]
 8002e1c:	711a      	strb	r2, [r3, #4]
			sprintf(line_buf, "Port : %05d    \n", new_port);
 8002e1e:	f107 0308 	add.w	r3, r7, #8
 8002e22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e24:	494f      	ldr	r1, [pc, #316]	@ (8002f64 <port_screen_func+0x2f8>)
 8002e26:	4618      	mov	r0, r3
 8002e28:	f005 fb3e 	bl	80084a8 <siprintf>
			LCD_LOCATE(2,1);
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	2002      	movs	r0, #2
 8002e30:	f7fe fcc2 	bl	80017b8 <LCD_LOCATE>
			LCD_printstring(line_buf);
 8002e34:	f107 0308 	add.w	r3, r7, #8
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7fe fc91 	bl	8001760 <LCD_printstring>
			LCD_LOCATE(2,m_cfg.cursor);
 8002e3e:	4b47      	ldr	r3, [pc, #284]	@ (8002f5c <port_screen_func+0x2f0>)
 8002e40:	78db      	ldrb	r3, [r3, #3]
 8002e42:	4619      	mov	r1, r3
 8002e44:	2002      	movs	r0, #2
 8002e46:	f7fe fcb7 	bl	80017b8 <LCD_LOCATE>
			break;
 8002e4a:	e099      	b.n	8002f80 <port_screen_func+0x314>
		case eKey_CursorUp:
			if(m_cfg.set_mode == 0){
 8002e4c:	4b43      	ldr	r3, [pc, #268]	@ (8002f5c <port_screen_func+0x2f0>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d102      	bne.n	8002e5a <port_screen_func+0x1ee>
				return ret_sc;
 8002e54:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002e58:	e0a0      	b.n	8002f9c <port_screen_func+0x330>
			}
			m_cfg.cursor--;
 8002e5a:	4b40      	ldr	r3, [pc, #256]	@ (8002f5c <port_screen_func+0x2f0>)
 8002e5c:	78db      	ldrb	r3, [r3, #3]
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	4b3e      	ldr	r3, [pc, #248]	@ (8002f5c <port_screen_func+0x2f0>)
 8002e64:	70da      	strb	r2, [r3, #3]
			if(m_cfg.cursor<8){
 8002e66:	4b3d      	ldr	r3, [pc, #244]	@ (8002f5c <port_screen_func+0x2f0>)
 8002e68:	78db      	ldrb	r3, [r3, #3]
 8002e6a:	2b07      	cmp	r3, #7
 8002e6c:	d807      	bhi.n	8002e7e <port_screen_func+0x212>
				m_cfg.cursor = 12;
 8002e6e:	4b3b      	ldr	r3, [pc, #236]	@ (8002f5c <port_screen_func+0x2f0>)
 8002e70:	220c      	movs	r2, #12
 8002e72:	70da      	strb	r2, [r3, #3]
				m_cfg.ip_digit=4;
 8002e74:	4b39      	ldr	r3, [pc, #228]	@ (8002f5c <port_screen_func+0x2f0>)
 8002e76:	2204      	movs	r2, #4
 8002e78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}else{
				m_cfg.ip_digit--;
			}
			break;
 8002e7c:	e080      	b.n	8002f80 <port_screen_func+0x314>
				m_cfg.ip_digit--;
 8002e7e:	4b37      	ldr	r3, [pc, #220]	@ (8002f5c <port_screen_func+0x2f0>)
 8002e80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e84:	3b01      	subs	r3, #1
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	4b34      	ldr	r3, [pc, #208]	@ (8002f5c <port_screen_func+0x2f0>)
 8002e8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			break;
 8002e8e:	e077      	b.n	8002f80 <port_screen_func+0x314>
		case eKey_CursorDown:
			if(m_cfg.set_mode == 0){
 8002e90:	4b32      	ldr	r3, [pc, #200]	@ (8002f5c <port_screen_func+0x2f0>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d102      	bne.n	8002e9e <port_screen_func+0x232>
				return ret_sc;
 8002e98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002e9c:	e07e      	b.n	8002f9c <port_screen_func+0x330>
			}
			m_cfg.cursor++;
 8002e9e:	4b2f      	ldr	r3, [pc, #188]	@ (8002f5c <port_screen_func+0x2f0>)
 8002ea0:	78db      	ldrb	r3, [r3, #3]
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	b2da      	uxtb	r2, r3
 8002ea6:	4b2d      	ldr	r3, [pc, #180]	@ (8002f5c <port_screen_func+0x2f0>)
 8002ea8:	70da      	strb	r2, [r3, #3]
			if(m_cfg.cursor>12){
 8002eaa:	4b2c      	ldr	r3, [pc, #176]	@ (8002f5c <port_screen_func+0x2f0>)
 8002eac:	78db      	ldrb	r3, [r3, #3]
 8002eae:	2b0c      	cmp	r3, #12
 8002eb0:	d907      	bls.n	8002ec2 <port_screen_func+0x256>
				m_cfg.cursor = 8;
 8002eb2:	4b2a      	ldr	r3, [pc, #168]	@ (8002f5c <port_screen_func+0x2f0>)
 8002eb4:	2208      	movs	r2, #8
 8002eb6:	70da      	strb	r2, [r3, #3]
				m_cfg.ip_digit =0;
 8002eb8:	4b28      	ldr	r3, [pc, #160]	@ (8002f5c <port_screen_func+0x2f0>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}else{
				m_cfg.ip_digit++;
			}
			break;
 8002ec0:	e05e      	b.n	8002f80 <port_screen_func+0x314>
				m_cfg.ip_digit++;
 8002ec2:	4b26      	ldr	r3, [pc, #152]	@ (8002f5c <port_screen_func+0x2f0>)
 8002ec4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002ec8:	3301      	adds	r3, #1
 8002eca:	b2da      	uxtb	r2, r3
 8002ecc:	4b23      	ldr	r3, [pc, #140]	@ (8002f5c <port_screen_func+0x2f0>)
 8002ece:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			break;
 8002ed2:	e055      	b.n	8002f80 <port_screen_func+0x314>
		case eKey_Enter:
			if(m_cfg.set_mode){
 8002ed4:	4b21      	ldr	r3, [pc, #132]	@ (8002f5c <port_screen_func+0x2f0>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d018      	beq.n	8002f0e <port_screen_func+0x2a2>
				LCD_DISP_ON();	// Cursor off
 8002edc:	f7fe fc5e 	bl	800179c <LCD_DISP_ON>
				load_cfg.ether.port = combine_array(m_cfg.port);
 8002ee0:	4821      	ldr	r0, [pc, #132]	@ (8002f68 <port_screen_func+0x2fc>)
 8002ee2:	f7fe ffc3 	bl	8001e6c <combine_array>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	4b20      	ldr	r3, [pc, #128]	@ (8002f6c <port_screen_func+0x300>)
 8002eec:	f8a3 2033 	strh.w	r2, [r3, #51]	@ 0x33
				ret_sc = save_data();
 8002ef0:	f7ff fa98 	bl	8002424 <save_data>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if(ret_sc == eERROR_SC){
 8002efa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002efe:	2b10      	cmp	r3, #16
 8002f00:	d102      	bne.n	8002f08 <port_screen_func+0x29c>
					return ret_sc;
 8002f02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002f06:	e049      	b.n	8002f9c <port_screen_func+0x330>
				}
				m_cfg.set_mode = 0;
 8002f08:	4b14      	ldr	r3, [pc, #80]	@ (8002f5c <port_screen_func+0x2f0>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	701a      	strb	r2, [r3, #0]
			}

			m_cfg.remote_mode = eREMOTE_ETHER;
 8002f0e:	4b13      	ldr	r3, [pc, #76]	@ (8002f5c <port_screen_func+0x2f0>)
 8002f10:	2202      	movs	r2, #2
 8002f12:	705a      	strb	r2, [r3, #1]
			ret_sc = eREMOTE_SC;
 8002f14:	230a      	movs	r3, #10
 8002f16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			run_remote_mode();
 8002f1a:	f7ff fa9d 	bl	8002458 <run_remote_mode>
			break;
 8002f1e:	e02f      	b.n	8002f80 <port_screen_func+0x314>
		case eKey_SetMode:
			m_cfg.set_mode = 1;
 8002f20:	4b0e      	ldr	r3, [pc, #56]	@ (8002f5c <port_screen_func+0x2f0>)
 8002f22:	2201      	movs	r2, #1
 8002f24:	701a      	strb	r2, [r3, #0]
			m_cfg.cursor = 12;
 8002f26:	4b0d      	ldr	r3, [pc, #52]	@ (8002f5c <port_screen_func+0x2f0>)
 8002f28:	220c      	movs	r2, #12
 8002f2a:	70da      	strb	r2, [r3, #3]
			m_cfg.digit_num = 4;
 8002f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f5c <port_screen_func+0x2f0>)
 8002f2e:	2204      	movs	r2, #4
 8002f30:	725a      	strb	r2, [r3, #9]
			m_cfg.ip_digit = 4;
 8002f32:	4b0a      	ldr	r3, [pc, #40]	@ (8002f5c <port_screen_func+0x2f0>)
 8002f34:	2204      	movs	r2, #4
 8002f36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			split_num(load_cfg.ether.port, m_cfg.port);
 8002f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8002f6c <port_screen_func+0x300>)
 8002f3c:	f8b3 3033 	ldrh.w	r3, [r3, #51]	@ 0x33
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	4909      	ldr	r1, [pc, #36]	@ (8002f68 <port_screen_func+0x2fc>)
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7fe ff4b 	bl	8001de0 <split_num>
			LCD_LOCATE(2, m_cfg.cursor);
 8002f4a:	4b04      	ldr	r3, [pc, #16]	@ (8002f5c <port_screen_func+0x2f0>)
 8002f4c:	78db      	ldrb	r3, [r3, #3]
 8002f4e:	4619      	mov	r1, r3
 8002f50:	2002      	movs	r0, #2
 8002f52:	f7fe fc31 	bl	80017b8 <LCD_LOCATE>
			LCD_DISP_CURSOR();  // Cursor on		
 8002f56:	f7fe fc28 	bl	80017aa <LCD_DISP_CURSOR>
			//draw_title(ePORT_Set);
			break;
 8002f5a:	e011      	b.n	8002f80 <port_screen_func+0x314>
 8002f5c:	20000bdc 	.word	0x20000bdc
 8002f60:	66666667 	.word	0x66666667
 8002f64:	080095a0 	.word	0x080095a0
 8002f68:	20000c21 	.word	0x20000c21
 8002f6c:	20000c28 	.word	0x20000c28
		case eKey_Mode:
		case eKey_Idle:
			if(m_cfg.set_mode == 0){
 8002f70:	4b0c      	ldr	r3, [pc, #48]	@ (8002fa4 <port_screen_func+0x338>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d102      	bne.n	8002f7e <port_screen_func+0x312>
				draw_title(ePORT_Set);
 8002f78:	2008      	movs	r0, #8
 8002f7a:	f7fe fd2b 	bl	80019d4 <draw_title>
			}
			break;
 8002f7e:	bf00      	nop
	}
	
	if(m_cfg.cursor != old_cursor){
 8002f80:	4b08      	ldr	r3, [pc, #32]	@ (8002fa4 <port_screen_func+0x338>)
 8002f82:	78db      	ldrb	r3, [r3, #3]
 8002f84:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d005      	beq.n	8002f98 <port_screen_func+0x32c>
		LCD_LOCATE(2, m_cfg.cursor);
 8002f8c:	4b05      	ldr	r3, [pc, #20]	@ (8002fa4 <port_screen_func+0x338>)
 8002f8e:	78db      	ldrb	r3, [r3, #3]
 8002f90:	4619      	mov	r1, r3
 8002f92:	2002      	movs	r0, #2
 8002f94:	f7fe fc10 	bl	80017b8 <LCD_LOCATE>
	}	
	return ret_sc;
 8002f98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3730      	adds	r7, #48	@ 0x30
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	20000bdc 	.word	0x20000bdc

08002fa8 <self_test_screen_func>:

ScreenID_t self_test_screen_func(Screen_param_t param)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	463b      	mov	r3, r7
 8002fb0:	e883 0003 	stmia.w	r3, {r0, r1}
	ScreenID_t ret_sc = eMAX_SCREEN_ID;
 8002fb4:	230f      	movs	r3, #15
 8002fb6:	73fb      	strb	r3, [r7, #15]

	switch(param.key){
 8002fb8:	887b      	ldrh	r3, [r7, #2]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d005      	beq.n	8002fca <self_test_screen_func+0x22>
 8002fbe:	2b08      	cmp	r3, #8
 8002fc0:	d109      	bne.n	8002fd6 <self_test_screen_func+0x2e>
		case eKey_Mode:
			draw_title(eSelf_Test);
 8002fc2:	2009      	movs	r0, #9
 8002fc4:	f7fe fd06 	bl	80019d4 <draw_title>
			break;
 8002fc8:	e005      	b.n	8002fd6 <self_test_screen_func+0x2e>
		case eKey_Enter:
			send_cmd_2_backend(eCMD_FR_SelfTest, 0, 0);
 8002fca:	2200      	movs	r2, #0
 8002fcc:	2100      	movs	r1, #0
 8002fce:	20c1      	movs	r0, #193	@ 0xc1
 8002fd0:	f7fe fcba 	bl	8001948 <send_cmd_2_backend>
			break;
 8002fd4:	bf00      	nop
	}
	return ret_sc;
 8002fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <remote_screen_func>:

ScreenID_t remote_screen_func(Screen_param_t param)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	463b      	mov	r3, r7
 8002fe8:	e883 0003 	stmia.w	r3, {r0, r1}
	ScreenID_t ret_sc = param.sc_id;
 8002fec:	783b      	ldrb	r3, [r7, #0]
 8002fee:	73fb      	strb	r3, [r7, #15]

	switch(param.key){
 8002ff0:	887b      	ldrh	r3, [r7, #2]
 8002ff2:	2b20      	cmp	r3, #32
 8002ff4:	d006      	beq.n	8003004 <remote_screen_func+0x24>
 8002ff6:	2b20      	cmp	r3, #32
 8002ff8:	dc10      	bgt.n	800301c <remote_screen_func+0x3c>
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00a      	beq.n	8003014 <remote_screen_func+0x34>
 8002ffe:	2b08      	cmp	r3, #8
 8003000:	d008      	beq.n	8003014 <remote_screen_func+0x34>
 8003002:	e00b      	b.n	800301c <remote_screen_func+0x3c>
		case eKey_ExitRemote:
			send_cmd_2_backend(eCMD_CloseRemote, 0, 0);
 8003004:	2200      	movs	r2, #0
 8003006:	2100      	movs	r1, #0
 8003008:	20bb      	movs	r0, #187	@ 0xbb
 800300a:	f7fe fc9d 	bl	8001948 <send_cmd_2_backend>
			ret_sc = eCHANNEL_SC;
 800300e:	2301      	movs	r3, #1
 8003010:	73fb      	strb	r3, [r7, #15]
			break;
 8003012:	e003      	b.n	800301c <remote_screen_func+0x3c>
		case eKey_Mode:
		case eKey_Idle:
			draw_title(eRemote_Mode);
 8003014:	200a      	movs	r0, #10
 8003016:	f7fe fcdd 	bl	80019d4 <draw_title>
			break;
 800301a:	bf00      	nop
	}
	
	return ret_sc;
 800301c:	7bfb      	ldrb	r3, [r7, #15]
}
 800301e:	4618      	mov	r0, r3
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <findCharIndex>:

static int findCharIndex(char c) {
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < CHARSET_LENGTH; i++) {
 8003032:	2300      	movs	r3, #0
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	e00b      	b.n	8003050 <findCharIndex+0x28>
        if (charSet[i] == c) return i;
 8003038:	4a0a      	ldr	r2, [pc, #40]	@ (8003064 <findCharIndex+0x3c>)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	4413      	add	r3, r2
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	79fa      	ldrb	r2, [r7, #7]
 8003042:	429a      	cmp	r2, r3
 8003044:	d101      	bne.n	800304a <findCharIndex+0x22>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	e006      	b.n	8003058 <findCharIndex+0x30>
    for (int i = 0; i < CHARSET_LENGTH; i++) {
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	3301      	adds	r3, #1
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2b40      	cmp	r3, #64	@ 0x40
 8003054:	d9f0      	bls.n	8003038 <findCharIndex+0x10>
    }
    return 0;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3714      	adds	r7, #20
 800305c:	46bd      	mov	sp, r7
 800305e:	bc80      	pop	{r7}
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	0800973c 	.word	0x0800973c

08003068 <increaseChar>:

static void increaseChar(char *ch) {
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
    int idx = findCharIndex(*ch);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff ffd7 	bl	8003028 <findCharIndex>
 800307a:	60f8      	str	r0, [r7, #12]

    *ch = charSet[(idx + 1) % CHARSET_LENGTH];
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	3301      	adds	r3, #1
 8003080:	4619      	mov	r1, r3
 8003082:	4b08      	ldr	r3, [pc, #32]	@ (80030a4 <increaseChar+0x3c>)
 8003084:	fba3 2301 	umull	r2, r3, r3, r1
 8003088:	099a      	lsrs	r2, r3, #6
 800308a:	4613      	mov	r3, r2
 800308c:	019b      	lsls	r3, r3, #6
 800308e:	4413      	add	r3, r2
 8003090:	1aca      	subs	r2, r1, r3
 8003092:	4b05      	ldr	r3, [pc, #20]	@ (80030a8 <increaseChar+0x40>)
 8003094:	5c9a      	ldrb	r2, [r3, r2]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	701a      	strb	r2, [r3, #0]
}
 800309a:	bf00      	nop
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	fc0fc0fd 	.word	0xfc0fc0fd
 80030a8:	0800973c 	.word	0x0800973c

080030ac <user_screen_func>:
    int idx = findCharIndex(*ch);
    *ch = charSet[(idx - 1 + CHARSET_LENGTH) % CHARSET_LENGTH];
}

ScreenID_t user_screen_func(Screen_param_t param)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b088      	sub	sp, #32
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	463b      	mov	r3, r7
 80030b4:	e883 0003 	stmia.w	r3, {r0, r1}
	ScreenID_t ret_sc = eMAX_SCREEN_ID;
 80030b8:	230f      	movs	r3, #15
 80030ba:	77fb      	strb	r3, [r7, #31]
	uint8_t old_cursor = m_cfg.cursor;
 80030bc:	4b44      	ldr	r3, [pc, #272]	@ (80031d0 <user_screen_func+0x124>)
 80030be:	78db      	ldrb	r3, [r3, #3]
 80030c0:	77bb      	strb	r3, [r7, #30]
	char line_buf[LCD_PRINT_MAX];

	switch(param.key){
 80030c2:	887b      	ldrh	r3, [r7, #2]
 80030c4:	3b01      	subs	r3, #1
 80030c6:	2b0b      	cmp	r3, #11
 80030c8:	d872      	bhi.n	80031b0 <user_screen_func+0x104>
 80030ca:	a201      	add	r2, pc, #4	@ (adr r2, 80030d0 <user_screen_func+0x24>)
 80030cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d0:	08003179 	.word	0x08003179
 80030d4:	08003101 	.word	0x08003101
 80030d8:	0800318d 	.word	0x0800318d
 80030dc:	08003101 	.word	0x08003101
 80030e0:	080031b1 	.word	0x080031b1
 80030e4:	080031b1 	.word	0x080031b1
 80030e8:	080031b1 	.word	0x080031b1
 80030ec:	080031b1 	.word	0x080031b1
 80030f0:	080031b1 	.word	0x080031b1
 80030f4:	08003141 	.word	0x08003141
 80030f8:	080031b1 	.word	0x080031b1
 80030fc:	0800315d 	.word	0x0800315d
		case eKey_Up:
		case eKey_Down:
			if(eKey_Up){
				increaseChar((char *)&load_cfg.company[m_cfg.cursor]);
 8003100:	4b33      	ldr	r3, [pc, #204]	@ (80031d0 <user_screen_func+0x124>)
 8003102:	78db      	ldrb	r3, [r3, #3]
 8003104:	3330      	adds	r3, #48	@ 0x30
 8003106:	4a33      	ldr	r2, [pc, #204]	@ (80031d4 <user_screen_func+0x128>)
 8003108:	4413      	add	r3, r2
 800310a:	3305      	adds	r3, #5
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff ffab 	bl	8003068 <increaseChar>
			}else{
				decreaseChar((char *)&load_cfg.company[m_cfg.cursor]);
			}
			sprintf(line_buf, "%s\n", load_cfg.company);
 8003112:	f107 0308 	add.w	r3, r7, #8
 8003116:	4a30      	ldr	r2, [pc, #192]	@ (80031d8 <user_screen_func+0x12c>)
 8003118:	4930      	ldr	r1, [pc, #192]	@ (80031dc <user_screen_func+0x130>)
 800311a:	4618      	mov	r0, r3
 800311c:	f005 f9c4 	bl	80084a8 <siprintf>
			LCD_LOCATE(1,1);
 8003120:	2101      	movs	r1, #1
 8003122:	2001      	movs	r0, #1
 8003124:	f7fe fb48 	bl	80017b8 <LCD_LOCATE>
			LCD_printstring(line_buf);
 8003128:	f107 0308 	add.w	r3, r7, #8
 800312c:	4618      	mov	r0, r3
 800312e:	f7fe fb17 	bl	8001760 <LCD_printstring>
			LCD_LOCATE(1,m_cfg.cursor);
 8003132:	4b27      	ldr	r3, [pc, #156]	@ (80031d0 <user_screen_func+0x124>)
 8003134:	78db      	ldrb	r3, [r3, #3]
 8003136:	4619      	mov	r1, r3
 8003138:	2001      	movs	r0, #1
 800313a:	f7fe fb3d 	bl	80017b8 <LCD_LOCATE>
			break;
 800313e:	e037      	b.n	80031b0 <user_screen_func+0x104>
		case eKey_CursorUp:
			m_cfg.cursor = (m_cfg.cursor - 1 + LINE_CHARACTER_MAX) % LINE_CHARACTER_MAX;
 8003140:	4b23      	ldr	r3, [pc, #140]	@ (80031d0 <user_screen_func+0x124>)
 8003142:	78db      	ldrb	r3, [r3, #3]
 8003144:	330f      	adds	r3, #15
 8003146:	425a      	negs	r2, r3
 8003148:	f003 030f 	and.w	r3, r3, #15
 800314c:	f002 020f 	and.w	r2, r2, #15
 8003150:	bf58      	it	pl
 8003152:	4253      	negpl	r3, r2
 8003154:	b2da      	uxtb	r2, r3
 8003156:	4b1e      	ldr	r3, [pc, #120]	@ (80031d0 <user_screen_func+0x124>)
 8003158:	70da      	strb	r2, [r3, #3]
			break;
 800315a:	e029      	b.n	80031b0 <user_screen_func+0x104>
		case eKey_CursorDown:
			m_cfg.cursor = (m_cfg.cursor + 1 ) % LINE_CHARACTER_MAX;
 800315c:	4b1c      	ldr	r3, [pc, #112]	@ (80031d0 <user_screen_func+0x124>)
 800315e:	78db      	ldrb	r3, [r3, #3]
 8003160:	3301      	adds	r3, #1
 8003162:	425a      	negs	r2, r3
 8003164:	f003 030f 	and.w	r3, r3, #15
 8003168:	f002 020f 	and.w	r2, r2, #15
 800316c:	bf58      	it	pl
 800316e:	4253      	negpl	r3, r2
 8003170:	b2da      	uxtb	r2, r3
 8003172:	4b17      	ldr	r3, [pc, #92]	@ (80031d0 <user_screen_func+0x124>)
 8003174:	70da      	strb	r2, [r3, #3]
			break;
 8003176:	e01b      	b.n	80031b0 <user_screen_func+0x104>
		case eKey_Enter:
			LCD_DISP_ON();	// Cursor off
 8003178:	f7fe fb10 	bl	800179c <LCD_DISP_ON>
			ret_sc = save_data();
 800317c:	f7ff f952 	bl	8002424 <save_data>
 8003180:	4603      	mov	r3, r0
 8003182:	77fb      	strb	r3, [r7, #31]
			m_cfg.set_mode = 0;
 8003184:	4b12      	ldr	r3, [pc, #72]	@ (80031d0 <user_screen_func+0x124>)
 8003186:	2200      	movs	r2, #0
 8003188:	701a      	strb	r2, [r3, #0]
			break;
 800318a:	e011      	b.n	80031b0 <user_screen_func+0x104>
		case eKey_User:
			m_cfg.set_mode = 1;
 800318c:	4b10      	ldr	r3, [pc, #64]	@ (80031d0 <user_screen_func+0x124>)
 800318e:	2201      	movs	r2, #1
 8003190:	701a      	strb	r2, [r3, #0]
			m_cfg.cursor = 2;
 8003192:	4b0f      	ldr	r3, [pc, #60]	@ (80031d0 <user_screen_func+0x124>)
 8003194:	2202      	movs	r2, #2
 8003196:	70da      	strb	r2, [r3, #3]
			LCD_LOCATE(1, m_cfg.cursor);
 8003198:	4b0d      	ldr	r3, [pc, #52]	@ (80031d0 <user_screen_func+0x124>)
 800319a:	78db      	ldrb	r3, [r3, #3]
 800319c:	4619      	mov	r1, r3
 800319e:	2001      	movs	r0, #1
 80031a0:	f7fe fb0a 	bl	80017b8 <LCD_LOCATE>
			LCD_DISP_CURSOR();  // Cursor on
 80031a4:	f7fe fb01 	bl	80017aa <LCD_DISP_CURSOR>
			draw_title(eUSER_Mode);
 80031a8:	200b      	movs	r0, #11
 80031aa:	f7fe fc13 	bl	80019d4 <draw_title>
			break;
 80031ae:	bf00      	nop
	}
	if(m_cfg.cursor != old_cursor){
 80031b0:	4b07      	ldr	r3, [pc, #28]	@ (80031d0 <user_screen_func+0x124>)
 80031b2:	78db      	ldrb	r3, [r3, #3]
 80031b4:	7fba      	ldrb	r2, [r7, #30]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d005      	beq.n	80031c6 <user_screen_func+0x11a>
		LCD_LOCATE(1, m_cfg.cursor);
 80031ba:	4b05      	ldr	r3, [pc, #20]	@ (80031d0 <user_screen_func+0x124>)
 80031bc:	78db      	ldrb	r3, [r3, #3]
 80031be:	4619      	mov	r1, r3
 80031c0:	2001      	movs	r0, #1
 80031c2:	f7fe faf9 	bl	80017b8 <LCD_LOCATE>
	}
	return ret_sc;
 80031c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3720      	adds	r7, #32
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	20000bdc 	.word	0x20000bdc
 80031d4:	20000c28 	.word	0x20000c28
 80031d8:	20000c5d 	.word	0x20000c5d
 80031dc:	08009434 	.word	0x08009434

080031e0 <factory_screen_func>:

ScreenID_t factory_screen_func(Screen_param_t param)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	463b      	mov	r3, r7
 80031e8:	e883 0003 	stmia.w	r3, {r0, r1}
	ScreenID_t ret_sc = eMAX_SCREEN_ID;
 80031ec:	230f      	movs	r3, #15
 80031ee:	73fb      	strb	r3, [r7, #15]
	
	switch(param.key){
 80031f0:	887b      	ldrh	r3, [r7, #2]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d002      	beq.n	80031fc <factory_screen_func+0x1c>
 80031f6:	2b09      	cmp	r3, #9
 80031f8:	d019      	beq.n	800322e <factory_screen_func+0x4e>
 80031fa:	e01c      	b.n	8003236 <factory_screen_func+0x56>
		case eKey_Enter:
			send_cmd_2_backend(eCMD_Factory, 0, 0);
 80031fc:	2200      	movs	r2, #0
 80031fe:	2100      	movs	r1, #0
 8003200:	20b9      	movs	r0, #185	@ 0xb9
 8003202:	f7fe fba1 	bl	8001948 <send_cmd_2_backend>
			app_set_default_config();
 8003206:	f7fd fa3d 	bl	8000684 <app_set_default_config>
			memset(&m_cfg, 0, sizeof(m_cfg));
 800320a:	224a      	movs	r2, #74	@ 0x4a
 800320c:	2100      	movs	r1, #0
 800320e:	480c      	ldr	r0, [pc, #48]	@ (8003240 <factory_screen_func+0x60>)
 8003210:	f005 f9a8 	bl	8008564 <memset>
			memcpy(&load_cfg, m_app_config, sizeof(config_t));
 8003214:	4b0b      	ldr	r3, [pc, #44]	@ (8003244 <factory_screen_func+0x64>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a0b      	ldr	r2, [pc, #44]	@ (8003248 <factory_screen_func+0x68>)
 800321a:	4610      	mov	r0, r2
 800321c:	4619      	mov	r1, r3
 800321e:	2347      	movs	r3, #71	@ 0x47
 8003220:	461a      	mov	r2, r3
 8003222:	f005 fa31 	bl	8008688 <memcpy>
			draw_title(eCH_CHSelect);
 8003226:	2000      	movs	r0, #0
 8003228:	f7fe fbd4 	bl	80019d4 <draw_title>
			break;
 800322c:	e003      	b.n	8003236 <factory_screen_func+0x56>
		case eKey_Factory:
			draw_title(eFactor_Mode);
 800322e:	200c      	movs	r0, #12
 8003230:	f7fe fbd0 	bl	80019d4 <draw_title>
			break;
 8003234:	bf00      	nop
	}
	return ret_sc;
 8003236:	7bfb      	ldrb	r3, [r7, #15]
}
 8003238:	4618      	mov	r0, r3
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	20000bdc 	.word	0x20000bdc
 8003244:	20000218 	.word	0x20000218
 8003248:	20000c28 	.word	0x20000c28

0800324c <select_ch_set_blink>:

static void select_ch_set_blink(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b094      	sub	sp, #80	@ 0x50
 8003250:	af00      	add	r7, sp, #0
	uint8_t ch_disp[4][LCD_PRINT_MAX] = {{"    CH2 CH4 CH6 \n"}, {"CH1     CH4 CH6 \n"},
 8003252:	4a18      	ldr	r2, [pc, #96]	@ (80032b4 <select_ch_set_blink+0x68>)
 8003254:	463b      	mov	r3, r7
 8003256:	4611      	mov	r1, r2
 8003258:	2250      	movs	r2, #80	@ 0x50
 800325a:	4618      	mov	r0, r3
 800325c:	f005 fa14 	bl	8008688 <memcpy>
										 {"CH1 CH2     CH6 \n"}, {"CH1 CH2 CH4     \n"}};

	if(m_cfg.cursor == 4){
 8003260:	4b15      	ldr	r3, [pc, #84]	@ (80032b8 <select_ch_set_blink+0x6c>)
 8003262:	78db      	ldrb	r3, [r3, #3]
 8003264:	2b04      	cmp	r3, #4
 8003266:	d10b      	bne.n	8003280 <select_ch_set_blink+0x34>
		sprintf(m_cfg.blink_text[0], "CH8             \n");
 8003268:	4914      	ldr	r1, [pc, #80]	@ (80032bc <select_ch_set_blink+0x70>)
 800326a:	4815      	ldr	r0, [pc, #84]	@ (80032c0 <select_ch_set_blink+0x74>)
 800326c:	f005 f91c 	bl	80084a8 <siprintf>
		sprintf(m_cfg.blink_text[1], "                \n");
 8003270:	4914      	ldr	r1, [pc, #80]	@ (80032c4 <select_ch_set_blink+0x78>)
 8003272:	4815      	ldr	r0, [pc, #84]	@ (80032c8 <select_ch_set_blink+0x7c>)
 8003274:	f005 f918 	bl	80084a8 <siprintf>
		m_cfg.blink_row = 2;
 8003278:	4b0f      	ldr	r3, [pc, #60]	@ (80032b8 <select_ch_set_blink+0x6c>)
 800327a:	2202      	movs	r2, #2
 800327c:	739a      	strb	r2, [r3, #14]
	}else{
		sprintf(m_cfg.blink_text[0], "CH1 CH2 CH4 CH6 \n");
		sprintf(m_cfg.blink_text[1], "%s", ch_disp[m_cfg.cursor]);
		m_cfg.blink_row = 1;
	}
}
 800327e:	e014      	b.n	80032aa <select_ch_set_blink+0x5e>
		sprintf(m_cfg.blink_text[0], "CH1 CH2 CH4 CH6 \n");
 8003280:	4912      	ldr	r1, [pc, #72]	@ (80032cc <select_ch_set_blink+0x80>)
 8003282:	480f      	ldr	r0, [pc, #60]	@ (80032c0 <select_ch_set_blink+0x74>)
 8003284:	f005 f910 	bl	80084a8 <siprintf>
		sprintf(m_cfg.blink_text[1], "%s", ch_disp[m_cfg.cursor]);
 8003288:	4b0b      	ldr	r3, [pc, #44]	@ (80032b8 <select_ch_set_blink+0x6c>)
 800328a:	78db      	ldrb	r3, [r3, #3]
 800328c:	4619      	mov	r1, r3
 800328e:	463a      	mov	r2, r7
 8003290:	460b      	mov	r3, r1
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	440b      	add	r3, r1
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	461a      	mov	r2, r3
 800329c:	490c      	ldr	r1, [pc, #48]	@ (80032d0 <select_ch_set_blink+0x84>)
 800329e:	480a      	ldr	r0, [pc, #40]	@ (80032c8 <select_ch_set_blink+0x7c>)
 80032a0:	f005 f902 	bl	80084a8 <siprintf>
		m_cfg.blink_row = 1;
 80032a4:	4b04      	ldr	r3, [pc, #16]	@ (80032b8 <select_ch_set_blink+0x6c>)
 80032a6:	2201      	movs	r2, #1
 80032a8:	739a      	strb	r2, [r3, #14]
}
 80032aa:	bf00      	nop
 80032ac:	3750      	adds	r7, #80	@ 0x50
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	080096b8 	.word	0x080096b8
 80032b8:	20000bdc 	.word	0x20000bdc
 80032bc:	08009648 	.word	0x08009648
 80032c0:	20000beb 	.word	0x20000beb
 80032c4:	080096a0 	.word	0x080096a0
 80032c8:	20000bff 	.word	0x20000bff
 80032cc:	08009634 	.word	0x08009634
 80032d0:	080096b4 	.word	0x080096b4

080032d4 <select_ch_screen_func>:

ScreenID_t select_ch_screen_func(Screen_param_t param)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	463b      	mov	r3, r7
 80032dc:	e883 0003 	stmia.w	r3, {r0, r1}
	ScreenID_t ret_sc = eMAX_SCREEN_ID;
 80032e0:	230f      	movs	r3, #15
 80032e2:	73fb      	strb	r3, [r7, #15]

	switch(param.key){
 80032e4:	887b      	ldrh	r3, [r7, #2]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	2b05      	cmp	r3, #5
 80032ea:	d85a      	bhi.n	80033a2 <select_ch_screen_func+0xce>
 80032ec:	a201      	add	r2, pc, #4	@ (adr r2, 80032f4 <select_ch_screen_func+0x20>)
 80032ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f2:	bf00      	nop
 80032f4:	08003351 	.word	0x08003351
 80032f8:	0800330d 	.word	0x0800330d
 80032fc:	080033a3 	.word	0x080033a3
 8003300:	0800332f 	.word	0x0800332f
 8003304:	080033a3 	.word	0x080033a3
 8003308:	08003379 	.word	0x08003379
		case eKey_Up:
			m_cfg.cursor = (m_cfg.cursor - 1 + SEL_MAX_CH) % SEL_MAX_CH;
 800330c:	4b27      	ldr	r3, [pc, #156]	@ (80033ac <select_ch_screen_func+0xd8>)
 800330e:	78db      	ldrb	r3, [r3, #3]
 8003310:	1d1a      	adds	r2, r3, #4
 8003312:	4b27      	ldr	r3, [pc, #156]	@ (80033b0 <select_ch_screen_func+0xdc>)
 8003314:	fb83 1302 	smull	r1, r3, r3, r2
 8003318:	1059      	asrs	r1, r3, #1
 800331a:	17d3      	asrs	r3, r2, #31
 800331c:	1ac9      	subs	r1, r1, r3
 800331e:	460b      	mov	r3, r1
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	440b      	add	r3, r1
 8003324:	1ad1      	subs	r1, r2, r3
 8003326:	b2ca      	uxtb	r2, r1
 8003328:	4b20      	ldr	r3, [pc, #128]	@ (80033ac <select_ch_screen_func+0xd8>)
 800332a:	70da      	strb	r2, [r3, #3]
			break;
 800332c:	e039      	b.n	80033a2 <select_ch_screen_func+0xce>
		case eKey_Down:
			m_cfg.cursor = (m_cfg.cursor + 1 ) % SEL_MAX_CH;
 800332e:	4b1f      	ldr	r3, [pc, #124]	@ (80033ac <select_ch_screen_func+0xd8>)
 8003330:	78db      	ldrb	r3, [r3, #3]
 8003332:	1c5a      	adds	r2, r3, #1
 8003334:	4b1e      	ldr	r3, [pc, #120]	@ (80033b0 <select_ch_screen_func+0xdc>)
 8003336:	fb83 1302 	smull	r1, r3, r3, r2
 800333a:	1059      	asrs	r1, r3, #1
 800333c:	17d3      	asrs	r3, r2, #31
 800333e:	1ac9      	subs	r1, r1, r3
 8003340:	460b      	mov	r3, r1
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	1ad1      	subs	r1, r2, r3
 8003348:	b2ca      	uxtb	r2, r1
 800334a:	4b18      	ldr	r3, [pc, #96]	@ (80033ac <select_ch_screen_func+0xd8>)
 800334c:	70da      	strb	r2, [r3, #3]
			break;
 800334e:	e028      	b.n	80033a2 <select_ch_screen_func+0xce>
		case eKey_Enter:
			m_cfg.enable_blink = 0;
 8003350:	4b16      	ldr	r3, [pc, #88]	@ (80033ac <select_ch_screen_func+0xd8>)
 8003352:	2200      	movs	r2, #0
 8003354:	731a      	strb	r2, [r3, #12]
			apps_set_blink_enable(m_cfg.enable_blink);
 8003356:	4b15      	ldr	r3, [pc, #84]	@ (80033ac <select_ch_screen_func+0xd8>)
 8003358:	7b1b      	ldrb	r3, [r3, #12]
 800335a:	4618      	mov	r0, r3
 800335c:	f7fd f95c 	bl	8000618 <apps_set_blink_enable>
			load_cfg.ch_num = m_cfg.cursor ;
 8003360:	4b12      	ldr	r3, [pc, #72]	@ (80033ac <select_ch_screen_func+0xd8>)
 8003362:	78da      	ldrb	r2, [r3, #3]
 8003364:	4b13      	ldr	r3, [pc, #76]	@ (80033b4 <select_ch_screen_func+0xe0>)
 8003366:	719a      	strb	r2, [r3, #6]
			ret_sc = save_data();
 8003368:	f7ff f85c 	bl	8002424 <save_data>
 800336c:	4603      	mov	r3, r0
 800336e:	73fb      	strb	r3, [r7, #15]
			m_cfg.set_mode = 0;
 8003370:	4b0e      	ldr	r3, [pc, #56]	@ (80033ac <select_ch_screen_func+0xd8>)
 8003372:	2200      	movs	r2, #0
 8003374:	701a      	strb	r2, [r3, #0]
			break;
 8003376:	e014      	b.n	80033a2 <select_ch_screen_func+0xce>
		case eKey_ChSel:
			m_cfg.cursor = load_cfg.ch_num;
 8003378:	4b0e      	ldr	r3, [pc, #56]	@ (80033b4 <select_ch_screen_func+0xe0>)
 800337a:	799a      	ldrb	r2, [r3, #6]
 800337c:	4b0b      	ldr	r3, [pc, #44]	@ (80033ac <select_ch_screen_func+0xd8>)
 800337e:	70da      	strb	r2, [r3, #3]
			m_cfg.blink = 0;
 8003380:	4b0a      	ldr	r3, [pc, #40]	@ (80033ac <select_ch_screen_func+0xd8>)
 8003382:	2200      	movs	r2, #0
 8003384:	735a      	strb	r2, [r3, #13]
			m_cfg.enable_blink = 1;
 8003386:	4b09      	ldr	r3, [pc, #36]	@ (80033ac <select_ch_screen_func+0xd8>)
 8003388:	2201      	movs	r2, #1
 800338a:	731a      	strb	r2, [r3, #12]
			apps_set_blink_enable(m_cfg.enable_blink);
 800338c:	4b07      	ldr	r3, [pc, #28]	@ (80033ac <select_ch_screen_func+0xd8>)
 800338e:	7b1b      	ldrb	r3, [r3, #12]
 8003390:	4618      	mov	r0, r3
 8003392:	f7fd f941 	bl	8000618 <apps_set_blink_enable>
			select_ch_set_blink();
 8003396:	f7ff ff59 	bl	800324c <select_ch_set_blink>
			draw_title(eSEL_OP_Ch);
 800339a:	200d      	movs	r0, #13
 800339c:	f7fe fb1a 	bl	80019d4 <draw_title>
			break;
 80033a0:	bf00      	nop
	}

	return ret_sc;
 80033a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	20000bdc 	.word	0x20000bdc
 80033b0:	66666667 	.word	0x66666667
 80033b4:	20000c28 	.word	0x20000c28

080033b8 <version_screen_func>:

ScreenID_t version_screen_func(Screen_param_t param)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	463b      	mov	r3, r7
 80033c0:	e883 0003 	stmia.w	r3, {r0, r1}
	ScreenID_t ret_sc = eMAX_SCREEN_ID;
 80033c4:	230f      	movs	r3, #15
 80033c6:	73fb      	strb	r3, [r7, #15]
	
	switch(param.key){
 80033c8:	887b      	ldrh	r3, [r7, #2]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d002      	beq.n	80033d4 <version_screen_func+0x1c>
 80033ce:	2b05      	cmp	r3, #5
 80033d0:	d004      	beq.n	80033dc <version_screen_func+0x24>
 80033d2:	e007      	b.n	80033e4 <version_screen_func+0x2c>
		case eKey_Enter:
			draw_title(eCH_CHSelect);
 80033d4:	2000      	movs	r0, #0
 80033d6:	f7fe fafd 	bl	80019d4 <draw_title>
			break;
 80033da:	e003      	b.n	80033e4 <version_screen_func+0x2c>
		case eKey_Version:
			draw_title(eKey_Version);
 80033dc:	2005      	movs	r0, #5
 80033de:	f7fe faf9 	bl	80019d4 <draw_title>
			break;
 80033e2:	bf00      	nop
	}
	return ret_sc;
 80033e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
	...

080033f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80033f0:	f7fe f8f8 	bl	80015e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033f4:	480b      	ldr	r0, [pc, #44]	@ (8003424 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80033f6:	490c      	ldr	r1, [pc, #48]	@ (8003428 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80033f8:	4a0c      	ldr	r2, [pc, #48]	@ (800342c <LoopFillZerobss+0x16>)
  movs r3, #0
 80033fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033fc:	e002      	b.n	8003404 <LoopCopyDataInit>

080033fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003402:	3304      	adds	r3, #4

08003404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003408:	d3f9      	bcc.n	80033fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800340a:	4a09      	ldr	r2, [pc, #36]	@ (8003430 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800340c:	4c09      	ldr	r4, [pc, #36]	@ (8003434 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800340e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003410:	e001      	b.n	8003416 <LoopFillZerobss>

08003412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003414:	3204      	adds	r2, #4

08003416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003418:	d3fb      	bcc.n	8003412 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800341a:	f005 f90f 	bl	800863c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800341e:	f7fd fd4f 	bl	8000ec0 <main>
  bx lr
 8003422:	4770      	bx	lr
  ldr r0, =_sdata
 8003424:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003428:	200001a8 	.word	0x200001a8
  ldr r2, =_sidata
 800342c:	080097d8 	.word	0x080097d8
  ldr r2, =_sbss
 8003430:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 8003434:	20002070 	.word	0x20002070

08003438 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003438:	e7fe      	b.n	8003438 <ADC1_2_IRQHandler>
	...

0800343c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003440:	4b08      	ldr	r3, [pc, #32]	@ (8003464 <HAL_Init+0x28>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a07      	ldr	r2, [pc, #28]	@ (8003464 <HAL_Init+0x28>)
 8003446:	f043 0310 	orr.w	r3, r3, #16
 800344a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800344c:	2003      	movs	r0, #3
 800344e:	f000 f8d1 	bl	80035f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003452:	200f      	movs	r0, #15
 8003454:	f7fd ffe4 	bl	8001420 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003458:	f7fd ff1e 	bl	8001298 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40022000 	.word	0x40022000

08003468 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800346c:	4b05      	ldr	r3, [pc, #20]	@ (8003484 <HAL_IncTick+0x1c>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	461a      	mov	r2, r3
 8003472:	4b05      	ldr	r3, [pc, #20]	@ (8003488 <HAL_IncTick+0x20>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4413      	add	r3, r2
 8003478:	4a03      	ldr	r2, [pc, #12]	@ (8003488 <HAL_IncTick+0x20>)
 800347a:	6013      	str	r3, [r2, #0]
}
 800347c:	bf00      	nop
 800347e:	46bd      	mov	sp, r7
 8003480:	bc80      	pop	{r7}
 8003482:	4770      	bx	lr
 8003484:	20000150 	.word	0x20000150
 8003488:	20000c70 	.word	0x20000c70

0800348c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  return uwTick;
 8003490:	4b02      	ldr	r3, [pc, #8]	@ (800349c <HAL_GetTick+0x10>)
 8003492:	681b      	ldr	r3, [r3, #0]
}
 8003494:	4618      	mov	r0, r3
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr
 800349c:	20000c70 	.word	0x20000c70

080034a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034b0:	4b0c      	ldr	r3, [pc, #48]	@ (80034e4 <__NVIC_SetPriorityGrouping+0x44>)
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034bc:	4013      	ands	r3, r2
 80034be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80034cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034d2:	4a04      	ldr	r2, [pc, #16]	@ (80034e4 <__NVIC_SetPriorityGrouping+0x44>)
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	60d3      	str	r3, [r2, #12]
}
 80034d8:	bf00      	nop
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	bc80      	pop	{r7}
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	e000ed00 	.word	0xe000ed00

080034e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034ec:	4b04      	ldr	r3, [pc, #16]	@ (8003500 <__NVIC_GetPriorityGrouping+0x18>)
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	0a1b      	lsrs	r3, r3, #8
 80034f2:	f003 0307 	and.w	r3, r3, #7
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bc80      	pop	{r7}
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	e000ed00 	.word	0xe000ed00

08003504 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	4603      	mov	r3, r0
 800350c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800350e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003512:	2b00      	cmp	r3, #0
 8003514:	db0b      	blt.n	800352e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003516:	79fb      	ldrb	r3, [r7, #7]
 8003518:	f003 021f 	and.w	r2, r3, #31
 800351c:	4906      	ldr	r1, [pc, #24]	@ (8003538 <__NVIC_EnableIRQ+0x34>)
 800351e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003522:	095b      	lsrs	r3, r3, #5
 8003524:	2001      	movs	r0, #1
 8003526:	fa00 f202 	lsl.w	r2, r0, r2
 800352a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800352e:	bf00      	nop
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	bc80      	pop	{r7}
 8003536:	4770      	bx	lr
 8003538:	e000e100 	.word	0xe000e100

0800353c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	4603      	mov	r3, r0
 8003544:	6039      	str	r1, [r7, #0]
 8003546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800354c:	2b00      	cmp	r3, #0
 800354e:	db0a      	blt.n	8003566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	b2da      	uxtb	r2, r3
 8003554:	490c      	ldr	r1, [pc, #48]	@ (8003588 <__NVIC_SetPriority+0x4c>)
 8003556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355a:	0112      	lsls	r2, r2, #4
 800355c:	b2d2      	uxtb	r2, r2
 800355e:	440b      	add	r3, r1
 8003560:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003564:	e00a      	b.n	800357c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	b2da      	uxtb	r2, r3
 800356a:	4908      	ldr	r1, [pc, #32]	@ (800358c <__NVIC_SetPriority+0x50>)
 800356c:	79fb      	ldrb	r3, [r7, #7]
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	3b04      	subs	r3, #4
 8003574:	0112      	lsls	r2, r2, #4
 8003576:	b2d2      	uxtb	r2, r2
 8003578:	440b      	add	r3, r1
 800357a:	761a      	strb	r2, [r3, #24]
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	bc80      	pop	{r7}
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	e000e100 	.word	0xe000e100
 800358c:	e000ed00 	.word	0xe000ed00

08003590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003590:	b480      	push	{r7}
 8003592:	b089      	sub	sp, #36	@ 0x24
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	f1c3 0307 	rsb	r3, r3, #7
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	bf28      	it	cs
 80035ae:	2304      	movcs	r3, #4
 80035b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	3304      	adds	r3, #4
 80035b6:	2b06      	cmp	r3, #6
 80035b8:	d902      	bls.n	80035c0 <NVIC_EncodePriority+0x30>
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	3b03      	subs	r3, #3
 80035be:	e000      	b.n	80035c2 <NVIC_EncodePriority+0x32>
 80035c0:	2300      	movs	r3, #0
 80035c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035c4:	f04f 32ff 	mov.w	r2, #4294967295
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	43da      	mvns	r2, r3
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	401a      	ands	r2, r3
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035d8:	f04f 31ff 	mov.w	r1, #4294967295
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	fa01 f303 	lsl.w	r3, r1, r3
 80035e2:	43d9      	mvns	r1, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e8:	4313      	orrs	r3, r2
         );
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3724      	adds	r7, #36	@ 0x24
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bc80      	pop	{r7}
 80035f2:	4770      	bx	lr

080035f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f7ff ff4f 	bl	80034a0 <__NVIC_SetPriorityGrouping>
}
 8003602:	bf00      	nop
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800360a:	b580      	push	{r7, lr}
 800360c:	b086      	sub	sp, #24
 800360e:	af00      	add	r7, sp, #0
 8003610:	4603      	mov	r3, r0
 8003612:	60b9      	str	r1, [r7, #8]
 8003614:	607a      	str	r2, [r7, #4]
 8003616:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003618:	2300      	movs	r3, #0
 800361a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800361c:	f7ff ff64 	bl	80034e8 <__NVIC_GetPriorityGrouping>
 8003620:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	68b9      	ldr	r1, [r7, #8]
 8003626:	6978      	ldr	r0, [r7, #20]
 8003628:	f7ff ffb2 	bl	8003590 <NVIC_EncodePriority>
 800362c:	4602      	mov	r2, r0
 800362e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003632:	4611      	mov	r1, r2
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff ff81 	bl	800353c <__NVIC_SetPriority>
}
 800363a:	bf00      	nop
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b082      	sub	sp, #8
 8003646:	af00      	add	r7, sp, #0
 8003648:	4603      	mov	r3, r0
 800364a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800364c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff ff57 	bl	8003504 <__NVIC_EnableIRQ>
}
 8003656:	bf00      	nop
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800365e:	b480      	push	{r7}
 8003660:	b085      	sub	sp, #20
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003666:	2300      	movs	r3, #0
 8003668:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d008      	beq.n	8003688 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2204      	movs	r2, #4
 800367a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e020      	b.n	80036ca <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 020e 	bic.w	r2, r2, #14
 8003696:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 0201 	bic.w	r2, r2, #1
 80036a6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036b0:	2101      	movs	r1, #1
 80036b2:	fa01 f202 	lsl.w	r2, r1, r2
 80036b6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80036c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bc80      	pop	{r7}
 80036d2:	4770      	bx	lr

080036d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036dc:	2300      	movs	r3, #0
 80036de:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d005      	beq.n	80036f8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2204      	movs	r2, #4
 80036f0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	73fb      	strb	r3, [r7, #15]
 80036f6:	e051      	b.n	800379c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f022 020e 	bic.w	r2, r2, #14
 8003706:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 0201 	bic.w	r2, r2, #1
 8003716:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a22      	ldr	r2, [pc, #136]	@ (80037a8 <HAL_DMA_Abort_IT+0xd4>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d029      	beq.n	8003776 <HAL_DMA_Abort_IT+0xa2>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a21      	ldr	r2, [pc, #132]	@ (80037ac <HAL_DMA_Abort_IT+0xd8>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d022      	beq.n	8003772 <HAL_DMA_Abort_IT+0x9e>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a1f      	ldr	r2, [pc, #124]	@ (80037b0 <HAL_DMA_Abort_IT+0xdc>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d01a      	beq.n	800376c <HAL_DMA_Abort_IT+0x98>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a1e      	ldr	r2, [pc, #120]	@ (80037b4 <HAL_DMA_Abort_IT+0xe0>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d012      	beq.n	8003766 <HAL_DMA_Abort_IT+0x92>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a1c      	ldr	r2, [pc, #112]	@ (80037b8 <HAL_DMA_Abort_IT+0xe4>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d00a      	beq.n	8003760 <HAL_DMA_Abort_IT+0x8c>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a1b      	ldr	r2, [pc, #108]	@ (80037bc <HAL_DMA_Abort_IT+0xe8>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d102      	bne.n	800375a <HAL_DMA_Abort_IT+0x86>
 8003754:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003758:	e00e      	b.n	8003778 <HAL_DMA_Abort_IT+0xa4>
 800375a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800375e:	e00b      	b.n	8003778 <HAL_DMA_Abort_IT+0xa4>
 8003760:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003764:	e008      	b.n	8003778 <HAL_DMA_Abort_IT+0xa4>
 8003766:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800376a:	e005      	b.n	8003778 <HAL_DMA_Abort_IT+0xa4>
 800376c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003770:	e002      	b.n	8003778 <HAL_DMA_Abort_IT+0xa4>
 8003772:	2310      	movs	r3, #16
 8003774:	e000      	b.n	8003778 <HAL_DMA_Abort_IT+0xa4>
 8003776:	2301      	movs	r3, #1
 8003778:	4a11      	ldr	r2, [pc, #68]	@ (80037c0 <HAL_DMA_Abort_IT+0xec>)
 800377a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003790:	2b00      	cmp	r3, #0
 8003792:	d003      	beq.n	800379c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	4798      	blx	r3
    } 
  }
  return status;
 800379c:	7bfb      	ldrb	r3, [r7, #15]
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	40020008 	.word	0x40020008
 80037ac:	4002001c 	.word	0x4002001c
 80037b0:	40020030 	.word	0x40020030
 80037b4:	40020044 	.word	0x40020044
 80037b8:	40020058 	.word	0x40020058
 80037bc:	4002006c 	.word	0x4002006c
 80037c0:	40020000 	.word	0x40020000

080037c4 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80037c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037c6:	b087      	sub	sp, #28
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80037d6:	2300      	movs	r3, #0
 80037d8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80037da:	2300      	movs	r3, #0
 80037dc:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80037de:	4b2f      	ldr	r3, [pc, #188]	@ (800389c <HAL_FLASH_Program+0xd8>)
 80037e0:	7e1b      	ldrb	r3, [r3, #24]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d101      	bne.n	80037ea <HAL_FLASH_Program+0x26>
 80037e6:	2302      	movs	r3, #2
 80037e8:	e054      	b.n	8003894 <HAL_FLASH_Program+0xd0>
 80037ea:	4b2c      	ldr	r3, [pc, #176]	@ (800389c <HAL_FLASH_Program+0xd8>)
 80037ec:	2201      	movs	r2, #1
 80037ee:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80037f0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80037f4:	f000 f8b2 	bl	800395c <FLASH_WaitForLastOperation>
 80037f8:	4603      	mov	r3, r0
 80037fa:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80037fc:	7dfb      	ldrb	r3, [r7, #23]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d144      	bne.n	800388c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d102      	bne.n	800380e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003808:	2301      	movs	r3, #1
 800380a:	757b      	strb	r3, [r7, #21]
 800380c:	e007      	b.n	800381e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2b02      	cmp	r3, #2
 8003812:	d102      	bne.n	800381a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003814:	2302      	movs	r3, #2
 8003816:	757b      	strb	r3, [r7, #21]
 8003818:	e001      	b.n	800381e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800381a:	2304      	movs	r3, #4
 800381c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800381e:	2300      	movs	r3, #0
 8003820:	75bb      	strb	r3, [r7, #22]
 8003822:	e02d      	b.n	8003880 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003824:	7dbb      	ldrb	r3, [r7, #22]
 8003826:	005a      	lsls	r2, r3, #1
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	eb02 0c03 	add.w	ip, r2, r3
 800382e:	7dbb      	ldrb	r3, [r7, #22]
 8003830:	0119      	lsls	r1, r3, #4
 8003832:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003836:	f1c1 0620 	rsb	r6, r1, #32
 800383a:	f1a1 0020 	sub.w	r0, r1, #32
 800383e:	fa22 f401 	lsr.w	r4, r2, r1
 8003842:	fa03 f606 	lsl.w	r6, r3, r6
 8003846:	4334      	orrs	r4, r6
 8003848:	fa23 f000 	lsr.w	r0, r3, r0
 800384c:	4304      	orrs	r4, r0
 800384e:	fa23 f501 	lsr.w	r5, r3, r1
 8003852:	b2a3      	uxth	r3, r4
 8003854:	4619      	mov	r1, r3
 8003856:	4660      	mov	r0, ip
 8003858:	f000 f864 	bl	8003924 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800385c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003860:	f000 f87c 	bl	800395c <FLASH_WaitForLastOperation>
 8003864:	4603      	mov	r3, r0
 8003866:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003868:	4b0d      	ldr	r3, [pc, #52]	@ (80038a0 <HAL_FLASH_Program+0xdc>)
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	4a0c      	ldr	r2, [pc, #48]	@ (80038a0 <HAL_FLASH_Program+0xdc>)
 800386e:	f023 0301 	bic.w	r3, r3, #1
 8003872:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003874:	7dfb      	ldrb	r3, [r7, #23]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d107      	bne.n	800388a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800387a:	7dbb      	ldrb	r3, [r7, #22]
 800387c:	3301      	adds	r3, #1
 800387e:	75bb      	strb	r3, [r7, #22]
 8003880:	7dba      	ldrb	r2, [r7, #22]
 8003882:	7d7b      	ldrb	r3, [r7, #21]
 8003884:	429a      	cmp	r2, r3
 8003886:	d3cd      	bcc.n	8003824 <HAL_FLASH_Program+0x60>
 8003888:	e000      	b.n	800388c <HAL_FLASH_Program+0xc8>
      {
        break;
 800388a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800388c:	4b03      	ldr	r3, [pc, #12]	@ (800389c <HAL_FLASH_Program+0xd8>)
 800388e:	2200      	movs	r2, #0
 8003890:	761a      	strb	r2, [r3, #24]

  return status;
 8003892:	7dfb      	ldrb	r3, [r7, #23]
}
 8003894:	4618      	mov	r0, r3
 8003896:	371c      	adds	r7, #28
 8003898:	46bd      	mov	sp, r7
 800389a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800389c:	20000c78 	.word	0x20000c78
 80038a0:	40022000 	.word	0x40022000

080038a4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80038aa:	2300      	movs	r3, #0
 80038ac:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80038ae:	4b0d      	ldr	r3, [pc, #52]	@ (80038e4 <HAL_FLASH_Unlock+0x40>)
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00d      	beq.n	80038d6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80038ba:	4b0a      	ldr	r3, [pc, #40]	@ (80038e4 <HAL_FLASH_Unlock+0x40>)
 80038bc:	4a0a      	ldr	r2, [pc, #40]	@ (80038e8 <HAL_FLASH_Unlock+0x44>)
 80038be:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80038c0:	4b08      	ldr	r3, [pc, #32]	@ (80038e4 <HAL_FLASH_Unlock+0x40>)
 80038c2:	4a0a      	ldr	r2, [pc, #40]	@ (80038ec <HAL_FLASH_Unlock+0x48>)
 80038c4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80038c6:	4b07      	ldr	r3, [pc, #28]	@ (80038e4 <HAL_FLASH_Unlock+0x40>)
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80038d6:	79fb      	ldrb	r3, [r7, #7]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	bc80      	pop	{r7}
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	40022000 	.word	0x40022000
 80038e8:	45670123 	.word	0x45670123
 80038ec:	cdef89ab 	.word	0xcdef89ab

080038f0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80038f4:	4b05      	ldr	r3, [pc, #20]	@ (800390c <HAL_FLASH_Lock+0x1c>)
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	4a04      	ldr	r2, [pc, #16]	@ (800390c <HAL_FLASH_Lock+0x1c>)
 80038fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038fe:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	46bd      	mov	sp, r7
 8003906:	bc80      	pop	{r7}
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	40022000 	.word	0x40022000

08003910 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8003914:	4b02      	ldr	r3, [pc, #8]	@ (8003920 <HAL_FLASH_GetError+0x10>)
 8003916:	69db      	ldr	r3, [r3, #28]
}
 8003918:	4618      	mov	r0, r3
 800391a:	46bd      	mov	sp, r7
 800391c:	bc80      	pop	{r7}
 800391e:	4770      	bx	lr
 8003920:	20000c78 	.word	0x20000c78

08003924 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	460b      	mov	r3, r1
 800392e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003930:	4b08      	ldr	r3, [pc, #32]	@ (8003954 <FLASH_Program_HalfWord+0x30>)
 8003932:	2200      	movs	r2, #0
 8003934:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003936:	4b08      	ldr	r3, [pc, #32]	@ (8003958 <FLASH_Program_HalfWord+0x34>)
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	4a07      	ldr	r2, [pc, #28]	@ (8003958 <FLASH_Program_HalfWord+0x34>)
 800393c:	f043 0301 	orr.w	r3, r3, #1
 8003940:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	887a      	ldrh	r2, [r7, #2]
 8003946:	801a      	strh	r2, [r3, #0]
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	bc80      	pop	{r7}
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	20000c78 	.word	0x20000c78
 8003958:	40022000 	.word	0x40022000

0800395c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003964:	f7ff fd92 	bl	800348c <HAL_GetTick>
 8003968:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800396a:	e010      	b.n	800398e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003972:	d00c      	beq.n	800398e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d007      	beq.n	800398a <FLASH_WaitForLastOperation+0x2e>
 800397a:	f7ff fd87 	bl	800348c <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	429a      	cmp	r2, r3
 8003988:	d201      	bcs.n	800398e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e025      	b.n	80039da <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800398e:	4b15      	ldr	r3, [pc, #84]	@ (80039e4 <FLASH_WaitForLastOperation+0x88>)
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1e8      	bne.n	800396c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800399a:	4b12      	ldr	r3, [pc, #72]	@ (80039e4 <FLASH_WaitForLastOperation+0x88>)
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f003 0320 	and.w	r3, r3, #32
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d002      	beq.n	80039ac <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80039a6:	4b0f      	ldr	r3, [pc, #60]	@ (80039e4 <FLASH_WaitForLastOperation+0x88>)
 80039a8:	2220      	movs	r2, #32
 80039aa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80039ac:	4b0d      	ldr	r3, [pc, #52]	@ (80039e4 <FLASH_WaitForLastOperation+0x88>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	f003 0310 	and.w	r3, r3, #16
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10b      	bne.n	80039d0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80039b8:	4b0a      	ldr	r3, [pc, #40]	@ (80039e4 <FLASH_WaitForLastOperation+0x88>)
 80039ba:	69db      	ldr	r3, [r3, #28]
 80039bc:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d105      	bne.n	80039d0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80039c4:	4b07      	ldr	r3, [pc, #28]	@ (80039e4 <FLASH_WaitForLastOperation+0x88>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d003      	beq.n	80039d8 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80039d0:	f000 f80a 	bl	80039e8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e000      	b.n	80039da <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	40022000 	.word	0x40022000

080039e8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80039ee:	2300      	movs	r3, #0
 80039f0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80039f2:	4b23      	ldr	r3, [pc, #140]	@ (8003a80 <FLASH_SetErrorCode+0x98>)
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	f003 0310 	and.w	r3, r3, #16
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d009      	beq.n	8003a12 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80039fe:	4b21      	ldr	r3, [pc, #132]	@ (8003a84 <FLASH_SetErrorCode+0x9c>)
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	f043 0302 	orr.w	r3, r3, #2
 8003a06:	4a1f      	ldr	r2, [pc, #124]	@ (8003a84 <FLASH_SetErrorCode+0x9c>)
 8003a08:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f043 0310 	orr.w	r3, r3, #16
 8003a10:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003a12:	4b1b      	ldr	r3, [pc, #108]	@ (8003a80 <FLASH_SetErrorCode+0x98>)
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	f003 0304 	and.w	r3, r3, #4
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d009      	beq.n	8003a32 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003a1e:	4b19      	ldr	r3, [pc, #100]	@ (8003a84 <FLASH_SetErrorCode+0x9c>)
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	f043 0301 	orr.w	r3, r3, #1
 8003a26:	4a17      	ldr	r2, [pc, #92]	@ (8003a84 <FLASH_SetErrorCode+0x9c>)
 8003a28:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f043 0304 	orr.w	r3, r3, #4
 8003a30:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003a32:	4b13      	ldr	r3, [pc, #76]	@ (8003a80 <FLASH_SetErrorCode+0x98>)
 8003a34:	69db      	ldr	r3, [r3, #28]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00b      	beq.n	8003a56 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003a3e:	4b11      	ldr	r3, [pc, #68]	@ (8003a84 <FLASH_SetErrorCode+0x9c>)
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	f043 0304 	orr.w	r3, r3, #4
 8003a46:	4a0f      	ldr	r2, [pc, #60]	@ (8003a84 <FLASH_SetErrorCode+0x9c>)
 8003a48:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003a80 <FLASH_SetErrorCode+0x98>)
 8003a4c:	69db      	ldr	r3, [r3, #28]
 8003a4e:	4a0c      	ldr	r2, [pc, #48]	@ (8003a80 <FLASH_SetErrorCode+0x98>)
 8003a50:	f023 0301 	bic.w	r3, r3, #1
 8003a54:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f240 1201 	movw	r2, #257	@ 0x101
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d106      	bne.n	8003a6e <FLASH_SetErrorCode+0x86>
 8003a60:	4b07      	ldr	r3, [pc, #28]	@ (8003a80 <FLASH_SetErrorCode+0x98>)
 8003a62:	69db      	ldr	r3, [r3, #28]
 8003a64:	4a06      	ldr	r2, [pc, #24]	@ (8003a80 <FLASH_SetErrorCode+0x98>)
 8003a66:	f023 0301 	bic.w	r3, r3, #1
 8003a6a:	61d3      	str	r3, [r2, #28]
}  
 8003a6c:	e002      	b.n	8003a74 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003a6e:	4a04      	ldr	r2, [pc, #16]	@ (8003a80 <FLASH_SetErrorCode+0x98>)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	60d3      	str	r3, [r2, #12]
}  
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bc80      	pop	{r7}
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	40022000 	.word	0x40022000
 8003a84:	20000c78 	.word	0x20000c78

08003a88 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003a96:	2300      	movs	r3, #0
 8003a98:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003a9a:	4b2f      	ldr	r3, [pc, #188]	@ (8003b58 <HAL_FLASHEx_Erase+0xd0>)
 8003a9c:	7e1b      	ldrb	r3, [r3, #24]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d101      	bne.n	8003aa6 <HAL_FLASHEx_Erase+0x1e>
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	e053      	b.n	8003b4e <HAL_FLASHEx_Erase+0xc6>
 8003aa6:	4b2c      	ldr	r3, [pc, #176]	@ (8003b58 <HAL_FLASHEx_Erase+0xd0>)
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d116      	bne.n	8003ae2 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003ab4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003ab8:	f7ff ff50 	bl	800395c <FLASH_WaitForLastOperation>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d141      	bne.n	8003b46 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8003ac2:	2001      	movs	r0, #1
 8003ac4:	f000 f84c 	bl	8003b60 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003ac8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003acc:	f7ff ff46 	bl	800395c <FLASH_WaitForLastOperation>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003ad4:	4b21      	ldr	r3, [pc, #132]	@ (8003b5c <HAL_FLASHEx_Erase+0xd4>)
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	4a20      	ldr	r2, [pc, #128]	@ (8003b5c <HAL_FLASHEx_Erase+0xd4>)
 8003ada:	f023 0304 	bic.w	r3, r3, #4
 8003ade:	6113      	str	r3, [r2, #16]
 8003ae0:	e031      	b.n	8003b46 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003ae2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003ae6:	f7ff ff39 	bl	800395c <FLASH_WaitForLastOperation>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d12a      	bne.n	8003b46 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	f04f 32ff 	mov.w	r2, #4294967295
 8003af6:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	60bb      	str	r3, [r7, #8]
 8003afe:	e019      	b.n	8003b34 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003b00:	68b8      	ldr	r0, [r7, #8]
 8003b02:	f000 f849 	bl	8003b98 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b06:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003b0a:	f7ff ff27 	bl	800395c <FLASH_WaitForLastOperation>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003b12:	4b12      	ldr	r3, [pc, #72]	@ (8003b5c <HAL_FLASHEx_Erase+0xd4>)
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	4a11      	ldr	r2, [pc, #68]	@ (8003b5c <HAL_FLASHEx_Erase+0xd4>)
 8003b18:	f023 0302 	bic.w	r3, r3, #2
 8003b1c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003b1e:	7bfb      	ldrb	r3, [r7, #15]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d003      	beq.n	8003b2c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	68ba      	ldr	r2, [r7, #8]
 8003b28:	601a      	str	r2, [r3, #0]
            break;
 8003b2a:	e00c      	b.n	8003b46 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003b32:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	029a      	lsls	r2, r3, #10
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	4413      	add	r3, r2
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d3dc      	bcc.n	8003b00 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003b46:	4b04      	ldr	r3, [pc, #16]	@ (8003b58 <HAL_FLASHEx_Erase+0xd0>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	761a      	strb	r2, [r3, #24]

  return status;
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	20000c78 	.word	0x20000c78
 8003b5c:	40022000 	.word	0x40022000

08003b60 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003b68:	4b09      	ldr	r3, [pc, #36]	@ (8003b90 <FLASH_MassErase+0x30>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003b6e:	4b09      	ldr	r3, [pc, #36]	@ (8003b94 <FLASH_MassErase+0x34>)
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	4a08      	ldr	r2, [pc, #32]	@ (8003b94 <FLASH_MassErase+0x34>)
 8003b74:	f043 0304 	orr.w	r3, r3, #4
 8003b78:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003b7a:	4b06      	ldr	r3, [pc, #24]	@ (8003b94 <FLASH_MassErase+0x34>)
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	4a05      	ldr	r2, [pc, #20]	@ (8003b94 <FLASH_MassErase+0x34>)
 8003b80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b84:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bc80      	pop	{r7}
 8003b8e:	4770      	bx	lr
 8003b90:	20000c78 	.word	0x20000c78
 8003b94:	40022000 	.word	0x40022000

08003b98 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd0 <FLASH_PageErase+0x38>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd4 <FLASH_PageErase+0x3c>)
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	4a0a      	ldr	r2, [pc, #40]	@ (8003bd4 <FLASH_PageErase+0x3c>)
 8003bac:	f043 0302 	orr.w	r3, r3, #2
 8003bb0:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003bb2:	4a08      	ldr	r2, [pc, #32]	@ (8003bd4 <FLASH_PageErase+0x3c>)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003bb8:	4b06      	ldr	r3, [pc, #24]	@ (8003bd4 <FLASH_PageErase+0x3c>)
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	4a05      	ldr	r2, [pc, #20]	@ (8003bd4 <FLASH_PageErase+0x3c>)
 8003bbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bc2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bc80      	pop	{r7}
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	20000c78 	.word	0x20000c78
 8003bd4:	40022000 	.word	0x40022000

08003bd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b08b      	sub	sp, #44	@ 0x2c
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003be2:	2300      	movs	r3, #0
 8003be4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003be6:	2300      	movs	r3, #0
 8003be8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bea:	e169      	b.n	8003ec0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003bec:	2201      	movs	r2, #1
 8003bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	69fa      	ldr	r2, [r7, #28]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	f040 8158 	bne.w	8003eba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	4a9a      	ldr	r2, [pc, #616]	@ (8003e78 <HAL_GPIO_Init+0x2a0>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d05e      	beq.n	8003cd2 <HAL_GPIO_Init+0xfa>
 8003c14:	4a98      	ldr	r2, [pc, #608]	@ (8003e78 <HAL_GPIO_Init+0x2a0>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d875      	bhi.n	8003d06 <HAL_GPIO_Init+0x12e>
 8003c1a:	4a98      	ldr	r2, [pc, #608]	@ (8003e7c <HAL_GPIO_Init+0x2a4>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d058      	beq.n	8003cd2 <HAL_GPIO_Init+0xfa>
 8003c20:	4a96      	ldr	r2, [pc, #600]	@ (8003e7c <HAL_GPIO_Init+0x2a4>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d86f      	bhi.n	8003d06 <HAL_GPIO_Init+0x12e>
 8003c26:	4a96      	ldr	r2, [pc, #600]	@ (8003e80 <HAL_GPIO_Init+0x2a8>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d052      	beq.n	8003cd2 <HAL_GPIO_Init+0xfa>
 8003c2c:	4a94      	ldr	r2, [pc, #592]	@ (8003e80 <HAL_GPIO_Init+0x2a8>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d869      	bhi.n	8003d06 <HAL_GPIO_Init+0x12e>
 8003c32:	4a94      	ldr	r2, [pc, #592]	@ (8003e84 <HAL_GPIO_Init+0x2ac>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d04c      	beq.n	8003cd2 <HAL_GPIO_Init+0xfa>
 8003c38:	4a92      	ldr	r2, [pc, #584]	@ (8003e84 <HAL_GPIO_Init+0x2ac>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d863      	bhi.n	8003d06 <HAL_GPIO_Init+0x12e>
 8003c3e:	4a92      	ldr	r2, [pc, #584]	@ (8003e88 <HAL_GPIO_Init+0x2b0>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d046      	beq.n	8003cd2 <HAL_GPIO_Init+0xfa>
 8003c44:	4a90      	ldr	r2, [pc, #576]	@ (8003e88 <HAL_GPIO_Init+0x2b0>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d85d      	bhi.n	8003d06 <HAL_GPIO_Init+0x12e>
 8003c4a:	2b12      	cmp	r3, #18
 8003c4c:	d82a      	bhi.n	8003ca4 <HAL_GPIO_Init+0xcc>
 8003c4e:	2b12      	cmp	r3, #18
 8003c50:	d859      	bhi.n	8003d06 <HAL_GPIO_Init+0x12e>
 8003c52:	a201      	add	r2, pc, #4	@ (adr r2, 8003c58 <HAL_GPIO_Init+0x80>)
 8003c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c58:	08003cd3 	.word	0x08003cd3
 8003c5c:	08003cad 	.word	0x08003cad
 8003c60:	08003cbf 	.word	0x08003cbf
 8003c64:	08003d01 	.word	0x08003d01
 8003c68:	08003d07 	.word	0x08003d07
 8003c6c:	08003d07 	.word	0x08003d07
 8003c70:	08003d07 	.word	0x08003d07
 8003c74:	08003d07 	.word	0x08003d07
 8003c78:	08003d07 	.word	0x08003d07
 8003c7c:	08003d07 	.word	0x08003d07
 8003c80:	08003d07 	.word	0x08003d07
 8003c84:	08003d07 	.word	0x08003d07
 8003c88:	08003d07 	.word	0x08003d07
 8003c8c:	08003d07 	.word	0x08003d07
 8003c90:	08003d07 	.word	0x08003d07
 8003c94:	08003d07 	.word	0x08003d07
 8003c98:	08003d07 	.word	0x08003d07
 8003c9c:	08003cb5 	.word	0x08003cb5
 8003ca0:	08003cc9 	.word	0x08003cc9
 8003ca4:	4a79      	ldr	r2, [pc, #484]	@ (8003e8c <HAL_GPIO_Init+0x2b4>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d013      	beq.n	8003cd2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003caa:	e02c      	b.n	8003d06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	623b      	str	r3, [r7, #32]
          break;
 8003cb2:	e029      	b.n	8003d08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	3304      	adds	r3, #4
 8003cba:	623b      	str	r3, [r7, #32]
          break;
 8003cbc:	e024      	b.n	8003d08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	3308      	adds	r3, #8
 8003cc4:	623b      	str	r3, [r7, #32]
          break;
 8003cc6:	e01f      	b.n	8003d08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	330c      	adds	r3, #12
 8003cce:	623b      	str	r3, [r7, #32]
          break;
 8003cd0:	e01a      	b.n	8003d08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d102      	bne.n	8003ce0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003cda:	2304      	movs	r3, #4
 8003cdc:	623b      	str	r3, [r7, #32]
          break;
 8003cde:	e013      	b.n	8003d08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d105      	bne.n	8003cf4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ce8:	2308      	movs	r3, #8
 8003cea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	69fa      	ldr	r2, [r7, #28]
 8003cf0:	611a      	str	r2, [r3, #16]
          break;
 8003cf2:	e009      	b.n	8003d08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003cf4:	2308      	movs	r3, #8
 8003cf6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	69fa      	ldr	r2, [r7, #28]
 8003cfc:	615a      	str	r2, [r3, #20]
          break;
 8003cfe:	e003      	b.n	8003d08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003d00:	2300      	movs	r3, #0
 8003d02:	623b      	str	r3, [r7, #32]
          break;
 8003d04:	e000      	b.n	8003d08 <HAL_GPIO_Init+0x130>
          break;
 8003d06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	2bff      	cmp	r3, #255	@ 0xff
 8003d0c:	d801      	bhi.n	8003d12 <HAL_GPIO_Init+0x13a>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	e001      	b.n	8003d16 <HAL_GPIO_Init+0x13e>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	3304      	adds	r3, #4
 8003d16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	2bff      	cmp	r3, #255	@ 0xff
 8003d1c:	d802      	bhi.n	8003d24 <HAL_GPIO_Init+0x14c>
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	e002      	b.n	8003d2a <HAL_GPIO_Init+0x152>
 8003d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d26:	3b08      	subs	r3, #8
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	210f      	movs	r1, #15
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	fa01 f303 	lsl.w	r3, r1, r3
 8003d38:	43db      	mvns	r3, r3
 8003d3a:	401a      	ands	r2, r3
 8003d3c:	6a39      	ldr	r1, [r7, #32]
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	fa01 f303 	lsl.w	r3, r1, r3
 8003d44:	431a      	orrs	r2, r3
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f000 80b1 	beq.w	8003eba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003d58:	4b4d      	ldr	r3, [pc, #308]	@ (8003e90 <HAL_GPIO_Init+0x2b8>)
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	4a4c      	ldr	r2, [pc, #304]	@ (8003e90 <HAL_GPIO_Init+0x2b8>)
 8003d5e:	f043 0301 	orr.w	r3, r3, #1
 8003d62:	6193      	str	r3, [r2, #24]
 8003d64:	4b4a      	ldr	r3, [pc, #296]	@ (8003e90 <HAL_GPIO_Init+0x2b8>)
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	60bb      	str	r3, [r7, #8]
 8003d6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003d70:	4a48      	ldr	r2, [pc, #288]	@ (8003e94 <HAL_GPIO_Init+0x2bc>)
 8003d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d74:	089b      	lsrs	r3, r3, #2
 8003d76:	3302      	adds	r3, #2
 8003d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d80:	f003 0303 	and.w	r3, r3, #3
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	220f      	movs	r2, #15
 8003d88:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8c:	43db      	mvns	r3, r3
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	4013      	ands	r3, r2
 8003d92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a40      	ldr	r2, [pc, #256]	@ (8003e98 <HAL_GPIO_Init+0x2c0>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d013      	beq.n	8003dc4 <HAL_GPIO_Init+0x1ec>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a3f      	ldr	r2, [pc, #252]	@ (8003e9c <HAL_GPIO_Init+0x2c4>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d00d      	beq.n	8003dc0 <HAL_GPIO_Init+0x1e8>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a3e      	ldr	r2, [pc, #248]	@ (8003ea0 <HAL_GPIO_Init+0x2c8>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d007      	beq.n	8003dbc <HAL_GPIO_Init+0x1e4>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a3d      	ldr	r2, [pc, #244]	@ (8003ea4 <HAL_GPIO_Init+0x2cc>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d101      	bne.n	8003db8 <HAL_GPIO_Init+0x1e0>
 8003db4:	2303      	movs	r3, #3
 8003db6:	e006      	b.n	8003dc6 <HAL_GPIO_Init+0x1ee>
 8003db8:	2304      	movs	r3, #4
 8003dba:	e004      	b.n	8003dc6 <HAL_GPIO_Init+0x1ee>
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	e002      	b.n	8003dc6 <HAL_GPIO_Init+0x1ee>
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e000      	b.n	8003dc6 <HAL_GPIO_Init+0x1ee>
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dc8:	f002 0203 	and.w	r2, r2, #3
 8003dcc:	0092      	lsls	r2, r2, #2
 8003dce:	4093      	lsls	r3, r2
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003dd6:	492f      	ldr	r1, [pc, #188]	@ (8003e94 <HAL_GPIO_Init+0x2bc>)
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dda:	089b      	lsrs	r3, r3, #2
 8003ddc:	3302      	adds	r3, #2
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d006      	beq.n	8003dfe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003df0:	4b2d      	ldr	r3, [pc, #180]	@ (8003ea8 <HAL_GPIO_Init+0x2d0>)
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	492c      	ldr	r1, [pc, #176]	@ (8003ea8 <HAL_GPIO_Init+0x2d0>)
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	608b      	str	r3, [r1, #8]
 8003dfc:	e006      	b.n	8003e0c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003dfe:	4b2a      	ldr	r3, [pc, #168]	@ (8003ea8 <HAL_GPIO_Init+0x2d0>)
 8003e00:	689a      	ldr	r2, [r3, #8]
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	43db      	mvns	r3, r3
 8003e06:	4928      	ldr	r1, [pc, #160]	@ (8003ea8 <HAL_GPIO_Init+0x2d0>)
 8003e08:	4013      	ands	r3, r2
 8003e0a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d006      	beq.n	8003e26 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003e18:	4b23      	ldr	r3, [pc, #140]	@ (8003ea8 <HAL_GPIO_Init+0x2d0>)
 8003e1a:	68da      	ldr	r2, [r3, #12]
 8003e1c:	4922      	ldr	r1, [pc, #136]	@ (8003ea8 <HAL_GPIO_Init+0x2d0>)
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	60cb      	str	r3, [r1, #12]
 8003e24:	e006      	b.n	8003e34 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003e26:	4b20      	ldr	r3, [pc, #128]	@ (8003ea8 <HAL_GPIO_Init+0x2d0>)
 8003e28:	68da      	ldr	r2, [r3, #12]
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	43db      	mvns	r3, r3
 8003e2e:	491e      	ldr	r1, [pc, #120]	@ (8003ea8 <HAL_GPIO_Init+0x2d0>)
 8003e30:	4013      	ands	r3, r2
 8003e32:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d006      	beq.n	8003e4e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003e40:	4b19      	ldr	r3, [pc, #100]	@ (8003ea8 <HAL_GPIO_Init+0x2d0>)
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	4918      	ldr	r1, [pc, #96]	@ (8003ea8 <HAL_GPIO_Init+0x2d0>)
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	604b      	str	r3, [r1, #4]
 8003e4c:	e006      	b.n	8003e5c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003e4e:	4b16      	ldr	r3, [pc, #88]	@ (8003ea8 <HAL_GPIO_Init+0x2d0>)
 8003e50:	685a      	ldr	r2, [r3, #4]
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	43db      	mvns	r3, r3
 8003e56:	4914      	ldr	r1, [pc, #80]	@ (8003ea8 <HAL_GPIO_Init+0x2d0>)
 8003e58:	4013      	ands	r3, r2
 8003e5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d021      	beq.n	8003eac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003e68:	4b0f      	ldr	r3, [pc, #60]	@ (8003ea8 <HAL_GPIO_Init+0x2d0>)
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	490e      	ldr	r1, [pc, #56]	@ (8003ea8 <HAL_GPIO_Init+0x2d0>)
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	600b      	str	r3, [r1, #0]
 8003e74:	e021      	b.n	8003eba <HAL_GPIO_Init+0x2e2>
 8003e76:	bf00      	nop
 8003e78:	10320000 	.word	0x10320000
 8003e7c:	10310000 	.word	0x10310000
 8003e80:	10220000 	.word	0x10220000
 8003e84:	10210000 	.word	0x10210000
 8003e88:	10120000 	.word	0x10120000
 8003e8c:	10110000 	.word	0x10110000
 8003e90:	40021000 	.word	0x40021000
 8003e94:	40010000 	.word	0x40010000
 8003e98:	40010800 	.word	0x40010800
 8003e9c:	40010c00 	.word	0x40010c00
 8003ea0:	40011000 	.word	0x40011000
 8003ea4:	40011400 	.word	0x40011400
 8003ea8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003eac:	4b0b      	ldr	r3, [pc, #44]	@ (8003edc <HAL_GPIO_Init+0x304>)
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	43db      	mvns	r3, r3
 8003eb4:	4909      	ldr	r1, [pc, #36]	@ (8003edc <HAL_GPIO_Init+0x304>)
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f47f ae8e 	bne.w	8003bec <HAL_GPIO_Init+0x14>
  }
}
 8003ed0:	bf00      	nop
 8003ed2:	bf00      	nop
 8003ed4:	372c      	adds	r7, #44	@ 0x2c
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bc80      	pop	{r7}
 8003eda:	4770      	bx	lr
 8003edc:	40010400 	.word	0x40010400

08003ee0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	460b      	mov	r3, r1
 8003eea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	887b      	ldrh	r3, [r7, #2]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d002      	beq.n	8003efe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	73fb      	strb	r3, [r7, #15]
 8003efc:	e001      	b.n	8003f02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003efe:	2300      	movs	r3, #0
 8003f00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3714      	adds	r7, #20
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bc80      	pop	{r7}
 8003f0c:	4770      	bx	lr

08003f0e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b083      	sub	sp, #12
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
 8003f16:	460b      	mov	r3, r1
 8003f18:	807b      	strh	r3, [r7, #2]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f1e:	787b      	ldrb	r3, [r7, #1]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d003      	beq.n	8003f2c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f24:	887a      	ldrh	r2, [r7, #2]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003f2a:	e003      	b.n	8003f34 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003f2c:	887b      	ldrh	r3, [r7, #2]
 8003f2e:	041a      	lsls	r2, r3, #16
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	611a      	str	r2, [r3, #16]
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bc80      	pop	{r7}
 8003f3c:	4770      	bx	lr

08003f3e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f3e:	b480      	push	{r7}
 8003f40:	b085      	sub	sp, #20
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
 8003f46:	460b      	mov	r3, r1
 8003f48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f50:	887a      	ldrh	r2, [r7, #2]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	4013      	ands	r3, r2
 8003f56:	041a      	lsls	r2, r3, #16
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	43d9      	mvns	r1, r3
 8003f5c:	887b      	ldrh	r3, [r7, #2]
 8003f5e:	400b      	ands	r3, r1
 8003f60:	431a      	orrs	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	611a      	str	r2, [r3, #16]
}
 8003f66:	bf00      	nop
 8003f68:	3714      	adds	r7, #20
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bc80      	pop	{r7}
 8003f6e:	4770      	bx	lr

08003f70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e272      	b.n	8004468 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f000 8087 	beq.w	800409e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f90:	4b92      	ldr	r3, [pc, #584]	@ (80041dc <HAL_RCC_OscConfig+0x26c>)
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f003 030c 	and.w	r3, r3, #12
 8003f98:	2b04      	cmp	r3, #4
 8003f9a:	d00c      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f9c:	4b8f      	ldr	r3, [pc, #572]	@ (80041dc <HAL_RCC_OscConfig+0x26c>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f003 030c 	and.w	r3, r3, #12
 8003fa4:	2b08      	cmp	r3, #8
 8003fa6:	d112      	bne.n	8003fce <HAL_RCC_OscConfig+0x5e>
 8003fa8:	4b8c      	ldr	r3, [pc, #560]	@ (80041dc <HAL_RCC_OscConfig+0x26c>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fb4:	d10b      	bne.n	8003fce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fb6:	4b89      	ldr	r3, [pc, #548]	@ (80041dc <HAL_RCC_OscConfig+0x26c>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d06c      	beq.n	800409c <HAL_RCC_OscConfig+0x12c>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d168      	bne.n	800409c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e24c      	b.n	8004468 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fd6:	d106      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x76>
 8003fd8:	4b80      	ldr	r3, [pc, #512]	@ (80041dc <HAL_RCC_OscConfig+0x26c>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a7f      	ldr	r2, [pc, #508]	@ (80041dc <HAL_RCC_OscConfig+0x26c>)
 8003fde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fe2:	6013      	str	r3, [r2, #0]
 8003fe4:	e02e      	b.n	8004044 <HAL_RCC_OscConfig+0xd4>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10c      	bne.n	8004008 <HAL_RCC_OscConfig+0x98>
 8003fee:	4b7b      	ldr	r3, [pc, #492]	@ (80041dc <HAL_RCC_OscConfig+0x26c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a7a      	ldr	r2, [pc, #488]	@ (80041dc <HAL_RCC_OscConfig+0x26c>)
 8003ff4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ff8:	6013      	str	r3, [r2, #0]
 8003ffa:	4b78      	ldr	r3, [pc, #480]	@ (80041dc <HAL_RCC_OscConfig+0x26c>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a77      	ldr	r2, [pc, #476]	@ (80041dc <HAL_RCC_OscConfig+0x26c>)
 8004000:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004004:	6013      	str	r3, [r2, #0]
 8004006:	e01d      	b.n	8004044 <HAL_RCC_OscConfig+0xd4>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004010:	d10c      	bne.n	800402c <HAL_RCC_OscConfig+0xbc>
 8004012:	4b72      	ldr	r3, [pc, #456]	@ (80041dc <HAL_RCC_OscConfig+0x26c>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a71      	ldr	r2, [pc, #452]	@ (80041dc <HAL_RCC_OscConfig+0x26c>)
 8004018:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800401c:	6013      	str	r3, [r2, #0]
 800401e:	4b6f      	ldr	r3, [pc, #444]	@ (80041dc <HAL_RCC_OscConfig+0x26c>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a6e      	ldr	r2, [pc, #440]	@ (80041dc <HAL_RCC_OscConfig+0x26c>)
 8004024:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004028:	6013      	str	r3, [r2, #0]
 800402a:	e00b      	b.n	8004044 <HAL_RCC_OscConfig+0xd4>
 800402c:	4b6b      	ldr	r3, [pc, #428]	@ (80041dc <HAL_RCC_OscConfig+0x26c>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a6a      	ldr	r2, [pc, #424]	@ (80041dc <HAL_RCC_OscConfig+0x26c>)
 8004032:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004036:	6013      	str	r3, [r2, #0]
 8004038:	4b68      	ldr	r3, [pc, #416]	@ (80041dc <HAL_RCC_OscConfig+0x26c>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a67      	ldr	r2, [pc, #412]	@ (80041dc <HAL_RCC_OscConfig+0x26c>)
 800403e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004042:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d013      	beq.n	8004074 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800404c:	f7ff fa1e 	bl	800348c <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004054:	f7ff fa1a 	bl	800348c <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b64      	cmp	r3, #100	@ 0x64
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e200      	b.n	8004468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004066:	4b5d      	ldr	r3, [pc, #372]	@ (80041dc <HAL_RCC_OscConfig+0x26c>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0f0      	beq.n	8004054 <HAL_RCC_OscConfig+0xe4>
 8004072:	e014      	b.n	800409e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004074:	f7ff fa0a 	bl	800348c <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800407a:	e008      	b.n	800408e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800407c:	f7ff fa06 	bl	800348c <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b64      	cmp	r3, #100	@ 0x64
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e1ec      	b.n	8004468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800408e:	4b53      	ldr	r3, [pc, #332]	@ (80041dc <HAL_RCC_OscConfig+0x26c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1f0      	bne.n	800407c <HAL_RCC_OscConfig+0x10c>
 800409a:	e000      	b.n	800409e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800409c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d063      	beq.n	8004172 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040aa:	4b4c      	ldr	r3, [pc, #304]	@ (80041dc <HAL_RCC_OscConfig+0x26c>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f003 030c 	and.w	r3, r3, #12
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00b      	beq.n	80040ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80040b6:	4b49      	ldr	r3, [pc, #292]	@ (80041dc <HAL_RCC_OscConfig+0x26c>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f003 030c 	and.w	r3, r3, #12
 80040be:	2b08      	cmp	r3, #8
 80040c0:	d11c      	bne.n	80040fc <HAL_RCC_OscConfig+0x18c>
 80040c2:	4b46      	ldr	r3, [pc, #280]	@ (80041dc <HAL_RCC_OscConfig+0x26c>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d116      	bne.n	80040fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ce:	4b43      	ldr	r3, [pc, #268]	@ (80041dc <HAL_RCC_OscConfig+0x26c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d005      	beq.n	80040e6 <HAL_RCC_OscConfig+0x176>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d001      	beq.n	80040e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e1c0      	b.n	8004468 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040e6:	4b3d      	ldr	r3, [pc, #244]	@ (80041dc <HAL_RCC_OscConfig+0x26c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	4939      	ldr	r1, [pc, #228]	@ (80041dc <HAL_RCC_OscConfig+0x26c>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040fa:	e03a      	b.n	8004172 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d020      	beq.n	8004146 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004104:	4b36      	ldr	r3, [pc, #216]	@ (80041e0 <HAL_RCC_OscConfig+0x270>)
 8004106:	2201      	movs	r2, #1
 8004108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800410a:	f7ff f9bf 	bl	800348c <HAL_GetTick>
 800410e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004110:	e008      	b.n	8004124 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004112:	f7ff f9bb 	bl	800348c <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b02      	cmp	r3, #2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e1a1      	b.n	8004468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004124:	4b2d      	ldr	r3, [pc, #180]	@ (80041dc <HAL_RCC_OscConfig+0x26c>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0f0      	beq.n	8004112 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004130:	4b2a      	ldr	r3, [pc, #168]	@ (80041dc <HAL_RCC_OscConfig+0x26c>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	00db      	lsls	r3, r3, #3
 800413e:	4927      	ldr	r1, [pc, #156]	@ (80041dc <HAL_RCC_OscConfig+0x26c>)
 8004140:	4313      	orrs	r3, r2
 8004142:	600b      	str	r3, [r1, #0]
 8004144:	e015      	b.n	8004172 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004146:	4b26      	ldr	r3, [pc, #152]	@ (80041e0 <HAL_RCC_OscConfig+0x270>)
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800414c:	f7ff f99e 	bl	800348c <HAL_GetTick>
 8004150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004154:	f7ff f99a 	bl	800348c <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e180      	b.n	8004468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004166:	4b1d      	ldr	r3, [pc, #116]	@ (80041dc <HAL_RCC_OscConfig+0x26c>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1f0      	bne.n	8004154 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0308 	and.w	r3, r3, #8
 800417a:	2b00      	cmp	r3, #0
 800417c:	d03a      	beq.n	80041f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d019      	beq.n	80041ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004186:	4b17      	ldr	r3, [pc, #92]	@ (80041e4 <HAL_RCC_OscConfig+0x274>)
 8004188:	2201      	movs	r2, #1
 800418a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800418c:	f7ff f97e 	bl	800348c <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004194:	f7ff f97a 	bl	800348c <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e160      	b.n	8004468 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041a6:	4b0d      	ldr	r3, [pc, #52]	@ (80041dc <HAL_RCC_OscConfig+0x26c>)
 80041a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d0f0      	beq.n	8004194 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80041b2:	2001      	movs	r0, #1
 80041b4:	f000 fafe 	bl	80047b4 <RCC_Delay>
 80041b8:	e01c      	b.n	80041f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041ba:	4b0a      	ldr	r3, [pc, #40]	@ (80041e4 <HAL_RCC_OscConfig+0x274>)
 80041bc:	2200      	movs	r2, #0
 80041be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041c0:	f7ff f964 	bl	800348c <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041c6:	e00f      	b.n	80041e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041c8:	f7ff f960 	bl	800348c <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d908      	bls.n	80041e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e146      	b.n	8004468 <HAL_RCC_OscConfig+0x4f8>
 80041da:	bf00      	nop
 80041dc:	40021000 	.word	0x40021000
 80041e0:	42420000 	.word	0x42420000
 80041e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041e8:	4b92      	ldr	r3, [pc, #584]	@ (8004434 <HAL_RCC_OscConfig+0x4c4>)
 80041ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1e9      	bne.n	80041c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0304 	and.w	r3, r3, #4
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 80a6 	beq.w	800434e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004202:	2300      	movs	r3, #0
 8004204:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004206:	4b8b      	ldr	r3, [pc, #556]	@ (8004434 <HAL_RCC_OscConfig+0x4c4>)
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10d      	bne.n	800422e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004212:	4b88      	ldr	r3, [pc, #544]	@ (8004434 <HAL_RCC_OscConfig+0x4c4>)
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	4a87      	ldr	r2, [pc, #540]	@ (8004434 <HAL_RCC_OscConfig+0x4c4>)
 8004218:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800421c:	61d3      	str	r3, [r2, #28]
 800421e:	4b85      	ldr	r3, [pc, #532]	@ (8004434 <HAL_RCC_OscConfig+0x4c4>)
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004226:	60bb      	str	r3, [r7, #8]
 8004228:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800422a:	2301      	movs	r3, #1
 800422c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800422e:	4b82      	ldr	r3, [pc, #520]	@ (8004438 <HAL_RCC_OscConfig+0x4c8>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004236:	2b00      	cmp	r3, #0
 8004238:	d118      	bne.n	800426c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800423a:	4b7f      	ldr	r3, [pc, #508]	@ (8004438 <HAL_RCC_OscConfig+0x4c8>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a7e      	ldr	r2, [pc, #504]	@ (8004438 <HAL_RCC_OscConfig+0x4c8>)
 8004240:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004244:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004246:	f7ff f921 	bl	800348c <HAL_GetTick>
 800424a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800424c:	e008      	b.n	8004260 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800424e:	f7ff f91d 	bl	800348c <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b64      	cmp	r3, #100	@ 0x64
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e103      	b.n	8004468 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004260:	4b75      	ldr	r3, [pc, #468]	@ (8004438 <HAL_RCC_OscConfig+0x4c8>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0f0      	beq.n	800424e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d106      	bne.n	8004282 <HAL_RCC_OscConfig+0x312>
 8004274:	4b6f      	ldr	r3, [pc, #444]	@ (8004434 <HAL_RCC_OscConfig+0x4c4>)
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	4a6e      	ldr	r2, [pc, #440]	@ (8004434 <HAL_RCC_OscConfig+0x4c4>)
 800427a:	f043 0301 	orr.w	r3, r3, #1
 800427e:	6213      	str	r3, [r2, #32]
 8004280:	e02d      	b.n	80042de <HAL_RCC_OscConfig+0x36e>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10c      	bne.n	80042a4 <HAL_RCC_OscConfig+0x334>
 800428a:	4b6a      	ldr	r3, [pc, #424]	@ (8004434 <HAL_RCC_OscConfig+0x4c4>)
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	4a69      	ldr	r2, [pc, #420]	@ (8004434 <HAL_RCC_OscConfig+0x4c4>)
 8004290:	f023 0301 	bic.w	r3, r3, #1
 8004294:	6213      	str	r3, [r2, #32]
 8004296:	4b67      	ldr	r3, [pc, #412]	@ (8004434 <HAL_RCC_OscConfig+0x4c4>)
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	4a66      	ldr	r2, [pc, #408]	@ (8004434 <HAL_RCC_OscConfig+0x4c4>)
 800429c:	f023 0304 	bic.w	r3, r3, #4
 80042a0:	6213      	str	r3, [r2, #32]
 80042a2:	e01c      	b.n	80042de <HAL_RCC_OscConfig+0x36e>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	2b05      	cmp	r3, #5
 80042aa:	d10c      	bne.n	80042c6 <HAL_RCC_OscConfig+0x356>
 80042ac:	4b61      	ldr	r3, [pc, #388]	@ (8004434 <HAL_RCC_OscConfig+0x4c4>)
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	4a60      	ldr	r2, [pc, #384]	@ (8004434 <HAL_RCC_OscConfig+0x4c4>)
 80042b2:	f043 0304 	orr.w	r3, r3, #4
 80042b6:	6213      	str	r3, [r2, #32]
 80042b8:	4b5e      	ldr	r3, [pc, #376]	@ (8004434 <HAL_RCC_OscConfig+0x4c4>)
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	4a5d      	ldr	r2, [pc, #372]	@ (8004434 <HAL_RCC_OscConfig+0x4c4>)
 80042be:	f043 0301 	orr.w	r3, r3, #1
 80042c2:	6213      	str	r3, [r2, #32]
 80042c4:	e00b      	b.n	80042de <HAL_RCC_OscConfig+0x36e>
 80042c6:	4b5b      	ldr	r3, [pc, #364]	@ (8004434 <HAL_RCC_OscConfig+0x4c4>)
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	4a5a      	ldr	r2, [pc, #360]	@ (8004434 <HAL_RCC_OscConfig+0x4c4>)
 80042cc:	f023 0301 	bic.w	r3, r3, #1
 80042d0:	6213      	str	r3, [r2, #32]
 80042d2:	4b58      	ldr	r3, [pc, #352]	@ (8004434 <HAL_RCC_OscConfig+0x4c4>)
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	4a57      	ldr	r2, [pc, #348]	@ (8004434 <HAL_RCC_OscConfig+0x4c4>)
 80042d8:	f023 0304 	bic.w	r3, r3, #4
 80042dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d015      	beq.n	8004312 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042e6:	f7ff f8d1 	bl	800348c <HAL_GetTick>
 80042ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ec:	e00a      	b.n	8004304 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ee:	f7ff f8cd 	bl	800348c <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d901      	bls.n	8004304 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e0b1      	b.n	8004468 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004304:	4b4b      	ldr	r3, [pc, #300]	@ (8004434 <HAL_RCC_OscConfig+0x4c4>)
 8004306:	6a1b      	ldr	r3, [r3, #32]
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d0ee      	beq.n	80042ee <HAL_RCC_OscConfig+0x37e>
 8004310:	e014      	b.n	800433c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004312:	f7ff f8bb 	bl	800348c <HAL_GetTick>
 8004316:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004318:	e00a      	b.n	8004330 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800431a:	f7ff f8b7 	bl	800348c <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004328:	4293      	cmp	r3, r2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e09b      	b.n	8004468 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004330:	4b40      	ldr	r3, [pc, #256]	@ (8004434 <HAL_RCC_OscConfig+0x4c4>)
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	f003 0302 	and.w	r3, r3, #2
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1ee      	bne.n	800431a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800433c:	7dfb      	ldrb	r3, [r7, #23]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d105      	bne.n	800434e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004342:	4b3c      	ldr	r3, [pc, #240]	@ (8004434 <HAL_RCC_OscConfig+0x4c4>)
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	4a3b      	ldr	r2, [pc, #236]	@ (8004434 <HAL_RCC_OscConfig+0x4c4>)
 8004348:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800434c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 8087 	beq.w	8004466 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004358:	4b36      	ldr	r3, [pc, #216]	@ (8004434 <HAL_RCC_OscConfig+0x4c4>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f003 030c 	and.w	r3, r3, #12
 8004360:	2b08      	cmp	r3, #8
 8004362:	d061      	beq.n	8004428 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	69db      	ldr	r3, [r3, #28]
 8004368:	2b02      	cmp	r3, #2
 800436a:	d146      	bne.n	80043fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800436c:	4b33      	ldr	r3, [pc, #204]	@ (800443c <HAL_RCC_OscConfig+0x4cc>)
 800436e:	2200      	movs	r2, #0
 8004370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004372:	f7ff f88b 	bl	800348c <HAL_GetTick>
 8004376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004378:	e008      	b.n	800438c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800437a:	f7ff f887 	bl	800348c <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b02      	cmp	r3, #2
 8004386:	d901      	bls.n	800438c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e06d      	b.n	8004468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800438c:	4b29      	ldr	r3, [pc, #164]	@ (8004434 <HAL_RCC_OscConfig+0x4c4>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1f0      	bne.n	800437a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043a0:	d108      	bne.n	80043b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80043a2:	4b24      	ldr	r3, [pc, #144]	@ (8004434 <HAL_RCC_OscConfig+0x4c4>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	4921      	ldr	r1, [pc, #132]	@ (8004434 <HAL_RCC_OscConfig+0x4c4>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043b4:	4b1f      	ldr	r3, [pc, #124]	@ (8004434 <HAL_RCC_OscConfig+0x4c4>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a19      	ldr	r1, [r3, #32]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c4:	430b      	orrs	r3, r1
 80043c6:	491b      	ldr	r1, [pc, #108]	@ (8004434 <HAL_RCC_OscConfig+0x4c4>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043cc:	4b1b      	ldr	r3, [pc, #108]	@ (800443c <HAL_RCC_OscConfig+0x4cc>)
 80043ce:	2201      	movs	r2, #1
 80043d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d2:	f7ff f85b 	bl	800348c <HAL_GetTick>
 80043d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043d8:	e008      	b.n	80043ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043da:	f7ff f857 	bl	800348c <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d901      	bls.n	80043ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e03d      	b.n	8004468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043ec:	4b11      	ldr	r3, [pc, #68]	@ (8004434 <HAL_RCC_OscConfig+0x4c4>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0f0      	beq.n	80043da <HAL_RCC_OscConfig+0x46a>
 80043f8:	e035      	b.n	8004466 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043fa:	4b10      	ldr	r3, [pc, #64]	@ (800443c <HAL_RCC_OscConfig+0x4cc>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004400:	f7ff f844 	bl	800348c <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004408:	f7ff f840 	bl	800348c <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e026      	b.n	8004468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800441a:	4b06      	ldr	r3, [pc, #24]	@ (8004434 <HAL_RCC_OscConfig+0x4c4>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1f0      	bne.n	8004408 <HAL_RCC_OscConfig+0x498>
 8004426:	e01e      	b.n	8004466 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	69db      	ldr	r3, [r3, #28]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d107      	bne.n	8004440 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e019      	b.n	8004468 <HAL_RCC_OscConfig+0x4f8>
 8004434:	40021000 	.word	0x40021000
 8004438:	40007000 	.word	0x40007000
 800443c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004440:	4b0b      	ldr	r3, [pc, #44]	@ (8004470 <HAL_RCC_OscConfig+0x500>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a1b      	ldr	r3, [r3, #32]
 8004450:	429a      	cmp	r2, r3
 8004452:	d106      	bne.n	8004462 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800445e:	429a      	cmp	r2, r3
 8004460:	d001      	beq.n	8004466 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e000      	b.n	8004468 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3718      	adds	r7, #24
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	40021000 	.word	0x40021000

08004474 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d101      	bne.n	8004488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e0d0      	b.n	800462a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004488:	4b6a      	ldr	r3, [pc, #424]	@ (8004634 <HAL_RCC_ClockConfig+0x1c0>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	683a      	ldr	r2, [r7, #0]
 8004492:	429a      	cmp	r2, r3
 8004494:	d910      	bls.n	80044b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004496:	4b67      	ldr	r3, [pc, #412]	@ (8004634 <HAL_RCC_ClockConfig+0x1c0>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f023 0207 	bic.w	r2, r3, #7
 800449e:	4965      	ldr	r1, [pc, #404]	@ (8004634 <HAL_RCC_ClockConfig+0x1c0>)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044a6:	4b63      	ldr	r3, [pc, #396]	@ (8004634 <HAL_RCC_ClockConfig+0x1c0>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0307 	and.w	r3, r3, #7
 80044ae:	683a      	ldr	r2, [r7, #0]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d001      	beq.n	80044b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e0b8      	b.n	800462a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d020      	beq.n	8004506 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0304 	and.w	r3, r3, #4
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d005      	beq.n	80044dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044d0:	4b59      	ldr	r3, [pc, #356]	@ (8004638 <HAL_RCC_ClockConfig+0x1c4>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	4a58      	ldr	r2, [pc, #352]	@ (8004638 <HAL_RCC_ClockConfig+0x1c4>)
 80044d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80044da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0308 	and.w	r3, r3, #8
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d005      	beq.n	80044f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044e8:	4b53      	ldr	r3, [pc, #332]	@ (8004638 <HAL_RCC_ClockConfig+0x1c4>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	4a52      	ldr	r2, [pc, #328]	@ (8004638 <HAL_RCC_ClockConfig+0x1c4>)
 80044ee:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80044f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044f4:	4b50      	ldr	r3, [pc, #320]	@ (8004638 <HAL_RCC_ClockConfig+0x1c4>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	494d      	ldr	r1, [pc, #308]	@ (8004638 <HAL_RCC_ClockConfig+0x1c4>)
 8004502:	4313      	orrs	r3, r2
 8004504:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b00      	cmp	r3, #0
 8004510:	d040      	beq.n	8004594 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d107      	bne.n	800452a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800451a:	4b47      	ldr	r3, [pc, #284]	@ (8004638 <HAL_RCC_ClockConfig+0x1c4>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d115      	bne.n	8004552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e07f      	b.n	800462a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	2b02      	cmp	r3, #2
 8004530:	d107      	bne.n	8004542 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004532:	4b41      	ldr	r3, [pc, #260]	@ (8004638 <HAL_RCC_ClockConfig+0x1c4>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d109      	bne.n	8004552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e073      	b.n	800462a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004542:	4b3d      	ldr	r3, [pc, #244]	@ (8004638 <HAL_RCC_ClockConfig+0x1c4>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e06b      	b.n	800462a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004552:	4b39      	ldr	r3, [pc, #228]	@ (8004638 <HAL_RCC_ClockConfig+0x1c4>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f023 0203 	bic.w	r2, r3, #3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	4936      	ldr	r1, [pc, #216]	@ (8004638 <HAL_RCC_ClockConfig+0x1c4>)
 8004560:	4313      	orrs	r3, r2
 8004562:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004564:	f7fe ff92 	bl	800348c <HAL_GetTick>
 8004568:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800456a:	e00a      	b.n	8004582 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800456c:	f7fe ff8e 	bl	800348c <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	f241 3288 	movw	r2, #5000	@ 0x1388
 800457a:	4293      	cmp	r3, r2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e053      	b.n	800462a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004582:	4b2d      	ldr	r3, [pc, #180]	@ (8004638 <HAL_RCC_ClockConfig+0x1c4>)
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f003 020c 	and.w	r2, r3, #12
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	429a      	cmp	r2, r3
 8004592:	d1eb      	bne.n	800456c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004594:	4b27      	ldr	r3, [pc, #156]	@ (8004634 <HAL_RCC_ClockConfig+0x1c0>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	683a      	ldr	r2, [r7, #0]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d210      	bcs.n	80045c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045a2:	4b24      	ldr	r3, [pc, #144]	@ (8004634 <HAL_RCC_ClockConfig+0x1c0>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f023 0207 	bic.w	r2, r3, #7
 80045aa:	4922      	ldr	r1, [pc, #136]	@ (8004634 <HAL_RCC_ClockConfig+0x1c0>)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045b2:	4b20      	ldr	r3, [pc, #128]	@ (8004634 <HAL_RCC_ClockConfig+0x1c0>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0307 	and.w	r3, r3, #7
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d001      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e032      	b.n	800462a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0304 	and.w	r3, r3, #4
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d008      	beq.n	80045e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045d0:	4b19      	ldr	r3, [pc, #100]	@ (8004638 <HAL_RCC_ClockConfig+0x1c4>)
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	4916      	ldr	r1, [pc, #88]	@ (8004638 <HAL_RCC_ClockConfig+0x1c4>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0308 	and.w	r3, r3, #8
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d009      	beq.n	8004602 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80045ee:	4b12      	ldr	r3, [pc, #72]	@ (8004638 <HAL_RCC_ClockConfig+0x1c4>)
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	00db      	lsls	r3, r3, #3
 80045fc:	490e      	ldr	r1, [pc, #56]	@ (8004638 <HAL_RCC_ClockConfig+0x1c4>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004602:	f000 f821 	bl	8004648 <HAL_RCC_GetSysClockFreq>
 8004606:	4602      	mov	r2, r0
 8004608:	4b0b      	ldr	r3, [pc, #44]	@ (8004638 <HAL_RCC_ClockConfig+0x1c4>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	091b      	lsrs	r3, r3, #4
 800460e:	f003 030f 	and.w	r3, r3, #15
 8004612:	490a      	ldr	r1, [pc, #40]	@ (800463c <HAL_RCC_ClockConfig+0x1c8>)
 8004614:	5ccb      	ldrb	r3, [r1, r3]
 8004616:	fa22 f303 	lsr.w	r3, r2, r3
 800461a:	4a09      	ldr	r2, [pc, #36]	@ (8004640 <HAL_RCC_ClockConfig+0x1cc>)
 800461c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800461e:	4b09      	ldr	r3, [pc, #36]	@ (8004644 <HAL_RCC_ClockConfig+0x1d0>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4618      	mov	r0, r3
 8004624:	f7fc fefc 	bl	8001420 <HAL_InitTick>

  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3710      	adds	r7, #16
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	40022000 	.word	0x40022000
 8004638:	40021000 	.word	0x40021000
 800463c:	08009724 	.word	0x08009724
 8004640:	200000a4 	.word	0x200000a4
 8004644:	2000014c 	.word	0x2000014c

08004648 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004648:	b480      	push	{r7}
 800464a:	b087      	sub	sp, #28
 800464c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800464e:	2300      	movs	r3, #0
 8004650:	60fb      	str	r3, [r7, #12]
 8004652:	2300      	movs	r3, #0
 8004654:	60bb      	str	r3, [r7, #8]
 8004656:	2300      	movs	r3, #0
 8004658:	617b      	str	r3, [r7, #20]
 800465a:	2300      	movs	r3, #0
 800465c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800465e:	2300      	movs	r3, #0
 8004660:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004662:	4b1e      	ldr	r3, [pc, #120]	@ (80046dc <HAL_RCC_GetSysClockFreq+0x94>)
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f003 030c 	and.w	r3, r3, #12
 800466e:	2b04      	cmp	r3, #4
 8004670:	d002      	beq.n	8004678 <HAL_RCC_GetSysClockFreq+0x30>
 8004672:	2b08      	cmp	r3, #8
 8004674:	d003      	beq.n	800467e <HAL_RCC_GetSysClockFreq+0x36>
 8004676:	e027      	b.n	80046c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004678:	4b19      	ldr	r3, [pc, #100]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800467a:	613b      	str	r3, [r7, #16]
      break;
 800467c:	e027      	b.n	80046ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	0c9b      	lsrs	r3, r3, #18
 8004682:	f003 030f 	and.w	r3, r3, #15
 8004686:	4a17      	ldr	r2, [pc, #92]	@ (80046e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004688:	5cd3      	ldrb	r3, [r2, r3]
 800468a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d010      	beq.n	80046b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004696:	4b11      	ldr	r3, [pc, #68]	@ (80046dc <HAL_RCC_GetSysClockFreq+0x94>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	0c5b      	lsrs	r3, r3, #17
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	4a11      	ldr	r2, [pc, #68]	@ (80046e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80046a2:	5cd3      	ldrb	r3, [r2, r3]
 80046a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a0d      	ldr	r2, [pc, #52]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80046aa:	fb03 f202 	mul.w	r2, r3, r2
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b4:	617b      	str	r3, [r7, #20]
 80046b6:	e004      	b.n	80046c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a0c      	ldr	r2, [pc, #48]	@ (80046ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80046bc:	fb02 f303 	mul.w	r3, r2, r3
 80046c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	613b      	str	r3, [r7, #16]
      break;
 80046c6:	e002      	b.n	80046ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80046c8:	4b05      	ldr	r3, [pc, #20]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80046ca:	613b      	str	r3, [r7, #16]
      break;
 80046cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046ce:	693b      	ldr	r3, [r7, #16]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	371c      	adds	r7, #28
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bc80      	pop	{r7}
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	40021000 	.word	0x40021000
 80046e0:	007a1200 	.word	0x007a1200
 80046e4:	08009780 	.word	0x08009780
 80046e8:	08009790 	.word	0x08009790
 80046ec:	003d0900 	.word	0x003d0900

080046f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046f0:	b480      	push	{r7}
 80046f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046f4:	4b02      	ldr	r3, [pc, #8]	@ (8004700 <HAL_RCC_GetHCLKFreq+0x10>)
 80046f6:	681b      	ldr	r3, [r3, #0]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bc80      	pop	{r7}
 80046fe:	4770      	bx	lr
 8004700:	200000a4 	.word	0x200000a4

08004704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004708:	f7ff fff2 	bl	80046f0 <HAL_RCC_GetHCLKFreq>
 800470c:	4602      	mov	r2, r0
 800470e:	4b05      	ldr	r3, [pc, #20]	@ (8004724 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	0a1b      	lsrs	r3, r3, #8
 8004714:	f003 0307 	and.w	r3, r3, #7
 8004718:	4903      	ldr	r1, [pc, #12]	@ (8004728 <HAL_RCC_GetPCLK1Freq+0x24>)
 800471a:	5ccb      	ldrb	r3, [r1, r3]
 800471c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004720:	4618      	mov	r0, r3
 8004722:	bd80      	pop	{r7, pc}
 8004724:	40021000 	.word	0x40021000
 8004728:	08009734 	.word	0x08009734

0800472c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004730:	f7ff ffde 	bl	80046f0 <HAL_RCC_GetHCLKFreq>
 8004734:	4602      	mov	r2, r0
 8004736:	4b05      	ldr	r3, [pc, #20]	@ (800474c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	0adb      	lsrs	r3, r3, #11
 800473c:	f003 0307 	and.w	r3, r3, #7
 8004740:	4903      	ldr	r1, [pc, #12]	@ (8004750 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004742:	5ccb      	ldrb	r3, [r1, r3]
 8004744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004748:	4618      	mov	r0, r3
 800474a:	bd80      	pop	{r7, pc}
 800474c:	40021000 	.word	0x40021000
 8004750:	08009734 	.word	0x08009734

08004754 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	220f      	movs	r2, #15
 8004762:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004764:	4b11      	ldr	r3, [pc, #68]	@ (80047ac <HAL_RCC_GetClockConfig+0x58>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f003 0203 	and.w	r2, r3, #3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004770:	4b0e      	ldr	r3, [pc, #56]	@ (80047ac <HAL_RCC_GetClockConfig+0x58>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800477c:	4b0b      	ldr	r3, [pc, #44]	@ (80047ac <HAL_RCC_GetClockConfig+0x58>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004788:	4b08      	ldr	r3, [pc, #32]	@ (80047ac <HAL_RCC_GetClockConfig+0x58>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	08db      	lsrs	r3, r3, #3
 800478e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004796:	4b06      	ldr	r3, [pc, #24]	@ (80047b0 <HAL_RCC_GetClockConfig+0x5c>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0207 	and.w	r2, r3, #7
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80047a2:	bf00      	nop
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bc80      	pop	{r7}
 80047aa:	4770      	bx	lr
 80047ac:	40021000 	.word	0x40021000
 80047b0:	40022000 	.word	0x40022000

080047b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80047bc:	4b0a      	ldr	r3, [pc, #40]	@ (80047e8 <RCC_Delay+0x34>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a0a      	ldr	r2, [pc, #40]	@ (80047ec <RCC_Delay+0x38>)
 80047c2:	fba2 2303 	umull	r2, r3, r2, r3
 80047c6:	0a5b      	lsrs	r3, r3, #9
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	fb02 f303 	mul.w	r3, r2, r3
 80047ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80047d0:	bf00      	nop
  }
  while (Delay --);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	1e5a      	subs	r2, r3, #1
 80047d6:	60fa      	str	r2, [r7, #12]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1f9      	bne.n	80047d0 <RCC_Delay+0x1c>
}
 80047dc:	bf00      	nop
 80047de:	bf00      	nop
 80047e0:	3714      	adds	r7, #20
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bc80      	pop	{r7}
 80047e6:	4770      	bx	lr
 80047e8:	200000a4 	.word	0x200000a4
 80047ec:	10624dd3 	.word	0x10624dd3

080047f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e041      	b.n	8004886 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b00      	cmp	r3, #0
 800480c:	d106      	bne.n	800481c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f839 	bl	800488e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2202      	movs	r2, #2
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	3304      	adds	r3, #4
 800482c:	4619      	mov	r1, r3
 800482e:	4610      	mov	r0, r2
 8004830:	f000 f99c 	bl	8004b6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3708      	adds	r7, #8
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800488e:	b480      	push	{r7}
 8004890:	b083      	sub	sp, #12
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004896:	bf00      	nop
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	bc80      	pop	{r7}
 800489e:	4770      	bx	lr

080048a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d001      	beq.n	80048b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e03a      	b.n	800492e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2202      	movs	r2, #2
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68da      	ldr	r2, [r3, #12]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 0201 	orr.w	r2, r2, #1
 80048ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a18      	ldr	r2, [pc, #96]	@ (8004938 <HAL_TIM_Base_Start_IT+0x98>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d00e      	beq.n	80048f8 <HAL_TIM_Base_Start_IT+0x58>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048e2:	d009      	beq.n	80048f8 <HAL_TIM_Base_Start_IT+0x58>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a14      	ldr	r2, [pc, #80]	@ (800493c <HAL_TIM_Base_Start_IT+0x9c>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d004      	beq.n	80048f8 <HAL_TIM_Base_Start_IT+0x58>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a13      	ldr	r2, [pc, #76]	@ (8004940 <HAL_TIM_Base_Start_IT+0xa0>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d111      	bne.n	800491c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f003 0307 	and.w	r3, r3, #7
 8004902:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2b06      	cmp	r3, #6
 8004908:	d010      	beq.n	800492c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f042 0201 	orr.w	r2, r2, #1
 8004918:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800491a:	e007      	b.n	800492c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f042 0201 	orr.w	r2, r2, #1
 800492a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	bc80      	pop	{r7}
 8004936:	4770      	bx	lr
 8004938:	40012c00 	.word	0x40012c00
 800493c:	40000400 	.word	0x40000400
 8004940:	40000800 	.word	0x40000800

08004944 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d020      	beq.n	80049a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d01b      	beq.n	80049a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f06f 0202 	mvn.w	r2, #2
 8004978:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	f003 0303 	and.w	r3, r3, #3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f8d1 	bl	8004b36 <HAL_TIM_IC_CaptureCallback>
 8004994:	e005      	b.n	80049a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f8c4 	bl	8004b24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 f8d3 	bl	8004b48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	f003 0304 	and.w	r3, r3, #4
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d020      	beq.n	80049f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d01b      	beq.n	80049f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f06f 0204 	mvn.w	r2, #4
 80049c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2202      	movs	r2, #2
 80049ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f8ab 	bl	8004b36 <HAL_TIM_IC_CaptureCallback>
 80049e0:	e005      	b.n	80049ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f89e 	bl	8004b24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 f8ad 	bl	8004b48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	f003 0308 	and.w	r3, r3, #8
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d020      	beq.n	8004a40 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f003 0308 	and.w	r3, r3, #8
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d01b      	beq.n	8004a40 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f06f 0208 	mvn.w	r2, #8
 8004a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2204      	movs	r2, #4
 8004a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	f003 0303 	and.w	r3, r3, #3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f885 	bl	8004b36 <HAL_TIM_IC_CaptureCallback>
 8004a2c:	e005      	b.n	8004a3a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f878 	bl	8004b24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 f887 	bl	8004b48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	f003 0310 	and.w	r3, r3, #16
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d020      	beq.n	8004a8c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f003 0310 	and.w	r3, r3, #16
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d01b      	beq.n	8004a8c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f06f 0210 	mvn.w	r2, #16
 8004a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2208      	movs	r2, #8
 8004a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	69db      	ldr	r3, [r3, #28]
 8004a6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d003      	beq.n	8004a7a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f85f 	bl	8004b36 <HAL_TIM_IC_CaptureCallback>
 8004a78:	e005      	b.n	8004a86 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f852 	bl	8004b24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 f861 	bl	8004b48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00c      	beq.n	8004ab0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d007      	beq.n	8004ab0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f06f 0201 	mvn.w	r2, #1
 8004aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7fc fbdc 	bl	8001268 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00c      	beq.n	8004ad4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d007      	beq.n	8004ad4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f8c3 	bl	8004c5a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00c      	beq.n	8004af8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d007      	beq.n	8004af8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f831 	bl	8004b5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	f003 0320 	and.w	r3, r3, #32
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00c      	beq.n	8004b1c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f003 0320 	and.w	r3, r3, #32
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d007      	beq.n	8004b1c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f06f 0220 	mvn.w	r2, #32
 8004b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f896 	bl	8004c48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b1c:	bf00      	nop
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b2c:	bf00      	nop
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bc80      	pop	{r7}
 8004b34:	4770      	bx	lr

08004b36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b3e:	bf00      	nop
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bc80      	pop	{r7}
 8004b46:	4770      	bx	lr

08004b48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bc80      	pop	{r7}
 8004b58:	4770      	bx	lr

08004b5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b083      	sub	sp, #12
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b62:	bf00      	nop
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bc80      	pop	{r7}
 8004b6a:	4770      	bx	lr

08004b6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a2f      	ldr	r2, [pc, #188]	@ (8004c3c <TIM_Base_SetConfig+0xd0>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d00b      	beq.n	8004b9c <TIM_Base_SetConfig+0x30>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b8a:	d007      	beq.n	8004b9c <TIM_Base_SetConfig+0x30>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a2c      	ldr	r2, [pc, #176]	@ (8004c40 <TIM_Base_SetConfig+0xd4>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d003      	beq.n	8004b9c <TIM_Base_SetConfig+0x30>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a2b      	ldr	r2, [pc, #172]	@ (8004c44 <TIM_Base_SetConfig+0xd8>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d108      	bne.n	8004bae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ba2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a22      	ldr	r2, [pc, #136]	@ (8004c3c <TIM_Base_SetConfig+0xd0>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d00b      	beq.n	8004bce <TIM_Base_SetConfig+0x62>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bbc:	d007      	beq.n	8004bce <TIM_Base_SetConfig+0x62>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a1f      	ldr	r2, [pc, #124]	@ (8004c40 <TIM_Base_SetConfig+0xd4>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d003      	beq.n	8004bce <TIM_Base_SetConfig+0x62>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a1e      	ldr	r2, [pc, #120]	@ (8004c44 <TIM_Base_SetConfig+0xd8>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d108      	bne.n	8004be0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	689a      	ldr	r2, [r3, #8]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a0d      	ldr	r2, [pc, #52]	@ (8004c3c <TIM_Base_SetConfig+0xd0>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d103      	bne.n	8004c14 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	691a      	ldr	r2, [r3, #16]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d005      	beq.n	8004c32 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	f023 0201 	bic.w	r2, r3, #1
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	611a      	str	r2, [r3, #16]
  }
}
 8004c32:	bf00      	nop
 8004c34:	3714      	adds	r7, #20
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bc80      	pop	{r7}
 8004c3a:	4770      	bx	lr
 8004c3c:	40012c00 	.word	0x40012c00
 8004c40:	40000400 	.word	0x40000400
 8004c44:	40000800 	.word	0x40000800

08004c48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bc80      	pop	{r7}
 8004c58:	4770      	bx	lr

08004c5a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b083      	sub	sp, #12
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c62:	bf00      	nop
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bc80      	pop	{r7}
 8004c6a:	4770      	bx	lr

08004c6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e042      	b.n	8004d04 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d106      	bne.n	8004c98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7fc fb38 	bl	8001308 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2224      	movs	r2, #36	@ 0x24
 8004c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68da      	ldr	r2, [r3, #12]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004cae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 fdb7 	bl	8005824 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	691a      	ldr	r2, [r3, #16]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004cc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	695a      	ldr	r2, [r3, #20]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004cd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68da      	ldr	r2, [r3, #12]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ce4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3708      	adds	r7, #8
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b08a      	sub	sp, #40	@ 0x28
 8004d10:	af02      	add	r7, sp, #8
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	603b      	str	r3, [r7, #0]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	2b20      	cmp	r3, #32
 8004d2a:	d175      	bne.n	8004e18 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <HAL_UART_Transmit+0x2c>
 8004d32:	88fb      	ldrh	r3, [r7, #6]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e06e      	b.n	8004e1a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2221      	movs	r2, #33	@ 0x21
 8004d46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d4a:	f7fe fb9f 	bl	800348c <HAL_GetTick>
 8004d4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	88fa      	ldrh	r2, [r7, #6]
 8004d54:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	88fa      	ldrh	r2, [r7, #6]
 8004d5a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d64:	d108      	bne.n	8004d78 <HAL_UART_Transmit+0x6c>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d104      	bne.n	8004d78 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	61bb      	str	r3, [r7, #24]
 8004d76:	e003      	b.n	8004d80 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d80:	e02e      	b.n	8004de0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	2180      	movs	r1, #128	@ 0x80
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f000 fb1c 	bl	80053ca <UART_WaitOnFlagUntilTimeout>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d005      	beq.n	8004da4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e03a      	b.n	8004e1a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10b      	bne.n	8004dc2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	881b      	ldrh	r3, [r3, #0]
 8004dae:	461a      	mov	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004db8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	3302      	adds	r3, #2
 8004dbe:	61bb      	str	r3, [r7, #24]
 8004dc0:	e007      	b.n	8004dd2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	781a      	ldrb	r2, [r3, #0]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1cb      	bne.n	8004d82 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	2200      	movs	r2, #0
 8004df2:	2140      	movs	r1, #64	@ 0x40
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f000 fae8 	bl	80053ca <UART_WaitOnFlagUntilTimeout>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d005      	beq.n	8004e0c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2220      	movs	r2, #32
 8004e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e006      	b.n	8004e1a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004e14:	2300      	movs	r3, #0
 8004e16:	e000      	b.n	8004e1a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004e18:	2302      	movs	r3, #2
  }
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3720      	adds	r7, #32
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b084      	sub	sp, #16
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	60f8      	str	r0, [r7, #12]
 8004e2a:	60b9      	str	r1, [r7, #8]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	2b20      	cmp	r3, #32
 8004e3a:	d112      	bne.n	8004e62 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d002      	beq.n	8004e48 <HAL_UART_Receive_IT+0x26>
 8004e42:	88fb      	ldrh	r3, [r7, #6]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d101      	bne.n	8004e4c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e00b      	b.n	8004e64 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004e52:	88fb      	ldrh	r3, [r7, #6]
 8004e54:	461a      	mov	r2, r3
 8004e56:	68b9      	ldr	r1, [r7, #8]
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f000 fb0f 	bl	800547c <UART_Start_Receive_IT>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	e000      	b.n	8004e64 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004e62:	2302      	movs	r3, #2
  }
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b0ba      	sub	sp, #232	@ 0xe8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004e92:	2300      	movs	r3, #0
 8004e94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ea2:	f003 030f 	and.w	r3, r3, #15
 8004ea6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004eaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10f      	bne.n	8004ed2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eb6:	f003 0320 	and.w	r3, r3, #32
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d009      	beq.n	8004ed2 <HAL_UART_IRQHandler+0x66>
 8004ebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ec2:	f003 0320 	and.w	r3, r3, #32
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d003      	beq.n	8004ed2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 fbec 	bl	80056a8 <UART_Receive_IT>
      return;
 8004ed0:	e25b      	b.n	800538a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004ed2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	f000 80de 	beq.w	8005098 <HAL_UART_IRQHandler+0x22c>
 8004edc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d106      	bne.n	8004ef6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004eec:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f000 80d1 	beq.w	8005098 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00b      	beq.n	8004f1a <HAL_UART_IRQHandler+0xae>
 8004f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d005      	beq.n	8004f1a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f12:	f043 0201 	orr.w	r2, r3, #1
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f1e:	f003 0304 	and.w	r3, r3, #4
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00b      	beq.n	8004f3e <HAL_UART_IRQHandler+0xd2>
 8004f26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d005      	beq.n	8004f3e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f36:	f043 0202 	orr.w	r2, r3, #2
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00b      	beq.n	8004f62 <HAL_UART_IRQHandler+0xf6>
 8004f4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d005      	beq.n	8004f62 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f5a:	f043 0204 	orr.w	r2, r3, #4
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f66:	f003 0308 	and.w	r3, r3, #8
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d011      	beq.n	8004f92 <HAL_UART_IRQHandler+0x126>
 8004f6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f72:	f003 0320 	and.w	r3, r3, #32
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d105      	bne.n	8004f86 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d005      	beq.n	8004f92 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f8a:	f043 0208 	orr.w	r2, r3, #8
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f000 81f2 	beq.w	8005380 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fa0:	f003 0320 	and.w	r3, r3, #32
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d008      	beq.n	8004fba <HAL_UART_IRQHandler+0x14e>
 8004fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fac:	f003 0320 	and.w	r3, r3, #32
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d002      	beq.n	8004fba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 fb77 	bl	80056a8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	bf14      	ite	ne
 8004fc8:	2301      	movne	r3, #1
 8004fca:	2300      	moveq	r3, #0
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fd6:	f003 0308 	and.w	r3, r3, #8
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d103      	bne.n	8004fe6 <HAL_UART_IRQHandler+0x17a>
 8004fde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d04f      	beq.n	8005086 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 fa81 	bl	80054ee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d041      	beq.n	800507e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	3314      	adds	r3, #20
 8005000:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005004:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005008:	e853 3f00 	ldrex	r3, [r3]
 800500c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005010:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005014:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005018:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	3314      	adds	r3, #20
 8005022:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005026:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800502a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005032:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005036:	e841 2300 	strex	r3, r2, [r1]
 800503a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800503e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1d9      	bne.n	8004ffa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800504a:	2b00      	cmp	r3, #0
 800504c:	d013      	beq.n	8005076 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005052:	4a7e      	ldr	r2, [pc, #504]	@ (800524c <HAL_UART_IRQHandler+0x3e0>)
 8005054:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800505a:	4618      	mov	r0, r3
 800505c:	f7fe fb3a 	bl	80036d4 <HAL_DMA_Abort_IT>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d016      	beq.n	8005094 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800506a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005070:	4610      	mov	r0, r2
 8005072:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005074:	e00e      	b.n	8005094 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f993 	bl	80053a2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800507c:	e00a      	b.n	8005094 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 f98f 	bl	80053a2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005084:	e006      	b.n	8005094 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 f98b 	bl	80053a2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005092:	e175      	b.n	8005380 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005094:	bf00      	nop
    return;
 8005096:	e173      	b.n	8005380 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800509c:	2b01      	cmp	r3, #1
 800509e:	f040 814f 	bne.w	8005340 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80050a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050a6:	f003 0310 	and.w	r3, r3, #16
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	f000 8148 	beq.w	8005340 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80050b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050b4:	f003 0310 	and.w	r3, r3, #16
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f000 8141 	beq.w	8005340 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050be:	2300      	movs	r3, #0
 80050c0:	60bb      	str	r3, [r7, #8]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	60bb      	str	r3, [r7, #8]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	60bb      	str	r3, [r7, #8]
 80050d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050de:	2b00      	cmp	r3, #0
 80050e0:	f000 80b6 	beq.w	8005250 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f000 8145 	beq.w	8005384 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80050fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005102:	429a      	cmp	r2, r3
 8005104:	f080 813e 	bcs.w	8005384 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800510e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	2b20      	cmp	r3, #32
 8005118:	f000 8088 	beq.w	800522c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	330c      	adds	r3, #12
 8005122:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005126:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800512a:	e853 3f00 	ldrex	r3, [r3]
 800512e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005132:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005136:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800513a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	330c      	adds	r3, #12
 8005144:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005148:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800514c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005150:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005154:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005158:	e841 2300 	strex	r3, r2, [r1]
 800515c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005160:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1d9      	bne.n	800511c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	3314      	adds	r3, #20
 800516e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005170:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005172:	e853 3f00 	ldrex	r3, [r3]
 8005176:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005178:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800517a:	f023 0301 	bic.w	r3, r3, #1
 800517e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	3314      	adds	r3, #20
 8005188:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800518c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005190:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005192:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005194:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005198:	e841 2300 	strex	r3, r2, [r1]
 800519c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800519e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d1e1      	bne.n	8005168 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	3314      	adds	r3, #20
 80051aa:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80051ae:	e853 3f00 	ldrex	r3, [r3]
 80051b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80051b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	3314      	adds	r3, #20
 80051c4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80051c8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80051ca:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051cc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80051ce:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80051d0:	e841 2300 	strex	r3, r2, [r1]
 80051d4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80051d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1e3      	bne.n	80051a4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2220      	movs	r2, #32
 80051e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	330c      	adds	r3, #12
 80051f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051f4:	e853 3f00 	ldrex	r3, [r3]
 80051f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80051fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051fc:	f023 0310 	bic.w	r3, r3, #16
 8005200:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	330c      	adds	r3, #12
 800520a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800520e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005210:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005212:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005214:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005216:	e841 2300 	strex	r3, r2, [r1]
 800521a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800521c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1e3      	bne.n	80051ea <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005226:	4618      	mov	r0, r3
 8005228:	f7fe fa19 	bl	800365e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2202      	movs	r2, #2
 8005230:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800523a:	b29b      	uxth	r3, r3
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	b29b      	uxth	r3, r3
 8005240:	4619      	mov	r1, r3
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f8b6 	bl	80053b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005248:	e09c      	b.n	8005384 <HAL_UART_IRQHandler+0x518>
 800524a:	bf00      	nop
 800524c:	080055b3 	.word	0x080055b3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005258:	b29b      	uxth	r3, r3
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005264:	b29b      	uxth	r3, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	f000 808e 	beq.w	8005388 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800526c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 8089 	beq.w	8005388 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	330c      	adds	r3, #12
 800527c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005280:	e853 3f00 	ldrex	r3, [r3]
 8005284:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005288:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800528c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	330c      	adds	r3, #12
 8005296:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800529a:	647a      	str	r2, [r7, #68]	@ 0x44
 800529c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80052a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052a2:	e841 2300 	strex	r3, r2, [r1]
 80052a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80052a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1e3      	bne.n	8005276 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	3314      	adds	r3, #20
 80052b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b8:	e853 3f00 	ldrex	r3, [r3]
 80052bc:	623b      	str	r3, [r7, #32]
   return(result);
 80052be:	6a3b      	ldr	r3, [r7, #32]
 80052c0:	f023 0301 	bic.w	r3, r3, #1
 80052c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	3314      	adds	r3, #20
 80052ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80052d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80052d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052da:	e841 2300 	strex	r3, r2, [r1]
 80052de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1e3      	bne.n	80052ae <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2220      	movs	r2, #32
 80052ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	330c      	adds	r3, #12
 80052fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	e853 3f00 	ldrex	r3, [r3]
 8005302:	60fb      	str	r3, [r7, #12]
   return(result);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f023 0310 	bic.w	r3, r3, #16
 800530a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	330c      	adds	r3, #12
 8005314:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005318:	61fa      	str	r2, [r7, #28]
 800531a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531c:	69b9      	ldr	r1, [r7, #24]
 800531e:	69fa      	ldr	r2, [r7, #28]
 8005320:	e841 2300 	strex	r3, r2, [r1]
 8005324:	617b      	str	r3, [r7, #20]
   return(result);
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1e3      	bne.n	80052f4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2202      	movs	r2, #2
 8005330:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005332:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005336:	4619      	mov	r1, r3
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 f83b 	bl	80053b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800533e:	e023      	b.n	8005388 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005344:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005348:	2b00      	cmp	r3, #0
 800534a:	d009      	beq.n	8005360 <HAL_UART_IRQHandler+0x4f4>
 800534c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005350:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005354:	2b00      	cmp	r3, #0
 8005356:	d003      	beq.n	8005360 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 f93e 	bl	80055da <UART_Transmit_IT>
    return;
 800535e:	e014      	b.n	800538a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00e      	beq.n	800538a <HAL_UART_IRQHandler+0x51e>
 800536c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005374:	2b00      	cmp	r3, #0
 8005376:	d008      	beq.n	800538a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 f97d 	bl	8005678 <UART_EndTransmit_IT>
    return;
 800537e:	e004      	b.n	800538a <HAL_UART_IRQHandler+0x51e>
    return;
 8005380:	bf00      	nop
 8005382:	e002      	b.n	800538a <HAL_UART_IRQHandler+0x51e>
      return;
 8005384:	bf00      	nop
 8005386:	e000      	b.n	800538a <HAL_UART_IRQHandler+0x51e>
      return;
 8005388:	bf00      	nop
  }
}
 800538a:	37e8      	adds	r7, #232	@ 0xe8
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	bc80      	pop	{r7}
 80053a0:	4770      	bx	lr

080053a2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b083      	sub	sp, #12
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80053aa:	bf00      	nop
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bc80      	pop	{r7}
 80053b2:	4770      	bx	lr

080053b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	460b      	mov	r3, r1
 80053be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bc80      	pop	{r7}
 80053c8:	4770      	bx	lr

080053ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b086      	sub	sp, #24
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	60f8      	str	r0, [r7, #12]
 80053d2:	60b9      	str	r1, [r7, #8]
 80053d4:	603b      	str	r3, [r7, #0]
 80053d6:	4613      	mov	r3, r2
 80053d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053da:	e03b      	b.n	8005454 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053dc:	6a3b      	ldr	r3, [r7, #32]
 80053de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e2:	d037      	beq.n	8005454 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053e4:	f7fe f852 	bl	800348c <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	6a3a      	ldr	r2, [r7, #32]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d302      	bcc.n	80053fa <UART_WaitOnFlagUntilTimeout+0x30>
 80053f4:	6a3b      	ldr	r3, [r7, #32]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d101      	bne.n	80053fe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e03a      	b.n	8005474 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	f003 0304 	and.w	r3, r3, #4
 8005408:	2b00      	cmp	r3, #0
 800540a:	d023      	beq.n	8005454 <UART_WaitOnFlagUntilTimeout+0x8a>
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	2b80      	cmp	r3, #128	@ 0x80
 8005410:	d020      	beq.n	8005454 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	2b40      	cmp	r3, #64	@ 0x40
 8005416:	d01d      	beq.n	8005454 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0308 	and.w	r3, r3, #8
 8005422:	2b08      	cmp	r3, #8
 8005424:	d116      	bne.n	8005454 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005426:	2300      	movs	r3, #0
 8005428:	617b      	str	r3, [r7, #20]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	617b      	str	r3, [r7, #20]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	617b      	str	r3, [r7, #20]
 800543a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	f000 f856 	bl	80054ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2208      	movs	r2, #8
 8005446:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e00f      	b.n	8005474 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	4013      	ands	r3, r2
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	429a      	cmp	r2, r3
 8005462:	bf0c      	ite	eq
 8005464:	2301      	moveq	r3, #1
 8005466:	2300      	movne	r3, #0
 8005468:	b2db      	uxtb	r3, r3
 800546a:	461a      	mov	r2, r3
 800546c:	79fb      	ldrb	r3, [r7, #7]
 800546e:	429a      	cmp	r2, r3
 8005470:	d0b4      	beq.n	80053dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3718      	adds	r7, #24
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	4613      	mov	r3, r2
 8005488:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	88fa      	ldrh	r2, [r7, #6]
 8005494:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	88fa      	ldrh	r2, [r7, #6]
 800549a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2222      	movs	r2, #34	@ 0x22
 80054a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d007      	beq.n	80054c2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68da      	ldr	r2, [r3, #12]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054c0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	695a      	ldr	r2, [r3, #20]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f042 0201 	orr.w	r2, r2, #1
 80054d0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68da      	ldr	r2, [r3, #12]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f042 0220 	orr.w	r2, r2, #32
 80054e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3714      	adds	r7, #20
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bc80      	pop	{r7}
 80054ec:	4770      	bx	lr

080054ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b095      	sub	sp, #84	@ 0x54
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	330c      	adds	r3, #12
 80054fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005500:	e853 3f00 	ldrex	r3, [r3]
 8005504:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005508:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800550c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	330c      	adds	r3, #12
 8005514:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005516:	643a      	str	r2, [r7, #64]	@ 0x40
 8005518:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800551c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800551e:	e841 2300 	strex	r3, r2, [r1]
 8005522:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1e5      	bne.n	80054f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	3314      	adds	r3, #20
 8005530:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005532:	6a3b      	ldr	r3, [r7, #32]
 8005534:	e853 3f00 	ldrex	r3, [r3]
 8005538:	61fb      	str	r3, [r7, #28]
   return(result);
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	f023 0301 	bic.w	r3, r3, #1
 8005540:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	3314      	adds	r3, #20
 8005548:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800554a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800554c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005550:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005552:	e841 2300 	strex	r3, r2, [r1]
 8005556:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1e5      	bne.n	800552a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005562:	2b01      	cmp	r3, #1
 8005564:	d119      	bne.n	800559a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	330c      	adds	r3, #12
 800556c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	e853 3f00 	ldrex	r3, [r3]
 8005574:	60bb      	str	r3, [r7, #8]
   return(result);
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	f023 0310 	bic.w	r3, r3, #16
 800557c:	647b      	str	r3, [r7, #68]	@ 0x44
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	330c      	adds	r3, #12
 8005584:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005586:	61ba      	str	r2, [r7, #24]
 8005588:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558a:	6979      	ldr	r1, [r7, #20]
 800558c:	69ba      	ldr	r2, [r7, #24]
 800558e:	e841 2300 	strex	r3, r2, [r1]
 8005592:	613b      	str	r3, [r7, #16]
   return(result);
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1e5      	bne.n	8005566 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2220      	movs	r2, #32
 800559e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80055a8:	bf00      	nop
 80055aa:	3754      	adds	r7, #84	@ 0x54
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bc80      	pop	{r7}
 80055b0:	4770      	bx	lr

080055b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b084      	sub	sp, #16
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f7ff fee8 	bl	80053a2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055d2:	bf00      	nop
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80055da:	b480      	push	{r7}
 80055dc:	b085      	sub	sp, #20
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b21      	cmp	r3, #33	@ 0x21
 80055ec:	d13e      	bne.n	800566c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055f6:	d114      	bne.n	8005622 <UART_Transmit_IT+0x48>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d110      	bne.n	8005622 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a1b      	ldr	r3, [r3, #32]
 8005604:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	881b      	ldrh	r3, [r3, #0]
 800560a:	461a      	mov	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005614:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	1c9a      	adds	r2, r3, #2
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	621a      	str	r2, [r3, #32]
 8005620:	e008      	b.n	8005634 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	1c59      	adds	r1, r3, #1
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	6211      	str	r1, [r2, #32]
 800562c:	781a      	ldrb	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005638:	b29b      	uxth	r3, r3
 800563a:	3b01      	subs	r3, #1
 800563c:	b29b      	uxth	r3, r3
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	4619      	mov	r1, r3
 8005642:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10f      	bne.n	8005668 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68da      	ldr	r2, [r3, #12]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005656:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68da      	ldr	r2, [r3, #12]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005666:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005668:	2300      	movs	r3, #0
 800566a:	e000      	b.n	800566e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800566c:	2302      	movs	r3, #2
  }
}
 800566e:	4618      	mov	r0, r3
 8005670:	3714      	adds	r7, #20
 8005672:	46bd      	mov	sp, r7
 8005674:	bc80      	pop	{r7}
 8005676:	4770      	bx	lr

08005678 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68da      	ldr	r2, [r3, #12]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800568e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2220      	movs	r2, #32
 8005694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f7ff fe79 	bl	8005390 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3708      	adds	r7, #8
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b08c      	sub	sp, #48	@ 0x30
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b22      	cmp	r3, #34	@ 0x22
 80056ba:	f040 80ae 	bne.w	800581a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056c6:	d117      	bne.n	80056f8 <UART_Receive_IT+0x50>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d113      	bne.n	80056f8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80056d0:	2300      	movs	r3, #0
 80056d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f0:	1c9a      	adds	r2, r3, #2
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80056f6:	e026      	b.n	8005746 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80056fe:	2300      	movs	r3, #0
 8005700:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800570a:	d007      	beq.n	800571c <UART_Receive_IT+0x74>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d10a      	bne.n	800572a <UART_Receive_IT+0x82>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d106      	bne.n	800572a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	b2da      	uxtb	r2, r3
 8005724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005726:	701a      	strb	r2, [r3, #0]
 8005728:	e008      	b.n	800573c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	b2db      	uxtb	r3, r3
 8005732:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005736:	b2da      	uxtb	r2, r3
 8005738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800573a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005740:	1c5a      	adds	r2, r3, #1
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800574a:	b29b      	uxth	r3, r3
 800574c:	3b01      	subs	r3, #1
 800574e:	b29b      	uxth	r3, r3
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	4619      	mov	r1, r3
 8005754:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005756:	2b00      	cmp	r3, #0
 8005758:	d15d      	bne.n	8005816 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68da      	ldr	r2, [r3, #12]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f022 0220 	bic.w	r2, r2, #32
 8005768:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68da      	ldr	r2, [r3, #12]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005778:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	695a      	ldr	r2, [r3, #20]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f022 0201 	bic.w	r2, r2, #1
 8005788:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2220      	movs	r2, #32
 800578e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800579c:	2b01      	cmp	r3, #1
 800579e:	d135      	bne.n	800580c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	330c      	adds	r3, #12
 80057ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	e853 3f00 	ldrex	r3, [r3]
 80057b4:	613b      	str	r3, [r7, #16]
   return(result);
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	f023 0310 	bic.w	r3, r3, #16
 80057bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	330c      	adds	r3, #12
 80057c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057c6:	623a      	str	r2, [r7, #32]
 80057c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ca:	69f9      	ldr	r1, [r7, #28]
 80057cc:	6a3a      	ldr	r2, [r7, #32]
 80057ce:	e841 2300 	strex	r3, r2, [r1]
 80057d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1e5      	bne.n	80057a6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0310 	and.w	r3, r3, #16
 80057e4:	2b10      	cmp	r3, #16
 80057e6:	d10a      	bne.n	80057fe <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80057e8:	2300      	movs	r3, #0
 80057ea:	60fb      	str	r3, [r7, #12]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	60fb      	str	r3, [r7, #12]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	60fb      	str	r3, [r7, #12]
 80057fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005802:	4619      	mov	r1, r3
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f7ff fdd5 	bl	80053b4 <HAL_UARTEx_RxEventCallback>
 800580a:	e002      	b.n	8005812 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f7fb f923 	bl	8000a58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005812:	2300      	movs	r3, #0
 8005814:	e002      	b.n	800581c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005816:	2300      	movs	r3, #0
 8005818:	e000      	b.n	800581c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800581a:	2302      	movs	r3, #2
  }
}
 800581c:	4618      	mov	r0, r3
 800581e:	3730      	adds	r7, #48	@ 0x30
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68da      	ldr	r2, [r3, #12]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	430a      	orrs	r2, r1
 8005840:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	689a      	ldr	r2, [r3, #8]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	431a      	orrs	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	695b      	ldr	r3, [r3, #20]
 8005850:	4313      	orrs	r3, r2
 8005852:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800585e:	f023 030c 	bic.w	r3, r3, #12
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	6812      	ldr	r2, [r2, #0]
 8005866:	68b9      	ldr	r1, [r7, #8]
 8005868:	430b      	orrs	r3, r1
 800586a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	699a      	ldr	r2, [r3, #24]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	430a      	orrs	r2, r1
 8005880:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a2c      	ldr	r2, [pc, #176]	@ (8005938 <UART_SetConfig+0x114>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d103      	bne.n	8005894 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800588c:	f7fe ff4e 	bl	800472c <HAL_RCC_GetPCLK2Freq>
 8005890:	60f8      	str	r0, [r7, #12]
 8005892:	e002      	b.n	800589a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005894:	f7fe ff36 	bl	8004704 <HAL_RCC_GetPCLK1Freq>
 8005898:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	4613      	mov	r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	4413      	add	r3, r2
 80058a2:	009a      	lsls	r2, r3, #2
 80058a4:	441a      	add	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b0:	4a22      	ldr	r2, [pc, #136]	@ (800593c <UART_SetConfig+0x118>)
 80058b2:	fba2 2303 	umull	r2, r3, r2, r3
 80058b6:	095b      	lsrs	r3, r3, #5
 80058b8:	0119      	lsls	r1, r3, #4
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	4613      	mov	r3, r2
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	4413      	add	r3, r2
 80058c2:	009a      	lsls	r2, r3, #2
 80058c4:	441a      	add	r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80058d0:	4b1a      	ldr	r3, [pc, #104]	@ (800593c <UART_SetConfig+0x118>)
 80058d2:	fba3 0302 	umull	r0, r3, r3, r2
 80058d6:	095b      	lsrs	r3, r3, #5
 80058d8:	2064      	movs	r0, #100	@ 0x64
 80058da:	fb00 f303 	mul.w	r3, r0, r3
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	011b      	lsls	r3, r3, #4
 80058e2:	3332      	adds	r3, #50	@ 0x32
 80058e4:	4a15      	ldr	r2, [pc, #84]	@ (800593c <UART_SetConfig+0x118>)
 80058e6:	fba2 2303 	umull	r2, r3, r2, r3
 80058ea:	095b      	lsrs	r3, r3, #5
 80058ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80058f0:	4419      	add	r1, r3
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	4613      	mov	r3, r2
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	4413      	add	r3, r2
 80058fa:	009a      	lsls	r2, r3, #2
 80058fc:	441a      	add	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	fbb2 f2f3 	udiv	r2, r2, r3
 8005908:	4b0c      	ldr	r3, [pc, #48]	@ (800593c <UART_SetConfig+0x118>)
 800590a:	fba3 0302 	umull	r0, r3, r3, r2
 800590e:	095b      	lsrs	r3, r3, #5
 8005910:	2064      	movs	r0, #100	@ 0x64
 8005912:	fb00 f303 	mul.w	r3, r0, r3
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	011b      	lsls	r3, r3, #4
 800591a:	3332      	adds	r3, #50	@ 0x32
 800591c:	4a07      	ldr	r2, [pc, #28]	@ (800593c <UART_SetConfig+0x118>)
 800591e:	fba2 2303 	umull	r2, r3, r2, r3
 8005922:	095b      	lsrs	r3, r3, #5
 8005924:	f003 020f 	and.w	r2, r3, #15
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	440a      	add	r2, r1
 800592e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005930:	bf00      	nop
 8005932:	3710      	adds	r7, #16
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	40013800 	.word	0x40013800
 800593c:	51eb851f 	.word	0x51eb851f

08005940 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	4603      	mov	r3, r0
 8005948:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800594a:	2300      	movs	r3, #0
 800594c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800594e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005952:	2b84      	cmp	r3, #132	@ 0x84
 8005954:	d005      	beq.n	8005962 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005956:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	4413      	add	r3, r2
 800595e:	3303      	adds	r3, #3
 8005960:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005962:	68fb      	ldr	r3, [r7, #12]
}
 8005964:	4618      	mov	r0, r3
 8005966:	3714      	adds	r7, #20
 8005968:	46bd      	mov	sp, r7
 800596a:	bc80      	pop	{r7}
 800596c:	4770      	bx	lr

0800596e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800596e:	b480      	push	{r7}
 8005970:	b083      	sub	sp, #12
 8005972:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005974:	f3ef 8305 	mrs	r3, IPSR
 8005978:	607b      	str	r3, [r7, #4]
  return(result);
 800597a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800597c:	2b00      	cmp	r3, #0
 800597e:	bf14      	ite	ne
 8005980:	2301      	movne	r3, #1
 8005982:	2300      	moveq	r3, #0
 8005984:	b2db      	uxtb	r3, r3
}
 8005986:	4618      	mov	r0, r3
 8005988:	370c      	adds	r7, #12
 800598a:	46bd      	mov	sp, r7
 800598c:	bc80      	pop	{r7}
 800598e:	4770      	bx	lr

08005990 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005994:	f001 f866 	bl	8006a64 <vTaskStartScheduler>
  
  return osOK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	bd80      	pop	{r7, pc}

0800599e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800599e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059a0:	b089      	sub	sp, #36	@ 0x24
 80059a2:	af04      	add	r7, sp, #16
 80059a4:	6078      	str	r0, [r7, #4]
 80059a6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	695b      	ldr	r3, [r3, #20]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d020      	beq.n	80059f2 <osThreadCreate+0x54>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d01c      	beq.n	80059f2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685c      	ldr	r4, [r3, #4]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	691e      	ldr	r6, [r3, #16]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7ff ffb8 	bl	8005940 <makeFreeRtosPriority>
 80059d0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059da:	9202      	str	r2, [sp, #8]
 80059dc:	9301      	str	r3, [sp, #4]
 80059de:	9100      	str	r1, [sp, #0]
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	4632      	mov	r2, r6
 80059e4:	4629      	mov	r1, r5
 80059e6:	4620      	mov	r0, r4
 80059e8:	f000 fe56 	bl	8006698 <xTaskCreateStatic>
 80059ec:	4603      	mov	r3, r0
 80059ee:	60fb      	str	r3, [r7, #12]
 80059f0:	e01c      	b.n	8005a2c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685c      	ldr	r4, [r3, #4]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059fe:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7ff ff9a 	bl	8005940 <makeFreeRtosPriority>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	f107 030c 	add.w	r3, r7, #12
 8005a12:	9301      	str	r3, [sp, #4]
 8005a14:	9200      	str	r2, [sp, #0]
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	4632      	mov	r2, r6
 8005a1a:	4629      	mov	r1, r5
 8005a1c:	4620      	mov	r0, r4
 8005a1e:	f000 fe9b 	bl	8006758 <xTaskCreate>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d001      	beq.n	8005a2c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	e000      	b.n	8005a2e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3714      	adds	r7, #20
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a36 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b084      	sub	sp, #16
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d001      	beq.n	8005a4c <osDelay+0x16>
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	e000      	b.n	8005a4e <osDelay+0x18>
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 ffd2 	bl	80069f8 <vTaskDelay>
  
  return osOK;
 8005a54:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
	...

08005a60 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af02      	add	r7, sp, #8
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	460b      	mov	r3, r1
 8005a6a:	607a      	str	r2, [r7, #4]
 8005a6c:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d013      	beq.n	8005a9e <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8005a76:	7afb      	ldrb	r3, [r7, #11]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d101      	bne.n	8005a80 <osTimerCreate+0x20>
 8005a7c:	2101      	movs	r1, #1
 8005a7e:	e000      	b.n	8005a82 <osTimerCreate+0x22>
 8005a80:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8005a8a:	9201      	str	r2, [sp, #4]
 8005a8c:	9300      	str	r3, [sp, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	460a      	mov	r2, r1
 8005a92:	2101      	movs	r1, #1
 8005a94:	480b      	ldr	r0, [pc, #44]	@ (8005ac4 <osTimerCreate+0x64>)
 8005a96:	f001 fdba 	bl	800760e <xTimerCreateStatic>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	e00e      	b.n	8005abc <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8005a9e:	7afb      	ldrb	r3, [r7, #11]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d101      	bne.n	8005aa8 <osTimerCreate+0x48>
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	e000      	b.n	8005aaa <osTimerCreate+0x4a>
 8005aa8:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2101      	movs	r1, #1
 8005ab4:	4803      	ldr	r0, [pc, #12]	@ (8005ac4 <osTimerCreate+0x64>)
 8005ab6:	f001 fd89 	bl	80075cc <xTimerCreate>
 8005aba:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3710      	adds	r7, #16
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	08009708 	.word	0x08009708

08005ac8 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b088      	sub	sp, #32
 8005acc:	af02      	add	r7, sp, #8
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d101      	bne.n	8005ae8 <osTimerStart+0x20>
    ticks = 1;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8005ae8:	f7ff ff41 	bl	800596e <inHandlerMode>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d01a      	beq.n	8005b28 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8005af2:	f107 030c 	add.w	r3, r7, #12
 8005af6:	2200      	movs	r2, #0
 8005af8:	9200      	str	r2, [sp, #0]
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	2109      	movs	r1, #9
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f001 fe02 	bl	8007708 <xTimerGenericCommand>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d002      	beq.n	8005b10 <osTimerStart+0x48>
    {
      result = osErrorOS;
 8005b0a:	23ff      	movs	r3, #255	@ 0xff
 8005b0c:	617b      	str	r3, [r7, #20]
 8005b0e:	e018      	b.n	8005b42 <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d015      	beq.n	8005b42 <osTimerStart+0x7a>
 8005b16:	4b0d      	ldr	r3, [pc, #52]	@ (8005b4c <osTimerStart+0x84>)
 8005b18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b1c:	601a      	str	r2, [r3, #0]
 8005b1e:	f3bf 8f4f 	dsb	sy
 8005b22:	f3bf 8f6f 	isb	sy
 8005b26:	e00c      	b.n	8005b42 <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8005b28:	2300      	movs	r3, #0
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	2104      	movs	r1, #4
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f001 fde8 	bl	8007708 <xTimerGenericCommand>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d001      	beq.n	8005b42 <osTimerStart+0x7a>
      result = osErrorOS;
 8005b3e:	23ff      	movs	r3, #255	@ 0xff
 8005b40:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8005b42:	697b      	ldr	r3, [r7, #20]
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3718      	adds	r7, #24
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	e000ed04 	.word	0xe000ed04

08005b50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f103 0208 	add.w	r2, r3, #8
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f04f 32ff 	mov.w	r2, #4294967295
 8005b68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f103 0208 	add.w	r2, r3, #8
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f103 0208 	add.w	r2, r3, #8
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bc80      	pop	{r7}
 8005b8c:	4770      	bx	lr

08005b8e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b083      	sub	sp, #12
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bc80      	pop	{r7}
 8005ba4:	4770      	bx	lr

08005ba6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ba6:	b480      	push	{r7}
 8005ba8:	b085      	sub	sp, #20
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
 8005bae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	689a      	ldr	r2, [r3, #8]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	683a      	ldr	r2, [r7, #0]
 8005bd0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	1c5a      	adds	r2, r3, #1
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	601a      	str	r2, [r3, #0]
}
 8005be2:	bf00      	nop
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bc80      	pop	{r7}
 8005bea:	4770      	bx	lr

08005bec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c02:	d103      	bne.n	8005c0c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	60fb      	str	r3, [r7, #12]
 8005c0a:	e00c      	b.n	8005c26 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	3308      	adds	r3, #8
 8005c10:	60fb      	str	r3, [r7, #12]
 8005c12:	e002      	b.n	8005c1a <vListInsert+0x2e>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	60fb      	str	r3, [r7, #12]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68ba      	ldr	r2, [r7, #8]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d2f6      	bcs.n	8005c14 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	685a      	ldr	r2, [r3, #4]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	683a      	ldr	r2, [r7, #0]
 8005c34:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	683a      	ldr	r2, [r7, #0]
 8005c40:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	1c5a      	adds	r2, r3, #1
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	601a      	str	r2, [r3, #0]
}
 8005c52:	bf00      	nop
 8005c54:	3714      	adds	r7, #20
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bc80      	pop	{r7}
 8005c5a:	4770      	bx	lr

08005c5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	6892      	ldr	r2, [r2, #8]
 8005c72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	6852      	ldr	r2, [r2, #4]
 8005c7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d103      	bne.n	8005c90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	689a      	ldr	r2, [r3, #8]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	1e5a      	subs	r2, r3, #1
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3714      	adds	r7, #20
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bc80      	pop	{r7}
 8005cac:	4770      	bx	lr
	...

08005cb0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d10b      	bne.n	8005cdc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc8:	f383 8811 	msr	BASEPRI, r3
 8005ccc:	f3bf 8f6f 	isb	sy
 8005cd0:	f3bf 8f4f 	dsb	sy
 8005cd4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005cd6:	bf00      	nop
 8005cd8:	bf00      	nop
 8005cda:	e7fd      	b.n	8005cd8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005cdc:	f002 f8f6 	bl	8007ecc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ce8:	68f9      	ldr	r1, [r7, #12]
 8005cea:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005cec:	fb01 f303 	mul.w	r3, r1, r3
 8005cf0:	441a      	add	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	68f9      	ldr	r1, [r7, #12]
 8005d10:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005d12:	fb01 f303 	mul.w	r3, r1, r3
 8005d16:	441a      	add	r2, r3
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	22ff      	movs	r2, #255	@ 0xff
 8005d20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	22ff      	movs	r2, #255	@ 0xff
 8005d28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d114      	bne.n	8005d5c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d01a      	beq.n	8005d70 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	3310      	adds	r3, #16
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f001 f928 	bl	8006f94 <xTaskRemoveFromEventList>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d012      	beq.n	8005d70 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005d80 <xQueueGenericReset+0xd0>)
 8005d4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d50:	601a      	str	r2, [r3, #0]
 8005d52:	f3bf 8f4f 	dsb	sy
 8005d56:	f3bf 8f6f 	isb	sy
 8005d5a:	e009      	b.n	8005d70 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	3310      	adds	r3, #16
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7ff fef5 	bl	8005b50 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	3324      	adds	r3, #36	@ 0x24
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7ff fef0 	bl	8005b50 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005d70:	f002 f8dc 	bl	8007f2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005d74:	2301      	movs	r3, #1
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	e000ed04 	.word	0xe000ed04

08005d84 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b08e      	sub	sp, #56	@ 0x38
 8005d88:	af02      	add	r7, sp, #8
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]
 8005d90:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d10b      	bne.n	8005db0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d9c:	f383 8811 	msr	BASEPRI, r3
 8005da0:	f3bf 8f6f 	isb	sy
 8005da4:	f3bf 8f4f 	dsb	sy
 8005da8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005daa:	bf00      	nop
 8005dac:	bf00      	nop
 8005dae:	e7fd      	b.n	8005dac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d10b      	bne.n	8005dce <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dba:	f383 8811 	msr	BASEPRI, r3
 8005dbe:	f3bf 8f6f 	isb	sy
 8005dc2:	f3bf 8f4f 	dsb	sy
 8005dc6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005dc8:	bf00      	nop
 8005dca:	bf00      	nop
 8005dcc:	e7fd      	b.n	8005dca <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d002      	beq.n	8005dda <xQueueGenericCreateStatic+0x56>
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d001      	beq.n	8005dde <xQueueGenericCreateStatic+0x5a>
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e000      	b.n	8005de0 <xQueueGenericCreateStatic+0x5c>
 8005dde:	2300      	movs	r3, #0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d10b      	bne.n	8005dfc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005de8:	f383 8811 	msr	BASEPRI, r3
 8005dec:	f3bf 8f6f 	isb	sy
 8005df0:	f3bf 8f4f 	dsb	sy
 8005df4:	623b      	str	r3, [r7, #32]
}
 8005df6:	bf00      	nop
 8005df8:	bf00      	nop
 8005dfa:	e7fd      	b.n	8005df8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d102      	bne.n	8005e08 <xQueueGenericCreateStatic+0x84>
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d101      	bne.n	8005e0c <xQueueGenericCreateStatic+0x88>
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e000      	b.n	8005e0e <xQueueGenericCreateStatic+0x8a>
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10b      	bne.n	8005e2a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e16:	f383 8811 	msr	BASEPRI, r3
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	61fb      	str	r3, [r7, #28]
}
 8005e24:	bf00      	nop
 8005e26:	bf00      	nop
 8005e28:	e7fd      	b.n	8005e26 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005e2a:	2348      	movs	r3, #72	@ 0x48
 8005e2c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	2b48      	cmp	r3, #72	@ 0x48
 8005e32:	d00b      	beq.n	8005e4c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e38:	f383 8811 	msr	BASEPRI, r3
 8005e3c:	f3bf 8f6f 	isb	sy
 8005e40:	f3bf 8f4f 	dsb	sy
 8005e44:	61bb      	str	r3, [r7, #24]
}
 8005e46:	bf00      	nop
 8005e48:	bf00      	nop
 8005e4a:	e7fd      	b.n	8005e48 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005e4c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00d      	beq.n	8005e74 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e60:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	4613      	mov	r3, r2
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	68b9      	ldr	r1, [r7, #8]
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f000 f805 	bl	8005e7e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3730      	adds	r7, #48	@ 0x30
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b084      	sub	sp, #16
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	60f8      	str	r0, [r7, #12]
 8005e86:	60b9      	str	r1, [r7, #8]
 8005e88:	607a      	str	r2, [r7, #4]
 8005e8a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d103      	bne.n	8005e9a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	69ba      	ldr	r2, [r7, #24]
 8005e96:	601a      	str	r2, [r3, #0]
 8005e98:	e002      	b.n	8005ea0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005eac:	2101      	movs	r1, #1
 8005eae:	69b8      	ldr	r0, [r7, #24]
 8005eb0:	f7ff fefe 	bl	8005cb0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005eb4:	bf00      	nop
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b08e      	sub	sp, #56	@ 0x38
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
 8005ec8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d10b      	bne.n	8005ef0 <xQueueGenericSend+0x34>
	__asm volatile
 8005ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005edc:	f383 8811 	msr	BASEPRI, r3
 8005ee0:	f3bf 8f6f 	isb	sy
 8005ee4:	f3bf 8f4f 	dsb	sy
 8005ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005eea:	bf00      	nop
 8005eec:	bf00      	nop
 8005eee:	e7fd      	b.n	8005eec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d103      	bne.n	8005efe <xQueueGenericSend+0x42>
 8005ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d101      	bne.n	8005f02 <xQueueGenericSend+0x46>
 8005efe:	2301      	movs	r3, #1
 8005f00:	e000      	b.n	8005f04 <xQueueGenericSend+0x48>
 8005f02:	2300      	movs	r3, #0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d10b      	bne.n	8005f20 <xQueueGenericSend+0x64>
	__asm volatile
 8005f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f0c:	f383 8811 	msr	BASEPRI, r3
 8005f10:	f3bf 8f6f 	isb	sy
 8005f14:	f3bf 8f4f 	dsb	sy
 8005f18:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005f1a:	bf00      	nop
 8005f1c:	bf00      	nop
 8005f1e:	e7fd      	b.n	8005f1c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d103      	bne.n	8005f2e <xQueueGenericSend+0x72>
 8005f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d101      	bne.n	8005f32 <xQueueGenericSend+0x76>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e000      	b.n	8005f34 <xQueueGenericSend+0x78>
 8005f32:	2300      	movs	r3, #0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10b      	bne.n	8005f50 <xQueueGenericSend+0x94>
	__asm volatile
 8005f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f3c:	f383 8811 	msr	BASEPRI, r3
 8005f40:	f3bf 8f6f 	isb	sy
 8005f44:	f3bf 8f4f 	dsb	sy
 8005f48:	623b      	str	r3, [r7, #32]
}
 8005f4a:	bf00      	nop
 8005f4c:	bf00      	nop
 8005f4e:	e7fd      	b.n	8005f4c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f50:	f001 f9e6 	bl	8007320 <xTaskGetSchedulerState>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d102      	bne.n	8005f60 <xQueueGenericSend+0xa4>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d101      	bne.n	8005f64 <xQueueGenericSend+0xa8>
 8005f60:	2301      	movs	r3, #1
 8005f62:	e000      	b.n	8005f66 <xQueueGenericSend+0xaa>
 8005f64:	2300      	movs	r3, #0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d10b      	bne.n	8005f82 <xQueueGenericSend+0xc6>
	__asm volatile
 8005f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f6e:	f383 8811 	msr	BASEPRI, r3
 8005f72:	f3bf 8f6f 	isb	sy
 8005f76:	f3bf 8f4f 	dsb	sy
 8005f7a:	61fb      	str	r3, [r7, #28]
}
 8005f7c:	bf00      	nop
 8005f7e:	bf00      	nop
 8005f80:	e7fd      	b.n	8005f7e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f82:	f001 ffa3 	bl	8007ecc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d302      	bcc.n	8005f98 <xQueueGenericSend+0xdc>
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d129      	bne.n	8005fec <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f98:	683a      	ldr	r2, [r7, #0]
 8005f9a:	68b9      	ldr	r1, [r7, #8]
 8005f9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005f9e:	f000 fa0f 	bl	80063c0 <prvCopyDataToQueue>
 8005fa2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d010      	beq.n	8005fce <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fae:	3324      	adds	r3, #36	@ 0x24
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f000 ffef 	bl	8006f94 <xTaskRemoveFromEventList>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d013      	beq.n	8005fe4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005fbc:	4b3f      	ldr	r3, [pc, #252]	@ (80060bc <xQueueGenericSend+0x200>)
 8005fbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fc2:	601a      	str	r2, [r3, #0]
 8005fc4:	f3bf 8f4f 	dsb	sy
 8005fc8:	f3bf 8f6f 	isb	sy
 8005fcc:	e00a      	b.n	8005fe4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d007      	beq.n	8005fe4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005fd4:	4b39      	ldr	r3, [pc, #228]	@ (80060bc <xQueueGenericSend+0x200>)
 8005fd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fda:	601a      	str	r2, [r3, #0]
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005fe4:	f001 ffa2 	bl	8007f2c <vPortExitCritical>
				return pdPASS;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e063      	b.n	80060b4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d103      	bne.n	8005ffa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ff2:	f001 ff9b 	bl	8007f2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	e05c      	b.n	80060b4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d106      	bne.n	800600e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006000:	f107 0314 	add.w	r3, r7, #20
 8006004:	4618      	mov	r0, r3
 8006006:	f001 f829 	bl	800705c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800600a:	2301      	movs	r3, #1
 800600c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800600e:	f001 ff8d 	bl	8007f2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006012:	f000 fd97 	bl	8006b44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006016:	f001 ff59 	bl	8007ecc <vPortEnterCritical>
 800601a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800601c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006020:	b25b      	sxtb	r3, r3
 8006022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006026:	d103      	bne.n	8006030 <xQueueGenericSend+0x174>
 8006028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800602a:	2200      	movs	r2, #0
 800602c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006032:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006036:	b25b      	sxtb	r3, r3
 8006038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800603c:	d103      	bne.n	8006046 <xQueueGenericSend+0x18a>
 800603e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006040:	2200      	movs	r2, #0
 8006042:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006046:	f001 ff71 	bl	8007f2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800604a:	1d3a      	adds	r2, r7, #4
 800604c:	f107 0314 	add.w	r3, r7, #20
 8006050:	4611      	mov	r1, r2
 8006052:	4618      	mov	r0, r3
 8006054:	f001 f818 	bl	8007088 <xTaskCheckForTimeOut>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d124      	bne.n	80060a8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800605e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006060:	f000 faa6 	bl	80065b0 <prvIsQueueFull>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d018      	beq.n	800609c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800606a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606c:	3310      	adds	r3, #16
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	4611      	mov	r1, r2
 8006072:	4618      	mov	r0, r3
 8006074:	f000 ff3c 	bl	8006ef0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006078:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800607a:	f000 fa31 	bl	80064e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800607e:	f000 fd6f 	bl	8006b60 <xTaskResumeAll>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	f47f af7c 	bne.w	8005f82 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800608a:	4b0c      	ldr	r3, [pc, #48]	@ (80060bc <xQueueGenericSend+0x200>)
 800608c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006090:	601a      	str	r2, [r3, #0]
 8006092:	f3bf 8f4f 	dsb	sy
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	e772      	b.n	8005f82 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800609c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800609e:	f000 fa1f 	bl	80064e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80060a2:	f000 fd5d 	bl	8006b60 <xTaskResumeAll>
 80060a6:	e76c      	b.n	8005f82 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80060a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80060aa:	f000 fa19 	bl	80064e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060ae:	f000 fd57 	bl	8006b60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80060b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3738      	adds	r7, #56	@ 0x38
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	e000ed04 	.word	0xe000ed04

080060c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b090      	sub	sp, #64	@ 0x40
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
 80060cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80060d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d10b      	bne.n	80060f0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80060d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060dc:	f383 8811 	msr	BASEPRI, r3
 80060e0:	f3bf 8f6f 	isb	sy
 80060e4:	f3bf 8f4f 	dsb	sy
 80060e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80060ea:	bf00      	nop
 80060ec:	bf00      	nop
 80060ee:	e7fd      	b.n	80060ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d103      	bne.n	80060fe <xQueueGenericSendFromISR+0x3e>
 80060f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <xQueueGenericSendFromISR+0x42>
 80060fe:	2301      	movs	r3, #1
 8006100:	e000      	b.n	8006104 <xQueueGenericSendFromISR+0x44>
 8006102:	2300      	movs	r3, #0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10b      	bne.n	8006120 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800610c:	f383 8811 	msr	BASEPRI, r3
 8006110:	f3bf 8f6f 	isb	sy
 8006114:	f3bf 8f4f 	dsb	sy
 8006118:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800611a:	bf00      	nop
 800611c:	bf00      	nop
 800611e:	e7fd      	b.n	800611c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	2b02      	cmp	r3, #2
 8006124:	d103      	bne.n	800612e <xQueueGenericSendFromISR+0x6e>
 8006126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006128:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800612a:	2b01      	cmp	r3, #1
 800612c:	d101      	bne.n	8006132 <xQueueGenericSendFromISR+0x72>
 800612e:	2301      	movs	r3, #1
 8006130:	e000      	b.n	8006134 <xQueueGenericSendFromISR+0x74>
 8006132:	2300      	movs	r3, #0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10b      	bne.n	8006150 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800613c:	f383 8811 	msr	BASEPRI, r3
 8006140:	f3bf 8f6f 	isb	sy
 8006144:	f3bf 8f4f 	dsb	sy
 8006148:	623b      	str	r3, [r7, #32]
}
 800614a:	bf00      	nop
 800614c:	bf00      	nop
 800614e:	e7fd      	b.n	800614c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006150:	f001 ff7e 	bl	8008050 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006154:	f3ef 8211 	mrs	r2, BASEPRI
 8006158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800615c:	f383 8811 	msr	BASEPRI, r3
 8006160:	f3bf 8f6f 	isb	sy
 8006164:	f3bf 8f4f 	dsb	sy
 8006168:	61fa      	str	r2, [r7, #28]
 800616a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800616c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800616e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006172:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006178:	429a      	cmp	r2, r3
 800617a:	d302      	bcc.n	8006182 <xQueueGenericSendFromISR+0xc2>
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	2b02      	cmp	r3, #2
 8006180:	d12f      	bne.n	80061e2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006184:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006188:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800618c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800618e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006190:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006192:	683a      	ldr	r2, [r7, #0]
 8006194:	68b9      	ldr	r1, [r7, #8]
 8006196:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006198:	f000 f912 	bl	80063c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800619c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80061a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a4:	d112      	bne.n	80061cc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d016      	beq.n	80061dc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061b0:	3324      	adds	r3, #36	@ 0x24
 80061b2:	4618      	mov	r0, r3
 80061b4:	f000 feee 	bl	8006f94 <xTaskRemoveFromEventList>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00e      	beq.n	80061dc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00b      	beq.n	80061dc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	601a      	str	r2, [r3, #0]
 80061ca:	e007      	b.n	80061dc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80061cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80061d0:	3301      	adds	r3, #1
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	b25a      	sxtb	r2, r3
 80061d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80061dc:	2301      	movs	r3, #1
 80061de:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80061e0:	e001      	b.n	80061e6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80061e2:	2300      	movs	r3, #0
 80061e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061e8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80061f0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80061f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3740      	adds	r7, #64	@ 0x40
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b08c      	sub	sp, #48	@ 0x30
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006208:	2300      	movs	r3, #0
 800620a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10b      	bne.n	800622e <xQueueReceive+0x32>
	__asm volatile
 8006216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800621a:	f383 8811 	msr	BASEPRI, r3
 800621e:	f3bf 8f6f 	isb	sy
 8006222:	f3bf 8f4f 	dsb	sy
 8006226:	623b      	str	r3, [r7, #32]
}
 8006228:	bf00      	nop
 800622a:	bf00      	nop
 800622c:	e7fd      	b.n	800622a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d103      	bne.n	800623c <xQueueReceive+0x40>
 8006234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006238:	2b00      	cmp	r3, #0
 800623a:	d101      	bne.n	8006240 <xQueueReceive+0x44>
 800623c:	2301      	movs	r3, #1
 800623e:	e000      	b.n	8006242 <xQueueReceive+0x46>
 8006240:	2300      	movs	r3, #0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d10b      	bne.n	800625e <xQueueReceive+0x62>
	__asm volatile
 8006246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800624a:	f383 8811 	msr	BASEPRI, r3
 800624e:	f3bf 8f6f 	isb	sy
 8006252:	f3bf 8f4f 	dsb	sy
 8006256:	61fb      	str	r3, [r7, #28]
}
 8006258:	bf00      	nop
 800625a:	bf00      	nop
 800625c:	e7fd      	b.n	800625a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800625e:	f001 f85f 	bl	8007320 <xTaskGetSchedulerState>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d102      	bne.n	800626e <xQueueReceive+0x72>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d101      	bne.n	8006272 <xQueueReceive+0x76>
 800626e:	2301      	movs	r3, #1
 8006270:	e000      	b.n	8006274 <xQueueReceive+0x78>
 8006272:	2300      	movs	r3, #0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d10b      	bne.n	8006290 <xQueueReceive+0x94>
	__asm volatile
 8006278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800627c:	f383 8811 	msr	BASEPRI, r3
 8006280:	f3bf 8f6f 	isb	sy
 8006284:	f3bf 8f4f 	dsb	sy
 8006288:	61bb      	str	r3, [r7, #24]
}
 800628a:	bf00      	nop
 800628c:	bf00      	nop
 800628e:	e7fd      	b.n	800628c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006290:	f001 fe1c 	bl	8007ecc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006298:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800629a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629c:	2b00      	cmp	r3, #0
 800629e:	d01f      	beq.n	80062e0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80062a0:	68b9      	ldr	r1, [r7, #8]
 80062a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062a4:	f000 f8f6 	bl	8006494 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80062a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062aa:	1e5a      	subs	r2, r3, #1
 80062ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ae:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00f      	beq.n	80062d8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ba:	3310      	adds	r3, #16
 80062bc:	4618      	mov	r0, r3
 80062be:	f000 fe69 	bl	8006f94 <xTaskRemoveFromEventList>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d007      	beq.n	80062d8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80062c8:	4b3c      	ldr	r3, [pc, #240]	@ (80063bc <xQueueReceive+0x1c0>)
 80062ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062ce:	601a      	str	r2, [r3, #0]
 80062d0:	f3bf 8f4f 	dsb	sy
 80062d4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80062d8:	f001 fe28 	bl	8007f2c <vPortExitCritical>
				return pdPASS;
 80062dc:	2301      	movs	r3, #1
 80062de:	e069      	b.n	80063b4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d103      	bne.n	80062ee <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80062e6:	f001 fe21 	bl	8007f2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80062ea:	2300      	movs	r3, #0
 80062ec:	e062      	b.n	80063b4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d106      	bne.n	8006302 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062f4:	f107 0310 	add.w	r3, r7, #16
 80062f8:	4618      	mov	r0, r3
 80062fa:	f000 feaf 	bl	800705c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062fe:	2301      	movs	r3, #1
 8006300:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006302:	f001 fe13 	bl	8007f2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006306:	f000 fc1d 	bl	8006b44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800630a:	f001 fddf 	bl	8007ecc <vPortEnterCritical>
 800630e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006310:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006314:	b25b      	sxtb	r3, r3
 8006316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800631a:	d103      	bne.n	8006324 <xQueueReceive+0x128>
 800631c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800631e:	2200      	movs	r2, #0
 8006320:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006326:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800632a:	b25b      	sxtb	r3, r3
 800632c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006330:	d103      	bne.n	800633a <xQueueReceive+0x13e>
 8006332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006334:	2200      	movs	r2, #0
 8006336:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800633a:	f001 fdf7 	bl	8007f2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800633e:	1d3a      	adds	r2, r7, #4
 8006340:	f107 0310 	add.w	r3, r7, #16
 8006344:	4611      	mov	r1, r2
 8006346:	4618      	mov	r0, r3
 8006348:	f000 fe9e 	bl	8007088 <xTaskCheckForTimeOut>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d123      	bne.n	800639a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006352:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006354:	f000 f916 	bl	8006584 <prvIsQueueEmpty>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d017      	beq.n	800638e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800635e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006360:	3324      	adds	r3, #36	@ 0x24
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	4611      	mov	r1, r2
 8006366:	4618      	mov	r0, r3
 8006368:	f000 fdc2 	bl	8006ef0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800636c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800636e:	f000 f8b7 	bl	80064e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006372:	f000 fbf5 	bl	8006b60 <xTaskResumeAll>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d189      	bne.n	8006290 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800637c:	4b0f      	ldr	r3, [pc, #60]	@ (80063bc <xQueueReceive+0x1c0>)
 800637e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006382:	601a      	str	r2, [r3, #0]
 8006384:	f3bf 8f4f 	dsb	sy
 8006388:	f3bf 8f6f 	isb	sy
 800638c:	e780      	b.n	8006290 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800638e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006390:	f000 f8a6 	bl	80064e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006394:	f000 fbe4 	bl	8006b60 <xTaskResumeAll>
 8006398:	e77a      	b.n	8006290 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800639a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800639c:	f000 f8a0 	bl	80064e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063a0:	f000 fbde 	bl	8006b60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063a6:	f000 f8ed 	bl	8006584 <prvIsQueueEmpty>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f43f af6f 	beq.w	8006290 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80063b2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3730      	adds	r7, #48	@ 0x30
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	e000ed04 	.word	0xe000ed04

080063c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b086      	sub	sp, #24
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80063cc:	2300      	movs	r3, #0
 80063ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d10d      	bne.n	80063fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d14d      	bne.n	8006482 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	4618      	mov	r0, r3
 80063ec:	f000 ffb6 	bl	800735c <xTaskPriorityDisinherit>
 80063f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	609a      	str	r2, [r3, #8]
 80063f8:	e043      	b.n	8006482 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d119      	bne.n	8006434 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6858      	ldr	r0, [r3, #4]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006408:	461a      	mov	r2, r3
 800640a:	68b9      	ldr	r1, [r7, #8]
 800640c:	f002 f93c 	bl	8008688 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	685a      	ldr	r2, [r3, #4]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006418:	441a      	add	r2, r3
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	685a      	ldr	r2, [r3, #4]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	429a      	cmp	r2, r3
 8006428:	d32b      	bcc.n	8006482 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	605a      	str	r2, [r3, #4]
 8006432:	e026      	b.n	8006482 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	68d8      	ldr	r0, [r3, #12]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800643c:	461a      	mov	r2, r3
 800643e:	68b9      	ldr	r1, [r7, #8]
 8006440:	f002 f922 	bl	8008688 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	68da      	ldr	r2, [r3, #12]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800644c:	425b      	negs	r3, r3
 800644e:	441a      	add	r2, r3
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	68da      	ldr	r2, [r3, #12]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	429a      	cmp	r2, r3
 800645e:	d207      	bcs.n	8006470 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	689a      	ldr	r2, [r3, #8]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006468:	425b      	negs	r3, r3
 800646a:	441a      	add	r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2b02      	cmp	r3, #2
 8006474:	d105      	bne.n	8006482 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d002      	beq.n	8006482 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	3b01      	subs	r3, #1
 8006480:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	1c5a      	adds	r2, r3, #1
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800648a:	697b      	ldr	r3, [r7, #20]
}
 800648c:	4618      	mov	r0, r3
 800648e:	3718      	adds	r7, #24
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d018      	beq.n	80064d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	68da      	ldr	r2, [r3, #12]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ae:	441a      	add	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	68da      	ldr	r2, [r3, #12]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d303      	bcc.n	80064c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	68d9      	ldr	r1, [r3, #12]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064d0:	461a      	mov	r2, r3
 80064d2:	6838      	ldr	r0, [r7, #0]
 80064d4:	f002 f8d8 	bl	8008688 <memcpy>
	}
}
 80064d8:	bf00      	nop
 80064da:	3708      	adds	r7, #8
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80064e8:	f001 fcf0 	bl	8007ecc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80064f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80064f4:	e011      	b.n	800651a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d012      	beq.n	8006524 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	3324      	adds	r3, #36	@ 0x24
 8006502:	4618      	mov	r0, r3
 8006504:	f000 fd46 	bl	8006f94 <xTaskRemoveFromEventList>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d001      	beq.n	8006512 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800650e:	f000 fe1f 	bl	8007150 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006512:	7bfb      	ldrb	r3, [r7, #15]
 8006514:	3b01      	subs	r3, #1
 8006516:	b2db      	uxtb	r3, r3
 8006518:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800651a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800651e:	2b00      	cmp	r3, #0
 8006520:	dce9      	bgt.n	80064f6 <prvUnlockQueue+0x16>
 8006522:	e000      	b.n	8006526 <prvUnlockQueue+0x46>
					break;
 8006524:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	22ff      	movs	r2, #255	@ 0xff
 800652a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800652e:	f001 fcfd 	bl	8007f2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006532:	f001 fccb 	bl	8007ecc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800653c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800653e:	e011      	b.n	8006564 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d012      	beq.n	800656e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	3310      	adds	r3, #16
 800654c:	4618      	mov	r0, r3
 800654e:	f000 fd21 	bl	8006f94 <xTaskRemoveFromEventList>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d001      	beq.n	800655c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006558:	f000 fdfa 	bl	8007150 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800655c:	7bbb      	ldrb	r3, [r7, #14]
 800655e:	3b01      	subs	r3, #1
 8006560:	b2db      	uxtb	r3, r3
 8006562:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006564:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006568:	2b00      	cmp	r3, #0
 800656a:	dce9      	bgt.n	8006540 <prvUnlockQueue+0x60>
 800656c:	e000      	b.n	8006570 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800656e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	22ff      	movs	r2, #255	@ 0xff
 8006574:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006578:	f001 fcd8 	bl	8007f2c <vPortExitCritical>
}
 800657c:	bf00      	nop
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800658c:	f001 fc9e 	bl	8007ecc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006594:	2b00      	cmp	r3, #0
 8006596:	d102      	bne.n	800659e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006598:	2301      	movs	r3, #1
 800659a:	60fb      	str	r3, [r7, #12]
 800659c:	e001      	b.n	80065a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800659e:	2300      	movs	r3, #0
 80065a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065a2:	f001 fcc3 	bl	8007f2c <vPortExitCritical>

	return xReturn;
 80065a6:	68fb      	ldr	r3, [r7, #12]
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3710      	adds	r7, #16
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065b8:	f001 fc88 	bl	8007ecc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d102      	bne.n	80065ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80065c8:	2301      	movs	r3, #1
 80065ca:	60fb      	str	r3, [r7, #12]
 80065cc:	e001      	b.n	80065d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80065ce:	2300      	movs	r3, #0
 80065d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065d2:	f001 fcab 	bl	8007f2c <vPortExitCritical>

	return xReturn;
 80065d6:	68fb      	ldr	r3, [r7, #12]
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80065ea:	2300      	movs	r3, #0
 80065ec:	60fb      	str	r3, [r7, #12]
 80065ee:	e014      	b.n	800661a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80065f0:	4a0e      	ldr	r2, [pc, #56]	@ (800662c <vQueueAddToRegistry+0x4c>)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10b      	bne.n	8006614 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80065fc:	490b      	ldr	r1, [pc, #44]	@ (800662c <vQueueAddToRegistry+0x4c>)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	683a      	ldr	r2, [r7, #0]
 8006602:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006606:	4a09      	ldr	r2, [pc, #36]	@ (800662c <vQueueAddToRegistry+0x4c>)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	00db      	lsls	r3, r3, #3
 800660c:	4413      	add	r3, r2
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006612:	e006      	b.n	8006622 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	3301      	adds	r3, #1
 8006618:	60fb      	str	r3, [r7, #12]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2b07      	cmp	r3, #7
 800661e:	d9e7      	bls.n	80065f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006620:	bf00      	nop
 8006622:	bf00      	nop
 8006624:	3714      	adds	r7, #20
 8006626:	46bd      	mov	sp, r7
 8006628:	bc80      	pop	{r7}
 800662a:	4770      	bx	lr
 800662c:	20000c98 	.word	0x20000c98

08006630 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006630:	b580      	push	{r7, lr}
 8006632:	b086      	sub	sp, #24
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006640:	f001 fc44 	bl	8007ecc <vPortEnterCritical>
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800664a:	b25b      	sxtb	r3, r3
 800664c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006650:	d103      	bne.n	800665a <vQueueWaitForMessageRestricted+0x2a>
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006660:	b25b      	sxtb	r3, r3
 8006662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006666:	d103      	bne.n	8006670 <vQueueWaitForMessageRestricted+0x40>
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006670:	f001 fc5c 	bl	8007f2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006678:	2b00      	cmp	r3, #0
 800667a:	d106      	bne.n	800668a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	3324      	adds	r3, #36	@ 0x24
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	68b9      	ldr	r1, [r7, #8]
 8006684:	4618      	mov	r0, r3
 8006686:	f000 fc59 	bl	8006f3c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800668a:	6978      	ldr	r0, [r7, #20]
 800668c:	f7ff ff28 	bl	80064e0 <prvUnlockQueue>
	}
 8006690:	bf00      	nop
 8006692:	3718      	adds	r7, #24
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006698:	b580      	push	{r7, lr}
 800669a:	b08e      	sub	sp, #56	@ 0x38
 800669c:	af04      	add	r7, sp, #16
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
 80066a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80066a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d10b      	bne.n	80066c4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80066ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b0:	f383 8811 	msr	BASEPRI, r3
 80066b4:	f3bf 8f6f 	isb	sy
 80066b8:	f3bf 8f4f 	dsb	sy
 80066bc:	623b      	str	r3, [r7, #32]
}
 80066be:	bf00      	nop
 80066c0:	bf00      	nop
 80066c2:	e7fd      	b.n	80066c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80066c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10b      	bne.n	80066e2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80066ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ce:	f383 8811 	msr	BASEPRI, r3
 80066d2:	f3bf 8f6f 	isb	sy
 80066d6:	f3bf 8f4f 	dsb	sy
 80066da:	61fb      	str	r3, [r7, #28]
}
 80066dc:	bf00      	nop
 80066de:	bf00      	nop
 80066e0:	e7fd      	b.n	80066de <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80066e2:	23a0      	movs	r3, #160	@ 0xa0
 80066e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	2ba0      	cmp	r3, #160	@ 0xa0
 80066ea:	d00b      	beq.n	8006704 <xTaskCreateStatic+0x6c>
	__asm volatile
 80066ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f0:	f383 8811 	msr	BASEPRI, r3
 80066f4:	f3bf 8f6f 	isb	sy
 80066f8:	f3bf 8f4f 	dsb	sy
 80066fc:	61bb      	str	r3, [r7, #24]
}
 80066fe:	bf00      	nop
 8006700:	bf00      	nop
 8006702:	e7fd      	b.n	8006700 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006704:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006708:	2b00      	cmp	r3, #0
 800670a:	d01e      	beq.n	800674a <xTaskCreateStatic+0xb2>
 800670c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800670e:	2b00      	cmp	r3, #0
 8006710:	d01b      	beq.n	800674a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006714:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006718:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800671a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800671c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800671e:	2202      	movs	r2, #2
 8006720:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006724:	2300      	movs	r3, #0
 8006726:	9303      	str	r3, [sp, #12]
 8006728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672a:	9302      	str	r3, [sp, #8]
 800672c:	f107 0314 	add.w	r3, r7, #20
 8006730:	9301      	str	r3, [sp, #4]
 8006732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006734:	9300      	str	r3, [sp, #0]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	68b9      	ldr	r1, [r7, #8]
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	f000 f851 	bl	80067e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006742:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006744:	f000 f8ee 	bl	8006924 <prvAddNewTaskToReadyList>
 8006748:	e001      	b.n	800674e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800674a:	2300      	movs	r3, #0
 800674c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800674e:	697b      	ldr	r3, [r7, #20]
	}
 8006750:	4618      	mov	r0, r3
 8006752:	3728      	adds	r7, #40	@ 0x28
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006758:	b580      	push	{r7, lr}
 800675a:	b08c      	sub	sp, #48	@ 0x30
 800675c:	af04      	add	r7, sp, #16
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	603b      	str	r3, [r7, #0]
 8006764:	4613      	mov	r3, r2
 8006766:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006768:	88fb      	ldrh	r3, [r7, #6]
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4618      	mov	r0, r3
 800676e:	f001 fcaf 	bl	80080d0 <pvPortMalloc>
 8006772:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00e      	beq.n	8006798 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800677a:	20a0      	movs	r0, #160	@ 0xa0
 800677c:	f001 fca8 	bl	80080d0 <pvPortMalloc>
 8006780:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d003      	beq.n	8006790 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	697a      	ldr	r2, [r7, #20]
 800678c:	631a      	str	r2, [r3, #48]	@ 0x30
 800678e:	e005      	b.n	800679c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006790:	6978      	ldr	r0, [r7, #20]
 8006792:	f001 fd6b 	bl	800826c <vPortFree>
 8006796:	e001      	b.n	800679c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006798:	2300      	movs	r3, #0
 800679a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d017      	beq.n	80067d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80067aa:	88fa      	ldrh	r2, [r7, #6]
 80067ac:	2300      	movs	r3, #0
 80067ae:	9303      	str	r3, [sp, #12]
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	9302      	str	r3, [sp, #8]
 80067b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067b6:	9301      	str	r3, [sp, #4]
 80067b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ba:	9300      	str	r3, [sp, #0]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	68b9      	ldr	r1, [r7, #8]
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f000 f80f 	bl	80067e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067c6:	69f8      	ldr	r0, [r7, #28]
 80067c8:	f000 f8ac 	bl	8006924 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80067cc:	2301      	movs	r3, #1
 80067ce:	61bb      	str	r3, [r7, #24]
 80067d0:	e002      	b.n	80067d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80067d2:	f04f 33ff 	mov.w	r3, #4294967295
 80067d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80067d8:	69bb      	ldr	r3, [r7, #24]
	}
 80067da:	4618      	mov	r0, r3
 80067dc:	3720      	adds	r7, #32
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
	...

080067e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b088      	sub	sp, #32
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	607a      	str	r2, [r7, #4]
 80067f0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80067f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80067fc:	3b01      	subs	r3, #1
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	4413      	add	r3, r2
 8006802:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	f023 0307 	bic.w	r3, r3, #7
 800680a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	f003 0307 	and.w	r3, r3, #7
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00b      	beq.n	800682e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8006816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800681a:	f383 8811 	msr	BASEPRI, r3
 800681e:	f3bf 8f6f 	isb	sy
 8006822:	f3bf 8f4f 	dsb	sy
 8006826:	617b      	str	r3, [r7, #20]
}
 8006828:	bf00      	nop
 800682a:	bf00      	nop
 800682c:	e7fd      	b.n	800682a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d01f      	beq.n	8006874 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006834:	2300      	movs	r3, #0
 8006836:	61fb      	str	r3, [r7, #28]
 8006838:	e012      	b.n	8006860 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	4413      	add	r3, r2
 8006840:	7819      	ldrb	r1, [r3, #0]
 8006842:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	4413      	add	r3, r2
 8006848:	3334      	adds	r3, #52	@ 0x34
 800684a:	460a      	mov	r2, r1
 800684c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800684e:	68ba      	ldr	r2, [r7, #8]
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	4413      	add	r3, r2
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d006      	beq.n	8006868 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	3301      	adds	r3, #1
 800685e:	61fb      	str	r3, [r7, #28]
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	2b0f      	cmp	r3, #15
 8006864:	d9e9      	bls.n	800683a <prvInitialiseNewTask+0x56>
 8006866:	e000      	b.n	800686a <prvInitialiseNewTask+0x86>
			{
				break;
 8006868:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800686a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686c:	2200      	movs	r2, #0
 800686e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006872:	e003      	b.n	800687c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006876:	2200      	movs	r2, #0
 8006878:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800687c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800687e:	2b06      	cmp	r3, #6
 8006880:	d901      	bls.n	8006886 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006882:	2306      	movs	r3, #6
 8006884:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006888:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800688a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800688c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006890:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006894:	2200      	movs	r2, #0
 8006896:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800689a:	3304      	adds	r3, #4
 800689c:	4618      	mov	r0, r3
 800689e:	f7ff f976 	bl	8005b8e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80068a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a4:	3318      	adds	r3, #24
 80068a6:	4618      	mov	r0, r3
 80068a8:	f7ff f971 	bl	8005b8e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80068ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068b0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068b4:	f1c3 0207 	rsb	r2, r3, #7
 80068b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80068bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068c0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80068c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c4:	2200      	movs	r2, #0
 80068c6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80068ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80068d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d4:	334c      	adds	r3, #76	@ 0x4c
 80068d6:	224c      	movs	r2, #76	@ 0x4c
 80068d8:	2100      	movs	r1, #0
 80068da:	4618      	mov	r0, r3
 80068dc:	f001 fe42 	bl	8008564 <memset>
 80068e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e2:	4a0d      	ldr	r2, [pc, #52]	@ (8006918 <prvInitialiseNewTask+0x134>)
 80068e4:	651a      	str	r2, [r3, #80]	@ 0x50
 80068e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e8:	4a0c      	ldr	r2, [pc, #48]	@ (800691c <prvInitialiseNewTask+0x138>)
 80068ea:	655a      	str	r2, [r3, #84]	@ 0x54
 80068ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ee:	4a0c      	ldr	r2, [pc, #48]	@ (8006920 <prvInitialiseNewTask+0x13c>)
 80068f0:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80068f2:	683a      	ldr	r2, [r7, #0]
 80068f4:	68f9      	ldr	r1, [r7, #12]
 80068f6:	69b8      	ldr	r0, [r7, #24]
 80068f8:	f001 f9f8 	bl	8007cec <pxPortInitialiseStack>
 80068fc:	4602      	mov	r2, r0
 80068fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006900:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006904:	2b00      	cmp	r3, #0
 8006906:	d002      	beq.n	800690e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800690a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800690c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800690e:	bf00      	nop
 8006910:	3720      	adds	r7, #32
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	20001f28 	.word	0x20001f28
 800691c:	20001f90 	.word	0x20001f90
 8006920:	20001ff8 	.word	0x20001ff8

08006924 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800692c:	f001 face 	bl	8007ecc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006930:	4b2a      	ldr	r3, [pc, #168]	@ (80069dc <prvAddNewTaskToReadyList+0xb8>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	3301      	adds	r3, #1
 8006936:	4a29      	ldr	r2, [pc, #164]	@ (80069dc <prvAddNewTaskToReadyList+0xb8>)
 8006938:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800693a:	4b29      	ldr	r3, [pc, #164]	@ (80069e0 <prvAddNewTaskToReadyList+0xbc>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d109      	bne.n	8006956 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006942:	4a27      	ldr	r2, [pc, #156]	@ (80069e0 <prvAddNewTaskToReadyList+0xbc>)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006948:	4b24      	ldr	r3, [pc, #144]	@ (80069dc <prvAddNewTaskToReadyList+0xb8>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2b01      	cmp	r3, #1
 800694e:	d110      	bne.n	8006972 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006950:	f000 fc22 	bl	8007198 <prvInitialiseTaskLists>
 8006954:	e00d      	b.n	8006972 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006956:	4b23      	ldr	r3, [pc, #140]	@ (80069e4 <prvAddNewTaskToReadyList+0xc0>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d109      	bne.n	8006972 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800695e:	4b20      	ldr	r3, [pc, #128]	@ (80069e0 <prvAddNewTaskToReadyList+0xbc>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006968:	429a      	cmp	r2, r3
 800696a:	d802      	bhi.n	8006972 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800696c:	4a1c      	ldr	r2, [pc, #112]	@ (80069e0 <prvAddNewTaskToReadyList+0xbc>)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006972:	4b1d      	ldr	r3, [pc, #116]	@ (80069e8 <prvAddNewTaskToReadyList+0xc4>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	3301      	adds	r3, #1
 8006978:	4a1b      	ldr	r2, [pc, #108]	@ (80069e8 <prvAddNewTaskToReadyList+0xc4>)
 800697a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006980:	2201      	movs	r2, #1
 8006982:	409a      	lsls	r2, r3
 8006984:	4b19      	ldr	r3, [pc, #100]	@ (80069ec <prvAddNewTaskToReadyList+0xc8>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4313      	orrs	r3, r2
 800698a:	4a18      	ldr	r2, [pc, #96]	@ (80069ec <prvAddNewTaskToReadyList+0xc8>)
 800698c:	6013      	str	r3, [r2, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006992:	4613      	mov	r3, r2
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	4413      	add	r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	4a15      	ldr	r2, [pc, #84]	@ (80069f0 <prvAddNewTaskToReadyList+0xcc>)
 800699c:	441a      	add	r2, r3
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	3304      	adds	r3, #4
 80069a2:	4619      	mov	r1, r3
 80069a4:	4610      	mov	r0, r2
 80069a6:	f7ff f8fe 	bl	8005ba6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80069aa:	f001 fabf 	bl	8007f2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80069ae:	4b0d      	ldr	r3, [pc, #52]	@ (80069e4 <prvAddNewTaskToReadyList+0xc0>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00e      	beq.n	80069d4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80069b6:	4b0a      	ldr	r3, [pc, #40]	@ (80069e0 <prvAddNewTaskToReadyList+0xbc>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d207      	bcs.n	80069d4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80069c4:	4b0b      	ldr	r3, [pc, #44]	@ (80069f4 <prvAddNewTaskToReadyList+0xd0>)
 80069c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069ca:	601a      	str	r2, [r3, #0]
 80069cc:	f3bf 8f4f 	dsb	sy
 80069d0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069d4:	bf00      	nop
 80069d6:	3708      	adds	r7, #8
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	20000dd8 	.word	0x20000dd8
 80069e0:	20000cd8 	.word	0x20000cd8
 80069e4:	20000de4 	.word	0x20000de4
 80069e8:	20000df4 	.word	0x20000df4
 80069ec:	20000de0 	.word	0x20000de0
 80069f0:	20000cdc 	.word	0x20000cdc
 80069f4:	e000ed04 	.word	0xe000ed04

080069f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006a00:	2300      	movs	r3, #0
 8006a02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d018      	beq.n	8006a3c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006a0a:	4b14      	ldr	r3, [pc, #80]	@ (8006a5c <vTaskDelay+0x64>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00b      	beq.n	8006a2a <vTaskDelay+0x32>
	__asm volatile
 8006a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a16:	f383 8811 	msr	BASEPRI, r3
 8006a1a:	f3bf 8f6f 	isb	sy
 8006a1e:	f3bf 8f4f 	dsb	sy
 8006a22:	60bb      	str	r3, [r7, #8]
}
 8006a24:	bf00      	nop
 8006a26:	bf00      	nop
 8006a28:	e7fd      	b.n	8006a26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006a2a:	f000 f88b 	bl	8006b44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006a2e:	2100      	movs	r1, #0
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 fd1b 	bl	800746c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006a36:	f000 f893 	bl	8006b60 <xTaskResumeAll>
 8006a3a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d107      	bne.n	8006a52 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006a42:	4b07      	ldr	r3, [pc, #28]	@ (8006a60 <vTaskDelay+0x68>)
 8006a44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a48:	601a      	str	r2, [r3, #0]
 8006a4a:	f3bf 8f4f 	dsb	sy
 8006a4e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a52:	bf00      	nop
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	20000e00 	.word	0x20000e00
 8006a60:	e000ed04 	.word	0xe000ed04

08006a64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b08a      	sub	sp, #40	@ 0x28
 8006a68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a72:	463a      	mov	r2, r7
 8006a74:	1d39      	adds	r1, r7, #4
 8006a76:	f107 0308 	add.w	r3, r7, #8
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7fa f854 	bl	8000b28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006a80:	6839      	ldr	r1, [r7, #0]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	9202      	str	r2, [sp, #8]
 8006a88:	9301      	str	r3, [sp, #4]
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	9300      	str	r3, [sp, #0]
 8006a8e:	2300      	movs	r3, #0
 8006a90:	460a      	mov	r2, r1
 8006a92:	4924      	ldr	r1, [pc, #144]	@ (8006b24 <vTaskStartScheduler+0xc0>)
 8006a94:	4824      	ldr	r0, [pc, #144]	@ (8006b28 <vTaskStartScheduler+0xc4>)
 8006a96:	f7ff fdff 	bl	8006698 <xTaskCreateStatic>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	4a23      	ldr	r2, [pc, #140]	@ (8006b2c <vTaskStartScheduler+0xc8>)
 8006a9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006aa0:	4b22      	ldr	r3, [pc, #136]	@ (8006b2c <vTaskStartScheduler+0xc8>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d002      	beq.n	8006aae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	617b      	str	r3, [r7, #20]
 8006aac:	e001      	b.n	8006ab2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d102      	bne.n	8006abe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006ab8:	f000 fd3e 	bl	8007538 <xTimerCreateTimerTask>
 8006abc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d11b      	bne.n	8006afc <vTaskStartScheduler+0x98>
	__asm volatile
 8006ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac8:	f383 8811 	msr	BASEPRI, r3
 8006acc:	f3bf 8f6f 	isb	sy
 8006ad0:	f3bf 8f4f 	dsb	sy
 8006ad4:	613b      	str	r3, [r7, #16]
}
 8006ad6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006ad8:	4b15      	ldr	r3, [pc, #84]	@ (8006b30 <vTaskStartScheduler+0xcc>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	334c      	adds	r3, #76	@ 0x4c
 8006ade:	4a15      	ldr	r2, [pc, #84]	@ (8006b34 <vTaskStartScheduler+0xd0>)
 8006ae0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006ae2:	4b15      	ldr	r3, [pc, #84]	@ (8006b38 <vTaskStartScheduler+0xd4>)
 8006ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ae8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006aea:	4b14      	ldr	r3, [pc, #80]	@ (8006b3c <vTaskStartScheduler+0xd8>)
 8006aec:	2201      	movs	r2, #1
 8006aee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006af0:	4b13      	ldr	r3, [pc, #76]	@ (8006b40 <vTaskStartScheduler+0xdc>)
 8006af2:	2200      	movs	r2, #0
 8006af4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006af6:	f001 f977 	bl	8007de8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006afa:	e00f      	b.n	8006b1c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b02:	d10b      	bne.n	8006b1c <vTaskStartScheduler+0xb8>
	__asm volatile
 8006b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b08:	f383 8811 	msr	BASEPRI, r3
 8006b0c:	f3bf 8f6f 	isb	sy
 8006b10:	f3bf 8f4f 	dsb	sy
 8006b14:	60fb      	str	r3, [r7, #12]
}
 8006b16:	bf00      	nop
 8006b18:	bf00      	nop
 8006b1a:	e7fd      	b.n	8006b18 <vTaskStartScheduler+0xb4>
}
 8006b1c:	bf00      	nop
 8006b1e:	3718      	adds	r7, #24
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	0800970c 	.word	0x0800970c
 8006b28:	08007169 	.word	0x08007169
 8006b2c:	20000dfc 	.word	0x20000dfc
 8006b30:	20000cd8 	.word	0x20000cd8
 8006b34:	20000158 	.word	0x20000158
 8006b38:	20000df8 	.word	0x20000df8
 8006b3c:	20000de4 	.word	0x20000de4
 8006b40:	20000ddc 	.word	0x20000ddc

08006b44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006b44:	b480      	push	{r7}
 8006b46:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006b48:	4b04      	ldr	r3, [pc, #16]	@ (8006b5c <vTaskSuspendAll+0x18>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	4a03      	ldr	r2, [pc, #12]	@ (8006b5c <vTaskSuspendAll+0x18>)
 8006b50:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006b52:	bf00      	nop
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bc80      	pop	{r7}
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	20000e00 	.word	0x20000e00

08006b60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006b66:	2300      	movs	r3, #0
 8006b68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006b6e:	4b42      	ldr	r3, [pc, #264]	@ (8006c78 <xTaskResumeAll+0x118>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d10b      	bne.n	8006b8e <xTaskResumeAll+0x2e>
	__asm volatile
 8006b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b7a:	f383 8811 	msr	BASEPRI, r3
 8006b7e:	f3bf 8f6f 	isb	sy
 8006b82:	f3bf 8f4f 	dsb	sy
 8006b86:	603b      	str	r3, [r7, #0]
}
 8006b88:	bf00      	nop
 8006b8a:	bf00      	nop
 8006b8c:	e7fd      	b.n	8006b8a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006b8e:	f001 f99d 	bl	8007ecc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006b92:	4b39      	ldr	r3, [pc, #228]	@ (8006c78 <xTaskResumeAll+0x118>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	3b01      	subs	r3, #1
 8006b98:	4a37      	ldr	r2, [pc, #220]	@ (8006c78 <xTaskResumeAll+0x118>)
 8006b9a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b9c:	4b36      	ldr	r3, [pc, #216]	@ (8006c78 <xTaskResumeAll+0x118>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d161      	bne.n	8006c68 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ba4:	4b35      	ldr	r3, [pc, #212]	@ (8006c7c <xTaskResumeAll+0x11c>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d05d      	beq.n	8006c68 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bac:	e02e      	b.n	8006c0c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bae:	4b34      	ldr	r3, [pc, #208]	@ (8006c80 <xTaskResumeAll+0x120>)
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	3318      	adds	r3, #24
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7ff f84e 	bl	8005c5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	3304      	adds	r3, #4
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f7ff f849 	bl	8005c5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bce:	2201      	movs	r2, #1
 8006bd0:	409a      	lsls	r2, r3
 8006bd2:	4b2c      	ldr	r3, [pc, #176]	@ (8006c84 <xTaskResumeAll+0x124>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	4a2a      	ldr	r2, [pc, #168]	@ (8006c84 <xTaskResumeAll+0x124>)
 8006bda:	6013      	str	r3, [r2, #0]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006be0:	4613      	mov	r3, r2
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	4413      	add	r3, r2
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	4a27      	ldr	r2, [pc, #156]	@ (8006c88 <xTaskResumeAll+0x128>)
 8006bea:	441a      	add	r2, r3
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	3304      	adds	r3, #4
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	4610      	mov	r0, r2
 8006bf4:	f7fe ffd7 	bl	8005ba6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bfc:	4b23      	ldr	r3, [pc, #140]	@ (8006c8c <xTaskResumeAll+0x12c>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d302      	bcc.n	8006c0c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006c06:	4b22      	ldr	r3, [pc, #136]	@ (8006c90 <xTaskResumeAll+0x130>)
 8006c08:	2201      	movs	r2, #1
 8006c0a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c0c:	4b1c      	ldr	r3, [pc, #112]	@ (8006c80 <xTaskResumeAll+0x120>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1cc      	bne.n	8006bae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d001      	beq.n	8006c1e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006c1a:	f000 fb61 	bl	80072e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006c1e:	4b1d      	ldr	r3, [pc, #116]	@ (8006c94 <xTaskResumeAll+0x134>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d010      	beq.n	8006c4c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006c2a:	f000 f845 	bl	8006cb8 <xTaskIncrementTick>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d002      	beq.n	8006c3a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006c34:	4b16      	ldr	r3, [pc, #88]	@ (8006c90 <xTaskResumeAll+0x130>)
 8006c36:	2201      	movs	r2, #1
 8006c38:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	3b01      	subs	r3, #1
 8006c3e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1f1      	bne.n	8006c2a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006c46:	4b13      	ldr	r3, [pc, #76]	@ (8006c94 <xTaskResumeAll+0x134>)
 8006c48:	2200      	movs	r2, #0
 8006c4a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006c4c:	4b10      	ldr	r3, [pc, #64]	@ (8006c90 <xTaskResumeAll+0x130>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d009      	beq.n	8006c68 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006c54:	2301      	movs	r3, #1
 8006c56:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006c58:	4b0f      	ldr	r3, [pc, #60]	@ (8006c98 <xTaskResumeAll+0x138>)
 8006c5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c5e:	601a      	str	r2, [r3, #0]
 8006c60:	f3bf 8f4f 	dsb	sy
 8006c64:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c68:	f001 f960 	bl	8007f2c <vPortExitCritical>

	return xAlreadyYielded;
 8006c6c:	68bb      	ldr	r3, [r7, #8]
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	20000e00 	.word	0x20000e00
 8006c7c:	20000dd8 	.word	0x20000dd8
 8006c80:	20000d98 	.word	0x20000d98
 8006c84:	20000de0 	.word	0x20000de0
 8006c88:	20000cdc 	.word	0x20000cdc
 8006c8c:	20000cd8 	.word	0x20000cd8
 8006c90:	20000dec 	.word	0x20000dec
 8006c94:	20000de8 	.word	0x20000de8
 8006c98:	e000ed04 	.word	0xe000ed04

08006c9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006ca2:	4b04      	ldr	r3, [pc, #16]	@ (8006cb4 <xTaskGetTickCount+0x18>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006ca8:	687b      	ldr	r3, [r7, #4]
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	370c      	adds	r7, #12
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bc80      	pop	{r7}
 8006cb2:	4770      	bx	lr
 8006cb4:	20000ddc 	.word	0x20000ddc

08006cb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b086      	sub	sp, #24
 8006cbc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cc2:	4b4f      	ldr	r3, [pc, #316]	@ (8006e00 <xTaskIncrementTick+0x148>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	f040 808f 	bne.w	8006dea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ccc:	4b4d      	ldr	r3, [pc, #308]	@ (8006e04 <xTaskIncrementTick+0x14c>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006cd4:	4a4b      	ldr	r2, [pc, #300]	@ (8006e04 <xTaskIncrementTick+0x14c>)
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d121      	bne.n	8006d24 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006ce0:	4b49      	ldr	r3, [pc, #292]	@ (8006e08 <xTaskIncrementTick+0x150>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00b      	beq.n	8006d02 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cee:	f383 8811 	msr	BASEPRI, r3
 8006cf2:	f3bf 8f6f 	isb	sy
 8006cf6:	f3bf 8f4f 	dsb	sy
 8006cfa:	603b      	str	r3, [r7, #0]
}
 8006cfc:	bf00      	nop
 8006cfe:	bf00      	nop
 8006d00:	e7fd      	b.n	8006cfe <xTaskIncrementTick+0x46>
 8006d02:	4b41      	ldr	r3, [pc, #260]	@ (8006e08 <xTaskIncrementTick+0x150>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	60fb      	str	r3, [r7, #12]
 8006d08:	4b40      	ldr	r3, [pc, #256]	@ (8006e0c <xTaskIncrementTick+0x154>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a3e      	ldr	r2, [pc, #248]	@ (8006e08 <xTaskIncrementTick+0x150>)
 8006d0e:	6013      	str	r3, [r2, #0]
 8006d10:	4a3e      	ldr	r2, [pc, #248]	@ (8006e0c <xTaskIncrementTick+0x154>)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6013      	str	r3, [r2, #0]
 8006d16:	4b3e      	ldr	r3, [pc, #248]	@ (8006e10 <xTaskIncrementTick+0x158>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	4a3c      	ldr	r2, [pc, #240]	@ (8006e10 <xTaskIncrementTick+0x158>)
 8006d1e:	6013      	str	r3, [r2, #0]
 8006d20:	f000 fade 	bl	80072e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006d24:	4b3b      	ldr	r3, [pc, #236]	@ (8006e14 <xTaskIncrementTick+0x15c>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	693a      	ldr	r2, [r7, #16]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d348      	bcc.n	8006dc0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d2e:	4b36      	ldr	r3, [pc, #216]	@ (8006e08 <xTaskIncrementTick+0x150>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d104      	bne.n	8006d42 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d38:	4b36      	ldr	r3, [pc, #216]	@ (8006e14 <xTaskIncrementTick+0x15c>)
 8006d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d3e:	601a      	str	r2, [r3, #0]
					break;
 8006d40:	e03e      	b.n	8006dc0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d42:	4b31      	ldr	r3, [pc, #196]	@ (8006e08 <xTaskIncrementTick+0x150>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006d52:	693a      	ldr	r2, [r7, #16]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d203      	bcs.n	8006d62 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006d5a:	4a2e      	ldr	r2, [pc, #184]	@ (8006e14 <xTaskIncrementTick+0x15c>)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006d60:	e02e      	b.n	8006dc0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	3304      	adds	r3, #4
 8006d66:	4618      	mov	r0, r3
 8006d68:	f7fe ff78 	bl	8005c5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d004      	beq.n	8006d7e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	3318      	adds	r3, #24
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f7fe ff6f 	bl	8005c5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d82:	2201      	movs	r2, #1
 8006d84:	409a      	lsls	r2, r3
 8006d86:	4b24      	ldr	r3, [pc, #144]	@ (8006e18 <xTaskIncrementTick+0x160>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	4a22      	ldr	r2, [pc, #136]	@ (8006e18 <xTaskIncrementTick+0x160>)
 8006d8e:	6013      	str	r3, [r2, #0]
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d94:	4613      	mov	r3, r2
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	4413      	add	r3, r2
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	4a1f      	ldr	r2, [pc, #124]	@ (8006e1c <xTaskIncrementTick+0x164>)
 8006d9e:	441a      	add	r2, r3
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	3304      	adds	r3, #4
 8006da4:	4619      	mov	r1, r3
 8006da6:	4610      	mov	r0, r2
 8006da8:	f7fe fefd 	bl	8005ba6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006db0:	4b1b      	ldr	r3, [pc, #108]	@ (8006e20 <xTaskIncrementTick+0x168>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d3b9      	bcc.n	8006d2e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dbe:	e7b6      	b.n	8006d2e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006dc0:	4b17      	ldr	r3, [pc, #92]	@ (8006e20 <xTaskIncrementTick+0x168>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dc6:	4915      	ldr	r1, [pc, #84]	@ (8006e1c <xTaskIncrementTick+0x164>)
 8006dc8:	4613      	mov	r3, r2
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	4413      	add	r3, r2
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	440b      	add	r3, r1
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d901      	bls.n	8006ddc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006ddc:	4b11      	ldr	r3, [pc, #68]	@ (8006e24 <xTaskIncrementTick+0x16c>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d007      	beq.n	8006df4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006de4:	2301      	movs	r3, #1
 8006de6:	617b      	str	r3, [r7, #20]
 8006de8:	e004      	b.n	8006df4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006dea:	4b0f      	ldr	r3, [pc, #60]	@ (8006e28 <xTaskIncrementTick+0x170>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	3301      	adds	r3, #1
 8006df0:	4a0d      	ldr	r2, [pc, #52]	@ (8006e28 <xTaskIncrementTick+0x170>)
 8006df2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006df4:	697b      	ldr	r3, [r7, #20]
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3718      	adds	r7, #24
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	20000e00 	.word	0x20000e00
 8006e04:	20000ddc 	.word	0x20000ddc
 8006e08:	20000d90 	.word	0x20000d90
 8006e0c:	20000d94 	.word	0x20000d94
 8006e10:	20000df0 	.word	0x20000df0
 8006e14:	20000df8 	.word	0x20000df8
 8006e18:	20000de0 	.word	0x20000de0
 8006e1c:	20000cdc 	.word	0x20000cdc
 8006e20:	20000cd8 	.word	0x20000cd8
 8006e24:	20000dec 	.word	0x20000dec
 8006e28:	20000de8 	.word	0x20000de8

08006e2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b087      	sub	sp, #28
 8006e30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006e32:	4b29      	ldr	r3, [pc, #164]	@ (8006ed8 <vTaskSwitchContext+0xac>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d003      	beq.n	8006e42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006e3a:	4b28      	ldr	r3, [pc, #160]	@ (8006edc <vTaskSwitchContext+0xb0>)
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006e40:	e045      	b.n	8006ece <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8006e42:	4b26      	ldr	r3, [pc, #152]	@ (8006edc <vTaskSwitchContext+0xb0>)
 8006e44:	2200      	movs	r2, #0
 8006e46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e48:	4b25      	ldr	r3, [pc, #148]	@ (8006ee0 <vTaskSwitchContext+0xb4>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	fab3 f383 	clz	r3, r3
 8006e54:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006e56:	7afb      	ldrb	r3, [r7, #11]
 8006e58:	f1c3 031f 	rsb	r3, r3, #31
 8006e5c:	617b      	str	r3, [r7, #20]
 8006e5e:	4921      	ldr	r1, [pc, #132]	@ (8006ee4 <vTaskSwitchContext+0xb8>)
 8006e60:	697a      	ldr	r2, [r7, #20]
 8006e62:	4613      	mov	r3, r2
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	4413      	add	r3, r2
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	440b      	add	r3, r1
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d10b      	bne.n	8006e8a <vTaskSwitchContext+0x5e>
	__asm volatile
 8006e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e76:	f383 8811 	msr	BASEPRI, r3
 8006e7a:	f3bf 8f6f 	isb	sy
 8006e7e:	f3bf 8f4f 	dsb	sy
 8006e82:	607b      	str	r3, [r7, #4]
}
 8006e84:	bf00      	nop
 8006e86:	bf00      	nop
 8006e88:	e7fd      	b.n	8006e86 <vTaskSwitchContext+0x5a>
 8006e8a:	697a      	ldr	r2, [r7, #20]
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	4413      	add	r3, r2
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	4a13      	ldr	r2, [pc, #76]	@ (8006ee4 <vTaskSwitchContext+0xb8>)
 8006e96:	4413      	add	r3, r2
 8006e98:	613b      	str	r3, [r7, #16]
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	685a      	ldr	r2, [r3, #4]
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	605a      	str	r2, [r3, #4]
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	685a      	ldr	r2, [r3, #4]
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	3308      	adds	r3, #8
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d104      	bne.n	8006eba <vTaskSwitchContext+0x8e>
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	685a      	ldr	r2, [r3, #4]
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	605a      	str	r2, [r3, #4]
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	4a09      	ldr	r2, [pc, #36]	@ (8006ee8 <vTaskSwitchContext+0xbc>)
 8006ec2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006ec4:	4b08      	ldr	r3, [pc, #32]	@ (8006ee8 <vTaskSwitchContext+0xbc>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	334c      	adds	r3, #76	@ 0x4c
 8006eca:	4a08      	ldr	r2, [pc, #32]	@ (8006eec <vTaskSwitchContext+0xc0>)
 8006ecc:	6013      	str	r3, [r2, #0]
}
 8006ece:	bf00      	nop
 8006ed0:	371c      	adds	r7, #28
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bc80      	pop	{r7}
 8006ed6:	4770      	bx	lr
 8006ed8:	20000e00 	.word	0x20000e00
 8006edc:	20000dec 	.word	0x20000dec
 8006ee0:	20000de0 	.word	0x20000de0
 8006ee4:	20000cdc 	.word	0x20000cdc
 8006ee8:	20000cd8 	.word	0x20000cd8
 8006eec:	20000158 	.word	0x20000158

08006ef0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d10b      	bne.n	8006f18 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f04:	f383 8811 	msr	BASEPRI, r3
 8006f08:	f3bf 8f6f 	isb	sy
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	60fb      	str	r3, [r7, #12]
}
 8006f12:	bf00      	nop
 8006f14:	bf00      	nop
 8006f16:	e7fd      	b.n	8006f14 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f18:	4b07      	ldr	r3, [pc, #28]	@ (8006f38 <vTaskPlaceOnEventList+0x48>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	3318      	adds	r3, #24
 8006f1e:	4619      	mov	r1, r3
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f7fe fe63 	bl	8005bec <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006f26:	2101      	movs	r1, #1
 8006f28:	6838      	ldr	r0, [r7, #0]
 8006f2a:	f000 fa9f 	bl	800746c <prvAddCurrentTaskToDelayedList>
}
 8006f2e:	bf00      	nop
 8006f30:	3710      	adds	r7, #16
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	20000cd8 	.word	0x20000cd8

08006f3c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b086      	sub	sp, #24
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d10b      	bne.n	8006f66 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f52:	f383 8811 	msr	BASEPRI, r3
 8006f56:	f3bf 8f6f 	isb	sy
 8006f5a:	f3bf 8f4f 	dsb	sy
 8006f5e:	617b      	str	r3, [r7, #20]
}
 8006f60:	bf00      	nop
 8006f62:	bf00      	nop
 8006f64:	e7fd      	b.n	8006f62 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f66:	4b0a      	ldr	r3, [pc, #40]	@ (8006f90 <vTaskPlaceOnEventListRestricted+0x54>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	3318      	adds	r3, #24
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	68f8      	ldr	r0, [r7, #12]
 8006f70:	f7fe fe19 	bl	8005ba6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d002      	beq.n	8006f80 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f7e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006f80:	6879      	ldr	r1, [r7, #4]
 8006f82:	68b8      	ldr	r0, [r7, #8]
 8006f84:	f000 fa72 	bl	800746c <prvAddCurrentTaskToDelayedList>
	}
 8006f88:	bf00      	nop
 8006f8a:	3718      	adds	r7, #24
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	20000cd8 	.word	0x20000cd8

08006f94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b086      	sub	sp, #24
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d10b      	bne.n	8006fc2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fae:	f383 8811 	msr	BASEPRI, r3
 8006fb2:	f3bf 8f6f 	isb	sy
 8006fb6:	f3bf 8f4f 	dsb	sy
 8006fba:	60fb      	str	r3, [r7, #12]
}
 8006fbc:	bf00      	nop
 8006fbe:	bf00      	nop
 8006fc0:	e7fd      	b.n	8006fbe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	3318      	adds	r3, #24
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7fe fe48 	bl	8005c5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fcc:	4b1d      	ldr	r3, [pc, #116]	@ (8007044 <xTaskRemoveFromEventList+0xb0>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d11c      	bne.n	800700e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	3304      	adds	r3, #4
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f7fe fe3f 	bl	8005c5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	409a      	lsls	r2, r3
 8006fe6:	4b18      	ldr	r3, [pc, #96]	@ (8007048 <xTaskRemoveFromEventList+0xb4>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	4a16      	ldr	r2, [pc, #88]	@ (8007048 <xTaskRemoveFromEventList+0xb4>)
 8006fee:	6013      	str	r3, [r2, #0]
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	4413      	add	r3, r2
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	4a13      	ldr	r2, [pc, #76]	@ (800704c <xTaskRemoveFromEventList+0xb8>)
 8006ffe:	441a      	add	r2, r3
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	3304      	adds	r3, #4
 8007004:	4619      	mov	r1, r3
 8007006:	4610      	mov	r0, r2
 8007008:	f7fe fdcd 	bl	8005ba6 <vListInsertEnd>
 800700c:	e005      	b.n	800701a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	3318      	adds	r3, #24
 8007012:	4619      	mov	r1, r3
 8007014:	480e      	ldr	r0, [pc, #56]	@ (8007050 <xTaskRemoveFromEventList+0xbc>)
 8007016:	f7fe fdc6 	bl	8005ba6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800701e:	4b0d      	ldr	r3, [pc, #52]	@ (8007054 <xTaskRemoveFromEventList+0xc0>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007024:	429a      	cmp	r2, r3
 8007026:	d905      	bls.n	8007034 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007028:	2301      	movs	r3, #1
 800702a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800702c:	4b0a      	ldr	r3, [pc, #40]	@ (8007058 <xTaskRemoveFromEventList+0xc4>)
 800702e:	2201      	movs	r2, #1
 8007030:	601a      	str	r2, [r3, #0]
 8007032:	e001      	b.n	8007038 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007034:	2300      	movs	r3, #0
 8007036:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007038:	697b      	ldr	r3, [r7, #20]
}
 800703a:	4618      	mov	r0, r3
 800703c:	3718      	adds	r7, #24
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	20000e00 	.word	0x20000e00
 8007048:	20000de0 	.word	0x20000de0
 800704c:	20000cdc 	.word	0x20000cdc
 8007050:	20000d98 	.word	0x20000d98
 8007054:	20000cd8 	.word	0x20000cd8
 8007058:	20000dec 	.word	0x20000dec

0800705c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007064:	4b06      	ldr	r3, [pc, #24]	@ (8007080 <vTaskInternalSetTimeOutState+0x24>)
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800706c:	4b05      	ldr	r3, [pc, #20]	@ (8007084 <vTaskInternalSetTimeOutState+0x28>)
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	605a      	str	r2, [r3, #4]
}
 8007074:	bf00      	nop
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	bc80      	pop	{r7}
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop
 8007080:	20000df0 	.word	0x20000df0
 8007084:	20000ddc 	.word	0x20000ddc

08007088 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b088      	sub	sp, #32
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d10b      	bne.n	80070b0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800709c:	f383 8811 	msr	BASEPRI, r3
 80070a0:	f3bf 8f6f 	isb	sy
 80070a4:	f3bf 8f4f 	dsb	sy
 80070a8:	613b      	str	r3, [r7, #16]
}
 80070aa:	bf00      	nop
 80070ac:	bf00      	nop
 80070ae:	e7fd      	b.n	80070ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d10b      	bne.n	80070ce <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80070b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ba:	f383 8811 	msr	BASEPRI, r3
 80070be:	f3bf 8f6f 	isb	sy
 80070c2:	f3bf 8f4f 	dsb	sy
 80070c6:	60fb      	str	r3, [r7, #12]
}
 80070c8:	bf00      	nop
 80070ca:	bf00      	nop
 80070cc:	e7fd      	b.n	80070ca <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80070ce:	f000 fefd 	bl	8007ecc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80070d2:	4b1d      	ldr	r3, [pc, #116]	@ (8007148 <xTaskCheckForTimeOut+0xc0>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	69ba      	ldr	r2, [r7, #24]
 80070de:	1ad3      	subs	r3, r2, r3
 80070e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ea:	d102      	bne.n	80070f2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80070ec:	2300      	movs	r3, #0
 80070ee:	61fb      	str	r3, [r7, #28]
 80070f0:	e023      	b.n	800713a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	4b15      	ldr	r3, [pc, #84]	@ (800714c <xTaskCheckForTimeOut+0xc4>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d007      	beq.n	800710e <xTaskCheckForTimeOut+0x86>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	69ba      	ldr	r2, [r7, #24]
 8007104:	429a      	cmp	r2, r3
 8007106:	d302      	bcc.n	800710e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007108:	2301      	movs	r3, #1
 800710a:	61fb      	str	r3, [r7, #28]
 800710c:	e015      	b.n	800713a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	697a      	ldr	r2, [r7, #20]
 8007114:	429a      	cmp	r2, r3
 8007116:	d20b      	bcs.n	8007130 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	1ad2      	subs	r2, r2, r3
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f7ff ff99 	bl	800705c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800712a:	2300      	movs	r3, #0
 800712c:	61fb      	str	r3, [r7, #28]
 800712e:	e004      	b.n	800713a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	2200      	movs	r2, #0
 8007134:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007136:	2301      	movs	r3, #1
 8007138:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800713a:	f000 fef7 	bl	8007f2c <vPortExitCritical>

	return xReturn;
 800713e:	69fb      	ldr	r3, [r7, #28]
}
 8007140:	4618      	mov	r0, r3
 8007142:	3720      	adds	r7, #32
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}
 8007148:	20000ddc 	.word	0x20000ddc
 800714c:	20000df0 	.word	0x20000df0

08007150 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007150:	b480      	push	{r7}
 8007152:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007154:	4b03      	ldr	r3, [pc, #12]	@ (8007164 <vTaskMissedYield+0x14>)
 8007156:	2201      	movs	r2, #1
 8007158:	601a      	str	r2, [r3, #0]
}
 800715a:	bf00      	nop
 800715c:	46bd      	mov	sp, r7
 800715e:	bc80      	pop	{r7}
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	20000dec 	.word	0x20000dec

08007168 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007170:	f000 f852 	bl	8007218 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007174:	4b06      	ldr	r3, [pc, #24]	@ (8007190 <prvIdleTask+0x28>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2b01      	cmp	r3, #1
 800717a:	d9f9      	bls.n	8007170 <prvIdleTask+0x8>
			{
				taskYIELD();
 800717c:	4b05      	ldr	r3, [pc, #20]	@ (8007194 <prvIdleTask+0x2c>)
 800717e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007182:	601a      	str	r2, [r3, #0]
 8007184:	f3bf 8f4f 	dsb	sy
 8007188:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800718c:	e7f0      	b.n	8007170 <prvIdleTask+0x8>
 800718e:	bf00      	nop
 8007190:	20000cdc 	.word	0x20000cdc
 8007194:	e000ed04 	.word	0xe000ed04

08007198 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800719e:	2300      	movs	r3, #0
 80071a0:	607b      	str	r3, [r7, #4]
 80071a2:	e00c      	b.n	80071be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	4613      	mov	r3, r2
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	4413      	add	r3, r2
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	4a12      	ldr	r2, [pc, #72]	@ (80071f8 <prvInitialiseTaskLists+0x60>)
 80071b0:	4413      	add	r3, r2
 80071b2:	4618      	mov	r0, r3
 80071b4:	f7fe fccc 	bl	8005b50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	3301      	adds	r3, #1
 80071bc:	607b      	str	r3, [r7, #4]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2b06      	cmp	r3, #6
 80071c2:	d9ef      	bls.n	80071a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80071c4:	480d      	ldr	r0, [pc, #52]	@ (80071fc <prvInitialiseTaskLists+0x64>)
 80071c6:	f7fe fcc3 	bl	8005b50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80071ca:	480d      	ldr	r0, [pc, #52]	@ (8007200 <prvInitialiseTaskLists+0x68>)
 80071cc:	f7fe fcc0 	bl	8005b50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80071d0:	480c      	ldr	r0, [pc, #48]	@ (8007204 <prvInitialiseTaskLists+0x6c>)
 80071d2:	f7fe fcbd 	bl	8005b50 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80071d6:	480c      	ldr	r0, [pc, #48]	@ (8007208 <prvInitialiseTaskLists+0x70>)
 80071d8:	f7fe fcba 	bl	8005b50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80071dc:	480b      	ldr	r0, [pc, #44]	@ (800720c <prvInitialiseTaskLists+0x74>)
 80071de:	f7fe fcb7 	bl	8005b50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80071e2:	4b0b      	ldr	r3, [pc, #44]	@ (8007210 <prvInitialiseTaskLists+0x78>)
 80071e4:	4a05      	ldr	r2, [pc, #20]	@ (80071fc <prvInitialiseTaskLists+0x64>)
 80071e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80071e8:	4b0a      	ldr	r3, [pc, #40]	@ (8007214 <prvInitialiseTaskLists+0x7c>)
 80071ea:	4a05      	ldr	r2, [pc, #20]	@ (8007200 <prvInitialiseTaskLists+0x68>)
 80071ec:	601a      	str	r2, [r3, #0]
}
 80071ee:	bf00      	nop
 80071f0:	3708      	adds	r7, #8
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	20000cdc 	.word	0x20000cdc
 80071fc:	20000d68 	.word	0x20000d68
 8007200:	20000d7c 	.word	0x20000d7c
 8007204:	20000d98 	.word	0x20000d98
 8007208:	20000dac 	.word	0x20000dac
 800720c:	20000dc4 	.word	0x20000dc4
 8007210:	20000d90 	.word	0x20000d90
 8007214:	20000d94 	.word	0x20000d94

08007218 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800721e:	e019      	b.n	8007254 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007220:	f000 fe54 	bl	8007ecc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007224:	4b10      	ldr	r3, [pc, #64]	@ (8007268 <prvCheckTasksWaitingTermination+0x50>)
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	3304      	adds	r3, #4
 8007230:	4618      	mov	r0, r3
 8007232:	f7fe fd13 	bl	8005c5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007236:	4b0d      	ldr	r3, [pc, #52]	@ (800726c <prvCheckTasksWaitingTermination+0x54>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	3b01      	subs	r3, #1
 800723c:	4a0b      	ldr	r2, [pc, #44]	@ (800726c <prvCheckTasksWaitingTermination+0x54>)
 800723e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007240:	4b0b      	ldr	r3, [pc, #44]	@ (8007270 <prvCheckTasksWaitingTermination+0x58>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	3b01      	subs	r3, #1
 8007246:	4a0a      	ldr	r2, [pc, #40]	@ (8007270 <prvCheckTasksWaitingTermination+0x58>)
 8007248:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800724a:	f000 fe6f 	bl	8007f2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 f810 	bl	8007274 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007254:	4b06      	ldr	r3, [pc, #24]	@ (8007270 <prvCheckTasksWaitingTermination+0x58>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d1e1      	bne.n	8007220 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800725c:	bf00      	nop
 800725e:	bf00      	nop
 8007260:	3708      	adds	r7, #8
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	20000dac 	.word	0x20000dac
 800726c:	20000dd8 	.word	0x20000dd8
 8007270:	20000dc0 	.word	0x20000dc0

08007274 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	334c      	adds	r3, #76	@ 0x4c
 8007280:	4618      	mov	r0, r3
 8007282:	f001 f977 	bl	8008574 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800728c:	2b00      	cmp	r3, #0
 800728e:	d108      	bne.n	80072a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007294:	4618      	mov	r0, r3
 8007296:	f000 ffe9 	bl	800826c <vPortFree>
				vPortFree( pxTCB );
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 ffe6 	bl	800826c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80072a0:	e019      	b.n	80072d6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d103      	bne.n	80072b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 ffdd 	bl	800826c <vPortFree>
	}
 80072b2:	e010      	b.n	80072d6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	d00b      	beq.n	80072d6 <prvDeleteTCB+0x62>
	__asm volatile
 80072be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c2:	f383 8811 	msr	BASEPRI, r3
 80072c6:	f3bf 8f6f 	isb	sy
 80072ca:	f3bf 8f4f 	dsb	sy
 80072ce:	60fb      	str	r3, [r7, #12]
}
 80072d0:	bf00      	nop
 80072d2:	bf00      	nop
 80072d4:	e7fd      	b.n	80072d2 <prvDeleteTCB+0x5e>
	}
 80072d6:	bf00      	nop
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
	...

080072e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80072e0:	b480      	push	{r7}
 80072e2:	b083      	sub	sp, #12
 80072e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072e6:	4b0c      	ldr	r3, [pc, #48]	@ (8007318 <prvResetNextTaskUnblockTime+0x38>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d104      	bne.n	80072fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80072f0:	4b0a      	ldr	r3, [pc, #40]	@ (800731c <prvResetNextTaskUnblockTime+0x3c>)
 80072f2:	f04f 32ff 	mov.w	r2, #4294967295
 80072f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80072f8:	e008      	b.n	800730c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072fa:	4b07      	ldr	r3, [pc, #28]	@ (8007318 <prvResetNextTaskUnblockTime+0x38>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	4a04      	ldr	r2, [pc, #16]	@ (800731c <prvResetNextTaskUnblockTime+0x3c>)
 800730a:	6013      	str	r3, [r2, #0]
}
 800730c:	bf00      	nop
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	bc80      	pop	{r7}
 8007314:	4770      	bx	lr
 8007316:	bf00      	nop
 8007318:	20000d90 	.word	0x20000d90
 800731c:	20000df8 	.word	0x20000df8

08007320 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007326:	4b0b      	ldr	r3, [pc, #44]	@ (8007354 <xTaskGetSchedulerState+0x34>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d102      	bne.n	8007334 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800732e:	2301      	movs	r3, #1
 8007330:	607b      	str	r3, [r7, #4]
 8007332:	e008      	b.n	8007346 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007334:	4b08      	ldr	r3, [pc, #32]	@ (8007358 <xTaskGetSchedulerState+0x38>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d102      	bne.n	8007342 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800733c:	2302      	movs	r3, #2
 800733e:	607b      	str	r3, [r7, #4]
 8007340:	e001      	b.n	8007346 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007342:	2300      	movs	r3, #0
 8007344:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007346:	687b      	ldr	r3, [r7, #4]
	}
 8007348:	4618      	mov	r0, r3
 800734a:	370c      	adds	r7, #12
 800734c:	46bd      	mov	sp, r7
 800734e:	bc80      	pop	{r7}
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	20000de4 	.word	0x20000de4
 8007358:	20000e00 	.word	0x20000e00

0800735c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800735c:	b580      	push	{r7, lr}
 800735e:	b086      	sub	sp, #24
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007368:	2300      	movs	r3, #0
 800736a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d070      	beq.n	8007454 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007372:	4b3b      	ldr	r3, [pc, #236]	@ (8007460 <xTaskPriorityDisinherit+0x104>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	693a      	ldr	r2, [r7, #16]
 8007378:	429a      	cmp	r2, r3
 800737a:	d00b      	beq.n	8007394 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800737c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007380:	f383 8811 	msr	BASEPRI, r3
 8007384:	f3bf 8f6f 	isb	sy
 8007388:	f3bf 8f4f 	dsb	sy
 800738c:	60fb      	str	r3, [r7, #12]
}
 800738e:	bf00      	nop
 8007390:	bf00      	nop
 8007392:	e7fd      	b.n	8007390 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007398:	2b00      	cmp	r3, #0
 800739a:	d10b      	bne.n	80073b4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800739c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073a0:	f383 8811 	msr	BASEPRI, r3
 80073a4:	f3bf 8f6f 	isb	sy
 80073a8:	f3bf 8f4f 	dsb	sy
 80073ac:	60bb      	str	r3, [r7, #8]
}
 80073ae:	bf00      	nop
 80073b0:	bf00      	nop
 80073b2:	e7fd      	b.n	80073b0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073b8:	1e5a      	subs	r2, r3, #1
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d044      	beq.n	8007454 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d140      	bne.n	8007454 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	3304      	adds	r3, #4
 80073d6:	4618      	mov	r0, r3
 80073d8:	f7fe fc40 	bl	8005c5c <uxListRemove>
 80073dc:	4603      	mov	r3, r0
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d115      	bne.n	800740e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073e6:	491f      	ldr	r1, [pc, #124]	@ (8007464 <xTaskPriorityDisinherit+0x108>)
 80073e8:	4613      	mov	r3, r2
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	4413      	add	r3, r2
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	440b      	add	r3, r1
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d10a      	bne.n	800740e <xTaskPriorityDisinherit+0xb2>
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073fc:	2201      	movs	r2, #1
 80073fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007402:	43da      	mvns	r2, r3
 8007404:	4b18      	ldr	r3, [pc, #96]	@ (8007468 <xTaskPriorityDisinherit+0x10c>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4013      	ands	r3, r2
 800740a:	4a17      	ldr	r2, [pc, #92]	@ (8007468 <xTaskPriorityDisinherit+0x10c>)
 800740c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800741a:	f1c3 0207 	rsb	r2, r3, #7
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007426:	2201      	movs	r2, #1
 8007428:	409a      	lsls	r2, r3
 800742a:	4b0f      	ldr	r3, [pc, #60]	@ (8007468 <xTaskPriorityDisinherit+0x10c>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4313      	orrs	r3, r2
 8007430:	4a0d      	ldr	r2, [pc, #52]	@ (8007468 <xTaskPriorityDisinherit+0x10c>)
 8007432:	6013      	str	r3, [r2, #0]
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007438:	4613      	mov	r3, r2
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	4413      	add	r3, r2
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	4a08      	ldr	r2, [pc, #32]	@ (8007464 <xTaskPriorityDisinherit+0x108>)
 8007442:	441a      	add	r2, r3
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	3304      	adds	r3, #4
 8007448:	4619      	mov	r1, r3
 800744a:	4610      	mov	r0, r2
 800744c:	f7fe fbab 	bl	8005ba6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007450:	2301      	movs	r3, #1
 8007452:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007454:	697b      	ldr	r3, [r7, #20]
	}
 8007456:	4618      	mov	r0, r3
 8007458:	3718      	adds	r7, #24
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	20000cd8 	.word	0x20000cd8
 8007464:	20000cdc 	.word	0x20000cdc
 8007468:	20000de0 	.word	0x20000de0

0800746c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007476:	4b29      	ldr	r3, [pc, #164]	@ (800751c <prvAddCurrentTaskToDelayedList+0xb0>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800747c:	4b28      	ldr	r3, [pc, #160]	@ (8007520 <prvAddCurrentTaskToDelayedList+0xb4>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	3304      	adds	r3, #4
 8007482:	4618      	mov	r0, r3
 8007484:	f7fe fbea 	bl	8005c5c <uxListRemove>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d10b      	bne.n	80074a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800748e:	4b24      	ldr	r3, [pc, #144]	@ (8007520 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007494:	2201      	movs	r2, #1
 8007496:	fa02 f303 	lsl.w	r3, r2, r3
 800749a:	43da      	mvns	r2, r3
 800749c:	4b21      	ldr	r3, [pc, #132]	@ (8007524 <prvAddCurrentTaskToDelayedList+0xb8>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4013      	ands	r3, r2
 80074a2:	4a20      	ldr	r2, [pc, #128]	@ (8007524 <prvAddCurrentTaskToDelayedList+0xb8>)
 80074a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ac:	d10a      	bne.n	80074c4 <prvAddCurrentTaskToDelayedList+0x58>
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d007      	beq.n	80074c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074b4:	4b1a      	ldr	r3, [pc, #104]	@ (8007520 <prvAddCurrentTaskToDelayedList+0xb4>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	3304      	adds	r3, #4
 80074ba:	4619      	mov	r1, r3
 80074bc:	481a      	ldr	r0, [pc, #104]	@ (8007528 <prvAddCurrentTaskToDelayedList+0xbc>)
 80074be:	f7fe fb72 	bl	8005ba6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80074c2:	e026      	b.n	8007512 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4413      	add	r3, r2
 80074ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80074cc:	4b14      	ldr	r3, [pc, #80]	@ (8007520 <prvAddCurrentTaskToDelayedList+0xb4>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	68ba      	ldr	r2, [r7, #8]
 80074d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80074d4:	68ba      	ldr	r2, [r7, #8]
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d209      	bcs.n	80074f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074dc:	4b13      	ldr	r3, [pc, #76]	@ (800752c <prvAddCurrentTaskToDelayedList+0xc0>)
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	4b0f      	ldr	r3, [pc, #60]	@ (8007520 <prvAddCurrentTaskToDelayedList+0xb4>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	3304      	adds	r3, #4
 80074e6:	4619      	mov	r1, r3
 80074e8:	4610      	mov	r0, r2
 80074ea:	f7fe fb7f 	bl	8005bec <vListInsert>
}
 80074ee:	e010      	b.n	8007512 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074f0:	4b0f      	ldr	r3, [pc, #60]	@ (8007530 <prvAddCurrentTaskToDelayedList+0xc4>)
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	4b0a      	ldr	r3, [pc, #40]	@ (8007520 <prvAddCurrentTaskToDelayedList+0xb4>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	3304      	adds	r3, #4
 80074fa:	4619      	mov	r1, r3
 80074fc:	4610      	mov	r0, r2
 80074fe:	f7fe fb75 	bl	8005bec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007502:	4b0c      	ldr	r3, [pc, #48]	@ (8007534 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	68ba      	ldr	r2, [r7, #8]
 8007508:	429a      	cmp	r2, r3
 800750a:	d202      	bcs.n	8007512 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800750c:	4a09      	ldr	r2, [pc, #36]	@ (8007534 <prvAddCurrentTaskToDelayedList+0xc8>)
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	6013      	str	r3, [r2, #0]
}
 8007512:	bf00      	nop
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	20000ddc 	.word	0x20000ddc
 8007520:	20000cd8 	.word	0x20000cd8
 8007524:	20000de0 	.word	0x20000de0
 8007528:	20000dc4 	.word	0x20000dc4
 800752c:	20000d94 	.word	0x20000d94
 8007530:	20000d90 	.word	0x20000d90
 8007534:	20000df8 	.word	0x20000df8

08007538 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b08a      	sub	sp, #40	@ 0x28
 800753c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800753e:	2300      	movs	r3, #0
 8007540:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007542:	f000 fb93 	bl	8007c6c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007546:	4b1d      	ldr	r3, [pc, #116]	@ (80075bc <xTimerCreateTimerTask+0x84>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d021      	beq.n	8007592 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800754e:	2300      	movs	r3, #0
 8007550:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007552:	2300      	movs	r3, #0
 8007554:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007556:	1d3a      	adds	r2, r7, #4
 8007558:	f107 0108 	add.w	r1, r7, #8
 800755c:	f107 030c 	add.w	r3, r7, #12
 8007560:	4618      	mov	r0, r3
 8007562:	f7f9 faf9 	bl	8000b58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007566:	6879      	ldr	r1, [r7, #4]
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	68fa      	ldr	r2, [r7, #12]
 800756c:	9202      	str	r2, [sp, #8]
 800756e:	9301      	str	r3, [sp, #4]
 8007570:	2302      	movs	r3, #2
 8007572:	9300      	str	r3, [sp, #0]
 8007574:	2300      	movs	r3, #0
 8007576:	460a      	mov	r2, r1
 8007578:	4911      	ldr	r1, [pc, #68]	@ (80075c0 <xTimerCreateTimerTask+0x88>)
 800757a:	4812      	ldr	r0, [pc, #72]	@ (80075c4 <xTimerCreateTimerTask+0x8c>)
 800757c:	f7ff f88c 	bl	8006698 <xTaskCreateStatic>
 8007580:	4603      	mov	r3, r0
 8007582:	4a11      	ldr	r2, [pc, #68]	@ (80075c8 <xTimerCreateTimerTask+0x90>)
 8007584:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007586:	4b10      	ldr	r3, [pc, #64]	@ (80075c8 <xTimerCreateTimerTask+0x90>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d001      	beq.n	8007592 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800758e:	2301      	movs	r3, #1
 8007590:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d10b      	bne.n	80075b0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800759c:	f383 8811 	msr	BASEPRI, r3
 80075a0:	f3bf 8f6f 	isb	sy
 80075a4:	f3bf 8f4f 	dsb	sy
 80075a8:	613b      	str	r3, [r7, #16]
}
 80075aa:	bf00      	nop
 80075ac:	bf00      	nop
 80075ae:	e7fd      	b.n	80075ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 80075b0:	697b      	ldr	r3, [r7, #20]
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3718      	adds	r7, #24
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	20000e34 	.word	0x20000e34
 80075c0:	08009714 	.word	0x08009714
 80075c4:	08007841 	.word	0x08007841
 80075c8:	20000e38 	.word	0x20000e38

080075cc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b088      	sub	sp, #32
 80075d0:	af02      	add	r7, sp, #8
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	607a      	str	r2, [r7, #4]
 80075d8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80075da:	2028      	movs	r0, #40	@ 0x28
 80075dc:	f000 fd78 	bl	80080d0 <pvPortMalloc>
 80075e0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d00d      	beq.n	8007604 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	9301      	str	r3, [sp, #4]
 80075f4:	6a3b      	ldr	r3, [r7, #32]
 80075f6:	9300      	str	r3, [sp, #0]
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	68b9      	ldr	r1, [r7, #8]
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	f000 f845 	bl	800768e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007604:	697b      	ldr	r3, [r7, #20]
	}
 8007606:	4618      	mov	r0, r3
 8007608:	3718      	adds	r7, #24
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}

0800760e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800760e:	b580      	push	{r7, lr}
 8007610:	b08a      	sub	sp, #40	@ 0x28
 8007612:	af02      	add	r7, sp, #8
 8007614:	60f8      	str	r0, [r7, #12]
 8007616:	60b9      	str	r1, [r7, #8]
 8007618:	607a      	str	r2, [r7, #4]
 800761a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800761c:	2328      	movs	r3, #40	@ 0x28
 800761e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	2b28      	cmp	r3, #40	@ 0x28
 8007624:	d00b      	beq.n	800763e <xTimerCreateStatic+0x30>
	__asm volatile
 8007626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800762a:	f383 8811 	msr	BASEPRI, r3
 800762e:	f3bf 8f6f 	isb	sy
 8007632:	f3bf 8f4f 	dsb	sy
 8007636:	61bb      	str	r3, [r7, #24]
}
 8007638:	bf00      	nop
 800763a:	bf00      	nop
 800763c:	e7fd      	b.n	800763a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800763e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8007640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007642:	2b00      	cmp	r3, #0
 8007644:	d10b      	bne.n	800765e <xTimerCreateStatic+0x50>
	__asm volatile
 8007646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800764a:	f383 8811 	msr	BASEPRI, r3
 800764e:	f3bf 8f6f 	isb	sy
 8007652:	f3bf 8f4f 	dsb	sy
 8007656:	617b      	str	r3, [r7, #20]
}
 8007658:	bf00      	nop
 800765a:	bf00      	nop
 800765c:	e7fd      	b.n	800765a <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800765e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007660:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d00d      	beq.n	8007684 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	2202      	movs	r2, #2
 800766c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	9301      	str	r3, [sp, #4]
 8007674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007676:	9300      	str	r3, [sp, #0]
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	68b9      	ldr	r1, [r7, #8]
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f000 f805 	bl	800768e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007684:	69fb      	ldr	r3, [r7, #28]
	}
 8007686:	4618      	mov	r0, r3
 8007688:	3720      	adds	r7, #32
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800768e:	b580      	push	{r7, lr}
 8007690:	b086      	sub	sp, #24
 8007692:	af00      	add	r7, sp, #0
 8007694:	60f8      	str	r0, [r7, #12]
 8007696:	60b9      	str	r1, [r7, #8]
 8007698:	607a      	str	r2, [r7, #4]
 800769a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d10b      	bne.n	80076ba <prvInitialiseNewTimer+0x2c>
	__asm volatile
 80076a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076a6:	f383 8811 	msr	BASEPRI, r3
 80076aa:	f3bf 8f6f 	isb	sy
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	617b      	str	r3, [r7, #20]
}
 80076b4:	bf00      	nop
 80076b6:	bf00      	nop
 80076b8:	e7fd      	b.n	80076b6 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80076ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d01e      	beq.n	80076fe <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80076c0:	f000 fad4 	bl	8007c6c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80076c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c6:	68fa      	ldr	r2, [r7, #12]
 80076c8:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80076ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076cc:	68ba      	ldr	r2, [r7, #8]
 80076ce:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80076d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d2:	683a      	ldr	r2, [r7, #0]
 80076d4:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80076d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d8:	6a3a      	ldr	r2, [r7, #32]
 80076da:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80076dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076de:	3304      	adds	r3, #4
 80076e0:	4618      	mov	r0, r3
 80076e2:	f7fe fa54 	bl	8005b8e <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d008      	beq.n	80076fe <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80076ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80076f2:	f043 0304 	orr.w	r3, r3, #4
 80076f6:	b2da      	uxtb	r2, r3
 80076f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80076fe:	bf00      	nop
 8007700:	3718      	adds	r7, #24
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
	...

08007708 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b08a      	sub	sp, #40	@ 0x28
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	607a      	str	r2, [r7, #4]
 8007714:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007716:	2300      	movs	r3, #0
 8007718:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d10b      	bne.n	8007738 <xTimerGenericCommand+0x30>
	__asm volatile
 8007720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007724:	f383 8811 	msr	BASEPRI, r3
 8007728:	f3bf 8f6f 	isb	sy
 800772c:	f3bf 8f4f 	dsb	sy
 8007730:	623b      	str	r3, [r7, #32]
}
 8007732:	bf00      	nop
 8007734:	bf00      	nop
 8007736:	e7fd      	b.n	8007734 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007738:	4b19      	ldr	r3, [pc, #100]	@ (80077a0 <xTimerGenericCommand+0x98>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d02a      	beq.n	8007796 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	2b05      	cmp	r3, #5
 8007750:	dc18      	bgt.n	8007784 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007752:	f7ff fde5 	bl	8007320 <xTaskGetSchedulerState>
 8007756:	4603      	mov	r3, r0
 8007758:	2b02      	cmp	r3, #2
 800775a:	d109      	bne.n	8007770 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800775c:	4b10      	ldr	r3, [pc, #64]	@ (80077a0 <xTimerGenericCommand+0x98>)
 800775e:	6818      	ldr	r0, [r3, #0]
 8007760:	f107 0114 	add.w	r1, r7, #20
 8007764:	2300      	movs	r3, #0
 8007766:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007768:	f7fe fba8 	bl	8005ebc <xQueueGenericSend>
 800776c:	6278      	str	r0, [r7, #36]	@ 0x24
 800776e:	e012      	b.n	8007796 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007770:	4b0b      	ldr	r3, [pc, #44]	@ (80077a0 <xTimerGenericCommand+0x98>)
 8007772:	6818      	ldr	r0, [r3, #0]
 8007774:	f107 0114 	add.w	r1, r7, #20
 8007778:	2300      	movs	r3, #0
 800777a:	2200      	movs	r2, #0
 800777c:	f7fe fb9e 	bl	8005ebc <xQueueGenericSend>
 8007780:	6278      	str	r0, [r7, #36]	@ 0x24
 8007782:	e008      	b.n	8007796 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007784:	4b06      	ldr	r3, [pc, #24]	@ (80077a0 <xTimerGenericCommand+0x98>)
 8007786:	6818      	ldr	r0, [r3, #0]
 8007788:	f107 0114 	add.w	r1, r7, #20
 800778c:	2300      	movs	r3, #0
 800778e:	683a      	ldr	r2, [r7, #0]
 8007790:	f7fe fc96 	bl	80060c0 <xQueueGenericSendFromISR>
 8007794:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007798:	4618      	mov	r0, r3
 800779a:	3728      	adds	r7, #40	@ 0x28
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}
 80077a0:	20000e34 	.word	0x20000e34

080077a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b088      	sub	sp, #32
 80077a8:	af02      	add	r7, sp, #8
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077ae:	4b23      	ldr	r3, [pc, #140]	@ (800783c <prvProcessExpiredTimer+0x98>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	3304      	adds	r3, #4
 80077bc:	4618      	mov	r0, r3
 80077be:	f7fe fa4d 	bl	8005c5c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80077c8:	f003 0304 	and.w	r3, r3, #4
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d023      	beq.n	8007818 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	699a      	ldr	r2, [r3, #24]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	18d1      	adds	r1, r2, r3
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	683a      	ldr	r2, [r7, #0]
 80077dc:	6978      	ldr	r0, [r7, #20]
 80077de:	f000 f8d3 	bl	8007988 <prvInsertTimerInActiveList>
 80077e2:	4603      	mov	r3, r0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d020      	beq.n	800782a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80077e8:	2300      	movs	r3, #0
 80077ea:	9300      	str	r3, [sp, #0]
 80077ec:	2300      	movs	r3, #0
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	2100      	movs	r1, #0
 80077f2:	6978      	ldr	r0, [r7, #20]
 80077f4:	f7ff ff88 	bl	8007708 <xTimerGenericCommand>
 80077f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d114      	bne.n	800782a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007804:	f383 8811 	msr	BASEPRI, r3
 8007808:	f3bf 8f6f 	isb	sy
 800780c:	f3bf 8f4f 	dsb	sy
 8007810:	60fb      	str	r3, [r7, #12]
}
 8007812:	bf00      	nop
 8007814:	bf00      	nop
 8007816:	e7fd      	b.n	8007814 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800781e:	f023 0301 	bic.w	r3, r3, #1
 8007822:	b2da      	uxtb	r2, r3
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	6a1b      	ldr	r3, [r3, #32]
 800782e:	6978      	ldr	r0, [r7, #20]
 8007830:	4798      	blx	r3
}
 8007832:	bf00      	nop
 8007834:	3718      	adds	r7, #24
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	20000e2c 	.word	0x20000e2c

08007840 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007848:	f107 0308 	add.w	r3, r7, #8
 800784c:	4618      	mov	r0, r3
 800784e:	f000 f859 	bl	8007904 <prvGetNextExpireTime>
 8007852:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	4619      	mov	r1, r3
 8007858:	68f8      	ldr	r0, [r7, #12]
 800785a:	f000 f805 	bl	8007868 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800785e:	f000 f8d5 	bl	8007a0c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007862:	bf00      	nop
 8007864:	e7f0      	b.n	8007848 <prvTimerTask+0x8>
	...

08007868 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007872:	f7ff f967 	bl	8006b44 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007876:	f107 0308 	add.w	r3, r7, #8
 800787a:	4618      	mov	r0, r3
 800787c:	f000 f864 	bl	8007948 <prvSampleTimeNow>
 8007880:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d130      	bne.n	80078ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10a      	bne.n	80078a4 <prvProcessTimerOrBlockTask+0x3c>
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	429a      	cmp	r2, r3
 8007894:	d806      	bhi.n	80078a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007896:	f7ff f963 	bl	8006b60 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800789a:	68f9      	ldr	r1, [r7, #12]
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f7ff ff81 	bl	80077a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80078a2:	e024      	b.n	80078ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d008      	beq.n	80078bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80078aa:	4b13      	ldr	r3, [pc, #76]	@ (80078f8 <prvProcessTimerOrBlockTask+0x90>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d101      	bne.n	80078b8 <prvProcessTimerOrBlockTask+0x50>
 80078b4:	2301      	movs	r3, #1
 80078b6:	e000      	b.n	80078ba <prvProcessTimerOrBlockTask+0x52>
 80078b8:	2300      	movs	r3, #0
 80078ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80078bc:	4b0f      	ldr	r3, [pc, #60]	@ (80078fc <prvProcessTimerOrBlockTask+0x94>)
 80078be:	6818      	ldr	r0, [r3, #0]
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	683a      	ldr	r2, [r7, #0]
 80078c8:	4619      	mov	r1, r3
 80078ca:	f7fe feb1 	bl	8006630 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80078ce:	f7ff f947 	bl	8006b60 <xTaskResumeAll>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d10a      	bne.n	80078ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80078d8:	4b09      	ldr	r3, [pc, #36]	@ (8007900 <prvProcessTimerOrBlockTask+0x98>)
 80078da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078de:	601a      	str	r2, [r3, #0]
 80078e0:	f3bf 8f4f 	dsb	sy
 80078e4:	f3bf 8f6f 	isb	sy
}
 80078e8:	e001      	b.n	80078ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80078ea:	f7ff f939 	bl	8006b60 <xTaskResumeAll>
}
 80078ee:	bf00      	nop
 80078f0:	3710      	adds	r7, #16
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	20000e30 	.word	0x20000e30
 80078fc:	20000e34 	.word	0x20000e34
 8007900:	e000ed04 	.word	0xe000ed04

08007904 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007904:	b480      	push	{r7}
 8007906:	b085      	sub	sp, #20
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800790c:	4b0d      	ldr	r3, [pc, #52]	@ (8007944 <prvGetNextExpireTime+0x40>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d101      	bne.n	800791a <prvGetNextExpireTime+0x16>
 8007916:	2201      	movs	r2, #1
 8007918:	e000      	b.n	800791c <prvGetNextExpireTime+0x18>
 800791a:	2200      	movs	r2, #0
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d105      	bne.n	8007934 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007928:	4b06      	ldr	r3, [pc, #24]	@ (8007944 <prvGetNextExpireTime+0x40>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	60fb      	str	r3, [r7, #12]
 8007932:	e001      	b.n	8007938 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007934:	2300      	movs	r3, #0
 8007936:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007938:	68fb      	ldr	r3, [r7, #12]
}
 800793a:	4618      	mov	r0, r3
 800793c:	3714      	adds	r7, #20
 800793e:	46bd      	mov	sp, r7
 8007940:	bc80      	pop	{r7}
 8007942:	4770      	bx	lr
 8007944:	20000e2c 	.word	0x20000e2c

08007948 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007950:	f7ff f9a4 	bl	8006c9c <xTaskGetTickCount>
 8007954:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007956:	4b0b      	ldr	r3, [pc, #44]	@ (8007984 <prvSampleTimeNow+0x3c>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	429a      	cmp	r2, r3
 800795e:	d205      	bcs.n	800796c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007960:	f000 f91e 	bl	8007ba0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	601a      	str	r2, [r3, #0]
 800796a:	e002      	b.n	8007972 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007972:	4a04      	ldr	r2, [pc, #16]	@ (8007984 <prvSampleTimeNow+0x3c>)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007978:	68fb      	ldr	r3, [r7, #12]
}
 800797a:	4618      	mov	r0, r3
 800797c:	3710      	adds	r7, #16
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	20000e3c 	.word	0x20000e3c

08007988 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b086      	sub	sp, #24
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	607a      	str	r2, [r7, #4]
 8007994:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007996:	2300      	movs	r3, #0
 8007998:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	68ba      	ldr	r2, [r7, #8]
 800799e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80079a6:	68ba      	ldr	r2, [r7, #8]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d812      	bhi.n	80079d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	1ad2      	subs	r2, r2, r3
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	699b      	ldr	r3, [r3, #24]
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d302      	bcc.n	80079c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80079bc:	2301      	movs	r3, #1
 80079be:	617b      	str	r3, [r7, #20]
 80079c0:	e01b      	b.n	80079fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80079c2:	4b10      	ldr	r3, [pc, #64]	@ (8007a04 <prvInsertTimerInActiveList+0x7c>)
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	3304      	adds	r3, #4
 80079ca:	4619      	mov	r1, r3
 80079cc:	4610      	mov	r0, r2
 80079ce:	f7fe f90d 	bl	8005bec <vListInsert>
 80079d2:	e012      	b.n	80079fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d206      	bcs.n	80079ea <prvInsertTimerInActiveList+0x62>
 80079dc:	68ba      	ldr	r2, [r7, #8]
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d302      	bcc.n	80079ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80079e4:	2301      	movs	r3, #1
 80079e6:	617b      	str	r3, [r7, #20]
 80079e8:	e007      	b.n	80079fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80079ea:	4b07      	ldr	r3, [pc, #28]	@ (8007a08 <prvInsertTimerInActiveList+0x80>)
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	3304      	adds	r3, #4
 80079f2:	4619      	mov	r1, r3
 80079f4:	4610      	mov	r0, r2
 80079f6:	f7fe f8f9 	bl	8005bec <vListInsert>
		}
	}

	return xProcessTimerNow;
 80079fa:	697b      	ldr	r3, [r7, #20]
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3718      	adds	r7, #24
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}
 8007a04:	20000e30 	.word	0x20000e30
 8007a08:	20000e2c 	.word	0x20000e2c

08007a0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b08c      	sub	sp, #48	@ 0x30
 8007a10:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007a12:	e0b2      	b.n	8007b7a <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f2c0 80af 	blt.w	8007b7a <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a22:	695b      	ldr	r3, [r3, #20]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d004      	beq.n	8007a32 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a2a:	3304      	adds	r3, #4
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f7fe f915 	bl	8005c5c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a32:	1d3b      	adds	r3, r7, #4
 8007a34:	4618      	mov	r0, r3
 8007a36:	f7ff ff87 	bl	8007948 <prvSampleTimeNow>
 8007a3a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	2b09      	cmp	r3, #9
 8007a40:	f200 8098 	bhi.w	8007b74 <prvProcessReceivedCommands+0x168>
 8007a44:	a201      	add	r2, pc, #4	@ (adr r2, 8007a4c <prvProcessReceivedCommands+0x40>)
 8007a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a4a:	bf00      	nop
 8007a4c:	08007a75 	.word	0x08007a75
 8007a50:	08007a75 	.word	0x08007a75
 8007a54:	08007a75 	.word	0x08007a75
 8007a58:	08007aeb 	.word	0x08007aeb
 8007a5c:	08007aff 	.word	0x08007aff
 8007a60:	08007b4b 	.word	0x08007b4b
 8007a64:	08007a75 	.word	0x08007a75
 8007a68:	08007a75 	.word	0x08007a75
 8007a6c:	08007aeb 	.word	0x08007aeb
 8007a70:	08007aff 	.word	0x08007aff
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a76:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007a7a:	f043 0301 	orr.w	r3, r3, #1
 8007a7e:	b2da      	uxtb	r2, r3
 8007a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a8a:	699b      	ldr	r3, [r3, #24]
 8007a8c:	18d1      	adds	r1, r2, r3
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6a3a      	ldr	r2, [r7, #32]
 8007a92:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007a94:	f7ff ff78 	bl	8007988 <prvInsertTimerInActiveList>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d06c      	beq.n	8007b78 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa0:	6a1b      	ldr	r3, [r3, #32]
 8007aa2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007aa4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007aac:	f003 0304 	and.w	r3, r3, #4
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d061      	beq.n	8007b78 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab8:	699b      	ldr	r3, [r3, #24]
 8007aba:	441a      	add	r2, r3
 8007abc:	2300      	movs	r3, #0
 8007abe:	9300      	str	r3, [sp, #0]
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	2100      	movs	r1, #0
 8007ac4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007ac6:	f7ff fe1f 	bl	8007708 <xTimerGenericCommand>
 8007aca:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d152      	bne.n	8007b78 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 8007ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad6:	f383 8811 	msr	BASEPRI, r3
 8007ada:	f3bf 8f6f 	isb	sy
 8007ade:	f3bf 8f4f 	dsb	sy
 8007ae2:	61bb      	str	r3, [r7, #24]
}
 8007ae4:	bf00      	nop
 8007ae6:	bf00      	nop
 8007ae8:	e7fd      	b.n	8007ae6 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007af0:	f023 0301 	bic.w	r3, r3, #1
 8007af4:	b2da      	uxtb	r2, r3
 8007af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8007afc:	e03d      	b.n	8007b7a <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b00:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007b04:	f043 0301 	orr.w	r3, r3, #1
 8007b08:	b2da      	uxtb	r2, r3
 8007b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b14:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b18:	699b      	ldr	r3, [r3, #24]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d10b      	bne.n	8007b36 <prvProcessReceivedCommands+0x12a>
	__asm volatile
 8007b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b22:	f383 8811 	msr	BASEPRI, r3
 8007b26:	f3bf 8f6f 	isb	sy
 8007b2a:	f3bf 8f4f 	dsb	sy
 8007b2e:	617b      	str	r3, [r7, #20]
}
 8007b30:	bf00      	nop
 8007b32:	bf00      	nop
 8007b34:	e7fd      	b.n	8007b32 <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b38:	699a      	ldr	r2, [r3, #24]
 8007b3a:	6a3b      	ldr	r3, [r7, #32]
 8007b3c:	18d1      	adds	r1, r2, r3
 8007b3e:	6a3b      	ldr	r3, [r7, #32]
 8007b40:	6a3a      	ldr	r2, [r7, #32]
 8007b42:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007b44:	f7ff ff20 	bl	8007988 <prvInsertTimerInActiveList>
					break;
 8007b48:	e017      	b.n	8007b7a <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b4c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007b50:	f003 0302 	and.w	r3, r3, #2
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d103      	bne.n	8007b60 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 8007b58:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007b5a:	f000 fb87 	bl	800826c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007b5e:	e00c      	b.n	8007b7a <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b62:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007b66:	f023 0301 	bic.w	r3, r3, #1
 8007b6a:	b2da      	uxtb	r2, r3
 8007b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8007b72:	e002      	b.n	8007b7a <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8007b74:	bf00      	nop
 8007b76:	e000      	b.n	8007b7a <prvProcessReceivedCommands+0x16e>
					break;
 8007b78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b7a:	4b08      	ldr	r3, [pc, #32]	@ (8007b9c <prvProcessReceivedCommands+0x190>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f107 0108 	add.w	r1, r7, #8
 8007b82:	2200      	movs	r2, #0
 8007b84:	4618      	mov	r0, r3
 8007b86:	f7fe fb39 	bl	80061fc <xQueueReceive>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f47f af41 	bne.w	8007a14 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007b92:	bf00      	nop
 8007b94:	bf00      	nop
 8007b96:	3728      	adds	r7, #40	@ 0x28
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}
 8007b9c:	20000e34 	.word	0x20000e34

08007ba0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b088      	sub	sp, #32
 8007ba4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007ba6:	e049      	b.n	8007c3c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ba8:	4b2e      	ldr	r3, [pc, #184]	@ (8007c64 <prvSwitchTimerLists+0xc4>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bb2:	4b2c      	ldr	r3, [pc, #176]	@ (8007c64 <prvSwitchTimerLists+0xc4>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	3304      	adds	r3, #4
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7fe f84b 	bl	8005c5c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6a1b      	ldr	r3, [r3, #32]
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007bd4:	f003 0304 	and.w	r3, r3, #4
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d02f      	beq.n	8007c3c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	699b      	ldr	r3, [r3, #24]
 8007be0:	693a      	ldr	r2, [r7, #16]
 8007be2:	4413      	add	r3, r2
 8007be4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007be6:	68ba      	ldr	r2, [r7, #8]
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d90e      	bls.n	8007c0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	68ba      	ldr	r2, [r7, #8]
 8007bf2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007bfa:	4b1a      	ldr	r3, [pc, #104]	@ (8007c64 <prvSwitchTimerLists+0xc4>)
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	3304      	adds	r3, #4
 8007c02:	4619      	mov	r1, r3
 8007c04:	4610      	mov	r0, r2
 8007c06:	f7fd fff1 	bl	8005bec <vListInsert>
 8007c0a:	e017      	b.n	8007c3c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	9300      	str	r3, [sp, #0]
 8007c10:	2300      	movs	r3, #0
 8007c12:	693a      	ldr	r2, [r7, #16]
 8007c14:	2100      	movs	r1, #0
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f7ff fd76 	bl	8007708 <xTimerGenericCommand>
 8007c1c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d10b      	bne.n	8007c3c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c28:	f383 8811 	msr	BASEPRI, r3
 8007c2c:	f3bf 8f6f 	isb	sy
 8007c30:	f3bf 8f4f 	dsb	sy
 8007c34:	603b      	str	r3, [r7, #0]
}
 8007c36:	bf00      	nop
 8007c38:	bf00      	nop
 8007c3a:	e7fd      	b.n	8007c38 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c3c:	4b09      	ldr	r3, [pc, #36]	@ (8007c64 <prvSwitchTimerLists+0xc4>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d1b0      	bne.n	8007ba8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007c46:	4b07      	ldr	r3, [pc, #28]	@ (8007c64 <prvSwitchTimerLists+0xc4>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007c4c:	4b06      	ldr	r3, [pc, #24]	@ (8007c68 <prvSwitchTimerLists+0xc8>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a04      	ldr	r2, [pc, #16]	@ (8007c64 <prvSwitchTimerLists+0xc4>)
 8007c52:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007c54:	4a04      	ldr	r2, [pc, #16]	@ (8007c68 <prvSwitchTimerLists+0xc8>)
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	6013      	str	r3, [r2, #0]
}
 8007c5a:	bf00      	nop
 8007c5c:	3718      	adds	r7, #24
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	20000e2c 	.word	0x20000e2c
 8007c68:	20000e30 	.word	0x20000e30

08007c6c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007c72:	f000 f92b 	bl	8007ecc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007c76:	4b15      	ldr	r3, [pc, #84]	@ (8007ccc <prvCheckForValidListAndQueue+0x60>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d120      	bne.n	8007cc0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007c7e:	4814      	ldr	r0, [pc, #80]	@ (8007cd0 <prvCheckForValidListAndQueue+0x64>)
 8007c80:	f7fd ff66 	bl	8005b50 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007c84:	4813      	ldr	r0, [pc, #76]	@ (8007cd4 <prvCheckForValidListAndQueue+0x68>)
 8007c86:	f7fd ff63 	bl	8005b50 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007c8a:	4b13      	ldr	r3, [pc, #76]	@ (8007cd8 <prvCheckForValidListAndQueue+0x6c>)
 8007c8c:	4a10      	ldr	r2, [pc, #64]	@ (8007cd0 <prvCheckForValidListAndQueue+0x64>)
 8007c8e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007c90:	4b12      	ldr	r3, [pc, #72]	@ (8007cdc <prvCheckForValidListAndQueue+0x70>)
 8007c92:	4a10      	ldr	r2, [pc, #64]	@ (8007cd4 <prvCheckForValidListAndQueue+0x68>)
 8007c94:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007c96:	2300      	movs	r3, #0
 8007c98:	9300      	str	r3, [sp, #0]
 8007c9a:	4b11      	ldr	r3, [pc, #68]	@ (8007ce0 <prvCheckForValidListAndQueue+0x74>)
 8007c9c:	4a11      	ldr	r2, [pc, #68]	@ (8007ce4 <prvCheckForValidListAndQueue+0x78>)
 8007c9e:	210c      	movs	r1, #12
 8007ca0:	200a      	movs	r0, #10
 8007ca2:	f7fe f86f 	bl	8005d84 <xQueueGenericCreateStatic>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	4a08      	ldr	r2, [pc, #32]	@ (8007ccc <prvCheckForValidListAndQueue+0x60>)
 8007caa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007cac:	4b07      	ldr	r3, [pc, #28]	@ (8007ccc <prvCheckForValidListAndQueue+0x60>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d005      	beq.n	8007cc0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007cb4:	4b05      	ldr	r3, [pc, #20]	@ (8007ccc <prvCheckForValidListAndQueue+0x60>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	490b      	ldr	r1, [pc, #44]	@ (8007ce8 <prvCheckForValidListAndQueue+0x7c>)
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7fe fc90 	bl	80065e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007cc0:	f000 f934 	bl	8007f2c <vPortExitCritical>
}
 8007cc4:	bf00      	nop
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	20000e34 	.word	0x20000e34
 8007cd0:	20000e04 	.word	0x20000e04
 8007cd4:	20000e18 	.word	0x20000e18
 8007cd8:	20000e2c 	.word	0x20000e2c
 8007cdc:	20000e30 	.word	0x20000e30
 8007ce0:	20000eb8 	.word	0x20000eb8
 8007ce4:	20000e40 	.word	0x20000e40
 8007ce8:	0800971c 	.word	0x0800971c

08007cec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007cec:	b480      	push	{r7}
 8007cee:	b085      	sub	sp, #20
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	60b9      	str	r1, [r7, #8]
 8007cf6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	3b04      	subs	r3, #4
 8007cfc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007d04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	3b04      	subs	r3, #4
 8007d0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	f023 0201 	bic.w	r2, r3, #1
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	3b04      	subs	r3, #4
 8007d1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d1c:	4a08      	ldr	r2, [pc, #32]	@ (8007d40 <pxPortInitialiseStack+0x54>)
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	3b14      	subs	r3, #20
 8007d26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	3b20      	subs	r3, #32
 8007d32:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007d34:	68fb      	ldr	r3, [r7, #12]
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3714      	adds	r7, #20
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bc80      	pop	{r7}
 8007d3e:	4770      	bx	lr
 8007d40:	08007d45 	.word	0x08007d45

08007d44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007d4e:	4b12      	ldr	r3, [pc, #72]	@ (8007d98 <prvTaskExitError+0x54>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d56:	d00b      	beq.n	8007d70 <prvTaskExitError+0x2c>
	__asm volatile
 8007d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d5c:	f383 8811 	msr	BASEPRI, r3
 8007d60:	f3bf 8f6f 	isb	sy
 8007d64:	f3bf 8f4f 	dsb	sy
 8007d68:	60fb      	str	r3, [r7, #12]
}
 8007d6a:	bf00      	nop
 8007d6c:	bf00      	nop
 8007d6e:	e7fd      	b.n	8007d6c <prvTaskExitError+0x28>
	__asm volatile
 8007d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d74:	f383 8811 	msr	BASEPRI, r3
 8007d78:	f3bf 8f6f 	isb	sy
 8007d7c:	f3bf 8f4f 	dsb	sy
 8007d80:	60bb      	str	r3, [r7, #8]
}
 8007d82:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007d84:	bf00      	nop
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d0fc      	beq.n	8007d86 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007d8c:	bf00      	nop
 8007d8e:	bf00      	nop
 8007d90:	3714      	adds	r7, #20
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bc80      	pop	{r7}
 8007d96:	4770      	bx	lr
 8007d98:	20000154 	.word	0x20000154
 8007d9c:	00000000 	.word	0x00000000

08007da0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007da0:	4b07      	ldr	r3, [pc, #28]	@ (8007dc0 <pxCurrentTCBConst2>)
 8007da2:	6819      	ldr	r1, [r3, #0]
 8007da4:	6808      	ldr	r0, [r1, #0]
 8007da6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007daa:	f380 8809 	msr	PSP, r0
 8007dae:	f3bf 8f6f 	isb	sy
 8007db2:	f04f 0000 	mov.w	r0, #0
 8007db6:	f380 8811 	msr	BASEPRI, r0
 8007dba:	f04e 0e0d 	orr.w	lr, lr, #13
 8007dbe:	4770      	bx	lr

08007dc0 <pxCurrentTCBConst2>:
 8007dc0:	20000cd8 	.word	0x20000cd8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007dc4:	bf00      	nop
 8007dc6:	bf00      	nop

08007dc8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007dc8:	4806      	ldr	r0, [pc, #24]	@ (8007de4 <prvPortStartFirstTask+0x1c>)
 8007dca:	6800      	ldr	r0, [r0, #0]
 8007dcc:	6800      	ldr	r0, [r0, #0]
 8007dce:	f380 8808 	msr	MSP, r0
 8007dd2:	b662      	cpsie	i
 8007dd4:	b661      	cpsie	f
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	f3bf 8f6f 	isb	sy
 8007dde:	df00      	svc	0
 8007de0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007de2:	bf00      	nop
 8007de4:	e000ed08 	.word	0xe000ed08

08007de8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007dee:	4b32      	ldr	r3, [pc, #200]	@ (8007eb8 <xPortStartScheduler+0xd0>)
 8007df0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	22ff      	movs	r2, #255	@ 0xff
 8007dfe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e08:	78fb      	ldrb	r3, [r7, #3]
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007e10:	b2da      	uxtb	r2, r3
 8007e12:	4b2a      	ldr	r3, [pc, #168]	@ (8007ebc <xPortStartScheduler+0xd4>)
 8007e14:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e16:	4b2a      	ldr	r3, [pc, #168]	@ (8007ec0 <xPortStartScheduler+0xd8>)
 8007e18:	2207      	movs	r2, #7
 8007e1a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e1c:	e009      	b.n	8007e32 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007e1e:	4b28      	ldr	r3, [pc, #160]	@ (8007ec0 <xPortStartScheduler+0xd8>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	3b01      	subs	r3, #1
 8007e24:	4a26      	ldr	r2, [pc, #152]	@ (8007ec0 <xPortStartScheduler+0xd8>)
 8007e26:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007e28:	78fb      	ldrb	r3, [r7, #3]
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	005b      	lsls	r3, r3, #1
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e32:	78fb      	ldrb	r3, [r7, #3]
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e3a:	2b80      	cmp	r3, #128	@ 0x80
 8007e3c:	d0ef      	beq.n	8007e1e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007e3e:	4b20      	ldr	r3, [pc, #128]	@ (8007ec0 <xPortStartScheduler+0xd8>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f1c3 0307 	rsb	r3, r3, #7
 8007e46:	2b04      	cmp	r3, #4
 8007e48:	d00b      	beq.n	8007e62 <xPortStartScheduler+0x7a>
	__asm volatile
 8007e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e4e:	f383 8811 	msr	BASEPRI, r3
 8007e52:	f3bf 8f6f 	isb	sy
 8007e56:	f3bf 8f4f 	dsb	sy
 8007e5a:	60bb      	str	r3, [r7, #8]
}
 8007e5c:	bf00      	nop
 8007e5e:	bf00      	nop
 8007e60:	e7fd      	b.n	8007e5e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007e62:	4b17      	ldr	r3, [pc, #92]	@ (8007ec0 <xPortStartScheduler+0xd8>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	021b      	lsls	r3, r3, #8
 8007e68:	4a15      	ldr	r2, [pc, #84]	@ (8007ec0 <xPortStartScheduler+0xd8>)
 8007e6a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007e6c:	4b14      	ldr	r3, [pc, #80]	@ (8007ec0 <xPortStartScheduler+0xd8>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007e74:	4a12      	ldr	r2, [pc, #72]	@ (8007ec0 <xPortStartScheduler+0xd8>)
 8007e76:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	b2da      	uxtb	r2, r3
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007e80:	4b10      	ldr	r3, [pc, #64]	@ (8007ec4 <xPortStartScheduler+0xdc>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a0f      	ldr	r2, [pc, #60]	@ (8007ec4 <xPortStartScheduler+0xdc>)
 8007e86:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007e8a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8007ec4 <xPortStartScheduler+0xdc>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a0c      	ldr	r2, [pc, #48]	@ (8007ec4 <xPortStartScheduler+0xdc>)
 8007e92:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007e96:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007e98:	f000 f8b8 	bl	800800c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8007ec8 <xPortStartScheduler+0xe0>)
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007ea2:	f7ff ff91 	bl	8007dc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007ea6:	f7fe ffc1 	bl	8006e2c <vTaskSwitchContext>
	prvTaskExitError();
 8007eaa:	f7ff ff4b 	bl	8007d44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007eae:	2300      	movs	r3, #0
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3710      	adds	r7, #16
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	e000e400 	.word	0xe000e400
 8007ebc:	20000f00 	.word	0x20000f00
 8007ec0:	20000f04 	.word	0x20000f04
 8007ec4:	e000ed20 	.word	0xe000ed20
 8007ec8:	20000154 	.word	0x20000154

08007ecc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
	__asm volatile
 8007ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ed6:	f383 8811 	msr	BASEPRI, r3
 8007eda:	f3bf 8f6f 	isb	sy
 8007ede:	f3bf 8f4f 	dsb	sy
 8007ee2:	607b      	str	r3, [r7, #4]
}
 8007ee4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8007f24 <vPortEnterCritical+0x58>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	3301      	adds	r3, #1
 8007eec:	4a0d      	ldr	r2, [pc, #52]	@ (8007f24 <vPortEnterCritical+0x58>)
 8007eee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8007f24 <vPortEnterCritical+0x58>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d110      	bne.n	8007f1a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8007f28 <vPortEnterCritical+0x5c>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d00b      	beq.n	8007f1a <vPortEnterCritical+0x4e>
	__asm volatile
 8007f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f06:	f383 8811 	msr	BASEPRI, r3
 8007f0a:	f3bf 8f6f 	isb	sy
 8007f0e:	f3bf 8f4f 	dsb	sy
 8007f12:	603b      	str	r3, [r7, #0]
}
 8007f14:	bf00      	nop
 8007f16:	bf00      	nop
 8007f18:	e7fd      	b.n	8007f16 <vPortEnterCritical+0x4a>
	}
}
 8007f1a:	bf00      	nop
 8007f1c:	370c      	adds	r7, #12
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bc80      	pop	{r7}
 8007f22:	4770      	bx	lr
 8007f24:	20000154 	.word	0x20000154
 8007f28:	e000ed04 	.word	0xe000ed04

08007f2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007f32:	4b12      	ldr	r3, [pc, #72]	@ (8007f7c <vPortExitCritical+0x50>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d10b      	bne.n	8007f52 <vPortExitCritical+0x26>
	__asm volatile
 8007f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f3e:	f383 8811 	msr	BASEPRI, r3
 8007f42:	f3bf 8f6f 	isb	sy
 8007f46:	f3bf 8f4f 	dsb	sy
 8007f4a:	607b      	str	r3, [r7, #4]
}
 8007f4c:	bf00      	nop
 8007f4e:	bf00      	nop
 8007f50:	e7fd      	b.n	8007f4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007f52:	4b0a      	ldr	r3, [pc, #40]	@ (8007f7c <vPortExitCritical+0x50>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	3b01      	subs	r3, #1
 8007f58:	4a08      	ldr	r2, [pc, #32]	@ (8007f7c <vPortExitCritical+0x50>)
 8007f5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007f5c:	4b07      	ldr	r3, [pc, #28]	@ (8007f7c <vPortExitCritical+0x50>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d105      	bne.n	8007f70 <vPortExitCritical+0x44>
 8007f64:	2300      	movs	r3, #0
 8007f66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	f383 8811 	msr	BASEPRI, r3
}
 8007f6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007f70:	bf00      	nop
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bc80      	pop	{r7}
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop
 8007f7c:	20000154 	.word	0x20000154

08007f80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007f80:	f3ef 8009 	mrs	r0, PSP
 8007f84:	f3bf 8f6f 	isb	sy
 8007f88:	4b0d      	ldr	r3, [pc, #52]	@ (8007fc0 <pxCurrentTCBConst>)
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007f90:	6010      	str	r0, [r2, #0]
 8007f92:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007f96:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007f9a:	f380 8811 	msr	BASEPRI, r0
 8007f9e:	f7fe ff45 	bl	8006e2c <vTaskSwitchContext>
 8007fa2:	f04f 0000 	mov.w	r0, #0
 8007fa6:	f380 8811 	msr	BASEPRI, r0
 8007faa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007fae:	6819      	ldr	r1, [r3, #0]
 8007fb0:	6808      	ldr	r0, [r1, #0]
 8007fb2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007fb6:	f380 8809 	msr	PSP, r0
 8007fba:	f3bf 8f6f 	isb	sy
 8007fbe:	4770      	bx	lr

08007fc0 <pxCurrentTCBConst>:
 8007fc0:	20000cd8 	.word	0x20000cd8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007fc4:	bf00      	nop
 8007fc6:	bf00      	nop

08007fc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
	__asm volatile
 8007fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd2:	f383 8811 	msr	BASEPRI, r3
 8007fd6:	f3bf 8f6f 	isb	sy
 8007fda:	f3bf 8f4f 	dsb	sy
 8007fde:	607b      	str	r3, [r7, #4]
}
 8007fe0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007fe2:	f7fe fe69 	bl	8006cb8 <xTaskIncrementTick>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d003      	beq.n	8007ff4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007fec:	4b06      	ldr	r3, [pc, #24]	@ (8008008 <SysTick_Handler+0x40>)
 8007fee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ff2:	601a      	str	r2, [r3, #0]
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	f383 8811 	msr	BASEPRI, r3
}
 8007ffe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008000:	bf00      	nop
 8008002:	3708      	adds	r7, #8
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}
 8008008:	e000ed04 	.word	0xe000ed04

0800800c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800800c:	b480      	push	{r7}
 800800e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008010:	4b0a      	ldr	r3, [pc, #40]	@ (800803c <vPortSetupTimerInterrupt+0x30>)
 8008012:	2200      	movs	r2, #0
 8008014:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008016:	4b0a      	ldr	r3, [pc, #40]	@ (8008040 <vPortSetupTimerInterrupt+0x34>)
 8008018:	2200      	movs	r2, #0
 800801a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800801c:	4b09      	ldr	r3, [pc, #36]	@ (8008044 <vPortSetupTimerInterrupt+0x38>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a09      	ldr	r2, [pc, #36]	@ (8008048 <vPortSetupTimerInterrupt+0x3c>)
 8008022:	fba2 2303 	umull	r2, r3, r2, r3
 8008026:	099b      	lsrs	r3, r3, #6
 8008028:	4a08      	ldr	r2, [pc, #32]	@ (800804c <vPortSetupTimerInterrupt+0x40>)
 800802a:	3b01      	subs	r3, #1
 800802c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800802e:	4b03      	ldr	r3, [pc, #12]	@ (800803c <vPortSetupTimerInterrupt+0x30>)
 8008030:	2207      	movs	r2, #7
 8008032:	601a      	str	r2, [r3, #0]
}
 8008034:	bf00      	nop
 8008036:	46bd      	mov	sp, r7
 8008038:	bc80      	pop	{r7}
 800803a:	4770      	bx	lr
 800803c:	e000e010 	.word	0xe000e010
 8008040:	e000e018 	.word	0xe000e018
 8008044:	200000a4 	.word	0x200000a4
 8008048:	10624dd3 	.word	0x10624dd3
 800804c:	e000e014 	.word	0xe000e014

08008050 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008050:	b480      	push	{r7}
 8008052:	b085      	sub	sp, #20
 8008054:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008056:	f3ef 8305 	mrs	r3, IPSR
 800805a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2b0f      	cmp	r3, #15
 8008060:	d915      	bls.n	800808e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008062:	4a17      	ldr	r2, [pc, #92]	@ (80080c0 <vPortValidateInterruptPriority+0x70>)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	4413      	add	r3, r2
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800806c:	4b15      	ldr	r3, [pc, #84]	@ (80080c4 <vPortValidateInterruptPriority+0x74>)
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	7afa      	ldrb	r2, [r7, #11]
 8008072:	429a      	cmp	r2, r3
 8008074:	d20b      	bcs.n	800808e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800807a:	f383 8811 	msr	BASEPRI, r3
 800807e:	f3bf 8f6f 	isb	sy
 8008082:	f3bf 8f4f 	dsb	sy
 8008086:	607b      	str	r3, [r7, #4]
}
 8008088:	bf00      	nop
 800808a:	bf00      	nop
 800808c:	e7fd      	b.n	800808a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800808e:	4b0e      	ldr	r3, [pc, #56]	@ (80080c8 <vPortValidateInterruptPriority+0x78>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008096:	4b0d      	ldr	r3, [pc, #52]	@ (80080cc <vPortValidateInterruptPriority+0x7c>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	429a      	cmp	r2, r3
 800809c:	d90b      	bls.n	80080b6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800809e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080a2:	f383 8811 	msr	BASEPRI, r3
 80080a6:	f3bf 8f6f 	isb	sy
 80080aa:	f3bf 8f4f 	dsb	sy
 80080ae:	603b      	str	r3, [r7, #0]
}
 80080b0:	bf00      	nop
 80080b2:	bf00      	nop
 80080b4:	e7fd      	b.n	80080b2 <vPortValidateInterruptPriority+0x62>
	}
 80080b6:	bf00      	nop
 80080b8:	3714      	adds	r7, #20
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bc80      	pop	{r7}
 80080be:	4770      	bx	lr
 80080c0:	e000e3f0 	.word	0xe000e3f0
 80080c4:	20000f00 	.word	0x20000f00
 80080c8:	e000ed0c 	.word	0xe000ed0c
 80080cc:	20000f04 	.word	0x20000f04

080080d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b08a      	sub	sp, #40	@ 0x28
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80080d8:	2300      	movs	r3, #0
 80080da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80080dc:	f7fe fd32 	bl	8006b44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80080e0:	4b5c      	ldr	r3, [pc, #368]	@ (8008254 <pvPortMalloc+0x184>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d101      	bne.n	80080ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80080e8:	f000 f924 	bl	8008334 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80080ec:	4b5a      	ldr	r3, [pc, #360]	@ (8008258 <pvPortMalloc+0x188>)
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4013      	ands	r3, r2
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f040 8095 	bne.w	8008224 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d01e      	beq.n	800813e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008100:	2208      	movs	r2, #8
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4413      	add	r3, r2
 8008106:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f003 0307 	and.w	r3, r3, #7
 800810e:	2b00      	cmp	r3, #0
 8008110:	d015      	beq.n	800813e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f023 0307 	bic.w	r3, r3, #7
 8008118:	3308      	adds	r3, #8
 800811a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f003 0307 	and.w	r3, r3, #7
 8008122:	2b00      	cmp	r3, #0
 8008124:	d00b      	beq.n	800813e <pvPortMalloc+0x6e>
	__asm volatile
 8008126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800812a:	f383 8811 	msr	BASEPRI, r3
 800812e:	f3bf 8f6f 	isb	sy
 8008132:	f3bf 8f4f 	dsb	sy
 8008136:	617b      	str	r3, [r7, #20]
}
 8008138:	bf00      	nop
 800813a:	bf00      	nop
 800813c:	e7fd      	b.n	800813a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d06f      	beq.n	8008224 <pvPortMalloc+0x154>
 8008144:	4b45      	ldr	r3, [pc, #276]	@ (800825c <pvPortMalloc+0x18c>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	429a      	cmp	r2, r3
 800814c:	d86a      	bhi.n	8008224 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800814e:	4b44      	ldr	r3, [pc, #272]	@ (8008260 <pvPortMalloc+0x190>)
 8008150:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008152:	4b43      	ldr	r3, [pc, #268]	@ (8008260 <pvPortMalloc+0x190>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008158:	e004      	b.n	8008164 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800815a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800815c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800815e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	429a      	cmp	r2, r3
 800816c:	d903      	bls.n	8008176 <pvPortMalloc+0xa6>
 800816e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1f1      	bne.n	800815a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008176:	4b37      	ldr	r3, [pc, #220]	@ (8008254 <pvPortMalloc+0x184>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800817c:	429a      	cmp	r2, r3
 800817e:	d051      	beq.n	8008224 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008180:	6a3b      	ldr	r3, [r7, #32]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	2208      	movs	r2, #8
 8008186:	4413      	add	r3, r2
 8008188:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800818a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	6a3b      	ldr	r3, [r7, #32]
 8008190:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008194:	685a      	ldr	r2, [r3, #4]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	1ad2      	subs	r2, r2, r3
 800819a:	2308      	movs	r3, #8
 800819c:	005b      	lsls	r3, r3, #1
 800819e:	429a      	cmp	r2, r3
 80081a0:	d920      	bls.n	80081e4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80081a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	4413      	add	r3, r2
 80081a8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	f003 0307 	and.w	r3, r3, #7
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00b      	beq.n	80081cc <pvPortMalloc+0xfc>
	__asm volatile
 80081b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081b8:	f383 8811 	msr	BASEPRI, r3
 80081bc:	f3bf 8f6f 	isb	sy
 80081c0:	f3bf 8f4f 	dsb	sy
 80081c4:	613b      	str	r3, [r7, #16]
}
 80081c6:	bf00      	nop
 80081c8:	bf00      	nop
 80081ca:	e7fd      	b.n	80081c8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80081cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ce:	685a      	ldr	r2, [r3, #4]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	1ad2      	subs	r2, r2, r3
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80081d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80081de:	69b8      	ldr	r0, [r7, #24]
 80081e0:	f000 f90a 	bl	80083f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80081e4:	4b1d      	ldr	r3, [pc, #116]	@ (800825c <pvPortMalloc+0x18c>)
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	1ad3      	subs	r3, r2, r3
 80081ee:	4a1b      	ldr	r2, [pc, #108]	@ (800825c <pvPortMalloc+0x18c>)
 80081f0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80081f2:	4b1a      	ldr	r3, [pc, #104]	@ (800825c <pvPortMalloc+0x18c>)
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	4b1b      	ldr	r3, [pc, #108]	@ (8008264 <pvPortMalloc+0x194>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d203      	bcs.n	8008206 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80081fe:	4b17      	ldr	r3, [pc, #92]	@ (800825c <pvPortMalloc+0x18c>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a18      	ldr	r2, [pc, #96]	@ (8008264 <pvPortMalloc+0x194>)
 8008204:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008208:	685a      	ldr	r2, [r3, #4]
 800820a:	4b13      	ldr	r3, [pc, #76]	@ (8008258 <pvPortMalloc+0x188>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	431a      	orrs	r2, r3
 8008210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008212:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008216:	2200      	movs	r2, #0
 8008218:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800821a:	4b13      	ldr	r3, [pc, #76]	@ (8008268 <pvPortMalloc+0x198>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	3301      	adds	r3, #1
 8008220:	4a11      	ldr	r2, [pc, #68]	@ (8008268 <pvPortMalloc+0x198>)
 8008222:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008224:	f7fe fc9c 	bl	8006b60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	f003 0307 	and.w	r3, r3, #7
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00b      	beq.n	800824a <pvPortMalloc+0x17a>
	__asm volatile
 8008232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008236:	f383 8811 	msr	BASEPRI, r3
 800823a:	f3bf 8f6f 	isb	sy
 800823e:	f3bf 8f4f 	dsb	sy
 8008242:	60fb      	str	r3, [r7, #12]
}
 8008244:	bf00      	nop
 8008246:	bf00      	nop
 8008248:	e7fd      	b.n	8008246 <pvPortMalloc+0x176>
	return pvReturn;
 800824a:	69fb      	ldr	r3, [r7, #28]
}
 800824c:	4618      	mov	r0, r3
 800824e:	3728      	adds	r7, #40	@ 0x28
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}
 8008254:	20001f10 	.word	0x20001f10
 8008258:	20001f24 	.word	0x20001f24
 800825c:	20001f14 	.word	0x20001f14
 8008260:	20001f08 	.word	0x20001f08
 8008264:	20001f18 	.word	0x20001f18
 8008268:	20001f1c 	.word	0x20001f1c

0800826c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b086      	sub	sp, #24
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d04f      	beq.n	800831e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800827e:	2308      	movs	r3, #8
 8008280:	425b      	negs	r3, r3
 8008282:	697a      	ldr	r2, [r7, #20]
 8008284:	4413      	add	r3, r2
 8008286:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	685a      	ldr	r2, [r3, #4]
 8008290:	4b25      	ldr	r3, [pc, #148]	@ (8008328 <vPortFree+0xbc>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4013      	ands	r3, r2
 8008296:	2b00      	cmp	r3, #0
 8008298:	d10b      	bne.n	80082b2 <vPortFree+0x46>
	__asm volatile
 800829a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800829e:	f383 8811 	msr	BASEPRI, r3
 80082a2:	f3bf 8f6f 	isb	sy
 80082a6:	f3bf 8f4f 	dsb	sy
 80082aa:	60fb      	str	r3, [r7, #12]
}
 80082ac:	bf00      	nop
 80082ae:	bf00      	nop
 80082b0:	e7fd      	b.n	80082ae <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d00b      	beq.n	80082d2 <vPortFree+0x66>
	__asm volatile
 80082ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082be:	f383 8811 	msr	BASEPRI, r3
 80082c2:	f3bf 8f6f 	isb	sy
 80082c6:	f3bf 8f4f 	dsb	sy
 80082ca:	60bb      	str	r3, [r7, #8]
}
 80082cc:	bf00      	nop
 80082ce:	bf00      	nop
 80082d0:	e7fd      	b.n	80082ce <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	685a      	ldr	r2, [r3, #4]
 80082d6:	4b14      	ldr	r3, [pc, #80]	@ (8008328 <vPortFree+0xbc>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4013      	ands	r3, r2
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d01e      	beq.n	800831e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d11a      	bne.n	800831e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	685a      	ldr	r2, [r3, #4]
 80082ec:	4b0e      	ldr	r3, [pc, #56]	@ (8008328 <vPortFree+0xbc>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	43db      	mvns	r3, r3
 80082f2:	401a      	ands	r2, r3
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80082f8:	f7fe fc24 	bl	8006b44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	685a      	ldr	r2, [r3, #4]
 8008300:	4b0a      	ldr	r3, [pc, #40]	@ (800832c <vPortFree+0xc0>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4413      	add	r3, r2
 8008306:	4a09      	ldr	r2, [pc, #36]	@ (800832c <vPortFree+0xc0>)
 8008308:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800830a:	6938      	ldr	r0, [r7, #16]
 800830c:	f000 f874 	bl	80083f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008310:	4b07      	ldr	r3, [pc, #28]	@ (8008330 <vPortFree+0xc4>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	3301      	adds	r3, #1
 8008316:	4a06      	ldr	r2, [pc, #24]	@ (8008330 <vPortFree+0xc4>)
 8008318:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800831a:	f7fe fc21 	bl	8006b60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800831e:	bf00      	nop
 8008320:	3718      	adds	r7, #24
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	20001f24 	.word	0x20001f24
 800832c:	20001f14 	.word	0x20001f14
 8008330:	20001f20 	.word	0x20001f20

08008334 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008334:	b480      	push	{r7}
 8008336:	b085      	sub	sp, #20
 8008338:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800833a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800833e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008340:	4b27      	ldr	r3, [pc, #156]	@ (80083e0 <prvHeapInit+0xac>)
 8008342:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f003 0307 	and.w	r3, r3, #7
 800834a:	2b00      	cmp	r3, #0
 800834c:	d00c      	beq.n	8008368 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	3307      	adds	r3, #7
 8008352:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f023 0307 	bic.w	r3, r3, #7
 800835a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800835c:	68ba      	ldr	r2, [r7, #8]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	1ad3      	subs	r3, r2, r3
 8008362:	4a1f      	ldr	r2, [pc, #124]	@ (80083e0 <prvHeapInit+0xac>)
 8008364:	4413      	add	r3, r2
 8008366:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800836c:	4a1d      	ldr	r2, [pc, #116]	@ (80083e4 <prvHeapInit+0xb0>)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008372:	4b1c      	ldr	r3, [pc, #112]	@ (80083e4 <prvHeapInit+0xb0>)
 8008374:	2200      	movs	r2, #0
 8008376:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	68ba      	ldr	r2, [r7, #8]
 800837c:	4413      	add	r3, r2
 800837e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008380:	2208      	movs	r2, #8
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	1a9b      	subs	r3, r3, r2
 8008386:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f023 0307 	bic.w	r3, r3, #7
 800838e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	4a15      	ldr	r2, [pc, #84]	@ (80083e8 <prvHeapInit+0xb4>)
 8008394:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008396:	4b14      	ldr	r3, [pc, #80]	@ (80083e8 <prvHeapInit+0xb4>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2200      	movs	r2, #0
 800839c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800839e:	4b12      	ldr	r3, [pc, #72]	@ (80083e8 <prvHeapInit+0xb4>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2200      	movs	r2, #0
 80083a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	1ad2      	subs	r2, r2, r3
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80083b4:	4b0c      	ldr	r3, [pc, #48]	@ (80083e8 <prvHeapInit+0xb4>)
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	4a0a      	ldr	r2, [pc, #40]	@ (80083ec <prvHeapInit+0xb8>)
 80083c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	4a09      	ldr	r2, [pc, #36]	@ (80083f0 <prvHeapInit+0xbc>)
 80083ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80083cc:	4b09      	ldr	r3, [pc, #36]	@ (80083f4 <prvHeapInit+0xc0>)
 80083ce:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80083d2:	601a      	str	r2, [r3, #0]
}
 80083d4:	bf00      	nop
 80083d6:	3714      	adds	r7, #20
 80083d8:	46bd      	mov	sp, r7
 80083da:	bc80      	pop	{r7}
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop
 80083e0:	20000f08 	.word	0x20000f08
 80083e4:	20001f08 	.word	0x20001f08
 80083e8:	20001f10 	.word	0x20001f10
 80083ec:	20001f18 	.word	0x20001f18
 80083f0:	20001f14 	.word	0x20001f14
 80083f4:	20001f24 	.word	0x20001f24

080083f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80083f8:	b480      	push	{r7}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008400:	4b27      	ldr	r3, [pc, #156]	@ (80084a0 <prvInsertBlockIntoFreeList+0xa8>)
 8008402:	60fb      	str	r3, [r7, #12]
 8008404:	e002      	b.n	800840c <prvInsertBlockIntoFreeList+0x14>
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	60fb      	str	r3, [r7, #12]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	429a      	cmp	r2, r3
 8008414:	d8f7      	bhi.n	8008406 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	68ba      	ldr	r2, [r7, #8]
 8008420:	4413      	add	r3, r2
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	429a      	cmp	r2, r3
 8008426:	d108      	bne.n	800843a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	685a      	ldr	r2, [r3, #4]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	441a      	add	r2, r3
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	68ba      	ldr	r2, [r7, #8]
 8008444:	441a      	add	r2, r3
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	429a      	cmp	r2, r3
 800844c:	d118      	bne.n	8008480 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	4b14      	ldr	r3, [pc, #80]	@ (80084a4 <prvInsertBlockIntoFreeList+0xac>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	429a      	cmp	r2, r3
 8008458:	d00d      	beq.n	8008476 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	685a      	ldr	r2, [r3, #4]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	441a      	add	r2, r3
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	681a      	ldr	r2, [r3, #0]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	601a      	str	r2, [r3, #0]
 8008474:	e008      	b.n	8008488 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008476:	4b0b      	ldr	r3, [pc, #44]	@ (80084a4 <prvInsertBlockIntoFreeList+0xac>)
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	601a      	str	r2, [r3, #0]
 800847e:	e003      	b.n	8008488 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	429a      	cmp	r2, r3
 800848e:	d002      	beq.n	8008496 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008496:	bf00      	nop
 8008498:	3714      	adds	r7, #20
 800849a:	46bd      	mov	sp, r7
 800849c:	bc80      	pop	{r7}
 800849e:	4770      	bx	lr
 80084a0:	20001f08 	.word	0x20001f08
 80084a4:	20001f10 	.word	0x20001f10

080084a8 <siprintf>:
 80084a8:	b40e      	push	{r1, r2, r3}
 80084aa:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80084ae:	b510      	push	{r4, lr}
 80084b0:	2400      	movs	r4, #0
 80084b2:	b09d      	sub	sp, #116	@ 0x74
 80084b4:	ab1f      	add	r3, sp, #124	@ 0x7c
 80084b6:	9002      	str	r0, [sp, #8]
 80084b8:	9006      	str	r0, [sp, #24]
 80084ba:	9107      	str	r1, [sp, #28]
 80084bc:	9104      	str	r1, [sp, #16]
 80084be:	4809      	ldr	r0, [pc, #36]	@ (80084e4 <siprintf+0x3c>)
 80084c0:	4909      	ldr	r1, [pc, #36]	@ (80084e8 <siprintf+0x40>)
 80084c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80084c6:	9105      	str	r1, [sp, #20]
 80084c8:	6800      	ldr	r0, [r0, #0]
 80084ca:	a902      	add	r1, sp, #8
 80084cc:	9301      	str	r3, [sp, #4]
 80084ce:	941b      	str	r4, [sp, #108]	@ 0x6c
 80084d0:	f000 fa3a 	bl	8008948 <_svfiprintf_r>
 80084d4:	9b02      	ldr	r3, [sp, #8]
 80084d6:	701c      	strb	r4, [r3, #0]
 80084d8:	b01d      	add	sp, #116	@ 0x74
 80084da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084de:	b003      	add	sp, #12
 80084e0:	4770      	bx	lr
 80084e2:	bf00      	nop
 80084e4:	20000158 	.word	0x20000158
 80084e8:	ffff0208 	.word	0xffff0208

080084ec <_vsniprintf_r>:
 80084ec:	b530      	push	{r4, r5, lr}
 80084ee:	4614      	mov	r4, r2
 80084f0:	2c00      	cmp	r4, #0
 80084f2:	4605      	mov	r5, r0
 80084f4:	461a      	mov	r2, r3
 80084f6:	b09b      	sub	sp, #108	@ 0x6c
 80084f8:	da05      	bge.n	8008506 <_vsniprintf_r+0x1a>
 80084fa:	238b      	movs	r3, #139	@ 0x8b
 80084fc:	6003      	str	r3, [r0, #0]
 80084fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008502:	b01b      	add	sp, #108	@ 0x6c
 8008504:	bd30      	pop	{r4, r5, pc}
 8008506:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800850a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800850e:	f04f 0300 	mov.w	r3, #0
 8008512:	9319      	str	r3, [sp, #100]	@ 0x64
 8008514:	bf0c      	ite	eq
 8008516:	4623      	moveq	r3, r4
 8008518:	f104 33ff 	addne.w	r3, r4, #4294967295
 800851c:	9302      	str	r3, [sp, #8]
 800851e:	9305      	str	r3, [sp, #20]
 8008520:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008524:	9100      	str	r1, [sp, #0]
 8008526:	9104      	str	r1, [sp, #16]
 8008528:	f8ad 300e 	strh.w	r3, [sp, #14]
 800852c:	4669      	mov	r1, sp
 800852e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8008530:	f000 fa0a 	bl	8008948 <_svfiprintf_r>
 8008534:	1c43      	adds	r3, r0, #1
 8008536:	bfbc      	itt	lt
 8008538:	238b      	movlt	r3, #139	@ 0x8b
 800853a:	602b      	strlt	r3, [r5, #0]
 800853c:	2c00      	cmp	r4, #0
 800853e:	d0e0      	beq.n	8008502 <_vsniprintf_r+0x16>
 8008540:	2200      	movs	r2, #0
 8008542:	9b00      	ldr	r3, [sp, #0]
 8008544:	701a      	strb	r2, [r3, #0]
 8008546:	e7dc      	b.n	8008502 <_vsniprintf_r+0x16>

08008548 <vsniprintf>:
 8008548:	b507      	push	{r0, r1, r2, lr}
 800854a:	9300      	str	r3, [sp, #0]
 800854c:	4613      	mov	r3, r2
 800854e:	460a      	mov	r2, r1
 8008550:	4601      	mov	r1, r0
 8008552:	4803      	ldr	r0, [pc, #12]	@ (8008560 <vsniprintf+0x18>)
 8008554:	6800      	ldr	r0, [r0, #0]
 8008556:	f7ff ffc9 	bl	80084ec <_vsniprintf_r>
 800855a:	b003      	add	sp, #12
 800855c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008560:	20000158 	.word	0x20000158

08008564 <memset>:
 8008564:	4603      	mov	r3, r0
 8008566:	4402      	add	r2, r0
 8008568:	4293      	cmp	r3, r2
 800856a:	d100      	bne.n	800856e <memset+0xa>
 800856c:	4770      	bx	lr
 800856e:	f803 1b01 	strb.w	r1, [r3], #1
 8008572:	e7f9      	b.n	8008568 <memset+0x4>

08008574 <_reclaim_reent>:
 8008574:	4b2d      	ldr	r3, [pc, #180]	@ (800862c <_reclaim_reent+0xb8>)
 8008576:	b570      	push	{r4, r5, r6, lr}
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4604      	mov	r4, r0
 800857c:	4283      	cmp	r3, r0
 800857e:	d053      	beq.n	8008628 <_reclaim_reent+0xb4>
 8008580:	69c3      	ldr	r3, [r0, #28]
 8008582:	b31b      	cbz	r3, 80085cc <_reclaim_reent+0x58>
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	b163      	cbz	r3, 80085a2 <_reclaim_reent+0x2e>
 8008588:	2500      	movs	r5, #0
 800858a:	69e3      	ldr	r3, [r4, #28]
 800858c:	68db      	ldr	r3, [r3, #12]
 800858e:	5959      	ldr	r1, [r3, r5]
 8008590:	b9b1      	cbnz	r1, 80085c0 <_reclaim_reent+0x4c>
 8008592:	3504      	adds	r5, #4
 8008594:	2d80      	cmp	r5, #128	@ 0x80
 8008596:	d1f8      	bne.n	800858a <_reclaim_reent+0x16>
 8008598:	69e3      	ldr	r3, [r4, #28]
 800859a:	4620      	mov	r0, r4
 800859c:	68d9      	ldr	r1, [r3, #12]
 800859e:	f000 f881 	bl	80086a4 <_free_r>
 80085a2:	69e3      	ldr	r3, [r4, #28]
 80085a4:	6819      	ldr	r1, [r3, #0]
 80085a6:	b111      	cbz	r1, 80085ae <_reclaim_reent+0x3a>
 80085a8:	4620      	mov	r0, r4
 80085aa:	f000 f87b 	bl	80086a4 <_free_r>
 80085ae:	69e3      	ldr	r3, [r4, #28]
 80085b0:	689d      	ldr	r5, [r3, #8]
 80085b2:	b15d      	cbz	r5, 80085cc <_reclaim_reent+0x58>
 80085b4:	4629      	mov	r1, r5
 80085b6:	4620      	mov	r0, r4
 80085b8:	682d      	ldr	r5, [r5, #0]
 80085ba:	f000 f873 	bl	80086a4 <_free_r>
 80085be:	e7f8      	b.n	80085b2 <_reclaim_reent+0x3e>
 80085c0:	680e      	ldr	r6, [r1, #0]
 80085c2:	4620      	mov	r0, r4
 80085c4:	f000 f86e 	bl	80086a4 <_free_r>
 80085c8:	4631      	mov	r1, r6
 80085ca:	e7e1      	b.n	8008590 <_reclaim_reent+0x1c>
 80085cc:	6961      	ldr	r1, [r4, #20]
 80085ce:	b111      	cbz	r1, 80085d6 <_reclaim_reent+0x62>
 80085d0:	4620      	mov	r0, r4
 80085d2:	f000 f867 	bl	80086a4 <_free_r>
 80085d6:	69e1      	ldr	r1, [r4, #28]
 80085d8:	b111      	cbz	r1, 80085e0 <_reclaim_reent+0x6c>
 80085da:	4620      	mov	r0, r4
 80085dc:	f000 f862 	bl	80086a4 <_free_r>
 80085e0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80085e2:	b111      	cbz	r1, 80085ea <_reclaim_reent+0x76>
 80085e4:	4620      	mov	r0, r4
 80085e6:	f000 f85d 	bl	80086a4 <_free_r>
 80085ea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80085ec:	b111      	cbz	r1, 80085f4 <_reclaim_reent+0x80>
 80085ee:	4620      	mov	r0, r4
 80085f0:	f000 f858 	bl	80086a4 <_free_r>
 80085f4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80085f6:	b111      	cbz	r1, 80085fe <_reclaim_reent+0x8a>
 80085f8:	4620      	mov	r0, r4
 80085fa:	f000 f853 	bl	80086a4 <_free_r>
 80085fe:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008600:	b111      	cbz	r1, 8008608 <_reclaim_reent+0x94>
 8008602:	4620      	mov	r0, r4
 8008604:	f000 f84e 	bl	80086a4 <_free_r>
 8008608:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800860a:	b111      	cbz	r1, 8008612 <_reclaim_reent+0x9e>
 800860c:	4620      	mov	r0, r4
 800860e:	f000 f849 	bl	80086a4 <_free_r>
 8008612:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008614:	b111      	cbz	r1, 800861c <_reclaim_reent+0xa8>
 8008616:	4620      	mov	r0, r4
 8008618:	f000 f844 	bl	80086a4 <_free_r>
 800861c:	6a23      	ldr	r3, [r4, #32]
 800861e:	b11b      	cbz	r3, 8008628 <_reclaim_reent+0xb4>
 8008620:	4620      	mov	r0, r4
 8008622:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008626:	4718      	bx	r3
 8008628:	bd70      	pop	{r4, r5, r6, pc}
 800862a:	bf00      	nop
 800862c:	20000158 	.word	0x20000158

08008630 <__errno>:
 8008630:	4b01      	ldr	r3, [pc, #4]	@ (8008638 <__errno+0x8>)
 8008632:	6818      	ldr	r0, [r3, #0]
 8008634:	4770      	bx	lr
 8008636:	bf00      	nop
 8008638:	20000158 	.word	0x20000158

0800863c <__libc_init_array>:
 800863c:	b570      	push	{r4, r5, r6, lr}
 800863e:	2600      	movs	r6, #0
 8008640:	4d0c      	ldr	r5, [pc, #48]	@ (8008674 <__libc_init_array+0x38>)
 8008642:	4c0d      	ldr	r4, [pc, #52]	@ (8008678 <__libc_init_array+0x3c>)
 8008644:	1b64      	subs	r4, r4, r5
 8008646:	10a4      	asrs	r4, r4, #2
 8008648:	42a6      	cmp	r6, r4
 800864a:	d109      	bne.n	8008660 <__libc_init_array+0x24>
 800864c:	f000 fc76 	bl	8008f3c <_init>
 8008650:	2600      	movs	r6, #0
 8008652:	4d0a      	ldr	r5, [pc, #40]	@ (800867c <__libc_init_array+0x40>)
 8008654:	4c0a      	ldr	r4, [pc, #40]	@ (8008680 <__libc_init_array+0x44>)
 8008656:	1b64      	subs	r4, r4, r5
 8008658:	10a4      	asrs	r4, r4, #2
 800865a:	42a6      	cmp	r6, r4
 800865c:	d105      	bne.n	800866a <__libc_init_array+0x2e>
 800865e:	bd70      	pop	{r4, r5, r6, pc}
 8008660:	f855 3b04 	ldr.w	r3, [r5], #4
 8008664:	4798      	blx	r3
 8008666:	3601      	adds	r6, #1
 8008668:	e7ee      	b.n	8008648 <__libc_init_array+0xc>
 800866a:	f855 3b04 	ldr.w	r3, [r5], #4
 800866e:	4798      	blx	r3
 8008670:	3601      	adds	r6, #1
 8008672:	e7f2      	b.n	800865a <__libc_init_array+0x1e>
 8008674:	080097d0 	.word	0x080097d0
 8008678:	080097d0 	.word	0x080097d0
 800867c:	080097d0 	.word	0x080097d0
 8008680:	080097d4 	.word	0x080097d4

08008684 <__retarget_lock_acquire_recursive>:
 8008684:	4770      	bx	lr

08008686 <__retarget_lock_release_recursive>:
 8008686:	4770      	bx	lr

08008688 <memcpy>:
 8008688:	440a      	add	r2, r1
 800868a:	4291      	cmp	r1, r2
 800868c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008690:	d100      	bne.n	8008694 <memcpy+0xc>
 8008692:	4770      	bx	lr
 8008694:	b510      	push	{r4, lr}
 8008696:	f811 4b01 	ldrb.w	r4, [r1], #1
 800869a:	4291      	cmp	r1, r2
 800869c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086a0:	d1f9      	bne.n	8008696 <memcpy+0xe>
 80086a2:	bd10      	pop	{r4, pc}

080086a4 <_free_r>:
 80086a4:	b538      	push	{r3, r4, r5, lr}
 80086a6:	4605      	mov	r5, r0
 80086a8:	2900      	cmp	r1, #0
 80086aa:	d040      	beq.n	800872e <_free_r+0x8a>
 80086ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086b0:	1f0c      	subs	r4, r1, #4
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	bfb8      	it	lt
 80086b6:	18e4      	addlt	r4, r4, r3
 80086b8:	f000 f8de 	bl	8008878 <__malloc_lock>
 80086bc:	4a1c      	ldr	r2, [pc, #112]	@ (8008730 <_free_r+0x8c>)
 80086be:	6813      	ldr	r3, [r2, #0]
 80086c0:	b933      	cbnz	r3, 80086d0 <_free_r+0x2c>
 80086c2:	6063      	str	r3, [r4, #4]
 80086c4:	6014      	str	r4, [r2, #0]
 80086c6:	4628      	mov	r0, r5
 80086c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086cc:	f000 b8da 	b.w	8008884 <__malloc_unlock>
 80086d0:	42a3      	cmp	r3, r4
 80086d2:	d908      	bls.n	80086e6 <_free_r+0x42>
 80086d4:	6820      	ldr	r0, [r4, #0]
 80086d6:	1821      	adds	r1, r4, r0
 80086d8:	428b      	cmp	r3, r1
 80086da:	bf01      	itttt	eq
 80086dc:	6819      	ldreq	r1, [r3, #0]
 80086de:	685b      	ldreq	r3, [r3, #4]
 80086e0:	1809      	addeq	r1, r1, r0
 80086e2:	6021      	streq	r1, [r4, #0]
 80086e4:	e7ed      	b.n	80086c2 <_free_r+0x1e>
 80086e6:	461a      	mov	r2, r3
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	b10b      	cbz	r3, 80086f0 <_free_r+0x4c>
 80086ec:	42a3      	cmp	r3, r4
 80086ee:	d9fa      	bls.n	80086e6 <_free_r+0x42>
 80086f0:	6811      	ldr	r1, [r2, #0]
 80086f2:	1850      	adds	r0, r2, r1
 80086f4:	42a0      	cmp	r0, r4
 80086f6:	d10b      	bne.n	8008710 <_free_r+0x6c>
 80086f8:	6820      	ldr	r0, [r4, #0]
 80086fa:	4401      	add	r1, r0
 80086fc:	1850      	adds	r0, r2, r1
 80086fe:	4283      	cmp	r3, r0
 8008700:	6011      	str	r1, [r2, #0]
 8008702:	d1e0      	bne.n	80086c6 <_free_r+0x22>
 8008704:	6818      	ldr	r0, [r3, #0]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	4408      	add	r0, r1
 800870a:	6010      	str	r0, [r2, #0]
 800870c:	6053      	str	r3, [r2, #4]
 800870e:	e7da      	b.n	80086c6 <_free_r+0x22>
 8008710:	d902      	bls.n	8008718 <_free_r+0x74>
 8008712:	230c      	movs	r3, #12
 8008714:	602b      	str	r3, [r5, #0]
 8008716:	e7d6      	b.n	80086c6 <_free_r+0x22>
 8008718:	6820      	ldr	r0, [r4, #0]
 800871a:	1821      	adds	r1, r4, r0
 800871c:	428b      	cmp	r3, r1
 800871e:	bf01      	itttt	eq
 8008720:	6819      	ldreq	r1, [r3, #0]
 8008722:	685b      	ldreq	r3, [r3, #4]
 8008724:	1809      	addeq	r1, r1, r0
 8008726:	6021      	streq	r1, [r4, #0]
 8008728:	6063      	str	r3, [r4, #4]
 800872a:	6054      	str	r4, [r2, #4]
 800872c:	e7cb      	b.n	80086c6 <_free_r+0x22>
 800872e:	bd38      	pop	{r3, r4, r5, pc}
 8008730:	2000206c 	.word	0x2000206c

08008734 <sbrk_aligned>:
 8008734:	b570      	push	{r4, r5, r6, lr}
 8008736:	4e0f      	ldr	r6, [pc, #60]	@ (8008774 <sbrk_aligned+0x40>)
 8008738:	460c      	mov	r4, r1
 800873a:	6831      	ldr	r1, [r6, #0]
 800873c:	4605      	mov	r5, r0
 800873e:	b911      	cbnz	r1, 8008746 <sbrk_aligned+0x12>
 8008740:	f000 fba8 	bl	8008e94 <_sbrk_r>
 8008744:	6030      	str	r0, [r6, #0]
 8008746:	4621      	mov	r1, r4
 8008748:	4628      	mov	r0, r5
 800874a:	f000 fba3 	bl	8008e94 <_sbrk_r>
 800874e:	1c43      	adds	r3, r0, #1
 8008750:	d103      	bne.n	800875a <sbrk_aligned+0x26>
 8008752:	f04f 34ff 	mov.w	r4, #4294967295
 8008756:	4620      	mov	r0, r4
 8008758:	bd70      	pop	{r4, r5, r6, pc}
 800875a:	1cc4      	adds	r4, r0, #3
 800875c:	f024 0403 	bic.w	r4, r4, #3
 8008760:	42a0      	cmp	r0, r4
 8008762:	d0f8      	beq.n	8008756 <sbrk_aligned+0x22>
 8008764:	1a21      	subs	r1, r4, r0
 8008766:	4628      	mov	r0, r5
 8008768:	f000 fb94 	bl	8008e94 <_sbrk_r>
 800876c:	3001      	adds	r0, #1
 800876e:	d1f2      	bne.n	8008756 <sbrk_aligned+0x22>
 8008770:	e7ef      	b.n	8008752 <sbrk_aligned+0x1e>
 8008772:	bf00      	nop
 8008774:	20002068 	.word	0x20002068

08008778 <_malloc_r>:
 8008778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800877c:	1ccd      	adds	r5, r1, #3
 800877e:	f025 0503 	bic.w	r5, r5, #3
 8008782:	3508      	adds	r5, #8
 8008784:	2d0c      	cmp	r5, #12
 8008786:	bf38      	it	cc
 8008788:	250c      	movcc	r5, #12
 800878a:	2d00      	cmp	r5, #0
 800878c:	4606      	mov	r6, r0
 800878e:	db01      	blt.n	8008794 <_malloc_r+0x1c>
 8008790:	42a9      	cmp	r1, r5
 8008792:	d904      	bls.n	800879e <_malloc_r+0x26>
 8008794:	230c      	movs	r3, #12
 8008796:	6033      	str	r3, [r6, #0]
 8008798:	2000      	movs	r0, #0
 800879a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800879e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008874 <_malloc_r+0xfc>
 80087a2:	f000 f869 	bl	8008878 <__malloc_lock>
 80087a6:	f8d8 3000 	ldr.w	r3, [r8]
 80087aa:	461c      	mov	r4, r3
 80087ac:	bb44      	cbnz	r4, 8008800 <_malloc_r+0x88>
 80087ae:	4629      	mov	r1, r5
 80087b0:	4630      	mov	r0, r6
 80087b2:	f7ff ffbf 	bl	8008734 <sbrk_aligned>
 80087b6:	1c43      	adds	r3, r0, #1
 80087b8:	4604      	mov	r4, r0
 80087ba:	d158      	bne.n	800886e <_malloc_r+0xf6>
 80087bc:	f8d8 4000 	ldr.w	r4, [r8]
 80087c0:	4627      	mov	r7, r4
 80087c2:	2f00      	cmp	r7, #0
 80087c4:	d143      	bne.n	800884e <_malloc_r+0xd6>
 80087c6:	2c00      	cmp	r4, #0
 80087c8:	d04b      	beq.n	8008862 <_malloc_r+0xea>
 80087ca:	6823      	ldr	r3, [r4, #0]
 80087cc:	4639      	mov	r1, r7
 80087ce:	4630      	mov	r0, r6
 80087d0:	eb04 0903 	add.w	r9, r4, r3
 80087d4:	f000 fb5e 	bl	8008e94 <_sbrk_r>
 80087d8:	4581      	cmp	r9, r0
 80087da:	d142      	bne.n	8008862 <_malloc_r+0xea>
 80087dc:	6821      	ldr	r1, [r4, #0]
 80087de:	4630      	mov	r0, r6
 80087e0:	1a6d      	subs	r5, r5, r1
 80087e2:	4629      	mov	r1, r5
 80087e4:	f7ff ffa6 	bl	8008734 <sbrk_aligned>
 80087e8:	3001      	adds	r0, #1
 80087ea:	d03a      	beq.n	8008862 <_malloc_r+0xea>
 80087ec:	6823      	ldr	r3, [r4, #0]
 80087ee:	442b      	add	r3, r5
 80087f0:	6023      	str	r3, [r4, #0]
 80087f2:	f8d8 3000 	ldr.w	r3, [r8]
 80087f6:	685a      	ldr	r2, [r3, #4]
 80087f8:	bb62      	cbnz	r2, 8008854 <_malloc_r+0xdc>
 80087fa:	f8c8 7000 	str.w	r7, [r8]
 80087fe:	e00f      	b.n	8008820 <_malloc_r+0xa8>
 8008800:	6822      	ldr	r2, [r4, #0]
 8008802:	1b52      	subs	r2, r2, r5
 8008804:	d420      	bmi.n	8008848 <_malloc_r+0xd0>
 8008806:	2a0b      	cmp	r2, #11
 8008808:	d917      	bls.n	800883a <_malloc_r+0xc2>
 800880a:	1961      	adds	r1, r4, r5
 800880c:	42a3      	cmp	r3, r4
 800880e:	6025      	str	r5, [r4, #0]
 8008810:	bf18      	it	ne
 8008812:	6059      	strne	r1, [r3, #4]
 8008814:	6863      	ldr	r3, [r4, #4]
 8008816:	bf08      	it	eq
 8008818:	f8c8 1000 	streq.w	r1, [r8]
 800881c:	5162      	str	r2, [r4, r5]
 800881e:	604b      	str	r3, [r1, #4]
 8008820:	4630      	mov	r0, r6
 8008822:	f000 f82f 	bl	8008884 <__malloc_unlock>
 8008826:	f104 000b 	add.w	r0, r4, #11
 800882a:	1d23      	adds	r3, r4, #4
 800882c:	f020 0007 	bic.w	r0, r0, #7
 8008830:	1ac2      	subs	r2, r0, r3
 8008832:	bf1c      	itt	ne
 8008834:	1a1b      	subne	r3, r3, r0
 8008836:	50a3      	strne	r3, [r4, r2]
 8008838:	e7af      	b.n	800879a <_malloc_r+0x22>
 800883a:	6862      	ldr	r2, [r4, #4]
 800883c:	42a3      	cmp	r3, r4
 800883e:	bf0c      	ite	eq
 8008840:	f8c8 2000 	streq.w	r2, [r8]
 8008844:	605a      	strne	r2, [r3, #4]
 8008846:	e7eb      	b.n	8008820 <_malloc_r+0xa8>
 8008848:	4623      	mov	r3, r4
 800884a:	6864      	ldr	r4, [r4, #4]
 800884c:	e7ae      	b.n	80087ac <_malloc_r+0x34>
 800884e:	463c      	mov	r4, r7
 8008850:	687f      	ldr	r7, [r7, #4]
 8008852:	e7b6      	b.n	80087c2 <_malloc_r+0x4a>
 8008854:	461a      	mov	r2, r3
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	42a3      	cmp	r3, r4
 800885a:	d1fb      	bne.n	8008854 <_malloc_r+0xdc>
 800885c:	2300      	movs	r3, #0
 800885e:	6053      	str	r3, [r2, #4]
 8008860:	e7de      	b.n	8008820 <_malloc_r+0xa8>
 8008862:	230c      	movs	r3, #12
 8008864:	4630      	mov	r0, r6
 8008866:	6033      	str	r3, [r6, #0]
 8008868:	f000 f80c 	bl	8008884 <__malloc_unlock>
 800886c:	e794      	b.n	8008798 <_malloc_r+0x20>
 800886e:	6005      	str	r5, [r0, #0]
 8008870:	e7d6      	b.n	8008820 <_malloc_r+0xa8>
 8008872:	bf00      	nop
 8008874:	2000206c 	.word	0x2000206c

08008878 <__malloc_lock>:
 8008878:	4801      	ldr	r0, [pc, #4]	@ (8008880 <__malloc_lock+0x8>)
 800887a:	f7ff bf03 	b.w	8008684 <__retarget_lock_acquire_recursive>
 800887e:	bf00      	nop
 8008880:	20002064 	.word	0x20002064

08008884 <__malloc_unlock>:
 8008884:	4801      	ldr	r0, [pc, #4]	@ (800888c <__malloc_unlock+0x8>)
 8008886:	f7ff befe 	b.w	8008686 <__retarget_lock_release_recursive>
 800888a:	bf00      	nop
 800888c:	20002064 	.word	0x20002064

08008890 <__ssputs_r>:
 8008890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008894:	461f      	mov	r7, r3
 8008896:	688e      	ldr	r6, [r1, #8]
 8008898:	4682      	mov	sl, r0
 800889a:	42be      	cmp	r6, r7
 800889c:	460c      	mov	r4, r1
 800889e:	4690      	mov	r8, r2
 80088a0:	680b      	ldr	r3, [r1, #0]
 80088a2:	d82d      	bhi.n	8008900 <__ssputs_r+0x70>
 80088a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80088a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80088ac:	d026      	beq.n	80088fc <__ssputs_r+0x6c>
 80088ae:	6965      	ldr	r5, [r4, #20]
 80088b0:	6909      	ldr	r1, [r1, #16]
 80088b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80088b6:	eba3 0901 	sub.w	r9, r3, r1
 80088ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80088be:	1c7b      	adds	r3, r7, #1
 80088c0:	444b      	add	r3, r9
 80088c2:	106d      	asrs	r5, r5, #1
 80088c4:	429d      	cmp	r5, r3
 80088c6:	bf38      	it	cc
 80088c8:	461d      	movcc	r5, r3
 80088ca:	0553      	lsls	r3, r2, #21
 80088cc:	d527      	bpl.n	800891e <__ssputs_r+0x8e>
 80088ce:	4629      	mov	r1, r5
 80088d0:	f7ff ff52 	bl	8008778 <_malloc_r>
 80088d4:	4606      	mov	r6, r0
 80088d6:	b360      	cbz	r0, 8008932 <__ssputs_r+0xa2>
 80088d8:	464a      	mov	r2, r9
 80088da:	6921      	ldr	r1, [r4, #16]
 80088dc:	f7ff fed4 	bl	8008688 <memcpy>
 80088e0:	89a3      	ldrh	r3, [r4, #12]
 80088e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80088e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088ea:	81a3      	strh	r3, [r4, #12]
 80088ec:	6126      	str	r6, [r4, #16]
 80088ee:	444e      	add	r6, r9
 80088f0:	6026      	str	r6, [r4, #0]
 80088f2:	463e      	mov	r6, r7
 80088f4:	6165      	str	r5, [r4, #20]
 80088f6:	eba5 0509 	sub.w	r5, r5, r9
 80088fa:	60a5      	str	r5, [r4, #8]
 80088fc:	42be      	cmp	r6, r7
 80088fe:	d900      	bls.n	8008902 <__ssputs_r+0x72>
 8008900:	463e      	mov	r6, r7
 8008902:	4632      	mov	r2, r6
 8008904:	4641      	mov	r1, r8
 8008906:	6820      	ldr	r0, [r4, #0]
 8008908:	f000 faaa 	bl	8008e60 <memmove>
 800890c:	2000      	movs	r0, #0
 800890e:	68a3      	ldr	r3, [r4, #8]
 8008910:	1b9b      	subs	r3, r3, r6
 8008912:	60a3      	str	r3, [r4, #8]
 8008914:	6823      	ldr	r3, [r4, #0]
 8008916:	4433      	add	r3, r6
 8008918:	6023      	str	r3, [r4, #0]
 800891a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800891e:	462a      	mov	r2, r5
 8008920:	f000 fad6 	bl	8008ed0 <_realloc_r>
 8008924:	4606      	mov	r6, r0
 8008926:	2800      	cmp	r0, #0
 8008928:	d1e0      	bne.n	80088ec <__ssputs_r+0x5c>
 800892a:	4650      	mov	r0, sl
 800892c:	6921      	ldr	r1, [r4, #16]
 800892e:	f7ff feb9 	bl	80086a4 <_free_r>
 8008932:	230c      	movs	r3, #12
 8008934:	f8ca 3000 	str.w	r3, [sl]
 8008938:	89a3      	ldrh	r3, [r4, #12]
 800893a:	f04f 30ff 	mov.w	r0, #4294967295
 800893e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008942:	81a3      	strh	r3, [r4, #12]
 8008944:	e7e9      	b.n	800891a <__ssputs_r+0x8a>
	...

08008948 <_svfiprintf_r>:
 8008948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800894c:	4698      	mov	r8, r3
 800894e:	898b      	ldrh	r3, [r1, #12]
 8008950:	4607      	mov	r7, r0
 8008952:	061b      	lsls	r3, r3, #24
 8008954:	460d      	mov	r5, r1
 8008956:	4614      	mov	r4, r2
 8008958:	b09d      	sub	sp, #116	@ 0x74
 800895a:	d510      	bpl.n	800897e <_svfiprintf_r+0x36>
 800895c:	690b      	ldr	r3, [r1, #16]
 800895e:	b973      	cbnz	r3, 800897e <_svfiprintf_r+0x36>
 8008960:	2140      	movs	r1, #64	@ 0x40
 8008962:	f7ff ff09 	bl	8008778 <_malloc_r>
 8008966:	6028      	str	r0, [r5, #0]
 8008968:	6128      	str	r0, [r5, #16]
 800896a:	b930      	cbnz	r0, 800897a <_svfiprintf_r+0x32>
 800896c:	230c      	movs	r3, #12
 800896e:	603b      	str	r3, [r7, #0]
 8008970:	f04f 30ff 	mov.w	r0, #4294967295
 8008974:	b01d      	add	sp, #116	@ 0x74
 8008976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800897a:	2340      	movs	r3, #64	@ 0x40
 800897c:	616b      	str	r3, [r5, #20]
 800897e:	2300      	movs	r3, #0
 8008980:	9309      	str	r3, [sp, #36]	@ 0x24
 8008982:	2320      	movs	r3, #32
 8008984:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008988:	2330      	movs	r3, #48	@ 0x30
 800898a:	f04f 0901 	mov.w	r9, #1
 800898e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008992:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008b2c <_svfiprintf_r+0x1e4>
 8008996:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800899a:	4623      	mov	r3, r4
 800899c:	469a      	mov	sl, r3
 800899e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089a2:	b10a      	cbz	r2, 80089a8 <_svfiprintf_r+0x60>
 80089a4:	2a25      	cmp	r2, #37	@ 0x25
 80089a6:	d1f9      	bne.n	800899c <_svfiprintf_r+0x54>
 80089a8:	ebba 0b04 	subs.w	fp, sl, r4
 80089ac:	d00b      	beq.n	80089c6 <_svfiprintf_r+0x7e>
 80089ae:	465b      	mov	r3, fp
 80089b0:	4622      	mov	r2, r4
 80089b2:	4629      	mov	r1, r5
 80089b4:	4638      	mov	r0, r7
 80089b6:	f7ff ff6b 	bl	8008890 <__ssputs_r>
 80089ba:	3001      	adds	r0, #1
 80089bc:	f000 80a7 	beq.w	8008b0e <_svfiprintf_r+0x1c6>
 80089c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089c2:	445a      	add	r2, fp
 80089c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80089c6:	f89a 3000 	ldrb.w	r3, [sl]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	f000 809f 	beq.w	8008b0e <_svfiprintf_r+0x1c6>
 80089d0:	2300      	movs	r3, #0
 80089d2:	f04f 32ff 	mov.w	r2, #4294967295
 80089d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089da:	f10a 0a01 	add.w	sl, sl, #1
 80089de:	9304      	str	r3, [sp, #16]
 80089e0:	9307      	str	r3, [sp, #28]
 80089e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80089e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80089e8:	4654      	mov	r4, sl
 80089ea:	2205      	movs	r2, #5
 80089ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089f0:	484e      	ldr	r0, [pc, #312]	@ (8008b2c <_svfiprintf_r+0x1e4>)
 80089f2:	f000 fa5f 	bl	8008eb4 <memchr>
 80089f6:	9a04      	ldr	r2, [sp, #16]
 80089f8:	b9d8      	cbnz	r0, 8008a32 <_svfiprintf_r+0xea>
 80089fa:	06d0      	lsls	r0, r2, #27
 80089fc:	bf44      	itt	mi
 80089fe:	2320      	movmi	r3, #32
 8008a00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a04:	0711      	lsls	r1, r2, #28
 8008a06:	bf44      	itt	mi
 8008a08:	232b      	movmi	r3, #43	@ 0x2b
 8008a0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a0e:	f89a 3000 	ldrb.w	r3, [sl]
 8008a12:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a14:	d015      	beq.n	8008a42 <_svfiprintf_r+0xfa>
 8008a16:	4654      	mov	r4, sl
 8008a18:	2000      	movs	r0, #0
 8008a1a:	f04f 0c0a 	mov.w	ip, #10
 8008a1e:	9a07      	ldr	r2, [sp, #28]
 8008a20:	4621      	mov	r1, r4
 8008a22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a26:	3b30      	subs	r3, #48	@ 0x30
 8008a28:	2b09      	cmp	r3, #9
 8008a2a:	d94b      	bls.n	8008ac4 <_svfiprintf_r+0x17c>
 8008a2c:	b1b0      	cbz	r0, 8008a5c <_svfiprintf_r+0x114>
 8008a2e:	9207      	str	r2, [sp, #28]
 8008a30:	e014      	b.n	8008a5c <_svfiprintf_r+0x114>
 8008a32:	eba0 0308 	sub.w	r3, r0, r8
 8008a36:	fa09 f303 	lsl.w	r3, r9, r3
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	46a2      	mov	sl, r4
 8008a3e:	9304      	str	r3, [sp, #16]
 8008a40:	e7d2      	b.n	80089e8 <_svfiprintf_r+0xa0>
 8008a42:	9b03      	ldr	r3, [sp, #12]
 8008a44:	1d19      	adds	r1, r3, #4
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	9103      	str	r1, [sp, #12]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	bfbb      	ittet	lt
 8008a4e:	425b      	neglt	r3, r3
 8008a50:	f042 0202 	orrlt.w	r2, r2, #2
 8008a54:	9307      	strge	r3, [sp, #28]
 8008a56:	9307      	strlt	r3, [sp, #28]
 8008a58:	bfb8      	it	lt
 8008a5a:	9204      	strlt	r2, [sp, #16]
 8008a5c:	7823      	ldrb	r3, [r4, #0]
 8008a5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a60:	d10a      	bne.n	8008a78 <_svfiprintf_r+0x130>
 8008a62:	7863      	ldrb	r3, [r4, #1]
 8008a64:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a66:	d132      	bne.n	8008ace <_svfiprintf_r+0x186>
 8008a68:	9b03      	ldr	r3, [sp, #12]
 8008a6a:	3402      	adds	r4, #2
 8008a6c:	1d1a      	adds	r2, r3, #4
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	9203      	str	r2, [sp, #12]
 8008a72:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a76:	9305      	str	r3, [sp, #20]
 8008a78:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008b30 <_svfiprintf_r+0x1e8>
 8008a7c:	2203      	movs	r2, #3
 8008a7e:	4650      	mov	r0, sl
 8008a80:	7821      	ldrb	r1, [r4, #0]
 8008a82:	f000 fa17 	bl	8008eb4 <memchr>
 8008a86:	b138      	cbz	r0, 8008a98 <_svfiprintf_r+0x150>
 8008a88:	2240      	movs	r2, #64	@ 0x40
 8008a8a:	9b04      	ldr	r3, [sp, #16]
 8008a8c:	eba0 000a 	sub.w	r0, r0, sl
 8008a90:	4082      	lsls	r2, r0
 8008a92:	4313      	orrs	r3, r2
 8008a94:	3401      	adds	r4, #1
 8008a96:	9304      	str	r3, [sp, #16]
 8008a98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a9c:	2206      	movs	r2, #6
 8008a9e:	4825      	ldr	r0, [pc, #148]	@ (8008b34 <_svfiprintf_r+0x1ec>)
 8008aa0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008aa4:	f000 fa06 	bl	8008eb4 <memchr>
 8008aa8:	2800      	cmp	r0, #0
 8008aaa:	d036      	beq.n	8008b1a <_svfiprintf_r+0x1d2>
 8008aac:	4b22      	ldr	r3, [pc, #136]	@ (8008b38 <_svfiprintf_r+0x1f0>)
 8008aae:	bb1b      	cbnz	r3, 8008af8 <_svfiprintf_r+0x1b0>
 8008ab0:	9b03      	ldr	r3, [sp, #12]
 8008ab2:	3307      	adds	r3, #7
 8008ab4:	f023 0307 	bic.w	r3, r3, #7
 8008ab8:	3308      	adds	r3, #8
 8008aba:	9303      	str	r3, [sp, #12]
 8008abc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008abe:	4433      	add	r3, r6
 8008ac0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ac2:	e76a      	b.n	800899a <_svfiprintf_r+0x52>
 8008ac4:	460c      	mov	r4, r1
 8008ac6:	2001      	movs	r0, #1
 8008ac8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008acc:	e7a8      	b.n	8008a20 <_svfiprintf_r+0xd8>
 8008ace:	2300      	movs	r3, #0
 8008ad0:	f04f 0c0a 	mov.w	ip, #10
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	3401      	adds	r4, #1
 8008ad8:	9305      	str	r3, [sp, #20]
 8008ada:	4620      	mov	r0, r4
 8008adc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ae0:	3a30      	subs	r2, #48	@ 0x30
 8008ae2:	2a09      	cmp	r2, #9
 8008ae4:	d903      	bls.n	8008aee <_svfiprintf_r+0x1a6>
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d0c6      	beq.n	8008a78 <_svfiprintf_r+0x130>
 8008aea:	9105      	str	r1, [sp, #20]
 8008aec:	e7c4      	b.n	8008a78 <_svfiprintf_r+0x130>
 8008aee:	4604      	mov	r4, r0
 8008af0:	2301      	movs	r3, #1
 8008af2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008af6:	e7f0      	b.n	8008ada <_svfiprintf_r+0x192>
 8008af8:	ab03      	add	r3, sp, #12
 8008afa:	9300      	str	r3, [sp, #0]
 8008afc:	462a      	mov	r2, r5
 8008afe:	4638      	mov	r0, r7
 8008b00:	4b0e      	ldr	r3, [pc, #56]	@ (8008b3c <_svfiprintf_r+0x1f4>)
 8008b02:	a904      	add	r1, sp, #16
 8008b04:	f3af 8000 	nop.w
 8008b08:	1c42      	adds	r2, r0, #1
 8008b0a:	4606      	mov	r6, r0
 8008b0c:	d1d6      	bne.n	8008abc <_svfiprintf_r+0x174>
 8008b0e:	89ab      	ldrh	r3, [r5, #12]
 8008b10:	065b      	lsls	r3, r3, #25
 8008b12:	f53f af2d 	bmi.w	8008970 <_svfiprintf_r+0x28>
 8008b16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b18:	e72c      	b.n	8008974 <_svfiprintf_r+0x2c>
 8008b1a:	ab03      	add	r3, sp, #12
 8008b1c:	9300      	str	r3, [sp, #0]
 8008b1e:	462a      	mov	r2, r5
 8008b20:	4638      	mov	r0, r7
 8008b22:	4b06      	ldr	r3, [pc, #24]	@ (8008b3c <_svfiprintf_r+0x1f4>)
 8008b24:	a904      	add	r1, sp, #16
 8008b26:	f000 f87d 	bl	8008c24 <_printf_i>
 8008b2a:	e7ed      	b.n	8008b08 <_svfiprintf_r+0x1c0>
 8008b2c:	08009792 	.word	0x08009792
 8008b30:	08009798 	.word	0x08009798
 8008b34:	0800979c 	.word	0x0800979c
 8008b38:	00000000 	.word	0x00000000
 8008b3c:	08008891 	.word	0x08008891

08008b40 <_printf_common>:
 8008b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b44:	4616      	mov	r6, r2
 8008b46:	4698      	mov	r8, r3
 8008b48:	688a      	ldr	r2, [r1, #8]
 8008b4a:	690b      	ldr	r3, [r1, #16]
 8008b4c:	4607      	mov	r7, r0
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	bfb8      	it	lt
 8008b52:	4613      	movlt	r3, r2
 8008b54:	6033      	str	r3, [r6, #0]
 8008b56:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008b5a:	460c      	mov	r4, r1
 8008b5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008b60:	b10a      	cbz	r2, 8008b66 <_printf_common+0x26>
 8008b62:	3301      	adds	r3, #1
 8008b64:	6033      	str	r3, [r6, #0]
 8008b66:	6823      	ldr	r3, [r4, #0]
 8008b68:	0699      	lsls	r1, r3, #26
 8008b6a:	bf42      	ittt	mi
 8008b6c:	6833      	ldrmi	r3, [r6, #0]
 8008b6e:	3302      	addmi	r3, #2
 8008b70:	6033      	strmi	r3, [r6, #0]
 8008b72:	6825      	ldr	r5, [r4, #0]
 8008b74:	f015 0506 	ands.w	r5, r5, #6
 8008b78:	d106      	bne.n	8008b88 <_printf_common+0x48>
 8008b7a:	f104 0a19 	add.w	sl, r4, #25
 8008b7e:	68e3      	ldr	r3, [r4, #12]
 8008b80:	6832      	ldr	r2, [r6, #0]
 8008b82:	1a9b      	subs	r3, r3, r2
 8008b84:	42ab      	cmp	r3, r5
 8008b86:	dc2b      	bgt.n	8008be0 <_printf_common+0xa0>
 8008b88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008b8c:	6822      	ldr	r2, [r4, #0]
 8008b8e:	3b00      	subs	r3, #0
 8008b90:	bf18      	it	ne
 8008b92:	2301      	movne	r3, #1
 8008b94:	0692      	lsls	r2, r2, #26
 8008b96:	d430      	bmi.n	8008bfa <_printf_common+0xba>
 8008b98:	4641      	mov	r1, r8
 8008b9a:	4638      	mov	r0, r7
 8008b9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008ba0:	47c8      	blx	r9
 8008ba2:	3001      	adds	r0, #1
 8008ba4:	d023      	beq.n	8008bee <_printf_common+0xae>
 8008ba6:	6823      	ldr	r3, [r4, #0]
 8008ba8:	6922      	ldr	r2, [r4, #16]
 8008baa:	f003 0306 	and.w	r3, r3, #6
 8008bae:	2b04      	cmp	r3, #4
 8008bb0:	bf14      	ite	ne
 8008bb2:	2500      	movne	r5, #0
 8008bb4:	6833      	ldreq	r3, [r6, #0]
 8008bb6:	f04f 0600 	mov.w	r6, #0
 8008bba:	bf08      	it	eq
 8008bbc:	68e5      	ldreq	r5, [r4, #12]
 8008bbe:	f104 041a 	add.w	r4, r4, #26
 8008bc2:	bf08      	it	eq
 8008bc4:	1aed      	subeq	r5, r5, r3
 8008bc6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008bca:	bf08      	it	eq
 8008bcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	bfc4      	itt	gt
 8008bd4:	1a9b      	subgt	r3, r3, r2
 8008bd6:	18ed      	addgt	r5, r5, r3
 8008bd8:	42b5      	cmp	r5, r6
 8008bda:	d11a      	bne.n	8008c12 <_printf_common+0xd2>
 8008bdc:	2000      	movs	r0, #0
 8008bde:	e008      	b.n	8008bf2 <_printf_common+0xb2>
 8008be0:	2301      	movs	r3, #1
 8008be2:	4652      	mov	r2, sl
 8008be4:	4641      	mov	r1, r8
 8008be6:	4638      	mov	r0, r7
 8008be8:	47c8      	blx	r9
 8008bea:	3001      	adds	r0, #1
 8008bec:	d103      	bne.n	8008bf6 <_printf_common+0xb6>
 8008bee:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bf6:	3501      	adds	r5, #1
 8008bf8:	e7c1      	b.n	8008b7e <_printf_common+0x3e>
 8008bfa:	2030      	movs	r0, #48	@ 0x30
 8008bfc:	18e1      	adds	r1, r4, r3
 8008bfe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008c02:	1c5a      	adds	r2, r3, #1
 8008c04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008c08:	4422      	add	r2, r4
 8008c0a:	3302      	adds	r3, #2
 8008c0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008c10:	e7c2      	b.n	8008b98 <_printf_common+0x58>
 8008c12:	2301      	movs	r3, #1
 8008c14:	4622      	mov	r2, r4
 8008c16:	4641      	mov	r1, r8
 8008c18:	4638      	mov	r0, r7
 8008c1a:	47c8      	blx	r9
 8008c1c:	3001      	adds	r0, #1
 8008c1e:	d0e6      	beq.n	8008bee <_printf_common+0xae>
 8008c20:	3601      	adds	r6, #1
 8008c22:	e7d9      	b.n	8008bd8 <_printf_common+0x98>

08008c24 <_printf_i>:
 8008c24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c28:	7e0f      	ldrb	r7, [r1, #24]
 8008c2a:	4691      	mov	r9, r2
 8008c2c:	2f78      	cmp	r7, #120	@ 0x78
 8008c2e:	4680      	mov	r8, r0
 8008c30:	460c      	mov	r4, r1
 8008c32:	469a      	mov	sl, r3
 8008c34:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008c36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008c3a:	d807      	bhi.n	8008c4c <_printf_i+0x28>
 8008c3c:	2f62      	cmp	r7, #98	@ 0x62
 8008c3e:	d80a      	bhi.n	8008c56 <_printf_i+0x32>
 8008c40:	2f00      	cmp	r7, #0
 8008c42:	f000 80d1 	beq.w	8008de8 <_printf_i+0x1c4>
 8008c46:	2f58      	cmp	r7, #88	@ 0x58
 8008c48:	f000 80b8 	beq.w	8008dbc <_printf_i+0x198>
 8008c4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008c54:	e03a      	b.n	8008ccc <_printf_i+0xa8>
 8008c56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008c5a:	2b15      	cmp	r3, #21
 8008c5c:	d8f6      	bhi.n	8008c4c <_printf_i+0x28>
 8008c5e:	a101      	add	r1, pc, #4	@ (adr r1, 8008c64 <_printf_i+0x40>)
 8008c60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c64:	08008cbd 	.word	0x08008cbd
 8008c68:	08008cd1 	.word	0x08008cd1
 8008c6c:	08008c4d 	.word	0x08008c4d
 8008c70:	08008c4d 	.word	0x08008c4d
 8008c74:	08008c4d 	.word	0x08008c4d
 8008c78:	08008c4d 	.word	0x08008c4d
 8008c7c:	08008cd1 	.word	0x08008cd1
 8008c80:	08008c4d 	.word	0x08008c4d
 8008c84:	08008c4d 	.word	0x08008c4d
 8008c88:	08008c4d 	.word	0x08008c4d
 8008c8c:	08008c4d 	.word	0x08008c4d
 8008c90:	08008dcf 	.word	0x08008dcf
 8008c94:	08008cfb 	.word	0x08008cfb
 8008c98:	08008d89 	.word	0x08008d89
 8008c9c:	08008c4d 	.word	0x08008c4d
 8008ca0:	08008c4d 	.word	0x08008c4d
 8008ca4:	08008df1 	.word	0x08008df1
 8008ca8:	08008c4d 	.word	0x08008c4d
 8008cac:	08008cfb 	.word	0x08008cfb
 8008cb0:	08008c4d 	.word	0x08008c4d
 8008cb4:	08008c4d 	.word	0x08008c4d
 8008cb8:	08008d91 	.word	0x08008d91
 8008cbc:	6833      	ldr	r3, [r6, #0]
 8008cbe:	1d1a      	adds	r2, r3, #4
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	6032      	str	r2, [r6, #0]
 8008cc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008cc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008ccc:	2301      	movs	r3, #1
 8008cce:	e09c      	b.n	8008e0a <_printf_i+0x1e6>
 8008cd0:	6833      	ldr	r3, [r6, #0]
 8008cd2:	6820      	ldr	r0, [r4, #0]
 8008cd4:	1d19      	adds	r1, r3, #4
 8008cd6:	6031      	str	r1, [r6, #0]
 8008cd8:	0606      	lsls	r6, r0, #24
 8008cda:	d501      	bpl.n	8008ce0 <_printf_i+0xbc>
 8008cdc:	681d      	ldr	r5, [r3, #0]
 8008cde:	e003      	b.n	8008ce8 <_printf_i+0xc4>
 8008ce0:	0645      	lsls	r5, r0, #25
 8008ce2:	d5fb      	bpl.n	8008cdc <_printf_i+0xb8>
 8008ce4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008ce8:	2d00      	cmp	r5, #0
 8008cea:	da03      	bge.n	8008cf4 <_printf_i+0xd0>
 8008cec:	232d      	movs	r3, #45	@ 0x2d
 8008cee:	426d      	negs	r5, r5
 8008cf0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008cf4:	230a      	movs	r3, #10
 8008cf6:	4858      	ldr	r0, [pc, #352]	@ (8008e58 <_printf_i+0x234>)
 8008cf8:	e011      	b.n	8008d1e <_printf_i+0xfa>
 8008cfa:	6821      	ldr	r1, [r4, #0]
 8008cfc:	6833      	ldr	r3, [r6, #0]
 8008cfe:	0608      	lsls	r0, r1, #24
 8008d00:	f853 5b04 	ldr.w	r5, [r3], #4
 8008d04:	d402      	bmi.n	8008d0c <_printf_i+0xe8>
 8008d06:	0649      	lsls	r1, r1, #25
 8008d08:	bf48      	it	mi
 8008d0a:	b2ad      	uxthmi	r5, r5
 8008d0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008d0e:	6033      	str	r3, [r6, #0]
 8008d10:	bf14      	ite	ne
 8008d12:	230a      	movne	r3, #10
 8008d14:	2308      	moveq	r3, #8
 8008d16:	4850      	ldr	r0, [pc, #320]	@ (8008e58 <_printf_i+0x234>)
 8008d18:	2100      	movs	r1, #0
 8008d1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008d1e:	6866      	ldr	r6, [r4, #4]
 8008d20:	2e00      	cmp	r6, #0
 8008d22:	60a6      	str	r6, [r4, #8]
 8008d24:	db05      	blt.n	8008d32 <_printf_i+0x10e>
 8008d26:	6821      	ldr	r1, [r4, #0]
 8008d28:	432e      	orrs	r6, r5
 8008d2a:	f021 0104 	bic.w	r1, r1, #4
 8008d2e:	6021      	str	r1, [r4, #0]
 8008d30:	d04b      	beq.n	8008dca <_printf_i+0x1a6>
 8008d32:	4616      	mov	r6, r2
 8008d34:	fbb5 f1f3 	udiv	r1, r5, r3
 8008d38:	fb03 5711 	mls	r7, r3, r1, r5
 8008d3c:	5dc7      	ldrb	r7, [r0, r7]
 8008d3e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008d42:	462f      	mov	r7, r5
 8008d44:	42bb      	cmp	r3, r7
 8008d46:	460d      	mov	r5, r1
 8008d48:	d9f4      	bls.n	8008d34 <_printf_i+0x110>
 8008d4a:	2b08      	cmp	r3, #8
 8008d4c:	d10b      	bne.n	8008d66 <_printf_i+0x142>
 8008d4e:	6823      	ldr	r3, [r4, #0]
 8008d50:	07df      	lsls	r7, r3, #31
 8008d52:	d508      	bpl.n	8008d66 <_printf_i+0x142>
 8008d54:	6923      	ldr	r3, [r4, #16]
 8008d56:	6861      	ldr	r1, [r4, #4]
 8008d58:	4299      	cmp	r1, r3
 8008d5a:	bfde      	ittt	le
 8008d5c:	2330      	movle	r3, #48	@ 0x30
 8008d5e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d62:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008d66:	1b92      	subs	r2, r2, r6
 8008d68:	6122      	str	r2, [r4, #16]
 8008d6a:	464b      	mov	r3, r9
 8008d6c:	4621      	mov	r1, r4
 8008d6e:	4640      	mov	r0, r8
 8008d70:	f8cd a000 	str.w	sl, [sp]
 8008d74:	aa03      	add	r2, sp, #12
 8008d76:	f7ff fee3 	bl	8008b40 <_printf_common>
 8008d7a:	3001      	adds	r0, #1
 8008d7c:	d14a      	bne.n	8008e14 <_printf_i+0x1f0>
 8008d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d82:	b004      	add	sp, #16
 8008d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d88:	6823      	ldr	r3, [r4, #0]
 8008d8a:	f043 0320 	orr.w	r3, r3, #32
 8008d8e:	6023      	str	r3, [r4, #0]
 8008d90:	2778      	movs	r7, #120	@ 0x78
 8008d92:	4832      	ldr	r0, [pc, #200]	@ (8008e5c <_printf_i+0x238>)
 8008d94:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008d98:	6823      	ldr	r3, [r4, #0]
 8008d9a:	6831      	ldr	r1, [r6, #0]
 8008d9c:	061f      	lsls	r7, r3, #24
 8008d9e:	f851 5b04 	ldr.w	r5, [r1], #4
 8008da2:	d402      	bmi.n	8008daa <_printf_i+0x186>
 8008da4:	065f      	lsls	r7, r3, #25
 8008da6:	bf48      	it	mi
 8008da8:	b2ad      	uxthmi	r5, r5
 8008daa:	6031      	str	r1, [r6, #0]
 8008dac:	07d9      	lsls	r1, r3, #31
 8008dae:	bf44      	itt	mi
 8008db0:	f043 0320 	orrmi.w	r3, r3, #32
 8008db4:	6023      	strmi	r3, [r4, #0]
 8008db6:	b11d      	cbz	r5, 8008dc0 <_printf_i+0x19c>
 8008db8:	2310      	movs	r3, #16
 8008dba:	e7ad      	b.n	8008d18 <_printf_i+0xf4>
 8008dbc:	4826      	ldr	r0, [pc, #152]	@ (8008e58 <_printf_i+0x234>)
 8008dbe:	e7e9      	b.n	8008d94 <_printf_i+0x170>
 8008dc0:	6823      	ldr	r3, [r4, #0]
 8008dc2:	f023 0320 	bic.w	r3, r3, #32
 8008dc6:	6023      	str	r3, [r4, #0]
 8008dc8:	e7f6      	b.n	8008db8 <_printf_i+0x194>
 8008dca:	4616      	mov	r6, r2
 8008dcc:	e7bd      	b.n	8008d4a <_printf_i+0x126>
 8008dce:	6833      	ldr	r3, [r6, #0]
 8008dd0:	6825      	ldr	r5, [r4, #0]
 8008dd2:	1d18      	adds	r0, r3, #4
 8008dd4:	6961      	ldr	r1, [r4, #20]
 8008dd6:	6030      	str	r0, [r6, #0]
 8008dd8:	062e      	lsls	r6, r5, #24
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	d501      	bpl.n	8008de2 <_printf_i+0x1be>
 8008dde:	6019      	str	r1, [r3, #0]
 8008de0:	e002      	b.n	8008de8 <_printf_i+0x1c4>
 8008de2:	0668      	lsls	r0, r5, #25
 8008de4:	d5fb      	bpl.n	8008dde <_printf_i+0x1ba>
 8008de6:	8019      	strh	r1, [r3, #0]
 8008de8:	2300      	movs	r3, #0
 8008dea:	4616      	mov	r6, r2
 8008dec:	6123      	str	r3, [r4, #16]
 8008dee:	e7bc      	b.n	8008d6a <_printf_i+0x146>
 8008df0:	6833      	ldr	r3, [r6, #0]
 8008df2:	2100      	movs	r1, #0
 8008df4:	1d1a      	adds	r2, r3, #4
 8008df6:	6032      	str	r2, [r6, #0]
 8008df8:	681e      	ldr	r6, [r3, #0]
 8008dfa:	6862      	ldr	r2, [r4, #4]
 8008dfc:	4630      	mov	r0, r6
 8008dfe:	f000 f859 	bl	8008eb4 <memchr>
 8008e02:	b108      	cbz	r0, 8008e08 <_printf_i+0x1e4>
 8008e04:	1b80      	subs	r0, r0, r6
 8008e06:	6060      	str	r0, [r4, #4]
 8008e08:	6863      	ldr	r3, [r4, #4]
 8008e0a:	6123      	str	r3, [r4, #16]
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e12:	e7aa      	b.n	8008d6a <_printf_i+0x146>
 8008e14:	4632      	mov	r2, r6
 8008e16:	4649      	mov	r1, r9
 8008e18:	4640      	mov	r0, r8
 8008e1a:	6923      	ldr	r3, [r4, #16]
 8008e1c:	47d0      	blx	sl
 8008e1e:	3001      	adds	r0, #1
 8008e20:	d0ad      	beq.n	8008d7e <_printf_i+0x15a>
 8008e22:	6823      	ldr	r3, [r4, #0]
 8008e24:	079b      	lsls	r3, r3, #30
 8008e26:	d413      	bmi.n	8008e50 <_printf_i+0x22c>
 8008e28:	68e0      	ldr	r0, [r4, #12]
 8008e2a:	9b03      	ldr	r3, [sp, #12]
 8008e2c:	4298      	cmp	r0, r3
 8008e2e:	bfb8      	it	lt
 8008e30:	4618      	movlt	r0, r3
 8008e32:	e7a6      	b.n	8008d82 <_printf_i+0x15e>
 8008e34:	2301      	movs	r3, #1
 8008e36:	4632      	mov	r2, r6
 8008e38:	4649      	mov	r1, r9
 8008e3a:	4640      	mov	r0, r8
 8008e3c:	47d0      	blx	sl
 8008e3e:	3001      	adds	r0, #1
 8008e40:	d09d      	beq.n	8008d7e <_printf_i+0x15a>
 8008e42:	3501      	adds	r5, #1
 8008e44:	68e3      	ldr	r3, [r4, #12]
 8008e46:	9903      	ldr	r1, [sp, #12]
 8008e48:	1a5b      	subs	r3, r3, r1
 8008e4a:	42ab      	cmp	r3, r5
 8008e4c:	dcf2      	bgt.n	8008e34 <_printf_i+0x210>
 8008e4e:	e7eb      	b.n	8008e28 <_printf_i+0x204>
 8008e50:	2500      	movs	r5, #0
 8008e52:	f104 0619 	add.w	r6, r4, #25
 8008e56:	e7f5      	b.n	8008e44 <_printf_i+0x220>
 8008e58:	080097a3 	.word	0x080097a3
 8008e5c:	080097b4 	.word	0x080097b4

08008e60 <memmove>:
 8008e60:	4288      	cmp	r0, r1
 8008e62:	b510      	push	{r4, lr}
 8008e64:	eb01 0402 	add.w	r4, r1, r2
 8008e68:	d902      	bls.n	8008e70 <memmove+0x10>
 8008e6a:	4284      	cmp	r4, r0
 8008e6c:	4623      	mov	r3, r4
 8008e6e:	d807      	bhi.n	8008e80 <memmove+0x20>
 8008e70:	1e43      	subs	r3, r0, #1
 8008e72:	42a1      	cmp	r1, r4
 8008e74:	d008      	beq.n	8008e88 <memmove+0x28>
 8008e76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e7e:	e7f8      	b.n	8008e72 <memmove+0x12>
 8008e80:	4601      	mov	r1, r0
 8008e82:	4402      	add	r2, r0
 8008e84:	428a      	cmp	r2, r1
 8008e86:	d100      	bne.n	8008e8a <memmove+0x2a>
 8008e88:	bd10      	pop	{r4, pc}
 8008e8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e92:	e7f7      	b.n	8008e84 <memmove+0x24>

08008e94 <_sbrk_r>:
 8008e94:	b538      	push	{r3, r4, r5, lr}
 8008e96:	2300      	movs	r3, #0
 8008e98:	4d05      	ldr	r5, [pc, #20]	@ (8008eb0 <_sbrk_r+0x1c>)
 8008e9a:	4604      	mov	r4, r0
 8008e9c:	4608      	mov	r0, r1
 8008e9e:	602b      	str	r3, [r5, #0]
 8008ea0:	f7f8 fb6a 	bl	8001578 <_sbrk>
 8008ea4:	1c43      	adds	r3, r0, #1
 8008ea6:	d102      	bne.n	8008eae <_sbrk_r+0x1a>
 8008ea8:	682b      	ldr	r3, [r5, #0]
 8008eaa:	b103      	cbz	r3, 8008eae <_sbrk_r+0x1a>
 8008eac:	6023      	str	r3, [r4, #0]
 8008eae:	bd38      	pop	{r3, r4, r5, pc}
 8008eb0:	20002060 	.word	0x20002060

08008eb4 <memchr>:
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	b510      	push	{r4, lr}
 8008eb8:	b2c9      	uxtb	r1, r1
 8008eba:	4402      	add	r2, r0
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	d101      	bne.n	8008ec6 <memchr+0x12>
 8008ec2:	2000      	movs	r0, #0
 8008ec4:	e003      	b.n	8008ece <memchr+0x1a>
 8008ec6:	7804      	ldrb	r4, [r0, #0]
 8008ec8:	3301      	adds	r3, #1
 8008eca:	428c      	cmp	r4, r1
 8008ecc:	d1f6      	bne.n	8008ebc <memchr+0x8>
 8008ece:	bd10      	pop	{r4, pc}

08008ed0 <_realloc_r>:
 8008ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ed4:	4607      	mov	r7, r0
 8008ed6:	4614      	mov	r4, r2
 8008ed8:	460d      	mov	r5, r1
 8008eda:	b921      	cbnz	r1, 8008ee6 <_realloc_r+0x16>
 8008edc:	4611      	mov	r1, r2
 8008ede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ee2:	f7ff bc49 	b.w	8008778 <_malloc_r>
 8008ee6:	b92a      	cbnz	r2, 8008ef4 <_realloc_r+0x24>
 8008ee8:	f7ff fbdc 	bl	80086a4 <_free_r>
 8008eec:	4625      	mov	r5, r4
 8008eee:	4628      	mov	r0, r5
 8008ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ef4:	f000 f81a 	bl	8008f2c <_malloc_usable_size_r>
 8008ef8:	4284      	cmp	r4, r0
 8008efa:	4606      	mov	r6, r0
 8008efc:	d802      	bhi.n	8008f04 <_realloc_r+0x34>
 8008efe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008f02:	d8f4      	bhi.n	8008eee <_realloc_r+0x1e>
 8008f04:	4621      	mov	r1, r4
 8008f06:	4638      	mov	r0, r7
 8008f08:	f7ff fc36 	bl	8008778 <_malloc_r>
 8008f0c:	4680      	mov	r8, r0
 8008f0e:	b908      	cbnz	r0, 8008f14 <_realloc_r+0x44>
 8008f10:	4645      	mov	r5, r8
 8008f12:	e7ec      	b.n	8008eee <_realloc_r+0x1e>
 8008f14:	42b4      	cmp	r4, r6
 8008f16:	4622      	mov	r2, r4
 8008f18:	4629      	mov	r1, r5
 8008f1a:	bf28      	it	cs
 8008f1c:	4632      	movcs	r2, r6
 8008f1e:	f7ff fbb3 	bl	8008688 <memcpy>
 8008f22:	4629      	mov	r1, r5
 8008f24:	4638      	mov	r0, r7
 8008f26:	f7ff fbbd 	bl	80086a4 <_free_r>
 8008f2a:	e7f1      	b.n	8008f10 <_realloc_r+0x40>

08008f2c <_malloc_usable_size_r>:
 8008f2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f30:	1f18      	subs	r0, r3, #4
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	bfbc      	itt	lt
 8008f36:	580b      	ldrlt	r3, [r1, r0]
 8008f38:	18c0      	addlt	r0, r0, r3
 8008f3a:	4770      	bx	lr

08008f3c <_init>:
 8008f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f3e:	bf00      	nop
 8008f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f42:	bc08      	pop	{r3}
 8008f44:	469e      	mov	lr, r3
 8008f46:	4770      	bx	lr

08008f48 <_fini>:
 8008f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f4a:	bf00      	nop
 8008f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f4e:	bc08      	pop	{r3}
 8008f50:	469e      	mov	lr, r3
 8008f52:	4770      	bx	lr
